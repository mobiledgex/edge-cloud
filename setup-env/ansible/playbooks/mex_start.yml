- name: startup etcds
  gather_facts: no
  user: root
  hosts: etcds

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up etcd process
    shell: "nohup etcd  --name {{ item.etcdlocal.name }} --data-dir {{ item.etcdlocal.datadir }} --listen-peer-urls {{ item.etcdlocal.peeraddrs }} --listen-client-urls {{ item.etcdlocal.clientaddrs }} --advertise-client-urls {{ item.etcdlocal.clientaddrs }} --initial-advertise-peer-urls  {{ item.etcdlocal.peeraddrs }} --initial-cluster {{ item.etcdlocal.initialcluster }} -log-output stdout >> {{ remote_log_path }}/{{ item.etcdlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname 
    with_items:
       -  "{{ etcds }}"

- name: startup controllers
  gather_facts: no
  user: root
  hosts: controllers

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: "check controller binary installed {{ controller_remote_bin }} on {{ inventory_hostname }}"
    stat:
      path: "{{ controller_remote_bin }}"
    register: ctrl_stat
    failed_when: ctrl_stat.stat.exists == False
       
  - name: start up controller process
    shell: "nohup {{ controller_remote_bin }} --etcdUrls {{ item.controllerlocal.etcdaddrs }} --apiAddr {{ item.controllerlocal.apiaddr }} --notifyAddr {{ item.controllerlocal.notifyaddr }} --httpAddr {{ item.controllerlocal.httpaddr }} -d etcd,api,notify > {{ remote_log_path }}/{{ item.controllerlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname
    with_items:
       -  "{{ controllers }}"

- name: startup dmes
  gather_facts: no
  user: root
  hosts: dmes

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: check dme binary installed
    stat:
      path: "{{ dme_remote_bin }}"
    register: dme_stat
    failed_when: dme_stat.stat.exists == False


  - name: start up dme-server process
    shell: "nohup {{ dme_remote_bin }} --apiAddr {{ item.dmelocal.apiaddr }} --notifyAddrs {{ item.dmelocal.notifyaddrs }} --locverurl \"{{ item.dmelocal.locverurl }}\" --toksrvurl \"{{ item.dmelocal.toksrvurl }}\" --carrier {{ item.dmelocal.carrier }} -d dmelocapi,dmedb,dmereq > {{ remote_log_path }}/{{ item.dmelocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname 
    with_items:
       -  "{{ dmes }}"
   


- name: startup crms
  gather_facts: no
  user: root
  hosts: crms

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks: 

  - name: check crm binary exists
    stat:
      path: "{{ crm_remote_bin }}"
    register: crm_stat
    failed_when: crm_stat.stat.exists == False

  - name: start up crmserver process
    shell: "nohup {{ crm_remote_bin }} --apiAddr {{ item.crmlocal.apiaddr }} --notifyAddrs {{ item.crmlocal.notifyaddrs }} > {{ remote_log_path }}/{{ item.crmlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname
    with_items:
       -  "{{ crms }}"

- name: startup location api simulators
  gather_facts: no
  user: root
  hosts: locsims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: check locsim binary exists
    stat:
      path: "{{ locsim_remote_bin }}"
    register: loc_stat
    failed_when: loc_stat.stat.exists == False

  - name: start up locsim process
    shell: "nohup {{ locsim_remote_bin }} --port {{ item.locapisimlocal.port }} --file {{ locsim_remote_data_file }} > {{ remote_log_path }}/{{ item.locapisimlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname
    with_items:
       -  "{{ locsims }}"

- name: startup token server simulators
  gather_facts: no
  user: root
  hosts: toksims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: check toksim binary exists
    stat:
      path: "{{ toksim_remote_bin }}"
    register: tok_stat
    failed_when: tok_stat.stat.exists == False

  - name: start up toksim process
    shell: "nohup {{ toksim_remote_bin }} --port {{ item.toksrvsimlocal.port }} > {{ remote_log_path }}/{{ item.toksrvsimlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname
    with_items:
       -  "{{ toksims }}"

