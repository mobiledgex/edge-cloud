- name: startup etcds
  gather_facts: no
  user: root
  hosts: etcds

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up etcd process
    shell: "nohup etcd  --name {{ item.etcdlocal.name }} --data-dir {{ item.etcdlocal.datadir }} --listen-peer-urls {{ item.etcdlocal.peeraddrs }} --listen-client-urls {{ item.etcdlocal.clientaddrs }} --advertise-client-urls {{ item.etcdlocal.clientaddrs }} --initial-advertise-peer-urls  {{ item.etcdlocal.peeraddrs }} --initial-cluster {{ item.etcdlocal.initialcluster }} -log-output stdout >> {{ remote_log_path }}/{{ item.etcdlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname 
    with_items:
       -  "{{ etcds }}"

- name: startup controllers
  gather_facts: no
  user: root
  hosts: controllers

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: "check controller binary installed {{ controller_remote_bin }} on {{ inventory_hostname }}"
    stat:
      path: "{{ controller_remote_bin }}"
    register: ctrl_stat
    failed_when: ctrl_stat.stat.exists == False
 
  - name: set tls option
    set_fact:
       tlsopt: "{% if controllers[0].controllerlocal.tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{controllers[0].controllerlocal.tls.servercert|basename}} {% endif %}"
 
  - name: start up controller process
    shell: "nohup {{ controller_remote_bin }} --etcdUrls {{ item.controllerlocal.etcdaddrs }} --apiAddr {{ item.controllerlocal.apiaddr }} --notifyAddr {{ item.controllerlocal.notifyaddr }} --httpAddr {{ item.controllerlocal.httpaddr }} {{ tlsopt }}  -d etcd,api,notify > {{ remote_log_path }}/{{ item.controllerlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname and item.dockerimage == ""
    with_items:
       -  "{{ controllers }}"

  - name: start up controller container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.controllerlocal.name }}"
       command: "controller --etcdUrls {{ item.controllerlocal.etcdaddrs }} --apiAddr {{ item.controllerlocal.apiaddr }} --notifyAddr {{ item.controllerlocal.notifyaddr }} --httpAddr {{ item.controllerlocal.httpaddr }} {{ tlsopt }}  -d etcd,api,notify"
       network_mode: host
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ controllers }}"

- name: startup dmes
  gather_facts: no
  user: root
  hosts: dmes

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: docker login to mex repo
    docker_login:
      registry: registry.mobiledgex.net:5000
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"

  - name: set tls option
    set_fact:
       tlsopt: "{% if dmes[0].dmelocal.tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{dmes[0].dmelocal.tls.servercert|basename}} {% endif %}"

  - name: create remote log dir
    file:
       state: directory
       path: "{{ remote_log_path }}"

  - name: make dme env file
    copy: content="{{ item.envvars|to_nice_yaml|regex_replace(':\\s', '=') }}" dest="{{remote_log_path}}/{{item.dmelocal.name}}.env"
    when: item.dockerimage != "" and item.envvars|length >0
    with_items:
      - "{{dmes}}"

  - name: start up dme-server container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.dmelocal.name }}"
       env_file: "{{remote_log_path}}//{{item.dmelocal.name}}.env"
       command: "dme-server --apiAddr {{ item.dmelocal.apiaddr }} --httpAddr {{ item.dmelocal.httpaddr }} --notifyAddrs {{ item.dmelocal.notifyaddrs }} --locverurl \"{{ item.dmelocal.locverurl }}\" --toksrvurl \"{{ item.dmelocal.toksrvurl }}\" --carrier {{ item.dmelocal.carrier }} --cloudletKey '{{ item.dmelocal.cloudletkey }}' {{ tlsopt }} -d locapi,dmedb,dmereq"
       network_mode: host
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ dmes }}"

  - name: set creds from variables
    set_fact:
        envvar:  "{% if dmes[0].envvars['LOCAPI_USER'] is defined %} export LOCAPI_USER={{ dmes[0].envvars['LOCAPI_USER'] }} LOCAPI_PASSWD={{ dmes[0].envvars['LOCAPI_PASSWD']}}  {% else %} true {% endif %}" 

  - name: start up dme-server process
    shell: "{{ envvar }} && nohup {{ dme_remote_bin }} --apiAddr {{ item.dmelocal.apiaddr }} --httpAddr {{ item.dmelocal.httpaddr }} --notifyAddrs {{ item.dmelocal.notifyaddrs }} --locverurl \"{{ item.dmelocal.locverurl }}\" --toksrvurl \"{{ item.dmelocal.toksrvurl }}\" --carrier {{ item.dmelocal.carrier }} --cloudletKey '{{ item.dmelocal.cloudletkey }}' {{ tlsopt }} -d locapi,dmedb,dmereq > {{ remote_log_path }}/{{ item.dmelocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname and item.dockerimage == ""
    with_items:
       -  "{{ dmes }}"
   

- name: startup crms
  gather_facts: no
  user: root
  hosts: crms

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
 
  - name: set the docker creds
    set_fact: mex_docker_reg_pass="{{ lookup('env','MEX_DOCKER_REG_PASS') }}"

  - name: docker login to mex repo
    docker_login:
      registry: registry.mobiledgex.net:5000
      username: mobiledgex
      password: "{{mex_docker_reg_pass}}"

  - name: set tls option
    set_fact:
       tlsopt: "{% if crms[0].crmlocal.tls.servercert == '' %}  {% else %} --tls {{remote_tls_path}}/{{crms[0].crmlocal.tls.servercert|basename}} {% endif %}"

  - name: create remote log dir
    file:
       state: directory
       path: "{{ remote_log_path }}"


  - name: make crm env file
    copy: content="{{ item.envvars|to_nice_yaml|regex_replace(':\\s', '=') }}" dest="{{remote_log_path}}/{{item.crmlocal.name}}.env"
    when: item.dockerimage != "" and item.envvars|length >0
    with_items:
      - "{{crms}}"

  - name: start up crmserver container
    docker_container:
      pull: yes
      image: "{{ item.dockerimage }}"
      name: "{{ item.crmlocal.name }}"
      env_file: "{{remote_log_path}}/{{item.crmlocal.name}}.env"
      command: "crmserver --apiAddr {{ item.crmlocal.apiaddr }} --notifyAddrs {{ item.crmlocal.notifyaddrs }} --cloudletKey '{{ item.crmlocal.cloudletkey }}' {{ tlsopt }} --d api,notify,mexos"
      network_mode: host
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ crms }}"

  - name: start up crmserver process
    shell: "nohup {{ crm_remote_bin }} --apiAddr {{ item.crmlocal.apiaddr }} --notifyAddrs {{ item.crmlocal.notifyaddrs }} --cloudletKey '{{ item.crmlocal.cloudletkey }}' {{ tlsopt }} --d api,notify,mexos > {{ remote_log_path }}/{{ item.crmlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname and item.dockerimage == ""
    with_items:
       -  "{{ crms }}"

- name: startup location api simulators
  gather_facts: no
  user: root
  hosts: locsims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up locsim container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.locapisimlocal.name }}"
       command: "loc-api-sim --port {{ item.locapisimlocal.port }} --file {{ locsim_remote_data_file }}"
       network_mode: host
       volumes:
         - /var/tmp:/var/tmp
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ locsims }}"

  - name: start up locsim process
    shell: "nohup {{ locsim_remote_bin }} --port {{ item.locapisimlocal.port }} --file {{ locsim_remote_data_file }} > {{ remote_log_path }}/{{ item.locapisimlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname and item.dockerimage == ""
    with_items:
       -  "{{ locsims }}"

- name: startup token server simulators
  gather_facts: no
  user: root
  hosts: toksims

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:

  - name: start up toksim process
    shell: "nohup {{ toksim_remote_bin }} --port {{ item.toksrvsimlocal.port }} > {{ remote_log_path }}/{{ item.toksrvsimlocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname and item.dockerimage == ""
    with_items:
       -  "{{ toksims }}"

  - name: start up toksim container
    docker_container:
       pull: yes
       image: "{{ item.dockerimage }}"
       name: "{{ item.toksrvsimlocal.name }}"
       command: "tok-srv-sim --port {{ item.toksrvsimlocal.port }} "
       network_mode: host
    when: item.hostname == inventory_hostname and item.dockerimage != ""
    with_items:
       -  "{{ toksims }}"

- name: startup sample apps
  gather_facts: no
  user: root
  hosts: sampleapps

  vars_files:
  - mex_vars.yml
  - "{{ setupfile }}"

  tasks:
  - name: check sample app binary exists
    stat:
      path: "{{ remote_bin_path }}/{{ item.sampleapplocal.exename }}"
    register: samp_stat
    failed_when: samp_stat.stat.exists == False
    with_items:
       -  "{{ sampleapps }}"


  - name: start up sample app process
    shell: "nohup {{ remote_bin_path }}/{{ item.sampleapplocal.exename }} {{ item.sampleapplocal.args |join(' ') }} > {{ remote_log_path }}/{{ item.sampleapplocal.name }}.log 2>&1 &"
    when: item.hostname == inventory_hostname
    with_items:
       -  "{{ sampleapps }}"

