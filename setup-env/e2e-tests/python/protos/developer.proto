// Developer proto

syntax = "proto3";
package edgeproto;

import "annotations.proto";
import "protogen.proto";
import "result.proto";
import "gogo.proto";

// DeveloperKey uniquely identifies a Developer (Mobiledgex customer)
message DeveloperKey {
  // Organization or Company Name
  string name = 2;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// A Developer defines a Mobiledgex customer that can create and manage applications, clusters, instances, etc. Applications and other objects created by one Developer cannot be seen or managed by other Developers. Billing will likely be done on a per-developer basis.
// Creating a developer identity is likely the first step of (self-)registering a new customer.
// TODO: user management, auth, etc is not implemented yet.
message Developer {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  DeveloperKey key = 2 [(gogoproto.nullable) = false];
  // Login name (TODO)
  string username = 3;
  // Encrypted password (TODO)
  string passhash = 4;
  // Physical address
  string address = 5;
  // Contact email
  string email = 6 [(protogen.test_update) = true];
  // login cert?
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
}

service DeveloperApi {
  // Create a Developer
  rpc CreateDeveloper(Developer) returns (Result) {
    option (google.api.http) = {
      post: "/create/developer"
      body: "*"
    };
  }
  // Delete a Developer
  rpc DeleteDeveloper(Developer) returns (Result) {
    option (google.api.http) = {
      post: "/delete/developer"
      body: "*"
    };
  }
  // Update a Developer
  rpc UpdateDeveloper(Developer) returns (Result) {
    option (google.api.http) = {
      post: "/update/developer"
      body: "*"
    };
  }
  // Show Developers
  rpc ShowDeveloper(Developer) returns (stream Developer) {
    option (google.api.http) = {
      post: "/show/developer"
      body: "*"
    };
  }
}
