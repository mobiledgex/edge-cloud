# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import notice_pb2 as notice__pb2


class NotifyApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StreamNotice = channel.stream_stream(
        '/edgeproto.NotifyApi/StreamNotice',
        request_serializer=notice__pb2.NoticeRequest.SerializeToString,
        response_deserializer=notice__pb2.NoticeReply.FromString,
        )


class NotifyApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def StreamNotice(self, request_iterator, context):
    """Bidrectional stream for exchanging data between controller and DME/CRM
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NotifyApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StreamNotice': grpc.stream_stream_rpc_method_handler(
          servicer.StreamNotice,
          request_deserializer=notice__pb2.NoticeRequest.FromString,
          response_serializer=notice__pb2.NoticeReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'edgeproto.NotifyApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
