// Notice is the message used by the notify protocol to communicate and coordinate internally between different Mobiledgex services. For details on the notify protocol, see the "MEX Cloud Service Interactions" confluence article.
// In general, the protocol is used to synchronize state from one service to another. The protocol is fairly symmetric, with different state being synchronized both from server to client and client to server.
syntax = "proto3";
package edgeproto;

import "annotations.proto";
import "protogen.proto";
import "app_inst.proto";
import "cloudlet.proto";
import "flavor.proto";
import "clusterflavor.proto";
import "clusterinst.proto";
import "metric.proto";
import "node.proto";
import "gogo.proto";

// NoticeAction denotes what kind of action this notification is for.
enum NoticeAction {
  // No action
  NONE = 0;
  // Update the object  
  UPDATE = 1;
  // Delete the object
  DELETE = 2;
  // Version exchange negotitation message
  VERSION = 3;
  // Initial send all finished message
  SENDALL_END = 4;
}

// NoticeRequestor indicates which type of service the client is.
enum NoticeRequestor {
  // Invalid
  NoticeRequestorNone = 0;
  // Distributed Matching Engine
  NoticeRequestorDME = 1;
  // Cloudlet Resource Manager
  NoticeRequestorCRM = 2;
}

// NoticyReply is sent from server to client.
message NoticeReply {
  // Action to perform
  NoticeAction action = 1;
  // Protocol version supported by sender
  uint32 version = 3;
  // Data included (for UPDATE and DELETE)
  oneof data {
    AppInst appInst = 4;
    Cloudlet cloudlet = 5;
    Flavor flavor = 6;
    ClusterFlavor clusterFlavor = 8;
    ClusterInst clusterInst = 7;
  }
}

// NoticeRequest is sent from client to server.
message NoticeRequest {
  // Action to perform
  NoticeAction action = 1;
  // Protocol version supported by receiver
  uint32 version = 2;
  // Client requestor type
  NoticeRequestor requestor = 3;
  // Revision of database
  uint64 revision = 4;
  // Data included (UPDATE)
  oneof data {
    CloudletInfo cloudletInfo = 5;
    AppInstInfo appInstInfo = 6;
    ClusterInstInfo clusterInstInfo = 7;
    Metric metric = 8;
    Node node = 9;
  }
}

service NotifyApi {
  // Bidrectional stream for exchanging data between controller and DME/CRM
  rpc StreamNotice(stream NoticeRequest) returns (stream NoticeReply) {}
}
