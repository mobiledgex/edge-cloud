// A Cluster defines a Kubernetes cluster.
// One or more AppInsts will belong to a Cluster.

syntax = "proto3";
package edgeproto;

import "annotations.proto";
import "protogen.proto";
import "protocmd.proto";
import "result.proto";
import "developer.proto";
import "clusterflavor.proto";
import "gogo.proto";

// ClusterKey uniquely identifies a Cluster.
message ClusterKey {
  // Cluster name
  string name = 1;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Clusters define a set of resources that are provided to one or more Apps tied to the cluster. The set of resources is defined by the Cluster flavor. The Cluster definition here is analogous to a Kubernetes cluster.
// Like Apps, a Cluster is merely a definition, but is not instantiated on any Cloudlets. ClusterInsts are Clusters instantiated on a particular Cloudlet.
// In comparison to ClusterFlavors which are fairly static and controller by administrators, Clusters are much more dynamic and created and deleted by the user.
message Cluster {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique key
  ClusterKey key = 2 [(gogoproto.nullable) = false];
  // Default flavor of the Cluster, may be overridden on the ClusterInst
  ClusterFlavorKey default_flavor = 3 [(gogoproto.nullable) = false];
  // Auto is set to true when automatically created by back-end (internal use only)
  bool auto = 5 [(protogen.backend) = true];
  // Future: policy options on where this cluster can be created.
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protocmd.noconfig) = "Auto";
}

service ClusterApi {
  // Create a Cluster
  rpc CreateCluster(Cluster) returns (Result) {
    option (google.api.http) = {
      post: "/create/cluster"
      body: "*"
    };
  }
  // Delete a Cluster
  rpc DeleteCluster(Cluster) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cluster"
      body: "*"
    };
  }
  // Update a Cluster
  rpc UpdateCluster(Cluster) returns (Result) {
    option (google.api.http) = {
      post: "/update/cluster"
      body: "*"
    };
  }
  // Show Clusters
  rpc ShowCluster(Cluster) returns (stream Cluster) {
    option (google.api.http) = {
      post: "/show/cluster"
      body: "*"
    };
  }
}
