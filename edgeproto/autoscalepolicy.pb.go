// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoscalepolicy.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PolicyKey struct {
	// Name of the organization for the cluster that this policy will apply to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// Policy name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PolicyKey) Reset()                    { *m = PolicyKey{} }
func (m *PolicyKey) String() string            { return proto.CompactTextString(m) }
func (*PolicyKey) ProtoMessage()               {}
func (*PolicyKey) Descriptor() ([]byte, []int) { return fileDescriptorAutoscalepolicy, []int{0} }

// AutoScalePolicy defines when and how ClusterInsts will have their
// nodes scaled up or down.
type AutoScalePolicy struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key PolicyKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Minimum number of cluster nodes
	MinNodes uint32 `protobuf:"varint,3,opt,name=min_nodes,json=minNodes,proto3" json:"min_nodes,omitempty"`
	// Maximum number of cluster nodes
	MaxNodes uint32 `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// Scale up cpu threshold (percentage 1 to 100)
	ScaleUpCpuThresh uint32 `protobuf:"varint,5,opt,name=scale_up_cpu_thresh,json=scaleUpCpuThresh,proto3" json:"scale_up_cpu_thresh,omitempty"`
	// Scale down cpu threshold (percentage 1 to 100)
	ScaleDownCpuThresh uint32 `protobuf:"varint,6,opt,name=scale_down_cpu_thresh,json=scaleDownCpuThresh,proto3" json:"scale_down_cpu_thresh,omitempty"`
	// Trigger time defines how long trigger threshold must be satified in seconds before acting upon it.
	TriggerTimeSec uint32 `protobuf:"varint,7,opt,name=trigger_time_sec,json=triggerTimeSec,proto3" json:"trigger_time_sec,omitempty"`
}

func (m *AutoScalePolicy) Reset()                    { *m = AutoScalePolicy{} }
func (m *AutoScalePolicy) String() string            { return proto.CompactTextString(m) }
func (*AutoScalePolicy) ProtoMessage()               {}
func (*AutoScalePolicy) Descriptor() ([]byte, []int) { return fileDescriptorAutoscalepolicy, []int{1} }

func init() {
	proto.RegisterType((*PolicyKey)(nil), "edgeproto.PolicyKey")
	proto.RegisterType((*AutoScalePolicy)(nil), "edgeproto.AutoScalePolicy")
}
func (this *PolicyKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.PolicyKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAutoscalepolicy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AutoScalePolicyApi service

type AutoScalePolicyApiClient interface {
	// Create an Auto Scale Policy
	CreateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Delete an Auto Scale Policy
	DeleteAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Update an Auto Scale Policy
	UpdateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Show Auto Scale Policies. Any fields specified will be used to filter results.
	ShowAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (AutoScalePolicyApi_ShowAutoScalePolicyClient, error)
}

type autoScalePolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewAutoScalePolicyApiClient(cc *grpc.ClientConn) AutoScalePolicyApiClient {
	return &autoScalePolicyApiClient{cc}
}

func (c *autoScalePolicyApiClient) CreateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/CreateAutoScalePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) DeleteAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/DeleteAutoScalePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) UpdateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/UpdateAutoScalePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) ShowAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (AutoScalePolicyApi_ShowAutoScalePolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AutoScalePolicyApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AutoScalePolicyApi/ShowAutoScalePolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoScalePolicyApiShowAutoScalePolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoScalePolicyApi_ShowAutoScalePolicyClient interface {
	Recv() (*AutoScalePolicy, error)
	grpc.ClientStream
}

type autoScalePolicyApiShowAutoScalePolicyClient struct {
	grpc.ClientStream
}

func (x *autoScalePolicyApiShowAutoScalePolicyClient) Recv() (*AutoScalePolicy, error) {
	m := new(AutoScalePolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AutoScalePolicyApi service

type AutoScalePolicyApiServer interface {
	// Create an Auto Scale Policy
	CreateAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Delete an Auto Scale Policy
	DeleteAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Update an Auto Scale Policy
	UpdateAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Show Auto Scale Policies. Any fields specified will be used to filter results.
	ShowAutoScalePolicy(*AutoScalePolicy, AutoScalePolicyApi_ShowAutoScalePolicyServer) error
}

func RegisterAutoScalePolicyApiServer(s *grpc.Server, srv AutoScalePolicyApiServer) {
	s.RegisterService(&_AutoScalePolicyApi_serviceDesc, srv)
}

func _AutoScalePolicyApi_CreateAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).CreateAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/CreateAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).CreateAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_DeleteAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).DeleteAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/DeleteAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).DeleteAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_UpdateAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).UpdateAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/UpdateAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).UpdateAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_ShowAutoScalePolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AutoScalePolicy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoScalePolicyApiServer).ShowAutoScalePolicy(m, &autoScalePolicyApiShowAutoScalePolicyServer{stream})
}

type AutoScalePolicyApi_ShowAutoScalePolicyServer interface {
	Send(*AutoScalePolicy) error
	grpc.ServerStream
}

type autoScalePolicyApiShowAutoScalePolicyServer struct {
	grpc.ServerStream
}

func (x *autoScalePolicyApiShowAutoScalePolicyServer) Send(m *AutoScalePolicy) error {
	return x.ServerStream.SendMsg(m)
}

var _AutoScalePolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AutoScalePolicyApi",
	HandlerType: (*AutoScalePolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_CreateAutoScalePolicy_Handler,
		},
		{
			MethodName: "DeleteAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_DeleteAutoScalePolicy_Handler,
		},
		{
			MethodName: "UpdateAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_UpdateAutoScalePolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAutoScalePolicy",
			Handler:       _AutoScalePolicyApi_ShowAutoScalePolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "autoscalepolicy.proto",
}

func (m *PolicyKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organization) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *AutoScalePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoScalePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.MinNodes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.MinNodes))
	}
	if m.MaxNodes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.MaxNodes))
	}
	if m.ScaleUpCpuThresh != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.ScaleUpCpuThresh))
	}
	if m.ScaleDownCpuThresh != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.ScaleDownCpuThresh))
	}
	if m.TriggerTimeSec != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.TriggerTimeSec))
	}
	return i, nil
}

func encodeVarintAutoscalepolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PolicyKey) Matches(o *PolicyKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *PolicyKey) CopyInFields(src *PolicyKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *PolicyKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal PolicyKey key string", "obj", m)
	}
	return string(key)
}

func PolicyKeyStringParse(str string, key *PolicyKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal PolicyKey key string", "str", str)
	}
}

func (m *PolicyKey) NotFoundError() error {
	return fmt.Errorf("Policy key %s not found", m.GetKeyString())
}

func (m *PolicyKey) ExistsError() error {
	return fmt.Errorf("Policy key %s already exists", m.GetKeyString())
}

// Helper method to check that enums have valid values
func (m *PolicyKey) ValidateEnums() error {
	return nil
}

func (m *AutoScalePolicy) Matches(o *AutoScalePolicy, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.MinNodes != 0 {
		if o.MinNodes != m.MinNodes {
			return false
		}
	}
	if !opts.Filter || o.MaxNodes != 0 {
		if o.MaxNodes != m.MaxNodes {
			return false
		}
	}
	if !opts.Filter || o.ScaleUpCpuThresh != 0 {
		if o.ScaleUpCpuThresh != m.ScaleUpCpuThresh {
			return false
		}
	}
	if !opts.Filter || o.ScaleDownCpuThresh != 0 {
		if o.ScaleDownCpuThresh != m.ScaleDownCpuThresh {
			return false
		}
	}
	if !opts.Filter || o.TriggerTimeSec != 0 {
		if o.TriggerTimeSec != m.TriggerTimeSec {
			return false
		}
	}
	return true
}

const AutoScalePolicyFieldKey = "2"
const AutoScalePolicyFieldKeyOrganization = "2.1"
const AutoScalePolicyFieldKeyName = "2.2"
const AutoScalePolicyFieldMinNodes = "3"
const AutoScalePolicyFieldMaxNodes = "4"
const AutoScalePolicyFieldScaleUpCpuThresh = "5"
const AutoScalePolicyFieldScaleDownCpuThresh = "6"
const AutoScalePolicyFieldTriggerTimeSec = "7"

var AutoScalePolicyAllFields = []string{
	AutoScalePolicyFieldKeyOrganization,
	AutoScalePolicyFieldKeyName,
	AutoScalePolicyFieldMinNodes,
	AutoScalePolicyFieldMaxNodes,
	AutoScalePolicyFieldScaleUpCpuThresh,
	AutoScalePolicyFieldScaleDownCpuThresh,
	AutoScalePolicyFieldTriggerTimeSec,
}

var AutoScalePolicyAllFieldsMap = map[string]struct{}{
	AutoScalePolicyFieldKeyOrganization:    struct{}{},
	AutoScalePolicyFieldKeyName:            struct{}{},
	AutoScalePolicyFieldMinNodes:           struct{}{},
	AutoScalePolicyFieldMaxNodes:           struct{}{},
	AutoScalePolicyFieldScaleUpCpuThresh:   struct{}{},
	AutoScalePolicyFieldScaleDownCpuThresh: struct{}{},
	AutoScalePolicyFieldTriggerTimeSec:     struct{}{},
}

var AutoScalePolicyAllFieldsStringMap = map[string]string{
	AutoScalePolicyFieldKeyOrganization:    "Key Organization",
	AutoScalePolicyFieldKeyName:            "Key Name",
	AutoScalePolicyFieldMinNodes:           "Min Nodes",
	AutoScalePolicyFieldMaxNodes:           "Max Nodes",
	AutoScalePolicyFieldScaleUpCpuThresh:   "Scale Up Cpu Thresh",
	AutoScalePolicyFieldScaleDownCpuThresh: "Scale Down Cpu Thresh",
	AutoScalePolicyFieldTriggerTimeSec:     "Trigger Time Sec",
}

func (m *AutoScalePolicy) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AutoScalePolicyFieldKey+".")
}

func (m *AutoScalePolicy) DiffFields(o *AutoScalePolicy, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[AutoScalePolicyFieldKeyOrganization] = struct{}{}
		fields[AutoScalePolicyFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AutoScalePolicyFieldKeyName] = struct{}{}
		fields[AutoScalePolicyFieldKey] = struct{}{}
	}
	if m.MinNodes != o.MinNodes {
		fields[AutoScalePolicyFieldMinNodes] = struct{}{}
	}
	if m.MaxNodes != o.MaxNodes {
		fields[AutoScalePolicyFieldMaxNodes] = struct{}{}
	}
	if m.ScaleUpCpuThresh != o.ScaleUpCpuThresh {
		fields[AutoScalePolicyFieldScaleUpCpuThresh] = struct{}{}
	}
	if m.ScaleDownCpuThresh != o.ScaleDownCpuThresh {
		fields[AutoScalePolicyFieldScaleDownCpuThresh] = struct{}{}
	}
	if m.TriggerTimeSec != o.TriggerTimeSec {
		fields[AutoScalePolicyFieldTriggerTimeSec] = struct{}{}
	}
}

func (m *AutoScalePolicy) CopyInFields(src *AutoScalePolicy) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.MinNodes != src.MinNodes {
			m.MinNodes = src.MinNodes
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.MaxNodes != src.MaxNodes {
			m.MaxNodes = src.MaxNodes
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.ScaleUpCpuThresh != src.ScaleUpCpuThresh {
			m.ScaleUpCpuThresh = src.ScaleUpCpuThresh
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.ScaleDownCpuThresh != src.ScaleDownCpuThresh {
			m.ScaleDownCpuThresh = src.ScaleDownCpuThresh
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.TriggerTimeSec != src.TriggerTimeSec {
			m.TriggerTimeSec = src.TriggerTimeSec
			changed++
		}
	}
	return changed
}

func (s *AutoScalePolicy) HasFields() bool {
	return true
}

type AutoScalePolicyStore struct {
	kvstore objstore.KVStore
}

func NewAutoScalePolicyStore(kvstore objstore.KVStore) AutoScalePolicyStore {
	return AutoScalePolicyStore{kvstore: kvstore}
}

func (s *AutoScalePolicyStore) Create(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	err := m.Validate(AutoScalePolicyAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Update(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AutoScalePolicy
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Put(ctx context.Context, m *AutoScalePolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AutoScalePolicyAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Delete(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) LoadOne(key string) (*AutoScalePolicy, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AutoScalePolicy
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AutoScalePolicy data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AutoScalePolicyStore) STMGet(stm concurrency.STM, key *PolicyKey, buf *AutoScalePolicy) bool {
	keystr := objstore.DbKeyString("AutoScalePolicy", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AutoScalePolicyStore) STMPut(stm concurrency.STM, obj *AutoScalePolicy, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AutoScalePolicy", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AutoScalePolicy json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AutoScalePolicyStore) STMDel(stm concurrency.STM, key *PolicyKey) {
	keystr := objstore.DbKeyString("AutoScalePolicy", key)
	stm.Del(keystr)
}

type AutoScalePolicyKeyWatcher struct {
	cb func(ctx context.Context)
}

// AutoScalePolicyCache caches AutoScalePolicy objects in memory in a hash table
// and keeps them in sync with the database.
type AutoScalePolicyCache struct {
	Objs        map[PolicyKey]*AutoScalePolicy
	Mux         util.Mutex
	List        map[PolicyKey]struct{}
	FlushAll    bool
	NotifyCb    func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy)
	UpdatedCb   func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy)
	KeyWatchers map[PolicyKey][]*AutoScalePolicyKeyWatcher
}

func NewAutoScalePolicyCache() *AutoScalePolicyCache {
	cache := AutoScalePolicyCache{}
	InitAutoScalePolicyCache(&cache)
	return &cache
}

func InitAutoScalePolicyCache(cache *AutoScalePolicyCache) {
	cache.Objs = make(map[PolicyKey]*AutoScalePolicy)
	cache.KeyWatchers = make(map[PolicyKey][]*AutoScalePolicyKeyWatcher)
}

func (c *AutoScalePolicyCache) GetTypeString() string {
	return "AutoScalePolicy"
}

func (c *AutoScalePolicyCache) Get(key *PolicyKey, valbuf *AutoScalePolicy) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *AutoScalePolicyCache) HasKey(key *PolicyKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AutoScalePolicyCache) GetAllKeys(ctx context.Context, keys map[PolicyKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *AutoScalePolicyCache) Update(ctx context.Context, in *AutoScalePolicy, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *AutoScalePolicy) (*AutoScalePolicy, bool) {
		return in, true
	})
}

func (c *AutoScalePolicyCache) UpdateModFunc(ctx context.Context, key *PolicyKey, rev int64, modFunc func(old *AutoScalePolicy) (new *AutoScalePolicy, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &AutoScalePolicy{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate AutoScalePolicy", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AutoScalePolicyCache) Delete(ctx context.Context, in *AutoScalePolicy, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete AutoScalePolicy", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AutoScalePolicyCache) Prune(ctx context.Context, validKeys map[PolicyKey]struct{}) {
	notify := make(map[PolicyKey]*AutoScalePolicy)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoScalePolicyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AutoScalePolicyCache) Flush(ctx context.Context, notifyId int64) {
	if c.FlushAll {
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush AutoScalePolicy", "notifyId", notifyId)
		flushed := make(map[PolicyKey]*AutoScalePolicy)
		c.Mux.Lock()
		for key, _ := range c.Objs {
			flushed[key] = c.Objs[key]
			log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush AutoScalePolicy delete", "key", key)
			delete(c.Objs, key)
		}
		c.Mux.Unlock()
		return
	}
}

func (c *AutoScalePolicyCache) Show(filter *AutoScalePolicy, cb func(ret *AutoScalePolicy) error) error {
	log.DebugLog(log.DebugLevelApi, "Show AutoScalePolicy", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare AutoScalePolicy", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show AutoScalePolicy", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AutoScalePolicyGenericNotifyCb(fn func(key *PolicyKey, old *AutoScalePolicy)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*PolicyKey), obj.(*AutoScalePolicy))
	}
}

func (c *AutoScalePolicyCache) SetNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy)) {
	c.NotifyCb = fn
}

func (c *AutoScalePolicyCache) SetUpdatedCb(fn func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy)) {
	c.UpdatedCb = fn
}

func (c *AutoScalePolicyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AutoScalePolicyCache) WatchKey(key *PolicyKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AutoScalePolicyKeyWatcher, 0)
	}
	watcher := AutoScalePolicyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AutoScalePolicy", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AutoScalePolicyCache) TriggerKeyWatchers(ctx context.Context, key *PolicyKey) {
	watchers := make([]*AutoScalePolicyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *AutoScalePolicyCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := AutoScalePolicy{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AutoScalePolicy data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AutoScalePolicyCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := AutoScalePolicy{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	PolicyKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *AutoScalePolicyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[PolicyKey]struct{})
}

func (c *AutoScalePolicyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[PolicyKey]*AutoScalePolicy)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *AutoScalePolicy) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoScalePolicy) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoScalePolicy) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoScalePolicy) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoScalePolicy(a AutoScalePolicy, b AutoScalePolicy) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AutoScalePolicy) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *PolicyKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovAutoscalepolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAutoscalepolicy(uint64(l))
	}
	return n
}

func (m *AutoScalePolicy) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAutoscalepolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovAutoscalepolicy(uint64(l))
	if m.MinNodes != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.MinNodes))
	}
	if m.MaxNodes != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.MaxNodes))
	}
	if m.ScaleUpCpuThresh != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.ScaleUpCpuThresh))
	}
	if m.ScaleDownCpuThresh != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.ScaleDownCpuThresh))
	}
	if m.TriggerTimeSec != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.TriggerTimeSec))
	}
	return n
}

func sovAutoscalepolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAutoscalepolicy(x uint64) (n int) {
	return sovAutoscalepolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoscalepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoScalePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoScalePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoScalePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNodes", wireType)
			}
			m.MinNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNodes", wireType)
			}
			m.MaxNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleUpCpuThresh", wireType)
			}
			m.ScaleUpCpuThresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleUpCpuThresh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDownCpuThresh", wireType)
			}
			m.ScaleDownCpuThresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDownCpuThresh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerTimeSec", wireType)
			}
			m.TriggerTimeSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerTimeSec |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutoscalepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutoscalepolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAutoscalepolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAutoscalepolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAutoscalepolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAutoscalepolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutoscalepolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("autoscalepolicy.proto", fileDescriptorAutoscalepolicy) }

var fileDescriptorAutoscalepolicy = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xb1, 0x6b, 0x14, 0x4f,
	0x14, 0xc7, 0x33, 0xc9, 0x25, 0xbf, 0xdf, 0x8d, 0x51, 0x93, 0x49, 0x4e, 0x87, 0x33, 0x5c, 0xc2,
	0x56, 0x21, 0x5c, 0x6e, 0x35, 0x41, 0x90, 0x80, 0x45, 0x2e, 0xe9, 0x42, 0xa2, 0x6e, 0x12, 0x2d,
	0x2c, 0x8e, 0xc9, 0xee, 0x73, 0x6e, 0x70, 0x77, 0x66, 0xd9, 0x9d, 0xf5, 0x72, 0x56, 0x62, 0x65,
	0x29, 0xd8, 0x88, 0x95, 0x60, 0x63, 0x69, 0xe9, 0x5f, 0x20, 0x29, 0x05, 0x7b, 0xd1, 0x43, 0x50,
	0x52, 0x09, 0xb9, 0x80, 0xa5, 0xec, 0xdc, 0x72, 0x9e, 0xc7, 0x19, 0x50, 0x1b, 0x9b, 0xe5, 0xbd,
	0xf7, 0xfd, 0xbe, 0xc7, 0x67, 0xdf, 0xdb, 0xc5, 0x05, 0x96, 0x68, 0x15, 0xbb, 0xcc, 0x87, 0x50,
	0xf9, 0xc2, 0x6d, 0x56, 0xc2, 0x48, 0x69, 0x45, 0xf2, 0xe0, 0x71, 0x30, 0x61, 0x71, 0x86, 0x2b,
	0xc5, 0x7d, 0xb0, 0x59, 0x28, 0x6c, 0x26, 0xa5, 0xd2, 0x4c, 0x0b, 0x25, 0xe3, 0x8e, 0xb1, 0x38,
	0x1e, 0x41, 0x9c, 0xf8, 0x3a, 0xcb, 0xae, 0x70, 0xa1, 0xeb, 0xc9, 0x5e, 0xc5, 0x55, 0x81, 0x1d,
	0xa8, 0x3d, 0xe1, 0xa7, 0x63, 0xf6, 0xed, 0xf4, 0xb9, 0xe8, 0xfa, 0x2a, 0xf1, 0x6c, 0xe3, 0xe3,
	0x20, 0xbb, 0x41, 0xd6, 0x39, 0xcd, 0x15, 0x57, 0x26, 0xb4, 0xd3, 0xa8, 0x53, 0xb5, 0x6e, 0xe0,
	0xfc, 0x75, 0x83, 0xb5, 0x01, 0x4d, 0x62, 0xe1, 0x71, 0x15, 0x71, 0x26, 0xc5, 0x7d, 0x43, 0x40,
	0xd1, 0x1c, 0x9a, 0xcf, 0x3b, 0x3f, 0xd5, 0x08, 0xc1, 0x39, 0xc9, 0x02, 0xa0, 0xc3, 0x46, 0x33,
	0xf1, 0xca, 0xf8, 0x97, 0x23, 0x8a, 0xbe, 0x1d, 0x51, 0xf4, 0xea, 0xf9, 0x2c, 0xb2, 0x3e, 0x0f,
	0xe3, 0xb3, 0xab, 0x89, 0x56, 0xdb, 0xe9, 0x3b, 0x77, 0x86, 0x93, 0x73, 0x78, 0xec, 0x8e, 0x00,
	0xdf, 0x8b, 0x29, 0x9a, 0x1b, 0x99, 0xcf, 0x3b, 0x59, 0x46, 0xca, 0x78, 0xe4, 0x2e, 0x34, 0xcd,
	0xb0, 0x53, 0x4b, 0xd3, 0x95, 0xee, 0x4e, 0x2a, 0x5d, 0xa8, 0x6a, 0xee, 0xe0, 0xfd, 0xec, 0x90,
	0x93, 0xda, 0xc8, 0x05, 0x9c, 0x0f, 0x84, 0xac, 0x49, 0xe5, 0x41, 0x4c, 0x47, 0xe6, 0xd0, 0xfc,
	0x69, 0xe7, 0xff, 0x40, 0xc8, 0xad, 0x34, 0x37, 0x22, 0xdb, 0xcf, 0xc4, 0x5c, 0x26, 0xb2, 0xfd,
	0x8e, 0xb8, 0x88, 0xa7, 0xcc, 0x09, 0x6a, 0x49, 0x58, 0x73, 0xc3, 0xa4, 0xa6, 0xeb, 0x11, 0xc4,
	0x75, 0x3a, 0x6a, 0x6c, 0x13, 0x46, 0xda, 0x0d, 0xd7, 0xc2, 0x64, 0xc7, 0xd4, 0xc9, 0x25, 0x5c,
	0xe8, 0xd8, 0x3d, 0xd5, 0x90, 0xbd, 0x0d, 0x63, 0xa6, 0x81, 0x18, 0x71, 0x5d, 0x35, 0xe4, 0x8f,
	0x96, 0x0a, 0x9e, 0xd0, 0x91, 0xe0, 0x1c, 0xa2, 0x9a, 0x16, 0x01, 0xd4, 0x62, 0x70, 0xe9, 0x7f,
	0xa9, 0xbb, 0x9a, 0x7b, 0xd4, 0xa6, 0xc8, 0x39, 0x93, 0xa9, 0x3b, 0x22, 0x80, 0x6d, 0x70, 0x57,
	0xaa, 0xe9, 0xce, 0xbe, 0x1e, 0x51, 0xf4, 0xa0, 0x4d, 0xd1, 0xe3, 0x36, 0x45, 0x4f, 0xdb, 0x14,
	0x3d, 0x3b, 0xa6, 0x0b, 0xe9, 0x46, 0xaf, 0x6e, 0x40, 0xb3, 0xb2, 0xc5, 0x02, 0x28, 0xbb, 0x7e,
	0x12, 0x6b, 0x88, 0x16, 0x55, 0xc4, 0x4d, 0xf1, 0x5a, 0xcf, 0x2d, 0x96, 0xde, 0x8c, 0x62, 0xd2,
	0xb7, 0xe9, 0xd5, 0x50, 0x90, 0xd7, 0x08, 0x17, 0xd6, 0x22, 0x60, 0x1a, 0xfa, 0xcf, 0x50, 0xec,
	0xd9, 0x70, 0x9f, 0x56, 0x9c, 0xec, 0xd1, 0x1c, 0xf3, 0xc9, 0x59, 0xe1, 0x61, 0x9b, 0x5e, 0x76,
	0x20, 0x56, 0x49, 0xe4, 0xc2, 0x3a, 0xdc, 0x03, 0x5f, 0x85, 0x10, 0x75, 0xfc, 0xe5, 0x55, 0x37,
	0x65, 0xd8, 0x64, 0x92, 0x71, 0x28, 0xf7, 0xa3, 0xb5, 0x8e, 0xe9, 0xe4, 0x66, 0x76, 0x99, 0xf2,
	0x66, 0x76, 0x85, 0x87, 0xef, 0x3e, 0x3d, 0x19, 0x9e, 0xb1, 0xce, 0xdb, 0xae, 0x81, 0xb3, 0xfb,
	0x7e, 0x8c, 0x15, 0xb4, 0x40, 0x5e, 0x20, 0x5c, 0x58, 0x07, 0x1f, 0xfe, 0x1a, 0xfd, 0xf6, 0x1f,
	0xa3, 0x77, 0x29, 0x3d, 0xc3, 0xf1, 0x2b, 0xca, 0xdd, 0xd0, 0x63, 0xff, 0x02, 0x65, 0x62, 0x38,
	0x06, 0x51, 0xbe, 0x44, 0x78, 0x6a, 0xbb, 0xae, 0x1a, 0xbf, 0xc3, 0x78, 0x82, 0x66, 0xdd, 0x3a,
	0x6c, 0xd3, 0xe5, 0x93, 0x61, 0x6f, 0x0a, 0x68, 0x0c, 0x46, 0x2d, 0x5a, 0x05, 0x3b, 0xae, 0xab,
	0xc6, 0x00, 0xd0, 0x8b, 0xa8, 0x3a, 0x71, 0xf0, 0xb1, 0x34, 0x74, 0xd0, 0x2a, 0xa1, 0xb7, 0xad,
	0x12, 0xfa, 0xd0, 0x2a, 0xa1, 0xbd, 0x31, 0xc3, 0xb0, 0xfc, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x20,
	0x06, 0x51, 0x3d, 0x3e, 0x05, 0x00, 0x00,
}
