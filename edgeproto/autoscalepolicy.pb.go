// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoscalepolicy.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PolicyKey struct {
	// Name of the organization for the cluster that this policy will apply to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// Policy name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PolicyKey) Reset()         { *m = PolicyKey{} }
func (m *PolicyKey) String() string { return proto.CompactTextString(m) }
func (*PolicyKey) ProtoMessage()    {}
func (*PolicyKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b83abf40cad3a321, []int{0}
}
func (m *PolicyKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyKey.Merge(m, src)
}
func (m *PolicyKey) XXX_Size() int {
	return m.Size()
}
func (m *PolicyKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyKey.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyKey proto.InternalMessageInfo

// AutoScalePolicy defines when and how ClusterInsts will have their
// nodes scaled up or down.
type AutoScalePolicy struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key PolicyKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Minimum number of cluster nodes
	MinNodes uint32 `protobuf:"varint,3,opt,name=min_nodes,json=minNodes,proto3" json:"min_nodes,omitempty"`
	// Maximum number of cluster nodes
	MaxNodes uint32 `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// Scale up cpu threshold (percentage 1 to 100)
	ScaleUpCpuThresh uint32 `protobuf:"varint,5,opt,name=scale_up_cpu_thresh,json=scaleUpCpuThresh,proto3" json:"scale_up_cpu_thresh,omitempty"`
	// Scale down cpu threshold (percentage 1 to 100)
	ScaleDownCpuThresh uint32 `protobuf:"varint,6,opt,name=scale_down_cpu_thresh,json=scaleDownCpuThresh,proto3" json:"scale_down_cpu_thresh,omitempty"`
	// Trigger time defines how long trigger threshold must be satified in seconds before acting upon it.
	TriggerTimeSec uint32 `protobuf:"varint,7,opt,name=trigger_time_sec,json=triggerTimeSec,proto3" json:"trigger_time_sec,omitempty"`
}

func (m *AutoScalePolicy) Reset()         { *m = AutoScalePolicy{} }
func (m *AutoScalePolicy) String() string { return proto.CompactTextString(m) }
func (*AutoScalePolicy) ProtoMessage()    {}
func (*AutoScalePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b83abf40cad3a321, []int{1}
}
func (m *AutoScalePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoScalePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoScalePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoScalePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoScalePolicy.Merge(m, src)
}
func (m *AutoScalePolicy) XXX_Size() int {
	return m.Size()
}
func (m *AutoScalePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoScalePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AutoScalePolicy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PolicyKey)(nil), "edgeproto.PolicyKey")
	proto.RegisterType((*AutoScalePolicy)(nil), "edgeproto.AutoScalePolicy")
}

func init() { proto.RegisterFile("autoscalepolicy.proto", fileDescriptor_b83abf40cad3a321) }

var fileDescriptor_b83abf40cad3a321 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xcf, 0x6b, 0x13, 0x5b,
	0x14, 0xc7, 0x73, 0xdb, 0x34, 0xef, 0xe5, 0xbe, 0xf6, 0xbd, 0x74, 0xda, 0x3c, 0x2f, 0xb1, 0x4c,
	0x4b, 0x56, 0xa5, 0xa4, 0x19, 0xdb, 0x22, 0x48, 0xa1, 0x8b, 0xa6, 0xdd, 0x95, 0x56, 0x99, 0xfe,
	0x70, 0xe1, 0x22, 0xdc, 0xce, 0x1c, 0x6f, 0x2e, 0x9d, 0x99, 0x3b, 0xcc, 0x0f, 0xd3, 0xb8, 0x12,
	0x71, 0xe1, 0xb2, 0xe0, 0x46, 0x5c, 0x09, 0x6e, 0xc4, 0x95, 0xb8, 0xec, 0x5f, 0xd0, 0x8d, 0x50,
	0x70, 0x23, 0x08, 0xa2, 0xa9, 0x0b, 0xe9, 0x4a, 0x68, 0x1a, 0x04, 0x37, 0x32, 0x77, 0x86, 0x18,
	0x43, 0x2d, 0xa8, 0x1b, 0x37, 0xc3, 0x39, 0xe7, 0xfb, 0x3d, 0x77, 0x3e, 0xf7, 0x9c, 0x19, 0x9c,
	0xa7, 0x61, 0x20, 0x7c, 0x83, 0x5a, 0xe0, 0x0a, 0x8b, 0x1b, 0x8d, 0xb2, 0xeb, 0x89, 0x40, 0x28,
	0x59, 0x30, 0x19, 0xc8, 0xb0, 0x30, 0xc6, 0x84, 0x60, 0x16, 0x68, 0xd4, 0xe5, 0x1a, 0x75, 0x1c,
	0x11, 0xd0, 0x80, 0x0b, 0xc7, 0x8f, 0x8d, 0x85, 0x41, 0x0f, 0xfc, 0xd0, 0x0a, 0x92, 0xec, 0x0a,
	0xe3, 0x41, 0x2d, 0xdc, 0x2e, 0x1b, 0xc2, 0xd6, 0x6c, 0xb1, 0xcd, 0xad, 0xe8, 0x98, 0x5d, 0x2d,
	0x7a, 0x4e, 0x1b, 0x96, 0x08, 0x4d, 0x4d, 0xfa, 0x18, 0x38, 0x9d, 0x20, 0xe9, 0x1c, 0x65, 0x82,
	0x09, 0x19, 0x6a, 0x51, 0x14, 0x57, 0x8b, 0x16, 0xce, 0x5e, 0x93, 0x58, 0x2b, 0xd0, 0x50, 0x66,
	0xf0, 0xa0, 0xf0, 0x18, 0x75, 0xf8, 0x6d, 0x49, 0x40, 0xd0, 0x04, 0x9a, 0xcc, 0x56, 0x86, 0xf6,
	0xdb, 0x24, 0x1b, 0xb3, 0x0b, 0x8f, 0xe9, 0xdf, 0x59, 0x14, 0x15, 0xa7, 0x1d, 0x6a, 0x03, 0xe9,
	0x93, 0x56, 0xbc, 0xdf, 0x26, 0x99, 0xd8, 0xaa, 0xcb, 0xfa, 0xfc, 0xe0, 0xc7, 0x13, 0x82, 0x3e,
	0x9f, 0x10, 0xf4, 0xfc, 0xf1, 0x38, 0x2a, 0x7e, 0xe9, 0xc3, 0xff, 0x2d, 0x86, 0x81, 0x58, 0x8f,
	0xc6, 0x11, 0xbf, 0x57, 0xf9, 0x1f, 0x67, 0x6e, 0x72, 0xb0, 0x4c, 0x9f, 0xa0, 0x89, 0xfe, 0xc9,
	0xac, 0x9e, 0x64, 0x4a, 0x09, 0xf7, 0xef, 0x40, 0x43, 0x1e, 0xfc, 0xcf, 0xec, 0x68, 0xb9, 0x33,
	0xae, 0x72, 0x87, 0xb7, 0x92, 0x3e, 0x78, 0x3b, 0x9e, 0xd2, 0x23, 0x9b, 0x72, 0x11, 0x67, 0x6d,
	0xee, 0x54, 0x1d, 0x61, 0x82, 0x4f, 0xfa, 0x27, 0xd0, 0xe4, 0x90, 0xfe, 0xb7, 0xcd, 0x9d, 0xb5,
	0x28, 0x97, 0x22, 0xdd, 0x4d, 0xc4, 0x74, 0x22, 0xd2, 0xdd, 0x58, 0x9c, 0xc6, 0x23, 0x72, 0x3b,
	0xd5, 0xd0, 0xad, 0x1a, 0x6e, 0x58, 0x0d, 0x6a, 0x1e, 0xf8, 0x35, 0x32, 0x20, 0x6d, 0x39, 0x29,
	0x6d, 0xba, 0x4b, 0x6e, 0xb8, 0x21, 0xeb, 0xca, 0x0c, 0xce, 0xc7, 0x76, 0x53, 0xd4, 0x9d, 0xee,
	0x86, 0x8c, 0x6c, 0x50, 0xa4, 0xb8, 0x2c, 0xea, 0xce, 0xb7, 0x96, 0x32, 0xce, 0x05, 0x1e, 0x67,
	0x0c, 0xbc, 0x6a, 0xc0, 0x6d, 0xa8, 0xfa, 0x60, 0x90, 0xbf, 0x22, 0x77, 0x25, 0x7d, 0xbf, 0x45,
	0x90, 0xfe, 0x6f, 0xa2, 0x6e, 0x70, 0x1b, 0xd6, 0xc1, 0x98, 0xdf, 0x8a, 0x66, 0xf6, 0xe9, 0x84,
	0xa0, 0x3b, 0x2d, 0x82, 0xf6, 0x5a, 0x04, 0x3d, 0x6c, 0x11, 0xf4, 0xe8, 0x94, 0x4c, 0x45, 0x13,
	0x5d, 0x58, 0x81, 0x46, 0x79, 0x8d, 0xda, 0x50, 0x32, 0xac, 0xd0, 0x0f, 0xc0, 0x9b, 0x16, 0x1e,
	0x93, 0xc5, 0xab, 0x5d, 0x7b, 0x79, 0xd1, 0x26, 0xb9, 0x1d, 0x68, 0x2c, 0x74, 0xd7, 0x66, 0xdf,
	0x0c, 0x60, 0xa5, 0x67, 0xfa, 0x8b, 0x2e, 0x57, 0x5e, 0x22, 0x9c, 0x5f, 0xf2, 0x80, 0x06, 0xd0,
	0xbb, 0x9a, 0x42, 0xd7, 0xd4, 0x7b, 0xb4, 0xc2, 0x70, 0x97, 0xa6, 0xcb, 0x2f, 0xb4, 0x78, 0x0f,
	0x1d, 0xb7, 0xc8, 0x65, 0x1d, 0x7c, 0x11, 0x7a, 0x06, 0x2c, 0xc3, 0x2d, 0xb0, 0x84, 0x0b, 0x5e,
	0xdc, 0x50, 0x5a, 0x34, 0x22, 0x88, 0x55, 0xea, 0x50, 0x06, 0xa5, 0x5e, 0xde, 0xe6, 0x29, 0x19,
	0x5e, 0x4d, 0xd6, 0x55, 0x5a, 0x4d, 0x56, 0xf3, 0xac, 0x4d, 0x72, 0xbd, 0xc6, 0xbb, 0xaf, 0x3e,
	0x3c, 0xe8, 0x1b, 0x2b, 0x5e, 0xd0, 0x0c, 0x49, 0xac, 0xf5, 0xfc, 0x5c, 0xf3, 0x68, 0x4a, 0x79,
	0x82, 0x70, 0x7e, 0x19, 0x2c, 0xf8, 0xed, 0xfb, 0xdc, 0xf8, 0xe5, 0xeb, 0x74, 0x28, 0x4d, 0xc9,
	0xf1, 0x23, 0xca, 0x4d, 0xd7, 0xa4, 0x7f, 0x02, 0x65, 0x28, 0x39, 0xce, 0xa2, 0x7c, 0x8a, 0xf0,
	0xc8, 0x7a, 0x4d, 0xd4, 0x7f, 0x86, 0xf1, 0x1c, 0xad, 0x78, 0xfd, 0xb8, 0x45, 0xe6, 0xce, 0x87,
	0xdd, 0xe2, 0x50, 0x3f, 0x1b, 0xb5, 0x50, 0xcc, 0x6b, 0x7e, 0x4d, 0xd4, 0xcf, 0x00, 0xbd, 0x84,
	0x2a, 0x63, 0x07, 0xef, 0xd5, 0xd4, 0x41, 0x53, 0x45, 0x87, 0x4d, 0x15, 0xbd, 0x6b, 0xaa, 0x68,
	0xef, 0x48, 0x4d, 0x1d, 0x1e, 0xa9, 0xa9, 0xd7, 0x47, 0x6a, 0x6a, 0x3b, 0x23, 0x79, 0xe6, 0xbe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x19, 0x99, 0xe0, 0x8e, 0x05, 0x00, 0x00,
}

func (this *PolicyKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.PolicyKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAutoscalepolicy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AutoScalePolicyApiClient is the client API for AutoScalePolicyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutoScalePolicyApiClient interface {
	// Create an Auto Scale Policy
	CreateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Delete an Auto Scale Policy
	DeleteAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Update an Auto Scale Policy
	UpdateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error)
	// Show Auto Scale Policies. Any fields specified will be used to filter results.
	ShowAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (AutoScalePolicyApi_ShowAutoScalePolicyClient, error)
}

type autoScalePolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewAutoScalePolicyApiClient(cc *grpc.ClientConn) AutoScalePolicyApiClient {
	return &autoScalePolicyApiClient{cc}
}

func (c *autoScalePolicyApiClient) CreateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/CreateAutoScalePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) DeleteAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/DeleteAutoScalePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) UpdateAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AutoScalePolicyApi/UpdateAutoScalePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoScalePolicyApiClient) ShowAutoScalePolicy(ctx context.Context, in *AutoScalePolicy, opts ...grpc.CallOption) (AutoScalePolicyApi_ShowAutoScalePolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AutoScalePolicyApi_serviceDesc.Streams[0], "/edgeproto.AutoScalePolicyApi/ShowAutoScalePolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoScalePolicyApiShowAutoScalePolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoScalePolicyApi_ShowAutoScalePolicyClient interface {
	Recv() (*AutoScalePolicy, error)
	grpc.ClientStream
}

type autoScalePolicyApiShowAutoScalePolicyClient struct {
	grpc.ClientStream
}

func (x *autoScalePolicyApiShowAutoScalePolicyClient) Recv() (*AutoScalePolicy, error) {
	m := new(AutoScalePolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AutoScalePolicyApiServer is the server API for AutoScalePolicyApi service.
type AutoScalePolicyApiServer interface {
	// Create an Auto Scale Policy
	CreateAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Delete an Auto Scale Policy
	DeleteAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Update an Auto Scale Policy
	UpdateAutoScalePolicy(context.Context, *AutoScalePolicy) (*Result, error)
	// Show Auto Scale Policies. Any fields specified will be used to filter results.
	ShowAutoScalePolicy(*AutoScalePolicy, AutoScalePolicyApi_ShowAutoScalePolicyServer) error
}

// UnimplementedAutoScalePolicyApiServer can be embedded to have forward compatible implementations.
type UnimplementedAutoScalePolicyApiServer struct {
}

func (*UnimplementedAutoScalePolicyApiServer) CreateAutoScalePolicy(ctx context.Context, req *AutoScalePolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoScalePolicy not implemented")
}
func (*UnimplementedAutoScalePolicyApiServer) DeleteAutoScalePolicy(ctx context.Context, req *AutoScalePolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutoScalePolicy not implemented")
}
func (*UnimplementedAutoScalePolicyApiServer) UpdateAutoScalePolicy(ctx context.Context, req *AutoScalePolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoScalePolicy not implemented")
}
func (*UnimplementedAutoScalePolicyApiServer) ShowAutoScalePolicy(req *AutoScalePolicy, srv AutoScalePolicyApi_ShowAutoScalePolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowAutoScalePolicy not implemented")
}

func RegisterAutoScalePolicyApiServer(s *grpc.Server, srv AutoScalePolicyApiServer) {
	s.RegisterService(&_AutoScalePolicyApi_serviceDesc, srv)
}

func _AutoScalePolicyApi_CreateAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).CreateAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/CreateAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).CreateAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_DeleteAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).DeleteAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/DeleteAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).DeleteAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_UpdateAutoScalePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoScalePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoScalePolicyApiServer).UpdateAutoScalePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoScalePolicyApi/UpdateAutoScalePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoScalePolicyApiServer).UpdateAutoScalePolicy(ctx, req.(*AutoScalePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoScalePolicyApi_ShowAutoScalePolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AutoScalePolicy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoScalePolicyApiServer).ShowAutoScalePolicy(m, &autoScalePolicyApiShowAutoScalePolicyServer{stream})
}

type AutoScalePolicyApi_ShowAutoScalePolicyServer interface {
	Send(*AutoScalePolicy) error
	grpc.ServerStream
}

type autoScalePolicyApiShowAutoScalePolicyServer struct {
	grpc.ServerStream
}

func (x *autoScalePolicyApiShowAutoScalePolicyServer) Send(m *AutoScalePolicy) error {
	return x.ServerStream.SendMsg(m)
}

var _AutoScalePolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AutoScalePolicyApi",
	HandlerType: (*AutoScalePolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_CreateAutoScalePolicy_Handler,
		},
		{
			MethodName: "DeleteAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_DeleteAutoScalePolicy_Handler,
		},
		{
			MethodName: "UpdateAutoScalePolicy",
			Handler:    _AutoScalePolicyApi_UpdateAutoScalePolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAutoScalePolicy",
			Handler:       _AutoScalePolicyApi_ShowAutoScalePolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "autoscalepolicy.proto",
}

func (m *PolicyKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoScalePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoScalePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoScalePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerTimeSec != 0 {
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.TriggerTimeSec))
		i--
		dAtA[i] = 0x38
	}
	if m.ScaleDownCpuThresh != 0 {
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.ScaleDownCpuThresh))
		i--
		dAtA[i] = 0x30
	}
	if m.ScaleUpCpuThresh != 0 {
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.ScaleUpCpuThresh))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxNodes != 0 {
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.MaxNodes))
		i--
		dAtA[i] = 0x20
	}
	if m.MinNodes != 0 {
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(m.MinNodes))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAutoscalepolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintAutoscalepolicy(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAutoscalepolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovAutoscalepolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyKey) Matches(o *PolicyKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *PolicyKey) CopyInFields(src *PolicyKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *PolicyKey) DeepCopyIn(src *PolicyKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *PolicyKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal PolicyKey key string", "obj", m)
	}
	return string(key)
}

func PolicyKeyStringParse(str string, key *PolicyKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal PolicyKey key string", "str", str)
	}
}

func (m *PolicyKey) NotFoundError() error {
	return fmt.Errorf("Policy key %s not found", m.GetKeyString())
}

func (m *PolicyKey) ExistsError() error {
	return fmt.Errorf("Policy key %s already exists", m.GetKeyString())
}

var PolicyKeyTagOrganization = "policyorg"
var PolicyKeyTagName = "policy"

func (m *PolicyKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["policyorg"] = m.Organization
	tags["policy"] = m.Name
	return tags
}

// Helper method to check that enums have valid values
func (m *PolicyKey) ValidateEnums() error {
	return nil
}

func (m *AutoScalePolicy) Matches(o *AutoScalePolicy, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.MinNodes != 0 {
		if o.MinNodes != m.MinNodes {
			return false
		}
	}
	if !opts.Filter || o.MaxNodes != 0 {
		if o.MaxNodes != m.MaxNodes {
			return false
		}
	}
	if !opts.Filter || o.ScaleUpCpuThresh != 0 {
		if o.ScaleUpCpuThresh != m.ScaleUpCpuThresh {
			return false
		}
	}
	if !opts.Filter || o.ScaleDownCpuThresh != 0 {
		if o.ScaleDownCpuThresh != m.ScaleDownCpuThresh {
			return false
		}
	}
	if !opts.Filter || o.TriggerTimeSec != 0 {
		if o.TriggerTimeSec != m.TriggerTimeSec {
			return false
		}
	}
	return true
}

const AutoScalePolicyFieldKey = "2"
const AutoScalePolicyFieldKeyOrganization = "2.1"
const AutoScalePolicyFieldKeyName = "2.2"
const AutoScalePolicyFieldMinNodes = "3"
const AutoScalePolicyFieldMaxNodes = "4"
const AutoScalePolicyFieldScaleUpCpuThresh = "5"
const AutoScalePolicyFieldScaleDownCpuThresh = "6"
const AutoScalePolicyFieldTriggerTimeSec = "7"

var AutoScalePolicyAllFields = []string{
	AutoScalePolicyFieldKeyOrganization,
	AutoScalePolicyFieldKeyName,
	AutoScalePolicyFieldMinNodes,
	AutoScalePolicyFieldMaxNodes,
	AutoScalePolicyFieldScaleUpCpuThresh,
	AutoScalePolicyFieldScaleDownCpuThresh,
	AutoScalePolicyFieldTriggerTimeSec,
}

var AutoScalePolicyAllFieldsMap = map[string]struct{}{
	AutoScalePolicyFieldKeyOrganization:    struct{}{},
	AutoScalePolicyFieldKeyName:            struct{}{},
	AutoScalePolicyFieldMinNodes:           struct{}{},
	AutoScalePolicyFieldMaxNodes:           struct{}{},
	AutoScalePolicyFieldScaleUpCpuThresh:   struct{}{},
	AutoScalePolicyFieldScaleDownCpuThresh: struct{}{},
	AutoScalePolicyFieldTriggerTimeSec:     struct{}{},
}

var AutoScalePolicyAllFieldsStringMap = map[string]string{
	AutoScalePolicyFieldKeyOrganization:    "Key Organization",
	AutoScalePolicyFieldKeyName:            "Key Name",
	AutoScalePolicyFieldMinNodes:           "Min Nodes",
	AutoScalePolicyFieldMaxNodes:           "Max Nodes",
	AutoScalePolicyFieldScaleUpCpuThresh:   "Scale Up Cpu Thresh",
	AutoScalePolicyFieldScaleDownCpuThresh: "Scale Down Cpu Thresh",
	AutoScalePolicyFieldTriggerTimeSec:     "Trigger Time Sec",
}

func (m *AutoScalePolicy) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AutoScalePolicyFieldKey+".") || s == AutoScalePolicyFieldKey
}

func (m *AutoScalePolicy) DiffFields(o *AutoScalePolicy, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[AutoScalePolicyFieldKeyOrganization] = struct{}{}
		fields[AutoScalePolicyFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AutoScalePolicyFieldKeyName] = struct{}{}
		fields[AutoScalePolicyFieldKey] = struct{}{}
	}
	if m.MinNodes != o.MinNodes {
		fields[AutoScalePolicyFieldMinNodes] = struct{}{}
	}
	if m.MaxNodes != o.MaxNodes {
		fields[AutoScalePolicyFieldMaxNodes] = struct{}{}
	}
	if m.ScaleUpCpuThresh != o.ScaleUpCpuThresh {
		fields[AutoScalePolicyFieldScaleUpCpuThresh] = struct{}{}
	}
	if m.ScaleDownCpuThresh != o.ScaleDownCpuThresh {
		fields[AutoScalePolicyFieldScaleDownCpuThresh] = struct{}{}
	}
	if m.TriggerTimeSec != o.TriggerTimeSec {
		fields[AutoScalePolicyFieldTriggerTimeSec] = struct{}{}
	}
}

var UpdateAutoScalePolicyFieldsMap = map[string]struct{}{
	AutoScalePolicyFieldMinNodes:           struct{}{},
	AutoScalePolicyFieldMaxNodes:           struct{}{},
	AutoScalePolicyFieldScaleUpCpuThresh:   struct{}{},
	AutoScalePolicyFieldScaleDownCpuThresh: struct{}{},
	AutoScalePolicyFieldTriggerTimeSec:     struct{}{},
}

func (m *AutoScalePolicy) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateAutoScalePolicyFieldsMap[field]; !ok {
			if _, ok := AutoScalePolicyAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, AutoScalePolicyAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *AutoScalePolicy) CopyInFields(src *AutoScalePolicy) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.MinNodes != src.MinNodes {
			m.MinNodes = src.MinNodes
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.MaxNodes != src.MaxNodes {
			m.MaxNodes = src.MaxNodes
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.ScaleUpCpuThresh != src.ScaleUpCpuThresh {
			m.ScaleUpCpuThresh = src.ScaleUpCpuThresh
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.ScaleDownCpuThresh != src.ScaleDownCpuThresh {
			m.ScaleDownCpuThresh = src.ScaleDownCpuThresh
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.TriggerTimeSec != src.TriggerTimeSec {
			m.TriggerTimeSec = src.TriggerTimeSec
			changed++
		}
	}
	return changed
}

func (m *AutoScalePolicy) DeepCopyIn(src *AutoScalePolicy) {
	m.Key.DeepCopyIn(&src.Key)
	m.MinNodes = src.MinNodes
	m.MaxNodes = src.MaxNodes
	m.ScaleUpCpuThresh = src.ScaleUpCpuThresh
	m.ScaleDownCpuThresh = src.ScaleDownCpuThresh
	m.TriggerTimeSec = src.TriggerTimeSec
}

func (s *AutoScalePolicy) HasFields() bool {
	return true
}

type AutoScalePolicyStore struct {
	kvstore objstore.KVStore
}

func NewAutoScalePolicyStore(kvstore objstore.KVStore) AutoScalePolicyStore {
	return AutoScalePolicyStore{kvstore: kvstore}
}

func (s *AutoScalePolicyStore) Create(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	err := m.Validate(AutoScalePolicyAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Update(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AutoScalePolicy
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Put(ctx context.Context, m *AutoScalePolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AutoScalePolicyAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) Delete(ctx context.Context, m *AutoScalePolicy, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoScalePolicy", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoScalePolicyStore) LoadOne(key string) (*AutoScalePolicy, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AutoScalePolicy
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AutoScalePolicy data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AutoScalePolicyStore) STMGet(stm concurrency.STM, key *PolicyKey, buf *AutoScalePolicy) bool {
	keystr := objstore.DbKeyString("AutoScalePolicy", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AutoScalePolicyStore) STMPut(stm concurrency.STM, obj *AutoScalePolicy, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AutoScalePolicy", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AutoScalePolicy json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AutoScalePolicyStore) STMDel(stm concurrency.STM, key *PolicyKey) {
	keystr := objstore.DbKeyString("AutoScalePolicy", key)
	stm.Del(keystr)
}

type AutoScalePolicyKeyWatcher struct {
	cb func(ctx context.Context)
}

type AutoScalePolicyCacheData struct {
	Obj    *AutoScalePolicy
	ModRev int64
}

// AutoScalePolicyCache caches AutoScalePolicy objects in memory in a hash table
// and keeps them in sync with the database.
type AutoScalePolicyCache struct {
	Objs          map[PolicyKey]*AutoScalePolicyCacheData
	Mux           util.Mutex
	List          map[PolicyKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy)
	DeletedCbs    []func(ctx context.Context, old *AutoScalePolicy)
	KeyWatchers   map[PolicyKey][]*AutoScalePolicyKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *PolicyKey)
	DeletedKeyCbs []func(ctx context.Context, key *PolicyKey)
}

func NewAutoScalePolicyCache() *AutoScalePolicyCache {
	cache := AutoScalePolicyCache{}
	InitAutoScalePolicyCache(&cache)
	return &cache
}

func InitAutoScalePolicyCache(cache *AutoScalePolicyCache) {
	cache.Objs = make(map[PolicyKey]*AutoScalePolicyCacheData)
	cache.KeyWatchers = make(map[PolicyKey][]*AutoScalePolicyKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AutoScalePolicyCache) GetTypeString() string {
	return "AutoScalePolicy"
}

func (c *AutoScalePolicyCache) Get(key *PolicyKey, valbuf *AutoScalePolicy) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AutoScalePolicyCache) GetWithRev(key *PolicyKey, valbuf *AutoScalePolicy, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AutoScalePolicyCache) HasKey(key *PolicyKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AutoScalePolicyCache) GetAllKeys(ctx context.Context, cb func(key *PolicyKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AutoScalePolicyCache) Update(ctx context.Context, in *AutoScalePolicy, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *AutoScalePolicy) (*AutoScalePolicy, bool) {
		return in, true
	})
}

func (c *AutoScalePolicyCache) UpdateModFunc(ctx context.Context, key *PolicyKey, modRev int64, modFunc func(old *AutoScalePolicy) (new *AutoScalePolicy, changed bool)) {
	c.Mux.Lock()
	var old *AutoScalePolicy
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &AutoScalePolicy{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &AutoScalePolicy{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AutoScalePolicyCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AutoScalePolicyCache) Delete(ctx context.Context, in *AutoScalePolicy, modRev int64) {
	c.Mux.Lock()
	var old *AutoScalePolicy
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AutoScalePolicyCache) Prune(ctx context.Context, validKeys map[PolicyKey]struct{}) {
	notify := make(map[PolicyKey]*AutoScalePolicyCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoScalePolicyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AutoScalePolicyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AutoScalePolicyCache) Show(filter *AutoScalePolicy, cb func(ret *AutoScalePolicy) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AutoScalePolicyGenericNotifyCb(fn func(key *PolicyKey, old *AutoScalePolicy)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*PolicyKey), obj.(*AutoScalePolicy))
	}
}

func (c *AutoScalePolicyCache) SetNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy, modRev int64){fn}
}

func (c *AutoScalePolicyCache) SetUpdatedCb(fn func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy)) {
	c.UpdatedCbs = []func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy){fn}
}

func (c *AutoScalePolicyCache) SetDeletedCb(fn func(ctx context.Context, old *AutoScalePolicy)) {
	c.DeletedCbs = []func(ctx context.Context, old *AutoScalePolicy){fn}
}

func (c *AutoScalePolicyCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *AutoScalePolicyCache) SetDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *AutoScalePolicyCache) AddUpdatedCb(fn func(ctx context.Context, old *AutoScalePolicy, new *AutoScalePolicy)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AutoScalePolicyCache) AddDeletedCb(fn func(ctx context.Context, old *AutoScalePolicy)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AutoScalePolicyCache) AddNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *AutoScalePolicy, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AutoScalePolicyCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AutoScalePolicyCache) AddDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AutoScalePolicyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AutoScalePolicyCache) WatchKey(key *PolicyKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AutoScalePolicyKeyWatcher, 0)
	}
	watcher := AutoScalePolicyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AutoScalePolicy", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AutoScalePolicyCache) TriggerKeyWatchers(ctx context.Context, key *PolicyKey) {
	watchers := make([]*AutoScalePolicyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AutoScalePolicyCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := AutoScalePolicy{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AutoScalePolicy data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AutoScalePolicyCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := AutoScalePolicy{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	PolicyKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AutoScalePolicyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[PolicyKey]struct{})
}

func (c *AutoScalePolicyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[PolicyKey]*AutoScalePolicyCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoScalePolicyCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *AutoScalePolicy) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoScalePolicy) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoScalePolicy) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoScalePolicy) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoScalePolicy(a AutoScalePolicy, b AutoScalePolicy) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AutoScalePolicy) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AutoScalePolicy) IsValidArgsForCreateAutoScalePolicy() error {
	return nil
}

func (m *AutoScalePolicy) IsValidArgsForDeleteAutoScalePolicy() error {
	return nil
}

func (m *AutoScalePolicy) IsValidArgsForUpdateAutoScalePolicy() error {
	return nil
}

func (m *PolicyKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovAutoscalepolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAutoscalepolicy(uint64(l))
	}
	return n
}

func (m *AutoScalePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAutoscalepolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovAutoscalepolicy(uint64(l))
	if m.MinNodes != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.MinNodes))
	}
	if m.MaxNodes != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.MaxNodes))
	}
	if m.ScaleUpCpuThresh != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.ScaleUpCpuThresh))
	}
	if m.ScaleDownCpuThresh != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.ScaleDownCpuThresh))
	}
	if m.TriggerTimeSec != 0 {
		n += 1 + sovAutoscalepolicy(uint64(m.TriggerTimeSec))
	}
	return n
}

func sovAutoscalepolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAutoscalepolicy(x uint64) (n int) {
	return sovAutoscalepolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoscalepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoScalePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoScalePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoScalePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNodes", wireType)
			}
			m.MinNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNodes", wireType)
			}
			m.MaxNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleUpCpuThresh", wireType)
			}
			m.ScaleUpCpuThresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleUpCpuThresh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleDownCpuThresh", wireType)
			}
			m.ScaleDownCpuThresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleDownCpuThresh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerTimeSec", wireType)
			}
			m.TriggerTimeSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerTimeSec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutoscalepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAutoscalepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutoscalepolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutoscalepolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoscalepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAutoscalepolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAutoscalepolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAutoscalepolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAutoscalepolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutoscalepolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAutoscalepolicy = fmt.Errorf("proto: unexpected end of group")
)
