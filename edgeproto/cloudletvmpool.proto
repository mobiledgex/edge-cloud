// Cloudlet VM Pool proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "result.proto";
import "cloudlet.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

message CloudletVMNetInfo {
  // External IP
  string external_ip = 1;
  // Internal IP
  string internal_ip = 2;
}

// Cloudlet VM State
//
// CloudletVMState is the state of the CloudletVM
enum CloudletVMState {
	// Cloudlet VM is free to use
	CLOUDLET_VM_FREE = 0;
	// Cloudlet VM is in use
	CLOUDLET_VM_IN_USE = 1;
	// Cloudlet VM is in error state
	CLOUDLET_VM_ERROR = 2;
}

message CloudletVM {
  // VM Name
  string name = 1;
  // VM IP
  CloudletVMNetInfo net_info = 2 [(gogoproto.nullable) = false];
  // VM User
  string user = 3;
  // VM State
  CloudletVMState state = 4;
  // Last updated time
  google.protobuf.Timestamp updated_at = 5 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
}

// CloudletVMPool defines a pool of Cloudlet VMs to be part of a Cloudlet
message CloudletVMPool {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Cloudlet key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // list of Cloudlet VMs to be part of Cloudlet
  repeated CloudletVM cloudlet_vms = 3 [(gogoproto.nullable) = false];
  // Action performed on Cloudlet VM Pool
  CloudletVMAction action = 4 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Errors if any
  string error = 5;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.noconfig) = "CloudletVms:#.User,CloudletVms:#.State,CloudletVms:#.UpdatedAt.Seconds,CloudletVms:#.UpdatedAt.Nanos,Action,Error";
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
}

// CloudletVMPoolMember is used to add and remove Cloudlet VM from Cloudlet VM Pool
message CloudletVMPoolMember {
  // Cloudlet key
  CloudletKey key = 1 [(gogoproto.nullable) = false];
  // Cloudlet VM part of Cloudlet VM Pool
  CloudletVM cloudlet_vm = 2 [(gogoproto.nullable) = false];
  option (protogen.noconfig) = "CloudletVm.User,CloudletVm.State,CloudletVm.UpdatedAt.Seconds,CloudletVm.UpdatedAt.Nanos";
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
}

service CloudletVMPoolApi {
  // Create CloudletVMPool. Creates Cloudlet VM pool which will have
  // Cloudlet VMs defined.
  rpc CreateCloudletVMPool(CloudletVMPool) returns (Result) {
    option (google.api.http) = {
      post: "/create/cloudletvmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete CloudletVMPool. Deletes Cloudlet VM pool given that none
  // of Cloudlet VMs part of this pool is used.
  rpc DeleteCloudletVMPool(CloudletVMPool) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cloudetvmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Update CloudletVMPool. Updates a Cloudlet VM pool's VMs.
  rpc UpdateCloudletVMPool(CloudletVMPool) returns (Result) {
    option (google.api.http) = {
      post: "/update/cloudletvmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Show CloudletVMPools. Lists all the Cloudlet VMs part of the Cloudlet VM pool.
  rpc ShowCloudletVMPool(CloudletVMPool) returns (stream CloudletVMPool) {
    option (google.api.http) = {
      post: "/show/cloudletvmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Add CloudletVMPoolMember. Adds a Cloudlet VM to existing Cloudlet VM Pool.
  rpc AddCloudletVMPoolMember(CloudletVMPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/add/cloudletvmpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "CloudletVm.Name";
  }
  // Remove CloudletVMPoolMember. Removes a Cloudlet VM from existing Cloudlet VM Pool.
  rpc RemoveCloudletVMPoolMember(CloudletVMPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/rm/cloudletvmpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "CloudletVm.Name";
  }
}

// CloudletVMSpec defines the specification of Cloudlet VM required by CRM
message CloudletVMSpec {
  // Cloudlet VM name
  string name = 1;
  // Cloudlet VM has external network defined or not
  bool external_network  = 2;
  // Cloudlet VM has internal network defined or not
  bool internal_network  = 3;
}

// Cloudlet VM Action
//
// CloudletVMAction is the action to be performed on Cloudlet VM Pool
enum CloudletVMAction {
  // Done performing action
  CLOUDLET_VM_ACTION_DONE = 0;
  // Allocate Cloudlet VMs from Cloudlet VM Pool
  CLOUDLET_VM_ACTION_ALLOCATE = 1;
  // Release VMs from Cloudlet VM Pool
  CLOUDLET_VM_ACTION_RELEASE = 2;
}

// CloudletVMPoolInfo is used to manage CloudletVMPool from CRM
message CloudletVMPoolInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // Action performed on Cloudlet VM Pool
  CloudletVMAction action = 3;
  // Id of client assigned by server (internal use only)
  int64 notify_id = 4 [(protogen.hidetag) = "nocmp"];
  // VM User
  string user = 5;
  // Specs of VMs requested by the caller
  repeated CloudletVMSpec vm_specs = 6 [(gogoproto.nullable) = false];
  // list of Cloudlet VMs allocated
  repeated CloudletVM cloudlet_vms = 7 [(gogoproto.nullable) = false];
  // Errors if any
  string error = 8;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "none";
}

service CloudletVMPoolInfoApi {
  // Show CloudletVMPoolInfos
  rpc ShowCloudletVMPoolInfo(CloudletVMPoolInfo) returns (stream CloudletVMPoolInfo) {
    option (google.api.http) = {
      post: "/show/cloudletvmpoolinfo"
      body: "*"
    };
  }
}
