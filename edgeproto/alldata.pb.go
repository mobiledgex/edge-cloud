// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alldata.proto

package edgeproto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	io "io"
	math "math"
	math_bits "math/bits"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AllData contains all data that may be used for declarative
// create/delete, or as input for e2e tests.
// The order of fields here is important, as objects will be
// created in the order they are specified here, and deleted
// in the opposite order. The field ID (number) doesn't matter.
type AllData struct {
	Flavors                    []Flavor                    `protobuf:"bytes,2,rep,name=flavors,proto3" json:"flavors"`
	Settings                   *Settings                   `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	OperatorCodes              []OperatorCode              `protobuf:"bytes,4,rep,name=operator_codes,json=operatorCodes,proto3" json:"operator_codes"`
	ResTagTables               []ResTagTable               `protobuf:"bytes,6,rep,name=res_tag_tables,json=resTagTables,proto3" json:"res_tag_tables"`
	TrustPolicies              []TrustPolicy               `protobuf:"bytes,14,rep,name=trust_policies,json=trustPolicies,proto3" json:"trust_policies"`
	Cloudlets                  []Cloudlet                  `protobuf:"bytes,7,rep,name=cloudlets,proto3" json:"cloudlets"`
	CloudletInfos              []CloudletInfo              `protobuf:"bytes,8,rep,name=cloudlet_infos,json=cloudletInfos,proto3" json:"cloudlet_infos"`
	CloudletPools              []CloudletPool              `protobuf:"bytes,9,rep,name=cloudlet_pools,json=cloudletPools,proto3" json:"cloudlet_pools"`
	Networks                   []Network                   `protobuf:"bytes,25,rep,name=networks,proto3" json:"networks"`
	AutoProvPolicies           []AutoProvPolicy            `protobuf:"bytes,11,rep,name=auto_prov_policies,json=autoProvPolicies,proto3" json:"auto_prov_policies"`
	AutoProvPolicyCloudlets    []AutoProvPolicyCloudlet    `protobuf:"bytes,12,rep,name=auto_prov_policy_cloudlets,json=autoProvPolicyCloudlets,proto3" json:"auto_prov_policy_cloudlets"`
	AutoScalePolicies          []AutoScalePolicy           `protobuf:"bytes,13,rep,name=auto_scale_policies,json=autoScalePolicies,proto3" json:"auto_scale_policies"`
	IdleReservableClusterInsts *IdleReservableClusterInsts `protobuf:"bytes,20,opt,name=idle_reservable_cluster_insts,json=idleReservableClusterInsts,proto3" json:"idle_reservable_cluster_insts,omitempty"`
	ClusterInsts               []ClusterInst               `protobuf:"bytes,15,rep,name=cluster_insts,json=clusterInsts,proto3" json:"cluster_insts"`
	Apps                       []App                       `protobuf:"bytes,16,rep,name=apps,proto3" json:"apps"`
	AppInstances               []AppInst                   `protobuf:"bytes,17,rep,name=app_instances,json=appInstances,proto3" json:"app_instances"`
	AppInstRefs                []AppInstRefs               `protobuf:"bytes,18,rep,name=app_inst_refs,json=appInstRefs,proto3" json:"app_inst_refs"`
	ClusterRefs                []ClusterRefs               `protobuf:"bytes,27,rep,name=cluster_refs,json=clusterRefs,proto3" json:"cluster_refs"`
	VmPools                    []VMPool                    `protobuf:"bytes,19,rep,name=vm_pools,json=vmPools,proto3" json:"vm_pools"`
	GpuDrivers                 []GPUDriver                 `protobuf:"bytes,21,rep,name=gpu_drivers,json=gpuDrivers,proto3" json:"gpu_drivers"`
	AlertPolicies              []AlertPolicy               `protobuf:"bytes,22,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies"`
	FlowRateLimitSettings      []FlowRateLimitSettings     `protobuf:"bytes,23,rep,name=flow_rate_limit_settings,json=flowRateLimitSettings,proto3" json:"flow_rate_limit_settings"`
	MaxReqsRateLimitSettings   []MaxReqsRateLimitSettings  `protobuf:"bytes,24,rep,name=max_reqs_rate_limit_settings,json=maxReqsRateLimitSettings,proto3" json:"max_reqs_rate_limit_settings"`
	TrustPolicyExceptions      []TrustPolicyException      `protobuf:"bytes,26,rep,name=trust_policy_exceptions,json=trustPolicyExceptions,proto3" json:"trust_policy_exceptions"`
}

func (m *AllData) Reset()         { *m = AllData{} }
func (m *AllData) String() string { return proto.CompactTextString(m) }
func (*AllData) ProtoMessage()    {}
func (*AllData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eca40466c9a5f17, []int{0}
}
func (m *AllData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllData.Merge(m, src)
}
func (m *AllData) XXX_Size() int {
	return m.Size()
}
func (m *AllData) XXX_DiscardUnknown() {
	xxx_messageInfo_AllData.DiscardUnknown(m)
}

var xxx_messageInfo_AllData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllData)(nil), "edgeproto.AllData")
}

func init() { proto.RegisterFile("alldata.proto", fileDescriptor_8eca40466c9a5f17) }

var fileDescriptor_8eca40466c9a5f17 = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcf, 0x6f, 0x23, 0x35,
	0x14, 0x4e, 0xa0, 0xda, 0xa6, 0x4e, 0x93, 0xdd, 0xb8, 0xed, 0xd6, 0x1b, 0x96, 0x6c, 0x01, 0x21,
	0xf5, 0x42, 0x23, 0x0a, 0x12, 0x08, 0x84, 0xa0, 0x3f, 0x00, 0x55, 0xa2, 0x10, 0x65, 0x0b, 0x37,
	0x64, 0xb9, 0x33, 0xce, 0xec, 0x08, 0x27, 0xf6, 0xda, 0x9e, 0x69, 0xfb, 0x5f, 0x70, 0xe4, 0xc8,
	0xdf, 0xc2, 0xa9, 0xc7, 0x3d, 0x72, 0x42, 0xd0, 0xfe, 0x0f, 0x3d, 0x23, 0x7b, 0xec, 0x19, 0x4f,
	0x7e, 0x5c, 0xa2, 0xf1, 0xf7, 0xbe, 0xef, 0x7b, 0xf6, 0xb3, 0xdf, 0x0b, 0xe8, 0x10, 0xc6, 0x62,
	0xa2, 0xc9, 0x81, 0x90, 0x5c, 0x73, 0xb8, 0x41, 0xe3, 0x84, 0xda, 0xcf, 0xfe, 0xe7, 0x49, 0xaa,
	0x5f, 0x65, 0x97, 0x07, 0x11, 0x9f, 0x0e, 0xa7, 0xfc, 0x32, 0x65, 0x26, 0x74, 0x3d, 0x34, 0xbf,
	0x1f, 0x45, 0x8c, 0x67, 0xf1, 0xd0, 0xf2, 0x12, 0x3a, 0x2b, 0x3f, 0x0a, 0x93, 0x7e, 0x57, 0x51,
	0xad, 0xd3, 0x59, 0xa2, 0xdc, 0x7a, 0x73, 0xc2, 0x48, 0xce, 0xa5, 0x5b, 0x41, 0x2e, 0xa8, 0x24,
	0x9a, 0xcb, 0x88, 0xc7, 0xd4, 0x61, 0x3d, 0x49, 0x95, 0x26, 0x89, 0x26, 0x97, 0xcc, 0x43, 0x5d,
	0x9b, 0x83, 0x51, 0xed, 0x65, 0x7e, 0x2d, 0x38, 0x67, 0xde, 0x38, 0x9f, 0x06, 0xab, 0x6d, 0x92,
	0x69, 0x2e, 0x24, 0xcf, 0x05, 0x67, 0x69, 0x74, 0xe3, 0xd0, 0x1d, 0x83, 0xaa, 0x88, 0x30, 0x5a,
	0x83, 0x7b, 0x5a, 0x66, 0x4a, 0xd7, 0xa0, 0x7e, 0x00, 0xd1, 0xeb, 0x88, 0x0a, 0x9d, 0x72, 0x7f,
	0xa4, 0xce, 0x8c, 0xea, 0x2b, 0x2e, 0x7f, 0xf3, 0xea, 0x88, 0x65, 0x4a, 0x53, 0x99, 0xce, 0x94,
	0xdf, 0xdf, 0x06, 0x11, 0xc2, 0x93, 0x89, 0x10, 0x41, 0x04, 0x48, 0x3a, 0xf1, 0xa5, 0xe8, 0x11,
	0x46, 0x65, 0x3d, 0xed, 0x63, 0x49, 0x34, 0x65, 0xe9, 0x34, 0xf5, 0xfc, 0xed, 0x84, 0x27, 0xdc,
	0x7e, 0x0e, 0xcd, 0x57, 0x81, 0xbe, 0xff, 0x57, 0x07, 0xac, 0x1f, 0x31, 0x76, 0x4a, 0x34, 0x81,
	0x1f, 0x83, 0xf5, 0xa2, 0xa4, 0x0a, 0xbd, 0xb5, 0xf7, 0xf6, 0x7e, 0xfb, 0xb0, 0x77, 0x50, 0xde,
	0xdb, 0xc1, 0x77, 0x36, 0x72, 0xbc, 0x76, 0xfb, 0xcf, 0x8b, 0xc6, 0xd8, 0xf3, 0xe0, 0x10, 0xb4,
	0xfc, 0xad, 0xa0, 0xe6, 0x5e, 0x73, 0xbf, 0x7d, 0xb8, 0x15, 0x68, 0x5e, 0xba, 0xd0, 0xb8, 0x24,
	0xc1, 0x53, 0xd0, 0xf5, 0x17, 0x85, 0xcd, 0x4d, 0x29, 0xb4, 0x66, 0x53, 0xed, 0x06, 0xb2, 0x9f,
	0x1c, 0xe1, 0x84, 0xc7, 0xd4, 0x25, 0xec, 0xf0, 0x00, 0x53, 0xf0, 0x18, 0x74, 0x25, 0x55, 0x58,
	0x93, 0x04, 0xdb, 0xcb, 0x55, 0xe8, 0x91, 0x75, 0x79, 0x1a, 0xb8, 0x8c, 0xa9, 0xba, 0x20, 0xc9,
	0x85, 0x09, 0x3b, 0x93, 0x4d, 0x59, 0x41, 0x0a, 0x9e, 0x80, 0xae, 0xbd, 0x19, 0x6c, 0xcb, 0x96,
	0x52, 0x85, 0xba, 0x0b, 0x1e, 0x17, 0x86, 0x30, 0xb2, 0x65, 0xf5, 0x1b, 0xd1, 0x25, 0x94, 0x52,
	0x05, 0x3f, 0x03, 0x1b, 0xfe, 0x01, 0x29, 0xb4, 0x6e, 0xf5, 0x61, 0x01, 0x4e, 0x5c, 0xcc, 0x89,
	0x2b, 0xae, 0xa9, 0x83, 0x5f, 0xe0, 0x74, 0x36, 0xe1, 0x0a, 0xb5, 0x16, 0xea, 0xe0, 0xd5, 0x67,
	0xb3, 0x09, 0xf7, 0xe9, 0xa3, 0x00, 0xab, 0xbb, 0x98, 0x27, 0xab, 0xd0, 0xc6, 0x4a, 0x97, 0x11,
	0xe7, 0x6c, 0xde, 0xc5, 0x60, 0x0a, 0x7e, 0x0a, 0x5a, 0xee, 0x1d, 0x2a, 0xf4, 0xcc, 0xea, 0x61,
	0xa0, 0xff, 0xb1, 0x08, 0x39, 0x69, 0xc9, 0x84, 0xe7, 0x00, 0x9a, 0x1e, 0xc0, 0xa6, 0x35, 0xaa,
	0x1a, 0xb6, 0xad, 0xfe, 0x59, 0xa0, 0x3f, 0xca, 0x34, 0x1f, 0x49, 0x9e, 0xd7, 0xca, 0xf8, 0x84,
	0x84, 0xa8, 0xa9, 0x64, 0x0c, 0xfa, 0x73, 0x76, 0x37, 0xb8, 0x2a, 0xed, 0xa6, 0xb5, 0x7d, 0x6f,
	0xa5, 0xed, 0x5c, 0xa1, 0x77, 0xc9, 0xd2, 0xa8, 0x82, 0x23, 0xb0, 0x65, 0xb3, 0xd8, 0xce, 0xad,
	0x76, 0xdd, 0xb1, 0xf6, 0xfd, 0x39, 0xfb, 0x97, 0x86, 0x54, 0xdb, 0x76, 0x8f, 0xd4, 0x60, 0xb3,
	0xef, 0x57, 0xe0, 0xdd, 0x34, 0x66, 0x14, 0x4b, 0xaa, 0xa8, 0xcc, 0xcd, 0xd3, 0xc2, 0xae, 0x8b,
	0xb1, 0x69, 0x56, 0x85, 0xb6, 0x6d, 0x5b, 0x7c, 0x18, 0x78, 0x9f, 0xc5, 0x8c, 0x8e, 0x4b, 0xfa,
	0x49, 0xc1, 0x3e, 0x33, 0xe4, 0x71, 0x3f, 0x5d, 0x19, 0x83, 0x47, 0xa0, 0x53, 0x77, 0x7e, 0xbc,
	0xf0, 0x5e, 0x03, 0xbe, 0x7f, 0xf3, 0x51, 0x68, 0xb1, 0x0f, 0xd6, 0x88, 0x10, 0x0a, 0x3d, 0xb1,
	0xca, 0x6e, 0x78, 0x5e, 0x21, 0x9c, 0xc2, 0x32, 0xe0, 0x57, 0xc0, 0x8c, 0x1b, 0x9b, 0x88, 0xcc,
	0x22, 0xaa, 0x50, 0x6f, 0xe1, 0x61, 0x1c, 0x09, 0x11, 0x26, 0x22, 0xc5, 0xd2, 0xb2, 0xe1, 0x37,
	0x95, 0x1c, 0x9b, 0x39, 0x85, 0xe0, 0xc2, 0x5e, 0x9d, 0x7c, 0x4c, 0x27, 0xca, 0x59, 0xb4, 0x49,
	0x05, 0xc1, 0xaf, 0x81, 0xdf, 0x7a, 0x61, 0xf0, 0xce, 0xaa, 0xc3, 0x86, 0x06, 0x51, 0x05, 0xc1,
	0x43, 0xd0, 0xca, 0xa7, 0xae, 0x2b, 0xb6, 0x16, 0xc6, 0xd9, 0x2f, 0xe7, 0x41, 0x3f, 0xac, 0xe7,
	0xd3, 0xa2, 0x13, 0xbe, 0x04, 0xed, 0x44, 0x64, 0x38, 0x96, 0x69, 0x4e, 0xa5, 0x42, 0x3b, 0x56,
	0xb6, 0x1d, 0xc8, 0xbe, 0x1f, 0xfd, 0x7c, 0x6a, 0x83, 0x4e, 0x09, 0x12, 0x91, 0x15, 0x80, 0x1d,
	0x28, 0x76, 0x0c, 0x57, 0xcf, 0xea, 0xe9, 0xe2, 0xa1, 0x0d, 0xa1, 0x3e, 0x50, 0x48, 0x09, 0x99,
	0xe7, 0x84, 0x01, 0x9a, 0x30, 0x7e, 0x85, 0xcd, 0xf4, 0xc6, 0x76, 0x7c, 0xe3, 0x72, 0xc0, 0xee,
	0x5a, 0xbb, 0xbd, 0xda, 0x50, 0xe6, 0x57, 0x63, 0xa2, 0xe9, 0x0f, 0x86, 0xe8, 0xa7, 0xad, 0x33,
	0xde, 0x99, 0x2c, 0x0b, 0xc2, 0x14, 0x3c, 0x9f, 0x92, 0x6b, 0x2c, 0xe9, 0x6b, 0xb5, 0x34, 0x09,
	0xb2, 0x49, 0x3e, 0x08, 0x92, 0x9c, 0x93, 0xeb, 0x31, 0x7d, 0xad, 0x56, 0xe5, 0x41, 0xd3, 0x15,
	0x71, 0xf8, 0x2b, 0xd8, 0x0d, 0x26, 0xec, 0x0d, 0x2e, 0xff, 0xfd, 0x14, 0xea, 0xdb, 0x2c, 0x2f,
	0x96, 0x8f, 0xda, 0x6f, 0x3d, 0xcf, 0x9f, 0x44, 0x2f, 0x89, 0xa9, 0x2f, 0x5a, 0x7f, 0x3c, 0xa0,
	0xe6, 0x9f, 0x0f, 0xa8, 0x71, 0xfc, 0xfc, 0xf6, 0xbf, 0x41, 0xe3, 0xf6, 0x6e, 0xd0, 0x7c, 0x73,
	0x37, 0x68, 0xfe, 0x7b, 0x37, 0x68, 0xfe, 0x7e, 0x3f, 0x68, 0xbc, 0xb9, 0x1f, 0x34, 0xfe, 0xbe,
	0x1f, 0x34, 0x2e, 0x1f, 0xd9, 0x04, 0x9f, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x5f, 0xba,
	0x05, 0x94, 0x08, 0x00, 0x00,
}

func (m *AllData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterRefs) > 0 {
		for iNdEx := len(m.ClusterRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.TrustPolicyExceptions) > 0 {
		for iNdEx := len(m.TrustPolicyExceptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustPolicyExceptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Networks) > 0 {
		for iNdEx := len(m.Networks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Networks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.MaxReqsRateLimitSettings) > 0 {
		for iNdEx := len(m.MaxReqsRateLimitSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxReqsRateLimitSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.FlowRateLimitSettings) > 0 {
		for iNdEx := len(m.FlowRateLimitSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowRateLimitSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.GpuDrivers) > 0 {
		for iNdEx := len(m.GpuDrivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GpuDrivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.IdleReservableClusterInsts != nil {
		{
			size, err := m.IdleReservableClusterInsts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlldata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.VmPools) > 0 {
		for iNdEx := len(m.VmPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.AppInstRefs) > 0 {
		for iNdEx := len(m.AppInstRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppInstRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.AppInstances) > 0 {
		for iNdEx := len(m.AppInstances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppInstances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Apps) > 0 {
		for iNdEx := len(m.Apps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ClusterInsts) > 0 {
		for iNdEx := len(m.ClusterInsts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterInsts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.TrustPolicies) > 0 {
		for iNdEx := len(m.TrustPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.AutoScalePolicies) > 0 {
		for iNdEx := len(m.AutoScalePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoScalePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.AutoProvPolicyCloudlets) > 0 {
		for iNdEx := len(m.AutoProvPolicyCloudlets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoProvPolicyCloudlets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.AutoProvPolicies) > 0 {
		for iNdEx := len(m.AutoProvPolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AutoProvPolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.CloudletPools) > 0 {
		for iNdEx := len(m.CloudletPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudletPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CloudletInfos) > 0 {
		for iNdEx := len(m.CloudletInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CloudletInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Cloudlets) > 0 {
		for iNdEx := len(m.Cloudlets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cloudlets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ResTagTables) > 0 {
		for iNdEx := len(m.ResTagTables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResTagTables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OperatorCodes) > 0 {
		for iNdEx := len(m.OperatorCodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorCodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Flavors) > 0 {
		for iNdEx := len(m.Flavors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flavors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlldata(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlldata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlldata(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlldata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllData) DeepCopyIn(src *AllData) {
	if src.Settings != nil {
		var tmp_Settings Settings
		tmp_Settings.DeepCopyIn(src.Settings)
		m.Settings = &tmp_Settings
	} else {
		m.Settings = nil
	}
	if src.Flavors != nil {
		m.Flavors = make([]Flavor, len(src.Flavors), len(src.Flavors))
		for ii, s := range src.Flavors {
			m.Flavors[ii].DeepCopyIn(&s)
		}
	} else {
		m.Flavors = nil
	}
	if src.OperatorCodes != nil {
		m.OperatorCodes = make([]OperatorCode, len(src.OperatorCodes), len(src.OperatorCodes))
		for ii, s := range src.OperatorCodes {
			m.OperatorCodes[ii].DeepCopyIn(&s)
		}
	} else {
		m.OperatorCodes = nil
	}
	if src.ResTagTables != nil {
		m.ResTagTables = make([]ResTagTable, len(src.ResTagTables), len(src.ResTagTables))
		for ii, s := range src.ResTagTables {
			m.ResTagTables[ii].DeepCopyIn(&s)
		}
	} else {
		m.ResTagTables = nil
	}
	if src.Cloudlets != nil {
		m.Cloudlets = make([]Cloudlet, len(src.Cloudlets), len(src.Cloudlets))
		for ii, s := range src.Cloudlets {
			m.Cloudlets[ii].DeepCopyIn(&s)
		}
	} else {
		m.Cloudlets = nil
	}
	if src.CloudletInfos != nil {
		m.CloudletInfos = make([]CloudletInfo, len(src.CloudletInfos), len(src.CloudletInfos))
		for ii, s := range src.CloudletInfos {
			m.CloudletInfos[ii].DeepCopyIn(&s)
		}
	} else {
		m.CloudletInfos = nil
	}
	if src.CloudletPools != nil {
		m.CloudletPools = make([]CloudletPool, len(src.CloudletPools), len(src.CloudletPools))
		for ii, s := range src.CloudletPools {
			m.CloudletPools[ii].DeepCopyIn(&s)
		}
	} else {
		m.CloudletPools = nil
	}
	if src.AutoProvPolicies != nil {
		m.AutoProvPolicies = make([]AutoProvPolicy, len(src.AutoProvPolicies), len(src.AutoProvPolicies))
		for ii, s := range src.AutoProvPolicies {
			m.AutoProvPolicies[ii].DeepCopyIn(&s)
		}
	} else {
		m.AutoProvPolicies = nil
	}
	if src.AutoProvPolicyCloudlets != nil {
		m.AutoProvPolicyCloudlets = make([]AutoProvPolicyCloudlet, len(src.AutoProvPolicyCloudlets), len(src.AutoProvPolicyCloudlets))
		for ii, s := range src.AutoProvPolicyCloudlets {
			m.AutoProvPolicyCloudlets[ii].DeepCopyIn(&s)
		}
	} else {
		m.AutoProvPolicyCloudlets = nil
	}
	if src.AutoScalePolicies != nil {
		m.AutoScalePolicies = make([]AutoScalePolicy, len(src.AutoScalePolicies), len(src.AutoScalePolicies))
		for ii, s := range src.AutoScalePolicies {
			m.AutoScalePolicies[ii].DeepCopyIn(&s)
		}
	} else {
		m.AutoScalePolicies = nil
	}
	if src.TrustPolicies != nil {
		m.TrustPolicies = make([]TrustPolicy, len(src.TrustPolicies), len(src.TrustPolicies))
		for ii, s := range src.TrustPolicies {
			m.TrustPolicies[ii].DeepCopyIn(&s)
		}
	} else {
		m.TrustPolicies = nil
	}
	if src.ClusterInsts != nil {
		m.ClusterInsts = make([]ClusterInst, len(src.ClusterInsts), len(src.ClusterInsts))
		for ii, s := range src.ClusterInsts {
			m.ClusterInsts[ii].DeepCopyIn(&s)
		}
	} else {
		m.ClusterInsts = nil
	}
	if src.Apps != nil {
		m.Apps = make([]App, len(src.Apps), len(src.Apps))
		for ii, s := range src.Apps {
			m.Apps[ii].DeepCopyIn(&s)
		}
	} else {
		m.Apps = nil
	}
	if src.AppInstances != nil {
		m.AppInstances = make([]AppInst, len(src.AppInstances), len(src.AppInstances))
		for ii, s := range src.AppInstances {
			m.AppInstances[ii].DeepCopyIn(&s)
		}
	} else {
		m.AppInstances = nil
	}
	if src.AppInstRefs != nil {
		m.AppInstRefs = make([]AppInstRefs, len(src.AppInstRefs), len(src.AppInstRefs))
		for ii, s := range src.AppInstRefs {
			m.AppInstRefs[ii].DeepCopyIn(&s)
		}
	} else {
		m.AppInstRefs = nil
	}
	if src.VmPools != nil {
		m.VmPools = make([]VMPool, len(src.VmPools), len(src.VmPools))
		for ii, s := range src.VmPools {
			m.VmPools[ii].DeepCopyIn(&s)
		}
	} else {
		m.VmPools = nil
	}
	if src.IdleReservableClusterInsts != nil {
		var tmp_IdleReservableClusterInsts IdleReservableClusterInsts
		tmp_IdleReservableClusterInsts.DeepCopyIn(src.IdleReservableClusterInsts)
		m.IdleReservableClusterInsts = &tmp_IdleReservableClusterInsts
	} else {
		m.IdleReservableClusterInsts = nil
	}
	if src.GpuDrivers != nil {
		m.GpuDrivers = make([]GPUDriver, len(src.GpuDrivers), len(src.GpuDrivers))
		for ii, s := range src.GpuDrivers {
			m.GpuDrivers[ii].DeepCopyIn(&s)
		}
	} else {
		m.GpuDrivers = nil
	}
	if src.AlertPolicies != nil {
		m.AlertPolicies = make([]AlertPolicy, len(src.AlertPolicies), len(src.AlertPolicies))
		for ii, s := range src.AlertPolicies {
			m.AlertPolicies[ii].DeepCopyIn(&s)
		}
	} else {
		m.AlertPolicies = nil
	}
	if src.FlowRateLimitSettings != nil {
		m.FlowRateLimitSettings = make([]FlowRateLimitSettings, len(src.FlowRateLimitSettings), len(src.FlowRateLimitSettings))
		for ii, s := range src.FlowRateLimitSettings {
			m.FlowRateLimitSettings[ii].DeepCopyIn(&s)
		}
	} else {
		m.FlowRateLimitSettings = nil
	}
	if src.MaxReqsRateLimitSettings != nil {
		m.MaxReqsRateLimitSettings = make([]MaxReqsRateLimitSettings, len(src.MaxReqsRateLimitSettings), len(src.MaxReqsRateLimitSettings))
		for ii, s := range src.MaxReqsRateLimitSettings {
			m.MaxReqsRateLimitSettings[ii].DeepCopyIn(&s)
		}
	} else {
		m.MaxReqsRateLimitSettings = nil
	}
	if src.Networks != nil {
		m.Networks = make([]Network, len(src.Networks), len(src.Networks))
		for ii, s := range src.Networks {
			m.Networks[ii].DeepCopyIn(&s)
		}
	} else {
		m.Networks = nil
	}
	if src.TrustPolicyExceptions != nil {
		m.TrustPolicyExceptions = make([]TrustPolicyException, len(src.TrustPolicyExceptions), len(src.TrustPolicyExceptions))
		for ii, s := range src.TrustPolicyExceptions {
			m.TrustPolicyExceptions[ii].DeepCopyIn(&s)
		}
	} else {
		m.TrustPolicyExceptions = nil
	}
	if src.ClusterRefs != nil {
		m.ClusterRefs = make([]ClusterRefs, len(src.ClusterRefs), len(src.ClusterRefs))
		for ii, s := range src.ClusterRefs {
			m.ClusterRefs[ii].DeepCopyIn(&s)
		}
	} else {
		m.ClusterRefs = nil
	}
}

// Helper method to check that enums have valid values
func (m *AllData) ValidateEnums() error {
	if m.Settings != nil {
		if err := m.Settings.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Flavors {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.OperatorCodes {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ResTagTables {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Cloudlets {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletInfos {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletPools {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoProvPolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoProvPolicyCloudlets {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoScalePolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.TrustPolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ClusterInsts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Apps {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AppInstances {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AppInstRefs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.VmPools {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if m.IdleReservableClusterInsts != nil {
		if err := m.IdleReservableClusterInsts.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.GpuDrivers {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AlertPolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.FlowRateLimitSettings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.MaxReqsRateLimitSettings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Networks {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.TrustPolicyExceptions {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ClusterRefs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreAllDataFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Flavors.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ResTagTables.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.DeploymentLocal")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.NotifySrvAddr")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Config")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Deployment")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.CrmAccessPublicKey")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Cloudlets.CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Cloudlets.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.TrustPolicyState")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.DefaultResourceAlertThreshold")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.HostController")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.SecondaryCrmAccessPublicKey")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.SecondaryCrmAccessKeyUpgradeRequired")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.SecondaryNotifySrvAddr")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.Controller")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.TrustPolicyState")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.CompatibilityVersion")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletPools.CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletPools.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletPools.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AutoProvPolicies.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AutoScalePolicies.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "TrustPolicies.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.AllocatedIp")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.NodeFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.ExternalVolumeSize")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.ImageName")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.MasterNodeFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.SkipCrmCleanupOnFailure")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.OptRes")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.Resources")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "ClusterInsts.CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "ClusterInsts.UpdatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "ClusterInsts.ReservationEndedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DelOpt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.Revision")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeletePrepare")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Apps.CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Apps.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.CrmOverride")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "AppInstances.CreatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.Revision")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.ForceUpdate")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.UpdateMultiple")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.HealthCheck")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.PowerState")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.ExternalVolumeSize")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.AvailabilityZone")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.VmFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.OptRes")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "AppInstances.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.InternalPortToLbIp")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "VmPools.Vms.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "VmPools.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "VmPools.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "VmPools.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "GpuDrivers.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AlertPolicies.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Networks.DeletePrepare")
	}
	return cmpopts.IgnoreFields(AllData{}, names...)
}

func (m *AllData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovAlldata(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.OperatorCodes) > 0 {
		for _, e := range m.OperatorCodes {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.ResTagTables) > 0 {
		for _, e := range m.ResTagTables {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Cloudlets) > 0 {
		for _, e := range m.Cloudlets {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.CloudletInfos) > 0 {
		for _, e := range m.CloudletInfos {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.CloudletPools) > 0 {
		for _, e := range m.CloudletPools {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, e := range m.AutoProvPolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoProvPolicyCloudlets) > 0 {
		for _, e := range m.AutoProvPolicyCloudlets {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoScalePolicies) > 0 {
		for _, e := range m.AutoScalePolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.TrustPolicies) > 0 {
		for _, e := range m.TrustPolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.ClusterInsts) > 0 {
		for _, e := range m.ClusterInsts {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AppInstances) > 0 {
		for _, e := range m.AppInstances {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AppInstRefs) > 0 {
		for _, e := range m.AppInstRefs {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.VmPools) > 0 {
		for _, e := range m.VmPools {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if m.IdleReservableClusterInsts != nil {
		l = m.IdleReservableClusterInsts.Size()
		n += 2 + l + sovAlldata(uint64(l))
	}
	if len(m.GpuDrivers) > 0 {
		for _, e := range m.GpuDrivers {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AlertPolicies) > 0 {
		for _, e := range m.AlertPolicies {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.FlowRateLimitSettings) > 0 {
		for _, e := range m.FlowRateLimitSettings {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.MaxReqsRateLimitSettings) > 0 {
		for _, e := range m.MaxReqsRateLimitSettings {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.TrustPolicyExceptions) > 0 {
		for _, e := range m.TrustPolicyExceptions {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.ClusterRefs) > 0 {
		for _, e := range m.ClusterRefs {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	return n
}

func sovAlldata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlldata(x uint64) (n int) {
	return sovAlldata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlldata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &Settings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, Flavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorCodes = append(m.OperatorCodes, OperatorCode{})
			if err := m.OperatorCodes[len(m.OperatorCodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResTagTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResTagTables = append(m.ResTagTables, ResTagTable{})
			if err := m.ResTagTables[len(m.ResTagTables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloudlets = append(m.Cloudlets, Cloudlet{})
			if err := m.Cloudlets[len(m.Cloudlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletInfos = append(m.CloudletInfos, CloudletInfo{})
			if err := m.CloudletInfos[len(m.CloudletInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletPools = append(m.CloudletPools, CloudletPool{})
			if err := m.CloudletPools[len(m.CloudletPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicies = append(m.AutoProvPolicies, AutoProvPolicy{})
			if err := m.AutoProvPolicies[len(m.AutoProvPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicyCloudlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicyCloudlets = append(m.AutoProvPolicyCloudlets, AutoProvPolicyCloudlet{})
			if err := m.AutoProvPolicyCloudlets[len(m.AutoProvPolicyCloudlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoScalePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoScalePolicies = append(m.AutoScalePolicies, AutoScalePolicy{})
			if err := m.AutoScalePolicies[len(m.AutoScalePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustPolicies = append(m.TrustPolicies, TrustPolicy{})
			if err := m.TrustPolicies[len(m.TrustPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInsts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterInsts = append(m.ClusterInsts, ClusterInst{})
			if err := m.ClusterInsts[len(m.ClusterInsts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, App{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppInstances = append(m.AppInstances, AppInst{})
			if err := m.AppInstances[len(m.AppInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppInstRefs = append(m.AppInstRefs, AppInstRefs{})
			if err := m.AppInstRefs[len(m.AppInstRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmPools = append(m.VmPools, VMPool{})
			if err := m.VmPools[len(m.VmPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleReservableClusterInsts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdleReservableClusterInsts == nil {
				m.IdleReservableClusterInsts = &IdleReservableClusterInsts{}
			}
			if err := m.IdleReservableClusterInsts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuDrivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuDrivers = append(m.GpuDrivers, GPUDriver{})
			if err := m.GpuDrivers[len(m.GpuDrivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, AlertPolicy{})
			if err := m.AlertPolicies[len(m.AlertPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRateLimitSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowRateLimitSettings = append(m.FlowRateLimitSettings, FlowRateLimitSettings{})
			if err := m.FlowRateLimitSettings[len(m.FlowRateLimitSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsRateLimitSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReqsRateLimitSettings = append(m.MaxReqsRateLimitSettings, MaxReqsRateLimitSettings{})
			if err := m.MaxReqsRateLimitSettings[len(m.MaxReqsRateLimitSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustPolicyExceptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustPolicyExceptions = append(m.TrustPolicyExceptions, TrustPolicyException{})
			if err := m.TrustPolicyExceptions[len(m.TrustPolicyExceptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlldata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRefs = append(m.ClusterRefs, ClusterRefs{})
			if err := m.ClusterRefs[len(m.ClusterRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlldata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlldata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlldata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlldata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlldata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlldata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlldata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlldata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlldata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlldata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlldata = fmt.Errorf("proto: unexpected end of group")
)
