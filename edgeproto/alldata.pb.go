// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alldata.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AllData contains all data that may be used for declarative
// create/delete, or as input for e2e tests.
// The order of fields here is important, as objects will be
// created in the order they are specified here, and deleted
// in the opposite order. The field ID (number) doesn't matter.
type AllData struct {
	Flavors                 []Flavor                 `protobuf:"bytes,2,rep,name=flavors" json:"flavors"`
	Settings                *Settings                `protobuf:"bytes,1,opt,name=settings" json:"settings,omitempty"`
	Operators               []Operator               `protobuf:"bytes,3,rep,name=operators" json:"operators"`
	OperatorCodes           []OperatorCode           `protobuf:"bytes,4,rep,name=operator_codes,json=operatorCodes" json:"operator_codes"`
	Developers              []Developer              `protobuf:"bytes,5,rep,name=developers" json:"developers"`
	ResTagTables            []ResTagTable            `protobuf:"bytes,6,rep,name=res_tag_tables,json=resTagTables" json:"res_tag_tables"`
	Cloudlets               []Cloudlet               `protobuf:"bytes,7,rep,name=cloudlets" json:"cloudlets"`
	CloudletInfos           []CloudletInfo           `protobuf:"bytes,8,rep,name=cloudlet_infos,json=cloudletInfos" json:"cloudlet_infos"`
	CloudletPools           []CloudletPool           `protobuf:"bytes,9,rep,name=cloudlet_pools,json=cloudletPools" json:"cloudlet_pools"`
	CloudletPoolMembers     []CloudletPoolMember     `protobuf:"bytes,10,rep,name=cloudlet_pool_members,json=cloudletPoolMembers" json:"cloudlet_pool_members"`
	AutoProvPolicies        []AutoProvPolicy         `protobuf:"bytes,11,rep,name=auto_prov_policies,json=autoProvPolicies" json:"auto_prov_policies"`
	AutoProvPolicyCloudlets []AutoProvPolicyCloudlet `protobuf:"bytes,12,rep,name=auto_prov_policy_cloudlets,json=autoProvPolicyCloudlets" json:"auto_prov_policy_cloudlets"`
	AutoScalePolicies       []AutoScalePolicy        `protobuf:"bytes,13,rep,name=auto_scale_policies,json=autoScalePolicies" json:"auto_scale_policies"`
	PrivacyPolicies         []PrivacyPolicy          `protobuf:"bytes,14,rep,name=privacy_policies,json=privacyPolicies" json:"privacy_policies"`
	ClusterInsts            []ClusterInst            `protobuf:"bytes,15,rep,name=cluster_insts,json=clusterInsts" json:"cluster_insts"`
	Apps                    []App                    `protobuf:"bytes,16,rep,name=apps" json:"apps"`
	AppInstances            []AppInst                `protobuf:"bytes,17,rep,name=app_instances,json=appInstances" json:"app_instances"`
}

func (m *AllData) Reset()                    { *m = AllData{} }
func (m *AllData) String() string            { return proto.CompactTextString(m) }
func (*AllData) ProtoMessage()               {}
func (*AllData) Descriptor() ([]byte, []int) { return fileDescriptorAlldata, []int{0} }

func init() {
	proto.RegisterType((*AllData)(nil), "edgeproto.AllData")
}
func (m *AllData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAlldata(dAtA, i, uint64(m.Settings.Size()))
		n1, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Flavors) > 0 {
		for _, msg := range m.Flavors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Operators) > 0 {
		for _, msg := range m.Operators {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OperatorCodes) > 0 {
		for _, msg := range m.OperatorCodes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Developers) > 0 {
		for _, msg := range m.Developers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResTagTables) > 0 {
		for _, msg := range m.ResTagTables {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cloudlets) > 0 {
		for _, msg := range m.Cloudlets {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CloudletInfos) > 0 {
		for _, msg := range m.CloudletInfos {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CloudletPools) > 0 {
		for _, msg := range m.CloudletPools {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CloudletPoolMembers) > 0 {
		for _, msg := range m.CloudletPoolMembers {
			dAtA[i] = 0x52
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, msg := range m.AutoProvPolicies {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AutoProvPolicyCloudlets) > 0 {
		for _, msg := range m.AutoProvPolicyCloudlets {
			dAtA[i] = 0x62
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AutoScalePolicies) > 0 {
		for _, msg := range m.AutoScalePolicies {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PrivacyPolicies) > 0 {
		for _, msg := range m.PrivacyPolicies {
			dAtA[i] = 0x72
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ClusterInsts) > 0 {
		for _, msg := range m.ClusterInsts {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Apps) > 0 {
		for _, msg := range m.Apps {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AppInstances) > 0 {
		for _, msg := range m.AppInstances {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAlldata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAlldata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

// Helper method to check that enums have valid values
func (m *AllData) ValidateEnums() error {
	if err := m.Settings.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Flavors {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Operators {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.OperatorCodes {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Developers {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ResTagTables {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Cloudlets {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletInfos {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletPools {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletPoolMembers {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoProvPolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoProvPolicyCloudlets {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AutoScalePolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.PrivacyPolicies {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ClusterInsts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Apps {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.AppInstances {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreAllDataFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.DeploymentLocal")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.NotifySrvAddr")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cloudlets.Config")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CloudletInfos.Controller")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.AllocatedIp")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.NodeFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.ExternalVolumeSize")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.ImageName")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ClusterInsts.MasterNodeFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DelOpt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Apps.DeletePrepare")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.Uri")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.RuntimeInfo.ContainerIds")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "AppInstances.CreatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.ForceUpdate")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.UpdateMultiple")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.PowerState")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.ExternalVolumeSize")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.AvailabilityZone")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AppInstances.VmFlavor")
	}
	return cmpopts.IgnoreFields(AllData{}, names...)
}

func (m *AllData) Size() (n int) {
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovAlldata(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Operators) > 0 {
		for _, e := range m.Operators {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.OperatorCodes) > 0 {
		for _, e := range m.OperatorCodes {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Developers) > 0 {
		for _, e := range m.Developers {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.ResTagTables) > 0 {
		for _, e := range m.ResTagTables {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Cloudlets) > 0 {
		for _, e := range m.Cloudlets {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.CloudletInfos) > 0 {
		for _, e := range m.CloudletInfos {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.CloudletPools) > 0 {
		for _, e := range m.CloudletPools {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.CloudletPoolMembers) > 0 {
		for _, e := range m.CloudletPoolMembers {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, e := range m.AutoProvPolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoProvPolicyCloudlets) > 0 {
		for _, e := range m.AutoProvPolicyCloudlets {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AutoScalePolicies) > 0 {
		for _, e := range m.AutoScalePolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.PrivacyPolicies) > 0 {
		for _, e := range m.PrivacyPolicies {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.ClusterInsts) > 0 {
		for _, e := range m.ClusterInsts {
			l = e.Size()
			n += 1 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	if len(m.AppInstances) > 0 {
		for _, e := range m.AppInstances {
			l = e.Size()
			n += 2 + l + sovAlldata(uint64(l))
		}
	}
	return n
}

func sovAlldata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAlldata(x uint64) (n int) {
	return sovAlldata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlldata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &Settings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, Flavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, Operator{})
			if err := m.Operators[len(m.Operators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorCodes = append(m.OperatorCodes, OperatorCode{})
			if err := m.OperatorCodes[len(m.OperatorCodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developers = append(m.Developers, Developer{})
			if err := m.Developers[len(m.Developers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResTagTables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResTagTables = append(m.ResTagTables, ResTagTable{})
			if err := m.ResTagTables[len(m.ResTagTables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloudlets = append(m.Cloudlets, Cloudlet{})
			if err := m.Cloudlets[len(m.Cloudlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletInfos = append(m.CloudletInfos, CloudletInfo{})
			if err := m.CloudletInfos[len(m.CloudletInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletPools = append(m.CloudletPools, CloudletPool{})
			if err := m.CloudletPools[len(m.CloudletPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletPoolMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletPoolMembers = append(m.CloudletPoolMembers, CloudletPoolMember{})
			if err := m.CloudletPoolMembers[len(m.CloudletPoolMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicies = append(m.AutoProvPolicies, AutoProvPolicy{})
			if err := m.AutoProvPolicies[len(m.AutoProvPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicyCloudlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicyCloudlets = append(m.AutoProvPolicyCloudlets, AutoProvPolicyCloudlet{})
			if err := m.AutoProvPolicyCloudlets[len(m.AutoProvPolicyCloudlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoScalePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoScalePolicies = append(m.AutoScalePolicies, AutoScalePolicy{})
			if err := m.AutoScalePolicies[len(m.AutoScalePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivacyPolicies = append(m.PrivacyPolicies, PrivacyPolicy{})
			if err := m.PrivacyPolicies[len(m.PrivacyPolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInsts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterInsts = append(m.ClusterInsts, ClusterInst{})
			if err := m.ClusterInsts[len(m.ClusterInsts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, App{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlldata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppInstances = append(m.AppInstances, AppInst{})
			if err := m.AppInstances[len(m.AppInstances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlldata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlldata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlldata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlldata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlldata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAlldata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlldata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlldata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlldata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlldata   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("alldata.proto", fileDescriptorAlldata) }

var fileDescriptorAlldata = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x4e, 0x1b, 0x3d,
	0x14, 0x86, 0xc9, 0x07, 0x1f, 0x10, 0x93, 0x84, 0xc4, 0x81, 0xe2, 0x46, 0x6a, 0x4a, 0xbb, 0x62,
	0xd3, 0x44, 0xa5, 0x8b, 0x56, 0x48, 0x5d, 0xf0, 0xa3, 0x4a, 0x2c, 0x50, 0x23, 0x40, 0xea, 0x72,
	0xe4, 0x4c, 0xcc, 0x74, 0x24, 0x67, 0x6c, 0xcd, 0x71, 0xa2, 0x72, 0x1b, 0x5d, 0x75, 0xd9, 0xcb,
	0x61, 0xd9, 0x2b, 0xa8, 0x5a, 0x2e, 0x82, 0x75, 0xe5, 0x13, 0x7b, 0xe2, 0x49, 0x60, 0x33, 0xb2,
	0xdf, 0x73, 0xde, 0xc7, 0x73, 0x8e, 0x7f, 0x48, 0x9d, 0x4b, 0x39, 0xe2, 0x86, 0xf7, 0x74, 0xae,
	0x8c, 0xa2, 0x55, 0x31, 0x4a, 0x04, 0x0e, 0x3b, 0x1f, 0x92, 0xd4, 0x7c, 0x9d, 0x0c, 0x7b, 0xb1,
	0x1a, 0xf7, 0xc7, 0x6a, 0x98, 0x4a, 0x1b, 0xfa, 0xd6, 0xb7, 0xdf, 0x37, 0xb1, 0x54, 0x93, 0x51,
	0x1f, 0xf3, 0x12, 0x91, 0x15, 0x83, 0x19, 0xa4, 0xd3, 0x00, 0x61, 0x4c, 0x9a, 0x25, 0xe0, 0xe7,
	0x4a, 0x8b, 0x9c, 0x1b, 0x95, 0xbb, 0xf9, 0xf6, 0x48, 0x4c, 0x85, 0xb4, 0xa2, 0x13, 0x6a, 0x37,
	0x92, 0x4f, 0x8b, 0x70, 0x2b, 0x17, 0x60, 0x78, 0x62, 0xf8, 0x50, 0x0a, 0x4f, 0xc0, 0x05, 0xa5,
	0x30, 0x6e, 0x4e, 0xfd, 0x5c, 0x2b, 0x25, 0x9d, 0xb6, 0xc3, 0x27, 0x46, 0xe9, 0x5c, 0x4d, 0xb5,
	0x92, 0x69, 0x7c, 0xeb, 0xd4, 0x5d, 0xab, 0x42, 0xcc, 0xa5, 0x28, 0xc9, 0x6d, 0x9d, 0xa7, 0x53,
	0x1e, 0xdf, 0x96, 0xc4, 0x56, 0x2c, 0x27, 0x60, 0x44, 0x9e, 0x66, 0xe0, 0x17, 0xaa, 0x72, 0xad,
	0xdd, 0xb0, 0xce, 0xb5, 0x0e, 0x22, 0x3b, 0x89, 0x4a, 0x14, 0x0e, 0xfb, 0x76, 0x34, 0x53, 0x5f,
	0x7f, 0xaf, 0x92, 0x8d, 0x63, 0x29, 0xcf, 0xb8, 0xe1, 0xb4, 0x4f, 0x36, 0x7d, 0x23, 0x58, 0x65,
	0xbf, 0x72, 0xb0, 0x75, 0xd8, 0xee, 0x15, 0xed, 0xed, 0x5d, 0xb9, 0xd0, 0x65, 0x91, 0x44, 0xdf,
	0x92, 0x8d, 0x59, 0x23, 0x80, 0xfd, 0xb7, 0xbf, 0x7a, 0xb0, 0x75, 0xd8, 0x0a, 0xf2, 0x3f, 0x61,
	0xe4, 0x64, 0xed, 0xee, 0xf7, 0xcb, 0x95, 0x4b, 0x9f, 0x47, 0xdf, 0x93, 0xaa, 0x6f, 0x2e, 0xb0,
	0x55, 0x34, 0x85, 0x8b, 0x7c, 0x76, 0x31, 0x67, 0x9b, 0xe7, 0xd2, 0x33, 0x52, 0xec, 0x4a, 0x14,
	0xab, 0x91, 0x00, 0xb6, 0x86, 0xee, 0xbd, 0x47, 0xdc, 0xa7, 0x6a, 0x24, 0x1c, 0xa1, 0xae, 0x02,
	0x0d, 0xe8, 0x11, 0x21, 0xc5, 0x5e, 0x02, 0xfb, 0x1f, 0x09, 0x3b, 0x01, 0xe1, 0xcc, 0x07, 0x9d,
	0x3d, 0xc8, 0xa6, 0x27, 0xa4, 0x91, 0x0b, 0x88, 0x0c, 0x4f, 0x22, 0xdc, 0x6a, 0x60, 0xeb, 0xe8,
	0x7f, 0x16, 0xf8, 0x2f, 0x05, 0x5c, 0xf3, 0xe4, 0xda, 0x86, 0x1d, 0xa1, 0x96, 0xcf, 0x25, 0x2c,
	0xdf, 0x9f, 0x04, 0x60, 0x1b, 0x4b, 0xe5, 0x9f, 0xba, 0x98, 0x2f, 0xbf, 0xc8, 0xb5, 0xe5, 0xfb,
	0x49, 0x94, 0x66, 0x37, 0x0a, 0xd8, 0xe6, 0x52, 0xf9, 0xde, 0x7d, 0x9e, 0xdd, 0x28, 0x5f, 0x7e,
	0x1c, 0x68, 0x65, 0x8a, 0x3d, 0x89, 0xc0, 0xaa, 0x4f, 0x52, 0x06, 0x4a, 0xc9, 0x45, 0x8a, 0xd5,
	0x80, 0x7e, 0x21, 0xbb, 0x25, 0x4a, 0x34, 0x16, 0xe3, 0xa1, 0xed, 0x27, 0x41, 0xd8, 0x8b, 0x27,
	0x60, 0x17, 0x98, 0xe5, 0x90, 0xed, 0x78, 0x29, 0x02, 0xf4, 0x82, 0x50, 0x7b, 0xfa, 0x23, 0x7b,
	0x29, 0x22, 0x3c, 0xe9, 0xa9, 0x00, 0xb6, 0x85, 0xd4, 0xe7, 0x01, 0xf5, 0x78, 0x62, 0xd4, 0x20,
	0x57, 0xd3, 0x01, 0x5e, 0x06, 0x47, 0x6c, 0xf2, 0x50, 0x4d, 0x05, 0xd0, 0x11, 0xe9, 0x2c, 0xe0,
	0x6e, 0xa3, 0x79, 0xf7, 0x6b, 0x88, 0x7d, 0xf5, 0x24, 0x76, 0x61, 0x2f, 0xf6, 0xf8, 0xa3, 0x51,
	0xa0, 0x03, 0xd2, 0xc6, 0x55, 0xf0, 0xce, 0xce, 0xff, 0xba, 0x8e, 0xf8, 0xce, 0x02, 0xfe, 0xca,
	0x26, 0x95, 0x7e, 0xbb, 0xc5, 0x4b, 0xb2, 0xfd, 0xef, 0x73, 0xd2, 0x74, 0xb7, 0x7d, 0x8e, 0x6b,
	0x20, 0x8e, 0x05, 0xb8, 0xc1, 0x2c, 0xa5, 0x04, 0xdb, 0xd6, 0x81, 0x68, 0x51, 0xc7, 0xa4, 0xee,
	0xde, 0x88, 0xc8, 0x3e, 0x05, 0xc0, 0xb6, 0x97, 0x8e, 0xec, 0xe9, 0x2c, 0x7e, 0x9e, 0x81, 0x2f,
	0xb5, 0x16, 0xcf, 0x25, 0xa0, 0x07, 0x64, 0x8d, 0x6b, 0x0d, 0xac, 0x89, 0xce, 0x46, 0x58, 0x90,
	0xd6, 0xce, 0x81, 0x19, 0xf4, 0x23, 0xb1, 0x4f, 0x0e, 0x2e, 0xc4, 0xb3, 0x58, 0x00, 0x6b, 0xa1,
	0x85, 0x96, 0x2d, 0xe1, 0x42, 0x7c, 0x36, 0xc5, 0xec, 0xa3, 0xcd, 0x1f, 0x0f, 0xac, 0xf2, 0xf3,
	0x81, 0xad, 0x9c, 0x34, 0xef, 0xfe, 0x76, 0x57, 0xee, 0xee, 0xbb, 0x95, 0x5f, 0xf7, 0xdd, 0xca,
	0x9f, 0xfb, 0x6e, 0x65, 0xb8, 0x8e, 0xf6, 0x77, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xf5,
	0xb7, 0xaa, 0xfe, 0x05, 0x00, 0x00,
}
