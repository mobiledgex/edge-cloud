// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmpool.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	google_protobuf "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
	"time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VM State
//
// VMState is the state of the VM
//
// 0: `VM_FREE`
// 1: `VM_IN_PROGRESS`
// 2: `VM_IN_USE`
// 3: `VM_ADD`
// 4: `VM_REMOVE`
// 5: `VM_UPDATE`
// 6: `VM_FORCE_FREE`
type VMState int32

const (
	// VM is free to use
	VMState_VM_FREE VMState = 0
	// VM is in progress
	VMState_VM_IN_PROGRESS VMState = 1
	// VM is in use
	VMState_VM_IN_USE VMState = 2
	// Add VM
	VMState_VM_ADD VMState = 3
	// Remove VM
	VMState_VM_REMOVE VMState = 4
	// Update VM
	VMState_VM_UPDATE VMState = 5
	// Forcefully free a VM, to be used at user's discretion
	VMState_VM_FORCE_FREE VMState = 6
)

var VMState_name = map[int32]string{
	0: "VM_FREE",
	1: "VM_IN_PROGRESS",
	2: "VM_IN_USE",
	3: "VM_ADD",
	4: "VM_REMOVE",
	5: "VM_UPDATE",
	6: "VM_FORCE_FREE",
}

var VMState_value = map[string]int32{
	"VM_FREE":        0,
	"VM_IN_PROGRESS": 1,
	"VM_IN_USE":      2,
	"VM_ADD":         3,
	"VM_REMOVE":      4,
	"VM_UPDATE":      5,
	"VM_FORCE_FREE":  6,
}

func (x VMState) String() string {
	return proto.EnumName(VMState_name, int32(x))
}

func (VMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{0}
}

// VM Action
//
// VMAction is the action to be performed on VM Pool
//
// 0: `VM_ACTION_DONE`
// 1: `VM_ACTION_ALLOCATE`
// 2: `VM_ACTION_RELEASE`
type VMAction int32

const (
	// Done performing action
	VMAction_VM_ACTION_DONE VMAction = 0
	// Allocate VMs from VM Pool
	VMAction_VM_ACTION_ALLOCATE VMAction = 1
	// Release VMs from VM Pool
	VMAction_VM_ACTION_RELEASE VMAction = 2
)

var VMAction_name = map[int32]string{
	0: "VM_ACTION_DONE",
	1: "VM_ACTION_ALLOCATE",
	2: "VM_ACTION_RELEASE",
}

var VMAction_value = map[string]int32{
	"VM_ACTION_DONE":     0,
	"VM_ACTION_ALLOCATE": 1,
	"VM_ACTION_RELEASE":  2,
}

func (x VMAction) String() string {
	return proto.EnumName(VMAction_name, int32(x))
}

func (VMAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{1}
}

type VMNetInfo struct {
	// External IP
	ExternalIp string `protobuf:"bytes,1,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	// Internal IP
	InternalIp string `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
}

func (m *VMNetInfo) Reset()         { *m = VMNetInfo{} }
func (m *VMNetInfo) String() string { return proto.CompactTextString(m) }
func (*VMNetInfo) ProtoMessage()    {}
func (*VMNetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{0}
}
func (m *VMNetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMNetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMNetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMNetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMNetInfo.Merge(m, src)
}
func (m *VMNetInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMNetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMNetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMNetInfo proto.InternalMessageInfo

type VM struct {
	// VM Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VM IP
	NetInfo VMNetInfo `protobuf:"bytes,2,opt,name=net_info,json=netInfo,proto3" json:"net_info"`
	// VM Group Name
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// VM State
	State VMState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.VMState" json:"state,omitempty"`
	// Last updated time
	UpdatedAt types.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// VM Internal Name
	InternalName string `protobuf:"bytes,6,opt,name=internal_name,json=internalName,proto3" json:"internal_name,omitempty"`
	// VM Flavor
	Flavor *FlavorInfo `protobuf:"bytes,7,opt,name=flavor,proto3" json:"flavor,omitempty"`
}

func (m *VM) Reset()         { *m = VM{} }
func (m *VM) String() string { return proto.CompactTextString(m) }
func (*VM) ProtoMessage()    {}
func (*VM) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{1}
}
func (m *VM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VM.Merge(m, src)
}
func (m *VM) XXX_Size() int {
	return m.Size()
}
func (m *VM) XXX_DiscardUnknown() {
	xxx_messageInfo_VM.DiscardUnknown(m)
}

var xxx_messageInfo_VM proto.InternalMessageInfo

// VMPool unique key
//
// VMPoolKey uniquely identifies a VMPool.
type VMPoolKey struct {
	// Organization of the vmpool
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// Name of the vmpool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VMPoolKey) Reset()         { *m = VMPoolKey{} }
func (m *VMPoolKey) String() string { return proto.CompactTextString(m) }
func (*VMPoolKey) ProtoMessage()    {}
func (*VMPoolKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{2}
}
func (m *VMPoolKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMPoolKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMPoolKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMPoolKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMPoolKey.Merge(m, src)
}
func (m *VMPoolKey) XXX_Size() int {
	return m.Size()
}
func (m *VMPoolKey) XXX_DiscardUnknown() {
	xxx_messageInfo_VMPoolKey.DiscardUnknown(m)
}

var xxx_messageInfo_VMPoolKey proto.InternalMessageInfo

// VMPool defines a pool of VMs to be part of a Cloudlet
type VMPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// VMPool Key
	Key VMPoolKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// list of VMs to be part of VM pool
	Vms []VM `protobuf:"bytes,3,rep,name=vms,proto3" json:"vms"`
	// Current state of the VM pool
	State TrackedState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to add/remove VM to/from VM Pool
	Errors []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	// Override actions to CRM
	CrmOverride CRMOverride `protobuf:"varint,7,opt,name=crm_override,json=crmOverride,proto3,enum=edgeproto.CRMOverride" json:"crm_override,omitempty"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,8,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
}

func (m *VMPool) Reset()         { *m = VMPool{} }
func (m *VMPool) String() string { return proto.CompactTextString(m) }
func (*VMPool) ProtoMessage()    {}
func (*VMPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{3}
}
func (m *VMPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMPool.Merge(m, src)
}
func (m *VMPool) XXX_Size() int {
	return m.Size()
}
func (m *VMPool) XXX_DiscardUnknown() {
	xxx_messageInfo_VMPool.DiscardUnknown(m)
}

var xxx_messageInfo_VMPool proto.InternalMessageInfo

// VMPoolMember is used to add and remove VM from VM Pool
type VMPoolMember struct {
	// VMPool key
	Key VMPoolKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// VM part of VM Pool
	Vm VM `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm"`
	// Override actions to CRM
	CrmOverride CRMOverride `protobuf:"varint,3,opt,name=crm_override,json=crmOverride,proto3,enum=edgeproto.CRMOverride" json:"crm_override,omitempty"`
}

func (m *VMPoolMember) Reset()         { *m = VMPoolMember{} }
func (m *VMPoolMember) String() string { return proto.CompactTextString(m) }
func (*VMPoolMember) ProtoMessage()    {}
func (*VMPoolMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{4}
}
func (m *VMPoolMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMPoolMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMPoolMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMPoolMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMPoolMember.Merge(m, src)
}
func (m *VMPoolMember) XXX_Size() int {
	return m.Size()
}
func (m *VMPoolMember) XXX_DiscardUnknown() {
	xxx_messageInfo_VMPoolMember.DiscardUnknown(m)
}

var xxx_messageInfo_VMPoolMember proto.InternalMessageInfo

// VMSpec defines the specification of VM required by CRM
type VMSpec struct {
	// VM internal name
	InternalName string `protobuf:"bytes,1,opt,name=internal_name,json=internalName,proto3" json:"internal_name,omitempty"`
	// VM has external network defined or not
	ExternalNetwork bool `protobuf:"varint,2,opt,name=external_network,json=externalNetwork,proto3" json:"external_network,omitempty"`
	// VM has internal network defined or not
	InternalNetwork bool `protobuf:"varint,3,opt,name=internal_network,json=internalNetwork,proto3" json:"internal_network,omitempty"`
	// VM flavor
	Flavor Flavor `protobuf:"bytes,4,opt,name=flavor,proto3" json:"flavor"`
}

func (m *VMSpec) Reset()         { *m = VMSpec{} }
func (m *VMSpec) String() string { return proto.CompactTextString(m) }
func (*VMSpec) ProtoMessage()    {}
func (*VMSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{5}
}
func (m *VMSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMSpec.Merge(m, src)
}
func (m *VMSpec) XXX_Size() int {
	return m.Size()
}
func (m *VMSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VMSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VMSpec proto.InternalMessageInfo

// VMPoolInfo is used to manage VM pool from Cloudlet
type VMPoolInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key VMPoolKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// list of VMs
	Vms []VM `protobuf:"bytes,4,rep,name=vms,proto3" json:"vms"`
	// Current state of the VM pool on the Cloudlet
	State TrackedState `protobuf:"varint,5,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to add/remove VM to/from VM Pool
	Errors []string `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
}

func (m *VMPoolInfo) Reset()         { *m = VMPoolInfo{} }
func (m *VMPoolInfo) String() string { return proto.CompactTextString(m) }
func (*VMPoolInfo) ProtoMessage()    {}
func (*VMPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5168f4b4bc6cb855, []int{6}
}
func (m *VMPoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMPoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMPoolInfo.Merge(m, src)
}
func (m *VMPoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *VMPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VMPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VMPoolInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("edgeproto.VMState", VMState_name, VMState_value)
	proto.RegisterEnum("edgeproto.VMAction", VMAction_name, VMAction_value)
	proto.RegisterType((*VMNetInfo)(nil), "edgeproto.VMNetInfo")
	proto.RegisterType((*VM)(nil), "edgeproto.VM")
	proto.RegisterType((*VMPoolKey)(nil), "edgeproto.VMPoolKey")
	proto.RegisterType((*VMPool)(nil), "edgeproto.VMPool")
	proto.RegisterType((*VMPoolMember)(nil), "edgeproto.VMPoolMember")
	proto.RegisterType((*VMSpec)(nil), "edgeproto.VMSpec")
	proto.RegisterType((*VMPoolInfo)(nil), "edgeproto.VMPoolInfo")
}

func init() { proto.RegisterFile("vmpool.proto", fileDescriptor_5168f4b4bc6cb855) }

var fileDescriptor_5168f4b4bc6cb855 = []byte{
	// 1423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x68, 0x1b, 0xc7,
	0x17, 0xf6, 0x48, 0xb2, 0x2c, 0x8d, 0x65, 0x47, 0x9a, 0xc4, 0xce, 0xfc, 0x4c, 0x22, 0x1b, 0x85,
	0xfc, 0x70, 0x13, 0x45, 0xdb, 0x3a, 0x84, 0xb6, 0x86, 0x1c, 0x24, 0x5b, 0x09, 0x22, 0x96, 0x64,
	0x56, 0x8e, 0x7a, 0x14, 0x6b, 0xed, 0x58, 0x59, 0xac, 0xdd, 0xd9, 0xee, 0xae, 0xe4, 0xb8, 0xa7,
	0x92, 0x42, 0xa1, 0xb7, 0x90, 0x5e, 0x4a, 0x0e, 0xa5, 0x97, 0x42, 0xe9, 0xa5, 0x25, 0xf4, 0x14,
	0x68, 0xcf, 0x3e, 0x06, 0x4a, 0x69, 0xe9, 0xa1, 0xa4, 0x4e, 0x0f, 0x25, 0x50, 0x28, 0x44, 0x76,
	0x7b, 0x2c, 0xf3, 0x67, 0xf5, 0xc7, 0xd2, 0xc1, 0x36, 0xb9, 0x98, 0x9d, 0xf7, 0xbe, 0x99, 0xfd,
	0xe6, 0xfb, 0x9e, 0xde, 0x5b, 0xc3, 0x58, 0xdb, 0xb4, 0x29, 0x6d, 0x66, 0x6c, 0x87, 0x7a, 0x14,
	0x45, 0x89, 0xde, 0x20, 0xfc, 0x71, 0xee, 0x42, 0x83, 0xd2, 0x46, 0x93, 0x28, 0x9a, 0x6d, 0x28,
	0x9a, 0x65, 0x51, 0x4f, 0xf3, 0x0c, 0x6a, 0xb9, 0x02, 0x38, 0xf7, 0x4e, 0xc3, 0xf0, 0xee, 0xb5,
	0x36, 0x33, 0x75, 0x6a, 0x2a, 0x26, 0xdd, 0x34, 0x9a, 0x6c, 0xe3, 0x7d, 0x85, 0xfd, 0xbd, 0x56,
	0x6f, 0xd2, 0x96, 0xae, 0x70, 0x5c, 0x83, 0x58, 0xdd, 0x07, 0xb9, 0x33, 0xe6, 0x10, 0xb7, 0xd5,
	0xf4, 0xfc, 0x55, 0x9d, 0x9a, 0x26, 0xf5, 0x73, 0xd3, 0x7c, 0x6b, 0x93, 0x74, 0xb3, 0x5b, 0x4d,
	0xad, 0x4d, 0x1d, 0xb9, 0x3a, 0xd7, 0xa0, 0x0d, 0xca, 0x1f, 0x15, 0xf6, 0x24, 0xa3, 0xf3, 0x92,
	0x27, 0x5f, 0x6d, 0xb6, 0xb6, 0x14, 0xcf, 0x30, 0x89, 0xeb, 0x69, 0xa6, 0x2d, 0x01, 0xa8, 0x7b,
	0xa7, 0x2e, 0x89, 0x54, 0x11, 0x46, 0xab, 0xc5, 0x12, 0xf1, 0x0a, 0xd6, 0x16, 0x45, 0xf3, 0x70,
	0x92, 0xdc, 0xf7, 0x88, 0x63, 0x69, 0xcd, 0x9a, 0x61, 0x63, 0xb0, 0x00, 0x16, 0xa3, 0x2a, 0xf4,
	0x43, 0x05, 0x9b, 0x01, 0x0c, 0xab, 0x07, 0x08, 0x08, 0x80, 0x1f, 0x2a, 0xd8, 0xa9, 0x1f, 0x02,
	0x30, 0x50, 0x2d, 0x22, 0x04, 0x43, 0x96, 0x66, 0x12, 0x79, 0x02, 0x7f, 0x46, 0x37, 0x60, 0xc4,
	0x22, 0x5e, 0xcd, 0xb0, 0xb6, 0x28, 0xdf, 0x38, 0xb9, 0x74, 0x2e, 0xd3, 0x25, 0x94, 0xe9, 0x92,
	0xc8, 0x85, 0xf6, 0x7e, 0x9b, 0x1f, 0x53, 0x27, 0x2c, 0xc9, 0xe9, 0x22, 0x84, 0x0d, 0x87, 0xb6,
	0xec, 0x1a, 0x3f, 0x30, 0xc8, 0x0f, 0x8c, 0xf2, 0x48, 0x89, 0x9d, 0xba, 0x08, 0xc7, 0x5d, 0x4f,
	0xf3, 0x08, 0x0e, 0x2d, 0x80, 0xc5, 0xe9, 0x25, 0x34, 0x70, 0x64, 0x85, 0x65, 0x54, 0x01, 0x40,
	0xeb, 0x10, 0xb6, 0x6c, 0x5d, 0xf3, 0x88, 0x5e, 0xd3, 0x3c, 0x3c, 0xce, 0x19, 0xcc, 0x65, 0x84,
	0x66, 0x19, 0x5f, 0xb3, 0xcc, 0x86, 0xaf, 0x59, 0x6e, 0xe6, 0xab, 0x0e, 0x06, 0x8f, 0x9e, 0xfc,
	0x2f, 0xda, 0x95, 0x91, 0x13, 0x8b, 0xca, 0x43, 0xb2, 0x1e, 0xba, 0x04, 0xa7, 0xba, 0x6a, 0x70,
	0x76, 0x61, 0xce, 0x2e, 0xe6, 0x07, 0x39, 0xc1, 0x6b, 0x30, 0x2c, 0xbc, 0xc3, 0x13, 0xfc, 0x95,
	0x33, 0x7d, 0x0c, 0x6f, 0xf1, 0x04, 0xbb, 0xa6, 0x2a, 0x41, 0xa9, 0x26, 0xf3, 0x63, 0x9d, 0xd2,
	0xe6, 0x1d, 0xb2, 0x8b, 0xde, 0x82, 0x31, 0xea, 0x34, 0x34, 0xcb, 0xf8, 0x80, 0x97, 0x9c, 0x90,
	0x33, 0x37, 0xf5, 0xf4, 0x10, 0x47, 0x45, 0xb1, 0x52, 0xa7, 0xa1, 0x0e, 0x40, 0x50, 0x52, 0x2a,
	0xcf, 0xad, 0xc9, 0xc1, 0xa7, 0x87, 0x38, 0x2c, 0xa0, 0xc2, 0x85, 0xe5, 0xd8, 0x9f, 0xaf, 0x30,
	0xf8, 0xf7, 0x15, 0x06, 0xdf, 0x7e, 0x31, 0x0f, 0x52, 0xfb, 0x21, 0x18, 0x16, 0xaf, 0x43, 0xb3,
	0x30, 0xbc, 0x65, 0x90, 0xa6, 0xee, 0x62, 0xb0, 0x10, 0x5c, 0x8c, 0xaa, 0x72, 0x85, 0xd2, 0x30,
	0xb8, 0x4d, 0x76, 0x47, 0x3a, 0x26, 0x69, 0x4a, 0xc7, 0x18, 0x0c, 0x5d, 0x86, 0xc1, 0xb6, 0xe9,
	0xe2, 0xe0, 0x42, 0x70, 0x71, 0x72, 0x69, 0x6a, 0x00, 0xed, 0xc3, 0xda, 0xa6, 0x8b, 0xae, 0x0f,
	0xba, 0x76, 0xbe, 0x0f, 0xb8, 0xe1, 0x68, 0xf5, 0x6d, 0xa2, 0x73, 0xeb, 0x72, 0x21, 0xe6, 0x81,
	0x6f, 0xe0, 0x65, 0x18, 0x26, 0x8e, 0x43, 0x1d, 0x17, 0x8f, 0x33, 0x86, 0xb9, 0x29, 0x69, 0xd0,
	0xb8, 0x45, 0xeb, 0xa6, 0xad, 0xca, 0x24, 0x7a, 0x1b, 0x86, 0x19, 0xbe, 0xe5, 0x72, 0x3b, 0x06,
	0x05, 0xaf, 0xf0, 0x04, 0x2f, 0xb3, 0x08, 0xdb, 0xcd, 0x19, 0x49, 0x38, 0x7a, 0x17, 0xc6, 0xea,
	0x8e, 0x59, 0xa3, 0x6d, 0xe2, 0x38, 0x86, 0x4e, 0xb8, 0x5f, 0xd3, 0x4b, 0xb3, 0x7d, 0xdb, 0x57,
	0xd4, 0x62, 0x59, 0x66, 0xd5, 0xc9, 0xba, 0x63, 0xfa, 0x0b, 0x74, 0x15, 0x4e, 0xeb, 0xa4, 0x49,
	0x3c, 0x52, 0xb3, 0x1d, 0x62, 0x6b, 0x0e, 0xc1, 0x91, 0x05, 0xb0, 0x18, 0x91, 0xfc, 0xa7, 0x44,
	0x6e, 0x5d, 0xa4, 0x96, 0xff, 0x02, 0xcc, 0x83, 0xbf, 0x5f, 0x61, 0xf0, 0x61, 0x07, 0x83, 0x87,
	0x1d, 0x0c, 0x3e, 0xeb, 0x60, 0xf0, 0xb4, 0x83, 0x63, 0xfd, 0x77, 0xdf, 0x63, 0x97, 0x3b, 0xc0,
	0xef, 0x57, 0x4d, 0x77, 0xf9, 0x52, 0xe6, 0xb6, 0x5f, 0xf0, 0x69, 0xb1, 0x2e, 0xf4, 0x95, 0x98,
	0x0c, 0xdd, 0xf5, 0xeb, 0x32, 0x53, 0x21, 0x75, 0x6a, 0xe9, 0xee, 0x50, 0xbc, 0xa4, 0x59, 0xd4,
	0x4d, 0xf3, 0xd3, 0xd3, 0x79, 0x2e, 0x56, 0x5a, 0x08, 0x22, 0x91, 0xa2, 0x1c, 0x1f, 0x1f, 0xe0,
	0xab, 0xa2, 0x64, 0x6e, 0xde, 0x21, 0xbb, 0x19, 0xfe, 0x06, 0xb1, 0xbe, 0x46, 0x9d, 0x06, 0x8f,
	0x95, 0xfb, 0x2a, 0xee, 0xc9, 0x21, 0x8e, 0x6f, 0x93, 0xdd, 0x9b, 0xfd, 0xb1, 0x07, 0xff, 0xb0,
	0x02, 0x65, 0xe5, 0x91, 0xb5, 0x8d, 0xd4, 0xf7, 0x01, 0x18, 0x13, 0xc5, 0x52, 0x24, 0xe6, 0x26,
	0x71, 0xfc, 0x92, 0x02, 0xc7, 0x2b, 0xa9, 0x4b, 0x30, 0xd0, 0x36, 0x65, 0xfd, 0x8d, 0xac, 0xa8,
	0x40, 0xdb, 0x1c, 0xf2, 0x2e, 0x78, 0x6c, 0xef, 0x96, 0x3f, 0x67, 0x32, 0xbf, 0x57, 0x35, 0x07,
	0x34, 0xce, 0x08, 0x95, 0xaa, 0xe6, 0x48, 0x59, 0x87, 0x34, 0xad, 0x9a, 0x47, 0x1d, 0x79, 0x7d,
	0x62, 0xa6, 0xbe, 0x03, 0xec, 0x47, 0x5a, 0xb1, 0x49, 0x7d, 0xb8, 0xe3, 0x80, 0x11, 0x1d, 0xe7,
	0x0d, 0x18, 0xef, 0x76, 0x71, 0x8b, 0x78, 0x3b, 0xd4, 0xd9, 0xe6, 0xf2, 0x45, 0xd4, 0x33, 0x7e,
	0xbc, 0x24, 0xc2, 0x0c, 0xda, 0x3b, 0x4f, 0x42, 0x83, 0x02, 0xda, 0x3d, 0x52, 0x42, 0x95, 0x6e,
	0x1f, 0x0b, 0x71, 0x2b, 0x12, 0x43, 0x7d, 0x4c, 0xda, 0xe1, 0x77, 0xb2, 0x8f, 0x82, 0x10, 0x0a,
	0x43, 0x79, 0x1f, 0x7f, 0x3d, 0xfd, 0xe5, 0xff, 0x30, 0x6a, 0x51, 0xcf, 0xd8, 0xda, 0xad, 0x19,
	0x3a, 0x67, 0x1a, 0xcc, 0x45, 0x7b, 0x2d, 0x20, 0x22, 0x72, 0x05, 0xdd, 0xef, 0x43, 0xa1, 0xe3,
	0xf6, 0xa1, 0xf1, 0x53, 0xf5, 0xa1, 0xf0, 0xf1, 0xfa, 0xd0, 0xc4, 0x89, 0xfa, 0xd0, 0xf2, 0x9d,
	0xa3, 0xed, 0xe1, 0x79, 0x07, 0x83, 0x93, 0x17, 0x52, 0xc8, 0xa2, 0x16, 0xb9, 0xf2, 0x18, 0xc0,
	0x09, 0x39, 0x08, 0x51, 0x82, 0x3d, 0xd6, 0x6e, 0xa9, 0xf9, 0x7c, 0x7c, 0x6c, 0x2e, 0xf4, 0xf0,
	0x10, 0x03, 0x84, 0xe1, 0x74, 0xb5, 0x58, 0x2b, 0x94, 0x6a, 0xeb, 0x6a, 0xf9, 0xb6, 0x9a, 0xaf,
	0x54, 0xe2, 0x40, 0x66, 0xce, 0xb2, 0x41, 0xc4, 0x32, 0x77, 0x2b, 0xf9, 0x78, 0x40, 0x06, 0xe3,
	0xac, 0x12, 0x6b, 0xd9, 0xd5, 0xd5, 0x78, 0x70, 0x00, 0xa6, 0xe6, 0x8b, 0xe5, 0x6a, 0x3e, 0x1e,
	0x1a, 0x08, 0xde, 0x5d, 0x5f, 0xcd, 0x6e, 0xe4, 0xe3, 0xe3, 0x32, 0x98, 0x80, 0x53, 0xec, 0xed,
	0x65, 0x75, 0x25, 0x2f, 0x38, 0x84, 0xaf, 0x14, 0x61, 0xa4, 0x5a, 0xcc, 0xd6, 0xf9, 0xe0, 0x42,
	0x9c, 0x49, 0x76, 0x65, 0xa3, 0x50, 0x2e, 0xd5, 0x56, 0xcb, 0xa5, 0x7c, 0x7c, 0x0c, 0xcd, 0x42,
	0xd4, 0x8b, 0x65, 0xd7, 0xd6, 0xca, 0x2b, 0xec, 0x40, 0x80, 0x66, 0x60, 0xa2, 0x17, 0x57, 0xf3,
	0x6b, 0xf9, 0x2c, 0xe3, 0xb8, 0xf4, 0xf3, 0x84, 0x3f, 0x3c, 0xb3, 0xb6, 0x81, 0xbe, 0x04, 0x30,
	0xb6, 0xe2, 0x10, 0xcd, 0x23, 0x72, 0xc2, 0x25, 0x86, 0x8a, 0x6b, 0xae, 0x3f, 0xa4, 0xf2, 0xaf,
	0xb1, 0x14, 0x7d, 0xd9, 0xc1, 0x8a, 0x4a, 0x5c, 0xda, 0x72, 0xea, 0x64, 0x45, 0x7e, 0x85, 0xb9,
	0x69, 0xc1, 0xb2, 0xa8, 0x59, 0x5a, 0x83, 0xa4, 0x8f, 0xaa, 0xfd, 0xeb, 0x01, 0x9e, 0x14, 0x2d,
	0x94, 0x0b, 0xfd, 0xf5, 0x21, 0x8e, 0x1f, 0x85, 0x3c, 0xf8, 0xf1, 0x8f, 0x4f, 0x03, 0x67, 0x53,
	0xd3, 0x4a, 0x9d, 0x53, 0x52, 0x84, 0x77, 0xcb, 0xe0, 0x0a, 0xfa, 0x04, 0xc0, 0xd8, 0x2a, 0x1f,
	0x10, 0x27, 0xe2, 0x59, 0x39, 0x05, 0x4f, 0x4e, 0x62, 0x2e, 0x35, 0xa3, 0x88, 0x81, 0xa4, 0xf0,
	0x8f, 0x4c, 0xe2, 0xf5, 0xb8, 0x3c, 0x00, 0x30, 0x26, 0x7a, 0xdb, 0x89, 0xb8, 0xac, 0x9d, 0x96,
	0x0b, 0x13, 0x44, 0x7c, 0x4f, 0xf5, 0x09, 0xf2, 0x31, 0x80, 0xb0, 0x72, 0x8f, 0xee, 0x1c, 0x8f,
	0x82, 0x08, 0xa5, 0xd6, 0x5f, 0x76, 0xf0, 0x8d, 0xa3, 0x14, 0xb2, 0x96, 0xd6, 0xdc, 0xf5, 0x8c,
	0xba, 0x4f, 0xa5, 0x6a, 0x90, 0x9d, 0xd1, 0x44, 0x12, 0xa9, 0x98, 0xe2, 0xde, 0xa3, 0x3b, 0x3d,
	0x1a, 0x6f, 0x02, 0xf4, 0x0d, 0x80, 0x67, 0xb2, 0xba, 0x3e, 0x30, 0xbb, 0xce, 0x0f, 0xbd, 0x5a,
	0x24, 0x46, 0xc9, 0x62, 0x9f, 0x42, 0x96, 0xfd, 0x03, 0x7c, 0xb1, 0x6a, 0x66, 0xfc, 0x29, 0x22,
	0x3f, 0x8a, 0xbb, 0xd3, 0xa5, 0x60, 0x73, 0xba, 0xb3, 0xa9, 0x84, 0xa2, 0xe9, 0xba, 0x64, 0x6b,
	0x72, 0x06, 0x4c, 0xba, 0x9f, 0x00, 0x44, 0x2a, 0x31, 0x69, 0x9b, 0x9c, 0x9a, 0xf4, 0x23, 0x70,
	0xba, 0x1f, 0xc0, 0x8d, 0x3e, 0xb6, 0xf9, 0xee, 0x7f, 0x0c, 0xa3, 0xef, 0xd0, 0x9b, 0x8f, 0xfb,
	0x07, 0x78, 0x42, 0x5e, 0x97, 0x5f, 0x6c, 0x26, 0x15, 0x57, 0x1c, 0xf3, 0xe8, 0xbd, 0x72, 0x17,
	0xf6, 0x7e, 0x4f, 0x8e, 0xed, 0xed, 0x27, 0xc1, 0xb3, 0xfd, 0x24, 0x78, 0xbe, 0x9f, 0x04, 0x0f,
	0x5f, 0x24, 0xc7, 0x9e, 0xbd, 0x48, 0x8e, 0xfd, 0xf2, 0x22, 0x39, 0xb6, 0x19, 0xe6, 0x17, 0xb8,
	0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x82, 0xbb, 0x39, 0xc2, 0x0d, 0x00, 0x00,
}

func (this *VMPoolKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.VMPoolKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVmpool(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VMPoolApiClient is the client API for VMPoolApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMPoolApiClient interface {
	// Create VMPool. Creates VM pool which will have
	// VMs defined.
	CreateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Delete VMPool. Deletes VM pool given that none
	// of VMs part of this pool is used.
	DeleteVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Update VMPool. Updates a VM pool's VMs.
	UpdateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Show VMPools. Lists all the VMs part of the VM pool.
	ShowVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (VMPoolApi_ShowVMPoolClient, error)
	// Add VMPoolMember. Adds a VM to existing VM Pool.
	AddVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove VMPoolMember. Removes a VM from existing VM Pool.
	RemoveVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error)
}

type vMPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewVMPoolApiClient(cc *grpc.ClientConn) VMPoolApiClient {
	return &vMPoolApiClient{cc}
}

func (c *vMPoolApiClient) CreateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.VMPoolApi/CreateVMPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) DeleteVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.VMPoolApi/DeleteVMPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) UpdateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.VMPoolApi/UpdateVMPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) ShowVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (VMPoolApi_ShowVMPoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VMPoolApi_serviceDesc.Streams[0], "/edgeproto.VMPoolApi/ShowVMPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMPoolApiShowVMPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMPoolApi_ShowVMPoolClient interface {
	Recv() (*VMPool, error)
	grpc.ClientStream
}

type vMPoolApiShowVMPoolClient struct {
	grpc.ClientStream
}

func (x *vMPoolApiShowVMPoolClient) Recv() (*VMPool, error) {
	m := new(VMPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMPoolApiClient) AddVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.VMPoolApi/AddVMPoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) RemoveVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.VMPoolApi/RemoveVMPoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMPoolApiServer is the server API for VMPoolApi service.
type VMPoolApiServer interface {
	// Create VMPool. Creates VM pool which will have
	// VMs defined.
	CreateVMPool(context.Context, *VMPool) (*Result, error)
	// Delete VMPool. Deletes VM pool given that none
	// of VMs part of this pool is used.
	DeleteVMPool(context.Context, *VMPool) (*Result, error)
	// Update VMPool. Updates a VM pool's VMs.
	UpdateVMPool(context.Context, *VMPool) (*Result, error)
	// Show VMPools. Lists all the VMs part of the VM pool.
	ShowVMPool(*VMPool, VMPoolApi_ShowVMPoolServer) error
	// Add VMPoolMember. Adds a VM to existing VM Pool.
	AddVMPoolMember(context.Context, *VMPoolMember) (*Result, error)
	// Remove VMPoolMember. Removes a VM from existing VM Pool.
	RemoveVMPoolMember(context.Context, *VMPoolMember) (*Result, error)
}

// UnimplementedVMPoolApiServer can be embedded to have forward compatible implementations.
type UnimplementedVMPoolApiServer struct {
}

func (*UnimplementedVMPoolApiServer) CreateVMPool(ctx context.Context, req *VMPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVMPool not implemented")
}
func (*UnimplementedVMPoolApiServer) DeleteVMPool(ctx context.Context, req *VMPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVMPool not implemented")
}
func (*UnimplementedVMPoolApiServer) UpdateVMPool(ctx context.Context, req *VMPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMPool not implemented")
}
func (*UnimplementedVMPoolApiServer) ShowVMPool(req *VMPool, srv VMPoolApi_ShowVMPoolServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowVMPool not implemented")
}
func (*UnimplementedVMPoolApiServer) AddVMPoolMember(ctx context.Context, req *VMPoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVMPoolMember not implemented")
}
func (*UnimplementedVMPoolApiServer) RemoveVMPoolMember(ctx context.Context, req *VMPoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVMPoolMember not implemented")
}

func RegisterVMPoolApiServer(s *grpc.Server, srv VMPoolApiServer) {
	s.RegisterService(&_VMPoolApi_serviceDesc, srv)
}

func _VMPoolApi_CreateVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).CreateVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/CreateVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).CreateVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_DeleteVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).DeleteVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/DeleteVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).DeleteVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_UpdateVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).UpdateVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/UpdateVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).UpdateVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_ShowVMPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMPoolApiServer).ShowVMPool(m, &vMPoolApiShowVMPoolServer{stream})
}

type VMPoolApi_ShowVMPoolServer interface {
	Send(*VMPool) error
	grpc.ServerStream
}

type vMPoolApiShowVMPoolServer struct {
	grpc.ServerStream
}

func (x *vMPoolApiShowVMPoolServer) Send(m *VMPool) error {
	return x.ServerStream.SendMsg(m)
}

func _VMPoolApi_AddVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).AddVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/AddVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).AddVMPoolMember(ctx, req.(*VMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_RemoveVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).RemoveVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/RemoveVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).RemoveVMPoolMember(ctx, req.(*VMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.VMPoolApi",
	HandlerType: (*VMPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVMPool",
			Handler:    _VMPoolApi_CreateVMPool_Handler,
		},
		{
			MethodName: "DeleteVMPool",
			Handler:    _VMPoolApi_DeleteVMPool_Handler,
		},
		{
			MethodName: "UpdateVMPool",
			Handler:    _VMPoolApi_UpdateVMPool_Handler,
		},
		{
			MethodName: "AddVMPoolMember",
			Handler:    _VMPoolApi_AddVMPoolMember_Handler,
		},
		{
			MethodName: "RemoveVMPoolMember",
			Handler:    _VMPoolApi_RemoveVMPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowVMPool",
			Handler:       _VMPoolApi_ShowVMPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vmpool.proto",
}

func (m *VMNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMNetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMNetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flavor != nil {
		{
			size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmpool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InternalName) > 0 {
		i -= len(m.InternalName)
		copy(dAtA[i:], m.InternalName)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalName)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.State != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.NetInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMPoolKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPoolKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMPoolKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CrmOverride != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.CrmOverride))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintVmpool(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.State != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Vms) > 0 {
		for iNdEx := len(m.Vms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintVmpool(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPoolMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMPoolMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrmOverride != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.CrmOverride))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Vm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VMSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Flavor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.InternalNetwork {
		i--
		if m.InternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ExternalNetwork {
		i--
		if m.ExternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.InternalName) > 0 {
		i -= len(m.InternalName)
		copy(dAtA[i:], m.InternalName)
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VMPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMPoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintVmpool(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.State != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Vms) > 0 {
		for iNdEx := len(m.Vms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NotifyId != 0 {
		i = encodeVarintVmpool(dAtA, i, uint64(m.NotifyId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVmpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintVmpool(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVmpool(dAtA []byte, offset int, v uint64) int {
	offset -= sovVmpool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VMNetInfo) CopyInFields(src *VMNetInfo) int {
	changed := 0
	if m.ExternalIp != src.ExternalIp {
		m.ExternalIp = src.ExternalIp
		changed++
	}
	if m.InternalIp != src.InternalIp {
		m.InternalIp = src.InternalIp
		changed++
	}
	return changed
}

func (m *VMNetInfo) DeepCopyIn(src *VMNetInfo) {
	m.ExternalIp = src.ExternalIp
	m.InternalIp = src.InternalIp
}

// Helper method to check that enums have valid values
func (m *VMNetInfo) ValidateEnums() error {
	return nil
}

func (s *VMNetInfo) ClearTagged(tags map[string]struct{}) {
}

func (m *VM) CopyInFields(src *VM) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.NetInfo.ExternalIp != src.NetInfo.ExternalIp {
		m.NetInfo.ExternalIp = src.NetInfo.ExternalIp
		changed++
	}
	if m.NetInfo.InternalIp != src.NetInfo.InternalIp {
		m.NetInfo.InternalIp = src.NetInfo.InternalIp
		changed++
	}
	if m.GroupName != src.GroupName {
		m.GroupName = src.GroupName
		changed++
	}
	if m.State != src.State {
		m.State = src.State
		changed++
	}
	if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
		m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
		changed++
	}
	if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
		m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
		changed++
	}
	if m.InternalName != src.InternalName {
		m.InternalName = src.InternalName
		changed++
	}
	if src.Flavor != nil {
		m.Flavor = &FlavorInfo{}
		if m.Flavor.Name != src.Flavor.Name {
			m.Flavor.Name = src.Flavor.Name
			changed++
		}
		if m.Flavor.Vcpus != src.Flavor.Vcpus {
			m.Flavor.Vcpus = src.Flavor.Vcpus
			changed++
		}
		if m.Flavor.Ram != src.Flavor.Ram {
			m.Flavor.Ram = src.Flavor.Ram
			changed++
		}
		if m.Flavor.Disk != src.Flavor.Disk {
			m.Flavor.Disk = src.Flavor.Disk
			changed++
		}
		if src.Flavor.PropMap != nil {
			m.Flavor.PropMap = make(map[string]string)
			for k1, _ := range src.Flavor.PropMap {
				m.Flavor.PropMap[k1] = src.Flavor.PropMap[k1]
				changed++
			}
		} else if m.Flavor.PropMap != nil {
			m.Flavor.PropMap = nil
			changed++
		}
	} else if m.Flavor != nil {
		m.Flavor = nil
		changed++
	}
	return changed
}

func (m *VM) DeepCopyIn(src *VM) {
	m.Name = src.Name
	m.NetInfo.DeepCopyIn(&src.NetInfo)
	m.GroupName = src.GroupName
	m.State = src.State
	m.UpdatedAt = src.UpdatedAt
	m.InternalName = src.InternalName
	if src.Flavor != nil {
		var tmp_Flavor FlavorInfo
		tmp_Flavor.DeepCopyIn(src.Flavor)
		m.Flavor = &tmp_Flavor
	} else {
		m.Flavor = nil
	}
}

// Helper method to check that enums have valid values
func (m *VM) ValidateEnums() error {
	if err := m.NetInfo.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := VMState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if m.Flavor != nil {
		if err := m.Flavor.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *VM) ClearTagged(tags map[string]struct{}) {
	s.NetInfo.ClearTagged(tags)
	if _, found := tags["timestamp"]; found {
		s.UpdatedAt = google_protobuf.Timestamp{}
	}
	if s.Flavor != nil {
		s.Flavor.ClearTagged(tags)
	}
}

func IgnoreVMFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(VM{}, names...)
}

func (m *VMPoolKey) Matches(o *VMPoolKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *VMPoolKey) CopyInFields(src *VMPoolKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *VMPoolKey) DeepCopyIn(src *VMPoolKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *VMPoolKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal VMPoolKey key string", "obj", m)
	}
	return string(key)
}

func VMPoolKeyStringParse(str string, key *VMPoolKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal VMPoolKey key string", "str", str)
	}
}

func (m *VMPoolKey) NotFoundError() error {
	return fmt.Errorf("VMPool key %s not found", m.GetKeyString())
}

func (m *VMPoolKey) ExistsError() error {
	return fmt.Errorf("VMPool key %s already exists", m.GetKeyString())
}

func (m *VMPoolKey) BeingDeletedError() error {
	return fmt.Errorf("VMPool %s is being deleted", m.GetKeyString())
}

var VMPoolKeyTagOrganization = "vmpoolorg"
var VMPoolKeyTagName = "vmpool"

func (m *VMPoolKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["vmpoolorg"] = m.Organization
	tags["vmpool"] = m.Name
	return tags
}

// Helper method to check that enums have valid values
func (m *VMPoolKey) ValidateEnums() error {
	return nil
}

func (s *VMPoolKey) ClearTagged(tags map[string]struct{}) {
}

func (m *VMPool) Matches(o *VMPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Vms != nil {
		if len(m.Vms) == 0 && len(o.Vms) > 0 || len(m.Vms) > 0 && len(o.Vms) == 0 {
			return false
		} else if m.Vms != nil && o.Vms != nil {
			if !opts.Filter && len(m.Vms) != len(o.Vms) {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.State != 0 {
			if o.State != m.State {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Errors != nil {
			if len(m.Errors) == 0 && len(o.Errors) > 0 || len(m.Errors) > 0 && len(o.Errors) == 0 {
				return false
			} else if m.Errors != nil && o.Errors != nil {
				if !opts.Filter && len(m.Errors) != len(o.Errors) {
					return false
				}
				found := 0
				for oIndex, _ := range o.Errors {
					for mIndex, _ := range m.Errors {
						if o.Errors[oIndex] == m.Errors[mIndex] {
							found++
							break
						}
					}
				}
				if found != len(o.Errors) {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.Filter || o.CrmOverride != 0 {
		if o.CrmOverride != m.CrmOverride {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	return true
}

const VMPoolFieldKey = "2"
const VMPoolFieldKeyOrganization = "2.1"
const VMPoolFieldKeyName = "2.2"
const VMPoolFieldVms = "3"
const VMPoolFieldVmsName = "3.1"
const VMPoolFieldVmsNetInfo = "3.2"
const VMPoolFieldVmsNetInfoExternalIp = "3.2.1"
const VMPoolFieldVmsNetInfoInternalIp = "3.2.2"
const VMPoolFieldVmsGroupName = "3.3"
const VMPoolFieldVmsState = "3.4"
const VMPoolFieldVmsUpdatedAt = "3.5"
const VMPoolFieldVmsUpdatedAtSeconds = "3.5.1"
const VMPoolFieldVmsUpdatedAtNanos = "3.5.2"
const VMPoolFieldVmsInternalName = "3.6"
const VMPoolFieldVmsFlavor = "3.7"
const VMPoolFieldVmsFlavorName = "3.7.1"
const VMPoolFieldVmsFlavorVcpus = "3.7.2"
const VMPoolFieldVmsFlavorRam = "3.7.3"
const VMPoolFieldVmsFlavorDisk = "3.7.4"
const VMPoolFieldVmsFlavorPropMap = "3.7.5"
const VMPoolFieldVmsFlavorPropMapKey = "3.7.5.1"
const VMPoolFieldVmsFlavorPropMapValue = "3.7.5.2"
const VMPoolFieldState = "4"
const VMPoolFieldErrors = "5"
const VMPoolFieldStatus = "6"
const VMPoolFieldStatusTaskNumber = "6.1"
const VMPoolFieldStatusMaxTasks = "6.2"
const VMPoolFieldStatusTaskName = "6.3"
const VMPoolFieldStatusStepName = "6.4"
const VMPoolFieldStatusMsgCount = "6.5"
const VMPoolFieldStatusMsgs = "6.6"
const VMPoolFieldCrmOverride = "7"
const VMPoolFieldDeletePrepare = "8"

var VMPoolAllFields = []string{
	VMPoolFieldKeyOrganization,
	VMPoolFieldKeyName,
	VMPoolFieldVmsName,
	VMPoolFieldVmsNetInfoExternalIp,
	VMPoolFieldVmsNetInfoInternalIp,
	VMPoolFieldVmsGroupName,
	VMPoolFieldVmsState,
	VMPoolFieldVmsUpdatedAtSeconds,
	VMPoolFieldVmsUpdatedAtNanos,
	VMPoolFieldVmsInternalName,
	VMPoolFieldVmsFlavorName,
	VMPoolFieldVmsFlavorVcpus,
	VMPoolFieldVmsFlavorRam,
	VMPoolFieldVmsFlavorDisk,
	VMPoolFieldVmsFlavorPropMapKey,
	VMPoolFieldVmsFlavorPropMapValue,
	VMPoolFieldState,
	VMPoolFieldErrors,
	VMPoolFieldStatusTaskNumber,
	VMPoolFieldStatusMaxTasks,
	VMPoolFieldStatusTaskName,
	VMPoolFieldStatusStepName,
	VMPoolFieldStatusMsgCount,
	VMPoolFieldStatusMsgs,
	VMPoolFieldCrmOverride,
	VMPoolFieldDeletePrepare,
}

var VMPoolAllFieldsMap = map[string]struct{}{
	VMPoolFieldKeyOrganization:       struct{}{},
	VMPoolFieldKeyName:               struct{}{},
	VMPoolFieldVmsName:               struct{}{},
	VMPoolFieldVmsNetInfoExternalIp:  struct{}{},
	VMPoolFieldVmsNetInfoInternalIp:  struct{}{},
	VMPoolFieldVmsGroupName:          struct{}{},
	VMPoolFieldVmsState:              struct{}{},
	VMPoolFieldVmsUpdatedAtSeconds:   struct{}{},
	VMPoolFieldVmsUpdatedAtNanos:     struct{}{},
	VMPoolFieldVmsInternalName:       struct{}{},
	VMPoolFieldVmsFlavorName:         struct{}{},
	VMPoolFieldVmsFlavorVcpus:        struct{}{},
	VMPoolFieldVmsFlavorRam:          struct{}{},
	VMPoolFieldVmsFlavorDisk:         struct{}{},
	VMPoolFieldVmsFlavorPropMapKey:   struct{}{},
	VMPoolFieldVmsFlavorPropMapValue: struct{}{},
	VMPoolFieldState:                 struct{}{},
	VMPoolFieldErrors:                struct{}{},
	VMPoolFieldStatusTaskNumber:      struct{}{},
	VMPoolFieldStatusMaxTasks:        struct{}{},
	VMPoolFieldStatusTaskName:        struct{}{},
	VMPoolFieldStatusStepName:        struct{}{},
	VMPoolFieldStatusMsgCount:        struct{}{},
	VMPoolFieldStatusMsgs:            struct{}{},
	VMPoolFieldCrmOverride:           struct{}{},
	VMPoolFieldDeletePrepare:         struct{}{},
}

var VMPoolAllFieldsStringMap = map[string]string{
	VMPoolFieldKeyOrganization:       "Key Organization",
	VMPoolFieldKeyName:               "Key Name",
	VMPoolFieldVmsName:               "Vms Name",
	VMPoolFieldVmsNetInfoExternalIp:  "Vms Net Info External Ip",
	VMPoolFieldVmsNetInfoInternalIp:  "Vms Net Info Internal Ip",
	VMPoolFieldVmsGroupName:          "Vms Group Name",
	VMPoolFieldVmsState:              "Vms State",
	VMPoolFieldVmsUpdatedAtSeconds:   "Vms Updated At Seconds",
	VMPoolFieldVmsUpdatedAtNanos:     "Vms Updated At Nanos",
	VMPoolFieldVmsInternalName:       "Vms Internal Name",
	VMPoolFieldVmsFlavorName:         "Vms Flavor Name",
	VMPoolFieldVmsFlavorVcpus:        "Vms Flavor Vcpus",
	VMPoolFieldVmsFlavorRam:          "Vms Flavor Ram",
	VMPoolFieldVmsFlavorDisk:         "Vms Flavor Disk",
	VMPoolFieldVmsFlavorPropMapKey:   "Vms Flavor Prop Map Key",
	VMPoolFieldVmsFlavorPropMapValue: "Vms Flavor Prop Map Value",
	VMPoolFieldState:                 "State",
	VMPoolFieldErrors:                "Errors",
	VMPoolFieldStatusTaskNumber:      "Status Task Number",
	VMPoolFieldStatusMaxTasks:        "Status Max Tasks",
	VMPoolFieldStatusTaskName:        "Status Task Name",
	VMPoolFieldStatusStepName:        "Status Step Name",
	VMPoolFieldStatusMsgCount:        "Status Msg Count",
	VMPoolFieldStatusMsgs:            "Status Msgs",
	VMPoolFieldCrmOverride:           "Crm Override",
	VMPoolFieldDeletePrepare:         "Delete Prepare",
}

func (m *VMPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, VMPoolFieldKey+".") || s == VMPoolFieldKey
}

func (m *VMPool) DiffFields(o *VMPool, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[VMPoolFieldKeyOrganization] = struct{}{}
		fields[VMPoolFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[VMPoolFieldKeyName] = struct{}{}
		fields[VMPoolFieldKey] = struct{}{}
	}
	if len(m.Vms) != len(o.Vms) {
		fields[VMPoolFieldVms] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Vms); i0++ {
			if m.Vms[i0].Name != o.Vms[i0].Name {
				fields[VMPoolFieldVmsName] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].NetInfo.ExternalIp != o.Vms[i0].NetInfo.ExternalIp {
				fields[VMPoolFieldVmsNetInfoExternalIp] = struct{}{}
				fields[VMPoolFieldVmsNetInfo] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].NetInfo.InternalIp != o.Vms[i0].NetInfo.InternalIp {
				fields[VMPoolFieldVmsNetInfoInternalIp] = struct{}{}
				fields[VMPoolFieldVmsNetInfo] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].GroupName != o.Vms[i0].GroupName {
				fields[VMPoolFieldVmsGroupName] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].State != o.Vms[i0].State {
				fields[VMPoolFieldVmsState] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].UpdatedAt.Seconds != o.Vms[i0].UpdatedAt.Seconds {
				fields[VMPoolFieldVmsUpdatedAtSeconds] = struct{}{}
				fields[VMPoolFieldVmsUpdatedAt] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].UpdatedAt.Nanos != o.Vms[i0].UpdatedAt.Nanos {
				fields[VMPoolFieldVmsUpdatedAtNanos] = struct{}{}
				fields[VMPoolFieldVmsUpdatedAt] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].InternalName != o.Vms[i0].InternalName {
				fields[VMPoolFieldVmsInternalName] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
			if m.Vms[i0].Flavor != nil && o.Vms[i0].Flavor != nil {
				if m.Vms[i0].Flavor.Name != o.Vms[i0].Flavor.Name {
					fields[VMPoolFieldVmsFlavorName] = struct{}{}
					fields[VMPoolFieldVmsFlavor] = struct{}{}
					fields[VMPoolFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Vcpus != o.Vms[i0].Flavor.Vcpus {
					fields[VMPoolFieldVmsFlavorVcpus] = struct{}{}
					fields[VMPoolFieldVmsFlavor] = struct{}{}
					fields[VMPoolFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Ram != o.Vms[i0].Flavor.Ram {
					fields[VMPoolFieldVmsFlavorRam] = struct{}{}
					fields[VMPoolFieldVmsFlavor] = struct{}{}
					fields[VMPoolFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Disk != o.Vms[i0].Flavor.Disk {
					fields[VMPoolFieldVmsFlavorDisk] = struct{}{}
					fields[VMPoolFieldVmsFlavor] = struct{}{}
					fields[VMPoolFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.PropMap != nil && o.Vms[i0].Flavor.PropMap != nil {
					if len(m.Vms[i0].Flavor.PropMap) != len(o.Vms[i0].Flavor.PropMap) {
						fields[VMPoolFieldVmsFlavorPropMap] = struct{}{}
						fields[VMPoolFieldVmsFlavor] = struct{}{}
						fields[VMPoolFieldVms] = struct{}{}
					} else {
						for k2, _ := range m.Vms[i0].Flavor.PropMap {
							_, vok2 := o.Vms[i0].Flavor.PropMap[k2]
							if !vok2 {
								fields[VMPoolFieldVmsFlavorPropMap] = struct{}{}
								fields[VMPoolFieldVmsFlavor] = struct{}{}
								fields[VMPoolFieldVms] = struct{}{}
							} else {
								if m.Vms[i0].Flavor.PropMap[k2] != o.Vms[i0].Flavor.PropMap[k2] {
									fields[VMPoolFieldVmsFlavorPropMap] = struct{}{}
									fields[VMPoolFieldVmsFlavor] = struct{}{}
									fields[VMPoolFieldVms] = struct{}{}
									break
								}
							}
						}
					}
				} else if (m.Vms[i0].Flavor.PropMap != nil && o.Vms[i0].Flavor.PropMap == nil) || (m.Vms[i0].Flavor.PropMap == nil && o.Vms[i0].Flavor.PropMap != nil) {
					fields[VMPoolFieldVmsFlavorPropMap] = struct{}{}
					fields[VMPoolFieldVmsFlavor] = struct{}{}
					fields[VMPoolFieldVms] = struct{}{}
				}
			} else if (m.Vms[i0].Flavor != nil && o.Vms[i0].Flavor == nil) || (m.Vms[i0].Flavor == nil && o.Vms[i0].Flavor != nil) {
				fields[VMPoolFieldVmsFlavor] = struct{}{}
				fields[VMPoolFieldVms] = struct{}{}
			}
		}
	}
	if m.State != o.State {
		fields[VMPoolFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[VMPoolFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[VMPoolFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[VMPoolFieldStatusTaskNumber] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[VMPoolFieldStatusMaxTasks] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[VMPoolFieldStatusTaskName] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[VMPoolFieldStatusStepName] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	}
	if m.Status.MsgCount != o.Status.MsgCount {
		fields[VMPoolFieldStatusMsgCount] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	}
	if len(m.Status.Msgs) != len(o.Status.Msgs) {
		fields[VMPoolFieldStatusMsgs] = struct{}{}
		fields[VMPoolFieldStatus] = struct{}{}
	} else {
		for i1 := 0; i1 < len(m.Status.Msgs); i1++ {
			if m.Status.Msgs[i1] != o.Status.Msgs[i1] {
				fields[VMPoolFieldStatusMsgs] = struct{}{}
				fields[VMPoolFieldStatus] = struct{}{}
				break
			}
		}
	}
	if m.CrmOverride != o.CrmOverride {
		fields[VMPoolFieldCrmOverride] = struct{}{}
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields[VMPoolFieldDeletePrepare] = struct{}{}
	}
}

var UpdateVMPoolFieldsMap = map[string]struct{}{
	VMPoolFieldVms:                   struct{}{},
	VMPoolFieldVmsName:               struct{}{},
	VMPoolFieldVmsNetInfo:            struct{}{},
	VMPoolFieldVmsNetInfoExternalIp:  struct{}{},
	VMPoolFieldVmsNetInfoInternalIp:  struct{}{},
	VMPoolFieldVmsGroupName:          struct{}{},
	VMPoolFieldVmsState:              struct{}{},
	VMPoolFieldVmsUpdatedAt:          struct{}{},
	VMPoolFieldVmsUpdatedAtSeconds:   struct{}{},
	VMPoolFieldVmsUpdatedAtNanos:     struct{}{},
	VMPoolFieldVmsInternalName:       struct{}{},
	VMPoolFieldVmsFlavor:             struct{}{},
	VMPoolFieldVmsFlavorName:         struct{}{},
	VMPoolFieldVmsFlavorVcpus:        struct{}{},
	VMPoolFieldVmsFlavorRam:          struct{}{},
	VMPoolFieldVmsFlavorDisk:         struct{}{},
	VMPoolFieldVmsFlavorPropMap:      struct{}{},
	VMPoolFieldVmsFlavorPropMapValue: struct{}{},
	VMPoolFieldCrmOverride:           struct{}{},
	VMPoolFieldDeletePrepare:         struct{}{},
}

func (m *VMPool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateVMPoolFieldsMap[field]; !ok {
			if _, ok := VMPoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, VMPoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *VMPool) CopyInFields(src *VMPool) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if src.Vms != nil {
			m.Vms = src.Vms
			changed++
		} else if m.Vms != nil {
			m.Vms = nil
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.State != src.State {
			m.State = src.State
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if src.Errors != nil {
			m.Errors = src.Errors
			changed++
		} else if m.Errors != nil {
			m.Errors = nil
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if _, set := fmap["6.1"]; set {
			if m.Status.TaskNumber != src.Status.TaskNumber {
				m.Status.TaskNumber = src.Status.TaskNumber
				changed++
			}
		}
		if _, set := fmap["6.2"]; set {
			if m.Status.MaxTasks != src.Status.MaxTasks {
				m.Status.MaxTasks = src.Status.MaxTasks
				changed++
			}
		}
		if _, set := fmap["6.3"]; set {
			if m.Status.TaskName != src.Status.TaskName {
				m.Status.TaskName = src.Status.TaskName
				changed++
			}
		}
		if _, set := fmap["6.4"]; set {
			if m.Status.StepName != src.Status.StepName {
				m.Status.StepName = src.Status.StepName
				changed++
			}
		}
		if _, set := fmap["6.5"]; set {
			if m.Status.MsgCount != src.Status.MsgCount {
				m.Status.MsgCount = src.Status.MsgCount
				changed++
			}
		}
		if _, set := fmap["6.6"]; set {
			if src.Status.Msgs != nil {
				m.Status.Msgs = src.Status.Msgs
				changed++
			} else if m.Status.Msgs != nil {
				m.Status.Msgs = nil
				changed++
			}
		}
	}
	if _, set := fmap["7"]; set {
		if m.CrmOverride != src.CrmOverride {
			m.CrmOverride = src.CrmOverride
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	return changed
}

func (m *VMPool) DeepCopyIn(src *VMPool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.Vms != nil {
		m.Vms = make([]VM, len(src.Vms), len(src.Vms))
		for ii, s := range src.Vms {
			m.Vms[ii].DeepCopyIn(&s)
		}
	} else {
		m.Vms = nil
	}
	m.State = src.State
	if src.Errors != nil {
		m.Errors = make([]string, len(src.Errors), len(src.Errors))
		for ii, s := range src.Errors {
			m.Errors[ii] = s
		}
	} else {
		m.Errors = nil
	}
	m.Status.DeepCopyIn(&src.Status)
	m.CrmOverride = src.CrmOverride
	m.DeletePrepare = src.DeletePrepare
}

func (s *VMPool) HasFields() bool {
	return true
}

type VMPoolStore interface {
	Create(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *VMPool, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*VMPool, int64, error)
	Get(ctx context.Context, key *VMPoolKey, buf *VMPool) bool
	STMGet(stm concurrency.STM, key *VMPoolKey, buf *VMPool) bool
	STMPut(stm concurrency.STM, obj *VMPool, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *VMPoolKey)
}

type VMPoolStoreImpl struct {
	kvstore objstore.KVStore
}

func NewVMPoolStore(kvstore objstore.KVStore) *VMPoolStoreImpl {
	return &VMPoolStoreImpl{kvstore: kvstore}
}

func (s *VMPoolStoreImpl) Create(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	err := m.Validate(VMPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStoreImpl) Update(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur VMPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStoreImpl) Put(ctx context.Context, m *VMPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(VMPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStoreImpl) Delete(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStoreImpl) LoadOne(key string) (*VMPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj VMPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse VMPool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *VMPoolStoreImpl) Get(ctx context.Context, key *VMPoolKey, buf *VMPool) bool {
	keystr := objstore.DbKeyString("VMPool", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *VMPoolStoreImpl) STMGet(stm concurrency.STM, key *VMPoolKey, buf *VMPool) bool {
	keystr := objstore.DbKeyString("VMPool", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *VMPoolStoreImpl) parseGetData(val []byte, buf *VMPool) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = VMPool{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *VMPoolStoreImpl) STMPut(stm concurrency.STM, obj *VMPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("VMPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("VMPool json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *VMPoolStoreImpl) STMDel(stm concurrency.STM, key *VMPoolKey) {
	keystr := objstore.DbKeyString("VMPool", key)
	stm.Del(keystr)
}

type VMPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type VMPoolCacheData struct {
	Obj    *VMPool
	ModRev int64
}

// VMPoolCache caches VMPool objects in memory in a hash table
// and keeps them in sync with the database.
type VMPoolCache struct {
	Objs          map[VMPoolKey]*VMPoolCacheData
	Mux           util.Mutex
	List          map[VMPoolKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *VMPoolKey, old *VMPool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *VMPool, new *VMPool)
	DeletedCbs    []func(ctx context.Context, old *VMPool)
	KeyWatchers   map[VMPoolKey][]*VMPoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *VMPoolKey)
	DeletedKeyCbs []func(ctx context.Context, key *VMPoolKey)
}

func NewVMPoolCache() *VMPoolCache {
	cache := VMPoolCache{}
	InitVMPoolCache(&cache)
	return &cache
}

func InitVMPoolCache(cache *VMPoolCache) {
	cache.Objs = make(map[VMPoolKey]*VMPoolCacheData)
	cache.KeyWatchers = make(map[VMPoolKey][]*VMPoolKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *VMPoolCache) GetTypeString() string {
	return "VMPool"
}

func (c *VMPoolCache) Get(key *VMPoolKey, valbuf *VMPool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *VMPoolCache) GetWithRev(key *VMPoolKey, valbuf *VMPool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *VMPoolCache) HasKey(key *VMPoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *VMPoolCache) GetAllKeys(ctx context.Context, cb func(key *VMPoolKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *VMPoolCache) Update(ctx context.Context, in *VMPool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *VMPool) (*VMPool, bool) {
		return in, true
	})
}

func (c *VMPoolCache) UpdateModFunc(ctx context.Context, key *VMPoolKey, modRev int64, modFunc func(old *VMPool) (new *VMPool, changed bool)) {
	c.Mux.Lock()
	var old *VMPool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &VMPool{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &VMPool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &VMPoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *VMPoolCache) Delete(ctx context.Context, in *VMPool, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *VMPool) bool {
		return true
	})
}

func (c *VMPoolCache) DeleteCondFunc(ctx context.Context, in *VMPool, modRev int64, condFunc func(old *VMPool) bool) {
	c.Mux.Lock()
	var old *VMPool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *VMPoolCache) Prune(ctx context.Context, validKeys map[VMPoolKey]struct{}) {
	notify := make(map[VMPoolKey]*VMPoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *VMPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *VMPoolCache) Show(filter *VMPool, cb func(ret *VMPool) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func VMPoolGenericNotifyCb(fn func(key *VMPoolKey, old *VMPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*VMPoolKey), obj.(*VMPool))
	}
}

func (c *VMPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *VMPoolKey, old *VMPool, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *VMPoolKey, old *VMPool, modRev int64){fn}
}

func (c *VMPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *VMPool, new *VMPool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *VMPool, new *VMPool){fn}
}

func (c *VMPoolCache) SetDeletedCb(fn func(ctx context.Context, old *VMPool)) {
	c.DeletedCbs = []func(ctx context.Context, old *VMPool){fn}
}

func (c *VMPoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *VMPoolKey){fn}
}

func (c *VMPoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *VMPoolKey){fn}
}

func (c *VMPoolCache) AddUpdatedCb(fn func(ctx context.Context, old *VMPool, new *VMPool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *VMPoolCache) AddDeletedCb(fn func(ctx context.Context, old *VMPool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *VMPoolCache) AddNotifyCb(fn func(ctx context.Context, obj *VMPoolKey, old *VMPool, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *VMPoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *VMPoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *VMPoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *VMPoolCache) WatchKey(key *VMPoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*VMPoolKeyWatcher, 0)
	}
	watcher := VMPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching VMPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *VMPoolCache) TriggerKeyWatchers(ctx context.Context, key *VMPoolKey) {
	watchers := make([]*VMPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *VMPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := VMPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse VMPool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *VMPoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := VMPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	VMPoolKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *VMPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[VMPoolKey]struct{})
}

func (c *VMPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[VMPoolKey]*VMPoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolCache) WaitForState(ctx context.Context, key *VMPoolKey, targetState TrackedState, transitionStates map[TrackedState]struct{}, errorState TrackedState, timeout time.Duration, successMsg string, send func(*Result) error, opts ...WaitStateOps) error {
	curState := TrackedState_TRACKED_STATE_UNKNOWN
	done := make(chan string, 1)
	failed := make(chan bool, 1)
	var lastMsgCnt int
	var err error

	var wSpec WaitStateSpec
	for _, op := range opts {
		if err := op(&wSpec); err != nil {
			return err
		}
	}

	var streamCancel context.CancelFunc
	if wSpec.StreamCache != nil {
		checkStreamMsg := func() {
			streamObj := StreamObj{}
			if !wSpec.StreamCache.Get(wSpec.StreamKey, &streamObj) {
				return
			}
			if len(streamObj.Status.Msgs) > 0 || streamObj.Status.MsgCount > 0 {
				if lastMsgCnt < int(streamObj.Status.MsgCount) {
					for ii := 0; ii < len(streamObj.Status.Msgs); ii++ {
						send(&Result{Message: streamObj.Status.Msgs[ii]})
						lastMsgCnt++
					}
				}
			}
		}

		streamCancel = wSpec.StreamCache.WatchKey(wSpec.StreamKey, func(ctx context.Context) {
			checkStreamMsg()
		})

		// After setting up watch, check if any status messages were received in the meantime
		checkStreamMsg()
	}

	cancel := c.WatchKey(key, func(ctx context.Context) {
		info := VMPool{}
		if c.Get(key, &info) {
			curState = info.State
		} else {
			curState = TrackedState_NOT_PRESENT
		}
		log.SpanLog(ctx, log.DebugLevelApi, "Watch event for VMPool", "key", key, "state", TrackedState_CamelName[int32(curState)])
		if curState == errorState {
			failed <- true
		} else if curState == targetState {
			msg := ""
			if curState == TrackedState_NOT_PRESENT {
				msg = TrackedState_CamelName[int32(curState)]
			}
			done <- msg
		}
	})
	// After setting up watch, check current state,
	// as it may have already changed to target state
	info := VMPool{}
	if c.Get(key, &info) {
		curState = info.State
	} else {
		curState = TrackedState_NOT_PRESENT
	}
	if curState == targetState {
		msg := ""
		if curState == TrackedState_NOT_PRESENT {
			msg = TrackedState_CamelName[int32(curState)]
		}
		done <- msg
	}

	select {
	case doneMsg := <-done:
		if doneMsg != "" {
			send(&Result{Message: doneMsg})
		}
		err = nil
		if successMsg != "" && send != nil {
			send(&Result{Message: successMsg})
		}
	case <-failed:
		if c.Get(key, &info) {
			errs := strings.Join(info.Errors, ", ")
			err = fmt.Errorf("Encountered failures: %s", errs)
		} else {
			// this shouldn't happen, since only way to get here
			// is if info state is set to Error
			err = errors.New("Unknown failure")
		}
	case <-time.After(timeout):
		hasInfo := c.Get(key, &info)
		if hasInfo && info.State == errorState {
			// error may have been sent back before watch started
			errs := strings.Join(info.Errors, ", ")
			err = fmt.Errorf("Encountered failures: %s", errs)
		} else if _, found := transitionStates[info.State]; hasInfo && found {
			// no success response, but state is a valid transition
			// state. That means work is still in progress.
			// Notify user that this is not an error.
			// Do not undo since CRM is still busy.
			if send != nil {
				msg := fmt.Sprintf("Timed out while work still in progress state %s. Please use ShowVMPool to check current status", TrackedState_CamelName[int32(info.State)])
				send(&Result{Message: msg})
			}
			err = nil
		} else {
			err = fmt.Errorf("Timed out; expected state %s but is %s",
				TrackedState_CamelName[int32(targetState)],
				TrackedState_CamelName[int32(curState)])
		}
	}
	cancel()
	if streamCancel != nil {
		streamCancel()
	}
	// note: do not close done/failed, garbage collector will deal with it.
	return err
}

func (c *VMPoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *VMPool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPool) GetKey() *VMPoolKey {
	return &m.Key
}

func (m *VMPool) GetKeyVal() VMPoolKey {
	return m.Key
}

func (m *VMPool) SetKey(key *VMPoolKey) {
	m.Key = *key
}

func CmpSortVMPool(a VMPool, b VMPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *VMPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Vms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CRMOverride_name[int32(m.CrmOverride)]; !ok {
		return errors.New("invalid CrmOverride")
	}
	return nil
}

func (s *VMPool) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if s.Vms != nil {
		for ii := 0; ii < len(s.Vms); ii++ {
			s.Vms[ii].ClearTagged(tags)
		}
	}
	if _, found := tags["nocmp"]; found {
		s.Errors = nil
	}
	s.Status.ClearTagged(tags)
}

func IgnoreVMPoolFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Vms.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Errors")
	}
	return cmpopts.IgnoreFields(VMPool{}, names...)
}

func (m *VMPoolMember) CopyInFields(src *VMPoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.Vm.Name != src.Vm.Name {
		m.Vm.Name = src.Vm.Name
		changed++
	}
	if m.Vm.NetInfo.ExternalIp != src.Vm.NetInfo.ExternalIp {
		m.Vm.NetInfo.ExternalIp = src.Vm.NetInfo.ExternalIp
		changed++
	}
	if m.Vm.NetInfo.InternalIp != src.Vm.NetInfo.InternalIp {
		m.Vm.NetInfo.InternalIp = src.Vm.NetInfo.InternalIp
		changed++
	}
	if m.Vm.GroupName != src.Vm.GroupName {
		m.Vm.GroupName = src.Vm.GroupName
		changed++
	}
	if m.Vm.State != src.Vm.State {
		m.Vm.State = src.Vm.State
		changed++
	}
	if m.Vm.UpdatedAt.Seconds != src.Vm.UpdatedAt.Seconds {
		m.Vm.UpdatedAt.Seconds = src.Vm.UpdatedAt.Seconds
		changed++
	}
	if m.Vm.UpdatedAt.Nanos != src.Vm.UpdatedAt.Nanos {
		m.Vm.UpdatedAt.Nanos = src.Vm.UpdatedAt.Nanos
		changed++
	}
	if m.Vm.InternalName != src.Vm.InternalName {
		m.Vm.InternalName = src.Vm.InternalName
		changed++
	}
	if src.Vm.Flavor != nil {
		m.Vm.Flavor = &FlavorInfo{}
		if m.Vm.Flavor.Name != src.Vm.Flavor.Name {
			m.Vm.Flavor.Name = src.Vm.Flavor.Name
			changed++
		}
		if m.Vm.Flavor.Vcpus != src.Vm.Flavor.Vcpus {
			m.Vm.Flavor.Vcpus = src.Vm.Flavor.Vcpus
			changed++
		}
		if m.Vm.Flavor.Ram != src.Vm.Flavor.Ram {
			m.Vm.Flavor.Ram = src.Vm.Flavor.Ram
			changed++
		}
		if m.Vm.Flavor.Disk != src.Vm.Flavor.Disk {
			m.Vm.Flavor.Disk = src.Vm.Flavor.Disk
			changed++
		}
		if src.Vm.Flavor.PropMap != nil {
			m.Vm.Flavor.PropMap = make(map[string]string)
			for k2, _ := range src.Vm.Flavor.PropMap {
				m.Vm.Flavor.PropMap[k2] = src.Vm.Flavor.PropMap[k2]
				changed++
			}
		} else if m.Vm.Flavor.PropMap != nil {
			m.Vm.Flavor.PropMap = nil
			changed++
		}
	} else if m.Vm.Flavor != nil {
		m.Vm.Flavor = nil
		changed++
	}
	if m.CrmOverride != src.CrmOverride {
		m.CrmOverride = src.CrmOverride
		changed++
	}
	return changed
}

func (m *VMPoolMember) DeepCopyIn(src *VMPoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.Vm.DeepCopyIn(&src.Vm)
	m.CrmOverride = src.CrmOverride
}

func (m *VMPoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPoolMember) GetKey() *VMPoolKey {
	return &m.Key
}

func (m *VMPoolMember) GetKeyVal() VMPoolKey {
	return m.Key
}

func (m *VMPoolMember) SetKey(key *VMPoolKey) {
	m.Key = *key
}

func CmpSortVMPoolMember(a VMPoolMember, b VMPoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *VMPoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Vm.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CRMOverride_name[int32(m.CrmOverride)]; !ok {
		return errors.New("invalid CrmOverride")
	}
	return nil
}

func (s *VMPoolMember) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	s.Vm.ClearTagged(tags)
}

func IgnoreVMPoolMemberFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Vm.UpdatedAt")
	}
	return cmpopts.IgnoreFields(VMPoolMember{}, names...)
}

func (m *VMSpec) CopyInFields(src *VMSpec) int {
	changed := 0
	if m.InternalName != src.InternalName {
		m.InternalName = src.InternalName
		changed++
	}
	if m.ExternalNetwork != src.ExternalNetwork {
		m.ExternalNetwork = src.ExternalNetwork
		changed++
	}
	if m.InternalNetwork != src.InternalNetwork {
		m.InternalNetwork = src.InternalNetwork
		changed++
	}
	if m.Flavor.Key.Name != src.Flavor.Key.Name {
		m.Flavor.Key.Name = src.Flavor.Key.Name
		changed++
	}
	if m.Flavor.Ram != src.Flavor.Ram {
		m.Flavor.Ram = src.Flavor.Ram
		changed++
	}
	if m.Flavor.Vcpus != src.Flavor.Vcpus {
		m.Flavor.Vcpus = src.Flavor.Vcpus
		changed++
	}
	if m.Flavor.Disk != src.Flavor.Disk {
		m.Flavor.Disk = src.Flavor.Disk
		changed++
	}
	if src.Flavor.OptResMap != nil {
		m.Flavor.OptResMap = make(map[string]string)
		for k1, _ := range src.Flavor.OptResMap {
			m.Flavor.OptResMap[k1] = src.Flavor.OptResMap[k1]
			changed++
		}
	} else if m.Flavor.OptResMap != nil {
		m.Flavor.OptResMap = nil
		changed++
	}
	if m.Flavor.DeletePrepare != src.Flavor.DeletePrepare {
		m.Flavor.DeletePrepare = src.Flavor.DeletePrepare
		changed++
	}
	return changed
}

func (m *VMSpec) DeepCopyIn(src *VMSpec) {
	m.InternalName = src.InternalName
	m.ExternalNetwork = src.ExternalNetwork
	m.InternalNetwork = src.InternalNetwork
	m.Flavor.DeepCopyIn(&src.Flavor)
}

// Helper method to check that enums have valid values
func (m *VMSpec) ValidateEnums() error {
	if err := m.Flavor.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *VMSpec) ClearTagged(tags map[string]struct{}) {
	s.Flavor.ClearTagged(tags)
}

func (m *VMPoolInfo) Matches(o *VMPoolInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.Vms != nil {
		if len(m.Vms) == 0 && len(o.Vms) > 0 || len(m.Vms) > 0 && len(o.Vms) == 0 {
			return false
		} else if m.Vms != nil && o.Vms != nil {
			if !opts.Filter && len(m.Vms) != len(o.Vms) {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.State != 0 {
			if o.State != m.State {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Errors != nil {
			if len(m.Errors) == 0 && len(o.Errors) > 0 || len(m.Errors) > 0 && len(o.Errors) == 0 {
				return false
			} else if m.Errors != nil && o.Errors != nil {
				if !opts.Filter && len(m.Errors) != len(o.Errors) {
					return false
				}
				found := 0
				for oIndex, _ := range o.Errors {
					for mIndex, _ := range m.Errors {
						if o.Errors[oIndex] == m.Errors[mIndex] {
							found++
							break
						}
					}
				}
				if found != len(o.Errors) {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	return true
}

const VMPoolInfoFieldKey = "2"
const VMPoolInfoFieldKeyOrganization = "2.1"
const VMPoolInfoFieldKeyName = "2.2"
const VMPoolInfoFieldNotifyId = "3"
const VMPoolInfoFieldVms = "4"
const VMPoolInfoFieldVmsName = "4.1"
const VMPoolInfoFieldVmsNetInfo = "4.2"
const VMPoolInfoFieldVmsNetInfoExternalIp = "4.2.1"
const VMPoolInfoFieldVmsNetInfoInternalIp = "4.2.2"
const VMPoolInfoFieldVmsGroupName = "4.3"
const VMPoolInfoFieldVmsState = "4.4"
const VMPoolInfoFieldVmsUpdatedAt = "4.5"
const VMPoolInfoFieldVmsUpdatedAtSeconds = "4.5.1"
const VMPoolInfoFieldVmsUpdatedAtNanos = "4.5.2"
const VMPoolInfoFieldVmsInternalName = "4.6"
const VMPoolInfoFieldVmsFlavor = "4.7"
const VMPoolInfoFieldVmsFlavorName = "4.7.1"
const VMPoolInfoFieldVmsFlavorVcpus = "4.7.2"
const VMPoolInfoFieldVmsFlavorRam = "4.7.3"
const VMPoolInfoFieldVmsFlavorDisk = "4.7.4"
const VMPoolInfoFieldVmsFlavorPropMap = "4.7.5"
const VMPoolInfoFieldVmsFlavorPropMapKey = "4.7.5.1"
const VMPoolInfoFieldVmsFlavorPropMapValue = "4.7.5.2"
const VMPoolInfoFieldState = "5"
const VMPoolInfoFieldErrors = "6"
const VMPoolInfoFieldStatus = "7"
const VMPoolInfoFieldStatusTaskNumber = "7.1"
const VMPoolInfoFieldStatusMaxTasks = "7.2"
const VMPoolInfoFieldStatusTaskName = "7.3"
const VMPoolInfoFieldStatusStepName = "7.4"
const VMPoolInfoFieldStatusMsgCount = "7.5"
const VMPoolInfoFieldStatusMsgs = "7.6"

var VMPoolInfoAllFields = []string{
	VMPoolInfoFieldKeyOrganization,
	VMPoolInfoFieldKeyName,
	VMPoolInfoFieldNotifyId,
	VMPoolInfoFieldVmsName,
	VMPoolInfoFieldVmsNetInfoExternalIp,
	VMPoolInfoFieldVmsNetInfoInternalIp,
	VMPoolInfoFieldVmsGroupName,
	VMPoolInfoFieldVmsState,
	VMPoolInfoFieldVmsUpdatedAtSeconds,
	VMPoolInfoFieldVmsUpdatedAtNanos,
	VMPoolInfoFieldVmsInternalName,
	VMPoolInfoFieldVmsFlavorName,
	VMPoolInfoFieldVmsFlavorVcpus,
	VMPoolInfoFieldVmsFlavorRam,
	VMPoolInfoFieldVmsFlavorDisk,
	VMPoolInfoFieldVmsFlavorPropMapKey,
	VMPoolInfoFieldVmsFlavorPropMapValue,
	VMPoolInfoFieldState,
	VMPoolInfoFieldErrors,
	VMPoolInfoFieldStatusTaskNumber,
	VMPoolInfoFieldStatusMaxTasks,
	VMPoolInfoFieldStatusTaskName,
	VMPoolInfoFieldStatusStepName,
	VMPoolInfoFieldStatusMsgCount,
	VMPoolInfoFieldStatusMsgs,
}

var VMPoolInfoAllFieldsMap = map[string]struct{}{
	VMPoolInfoFieldKeyOrganization:       struct{}{},
	VMPoolInfoFieldKeyName:               struct{}{},
	VMPoolInfoFieldNotifyId:              struct{}{},
	VMPoolInfoFieldVmsName:               struct{}{},
	VMPoolInfoFieldVmsNetInfoExternalIp:  struct{}{},
	VMPoolInfoFieldVmsNetInfoInternalIp:  struct{}{},
	VMPoolInfoFieldVmsGroupName:          struct{}{},
	VMPoolInfoFieldVmsState:              struct{}{},
	VMPoolInfoFieldVmsUpdatedAtSeconds:   struct{}{},
	VMPoolInfoFieldVmsUpdatedAtNanos:     struct{}{},
	VMPoolInfoFieldVmsInternalName:       struct{}{},
	VMPoolInfoFieldVmsFlavorName:         struct{}{},
	VMPoolInfoFieldVmsFlavorVcpus:        struct{}{},
	VMPoolInfoFieldVmsFlavorRam:          struct{}{},
	VMPoolInfoFieldVmsFlavorDisk:         struct{}{},
	VMPoolInfoFieldVmsFlavorPropMapKey:   struct{}{},
	VMPoolInfoFieldVmsFlavorPropMapValue: struct{}{},
	VMPoolInfoFieldState:                 struct{}{},
	VMPoolInfoFieldErrors:                struct{}{},
	VMPoolInfoFieldStatusTaskNumber:      struct{}{},
	VMPoolInfoFieldStatusMaxTasks:        struct{}{},
	VMPoolInfoFieldStatusTaskName:        struct{}{},
	VMPoolInfoFieldStatusStepName:        struct{}{},
	VMPoolInfoFieldStatusMsgCount:        struct{}{},
	VMPoolInfoFieldStatusMsgs:            struct{}{},
}

var VMPoolInfoAllFieldsStringMap = map[string]string{
	VMPoolInfoFieldKeyOrganization:       "Key Organization",
	VMPoolInfoFieldKeyName:               "Key Name",
	VMPoolInfoFieldNotifyId:              "Notify Id",
	VMPoolInfoFieldVmsName:               "Vms Name",
	VMPoolInfoFieldVmsNetInfoExternalIp:  "Vms Net Info External Ip",
	VMPoolInfoFieldVmsNetInfoInternalIp:  "Vms Net Info Internal Ip",
	VMPoolInfoFieldVmsGroupName:          "Vms Group Name",
	VMPoolInfoFieldVmsState:              "Vms State",
	VMPoolInfoFieldVmsUpdatedAtSeconds:   "Vms Updated At Seconds",
	VMPoolInfoFieldVmsUpdatedAtNanos:     "Vms Updated At Nanos",
	VMPoolInfoFieldVmsInternalName:       "Vms Internal Name",
	VMPoolInfoFieldVmsFlavorName:         "Vms Flavor Name",
	VMPoolInfoFieldVmsFlavorVcpus:        "Vms Flavor Vcpus",
	VMPoolInfoFieldVmsFlavorRam:          "Vms Flavor Ram",
	VMPoolInfoFieldVmsFlavorDisk:         "Vms Flavor Disk",
	VMPoolInfoFieldVmsFlavorPropMapKey:   "Vms Flavor Prop Map Key",
	VMPoolInfoFieldVmsFlavorPropMapValue: "Vms Flavor Prop Map Value",
	VMPoolInfoFieldState:                 "State",
	VMPoolInfoFieldErrors:                "Errors",
	VMPoolInfoFieldStatusTaskNumber:      "Status Task Number",
	VMPoolInfoFieldStatusMaxTasks:        "Status Max Tasks",
	VMPoolInfoFieldStatusTaskName:        "Status Task Name",
	VMPoolInfoFieldStatusStepName:        "Status Step Name",
	VMPoolInfoFieldStatusMsgCount:        "Status Msg Count",
	VMPoolInfoFieldStatusMsgs:            "Status Msgs",
}

func (m *VMPoolInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, VMPoolInfoFieldKey+".") || s == VMPoolInfoFieldKey
}

func (m *VMPoolInfo) DiffFields(o *VMPoolInfo, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[VMPoolInfoFieldKeyOrganization] = struct{}{}
		fields[VMPoolInfoFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[VMPoolInfoFieldKeyName] = struct{}{}
		fields[VMPoolInfoFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[VMPoolInfoFieldNotifyId] = struct{}{}
	}
	if len(m.Vms) != len(o.Vms) {
		fields[VMPoolInfoFieldVms] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Vms); i0++ {
			if m.Vms[i0].Name != o.Vms[i0].Name {
				fields[VMPoolInfoFieldVmsName] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].NetInfo.ExternalIp != o.Vms[i0].NetInfo.ExternalIp {
				fields[VMPoolInfoFieldVmsNetInfoExternalIp] = struct{}{}
				fields[VMPoolInfoFieldVmsNetInfo] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].NetInfo.InternalIp != o.Vms[i0].NetInfo.InternalIp {
				fields[VMPoolInfoFieldVmsNetInfoInternalIp] = struct{}{}
				fields[VMPoolInfoFieldVmsNetInfo] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].GroupName != o.Vms[i0].GroupName {
				fields[VMPoolInfoFieldVmsGroupName] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].State != o.Vms[i0].State {
				fields[VMPoolInfoFieldVmsState] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].UpdatedAt.Seconds != o.Vms[i0].UpdatedAt.Seconds {
				fields[VMPoolInfoFieldVmsUpdatedAtSeconds] = struct{}{}
				fields[VMPoolInfoFieldVmsUpdatedAt] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].UpdatedAt.Nanos != o.Vms[i0].UpdatedAt.Nanos {
				fields[VMPoolInfoFieldVmsUpdatedAtNanos] = struct{}{}
				fields[VMPoolInfoFieldVmsUpdatedAt] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].InternalName != o.Vms[i0].InternalName {
				fields[VMPoolInfoFieldVmsInternalName] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
			if m.Vms[i0].Flavor != nil && o.Vms[i0].Flavor != nil {
				if m.Vms[i0].Flavor.Name != o.Vms[i0].Flavor.Name {
					fields[VMPoolInfoFieldVmsFlavorName] = struct{}{}
					fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
					fields[VMPoolInfoFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Vcpus != o.Vms[i0].Flavor.Vcpus {
					fields[VMPoolInfoFieldVmsFlavorVcpus] = struct{}{}
					fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
					fields[VMPoolInfoFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Ram != o.Vms[i0].Flavor.Ram {
					fields[VMPoolInfoFieldVmsFlavorRam] = struct{}{}
					fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
					fields[VMPoolInfoFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.Disk != o.Vms[i0].Flavor.Disk {
					fields[VMPoolInfoFieldVmsFlavorDisk] = struct{}{}
					fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
					fields[VMPoolInfoFieldVms] = struct{}{}
				}
				if m.Vms[i0].Flavor.PropMap != nil && o.Vms[i0].Flavor.PropMap != nil {
					if len(m.Vms[i0].Flavor.PropMap) != len(o.Vms[i0].Flavor.PropMap) {
						fields[VMPoolInfoFieldVmsFlavorPropMap] = struct{}{}
						fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
						fields[VMPoolInfoFieldVms] = struct{}{}
					} else {
						for k2, _ := range m.Vms[i0].Flavor.PropMap {
							_, vok2 := o.Vms[i0].Flavor.PropMap[k2]
							if !vok2 {
								fields[VMPoolInfoFieldVmsFlavorPropMap] = struct{}{}
								fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
								fields[VMPoolInfoFieldVms] = struct{}{}
							} else {
								if m.Vms[i0].Flavor.PropMap[k2] != o.Vms[i0].Flavor.PropMap[k2] {
									fields[VMPoolInfoFieldVmsFlavorPropMap] = struct{}{}
									fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
									fields[VMPoolInfoFieldVms] = struct{}{}
									break
								}
							}
						}
					}
				} else if (m.Vms[i0].Flavor.PropMap != nil && o.Vms[i0].Flavor.PropMap == nil) || (m.Vms[i0].Flavor.PropMap == nil && o.Vms[i0].Flavor.PropMap != nil) {
					fields[VMPoolInfoFieldVmsFlavorPropMap] = struct{}{}
					fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
					fields[VMPoolInfoFieldVms] = struct{}{}
				}
			} else if (m.Vms[i0].Flavor != nil && o.Vms[i0].Flavor == nil) || (m.Vms[i0].Flavor == nil && o.Vms[i0].Flavor != nil) {
				fields[VMPoolInfoFieldVmsFlavor] = struct{}{}
				fields[VMPoolInfoFieldVms] = struct{}{}
			}
		}
	}
	if m.State != o.State {
		fields[VMPoolInfoFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[VMPoolInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[VMPoolInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[VMPoolInfoFieldStatusTaskNumber] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[VMPoolInfoFieldStatusMaxTasks] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[VMPoolInfoFieldStatusTaskName] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[VMPoolInfoFieldStatusStepName] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	}
	if m.Status.MsgCount != o.Status.MsgCount {
		fields[VMPoolInfoFieldStatusMsgCount] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	}
	if len(m.Status.Msgs) != len(o.Status.Msgs) {
		fields[VMPoolInfoFieldStatusMsgs] = struct{}{}
		fields[VMPoolInfoFieldStatus] = struct{}{}
	} else {
		for i1 := 0; i1 < len(m.Status.Msgs); i1++ {
			if m.Status.Msgs[i1] != o.Status.Msgs[i1] {
				fields[VMPoolInfoFieldStatusMsgs] = struct{}{}
				fields[VMPoolInfoFieldStatus] = struct{}{}
				break
			}
		}
	}
}

func (m *VMPoolInfo) CopyInFields(src *VMPoolInfo) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if src.Vms != nil {
			m.Vms = src.Vms
			changed++
		} else if m.Vms != nil {
			m.Vms = nil
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.State != src.State {
			m.State = src.State
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if src.Errors != nil {
			m.Errors = src.Errors
			changed++
		} else if m.Errors != nil {
			m.Errors = nil
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if _, set := fmap["7.1"]; set {
			if m.Status.TaskNumber != src.Status.TaskNumber {
				m.Status.TaskNumber = src.Status.TaskNumber
				changed++
			}
		}
		if _, set := fmap["7.2"]; set {
			if m.Status.MaxTasks != src.Status.MaxTasks {
				m.Status.MaxTasks = src.Status.MaxTasks
				changed++
			}
		}
		if _, set := fmap["7.3"]; set {
			if m.Status.TaskName != src.Status.TaskName {
				m.Status.TaskName = src.Status.TaskName
				changed++
			}
		}
		if _, set := fmap["7.4"]; set {
			if m.Status.StepName != src.Status.StepName {
				m.Status.StepName = src.Status.StepName
				changed++
			}
		}
		if _, set := fmap["7.5"]; set {
			if m.Status.MsgCount != src.Status.MsgCount {
				m.Status.MsgCount = src.Status.MsgCount
				changed++
			}
		}
		if _, set := fmap["7.6"]; set {
			if src.Status.Msgs != nil {
				m.Status.Msgs = src.Status.Msgs
				changed++
			} else if m.Status.Msgs != nil {
				m.Status.Msgs = nil
				changed++
			}
		}
	}
	return changed
}

func (m *VMPoolInfo) DeepCopyIn(src *VMPoolInfo) {
	m.Key.DeepCopyIn(&src.Key)
	m.NotifyId = src.NotifyId
	if src.Vms != nil {
		m.Vms = make([]VM, len(src.Vms), len(src.Vms))
		for ii, s := range src.Vms {
			m.Vms[ii].DeepCopyIn(&s)
		}
	} else {
		m.Vms = nil
	}
	m.State = src.State
	if src.Errors != nil {
		m.Errors = make([]string, len(src.Errors), len(src.Errors))
		for ii, s := range src.Errors {
			m.Errors[ii] = s
		}
	} else {
		m.Errors = nil
	}
	m.Status.DeepCopyIn(&src.Status)
}

func (s *VMPoolInfo) HasFields() bool {
	return true
}

type VMPoolInfoStore interface {
	Create(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *VMPoolInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*VMPoolInfo, int64, error)
	Get(ctx context.Context, key *VMPoolKey, buf *VMPoolInfo) bool
	STMGet(stm concurrency.STM, key *VMPoolKey, buf *VMPoolInfo) bool
	STMPut(stm concurrency.STM, obj *VMPoolInfo, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *VMPoolKey)
}

type VMPoolInfoStoreImpl struct {
	kvstore objstore.KVStore
}

func NewVMPoolInfoStore(kvstore objstore.KVStore) *VMPoolInfoStoreImpl {
	return &VMPoolInfoStoreImpl{kvstore: kvstore}
}

func (s *VMPoolInfoStoreImpl) Create(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(VMPoolInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStoreImpl) Update(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur VMPoolInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStoreImpl) Put(ctx context.Context, m *VMPoolInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(VMPoolInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStoreImpl) Delete(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStoreImpl) LoadOne(key string) (*VMPoolInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj VMPoolInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse VMPoolInfo data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *VMPoolInfoStoreImpl) Get(ctx context.Context, key *VMPoolKey, buf *VMPoolInfo) bool {
	keystr := objstore.DbKeyString("VMPoolInfo", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *VMPoolInfoStoreImpl) STMGet(stm concurrency.STM, key *VMPoolKey, buf *VMPoolInfo) bool {
	keystr := objstore.DbKeyString("VMPoolInfo", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *VMPoolInfoStoreImpl) parseGetData(val []byte, buf *VMPoolInfo) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = VMPoolInfo{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *VMPoolInfoStoreImpl) STMPut(stm concurrency.STM, obj *VMPoolInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("VMPoolInfo", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("VMPoolInfo json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *VMPoolInfoStoreImpl) STMDel(stm concurrency.STM, key *VMPoolKey) {
	keystr := objstore.DbKeyString("VMPoolInfo", key)
	stm.Del(keystr)
}

type VMPoolInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

type VMPoolInfoCacheData struct {
	Obj    *VMPoolInfo
	ModRev int64
}

// VMPoolInfoCache caches VMPoolInfo objects in memory in a hash table
// and keeps them in sync with the database.
type VMPoolInfoCache struct {
	Objs          map[VMPoolKey]*VMPoolInfoCacheData
	Mux           util.Mutex
	List          map[VMPoolKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *VMPoolKey, old *VMPoolInfo, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)
	DeletedCbs    []func(ctx context.Context, old *VMPoolInfo)
	KeyWatchers   map[VMPoolKey][]*VMPoolInfoKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *VMPoolKey)
	DeletedKeyCbs []func(ctx context.Context, key *VMPoolKey)
}

func NewVMPoolInfoCache() *VMPoolInfoCache {
	cache := VMPoolInfoCache{}
	InitVMPoolInfoCache(&cache)
	return &cache
}

func InitVMPoolInfoCache(cache *VMPoolInfoCache) {
	cache.Objs = make(map[VMPoolKey]*VMPoolInfoCacheData)
	cache.KeyWatchers = make(map[VMPoolKey][]*VMPoolInfoKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *VMPoolInfoCache) GetTypeString() string {
	return "VMPoolInfo"
}

func (c *VMPoolInfoCache) Get(key *VMPoolKey, valbuf *VMPoolInfo) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *VMPoolInfoCache) GetWithRev(key *VMPoolKey, valbuf *VMPoolInfo, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *VMPoolInfoCache) HasKey(key *VMPoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *VMPoolInfoCache) GetAllKeys(ctx context.Context, cb func(key *VMPoolKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *VMPoolInfoCache) Update(ctx context.Context, in *VMPoolInfo, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *VMPoolInfo) (*VMPoolInfo, bool) {
		return in, true
	})
}

func (c *VMPoolInfoCache) UpdateModFunc(ctx context.Context, key *VMPoolKey, modRev int64, modFunc func(old *VMPoolInfo) (new *VMPoolInfo, changed bool)) {
	c.Mux.Lock()
	var old *VMPoolInfo
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &VMPoolInfo{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &VMPoolInfo{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &VMPoolInfoCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *VMPoolInfoCache) Delete(ctx context.Context, in *VMPoolInfo, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *VMPoolInfo) bool {
		return true
	})
}

func (c *VMPoolInfoCache) DeleteCondFunc(ctx context.Context, in *VMPoolInfo, modRev int64, condFunc func(old *VMPoolInfo) bool) {
	c.Mux.Lock()
	var old *VMPoolInfo
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *VMPoolInfoCache) Prune(ctx context.Context, validKeys map[VMPoolKey]struct{}) {
	notify := make(map[VMPoolKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *VMPoolInfoCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush VMPoolInfo", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[VMPoolKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush VMPoolInfo delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			for _, cb := range c.NotifyCbs {
				if cb != nil {
					cb(ctx, &key, old.Obj, old.ModRev)
				}
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *VMPoolInfoCache) Show(filter *VMPoolInfo, cb func(ret *VMPoolInfo) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func VMPoolInfoGenericNotifyCb(fn func(key *VMPoolKey, old *VMPoolInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*VMPoolKey), obj.(*VMPoolInfo))
	}
}

func (c *VMPoolInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *VMPoolKey, old *VMPoolInfo, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *VMPoolKey, old *VMPoolInfo, modRev int64){fn}
}

func (c *VMPoolInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)) {
	c.UpdatedCbs = []func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo){fn}
}

func (c *VMPoolInfoCache) SetDeletedCb(fn func(ctx context.Context, old *VMPoolInfo)) {
	c.DeletedCbs = []func(ctx context.Context, old *VMPoolInfo){fn}
}

func (c *VMPoolInfoCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *VMPoolKey){fn}
}

func (c *VMPoolInfoCache) SetDeletedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *VMPoolKey){fn}
}

func (c *VMPoolInfoCache) AddUpdatedCb(fn func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *VMPoolInfoCache) AddDeletedCb(fn func(ctx context.Context, old *VMPoolInfo)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *VMPoolInfoCache) AddNotifyCb(fn func(ctx context.Context, obj *VMPoolKey, old *VMPoolInfo, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *VMPoolInfoCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *VMPoolInfoCache) AddDeletedKeyCb(fn func(ctx context.Context, key *VMPoolKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *VMPoolInfoCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *VMPoolInfoCache) WatchKey(key *VMPoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*VMPoolInfoKeyWatcher, 0)
	}
	watcher := VMPoolInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching VMPoolInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *VMPoolInfoCache) TriggerKeyWatchers(ctx context.Context, key *VMPoolKey) {
	watchers := make([]*VMPoolInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *VMPoolInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := VMPoolInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse VMPoolInfo data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *VMPoolInfoCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := VMPoolInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	VMPoolKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *VMPoolInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[VMPoolKey]struct{})
}

func (c *VMPoolInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[VMPoolKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolInfoCache) UsesOrg(org string) bool {
	return false
}

func (m *VMPoolInfo) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPoolInfo) GetKey() *VMPoolKey {
	return &m.Key
}

func (m *VMPoolInfo) GetKeyVal() VMPoolKey {
	return m.Key
}

func (m *VMPoolInfo) SetKey(key *VMPoolKey) {
	m.Key = *key
}

func CmpSortVMPoolInfo(a VMPoolInfo, b VMPoolInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *VMPoolInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Vms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *VMPoolInfo) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if _, found := tags["nocmp"]; found {
		s.NotifyId = 0
	}
	if s.Vms != nil {
		for ii := 0; ii < len(s.Vms); ii++ {
			s.Vms[ii].ClearTagged(tags)
		}
	}
	if _, found := tags["nocmp"]; found {
		s.Errors = nil
	}
	s.Status.ClearTagged(tags)
}

func IgnoreVMPoolInfoFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "Vms.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Errors")
	}
	return cmpopts.IgnoreFields(VMPoolInfo{}, names...)
}

var VMStateStrings = []string{
	"VM_FREE",
	"VM_IN_PROGRESS",
	"VM_IN_USE",
	"VM_ADD",
	"VM_REMOVE",
	"VM_UPDATE",
	"VM_FORCE_FREE",
}

const (
	VMStateVM_FREE        uint64 = 1 << 0
	VMStateVM_IN_PROGRESS uint64 = 1 << 1
	VMStateVM_IN_USE      uint64 = 1 << 2
	VMStateVM_ADD         uint64 = 1 << 3
	VMStateVM_REMOVE      uint64 = 1 << 4
	VMStateVM_UPDATE      uint64 = 1 << 5
	VMStateVM_FORCE_FREE  uint64 = 1 << 6
)

var VMState_CamelName = map[int32]string{
	// VM_FREE -> VmFree
	0: "VmFree",
	// VM_IN_PROGRESS -> VmInProgress
	1: "VmInProgress",
	// VM_IN_USE -> VmInUse
	2: "VmInUse",
	// VM_ADD -> VmAdd
	3: "VmAdd",
	// VM_REMOVE -> VmRemove
	4: "VmRemove",
	// VM_UPDATE -> VmUpdate
	5: "VmUpdate",
	// VM_FORCE_FREE -> VmForceFree
	6: "VmForceFree",
}
var VMState_CamelValue = map[string]int32{
	"VmFree":       0,
	"VmInProgress": 1,
	"VmInUse":      2,
	"VmAdd":        3,
	"VmRemove":     4,
	"VmUpdate":     5,
	"VmForceFree":  6,
}

func ParseVMState(data interface{}) (VMState, error) {
	if val, ok := data.(VMState); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := VMState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = VMState_CamelValue["Vm"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = VMState_CamelName[val]
			}
		}
		if !ok {
			return VMState(0), fmt.Errorf("Invalid VMState value %q", str)
		}
		return VMState(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := VMState_CamelName[ival]; ok {
			return VMState(ival), nil
		} else {
			return VMState(0), fmt.Errorf("Invalid VMState value %d", ival)
		}
	}
	return VMState(0), fmt.Errorf("Invalid VMState value %v", data)
}

func (e *VMState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseVMState(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e VMState) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(VMState_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Vm")
	return str, nil
}

// custom JSON encoding/decoding
func (e *VMState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseVMState(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(VMState(0)),
			}
		}
		*e = VMState(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseVMState(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(VMState(0)),
	}
}

func (e VMState) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(VMState_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Vm")
	return json.Marshal(str)
}

var VMStateCommonPrefix = "Vm"

var VMActionStrings = []string{
	"VM_ACTION_DONE",
	"VM_ACTION_ALLOCATE",
	"VM_ACTION_RELEASE",
}

const (
	VMActionVM_ACTION_DONE     uint64 = 1 << 0
	VMActionVM_ACTION_ALLOCATE uint64 = 1 << 1
	VMActionVM_ACTION_RELEASE  uint64 = 1 << 2
)

var VMAction_CamelName = map[int32]string{
	// VM_ACTION_DONE -> VmActionDone
	0: "VmActionDone",
	// VM_ACTION_ALLOCATE -> VmActionAllocate
	1: "VmActionAllocate",
	// VM_ACTION_RELEASE -> VmActionRelease
	2: "VmActionRelease",
}
var VMAction_CamelValue = map[string]int32{
	"VmActionDone":     0,
	"VmActionAllocate": 1,
	"VmActionRelease":  2,
}

func ParseVMAction(data interface{}) (VMAction, error) {
	if val, ok := data.(VMAction); ok {
		return val, nil
	} else if str, ok := data.(string); ok {
		val, ok := VMAction_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = VMAction_CamelValue["VmAction"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = VMAction_CamelName[val]
			}
		}
		if !ok {
			return VMAction(0), fmt.Errorf("Invalid VMAction value %q", str)
		}
		return VMAction(val), nil
	} else if ival, ok := data.(int32); ok {
		if _, ok := VMAction_CamelName[ival]; ok {
			return VMAction(ival), nil
		} else {
			return VMAction(0), fmt.Errorf("Invalid VMAction value %d", ival)
		}
	}
	return VMAction(0), fmt.Errorf("Invalid VMAction value %v", data)
}

func (e *VMAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, err := ParseVMAction(str)
	if err != nil {
		return err
	}
	*e = val
	return nil
}

func (e VMAction) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(VMAction_CamelName, int32(e))
	str = strings.TrimPrefix(str, "VmAction")
	return str, nil
}

// custom JSON encoding/decoding
func (e *VMAction) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, err := ParseVMAction(str)
		if err != nil {
			return &json.UnmarshalTypeError{
				Value: "string " + str,
				Type:  reflect.TypeOf(VMAction(0)),
			}
		}
		*e = VMAction(val)
		return nil
	}
	var ival int32
	err = json.Unmarshal(b, &ival)
	if err == nil {
		val, err := ParseVMAction(ival)
		if err == nil {
			*e = val
			return nil
		}
	}
	return &json.UnmarshalTypeError{
		Value: "value " + string(b),
		Type:  reflect.TypeOf(VMAction(0)),
	}
}

func (e VMAction) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(VMAction_CamelName, int32(e))
	str = strings.TrimPrefix(str, "VmAction")
	return json.Marshal(str)
}

var VMActionCommonPrefix = "VmAction"

func (m *VMPool) IsValidArgsForCreateVMPool() error {
	if m.Vms != nil {
	}
	if m.State != 0 {
		return fmt.Errorf("Invalid field specified: State, this field is only for internal use")
	}
	if m.Errors != nil {
		return fmt.Errorf("Invalid field specified: Errors, this field is only for internal use")
	}
	if m.Status.TaskNumber != 0 {
		return fmt.Errorf("Invalid field specified: Status.TaskNumber, this field is only for internal use")
	}
	if m.Status.MaxTasks != 0 {
		return fmt.Errorf("Invalid field specified: Status.MaxTasks, this field is only for internal use")
	}
	if m.Status.TaskName != "" {
		return fmt.Errorf("Invalid field specified: Status.TaskName, this field is only for internal use")
	}
	if m.Status.StepName != "" {
		return fmt.Errorf("Invalid field specified: Status.StepName, this field is only for internal use")
	}
	if m.Status.MsgCount != 0 {
		return fmt.Errorf("Invalid field specified: Status.MsgCount, this field is only for internal use")
	}
	if m.Status.Msgs != nil {
		return fmt.Errorf("Invalid field specified: Status.Msgs, this field is only for internal use")
	}
	return nil
}

func (m *VMPool) IsValidArgsForDeleteVMPool() error {
	if m.Vms != nil {
	}
	if m.State != 0 {
		return fmt.Errorf("Invalid field specified: State, this field is only for internal use")
	}
	if m.Errors != nil {
		return fmt.Errorf("Invalid field specified: Errors, this field is only for internal use")
	}
	if m.Status.TaskNumber != 0 {
		return fmt.Errorf("Invalid field specified: Status.TaskNumber, this field is only for internal use")
	}
	if m.Status.MaxTasks != 0 {
		return fmt.Errorf("Invalid field specified: Status.MaxTasks, this field is only for internal use")
	}
	if m.Status.TaskName != "" {
		return fmt.Errorf("Invalid field specified: Status.TaskName, this field is only for internal use")
	}
	if m.Status.StepName != "" {
		return fmt.Errorf("Invalid field specified: Status.StepName, this field is only for internal use")
	}
	if m.Status.MsgCount != 0 {
		return fmt.Errorf("Invalid field specified: Status.MsgCount, this field is only for internal use")
	}
	if m.Status.Msgs != nil {
		return fmt.Errorf("Invalid field specified: Status.Msgs, this field is only for internal use")
	}
	return nil
}

func (m *VMPool) IsValidArgsForUpdateVMPool() error {
	if m.Vms != nil {
	}
	if m.State != 0 {
		return fmt.Errorf("Invalid field specified: State, this field is only for internal use")
	}
	if m.Errors != nil {
		return fmt.Errorf("Invalid field specified: Errors, this field is only for internal use")
	}
	if m.Status.TaskNumber != 0 {
		return fmt.Errorf("Invalid field specified: Status.TaskNumber, this field is only for internal use")
	}
	if m.Status.MaxTasks != 0 {
		return fmt.Errorf("Invalid field specified: Status.MaxTasks, this field is only for internal use")
	}
	if m.Status.TaskName != "" {
		return fmt.Errorf("Invalid field specified: Status.TaskName, this field is only for internal use")
	}
	if m.Status.StepName != "" {
		return fmt.Errorf("Invalid field specified: Status.StepName, this field is only for internal use")
	}
	if m.Status.MsgCount != 0 {
		return fmt.Errorf("Invalid field specified: Status.MsgCount, this field is only for internal use")
	}
	if m.Status.Msgs != nil {
		return fmt.Errorf("Invalid field specified: Status.Msgs, this field is only for internal use")
	}
	return nil
}

func (m *VMPoolMember) IsValidArgsForAddVMPoolMember() error {
	return nil
}

func (m *VMPoolMember) IsValidArgsForRemoveVMPoolMember() error {
	if m.Vm.NetInfo.ExternalIp != "" {
		return fmt.Errorf("Invalid field specified: Vm.NetInfo.ExternalIp, this field is only for internal use")
	}
	if m.Vm.NetInfo.InternalIp != "" {
		return fmt.Errorf("Invalid field specified: Vm.NetInfo.InternalIp, this field is only for internal use")
	}
	if m.Vm.Flavor != nil {
		return fmt.Errorf("Invalid field specified: Vm.Flavor, this field is only for internal use")
	}
	return nil
}

func (m *VMNetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *VM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	l = m.NetInfo.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovVmpool(uint64(m.State))
	}
	l = m.UpdatedAt.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *VMPoolKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *VMPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovVmpool(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if m.CrmOverride != 0 {
		n += 1 + sovVmpool(uint64(m.CrmOverride))
	}
	if m.DeletePrepare {
		n += 2
	}
	return n
}

func (m *VMPoolMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = m.Vm.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if m.CrmOverride != 0 {
		n += 1 + sovVmpool(uint64(m.CrmOverride))
	}
	return n
}

func (m *VMSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if m.ExternalNetwork {
		n += 2
	}
	if m.InternalNetwork {
		n += 2
	}
	l = m.Flavor.Size()
	n += 1 + l + sovVmpool(uint64(l))
	return n
}

func (m *VMPoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovVmpool(uint64(m.NotifyId))
	}
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovVmpool(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovVmpool(uint64(l))
	return n
}

func sovVmpool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVmpool(x uint64) (n int) {
	return sovVmpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VMNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VMState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flavor == nil {
				m.Flavor = &FlavorInfo{}
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPoolKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPoolKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPoolKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, VM{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TrackedState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmOverride", wireType)
			}
			m.CrmOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrmOverride |= CRMOverride(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmOverride", wireType)
			}
			m.CrmOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrmOverride |= CRMOverride(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalNetwork = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalNetwork = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, VM{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TrackedState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVmpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVmpool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVmpool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVmpool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVmpool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVmpool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVmpool = fmt.Errorf("proto: unexpected end of group")
)
