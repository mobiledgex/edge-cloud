// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmpool.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Cloudlet VM State
//
// CloudletVMState is the state of the CloudletVM
type CloudletVMState int32

const (
	// Cloudlet VM is free to use
	CloudletVMState_CLOUDLET_VM_FREE CloudletVMState = 0
	// Cloudlet VM is in use
	CloudletVMState_CLOUDLET_VM_IN_USE CloudletVMState = 1
	// Cloudlet VM is in error state
	CloudletVMState_CLOUDLET_VM_ERROR CloudletVMState = 2
)

var CloudletVMState_name = map[int32]string{
	0: "CLOUDLET_VM_FREE",
	1: "CLOUDLET_VM_IN_USE",
	2: "CLOUDLET_VM_ERROR",
}
var CloudletVMState_value = map[string]int32{
	"CLOUDLET_VM_FREE":   0,
	"CLOUDLET_VM_IN_USE": 1,
	"CLOUDLET_VM_ERROR":  2,
}

func (x CloudletVMState) String() string {
	return proto.EnumName(CloudletVMState_name, int32(x))
}
func (CloudletVMState) EnumDescriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{0} }

// Cloudlet VM Action
//
// CloudletVMAction is the action to be performed on Cloudlet VM Pool
type CloudletVMAction int32

const (
	// Done performing action
	CloudletVMAction_CLOUDLET_VM_ACTION_DONE CloudletVMAction = 0
	// Allocate Cloudlet VMs from Cloudlet VM Pool
	CloudletVMAction_CLOUDLET_VM_ACTION_ALLOCATE CloudletVMAction = 1
	// Release VMs from Cloudlet VM Pool
	CloudletVMAction_CLOUDLET_VM_ACTION_RELEASE CloudletVMAction = 2
)

var CloudletVMAction_name = map[int32]string{
	0: "CLOUDLET_VM_ACTION_DONE",
	1: "CLOUDLET_VM_ACTION_ALLOCATE",
	2: "CLOUDLET_VM_ACTION_RELEASE",
}
var CloudletVMAction_value = map[string]int32{
	"CLOUDLET_VM_ACTION_DONE":     0,
	"CLOUDLET_VM_ACTION_ALLOCATE": 1,
	"CLOUDLET_VM_ACTION_RELEASE":  2,
}

func (x CloudletVMAction) String() string {
	return proto.EnumName(CloudletVMAction_name, int32(x))
}
func (CloudletVMAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{1} }

type CloudletVMNetInfo struct {
	// External IP
	ExternalIp string `protobuf:"bytes,1,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	// Internal IP
	InternalIp string `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
}

func (m *CloudletVMNetInfo) Reset()                    { *m = CloudletVMNetInfo{} }
func (m *CloudletVMNetInfo) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMNetInfo) ProtoMessage()               {}
func (*CloudletVMNetInfo) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{0} }

type CloudletVM struct {
	// VM Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VM IP
	NetInfo CloudletVMNetInfo `protobuf:"bytes,2,opt,name=net_info,json=netInfo" json:"net_info"`
	// VM User
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// VM State
	State CloudletVMState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.CloudletVMState" json:"state,omitempty"`
	// Last updated time
	UpdatedAt google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	// VM Internal Name
	InternalName string `protobuf:"bytes,6,opt,name=internal_name,json=internalName,proto3" json:"internal_name,omitempty"`
}

func (m *CloudletVM) Reset()                    { *m = CloudletVM{} }
func (m *CloudletVM) String() string            { return proto.CompactTextString(m) }
func (*CloudletVM) ProtoMessage()               {}
func (*CloudletVM) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{1} }

// VMPool defines a pool of Cloudlet VMs to be part of a Cloudlet
type VMPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// list of Cloudlet VMs to be part of Cloudlet
	CloudletVms []CloudletVM `protobuf:"bytes,3,rep,name=cloudlet_vms,json=cloudletVms" json:"cloudlet_vms"`
	// Action performed on Cloudlet VM Pool
	Action CloudletVMAction `protobuf:"varint,4,opt,name=action,proto3,enum=edgeproto.CloudletVMAction" json:"action,omitempty"`
	// Errors if any
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VMPool) Reset()                    { *m = VMPool{} }
func (m *VMPool) String() string            { return proto.CompactTextString(m) }
func (*VMPool) ProtoMessage()               {}
func (*VMPool) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{2} }

// VMPoolMember is used to add and remove Cloudlet VM from Cloudlet VM Pool
type VMPoolMember struct {
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Cloudlet VM part of Cloudlet VM Pool
	CloudletVm CloudletVM `protobuf:"bytes,2,opt,name=cloudlet_vm,json=cloudletVm" json:"cloudlet_vm"`
}

func (m *VMPoolMember) Reset()                    { *m = VMPoolMember{} }
func (m *VMPoolMember) String() string            { return proto.CompactTextString(m) }
func (*VMPoolMember) ProtoMessage()               {}
func (*VMPoolMember) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{3} }

// CloudletVMSpec defines the specification of Cloudlet VM required by CRM
type CloudletVMSpec struct {
	// Cloudlet VM internal name
	InternalName string `protobuf:"bytes,1,opt,name=internal_name,json=internalName,proto3" json:"internal_name,omitempty"`
	// Cloudlet VM has external network defined or not
	ExternalNetwork bool `protobuf:"varint,2,opt,name=external_network,json=externalNetwork,proto3" json:"external_network,omitempty"`
	// Cloudlet VM has internal network defined or not
	InternalNetwork bool `protobuf:"varint,3,opt,name=internal_network,json=internalNetwork,proto3" json:"internal_network,omitempty"`
}

func (m *CloudletVMSpec) Reset()                    { *m = CloudletVMSpec{} }
func (m *CloudletVMSpec) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMSpec) ProtoMessage()               {}
func (*CloudletVMSpec) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{4} }

// VMPoolInfo is used to manage VMPool from CRM
type VMPoolInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Action performed on Cloudlet VM Pool
	Action CloudletVMAction `protobuf:"varint,3,opt,name=action,proto3,enum=edgeproto.CloudletVMAction" json:"action,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,4,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// VM User
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Specs of VMs requested by the caller
	VmSpecs []CloudletVMSpec `protobuf:"bytes,6,rep,name=vm_specs,json=vmSpecs" json:"vm_specs"`
	// list of Cloudlet VMs allocated
	CloudletVms []CloudletVM `protobuf:"bytes,7,rep,name=cloudlet_vms,json=cloudletVms" json:"cloudlet_vms"`
	// Errors if any
	Error string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *VMPoolInfo) Reset()                    { *m = VMPoolInfo{} }
func (m *VMPoolInfo) String() string            { return proto.CompactTextString(m) }
func (*VMPoolInfo) ProtoMessage()               {}
func (*VMPoolInfo) Descriptor() ([]byte, []int) { return fileDescriptorVmpool, []int{5} }

func init() {
	proto.RegisterType((*CloudletVMNetInfo)(nil), "edgeproto.CloudletVMNetInfo")
	proto.RegisterType((*CloudletVM)(nil), "edgeproto.CloudletVM")
	proto.RegisterType((*VMPool)(nil), "edgeproto.VMPool")
	proto.RegisterType((*VMPoolMember)(nil), "edgeproto.VMPoolMember")
	proto.RegisterType((*CloudletVMSpec)(nil), "edgeproto.CloudletVMSpec")
	proto.RegisterType((*VMPoolInfo)(nil), "edgeproto.VMPoolInfo")
	proto.RegisterEnum("edgeproto.CloudletVMState", CloudletVMState_name, CloudletVMState_value)
	proto.RegisterEnum("edgeproto.CloudletVMAction", CloudletVMAction_name, CloudletVMAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VMPoolApi service

type VMPoolApiClient interface {
	// Create VMPool. Creates Cloudlet VM pool which will have
	// Cloudlet VMs defined.
	CreateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Delete VMPool. Deletes Cloudlet VM pool given that none
	// of Cloudlet VMs part of this pool is used.
	DeleteVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Update VMPool. Updates a Cloudlet VM pool's VMs.
	UpdateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error)
	// Show VMPools. Lists all the Cloudlet VMs part of the Cloudlet VM pool.
	ShowVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (VMPoolApi_ShowVMPoolClient, error)
	// Add VMPoolMember. Adds a Cloudlet VM to existing Cloudlet VM Pool.
	AddVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove VMPoolMember. Removes a Cloudlet VM from existing Cloudlet VM Pool.
	RemoveVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error)
}

type vMPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewVMPoolApiClient(cc *grpc.ClientConn) VMPoolApiClient {
	return &vMPoolApiClient{cc}
}

func (c *vMPoolApiClient) CreateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.VMPoolApi/CreateVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) DeleteVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.VMPoolApi/DeleteVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) UpdateVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.VMPoolApi/UpdateVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) ShowVMPool(ctx context.Context, in *VMPool, opts ...grpc.CallOption) (VMPoolApi_ShowVMPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VMPoolApi_serviceDesc.Streams[0], c.cc, "/edgeproto.VMPoolApi/ShowVMPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMPoolApiShowVMPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMPoolApi_ShowVMPoolClient interface {
	Recv() (*VMPool, error)
	grpc.ClientStream
}

type vMPoolApiShowVMPoolClient struct {
	grpc.ClientStream
}

func (x *vMPoolApiShowVMPoolClient) Recv() (*VMPool, error) {
	m := new(VMPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMPoolApiClient) AddVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.VMPoolApi/AddVMPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMPoolApiClient) RemoveVMPoolMember(ctx context.Context, in *VMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.VMPoolApi/RemoveVMPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VMPoolApi service

type VMPoolApiServer interface {
	// Create VMPool. Creates Cloudlet VM pool which will have
	// Cloudlet VMs defined.
	CreateVMPool(context.Context, *VMPool) (*Result, error)
	// Delete VMPool. Deletes Cloudlet VM pool given that none
	// of Cloudlet VMs part of this pool is used.
	DeleteVMPool(context.Context, *VMPool) (*Result, error)
	// Update VMPool. Updates a Cloudlet VM pool's VMs.
	UpdateVMPool(context.Context, *VMPool) (*Result, error)
	// Show VMPools. Lists all the Cloudlet VMs part of the Cloudlet VM pool.
	ShowVMPool(*VMPool, VMPoolApi_ShowVMPoolServer) error
	// Add VMPoolMember. Adds a Cloudlet VM to existing Cloudlet VM Pool.
	AddVMPoolMember(context.Context, *VMPoolMember) (*Result, error)
	// Remove VMPoolMember. Removes a Cloudlet VM from existing Cloudlet VM Pool.
	RemoveVMPoolMember(context.Context, *VMPoolMember) (*Result, error)
}

func RegisterVMPoolApiServer(s *grpc.Server, srv VMPoolApiServer) {
	s.RegisterService(&_VMPoolApi_serviceDesc, srv)
}

func _VMPoolApi_CreateVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).CreateVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/CreateVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).CreateVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_DeleteVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).DeleteVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/DeleteVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).DeleteVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_UpdateVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).UpdateVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/UpdateVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).UpdateVMPool(ctx, req.(*VMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_ShowVMPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMPoolApiServer).ShowVMPool(m, &vMPoolApiShowVMPoolServer{stream})
}

type VMPoolApi_ShowVMPoolServer interface {
	Send(*VMPool) error
	grpc.ServerStream
}

type vMPoolApiShowVMPoolServer struct {
	grpc.ServerStream
}

func (x *vMPoolApiShowVMPoolServer) Send(m *VMPool) error {
	return x.ServerStream.SendMsg(m)
}

func _VMPoolApi_AddVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).AddVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/AddVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).AddVMPoolMember(ctx, req.(*VMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMPoolApi_RemoveVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMPoolApiServer).RemoveVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.VMPoolApi/RemoveVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMPoolApiServer).RemoveVMPoolMember(ctx, req.(*VMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.VMPoolApi",
	HandlerType: (*VMPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVMPool",
			Handler:    _VMPoolApi_CreateVMPool_Handler,
		},
		{
			MethodName: "DeleteVMPool",
			Handler:    _VMPoolApi_DeleteVMPool_Handler,
		},
		{
			MethodName: "UpdateVMPool",
			Handler:    _VMPoolApi_UpdateVMPool_Handler,
		},
		{
			MethodName: "AddVMPoolMember",
			Handler:    _VMPoolApi_AddVMPoolMember_Handler,
		},
		{
			MethodName: "RemoveVMPoolMember",
			Handler:    _VMPoolApi_RemoveVMPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowVMPool",
			Handler:       _VMPoolApi_ShowVMPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vmpool.proto",
}

// Client API for VMPoolInfoApi service

type VMPoolInfoApiClient interface {
	// Show VMPoolInfos
	ShowVMPoolInfo(ctx context.Context, in *VMPoolInfo, opts ...grpc.CallOption) (VMPoolInfoApi_ShowVMPoolInfoClient, error)
}

type vMPoolInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewVMPoolInfoApiClient(cc *grpc.ClientConn) VMPoolInfoApiClient {
	return &vMPoolInfoApiClient{cc}
}

func (c *vMPoolInfoApiClient) ShowVMPoolInfo(ctx context.Context, in *VMPoolInfo, opts ...grpc.CallOption) (VMPoolInfoApi_ShowVMPoolInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VMPoolInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.VMPoolInfoApi/ShowVMPoolInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMPoolInfoApiShowVMPoolInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMPoolInfoApi_ShowVMPoolInfoClient interface {
	Recv() (*VMPoolInfo, error)
	grpc.ClientStream
}

type vMPoolInfoApiShowVMPoolInfoClient struct {
	grpc.ClientStream
}

func (x *vMPoolInfoApiShowVMPoolInfoClient) Recv() (*VMPoolInfo, error) {
	m := new(VMPoolInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VMPoolInfoApi service

type VMPoolInfoApiServer interface {
	// Show VMPoolInfos
	ShowVMPoolInfo(*VMPoolInfo, VMPoolInfoApi_ShowVMPoolInfoServer) error
}

func RegisterVMPoolInfoApiServer(s *grpc.Server, srv VMPoolInfoApiServer) {
	s.RegisterService(&_VMPoolInfoApi_serviceDesc, srv)
}

func _VMPoolInfoApi_ShowVMPoolInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMPoolInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMPoolInfoApiServer).ShowVMPoolInfo(m, &vMPoolInfoApiShowVMPoolInfoServer{stream})
}

type VMPoolInfoApi_ShowVMPoolInfoServer interface {
	Send(*VMPoolInfo) error
	grpc.ServerStream
}

type vMPoolInfoApiShowVMPoolInfoServer struct {
	grpc.ServerStream
}

func (x *vMPoolInfoApiShowVMPoolInfoServer) Send(m *VMPoolInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _VMPoolInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.VMPoolInfoApi",
	HandlerType: (*VMPoolInfoApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowVMPoolInfo",
			Handler:       _VMPoolInfoApi_ShowVMPoolInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vmpool.proto",
}

func (m *CloudletVMNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMNetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalIp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.ExternalIp)))
		i += copy(dAtA[i:], m.ExternalIp)
	}
	if len(m.InternalIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalIp)))
		i += copy(dAtA[i:], m.InternalIp)
	}
	return i, nil
}

func (m *CloudletVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.NetInfo.Size()))
	n1, err := m.NetInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.User) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.UpdatedAt.Size()))
	n2, err := m.UpdatedAt.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.InternalName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalName)))
		i += copy(dAtA[i:], m.InternalName)
	}
	return i, nil
}

func (m *VMPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.Key.Size()))
	n3, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.CloudletVms) > 0 {
		for _, msg := range m.CloudletVms {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Action != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(m.Action))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *VMPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPoolMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.Key.Size()))
	n4, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.CloudletVm.Size()))
	n5, err := m.CloudletVm.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CloudletVMSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InternalName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.InternalName)))
		i += copy(dAtA[i:], m.InternalName)
	}
	if m.ExternalNetwork {
		dAtA[i] = 0x10
		i++
		if m.ExternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InternalNetwork {
		dAtA[i] = 0x18
		i++
		if m.InternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *VMPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVmpool(dAtA, i, uint64(m.Key.Size()))
	n6, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Action != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(m.Action))
	}
	if m.NotifyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.VmSpecs) > 0 {
		for _, msg := range m.VmSpecs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CloudletVms) > 0 {
		for _, msg := range m.CloudletVms {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVmpool(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintVmpool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletVMNetInfo) CopyInFields(src *CloudletVMNetInfo) int {
	changed := 0
	if m.ExternalIp != src.ExternalIp {
		m.ExternalIp = src.ExternalIp
		changed++
	}
	if m.InternalIp != src.InternalIp {
		m.InternalIp = src.InternalIp
		changed++
	}
	return changed
}

func (m *CloudletVMNetInfo) DeepCopyIn(src *CloudletVMNetInfo) {
	m.ExternalIp = src.ExternalIp
	m.InternalIp = src.InternalIp
}

// Helper method to check that enums have valid values
func (m *CloudletVMNetInfo) ValidateEnums() error {
	return nil
}

func (m *CloudletVM) CopyInFields(src *CloudletVM) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.NetInfo.ExternalIp != src.NetInfo.ExternalIp {
		m.NetInfo.ExternalIp = src.NetInfo.ExternalIp
		changed++
	}
	if m.NetInfo.InternalIp != src.NetInfo.InternalIp {
		m.NetInfo.InternalIp = src.NetInfo.InternalIp
		changed++
	}
	if m.User != src.User {
		m.User = src.User
		changed++
	}
	if m.State != src.State {
		m.State = src.State
		changed++
	}
	if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
		m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
		changed++
	}
	if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
		m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
		changed++
	}
	if m.InternalName != src.InternalName {
		m.InternalName = src.InternalName
		changed++
	}
	return changed
}

func (m *CloudletVM) DeepCopyIn(src *CloudletVM) {
	m.Name = src.Name
	m.NetInfo.DeepCopyIn(&src.NetInfo)
	m.User = src.User
	m.State = src.State
	m.UpdatedAt = src.UpdatedAt
	m.InternalName = src.InternalName
}

// Helper method to check that enums have valid values
func (m *CloudletVM) ValidateEnums() error {
	if err := m.NetInfo.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletVMState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	return nil
}

func IgnoreCloudletVMFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(CloudletVM{}, names...)
}

func (m *VMPool) Matches(o *VMPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.CloudletVms != nil {
		if m.CloudletVms == nil && o.CloudletVms != nil || m.CloudletVms != nil && o.CloudletVms == nil {
			return false
		} else if m.CloudletVms != nil && o.CloudletVms != nil {
			if len(m.CloudletVms) != len(o.CloudletVms) {
				return false
			}
			for i := 0; i < len(m.CloudletVms); i++ {
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Action != 0 {
			if o.Action != m.Action {
				return false
			}
		}
	}
	if !opts.Filter || o.Error != "" {
		if o.Error != m.Error {
			return false
		}
	}
	return true
}

const VMPoolFieldKey = "2"
const VMPoolFieldKeyOrganization = "2.1"
const VMPoolFieldKeyName = "2.2"
const VMPoolFieldCloudletVms = "3"
const VMPoolFieldCloudletVmsName = "3.1"
const VMPoolFieldCloudletVmsNetInfo = "3.2"
const VMPoolFieldCloudletVmsNetInfoExternalIp = "3.2.1"
const VMPoolFieldCloudletVmsNetInfoInternalIp = "3.2.2"
const VMPoolFieldCloudletVmsUser = "3.3"
const VMPoolFieldCloudletVmsState = "3.4"
const VMPoolFieldCloudletVmsUpdatedAt = "3.5"
const VMPoolFieldCloudletVmsUpdatedAtSeconds = "3.5.1"
const VMPoolFieldCloudletVmsUpdatedAtNanos = "3.5.2"
const VMPoolFieldCloudletVmsInternalName = "3.6"
const VMPoolFieldAction = "4"
const VMPoolFieldError = "5"

var VMPoolAllFields = []string{
	VMPoolFieldKeyOrganization,
	VMPoolFieldKeyName,
	VMPoolFieldCloudletVmsName,
	VMPoolFieldCloudletVmsNetInfoExternalIp,
	VMPoolFieldCloudletVmsNetInfoInternalIp,
	VMPoolFieldCloudletVmsUser,
	VMPoolFieldCloudletVmsState,
	VMPoolFieldCloudletVmsUpdatedAtSeconds,
	VMPoolFieldCloudletVmsUpdatedAtNanos,
	VMPoolFieldCloudletVmsInternalName,
	VMPoolFieldAction,
	VMPoolFieldError,
}

var VMPoolAllFieldsMap = map[string]struct{}{
	VMPoolFieldKeyOrganization:              struct{}{},
	VMPoolFieldKeyName:                      struct{}{},
	VMPoolFieldCloudletVmsName:              struct{}{},
	VMPoolFieldCloudletVmsNetInfoExternalIp: struct{}{},
	VMPoolFieldCloudletVmsNetInfoInternalIp: struct{}{},
	VMPoolFieldCloudletVmsUser:              struct{}{},
	VMPoolFieldCloudletVmsState:             struct{}{},
	VMPoolFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	VMPoolFieldCloudletVmsUpdatedAtNanos:    struct{}{},
	VMPoolFieldCloudletVmsInternalName:      struct{}{},
	VMPoolFieldAction:                       struct{}{},
	VMPoolFieldError:                        struct{}{},
}

var VMPoolAllFieldsStringMap = map[string]string{
	VMPoolFieldKeyOrganization:              "Key Organization",
	VMPoolFieldKeyName:                      "Key Name",
	VMPoolFieldCloudletVmsName:              "Cloudlet Vms Name",
	VMPoolFieldCloudletVmsNetInfoExternalIp: "Cloudlet Vms Net Info External Ip",
	VMPoolFieldCloudletVmsNetInfoInternalIp: "Cloudlet Vms Net Info Internal Ip",
	VMPoolFieldCloudletVmsUser:              "Cloudlet Vms User",
	VMPoolFieldCloudletVmsState:             "Cloudlet Vms State",
	VMPoolFieldCloudletVmsUpdatedAtSeconds:  "Cloudlet Vms Updated At Seconds",
	VMPoolFieldCloudletVmsUpdatedAtNanos:    "Cloudlet Vms Updated At Nanos",
	VMPoolFieldCloudletVmsInternalName:      "Cloudlet Vms Internal Name",
	VMPoolFieldAction:                       "Action",
	VMPoolFieldError:                        "Error",
}

func (m *VMPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, VMPoolFieldKey+".") || s == VMPoolFieldKey
}

func (m *VMPool) DiffFields(o *VMPool, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[VMPoolFieldKeyOrganization] = struct{}{}
		fields[VMPoolFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[VMPoolFieldKeyName] = struct{}{}
		fields[VMPoolFieldKey] = struct{}{}
	}
	if len(m.CloudletVms) != len(o.CloudletVms) {
		fields[VMPoolFieldCloudletVms] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.CloudletVms); i0++ {
			if m.CloudletVms[i0].Name != o.CloudletVms[i0].Name {
				fields[VMPoolFieldCloudletVmsName] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].NetInfo.ExternalIp != o.CloudletVms[i0].NetInfo.ExternalIp {
				fields[VMPoolFieldCloudletVmsNetInfoExternalIp] = struct{}{}
				fields[VMPoolFieldCloudletVmsNetInfo] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].NetInfo.InternalIp != o.CloudletVms[i0].NetInfo.InternalIp {
				fields[VMPoolFieldCloudletVmsNetInfoInternalIp] = struct{}{}
				fields[VMPoolFieldCloudletVmsNetInfo] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].User != o.CloudletVms[i0].User {
				fields[VMPoolFieldCloudletVmsUser] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].State != o.CloudletVms[i0].State {
				fields[VMPoolFieldCloudletVmsState] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].UpdatedAt.Seconds != o.CloudletVms[i0].UpdatedAt.Seconds {
				fields[VMPoolFieldCloudletVmsUpdatedAtSeconds] = struct{}{}
				fields[VMPoolFieldCloudletVmsUpdatedAt] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].UpdatedAt.Nanos != o.CloudletVms[i0].UpdatedAt.Nanos {
				fields[VMPoolFieldCloudletVmsUpdatedAtNanos] = struct{}{}
				fields[VMPoolFieldCloudletVmsUpdatedAt] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].InternalName != o.CloudletVms[i0].InternalName {
				fields[VMPoolFieldCloudletVmsInternalName] = struct{}{}
				fields[VMPoolFieldCloudletVms] = struct{}{}
			}
		}
	}
	if m.Action != o.Action {
		fields[VMPoolFieldAction] = struct{}{}
	}
	if m.Error != o.Error {
		fields[VMPoolFieldError] = struct{}{}
	}
}

var UpdateVMPoolFieldsMap = map[string]struct{}{
	VMPoolFieldCloudletVms:                  struct{}{},
	VMPoolFieldCloudletVmsName:              struct{}{},
	VMPoolFieldCloudletVmsNetInfo:           struct{}{},
	VMPoolFieldCloudletVmsNetInfoExternalIp: struct{}{},
	VMPoolFieldCloudletVmsNetInfoInternalIp: struct{}{},
	VMPoolFieldCloudletVmsUser:              struct{}{},
	VMPoolFieldCloudletVmsState:             struct{}{},
	VMPoolFieldCloudletVmsUpdatedAt:         struct{}{},
	VMPoolFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	VMPoolFieldCloudletVmsUpdatedAtNanos:    struct{}{},
	VMPoolFieldCloudletVmsInternalName:      struct{}{},
}

func (m *VMPool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateVMPoolFieldsMap[field]; !ok {
			if _, ok := VMPoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, VMPoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *VMPool) CopyInFields(src *VMPool) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.CloudletVms == nil || len(m.CloudletVms) != len(src.CloudletVms) {
			m.CloudletVms = make([]CloudletVM, len(src.CloudletVms))
			changed++
		}
		for i0 := 0; i0 < len(src.CloudletVms); i0++ {
			if _, set := fmap["3.1"]; set {
				if m.CloudletVms[i0].Name != src.CloudletVms[i0].Name {
					m.CloudletVms[i0].Name = src.CloudletVms[i0].Name
					changed++
				}
			}
			if _, set := fmap["3.2"]; set {
				if _, set := fmap["3.2.1"]; set {
					if m.CloudletVms[i0].NetInfo.ExternalIp != src.CloudletVms[i0].NetInfo.ExternalIp {
						m.CloudletVms[i0].NetInfo.ExternalIp = src.CloudletVms[i0].NetInfo.ExternalIp
						changed++
					}
				}
				if _, set := fmap["3.2.2"]; set {
					if m.CloudletVms[i0].NetInfo.InternalIp != src.CloudletVms[i0].NetInfo.InternalIp {
						m.CloudletVms[i0].NetInfo.InternalIp = src.CloudletVms[i0].NetInfo.InternalIp
						changed++
					}
				}
			}
			if _, set := fmap["3.3"]; set {
				if m.CloudletVms[i0].User != src.CloudletVms[i0].User {
					m.CloudletVms[i0].User = src.CloudletVms[i0].User
					changed++
				}
			}
			if _, set := fmap["3.4"]; set {
				if m.CloudletVms[i0].State != src.CloudletVms[i0].State {
					m.CloudletVms[i0].State = src.CloudletVms[i0].State
					changed++
				}
			}
			if _, set := fmap["3.5"]; set {
				if _, set := fmap["3.5.1"]; set {
					if m.CloudletVms[i0].UpdatedAt.Seconds != src.CloudletVms[i0].UpdatedAt.Seconds {
						m.CloudletVms[i0].UpdatedAt.Seconds = src.CloudletVms[i0].UpdatedAt.Seconds
						changed++
					}
				}
				if _, set := fmap["3.5.2"]; set {
					if m.CloudletVms[i0].UpdatedAt.Nanos != src.CloudletVms[i0].UpdatedAt.Nanos {
						m.CloudletVms[i0].UpdatedAt.Nanos = src.CloudletVms[i0].UpdatedAt.Nanos
						changed++
					}
				}
			}
			if _, set := fmap["3.6"]; set {
				if m.CloudletVms[i0].InternalName != src.CloudletVms[i0].InternalName {
					m.CloudletVms[i0].InternalName = src.CloudletVms[i0].InternalName
					changed++
				}
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.Action != src.Action {
			m.Action = src.Action
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.Error != src.Error {
			m.Error = src.Error
			changed++
		}
	}
	return changed
}

func (m *VMPool) DeepCopyIn(src *VMPool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.CloudletVms != nil {
		m.CloudletVms = make([]CloudletVM, len(src.CloudletVms), len(src.CloudletVms))
		for ii, s := range src.CloudletVms {
			m.CloudletVms[ii].DeepCopyIn(&s)
		}
	} else {
		m.CloudletVms = nil
	}
	m.Action = src.Action
	m.Error = src.Error
}

func (s *VMPool) HasFields() bool {
	return true
}

type VMPoolStore struct {
	kvstore objstore.KVStore
}

func NewVMPoolStore(kvstore objstore.KVStore) VMPoolStore {
	return VMPoolStore{kvstore: kvstore}
}

func (s *VMPoolStore) Create(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	err := m.Validate(VMPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStore) Update(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur VMPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStore) Put(ctx context.Context, m *VMPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(VMPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStore) Delete(ctx context.Context, m *VMPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolStore) LoadOne(key string) (*VMPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj VMPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse VMPool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *VMPoolStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *VMPool) bool {
	keystr := objstore.DbKeyString("VMPool", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *VMPoolStore) STMPut(stm concurrency.STM, obj *VMPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("VMPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("VMPool json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *VMPoolStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("VMPool", key)
	stm.Del(keystr)
}

type VMPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type VMPoolCacheData struct {
	Obj    *VMPool
	ModRev int64
}

// VMPoolCache caches VMPool objects in memory in a hash table
// and keeps them in sync with the database.
type VMPoolCache struct {
	Objs          map[CloudletKey]*VMPoolCacheData
	Mux           util.Mutex
	List          map[CloudletKey]struct{}
	FlushAll      bool
	NotifyCb      func(ctx context.Context, obj *CloudletKey, old *VMPool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *VMPool, new *VMPool)
	DeletedCbs    []func(ctx context.Context, old *VMPool)
	KeyWatchers   map[CloudletKey][]*VMPoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletKey)
}

func NewVMPoolCache() *VMPoolCache {
	cache := VMPoolCache{}
	InitVMPoolCache(&cache)
	return &cache
}

func InitVMPoolCache(cache *VMPoolCache) {
	cache.Objs = make(map[CloudletKey]*VMPoolCacheData)
	cache.KeyWatchers = make(map[CloudletKey][]*VMPoolKeyWatcher)
	cache.NotifyCb = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *VMPoolCache) GetTypeString() string {
	return "VMPool"
}

func (c *VMPoolCache) Get(key *CloudletKey, valbuf *VMPool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *VMPoolCache) GetWithRev(key *CloudletKey, valbuf *VMPool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *VMPoolCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *VMPoolCache) GetAllKeys(ctx context.Context, cb func(key *CloudletKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *VMPoolCache) Update(ctx context.Context, in *VMPool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *VMPool) (*VMPool, bool) {
		return in, true
	})
}

func (c *VMPoolCache) UpdateModFunc(ctx context.Context, key *CloudletKey, modRev int64, modFunc func(old *VMPool) (new *VMPool, changed bool)) {
	c.Mux.Lock()
	var old *VMPool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &VMPool{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	if c.NotifyCb != nil {
		defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &VMPool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &VMPoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *VMPoolCache) Delete(ctx context.Context, in *VMPool, modRev int64) {
	c.Mux.Lock()
	var old *VMPool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *VMPoolCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*VMPoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *VMPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *VMPoolCache) Show(filter *VMPool, cb func(ret *VMPool) error) error {
	log.DebugLog(log.DebugLevelApi, "Show VMPool", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare VMPool", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show VMPool", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func VMPoolGenericNotifyCb(fn func(key *CloudletKey, old *VMPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*VMPool))
	}
}

func (c *VMPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *VMPool, modRev int64)) {
	c.NotifyCb = fn
}

func (c *VMPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *VMPool, new *VMPool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *VMPool, new *VMPool){fn}
}

func (c *VMPoolCache) SetDeletedCb(fn func(ctx context.Context, old *VMPool)) {
	c.DeletedCbs = []func(ctx context.Context, old *VMPool){fn}
}

func (c *VMPoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *VMPoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *VMPoolCache) AddUpdatedCb(fn func(ctx context.Context, old *VMPool, new *VMPool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *VMPoolCache) AddDeletedCb(fn func(ctx context.Context, old *VMPool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *VMPoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *VMPoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *VMPoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *VMPoolCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*VMPoolKeyWatcher, 0)
	}
	watcher := VMPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching VMPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *VMPoolCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*VMPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *VMPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := VMPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse VMPool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *VMPoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := VMPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *VMPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *VMPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*VMPoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *VMPool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPool) GetKey() *CloudletKey {
	return &m.Key
}

func (m *VMPool) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *VMPool) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortVMPool(a VMPool, b VMPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *VMPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.CloudletVms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := CloudletVMAction_name[int32(m.Action)]; !ok {
		return errors.New("invalid Action")
	}
	return nil
}

func IgnoreVMPoolFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVms.UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Action")
	}
	return cmpopts.IgnoreFields(VMPool{}, names...)
}

func (m *VMPoolMember) CopyInFields(src *VMPoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.CloudletVm.Name != src.CloudletVm.Name {
		m.CloudletVm.Name = src.CloudletVm.Name
		changed++
	}
	if m.CloudletVm.NetInfo.ExternalIp != src.CloudletVm.NetInfo.ExternalIp {
		m.CloudletVm.NetInfo.ExternalIp = src.CloudletVm.NetInfo.ExternalIp
		changed++
	}
	if m.CloudletVm.NetInfo.InternalIp != src.CloudletVm.NetInfo.InternalIp {
		m.CloudletVm.NetInfo.InternalIp = src.CloudletVm.NetInfo.InternalIp
		changed++
	}
	if m.CloudletVm.User != src.CloudletVm.User {
		m.CloudletVm.User = src.CloudletVm.User
		changed++
	}
	if m.CloudletVm.State != src.CloudletVm.State {
		m.CloudletVm.State = src.CloudletVm.State
		changed++
	}
	if m.CloudletVm.UpdatedAt.Seconds != src.CloudletVm.UpdatedAt.Seconds {
		m.CloudletVm.UpdatedAt.Seconds = src.CloudletVm.UpdatedAt.Seconds
		changed++
	}
	if m.CloudletVm.UpdatedAt.Nanos != src.CloudletVm.UpdatedAt.Nanos {
		m.CloudletVm.UpdatedAt.Nanos = src.CloudletVm.UpdatedAt.Nanos
		changed++
	}
	if m.CloudletVm.InternalName != src.CloudletVm.InternalName {
		m.CloudletVm.InternalName = src.CloudletVm.InternalName
		changed++
	}
	return changed
}

func (m *VMPoolMember) DeepCopyIn(src *VMPoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.CloudletVm.DeepCopyIn(&src.CloudletVm)
}

func (m *VMPoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPoolMember) GetKey() *CloudletKey {
	return &m.Key
}

func (m *VMPoolMember) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *VMPoolMember) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortVMPoolMember(a VMPoolMember, b VMPoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *VMPoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletVm.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreVMPoolMemberFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVm.UpdatedAt")
	}
	return cmpopts.IgnoreFields(VMPoolMember{}, names...)
}

func (m *CloudletVMSpec) CopyInFields(src *CloudletVMSpec) int {
	changed := 0
	if m.InternalName != src.InternalName {
		m.InternalName = src.InternalName
		changed++
	}
	if m.ExternalNetwork != src.ExternalNetwork {
		m.ExternalNetwork = src.ExternalNetwork
		changed++
	}
	if m.InternalNetwork != src.InternalNetwork {
		m.InternalNetwork = src.InternalNetwork
		changed++
	}
	return changed
}

func (m *CloudletVMSpec) DeepCopyIn(src *CloudletVMSpec) {
	m.InternalName = src.InternalName
	m.ExternalNetwork = src.ExternalNetwork
	m.InternalNetwork = src.InternalNetwork
}

// Helper method to check that enums have valid values
func (m *CloudletVMSpec) ValidateEnums() error {
	return nil
}

func (m *VMPoolInfo) Matches(o *VMPoolInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Action != 0 {
		if o.Action != m.Action {
			return false
		}
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.User != "" {
		if o.User != m.User {
			return false
		}
	}
	if !opts.Filter || o.VmSpecs != nil {
		if m.VmSpecs == nil && o.VmSpecs != nil || m.VmSpecs != nil && o.VmSpecs == nil {
			return false
		} else if m.VmSpecs != nil && o.VmSpecs != nil {
			if len(m.VmSpecs) != len(o.VmSpecs) {
				return false
			}
			for i := 0; i < len(m.VmSpecs); i++ {
			}
		}
	}
	if !opts.Filter || o.CloudletVms != nil {
		if m.CloudletVms == nil && o.CloudletVms != nil || m.CloudletVms != nil && o.CloudletVms == nil {
			return false
		} else if m.CloudletVms != nil && o.CloudletVms != nil {
			if len(m.CloudletVms) != len(o.CloudletVms) {
				return false
			}
			for i := 0; i < len(m.CloudletVms); i++ {
			}
		}
	}
	if !opts.Filter || o.Error != "" {
		if o.Error != m.Error {
			return false
		}
	}
	return true
}

const VMPoolInfoFieldKey = "2"
const VMPoolInfoFieldKeyOrganization = "2.1"
const VMPoolInfoFieldKeyName = "2.2"
const VMPoolInfoFieldAction = "3"
const VMPoolInfoFieldNotifyId = "4"
const VMPoolInfoFieldUser = "5"
const VMPoolInfoFieldVmSpecs = "6"
const VMPoolInfoFieldVmSpecsInternalName = "6.1"
const VMPoolInfoFieldVmSpecsExternalNetwork = "6.2"
const VMPoolInfoFieldVmSpecsInternalNetwork = "6.3"
const VMPoolInfoFieldCloudletVms = "7"
const VMPoolInfoFieldCloudletVmsName = "7.1"
const VMPoolInfoFieldCloudletVmsNetInfo = "7.2"
const VMPoolInfoFieldCloudletVmsNetInfoExternalIp = "7.2.1"
const VMPoolInfoFieldCloudletVmsNetInfoInternalIp = "7.2.2"
const VMPoolInfoFieldCloudletVmsUser = "7.3"
const VMPoolInfoFieldCloudletVmsState = "7.4"
const VMPoolInfoFieldCloudletVmsUpdatedAt = "7.5"
const VMPoolInfoFieldCloudletVmsUpdatedAtSeconds = "7.5.1"
const VMPoolInfoFieldCloudletVmsUpdatedAtNanos = "7.5.2"
const VMPoolInfoFieldCloudletVmsInternalName = "7.6"
const VMPoolInfoFieldError = "8"

var VMPoolInfoAllFields = []string{
	VMPoolInfoFieldKeyOrganization,
	VMPoolInfoFieldKeyName,
	VMPoolInfoFieldAction,
	VMPoolInfoFieldNotifyId,
	VMPoolInfoFieldUser,
	VMPoolInfoFieldVmSpecsInternalName,
	VMPoolInfoFieldVmSpecsExternalNetwork,
	VMPoolInfoFieldVmSpecsInternalNetwork,
	VMPoolInfoFieldCloudletVmsName,
	VMPoolInfoFieldCloudletVmsNetInfoExternalIp,
	VMPoolInfoFieldCloudletVmsNetInfoInternalIp,
	VMPoolInfoFieldCloudletVmsUser,
	VMPoolInfoFieldCloudletVmsState,
	VMPoolInfoFieldCloudletVmsUpdatedAtSeconds,
	VMPoolInfoFieldCloudletVmsUpdatedAtNanos,
	VMPoolInfoFieldCloudletVmsInternalName,
	VMPoolInfoFieldError,
}

var VMPoolInfoAllFieldsMap = map[string]struct{}{
	VMPoolInfoFieldKeyOrganization:              struct{}{},
	VMPoolInfoFieldKeyName:                      struct{}{},
	VMPoolInfoFieldAction:                       struct{}{},
	VMPoolInfoFieldNotifyId:                     struct{}{},
	VMPoolInfoFieldUser:                         struct{}{},
	VMPoolInfoFieldVmSpecsInternalName:          struct{}{},
	VMPoolInfoFieldVmSpecsExternalNetwork:       struct{}{},
	VMPoolInfoFieldVmSpecsInternalNetwork:       struct{}{},
	VMPoolInfoFieldCloudletVmsName:              struct{}{},
	VMPoolInfoFieldCloudletVmsNetInfoExternalIp: struct{}{},
	VMPoolInfoFieldCloudletVmsNetInfoInternalIp: struct{}{},
	VMPoolInfoFieldCloudletVmsUser:              struct{}{},
	VMPoolInfoFieldCloudletVmsState:             struct{}{},
	VMPoolInfoFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	VMPoolInfoFieldCloudletVmsUpdatedAtNanos:    struct{}{},
	VMPoolInfoFieldCloudletVmsInternalName:      struct{}{},
	VMPoolInfoFieldError:                        struct{}{},
}

var VMPoolInfoAllFieldsStringMap = map[string]string{
	VMPoolInfoFieldKeyOrganization:              "Key Organization",
	VMPoolInfoFieldKeyName:                      "Key Name",
	VMPoolInfoFieldAction:                       "Action",
	VMPoolInfoFieldNotifyId:                     "Notify Id",
	VMPoolInfoFieldUser:                         "User",
	VMPoolInfoFieldVmSpecsInternalName:          "Vm Specs Internal Name",
	VMPoolInfoFieldVmSpecsExternalNetwork:       "Vm Specs External Network",
	VMPoolInfoFieldVmSpecsInternalNetwork:       "Vm Specs Internal Network",
	VMPoolInfoFieldCloudletVmsName:              "Cloudlet Vms Name",
	VMPoolInfoFieldCloudletVmsNetInfoExternalIp: "Cloudlet Vms Net Info External Ip",
	VMPoolInfoFieldCloudletVmsNetInfoInternalIp: "Cloudlet Vms Net Info Internal Ip",
	VMPoolInfoFieldCloudletVmsUser:              "Cloudlet Vms User",
	VMPoolInfoFieldCloudletVmsState:             "Cloudlet Vms State",
	VMPoolInfoFieldCloudletVmsUpdatedAtSeconds:  "Cloudlet Vms Updated At Seconds",
	VMPoolInfoFieldCloudletVmsUpdatedAtNanos:    "Cloudlet Vms Updated At Nanos",
	VMPoolInfoFieldCloudletVmsInternalName:      "Cloudlet Vms Internal Name",
	VMPoolInfoFieldError:                        "Error",
}

func (m *VMPoolInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, VMPoolInfoFieldKey+".") || s == VMPoolInfoFieldKey
}

func (m *VMPoolInfo) DiffFields(o *VMPoolInfo, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[VMPoolInfoFieldKeyOrganization] = struct{}{}
		fields[VMPoolInfoFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[VMPoolInfoFieldKeyName] = struct{}{}
		fields[VMPoolInfoFieldKey] = struct{}{}
	}
	if m.Action != o.Action {
		fields[VMPoolInfoFieldAction] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[VMPoolInfoFieldNotifyId] = struct{}{}
	}
	if m.User != o.User {
		fields[VMPoolInfoFieldUser] = struct{}{}
	}
	if len(m.VmSpecs) != len(o.VmSpecs) {
		fields[VMPoolInfoFieldVmSpecs] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.VmSpecs); i0++ {
			if m.VmSpecs[i0].InternalName != o.VmSpecs[i0].InternalName {
				fields[VMPoolInfoFieldVmSpecsInternalName] = struct{}{}
				fields[VMPoolInfoFieldVmSpecs] = struct{}{}
			}
			if m.VmSpecs[i0].ExternalNetwork != o.VmSpecs[i0].ExternalNetwork {
				fields[VMPoolInfoFieldVmSpecsExternalNetwork] = struct{}{}
				fields[VMPoolInfoFieldVmSpecs] = struct{}{}
			}
			if m.VmSpecs[i0].InternalNetwork != o.VmSpecs[i0].InternalNetwork {
				fields[VMPoolInfoFieldVmSpecsInternalNetwork] = struct{}{}
				fields[VMPoolInfoFieldVmSpecs] = struct{}{}
			}
		}
	}
	if len(m.CloudletVms) != len(o.CloudletVms) {
		fields[VMPoolInfoFieldCloudletVms] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.CloudletVms); i0++ {
			if m.CloudletVms[i0].Name != o.CloudletVms[i0].Name {
				fields[VMPoolInfoFieldCloudletVmsName] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].NetInfo.ExternalIp != o.CloudletVms[i0].NetInfo.ExternalIp {
				fields[VMPoolInfoFieldCloudletVmsNetInfoExternalIp] = struct{}{}
				fields[VMPoolInfoFieldCloudletVmsNetInfo] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].NetInfo.InternalIp != o.CloudletVms[i0].NetInfo.InternalIp {
				fields[VMPoolInfoFieldCloudletVmsNetInfoInternalIp] = struct{}{}
				fields[VMPoolInfoFieldCloudletVmsNetInfo] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].User != o.CloudletVms[i0].User {
				fields[VMPoolInfoFieldCloudletVmsUser] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].State != o.CloudletVms[i0].State {
				fields[VMPoolInfoFieldCloudletVmsState] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].UpdatedAt.Seconds != o.CloudletVms[i0].UpdatedAt.Seconds {
				fields[VMPoolInfoFieldCloudletVmsUpdatedAtSeconds] = struct{}{}
				fields[VMPoolInfoFieldCloudletVmsUpdatedAt] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].UpdatedAt.Nanos != o.CloudletVms[i0].UpdatedAt.Nanos {
				fields[VMPoolInfoFieldCloudletVmsUpdatedAtNanos] = struct{}{}
				fields[VMPoolInfoFieldCloudletVmsUpdatedAt] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
			if m.CloudletVms[i0].InternalName != o.CloudletVms[i0].InternalName {
				fields[VMPoolInfoFieldCloudletVmsInternalName] = struct{}{}
				fields[VMPoolInfoFieldCloudletVms] = struct{}{}
			}
		}
	}
	if m.Error != o.Error {
		fields[VMPoolInfoFieldError] = struct{}{}
	}
}

func (m *VMPoolInfo) CopyInFields(src *VMPoolInfo) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.Action != src.Action {
			m.Action = src.Action
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.User != src.User {
			m.User = src.User
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.VmSpecs == nil || len(m.VmSpecs) != len(src.VmSpecs) {
			m.VmSpecs = make([]CloudletVMSpec, len(src.VmSpecs))
			changed++
		}
		for i0 := 0; i0 < len(src.VmSpecs); i0++ {
			if _, set := fmap["6.1"]; set {
				if m.VmSpecs[i0].InternalName != src.VmSpecs[i0].InternalName {
					m.VmSpecs[i0].InternalName = src.VmSpecs[i0].InternalName
					changed++
				}
			}
			if _, set := fmap["6.2"]; set {
				if m.VmSpecs[i0].ExternalNetwork != src.VmSpecs[i0].ExternalNetwork {
					m.VmSpecs[i0].ExternalNetwork = src.VmSpecs[i0].ExternalNetwork
					changed++
				}
			}
			if _, set := fmap["6.3"]; set {
				if m.VmSpecs[i0].InternalNetwork != src.VmSpecs[i0].InternalNetwork {
					m.VmSpecs[i0].InternalNetwork = src.VmSpecs[i0].InternalNetwork
					changed++
				}
			}
		}
	}
	if _, set := fmap["7"]; set {
		if m.CloudletVms == nil || len(m.CloudletVms) != len(src.CloudletVms) {
			m.CloudletVms = make([]CloudletVM, len(src.CloudletVms))
			changed++
		}
		for i0 := 0; i0 < len(src.CloudletVms); i0++ {
			if _, set := fmap["7.1"]; set {
				if m.CloudletVms[i0].Name != src.CloudletVms[i0].Name {
					m.CloudletVms[i0].Name = src.CloudletVms[i0].Name
					changed++
				}
			}
			if _, set := fmap["7.2"]; set {
				if _, set := fmap["7.2.1"]; set {
					if m.CloudletVms[i0].NetInfo.ExternalIp != src.CloudletVms[i0].NetInfo.ExternalIp {
						m.CloudletVms[i0].NetInfo.ExternalIp = src.CloudletVms[i0].NetInfo.ExternalIp
						changed++
					}
				}
				if _, set := fmap["7.2.2"]; set {
					if m.CloudletVms[i0].NetInfo.InternalIp != src.CloudletVms[i0].NetInfo.InternalIp {
						m.CloudletVms[i0].NetInfo.InternalIp = src.CloudletVms[i0].NetInfo.InternalIp
						changed++
					}
				}
			}
			if _, set := fmap["7.3"]; set {
				if m.CloudletVms[i0].User != src.CloudletVms[i0].User {
					m.CloudletVms[i0].User = src.CloudletVms[i0].User
					changed++
				}
			}
			if _, set := fmap["7.4"]; set {
				if m.CloudletVms[i0].State != src.CloudletVms[i0].State {
					m.CloudletVms[i0].State = src.CloudletVms[i0].State
					changed++
				}
			}
			if _, set := fmap["7.5"]; set {
				if _, set := fmap["7.5.1"]; set {
					if m.CloudletVms[i0].UpdatedAt.Seconds != src.CloudletVms[i0].UpdatedAt.Seconds {
						m.CloudletVms[i0].UpdatedAt.Seconds = src.CloudletVms[i0].UpdatedAt.Seconds
						changed++
					}
				}
				if _, set := fmap["7.5.2"]; set {
					if m.CloudletVms[i0].UpdatedAt.Nanos != src.CloudletVms[i0].UpdatedAt.Nanos {
						m.CloudletVms[i0].UpdatedAt.Nanos = src.CloudletVms[i0].UpdatedAt.Nanos
						changed++
					}
				}
			}
			if _, set := fmap["7.6"]; set {
				if m.CloudletVms[i0].InternalName != src.CloudletVms[i0].InternalName {
					m.CloudletVms[i0].InternalName = src.CloudletVms[i0].InternalName
					changed++
				}
			}
		}
	}
	if _, set := fmap["8"]; set {
		if m.Error != src.Error {
			m.Error = src.Error
			changed++
		}
	}
	return changed
}

func (m *VMPoolInfo) DeepCopyIn(src *VMPoolInfo) {
	m.Key.DeepCopyIn(&src.Key)
	m.Action = src.Action
	m.NotifyId = src.NotifyId
	m.User = src.User
	if src.VmSpecs != nil {
		m.VmSpecs = make([]CloudletVMSpec, len(src.VmSpecs), len(src.VmSpecs))
		for ii, s := range src.VmSpecs {
			m.VmSpecs[ii].DeepCopyIn(&s)
		}
	} else {
		m.VmSpecs = nil
	}
	if src.CloudletVms != nil {
		m.CloudletVms = make([]CloudletVM, len(src.CloudletVms), len(src.CloudletVms))
		for ii, s := range src.CloudletVms {
			m.CloudletVms[ii].DeepCopyIn(&s)
		}
	} else {
		m.CloudletVms = nil
	}
	m.Error = src.Error
}

func (s *VMPoolInfo) HasFields() bool {
	return true
}

type VMPoolInfoStore struct {
	kvstore objstore.KVStore
}

func NewVMPoolInfoStore(kvstore objstore.KVStore) VMPoolInfoStore {
	return VMPoolInfoStore{kvstore: kvstore}
}

func (s *VMPoolInfoStore) Create(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(VMPoolInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStore) Update(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur VMPoolInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStore) Put(ctx context.Context, m *VMPoolInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(VMPoolInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStore) Delete(ctx context.Context, m *VMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("VMPoolInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *VMPoolInfoStore) LoadOne(key string) (*VMPoolInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj VMPoolInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse VMPoolInfo data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *VMPoolInfoStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *VMPoolInfo) bool {
	keystr := objstore.DbKeyString("VMPoolInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *VMPoolInfoStore) STMPut(stm concurrency.STM, obj *VMPoolInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("VMPoolInfo", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("VMPoolInfo json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *VMPoolInfoStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("VMPoolInfo", key)
	stm.Del(keystr)
}

type VMPoolInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

type VMPoolInfoCacheData struct {
	Obj    *VMPoolInfo
	ModRev int64
}

// VMPoolInfoCache caches VMPoolInfo objects in memory in a hash table
// and keeps them in sync with the database.
type VMPoolInfoCache struct {
	Objs          map[CloudletKey]*VMPoolInfoCacheData
	Mux           util.Mutex
	List          map[CloudletKey]struct{}
	FlushAll      bool
	NotifyCb      func(ctx context.Context, obj *CloudletKey, old *VMPoolInfo, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)
	DeletedCbs    []func(ctx context.Context, old *VMPoolInfo)
	KeyWatchers   map[CloudletKey][]*VMPoolInfoKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletKey)
}

func NewVMPoolInfoCache() *VMPoolInfoCache {
	cache := VMPoolInfoCache{}
	InitVMPoolInfoCache(&cache)
	return &cache
}

func InitVMPoolInfoCache(cache *VMPoolInfoCache) {
	cache.Objs = make(map[CloudletKey]*VMPoolInfoCacheData)
	cache.KeyWatchers = make(map[CloudletKey][]*VMPoolInfoKeyWatcher)
	cache.NotifyCb = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *VMPoolInfoCache) GetTypeString() string {
	return "VMPoolInfo"
}

func (c *VMPoolInfoCache) Get(key *CloudletKey, valbuf *VMPoolInfo) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *VMPoolInfoCache) GetWithRev(key *CloudletKey, valbuf *VMPoolInfo, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *VMPoolInfoCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *VMPoolInfoCache) GetAllKeys(ctx context.Context, cb func(key *CloudletKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *VMPoolInfoCache) Update(ctx context.Context, in *VMPoolInfo, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *VMPoolInfo) (*VMPoolInfo, bool) {
		return in, true
	})
}

func (c *VMPoolInfoCache) UpdateModFunc(ctx context.Context, key *CloudletKey, modRev int64, modFunc func(old *VMPoolInfo) (new *VMPoolInfo, changed bool)) {
	c.Mux.Lock()
	var old *VMPoolInfo
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &VMPoolInfo{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	if c.NotifyCb != nil {
		defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &VMPoolInfo{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &VMPoolInfoCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *VMPoolInfoCache) Delete(ctx context.Context, in *VMPoolInfo, modRev int64) {
	c.Mux.Lock()
	var old *VMPoolInfo
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *VMPoolInfoCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *VMPoolInfoCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush VMPoolInfo", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[CloudletKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush VMPoolInfo delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *VMPoolInfoCache) Show(filter *VMPoolInfo, cb func(ret *VMPoolInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show VMPoolInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare VMPoolInfo", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show VMPoolInfo", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func VMPoolInfoGenericNotifyCb(fn func(key *CloudletKey, old *VMPoolInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*VMPoolInfo))
	}
}

func (c *VMPoolInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *VMPoolInfo, modRev int64)) {
	c.NotifyCb = fn
}

func (c *VMPoolInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)) {
	c.UpdatedCbs = []func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo){fn}
}

func (c *VMPoolInfoCache) SetDeletedCb(fn func(ctx context.Context, old *VMPoolInfo)) {
	c.DeletedCbs = []func(ctx context.Context, old *VMPoolInfo){fn}
}

func (c *VMPoolInfoCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *VMPoolInfoCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *VMPoolInfoCache) AddUpdatedCb(fn func(ctx context.Context, old *VMPoolInfo, new *VMPoolInfo)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *VMPoolInfoCache) AddDeletedCb(fn func(ctx context.Context, old *VMPoolInfo)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *VMPoolInfoCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *VMPoolInfoCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *VMPoolInfoCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *VMPoolInfoCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*VMPoolInfoKeyWatcher, 0)
	}
	watcher := VMPoolInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching VMPoolInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *VMPoolInfoCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*VMPoolInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *VMPoolInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := VMPoolInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse VMPoolInfo data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *VMPoolInfoCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := VMPoolInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *VMPoolInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *VMPoolInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*VMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *VMPoolInfoCache) UsesOrg(org string) bool {
	return false
}

func (m *VMPoolInfo) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *VMPoolInfo) GetKey() *CloudletKey {
	return &m.Key
}

func (m *VMPoolInfo) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *VMPoolInfo) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortVMPoolInfo(a VMPoolInfo, b VMPoolInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *VMPoolInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletVMAction_name[int32(m.Action)]; !ok {
		return errors.New("invalid Action")
	}
	for _, e := range m.VmSpecs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletVms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreVMPoolInfoFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVms.UpdatedAt")
	}
	return cmpopts.IgnoreFields(VMPoolInfo{}, names...)
}

var CloudletVMStateStrings = []string{
	"CLOUDLET_VM_FREE",
	"CLOUDLET_VM_IN_USE",
	"CLOUDLET_VM_ERROR",
}

const (
	CloudletVMStateCLOUDLET_VM_FREE   uint64 = 1 << 0
	CloudletVMStateCLOUDLET_VM_IN_USE uint64 = 1 << 1
	CloudletVMStateCLOUDLET_VM_ERROR  uint64 = 1 << 2
)

var CloudletVMState_CamelName = map[int32]string{
	// CLOUDLET_VM_FREE -> CloudletVmFree
	0: "CloudletVmFree",
	// CLOUDLET_VM_IN_USE -> CloudletVmInUse
	1: "CloudletVmInUse",
	// CLOUDLET_VM_ERROR -> CloudletVmError
	2: "CloudletVmError",
}
var CloudletVMState_CamelValue = map[string]int32{
	"CloudletVmFree":  0,
	"CloudletVmInUse": 1,
	"CloudletVmError": 2,
}

func (e *CloudletVMState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletVMState_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletVMState_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletVMState(val)
	return nil
}

func (e CloudletVMState) MarshalYAML() (interface{}, error) {
	return proto.EnumName(CloudletVMState_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *CloudletVMState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := CloudletVMState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletVMState_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = CloudletVMState(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = CloudletVMState(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var CloudletVMActionStrings = []string{
	"CLOUDLET_VM_ACTION_DONE",
	"CLOUDLET_VM_ACTION_ALLOCATE",
	"CLOUDLET_VM_ACTION_RELEASE",
}

const (
	CloudletVMActionCLOUDLET_VM_ACTION_DONE     uint64 = 1 << 0
	CloudletVMActionCLOUDLET_VM_ACTION_ALLOCATE uint64 = 1 << 1
	CloudletVMActionCLOUDLET_VM_ACTION_RELEASE  uint64 = 1 << 2
)

var CloudletVMAction_CamelName = map[int32]string{
	// CLOUDLET_VM_ACTION_DONE -> CloudletVmActionDone
	0: "CloudletVmActionDone",
	// CLOUDLET_VM_ACTION_ALLOCATE -> CloudletVmActionAllocate
	1: "CloudletVmActionAllocate",
	// CLOUDLET_VM_ACTION_RELEASE -> CloudletVmActionRelease
	2: "CloudletVmActionRelease",
}
var CloudletVMAction_CamelValue = map[string]int32{
	"CloudletVmActionDone":     0,
	"CloudletVmActionAllocate": 1,
	"CloudletVmActionRelease":  2,
}

func (e *CloudletVMAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletVMAction_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletVMAction_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletVMAction(val)
	return nil
}

func (e CloudletVMAction) MarshalYAML() (interface{}, error) {
	return proto.EnumName(CloudletVMAction_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *CloudletVMAction) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := CloudletVMAction_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletVMAction_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = CloudletVMAction(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = CloudletVMAction(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *CloudletVMNetInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *CloudletVM) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	l = m.NetInfo.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovVmpool(uint64(m.State))
	}
	l = m.UpdatedAt.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *VMPool) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if len(m.CloudletVms) > 0 {
		for _, e := range m.CloudletVms {
			l = e.Size()
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	if m.Action != 0 {
		n += 1 + sovVmpool(uint64(m.Action))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func (m *VMPoolMember) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	l = m.CloudletVm.Size()
	n += 1 + l + sovVmpool(uint64(l))
	return n
}

func (m *CloudletVMSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if m.ExternalNetwork {
		n += 2
	}
	if m.InternalNetwork {
		n += 2
	}
	return n
}

func (m *VMPoolInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovVmpool(uint64(l))
	if m.Action != 0 {
		n += 1 + sovVmpool(uint64(m.Action))
	}
	if m.NotifyId != 0 {
		n += 1 + sovVmpool(uint64(m.NotifyId))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	if len(m.VmSpecs) > 0 {
		for _, e := range m.VmSpecs {
			l = e.Size()
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	if len(m.CloudletVms) > 0 {
		for _, e := range m.CloudletVms {
			l = e.Size()
			n += 1 + l + sovVmpool(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVmpool(uint64(l))
	}
	return n
}

func sovVmpool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVmpool(x uint64) (n int) {
	return sovVmpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletVMNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CloudletVMState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletVms = append(m.CloudletVms, CloudletVM{})
			if err := m.CloudletVms[len(m.CloudletVms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (CloudletVMAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletVm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVMSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalNetwork = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalNetwork = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (CloudletVMAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmSpecs = append(m.VmSpecs, CloudletVMSpec{})
			if err := m.VmSpecs[len(m.VmSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletVms = append(m.CloudletVms, CloudletVM{})
			if err := m.CloudletVms[len(m.CloudletVms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVmpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVmpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVmpool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVmpool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVmpool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVmpool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVmpool   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vmpool.proto", fileDescriptorVmpool) }

var fileDescriptorVmpool = []byte{
	// 1212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6b, 0xe3, 0xc6,
	0x17, 0xcf, 0xd8, 0x89, 0x37, 0x7e, 0x71, 0x12, 0x67, 0xbe, 0x71, 0x56, 0xeb, 0x2c, 0x49, 0xd0,
	0xc2, 0x97, 0x34, 0xc4, 0xd6, 0x92, 0xbd, 0x94, 0xd0, 0x14, 0x6c, 0xc7, 0xa5, 0x66, 0x1d, 0x7b,
	0x91, 0x13, 0xd3, 0x4b, 0x71, 0x65, 0x69, 0xe2, 0x88, 0x58, 0x1a, 0x21, 0xc9, 0xc9, 0xa6, 0x87,
	0x52, 0xf6, 0x56, 0xda, 0x43, 0x69, 0xa1, 0x94, 0xd2, 0x43, 0xdb, 0xbd, 0x94, 0xd2, 0xd3, 0xfe,
	0x15, 0x39, 0x16, 0x7a, 0xea, 0xa5, 0x6c, 0x43, 0x0f, 0x65, 0xe9, 0xa1, 0xb0, 0xce, 0x5e, 0x5b,
	0x34, 0x23, 0xd9, 0x5a, 0xdb, 0xfb, 0x23, 0x21, 0x17, 0x31, 0xf3, 0x99, 0x37, 0xef, 0x7d, 0xe6,
	0xf3, 0xe6, 0xbd, 0x11, 0x24, 0x8e, 0x0c, 0x8b, 0xd2, 0x76, 0xd6, 0xb2, 0xa9, 0x4b, 0x71, 0x9c,
	0x68, 0x2d, 0xc2, 0x86, 0xe9, 0x9b, 0x2d, 0x4a, 0x5b, 0x6d, 0x22, 0x29, 0x96, 0x2e, 0x29, 0xa6,
	0x49, 0x5d, 0xc5, 0xd5, 0xa9, 0xe9, 0x70, 0xc3, 0xf4, 0x9b, 0x2d, 0xdd, 0x3d, 0xe8, 0x34, 0xb3,
	0x2a, 0x35, 0x24, 0x83, 0x36, 0xf5, 0xb6, 0xb7, 0xf1, 0xbe, 0xe4, 0x7d, 0x33, 0x6a, 0x9b, 0x76,
	0x34, 0x89, 0xd9, 0xb5, 0x88, 0xd9, 0x1b, 0xf8, 0x3b, 0x13, 0x36, 0x71, 0x3a, 0x6d, 0xd7, 0x9f,
	0xcd, 0x30, 0xe3, 0x36, 0x09, 0xe6, 0x85, 0x57, 0xfa, 0xd5, 0x32, 0x86, 0xe2, 0xaa, 0x07, 0x19,
	0x62, 0xb6, 0x74, 0x93, 0x48, 0x9a, 0x41, 0x32, 0x6c, 0xab, 0xd4, 0xa6, 0xaa, 0xef, 0x64, 0xbe,
	0x45, 0x5b, 0x94, 0x83, 0xde, 0xc8, 0x47, 0x97, 0xfd, 0x03, 0xb1, 0x59, 0xb3, 0xb3, 0x2f, 0xb9,
	0xba, 0x41, 0x1c, 0x57, 0x31, 0x2c, 0x6e, 0x20, 0xee, 0xc1, 0x5c, 0xc1, 0x67, 0x53, 0xdf, 0xa9,
	0x10, 0xb7, 0x64, 0xee, 0x53, 0xbc, 0x0c, 0x53, 0xe4, 0xbe, 0x4b, 0x6c, 0x53, 0x69, 0x37, 0x74,
	0x4b, 0x40, 0x2b, 0x68, 0x35, 0x2e, 0x43, 0x00, 0x95, 0x2c, 0xcf, 0x40, 0x37, 0xfb, 0x06, 0x11,
	0x6e, 0x10, 0x40, 0x25, 0x4b, 0xfc, 0x36, 0x02, 0xd0, 0xf7, 0x8b, 0x31, 0x8c, 0x9b, 0x8a, 0x41,
	0x7c, 0x4f, 0x6c, 0x8c, 0xb7, 0x60, 0xd2, 0x24, 0x6e, 0x43, 0x37, 0xf7, 0x29, 0x73, 0x30, 0xb5,
	0x71, 0x33, 0xdb, 0xcb, 0x44, 0x76, 0x88, 0x54, 0x7e, 0xfc, 0xf4, 0xf7, 0xe5, 0x31, 0xf9, 0x9a,
	0xe9, 0x73, 0xc4, 0x30, 0xde, 0x71, 0x88, 0x2d, 0x44, 0xb9, 0x4b, 0x6f, 0x8c, 0x6f, 0xc3, 0x84,
	0xe3, 0x2a, 0x2e, 0x11, 0xc6, 0x57, 0xd0, 0xea, 0xcc, 0x46, 0x7a, 0xa4, 0xbf, 0x9a, 0x67, 0x21,
	0x73, 0x43, 0x7c, 0x0f, 0xa0, 0x63, 0x69, 0x8a, 0x4b, 0xb4, 0x86, 0xe2, 0x0a, 0x13, 0x8c, 0x46,
	0x3a, 0xcb, 0x45, 0xcb, 0x06, 0xa2, 0x65, 0x77, 0x03, 0xd1, 0xf2, 0xa9, 0x1f, 0xbb, 0x02, 0xfa,
	0xe2, 0xd1, 0x8d, 0x78, 0x4f, 0x47, 0xc6, 0x2a, 0xee, 0x3b, 0xc9, 0xb9, 0xf8, 0x16, 0x4c, 0xf7,
	0xa4, 0x61, 0x67, 0x8e, 0x31, 0x82, 0x89, 0x00, 0xac, 0x28, 0x06, 0x11, 0x7f, 0x8b, 0x42, 0xac,
	0xbe, 0x73, 0x8f, 0xd2, 0x36, 0x5e, 0x80, 0xd8, 0xbe, 0x4e, 0xda, 0x9a, 0x23, 0xa0, 0x95, 0xe8,
	0x6a, 0x5c, 0xf6, 0x67, 0x38, 0x0b, 0xd1, 0x43, 0x72, 0xe2, 0x2b, 0xb3, 0x30, 0xe2, 0x24, 0x77,
	0xc9, 0x89, 0xaf, 0x89, 0x67, 0x88, 0xdf, 0x86, 0x44, 0x70, 0xad, 0x1a, 0x47, 0x86, 0x23, 0x44,
	0x57, 0xa2, 0xab, 0x53, 0x1b, 0xa9, 0x91, 0x12, 0xf8, 0xfb, 0xa6, 0x82, 0x0d, 0x75, 0xc3, 0xc1,
	0x79, 0x88, 0x29, 0xaa, 0x77, 0xdb, 0x7d, 0xf1, 0x16, 0x47, 0xee, 0xcc, 0x31, 0x93, 0xfc, 0xb4,
	0x2f, 0xc3, 0x84, 0x49, 0x55, 0xc3, 0x92, 0xfd, 0x9d, 0x78, 0x1e, 0x26, 0x88, 0x6d, 0x53, 0x9b,
	0x09, 0x19, 0x97, 0xf9, 0x64, 0xf3, 0x6f, 0xf4, 0xd7, 0x53, 0x01, 0xfd, 0xf3, 0x54, 0x40, 0x1f,
	0x77, 0x05, 0xf4, 0x79, 0x57, 0x40, 0x5f, 0x7b, 0xbb, 0xcf, 0x85, 0xcf, 0x50, 0xa1, 0x4f, 0x60,
	0xf3, 0x56, 0x76, 0xcf, 0x21, 0xf6, 0xfa, 0xf3, 0x50, 0x29, 0xa4, 0xda, 0xc0, 0x12, 0xcb, 0xe3,
	0x00, 0xb6, 0x17, 0xa4, 0x21, 0x5b, 0x23, 0x2a, 0x35, 0x35, 0xe7, 0x85, 0xeb, 0x15, 0xc5, 0xa4,
	0xce, 0x3a, 0x3f, 0xce, 0x7a, 0xd1, 0xe3, 0xf9, 0xcd, 0xb9, 0x20, 0x05, 0x82, 0x6c, 0xdd, 0x25,
	0x27, 0x59, 0x16, 0x33, 0x40, 0x32, 0xd4, 0x6e, 0x31, 0xb4, 0x6a, 0xb7, 0x14, 0x53, 0xff, 0x90,
	0x35, 0x86, 0x47, 0xcf, 0x84, 0xe4, 0x21, 0x39, 0xd9, 0x0a, 0x63, 0xe2, 0x0f, 0x11, 0x48, 0xf0,
	0xdc, 0xee, 0x10, 0xa3, 0x49, 0xec, 0x20, 0x93, 0xe8, 0x75, 0x33, 0xf9, 0x16, 0x4c, 0x85, 0x32,
	0xe9, 0xdf, 0x80, 0x97, 0x26, 0x12, 0xfa, 0x89, 0xdc, 0x7c, 0xe8, 0x29, 0xfb, 0x5e, 0xff, 0xd8,
	0x83, 0xaa, 0x0e, 0xe9, 0xf6, 0x52, 0xd1, 0x06, 0x15, 0xbb, 0x2a, 0x91, 0x3e, 0x45, 0x30, 0x13,
	0x2a, 0x49, 0x8b, 0xa8, 0xc3, 0x85, 0x83, 0x86, 0x0b, 0x07, 0xbf, 0x01, 0xc9, 0x5e, 0x67, 0x32,
	0x89, 0x7b, 0x4c, 0xed, 0x43, 0x26, 0xd0, 0xa4, 0x3c, 0x1b, 0xe0, 0x15, 0x0e, 0x7b, 0xa6, 0x7d,
	0x7f, 0xbe, 0x69, 0x94, 0x9b, 0xf6, 0x5c, 0x72, 0x58, 0xfc, 0x39, 0x0a, 0xc0, 0x53, 0xc6, 0x5a,
	0xcb, 0x55, 0x95, 0xe4, 0x9d, 0x5e, 0x49, 0x45, 0x5f, 0x59, 0x52, 0xbd, 0x1a, 0xfa, 0x3f, 0xc4,
	0x4d, 0xea, 0xea, 0xfb, 0x27, 0x0d, 0x5d, 0x63, 0xa5, 0x18, 0xcd, 0xc7, 0xfb, 0x95, 0x36, 0xc9,
	0xd7, 0x4a, 0x5a, 0xaf, 0xff, 0x4d, 0x84, 0xfa, 0xdf, 0x26, 0x4c, 0x1e, 0x19, 0x0d, 0xc7, 0x22,
	0xaa, 0x23, 0xc4, 0x58, 0xfd, 0xdf, 0x18, 0xdd, 0x02, 0x2d, 0xa2, 0x06, 0xfd, 0xf4, 0xc8, 0xf0,
	0x66, 0xce, 0x50, 0xff, 0xb8, 0x76, 0xc1, 0xfe, 0xd1, 0xab, 0xfd, 0xc9, 0x70, 0xed, 0xd7, 0x06,
	0x4b, 0xff, 0xbb, 0xae, 0x80, 0x1e, 0x77, 0x05, 0x74, 0xb9, 0x8b, 0x34, 0x6e, 0x52, 0x93, 0xac,
	0xd5, 0x61, 0x76, 0xa0, 0x9d, 0xe3, 0x79, 0x48, 0x16, 0xca, 0xd5, 0xbd, 0xed, 0x72, 0x71, 0xb7,
	0x51, 0xdf, 0x69, 0xbc, 0x23, 0x17, 0x8b, 0xc9, 0x31, 0xbc, 0x00, 0x38, 0x8c, 0x96, 0x2a, 0x8d,
	0xbd, 0x5a, 0x31, 0x89, 0x70, 0x0a, 0xe6, 0xc2, 0x78, 0x51, 0x96, 0xab, 0x72, 0x32, 0xb2, 0x66,
	0x41, 0x72, 0x30, 0x2d, 0x78, 0x11, 0xae, 0x87, 0x4d, 0x73, 0x85, 0xdd, 0x52, 0xb5, 0xd2, 0xd8,
	0xae, 0x56, 0x3c, 0xff, 0xcb, 0xb0, 0x38, 0x62, 0x31, 0x57, 0x2e, 0x57, 0x0b, 0xb9, 0x5d, 0x2f,
	0xd0, 0x12, 0xa4, 0x47, 0x18, 0xc8, 0xc5, 0x72, 0x31, 0x57, 0x2b, 0x26, 0x23, 0x1b, 0xff, 0xc6,
	0x20, 0xce, 0x2f, 0x5e, 0xce, 0xd2, 0xf1, 0x57, 0x08, 0x12, 0x05, 0x9b, 0x28, 0x2e, 0xf1, 0xdf,
	0x86, 0xb9, 0x90, 0xfa, 0x1c, 0x4a, 0x87, 0x21, 0x99, 0xfd, 0x54, 0x88, 0x1f, 0x3c, 0xe9, 0x0a,
	0x92, 0x4c, 0x1c, 0xda, 0xb1, 0x55, 0x12, 0x1c, 0x20, 0xe8, 0x6d, 0x3b, 0x8a, 0xa9, 0xb4, 0xc8,
	0xfa, 0xa0, 0x96, 0x3f, 0x3d, 0x13, 0x92, 0x83, 0xd8, 0x83, 0x5f, 0xff, 0xfc, 0x32, 0xf2, 0x3f,
	0x71, 0x46, 0x52, 0x19, 0x07, 0x89, 0xff, 0x24, 0x6d, 0xa2, 0x35, 0xfc, 0x09, 0x82, 0xc4, 0x36,
	0x69, 0x93, 0x0b, 0x12, 0xab, 0x5d, 0x82, 0x18, 0x23, 0x91, 0x16, 0x53, 0x92, 0xc6, 0xe2, 0xf1,
	0x3b, 0x42, 0xdc, 0x3e, 0x97, 0x07, 0x08, 0x12, 0xbc, 0x29, 0x5d, 0x88, 0x4b, 0xf9, 0xb2, 0x5c,
	0x3c, 0x41, 0xf8, 0xeb, 0x1e, 0x12, 0xe4, 0x23, 0x80, 0xda, 0x01, 0x3d, 0x7e, 0x3d, 0x06, 0x1c,
	0x12, 0xdf, 0x7d, 0xd2, 0x15, 0x32, 0x2f, 0x62, 0x50, 0xd7, 0xc9, 0xf1, 0xe8, 0xf8, 0x73, 0x62,
	0x42, 0x72, 0x0e, 0xe8, 0x71, 0x3f, 0xfa, 0x6d, 0x84, 0xbf, 0x47, 0x30, 0x9b, 0xd3, 0xb4, 0xe7,
	0x9e, 0x99, 0xeb, 0x43, 0x21, 0xf9, 0xc2, 0x28, 0x35, 0x9a, 0x97, 0x50, 0xe3, 0xec, 0x5c, 0x98,
	0x0d, 0x3d, 0x0c, 0x5e, 0xbd, 0x32, 0x82, 0x0b, 0xe2, 0x9c, 0xa4, 0x68, 0x9a, 0xcf, 0xcf, 0x60,
	0x31, 0x3d, 0x8d, 0x1e, 0x22, 0xc0, 0x32, 0x31, 0xe8, 0x11, 0xb9, 0x34, 0x4d, 0xe5, 0x0a, 0x69,
	0xa6, 0xc4, 0xa4, 0x64, 0x1b, 0x83, 0x2c, 0x37, 0x4c, 0x98, 0xee, 0x77, 0x7e, 0xaf, 0x08, 0xdf,
	0x87, 0x99, 0x7e, 0x6a, 0xd9, 0x73, 0x90, 0x1a, 0x62, 0xec, 0xc1, 0xe9, 0xd1, 0xb0, 0xb8, 0xd8,
	0x8b, 0x16, 0xca, 0x9a, 0xf7, 0x93, 0xcb, 0x32, 0x97, 0x4f, 0x9e, 0xfe, 0xb1, 0x34, 0x76, 0x7a,
	0xb6, 0x84, 0x7e, 0x39, 0x5b, 0x42, 0x8f, 0xcf, 0x96, 0x50, 0x33, 0xc6, 0x5c, 0xdc, 0xf9, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xbe, 0x7d, 0x3e, 0x95, 0x0c, 0x00, 0x00,
}
