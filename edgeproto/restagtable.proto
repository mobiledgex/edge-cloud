// Resource tags table  proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "result.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Optional Resource Names
//
// OptResNames indicates optional resource names
//
// 0: `GPU`
// 1: `NAS`
// 2: `NIC`
enum OptResNames {
  GPU = 0;
  NAS = 1;
  NIC = 2;
}
message ResTagTableKey {
  // Resource Table Name
  string name = 1 [(protogen.keytag) = "restagtable"];
  // Operator organization of the cloudlet site.
  string organization = 2 [(protogen.keytag) = "restagtableorg"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

message ResTagTable {
  repeated string fields = 1;
  // Resource tags table key
  ResTagTableKey key = 2 [(gogoproto.nullable) = false];
  // One or more string tags
  map<string, string> tags = 3;
  // Availability zone(s) of resource if required
  string azone = 4;
  // Preparing to be deleted
  bool delete_prepare = 5 [(protogen.backend) = true]; 
  option (gogoproto.gostring) = true;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_message) = true;
  option (protogen.alias) = "res=Key.Name,organization=Key.Organization";
  option (protogen.also_required) = "Tags";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.noconfig) = "DeletePrepare";
}

// This API should be admin-only
service ResTagTableApi {
  option (protogen.dummy_server) = false;
  // Create TagTable
  rpc CreateResTagTable(ResTagTable) returns (Result) {
    option (google.api.http) = {
      post: "/create/gputagtbl"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceResTagTable,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete TagTable
  rpc DeleteResTagTable(ResTagTable) returns (Result) {
    option (google.api.http) = {
      post: "/delete/gputagtbl"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceResTagTable,ActionManage,Key.Organization";
  }
  // Update TagTable
  rpc UpdateResTagTable(ResTagTable) returns (Result) {
    option (google.api.http) = {
      post: "/update/gputagtbl"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceResTagTable,ActionManage,Key.Organization";
  }
  // Show TagTable
  rpc ShowResTagTable(ResTagTable) returns (stream ResTagTable) {
      option (google.api.http) = {
        post: "/show/gputagtbl"
        body: "*"
      };
      option(protogen.mc2_api) = "ResourceResTagTable,ActionView,Key.Organization";
  }
  // Add new tag(s) to TagTable
  rpc AddResTag(ResTagTable) returns (Result) {
      option(google.api.http) = {
        post: "/add/gputagtbl"
        body: "*"
      };
      option(protogen.mc2_api) = "ResourceResTagTable,ActionManage,Key.Organization";
      option(protogen.input_required) = true;
  }
  // Remove existing tag(s) from TagTable
  rpc RemoveResTag(ResTagTable) returns (Result) {
      option(google.api.http) = {
        post: "/rm/gputagtbl"
        body: "*"
      };
      option(protogen.mc2_api) = "ResourceResTagTable,ActionManage,Key.Organization";
      option (protogen.input_required) = true;
  }
  // Fetch a copy of the TagTable
  rpc GetResTagTable(ResTagTableKey) returns (ResTagTable) {
    option (google.api.http) = {
      post: "/get/gputagtbl"
      body: "*"
    };
    option(protogen.mc2_api) = "ResourceResTagTable,ActionManage,";
    option (protogen.input_required) = true;
  }
}
