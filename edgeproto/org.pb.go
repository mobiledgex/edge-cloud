// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: org.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Organization struct {
	// Organization name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Organization) Reset()                    { *m = Organization{} }
func (m *Organization) String() string            { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()               {}
func (*Organization) Descriptor() ([]byte, []int) { return fileDescriptorOrg, []int{0} }

type OrganizationData struct {
	Orgs []Organization `protobuf:"bytes,1,rep,name=orgs" json:"orgs"`
}

func (m *OrganizationData) Reset()                    { *m = OrganizationData{} }
func (m *OrganizationData) String() string            { return proto.CompactTextString(m) }
func (*OrganizationData) ProtoMessage()               {}
func (*OrganizationData) Descriptor() ([]byte, []int) { return fileDescriptorOrg, []int{1} }

func init() {
	proto.RegisterType((*Organization)(nil), "edgeproto.Organization")
	proto.RegisterType((*OrganizationData)(nil), "edgeproto.OrganizationData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrganizationApi service

type OrganizationApiClient interface {
	// Check if an Organization is in use.
	OrganizationInUse(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Result, error)
}

type organizationApiClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationApiClient(cc *grpc.ClientConn) OrganizationApiClient {
	return &organizationApiClient{cc}
}

func (c *organizationApiClient) OrganizationInUse(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OrganizationApi/OrganizationInUse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganizationApi service

type OrganizationApiServer interface {
	// Check if an Organization is in use.
	OrganizationInUse(context.Context, *Organization) (*Result, error)
}

func RegisterOrganizationApiServer(s *grpc.Server, srv OrganizationApiServer) {
	s.RegisterService(&_OrganizationApi_serviceDesc, srv)
}

func _OrganizationApi_OrganizationInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationApiServer).OrganizationInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OrganizationApi/OrganizationInUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationApiServer).OrganizationInUse(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.OrganizationApi",
	HandlerType: (*OrganizationApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrganizationInUse",
			Handler:    _OrganizationApi_OrganizationInUse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org.proto",
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *OrganizationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orgs) > 0 {
		for _, msg := range m.Orgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOrg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Organization) CopyInFields(src *Organization) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *Organization) DeepCopyIn(src *Organization) {
	m.Name = src.Name
}

// Helper method to check that enums have valid values
func (m *Organization) ValidateEnums() error {
	return nil
}

func (m *OrganizationData) DeepCopyIn(src *OrganizationData) {
	if src.Orgs != nil {
		m.Orgs = make([]Organization, len(src.Orgs), len(src.Orgs))
		for ii, s := range src.Orgs {
			m.Orgs[ii].DeepCopyIn(&s)
		}
	} else {
		m.Orgs = nil
	}
}

// Helper method to check that enums have valid values
func (m *OrganizationData) ValidateEnums() error {
	for _, e := range m.Orgs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *Organization) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	return n
}

func (m *OrganizationData) Size() (n int) {
	var l int
	_ = l
	if len(m.Orgs) > 0 {
		for _, e := range m.Orgs {
			l = e.Size()
			n += 1 + l + sovOrg(uint64(l))
		}
	}
	return n
}

func sovOrg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrg(x uint64) (n int) {
	return sovOrg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orgs = append(m.Orgs, Organization{})
			if err := m.Orgs[len(m.Orgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("org.proto", fileDescriptorOrg) }

var fileDescriptorOrg = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x17, 0x2d, 0x62, 0xe3, 0xc0, 0x2d, 0x0a, 0x96, 0x22, 0x75, 0xf4, 0x34, 0x04, 0x1b,
	0x9c, 0x17, 0xd9, 0xcd, 0xe1, 0xc5, 0xd3, 0xa0, 0xe0, 0x59, 0xd2, 0x2d, 0xc4, 0x40, 0x9b, 0x7f,
	0x49, 0x53, 0x10, 0x8f, 0xbe, 0x82, 0x17, 0x8f, 0x3e, 0x4e, 0x8f, 0x82, 0x77, 0xd1, 0xe2, 0x33,
	0xec, 0x2c, 0xcd, 0xc6, 0xc8, 0xc5, 0x4b, 0xf8, 0xf1, 0x7d, 0xbf, 0x2f, 0x90, 0x60, 0x1f, 0xb4,
	0x48, 0x4a, 0x0d, 0x06, 0x88, 0xcf, 0x97, 0x82, 0x5b, 0x0c, 0xfb, 0x9a, 0x57, 0x75, 0x6e, 0xd6,
	0x45, 0x78, 0x2d, 0xa4, 0x79, 0xac, 0xb3, 0x64, 0x01, 0x05, 0x2d, 0x20, 0x93, 0x79, 0x27, 0x3e,
	0xd1, 0xee, 0xbc, 0x58, 0xe4, 0x50, 0x2f, 0xa9, 0xf5, 0x04, 0x57, 0x5b, 0xd8, 0x2c, 0x4f, 0x05,
	0x80, 0xc8, 0x39, 0x65, 0xa5, 0xa4, 0x4c, 0x29, 0x30, 0xcc, 0x48, 0x50, 0xd5, 0xa6, 0x3d, 0x16,
	0x20, 0xc0, 0x22, 0xed, 0x68, 0x9d, 0xc6, 0x31, 0xee, 0xcf, 0xb5, 0x60, 0x4a, 0x3e, 0x5b, 0x99,
	0x10, 0xec, 0x29, 0x56, 0xf0, 0x00, 0x8d, 0xd0, 0xd8, 0x4f, 0x2d, 0xc7, 0x73, 0x3c, 0x70, 0x9d,
	0x5b, 0x66, 0x18, 0xb9, 0xc4, 0x1e, 0x68, 0x51, 0x05, 0x68, 0xb4, 0x3b, 0x3e, 0x98, 0x9c, 0x24,
	0xdb, 0xd7, 0x24, 0xae, 0x3a, 0xf3, 0x9a, 0xaf, 0xb3, 0x5e, 0x6a, 0xd5, 0xe9, 0xfe, 0xdb, 0x2a,
	0x40, 0xef, 0xab, 0xa0, 0x37, 0xd1, 0xf8, 0xd0, 0xb5, 0x6e, 0x4a, 0x49, 0x1e, 0xf0, 0xd0, 0x8d,
	0xee, 0xd4, 0x7d, 0xc5, 0xc9, 0x7f, 0xd7, 0x86, 0x43, 0xa7, 0x48, 0xed, 0xe7, 0xc5, 0xd1, 0xcb,
	0xe7, 0xef, 0xeb, 0x4e, 0x10, 0x1f, 0x51, 0xa9, 0xea, 0x8a, 0x53, 0x70, 0xfc, 0x29, 0x3a, 0x9f,
	0x0d, 0x9a, 0x9f, 0xa8, 0xd7, 0xb4, 0x11, 0xfa, 0x68, 0x23, 0xf4, 0xdd, 0x46, 0x28, 0xdb, 0xb3,
	0xfb, 0xab, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0xa6, 0xd4, 0xbb, 0x95, 0x01, 0x00, 0x00,
}
