// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infraresources.proto

package edgeproto

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VmInfo
//
// VmInfo is infomation about VM resources.
type VmInfo struct {
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipaddresses []string `protobuf:"bytes,2,rep,name=ipaddresses,proto3" json:"ipaddresses,omitempty"`
}

func (m *VmInfo) Reset()         { *m = VmInfo{} }
func (m *VmInfo) String() string { return proto.CompactTextString(m) }
func (*VmInfo) ProtoMessage()    {}
func (*VmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{0}
}
func (m *VmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmInfo.Merge(m, src)
}
func (m *VmInfo) XXX_Size() int {
	return m.Size()
}
func (m *VmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VmInfo proto.InternalMessageInfo

// InfraResources
//
// InfraResources is infomation about infrastructure resources.
type InfraResources struct {
	Vms []VmInfo `protobuf:"bytes,3,rep,name=vms,proto3" json:"vms"`
}

func (m *InfraResources) Reset()         { *m = InfraResources{} }
func (m *InfraResources) String() string { return proto.CompactTextString(m) }
func (*InfraResources) ProtoMessage()    {}
func (*InfraResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{1}
}
func (m *InfraResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraResources.Merge(m, src)
}
func (m *InfraResources) XXX_Size() int {
	return m.Size()
}
func (m *InfraResources) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraResources.DiscardUnknown(m)
}

var xxx_messageInfo_InfraResources proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VmInfo)(nil), "edgeproto.VmInfo")
	proto.RegisterType((*InfraResources)(nil), "edgeproto.InfraResources")
}

func init() { proto.RegisterFile("infraresources.proto", fileDescriptor_1d4658e0b2956cb2) }

var fileDescriptor_1d4658e0b2956cb2 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xbd, 0x6a, 0xf3, 0x30,
	0x18, 0x85, 0xed, 0xcf, 0x21, 0x60, 0xe5, 0xa3, 0x50, 0x91, 0xc1, 0x84, 0xa0, 0x9a, 0x4c, 0xee,
	0x50, 0x0b, 0xda, 0xa5, 0x50, 0xe8, 0x90, 0x2d, 0xab, 0x87, 0xee, 0xb2, 0xad, 0xa8, 0x02, 0x4b,
	0xaf, 0x91, 0xec, 0xd2, 0xcb, 0xe8, 0x65, 0x79, 0xcc, 0xd8, 0xa9, 0xb4, 0xf6, 0x8d, 0x14, 0x29,
	0x3f, 0x74, 0x11, 0x8f, 0x0e, 0xe7, 0xf0, 0xf2, 0xa0, 0xa5, 0xd4, 0x7b, 0xc3, 0x0c, 0xb7, 0xd0,
	0x9b, 0x8a, 0xdb, 0xbc, 0x35, 0xd0, 0x01, 0x8e, 0x79, 0x2d, 0xb8, 0xc7, 0xd5, 0x5a, 0x00, 0x88,
	0x86, 0x53, 0xd6, 0x4a, 0xca, 0xb4, 0x86, 0x8e, 0x75, 0x12, 0xf4, 0xa9, 0xb8, 0x7a, 0x14, 0xb2,
	0x7b, 0xed, 0xcb, 0xbc, 0x02, 0x45, 0x15, 0x94, 0xb2, 0x71, 0xc3, 0x77, 0xea, 0xde, 0xbb, 0xaa,
	0x81, 0xbe, 0xa6, 0xbe, 0x27, 0xb8, 0xbe, 0xc0, 0x69, 0xf9, 0xbf, 0x02, 0xa5, 0xe0, 0xfc, 0x5b,
	0x0a, 0x10, 0xe0, 0x91, 0x3a, 0x3a, 0xa6, 0x9b, 0x67, 0x34, 0x7f, 0x51, 0x3b, 0xbd, 0x07, 0x8c,
	0xd1, 0x4c, 0x33, 0xc5, 0x93, 0x30, 0x0d, 0xb3, 0xb8, 0xf0, 0x8c, 0x53, 0xb4, 0x90, 0x2d, 0xab,
	0x6b, 0xc3, 0xad, 0xe5, 0x36, 0xf9, 0x97, 0x46, 0x59, 0x5c, 0xfc, 0x8d, 0x36, 0x4f, 0xe8, 0x6a,
	0xe7, 0xf4, 0x8a, 0xb3, 0x1e, 0xbe, 0x45, 0xd1, 0x9b, 0xb2, 0x49, 0x94, 0x46, 0xd9, 0xe2, 0xfe,
	0x3a, 0xbf, 0x68, 0xe6, 0xc7, 0x3b, 0xdb, 0xd9, 0xf0, 0x75, 0x13, 0x14, 0xae, 0xb3, 0x5d, 0x0f,
	0x3f, 0x24, 0x18, 0x46, 0x12, 0x1e, 0x46, 0x12, 0x7e, 0x8f, 0x24, 0xfc, 0x98, 0x48, 0x70, 0x98,
	0x48, 0xf0, 0x39, 0x91, 0xa0, 0x9c, 0xfb, 0xd9, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89,
	0x91, 0xf2, 0xc0, 0x40, 0x01, 0x00, 0x00,
}

func (m *VmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ipaddresses) > 0 {
		for iNdEx := len(m.Ipaddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipaddresses[iNdEx])
			copy(dAtA[i:], m.Ipaddresses[iNdEx])
			i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Ipaddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfraResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for iNdEx := len(m.Vms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfraresources(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfraresources(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VmInfo) CopyInFields(src *VmInfo) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if src.Ipaddresses != nil {
		m.Ipaddresses = src.Ipaddresses
		changed++
	} else if m.Ipaddresses != nil {
		m.Ipaddresses = nil
		changed++
	}
	return changed
}

func (m *VmInfo) DeepCopyIn(src *VmInfo) {
	m.Name = src.Name
	if src.Ipaddresses != nil {
		m.Ipaddresses = make([]string, len(src.Ipaddresses), len(src.Ipaddresses))
		for ii, s := range src.Ipaddresses {
			m.Ipaddresses[ii] = s
		}
	} else {
		m.Ipaddresses = nil
	}
}

// Helper method to check that enums have valid values
func (m *VmInfo) ValidateEnums() error {
	return nil
}

func (m *InfraResources) CopyInFields(src *InfraResources) int {
	changed := 0
	if src.Vms != nil {
		m.Vms = src.Vms
		changed++
	} else if m.Vms != nil {
		m.Vms = nil
		changed++
	}
	return changed
}

func (m *InfraResources) DeepCopyIn(src *InfraResources) {
	if src.Vms != nil {
		m.Vms = make([]VmInfo, len(src.Vms), len(src.Vms))
		for ii, s := range src.Vms {
			m.Vms[ii].DeepCopyIn(&s)
		}
	} else {
		m.Vms = nil
	}
}

// Helper method to check that enums have valid values
func (m *InfraResources) ValidateEnums() error {
	for _, e := range m.Vms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *VmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	if len(m.Ipaddresses) > 0 {
		for _, s := range m.Ipaddresses {
			l = len(s)
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	return n
}

func (m *InfraResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	return n
}

func sovInfraresources(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfraresources(x uint64) (n int) {
	return sovInfraresources(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipaddresses = append(m.Ipaddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, VmInfo{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfraresources(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfraresources
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfraresources
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfraresources
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfraresources        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfraresources          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfraresources = fmt.Errorf("proto: unexpected end of group")
)
