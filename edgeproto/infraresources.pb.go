// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infraresources.proto

package edgeproto

import (
	"encoding/json"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContainerInfo
//
// ContainerInfo is infomation about containers running on a VM,
type ContainerInfo struct {
	// Name of the container
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type can be docker or kubernetes
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Runtime status of the container
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// IP within the CNI and is applicable to kubernetes only
	Clusterip string `protobuf:"bytes,4,opt,name=clusterip,proto3" json:"clusterip,omitempty"`
	// Restart count, applicable to kubernetes only
	Restarts int64 `protobuf:"varint,5,opt,name=restarts,proto3" json:"restarts,omitempty"`
}

func (m *ContainerInfo) Reset()         { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()    {}
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{0}
}
func (m *ContainerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerInfo.Merge(m, src)
}
func (m *ContainerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContainerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerInfo proto.InternalMessageInfo

// IpAddr is an address for a VM which may have an external and
// internal component.  Internal and external is with respect to the VM
// and are are often the same unless a natted or floating IP is used.  If
// internalIP is not reported it is the same as the ExternalIP.
type IpAddr struct {
	ExternalIp string `protobuf:"bytes,1,opt,name=externalIp,proto3" json:"externalIp,omitempty"`
	InternalIp string `protobuf:"bytes,2,opt,name=internalIp,proto3" json:"internalIp,omitempty"`
}

func (m *IpAddr) Reset()         { *m = IpAddr{} }
func (m *IpAddr) String() string { return proto.CompactTextString(m) }
func (*IpAddr) ProtoMessage()    {}
func (*IpAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{1}
}
func (m *IpAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpAddr.Merge(m, src)
}
func (m *IpAddr) XXX_Size() int {
	return m.Size()
}
func (m *IpAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_IpAddr.DiscardUnknown(m)
}

var xxx_messageInfo_IpAddr proto.InternalMessageInfo

// VmInfo
//
// VmInfo is information about Virtual Machine resources.
type VmInfo struct {
	// Virtual machine name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type can be platform, rootlb, cluster-master, cluster-node, vmapp
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Runtime status of the VM
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Flavor allocated within the cloudlet infrastructure, distinct from the control plane flavor
	InfraFlavor string `protobuf:"bytes,4,opt,name=infraFlavor,proto3" json:"infraFlavor,omitempty"`
	// IP addresses allocated to the VM
	Ipaddresses []IpAddr `protobuf:"bytes,5,rep,name=ipaddresses,proto3" json:"ipaddresses"`
	// Information about containers running in the VM
	Containers []*ContainerInfo `protobuf:"bytes,6,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (m *VmInfo) Reset()         { *m = VmInfo{} }
func (m *VmInfo) String() string { return proto.CompactTextString(m) }
func (*VmInfo) ProtoMessage()    {}
func (*VmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{2}
}
func (m *VmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmInfo.Merge(m, src)
}
func (m *VmInfo) XXX_Size() int {
	return m.Size()
}
func (m *VmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VmInfo proto.InternalMessageInfo

// InfraResource
//
// InfraResource is information about cloudlet infra resource.
type InfraResource struct {
	// Resource name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource value
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Resource infra max value
	InfraMaxValue uint64 `protobuf:"varint,3,opt,name=infra_max_value,json=infraMaxValue,proto3" json:"infra_max_value,omitempty"`
	// Resource quota max value
	QuotaMaxValue uint64 `protobuf:"varint,4,opt,name=quota_max_value,json=quotaMaxValue,proto3" json:"quota_max_value,omitempty"`
	// Resource description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource units
	Units string `protobuf:"bytes,6,opt,name=units,proto3" json:"units,omitempty"`
	// Generate alert when more than threshold percentage of resource is used
	AlertThreshold int32 `protobuf:"varint,7,opt,name=alert_threshold,json=alertThreshold,proto3" json:"alert_threshold,omitempty"`
}

func (m *InfraResource) Reset()         { *m = InfraResource{} }
func (m *InfraResource) String() string { return proto.CompactTextString(m) }
func (*InfraResource) ProtoMessage()    {}
func (*InfraResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{3}
}
func (m *InfraResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraResource.Merge(m, src)
}
func (m *InfraResource) XXX_Size() int {
	return m.Size()
}
func (m *InfraResource) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraResource.DiscardUnknown(m)
}

var xxx_messageInfo_InfraResource proto.InternalMessageInfo

// ClusterInst Ref Key
//
// ClusterInstRefKey is cluster instance key without cloudlet key.
type ClusterInstRefKey struct {
	// Name of Cluster
	ClusterKey ClusterKey `protobuf:"bytes,1,opt,name=cluster_key,json=clusterKey,proto3" json:"cluster_key"`
	// Name of Developer organization that this cluster belongs to
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *ClusterInstRefKey) Reset()         { *m = ClusterInstRefKey{} }
func (m *ClusterInstRefKey) String() string { return proto.CompactTextString(m) }
func (*ClusterInstRefKey) ProtoMessage()    {}
func (*ClusterInstRefKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{4}
}
func (m *ClusterInstRefKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInstRefKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInstRefKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInstRefKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInstRefKey.Merge(m, src)
}
func (m *ClusterInstRefKey) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInstRefKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInstRefKey.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInstRefKey proto.InternalMessageInfo

// AppInst Ref Key
//
// AppInstRefKey is app instance key without cloudlet key.
type AppInstRefKey struct {
	// App key
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key"`
	// Cluster instance on which this is instantiated
	ClusterInstKey ClusterInstRefKey `protobuf:"bytes,2,opt,name=cluster_inst_key,json=clusterInstKey,proto3" json:"cluster_inst_key"`
}

func (m *AppInstRefKey) Reset()         { *m = AppInstRefKey{} }
func (m *AppInstRefKey) String() string { return proto.CompactTextString(m) }
func (*AppInstRefKey) ProtoMessage()    {}
func (*AppInstRefKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{5}
}
func (m *AppInstRefKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppInstRefKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppInstRefKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppInstRefKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppInstRefKey.Merge(m, src)
}
func (m *AppInstRefKey) XXX_Size() int {
	return m.Size()
}
func (m *AppInstRefKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AppInstRefKey.DiscardUnknown(m)
}

var xxx_messageInfo_AppInstRefKey proto.InternalMessageInfo

// InfraResources
//
// InfraResources is infomation about infrastructure resources.
type InfraResources struct {
	// Virtual machine resources info
	Vms []VmInfo `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms"`
}

func (m *InfraResources) Reset()         { *m = InfraResources{} }
func (m *InfraResources) String() string { return proto.CompactTextString(m) }
func (*InfraResources) ProtoMessage()    {}
func (*InfraResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{6}
}
func (m *InfraResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraResources.Merge(m, src)
}
func (m *InfraResources) XXX_Size() int {
	return m.Size()
}
func (m *InfraResources) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraResources.DiscardUnknown(m)
}

var xxx_messageInfo_InfraResources proto.InternalMessageInfo

// InfraResourcesSnapshot
//
// InfraResourcesSnapshot is snapshot of information about cloudlet infra resources.
type InfraResourcesSnapshot struct {
	// Virtual machine resources info
	PlatformVms []VmInfo `protobuf:"bytes,1,rep,name=platform_vms,json=platformVms,proto3" json:"platform_vms"`
	// Infra Resource information
	Info []InfraResource `protobuf:"bytes,2,rep,name=info,proto3" json:"info"`
	// List of clusterinsts this resources snapshot represent
	ClusterInsts []ClusterInstRefKey `protobuf:"bytes,3,rep,name=cluster_insts,json=clusterInsts,proto3" json:"cluster_insts"`
	// List of vm appinsts this resources snapshot represent
	VmAppInsts []AppInstRefKey `protobuf:"bytes,4,rep,name=vm_app_insts,json=vmAppInsts,proto3" json:"vm_app_insts"`
}

func (m *InfraResourcesSnapshot) Reset()         { *m = InfraResourcesSnapshot{} }
func (m *InfraResourcesSnapshot) String() string { return proto.CompactTextString(m) }
func (*InfraResourcesSnapshot) ProtoMessage()    {}
func (*InfraResourcesSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d4658e0b2956cb2, []int{7}
}
func (m *InfraResourcesSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraResourcesSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraResourcesSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraResourcesSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraResourcesSnapshot.Merge(m, src)
}
func (m *InfraResourcesSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *InfraResourcesSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraResourcesSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_InfraResourcesSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ContainerInfo)(nil), "edgeproto.ContainerInfo")
	proto.RegisterType((*IpAddr)(nil), "edgeproto.IpAddr")
	proto.RegisterType((*VmInfo)(nil), "edgeproto.VmInfo")
	proto.RegisterType((*InfraResource)(nil), "edgeproto.InfraResource")
	proto.RegisterType((*ClusterInstRefKey)(nil), "edgeproto.ClusterInstRefKey")
	proto.RegisterType((*AppInstRefKey)(nil), "edgeproto.AppInstRefKey")
	proto.RegisterType((*InfraResources)(nil), "edgeproto.InfraResources")
	proto.RegisterType((*InfraResourcesSnapshot)(nil), "edgeproto.InfraResourcesSnapshot")
}

func init() { proto.RegisterFile("infraresources.proto", fileDescriptor_1d4658e0b2956cb2) }

var fileDescriptor_1d4658e0b2956cb2 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x8e, 0x13, 0x37, 0x7d, 0x33, 0x49, 0xda, 0xb7, 0xab, 0x52, 0x59, 0x55, 0x65, 0xa2, 0x1c,
	0x20, 0x1c, 0x48, 0x50, 0x11, 0x52, 0x29, 0x1c, 0x68, 0x2b, 0x01, 0x51, 0xe1, 0x62, 0x50, 0xaf,
	0xd1, 0xd6, 0xde, 0x24, 0x16, 0xf6, 0xee, 0xb2, 0xbb, 0x8e, 0x12, 0xfe, 0x01, 0x17, 0x84, 0x84,
	0xf8, 0x33, 0xfc, 0x82, 0x1e, 0x7b, 0xe4, 0xc4, 0x47, 0x7b, 0xe3, 0x8a, 0x84, 0x38, 0x22, 0xaf,
	0x9d, 0x64, 0xa3, 0x70, 0xe8, 0x81, 0x8b, 0x35, 0xf3, 0xcc, 0x33, 0xe3, 0x67, 0x3e, 0x16, 0x36,
	0x43, 0xda, 0x17, 0x58, 0x10, 0xc9, 0x12, 0xe1, 0x13, 0xd9, 0xe6, 0x82, 0x29, 0x86, 0x2a, 0x24,
	0x18, 0x10, 0x6d, 0x6e, 0xef, 0x0d, 0x42, 0x35, 0x4c, 0x4e, 0xdb, 0x3e, 0x8b, 0x3b, 0x31, 0x3b,
	0x0d, 0xa3, 0x34, 0x34, 0xee, 0xa4, 0xdf, 0xdb, 0x7e, 0xc4, 0x92, 0xa0, 0xa3, 0x79, 0x03, 0x42,
	0x67, 0x46, 0x56, 0x64, 0x7b, 0x73, 0xc0, 0x06, 0x4c, 0x9b, 0x9d, 0xd4, 0xca, 0xd1, 0xba, 0x1f,
	0x25, 0x52, 0x11, 0x91, 0xbb, 0x15, 0xcc, 0x79, 0x66, 0x36, 0xdf, 0x5a, 0x50, 0x3f, 0x62, 0x54,
	0xe1, 0x90, 0x12, 0xd1, 0xa5, 0x7d, 0x86, 0x10, 0xd8, 0x14, 0xc7, 0xc4, 0xb1, 0x1a, 0x56, 0xab,
	0xe2, 0x69, 0x3b, 0xc5, 0xd4, 0x84, 0x13, 0xa7, 0x98, 0x61, 0xa9, 0x8d, 0xb6, 0xa0, 0x2c, 0x15,
	0x56, 0x89, 0x74, 0x4a, 0x1a, 0xcd, 0x3d, 0xb4, 0x03, 0x95, 0xfc, 0x6f, 0x21, 0x77, 0x6c, 0x1d,
	0x9a, 0x03, 0x68, 0x1b, 0xfe, 0x13, 0x44, 0x2a, 0x2c, 0x94, 0x74, 0x56, 0x1a, 0x56, 0xab, 0xe4,
	0xcd, 0xfc, 0xe6, 0x53, 0x28, 0x77, 0xf9, 0x41, 0x10, 0x08, 0xe4, 0x02, 0x90, 0xb1, 0x22, 0x82,
	0xe2, 0xa8, 0xcb, 0x73, 0x25, 0x06, 0x92, 0xc6, 0x43, 0x3a, 0x8b, 0x67, 0xaa, 0x0c, 0xa4, 0xf9,
	0xd5, 0x82, 0xf2, 0x49, 0xfc, 0x4f, 0xda, 0x69, 0x40, 0x55, 0x6f, 0xeb, 0x71, 0x84, 0x47, 0x4c,
	0xe4, 0x0d, 0x99, 0x10, 0xba, 0x0f, 0xd5, 0x90, 0xe3, 0x20, 0x10, 0x44, 0x4a, 0x92, 0x76, 0x55,
	0x6a, 0x55, 0x77, 0x37, 0xda, 0xb3, 0x6d, 0xb6, 0xb3, 0xa6, 0x0e, 0xed, 0xb3, 0x2f, 0xd7, 0x0b,
	0x9e, 0xc9, 0x45, 0x7b, 0x00, 0xfe, 0x74, 0xf8, 0xd2, 0x29, 0xeb, 0x4c, 0xc7, 0xc8, 0x5c, 0xd8,
	0x8c, 0x67, 0x70, 0x9b, 0x3f, 0x2c, 0xa8, 0x77, 0x53, 0x11, 0x5e, 0x7e, 0x45, 0x7f, 0x6d, 0x74,
	0x13, 0x56, 0x46, 0x38, 0x4a, 0xb2, 0x4e, 0x6d, 0x2f, 0x73, 0xd0, 0x0d, 0x58, 0xd7, 0xfa, 0x7b,
	0x31, 0x1e, 0xf7, 0xb2, 0x78, 0x49, 0xc7, 0xeb, 0x1a, 0x7e, 0x8e, 0xc7, 0x27, 0x53, 0xde, 0xeb,
	0x84, 0x29, 0x93, 0x67, 0x67, 0x3c, 0x0d, 0xcf, 0x78, 0x0d, 0xa8, 0x06, 0x44, 0xfa, 0x22, 0xe4,
	0x2a, 0x64, 0x54, 0xaf, 0xb5, 0xe2, 0x99, 0x50, 0xaa, 0x23, 0xa1, 0xa1, 0x4a, 0x5b, 0x4c, 0x63,
	0x99, 0x83, 0x6e, 0xc2, 0x3a, 0x8e, 0x88, 0x50, 0x3d, 0x35, 0x14, 0x44, 0x0e, 0x59, 0x14, 0x38,
	0xab, 0x0d, 0xab, 0xb5, 0xe2, 0xad, 0x69, 0xf8, 0xe5, 0x14, 0x6d, 0xbe, 0xb3, 0x60, 0xe3, 0x28,
	0x3b, 0xa1, 0x2e, 0x95, 0xca, 0x23, 0xfd, 0x63, 0x32, 0x41, 0x0f, 0xa1, 0x9a, 0xdf, 0x55, 0xef,
	0x15, 0x99, 0xe8, 0xbe, 0xab, 0xbb, 0xd7, 0xcc, 0xe9, 0x65, 0xd1, 0x63, 0x32, 0xc9, 0x67, 0x0f,
	0xfe, 0x0c, 0x41, 0xf7, 0xa0, 0xc6, 0xc4, 0x00, 0xd3, 0xf0, 0x0d, 0xd6, 0xaa, 0xf5, 0x2d, 0x1c,
	0x6e, 0x7c, 0xfa, 0xe5, 0x4c, 0x1f, 0x8b, 0x20, 0x7d, 0x26, 0x06, 0xde, 0x02, 0x6d, 0xdf, 0xfe,
	0xfd, 0xd3, 0xb1, 0x9a, 0x1f, 0x2d, 0xa8, 0x1f, 0x70, 0x6e, 0x88, 0xb9, 0x03, 0xab, 0x98, 0x73,
	0x43, 0x88, 0x79, 0x00, 0x07, 0x9c, 0xcf, 0x45, 0x94, 0xb1, 0xf6, 0xd0, 0x33, 0xf8, 0x7f, 0x2a,
	0x3f, 0xa4, 0x52, 0xe9, 0xd4, 0xa2, 0x4e, 0xdd, 0x59, 0xee, 0x61, 0xfe, 0xa7, 0xbc, 0xca, 0x9a,
	0x3f, 0x0f, 0x1c, 0x93, 0x49, 0xae, 0xeb, 0x01, 0xac, 0x2d, 0x1c, 0x85, 0x44, 0xb7, 0xa0, 0x34,
	0x8a, 0xa5, 0x63, 0x2d, 0x1d, 0x65, 0xf6, 0x3c, 0xf2, 0x6a, 0x29, 0xa7, 0xf9, 0xa1, 0x08, 0x5b,
	0x8b, 0xd9, 0x2f, 0x28, 0xe6, 0x72, 0xc8, 0x14, 0xda, 0x87, 0x1a, 0x8f, 0xb0, 0xea, 0x33, 0x11,
	0xf7, 0xae, 0x50, 0xae, 0x3a, 0x25, 0x9f, 0xc4, 0x12, 0xed, 0x82, 0x1d, 0xd2, 0x3e, 0x73, 0x8a,
	0x4b, 0xd7, 0xbd, 0xf0, 0xb3, 0x3c, 0x55, 0x73, 0xd1, 0x13, 0xa8, 0x9b, 0xb3, 0x49, 0xdf, 0x64,
	0xe9, 0x8a, 0x83, 0xa9, 0x19, 0x83, 0x91, 0xe8, 0x11, 0xd4, 0x46, 0x71, 0x2f, 0xdd, 0x4c, 0x56,
	0xc7, 0x5e, 0x12, 0xb1, 0xb0, 0xc6, 0xe9, 0x9d, 0x8c, 0xe2, 0x1c, 0x96, 0x87, 0x3b, 0x67, 0xdf,
	0xdd, 0xc2, 0xd9, 0x85, 0x6b, 0x9d, 0x5f, 0xb8, 0xd6, 0xb7, 0x0b, 0xd7, 0x7a, 0x7f, 0xe9, 0x16,
	0xce, 0x2f, 0xdd, 0xc2, 0xe7, 0x4b, 0xb7, 0x70, 0x5a, 0xd6, 0x45, 0xee, 0xfe, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x49, 0xec, 0x6b, 0xd6, 0xd2, 0x05, 0x00, 0x00,
}

func (m *ContainerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Restarts != 0 {
		i = encodeVarintInfraresources(dAtA, i, uint64(m.Restarts))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Clusterip) > 0 {
		i -= len(m.Clusterip)
		copy(dAtA[i:], m.Clusterip)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Clusterip)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IpAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalIp) > 0 {
		i -= len(m.ExternalIp)
		copy(dAtA[i:], m.ExternalIp)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.ExternalIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Ipaddresses) > 0 {
		for iNdEx := len(m.Ipaddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ipaddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InfraFlavor) > 0 {
		i -= len(m.InfraFlavor)
		copy(dAtA[i:], m.InfraFlavor)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.InfraFlavor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfraResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AlertThreshold != 0 {
		i = encodeVarintInfraresources(dAtA, i, uint64(m.AlertThreshold))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.QuotaMaxValue != 0 {
		i = encodeVarintInfraresources(dAtA, i, uint64(m.QuotaMaxValue))
		i--
		dAtA[i] = 0x20
	}
	if m.InfraMaxValue != 0 {
		i = encodeVarintInfraresources(dAtA, i, uint64(m.InfraMaxValue))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintInfraresources(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInstRefKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInstRefKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInstRefKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintInfraresources(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ClusterKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInfraresources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppInstRefKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstRefKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppInstRefKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClusterInstKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInfraresources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AppKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInfraresources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InfraResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for iNdEx := len(m.Vms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InfraResourcesSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraResourcesSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraResourcesSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VmAppInsts) > 0 {
		for iNdEx := len(m.VmAppInsts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmAppInsts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ClusterInsts) > 0 {
		for iNdEx := len(m.ClusterInsts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterInsts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PlatformVms) > 0 {
		for iNdEx := len(m.PlatformVms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlatformVms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfraresources(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfraresources(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfraresources(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContainerInfo) CopyInFields(src *ContainerInfo) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.Status != src.Status {
		m.Status = src.Status
		changed++
	}
	if m.Clusterip != src.Clusterip {
		m.Clusterip = src.Clusterip
		changed++
	}
	if m.Restarts != src.Restarts {
		m.Restarts = src.Restarts
		changed++
	}
	return changed
}

func (m *ContainerInfo) DeepCopyIn(src *ContainerInfo) {
	m.Name = src.Name
	m.Type = src.Type
	m.Status = src.Status
	m.Clusterip = src.Clusterip
	m.Restarts = src.Restarts
}

// Helper method to check that enums have valid values
func (m *ContainerInfo) ValidateEnums() error {
	return nil
}

func (m *IpAddr) CopyInFields(src *IpAddr) int {
	changed := 0
	if m.ExternalIp != src.ExternalIp {
		m.ExternalIp = src.ExternalIp
		changed++
	}
	if m.InternalIp != src.InternalIp {
		m.InternalIp = src.InternalIp
		changed++
	}
	return changed
}

func (m *IpAddr) DeepCopyIn(src *IpAddr) {
	m.ExternalIp = src.ExternalIp
	m.InternalIp = src.InternalIp
}

// Helper method to check that enums have valid values
func (m *IpAddr) ValidateEnums() error {
	return nil
}

func (m *VmInfo) CopyInFields(src *VmInfo) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.Status != src.Status {
		m.Status = src.Status
		changed++
	}
	if m.InfraFlavor != src.InfraFlavor {
		m.InfraFlavor = src.InfraFlavor
		changed++
	}
	if src.Ipaddresses != nil {
		m.Ipaddresses = src.Ipaddresses
		changed++
	} else if m.Ipaddresses != nil {
		m.Ipaddresses = nil
		changed++
	}
	if src.Containers != nil {
		m.Containers = src.Containers
		changed++
	} else if m.Containers != nil {
		m.Containers = nil
		changed++
	}
	return changed
}

func (m *VmInfo) DeepCopyIn(src *VmInfo) {
	m.Name = src.Name
	m.Type = src.Type
	m.Status = src.Status
	m.InfraFlavor = src.InfraFlavor
	if src.Ipaddresses != nil {
		m.Ipaddresses = make([]IpAddr, len(src.Ipaddresses), len(src.Ipaddresses))
		for ii, s := range src.Ipaddresses {
			m.Ipaddresses[ii].DeepCopyIn(&s)
		}
	} else {
		m.Ipaddresses = nil
	}
	if src.Containers != nil {
		m.Containers = make([]*ContainerInfo, len(src.Containers), len(src.Containers))
		for ii, s := range src.Containers {
			var tmp_s ContainerInfo
			tmp_s.DeepCopyIn(s)
			m.Containers[ii] = &tmp_s
		}
	} else {
		m.Containers = nil
	}
}

// Helper method to check that enums have valid values
func (m *VmInfo) ValidateEnums() error {
	for _, e := range m.Ipaddresses {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Containers {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *InfraResource) CopyInFields(src *InfraResource) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Value != src.Value {
		m.Value = src.Value
		changed++
	}
	if m.InfraMaxValue != src.InfraMaxValue {
		m.InfraMaxValue = src.InfraMaxValue
		changed++
	}
	if m.QuotaMaxValue != src.QuotaMaxValue {
		m.QuotaMaxValue = src.QuotaMaxValue
		changed++
	}
	if m.Description != src.Description {
		m.Description = src.Description
		changed++
	}
	if m.Units != src.Units {
		m.Units = src.Units
		changed++
	}
	if m.AlertThreshold != src.AlertThreshold {
		m.AlertThreshold = src.AlertThreshold
		changed++
	}
	return changed
}

func (m *InfraResource) DeepCopyIn(src *InfraResource) {
	m.Name = src.Name
	m.Value = src.Value
	m.InfraMaxValue = src.InfraMaxValue
	m.QuotaMaxValue = src.QuotaMaxValue
	m.Description = src.Description
	m.Units = src.Units
	m.AlertThreshold = src.AlertThreshold
}

// Helper method to check that enums have valid values
func (m *InfraResource) ValidateEnums() error {
	return nil
}

func (m *ClusterInstRefKey) CopyInFields(src *ClusterInstRefKey) int {
	changed := 0
	if m.ClusterKey.Name != src.ClusterKey.Name {
		m.ClusterKey.Name = src.ClusterKey.Name
		changed++
	}
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	return changed
}

func (m *ClusterInstRefKey) DeepCopyIn(src *ClusterInstRefKey) {
	m.ClusterKey.DeepCopyIn(&src.ClusterKey)
	m.Organization = src.Organization
}

func (m *ClusterInstRefKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ClusterInstRefKey key string", "obj", m)
	}
	return string(key)
}

func ClusterInstRefKeyStringParse(str string, key *ClusterInstRefKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ClusterInstRefKey key string", "str", str)
	}
}

func (m *ClusterInstRefKey) NotFoundError() error {
	return fmt.Errorf("ClusterInstRef key %s not found", m.GetKeyString())
}

func (m *ClusterInstRefKey) ExistsError() error {
	return fmt.Errorf("ClusterInstRef key %s already exists", m.GetKeyString())
}

var ClusterInstRefKeyTagOrganization = "clusterreforg"

func (m *ClusterInstRefKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["cluster"] = m.ClusterKey.Name
	tags["clusterreforg"] = m.Organization
	return tags
}

// Helper method to check that enums have valid values
func (m *ClusterInstRefKey) ValidateEnums() error {
	if err := m.ClusterKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AppInstRefKey) CopyInFields(src *AppInstRefKey) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.ClusterInstKey.ClusterKey.Name != src.ClusterInstKey.ClusterKey.Name {
		m.ClusterInstKey.ClusterKey.Name = src.ClusterInstKey.ClusterKey.Name
		changed++
	}
	if m.ClusterInstKey.Organization != src.ClusterInstKey.Organization {
		m.ClusterInstKey.Organization = src.ClusterInstKey.Organization
		changed++
	}
	return changed
}

func (m *AppInstRefKey) DeepCopyIn(src *AppInstRefKey) {
	m.AppKey.DeepCopyIn(&src.AppKey)
	m.ClusterInstKey.DeepCopyIn(&src.ClusterInstKey)
}

func (m *AppInstRefKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal AppInstRefKey key string", "obj", m)
	}
	return string(key)
}

func AppInstRefKeyStringParse(str string, key *AppInstRefKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal AppInstRefKey key string", "str", str)
	}
}

func (m *AppInstRefKey) NotFoundError() error {
	return fmt.Errorf("AppInstRef key %s not found", m.GetKeyString())
}

func (m *AppInstRefKey) ExistsError() error {
	return fmt.Errorf("AppInstRef key %s already exists", m.GetKeyString())
}

func (m *AppInstRefKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apporg"] = m.AppKey.Organization
	tags["app"] = m.AppKey.Name
	tags["appver"] = m.AppKey.Version
	tags["cluster"] = m.ClusterInstKey.ClusterKey.Name
	tags["clusterreforg"] = m.ClusterInstKey.Organization
	return tags
}

// Helper method to check that enums have valid values
func (m *AppInstRefKey) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.ClusterInstKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *InfraResources) CopyInFields(src *InfraResources) int {
	changed := 0
	if src.Vms != nil {
		m.Vms = src.Vms
		changed++
	} else if m.Vms != nil {
		m.Vms = nil
		changed++
	}
	return changed
}

func (m *InfraResources) DeepCopyIn(src *InfraResources) {
	if src.Vms != nil {
		m.Vms = make([]VmInfo, len(src.Vms), len(src.Vms))
		for ii, s := range src.Vms {
			m.Vms[ii].DeepCopyIn(&s)
		}
	} else {
		m.Vms = nil
	}
}

// Helper method to check that enums have valid values
func (m *InfraResources) ValidateEnums() error {
	for _, e := range m.Vms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *InfraResourcesSnapshot) CopyInFields(src *InfraResourcesSnapshot) int {
	changed := 0
	if src.PlatformVms != nil {
		m.PlatformVms = src.PlatformVms
		changed++
	} else if m.PlatformVms != nil {
		m.PlatformVms = nil
		changed++
	}
	if src.Info != nil {
		m.Info = src.Info
		changed++
	} else if m.Info != nil {
		m.Info = nil
		changed++
	}
	if src.ClusterInsts != nil {
		m.ClusterInsts = src.ClusterInsts
		changed++
	} else if m.ClusterInsts != nil {
		m.ClusterInsts = nil
		changed++
	}
	if src.VmAppInsts != nil {
		m.VmAppInsts = src.VmAppInsts
		changed++
	} else if m.VmAppInsts != nil {
		m.VmAppInsts = nil
		changed++
	}
	return changed
}

func (m *InfraResourcesSnapshot) DeepCopyIn(src *InfraResourcesSnapshot) {
	if src.PlatformVms != nil {
		m.PlatformVms = make([]VmInfo, len(src.PlatformVms), len(src.PlatformVms))
		for ii, s := range src.PlatformVms {
			m.PlatformVms[ii].DeepCopyIn(&s)
		}
	} else {
		m.PlatformVms = nil
	}
	if src.Info != nil {
		m.Info = make([]InfraResource, len(src.Info), len(src.Info))
		for ii, s := range src.Info {
			m.Info[ii].DeepCopyIn(&s)
		}
	} else {
		m.Info = nil
	}
	if src.ClusterInsts != nil {
		m.ClusterInsts = make([]ClusterInstRefKey, len(src.ClusterInsts), len(src.ClusterInsts))
		for ii, s := range src.ClusterInsts {
			m.ClusterInsts[ii].DeepCopyIn(&s)
		}
	} else {
		m.ClusterInsts = nil
	}
	if src.VmAppInsts != nil {
		m.VmAppInsts = make([]AppInstRefKey, len(src.VmAppInsts), len(src.VmAppInsts))
		for ii, s := range src.VmAppInsts {
			m.VmAppInsts[ii].DeepCopyIn(&s)
		}
	} else {
		m.VmAppInsts = nil
	}
}

// Helper method to check that enums have valid values
func (m *InfraResourcesSnapshot) ValidateEnums() error {
	for _, e := range m.PlatformVms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.Info {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.ClusterInsts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.VmAppInsts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *ContainerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Clusterip)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	if m.Restarts != 0 {
		n += 1 + sovInfraresources(uint64(m.Restarts))
	}
	return n
}

func (m *IpAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	return n
}

func (m *VmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.InfraFlavor)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	if len(m.Ipaddresses) > 0 {
		for _, e := range m.Ipaddresses {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	return n
}

func (m *InfraResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovInfraresources(uint64(m.Value))
	}
	if m.InfraMaxValue != 0 {
		n += 1 + sovInfraresources(uint64(m.InfraMaxValue))
	}
	if m.QuotaMaxValue != 0 {
		n += 1 + sovInfraresources(uint64(m.QuotaMaxValue))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	if m.AlertThreshold != 0 {
		n += 1 + sovInfraresources(uint64(m.AlertThreshold))
	}
	return n
}

func (m *ClusterInstRefKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterKey.Size()
	n += 1 + l + sovInfraresources(uint64(l))
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovInfraresources(uint64(l))
	}
	return n
}

func (m *AppInstRefKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovInfraresources(uint64(l))
	l = m.ClusterInstKey.Size()
	n += 1 + l + sovInfraresources(uint64(l))
	return n
}

func (m *InfraResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	return n
}

func (m *InfraResourcesSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlatformVms) > 0 {
		for _, e := range m.PlatformVms {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	if len(m.ClusterInsts) > 0 {
		for _, e := range m.ClusterInsts {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	if len(m.VmAppInsts) > 0 {
		for _, e := range m.VmAppInsts {
			l = e.Size()
			n += 1 + l + sovInfraresources(uint64(l))
		}
	}
	return n
}

func sovInfraresources(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfraresources(x uint64) (n int) {
	return sovInfraresources(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContainerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusterip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusterip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restarts", wireType)
			}
			m.Restarts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Restarts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraFlavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfraFlavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipaddresses = append(m.Ipaddresses, IpAddr{})
			if err := m.Ipaddresses[len(m.Ipaddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ContainerInfo{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraMaxValue", wireType)
			}
			m.InfraMaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfraMaxValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaMaxValue", wireType)
			}
			m.QuotaMaxValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuotaMaxValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertThreshold", wireType)
			}
			m.AlertThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlertThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInstRefKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInstRefKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInstRefKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppInstRefKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstRefKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstRefKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInstKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterInstKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, VmInfo{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraResourcesSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraResourcesSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraResourcesSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformVms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformVms = append(m.PlatformVms, VmInfo{})
			if err := m.PlatformVms[len(m.PlatformVms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, InfraResource{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInsts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterInsts = append(m.ClusterInsts, ClusterInstRefKey{})
			if err := m.ClusterInsts[len(m.ClusterInsts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmAppInsts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfraresources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfraresources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmAppInsts = append(m.VmAppInsts, AppInstRefKey{})
			if err := m.VmAppInsts[len(m.VmAppInsts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfraresources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInfraresources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfraresources(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfraresources
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfraresources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfraresources
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfraresources
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfraresources
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfraresources        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfraresources          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfraresources = fmt.Errorf("proto: unexpected end of group")
)
