// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AppInstClient_FindStatus int32

const (
	AppInstClient_FIND_UNKNOWN  AppInstClient_FindStatus = 0
	AppInstClient_FIND_FOUND    AppInstClient_FindStatus = 1
	AppInstClient_FIND_NOTFOUND AppInstClient_FindStatus = 2
)

var AppInstClient_FindStatus_name = map[int32]string{
	0: "FIND_UNKNOWN",
	1: "FIND_FOUND",
	2: "FIND_NOTFOUND",
}
var AppInstClient_FindStatus_value = map[string]int32{
	"FIND_UNKNOWN":  0,
	"FIND_FOUND":    1,
	"FIND_NOTFOUND": 2,
}

func (x AppInstClient_FindStatus) String() string {
	return proto.EnumName(AppInstClient_FindStatus_name, int32(x))
}
func (AppInstClient_FindStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorClient, []int{1, 0}
}

// AppKey uniquely identifies an App
type AppInstClientKey struct {
	// AppInst Key
	Key AppInstKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// App name
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *AppInstClientKey) Reset()                    { *m = AppInstClientKey{} }
func (m *AppInstClientKey) String() string            { return proto.CompactTextString(m) }
func (*AppInstClientKey) ProtoMessage()               {}
func (*AppInstClientKey) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{0} }

// Client is an AppInst client that called FindCloudlet DME Api
type AppInstClient struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	ClientKey AppInstClientKey `protobuf:"bytes,2,opt,name=client_key,json=clientKey" json:"client_key"`
	// Location of the Client
	Location distributed_match_engine.Loc `protobuf:"bytes,3,opt,name=location" json:"location"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,5,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Status return
	Status AppInstClient_FindStatus `protobuf:"varint,6,opt,name=status,proto3,enum=edgeproto.AppInstClient_FindStatus" json:"status,omitempty"`
}

func (m *AppInstClient) Reset()                    { *m = AppInstClient{} }
func (m *AppInstClient) String() string            { return proto.CompactTextString(m) }
func (*AppInstClient) ProtoMessage()               {}
func (*AppInstClient) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{1} }

func init() {
	proto.RegisterType((*AppInstClientKey)(nil), "edgeproto.AppInstClientKey")
	proto.RegisterType((*AppInstClient)(nil), "edgeproto.AppInstClient")
	proto.RegisterEnum("edgeproto.AppInstClient_FindStatus", AppInstClient_FindStatus_name, AppInstClient_FindStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppInstClientApi service

type AppInstClientApiClient interface {
	// Show application instance clients.
	ShowAppInstClient(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_ShowAppInstClientClient, error)
}

type appInstClientApiClient struct {
	cc *grpc.ClientConn
}

func NewAppInstClientApiClient(cc *grpc.ClientConn) AppInstClientApiClient {
	return &appInstClientApiClient{cc}
}

func (c *appInstClientApiClient) ShowAppInstClient(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_ShowAppInstClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppInstClientApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AppInstClientApi/ShowAppInstClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &appInstClientApiShowAppInstClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppInstClientApi_ShowAppInstClientClient interface {
	Recv() (*AppInstClient, error)
	grpc.ClientStream
}

type appInstClientApiShowAppInstClientClient struct {
	grpc.ClientStream
}

func (x *appInstClientApiShowAppInstClientClient) Recv() (*AppInstClient, error) {
	m := new(AppInstClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppInstClientApi service

type AppInstClientApiServer interface {
	// Show application instance clients.
	ShowAppInstClient(*AppInstClientKey, AppInstClientApi_ShowAppInstClientServer) error
}

func RegisterAppInstClientApiServer(s *grpc.Server, srv AppInstClientApiServer) {
	s.RegisterService(&_AppInstClientApi_serviceDesc, srv)
}

func _AppInstClientApi_ShowAppInstClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppInstClientKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppInstClientApiServer).ShowAppInstClient(m, &appInstClientApiShowAppInstClientServer{stream})
}

type AppInstClientApi_ShowAppInstClientServer interface {
	Send(*AppInstClient) error
	grpc.ServerStream
}

type appInstClientApiShowAppInstClientServer struct {
	grpc.ServerStream
}

func (x *appInstClientApiShowAppInstClientServer) Send(m *AppInstClient) error {
	return x.ServerStream.SendMsg(m)
}

var _AppInstClientApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppInstClientApi",
	HandlerType: (*AppInstClientApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAppInstClient",
			Handler:       _AppInstClientApi_ShowAppInstClient_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}

func (m *AppInstClientKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstClientKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *AppInstClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.ClientKey.Size()))
	n2, err := m.ClientKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Location.Size()))
	n3, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.NotifyId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.NotifyId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppInstClientKey) Matches(o *AppInstClientKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Uuid != "" {
		if o.Uuid != m.Uuid {
			return false
		}
	}
	return true
}

func (m *AppInstClientKey) CopyInFields(src *AppInstClientKey) int {
	changed := 0
	if m.Key.AppKey.DeveloperKey.Name != src.Key.AppKey.DeveloperKey.Name {
		m.Key.AppKey.DeveloperKey.Name = src.Key.AppKey.DeveloperKey.Name
		changed++
	}
	if m.Key.AppKey.Name != src.Key.AppKey.Name {
		m.Key.AppKey.Name = src.Key.AppKey.Name
		changed++
	}
	if m.Key.AppKey.Version != src.Key.AppKey.Version {
		m.Key.AppKey.Version = src.Key.AppKey.Version
		changed++
	}
	if m.Key.ClusterInstKey.ClusterKey.Name != src.Key.ClusterInstKey.ClusterKey.Name {
		m.Key.ClusterInstKey.ClusterKey.Name = src.Key.ClusterInstKey.ClusterKey.Name
		changed++
	}
	if m.Key.ClusterInstKey.CloudletKey.OperatorKey.Name != src.Key.ClusterInstKey.CloudletKey.OperatorKey.Name {
		m.Key.ClusterInstKey.CloudletKey.OperatorKey.Name = src.Key.ClusterInstKey.CloudletKey.OperatorKey.Name
		changed++
	}
	if m.Key.ClusterInstKey.CloudletKey.Name != src.Key.ClusterInstKey.CloudletKey.Name {
		m.Key.ClusterInstKey.CloudletKey.Name = src.Key.ClusterInstKey.CloudletKey.Name
		changed++
	}
	if m.Key.ClusterInstKey.Developer != src.Key.ClusterInstKey.Developer {
		m.Key.ClusterInstKey.Developer = src.Key.ClusterInstKey.Developer
		changed++
	}
	if m.Uuid != src.Uuid {
		m.Uuid = src.Uuid
		changed++
	}
	return changed
}

func (s *AppInstClientKey) HasFields() bool {
	return false
}

type AppInstClientKeyStore struct {
	kvstore objstore.KVStore
}

func NewAppInstClientKeyStore(kvstore objstore.KVStore) AppInstClientKeyStore {
	return AppInstClientKeyStore{kvstore: kvstore}
}

func (s *AppInstClientKeyStore) Create(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Update(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Put(ctx context.Context, m *AppInstClientKey, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Delete(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) LoadOne(key string) (*AppInstClientKey, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AppInstClientKey
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AppInstClientKey data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppInstClientKeyStore) STMGet(stm concurrency.STM, key *AppInstKey, buf *AppInstClientKey) bool {
	keystr := objstore.DbKeyString("AppInstClientKey", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppInstClientKeyStore) STMPut(stm concurrency.STM, obj *AppInstClientKey, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AppInstClientKey", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AppInstClientKey json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AppInstClientKeyStore) STMDel(stm concurrency.STM, key *AppInstKey) {
	keystr := objstore.DbKeyString("AppInstClientKey", key)
	stm.Del(keystr)
}

type AppInstClientKeyKeyWatcher struct {
	cb func(ctx context.Context)
}

// AppInstClientKeyCache caches AppInstClientKey objects in memory in a hash table
// and keeps them in sync with the database.
type AppInstClientKeyCache struct {
	Objs        map[AppInstKey]*AppInstClientKey
	Mux         util.Mutex
	List        map[AppInstKey]struct{}
	NotifyCb    func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey)
	UpdatedCb   func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey)
	KeyWatchers map[AppInstKey][]*AppInstClientKeyKeyWatcher
}

func NewAppInstClientKeyCache() *AppInstClientKeyCache {
	cache := AppInstClientKeyCache{}
	InitAppInstClientKeyCache(&cache)
	return &cache
}

func InitAppInstClientKeyCache(cache *AppInstClientKeyCache) {
	cache.Objs = make(map[AppInstKey]*AppInstClientKey)
	cache.KeyWatchers = make(map[AppInstKey][]*AppInstClientKeyKeyWatcher)
}

func (c *AppInstClientKeyCache) GetTypeString() string {
	return "AppInstClientKey"
}

func (c *AppInstClientKeyCache) Get(key *AppInstKey, valbuf *AppInstClientKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *AppInstClientKeyCache) HasKey(key *AppInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppInstClientKeyCache) GetAllKeys(ctx context.Context, keys map[AppInstKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *AppInstClientKeyCache) Update(ctx context.Context, in *AppInstClientKey, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *AppInstClientKey) (*AppInstClientKey, bool) {
		return in, true
	})
}

func (c *AppInstClientKeyCache) UpdateModFunc(ctx context.Context, key *AppInstKey, rev int64, modFunc func(old *AppInstClientKey) (new *AppInstClientKey, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &AppInstClientKey{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate AppInstClientKey", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AppInstClientKeyCache) Delete(ctx context.Context, in *AppInstClientKey, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete AppInstClientKey", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AppInstClientKeyCache) Prune(ctx context.Context, validKeys map[AppInstKey]struct{}) {
	notify := make(map[AppInstKey]*AppInstClientKey)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppInstClientKeyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppInstClientKeyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AppInstClientKeyCache) Show(filter *AppInstClientKey, cb func(ret *AppInstClientKey) error) error {
	log.DebugLog(log.DebugLevelApi, "Show AppInstClientKey", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare AppInstClientKey", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show AppInstClientKey", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AppInstClientKeyGenericNotifyCb(fn func(key *AppInstKey, old *AppInstClientKey)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AppInstKey), obj.(*AppInstClientKey))
	}
}

func (c *AppInstClientKeyCache) SetNotifyCb(fn func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey)) {
	c.NotifyCb = fn
}

func (c *AppInstClientKeyCache) SetUpdatedCb(fn func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey)) {
	c.UpdatedCb = fn
}

func (c *AppInstClientKeyCache) WatchKey(key *AppInstKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AppInstClientKeyKeyWatcher, 0)
	}
	watcher := AppInstClientKeyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AppInstClientKey", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AppInstClientKeyCache) TriggerKeyWatchers(ctx context.Context, key *AppInstKey) {
	watchers := make([]*AppInstClientKeyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *AppInstClientKeyCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := AppInstClientKey{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AppInstClientKey data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppInstClientKeyCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := AppInstClientKey{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppInstKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *AppInstClientKeyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AppInstKey]struct{})
}

func (c *AppInstClientKeyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AppInstKey]*AppInstClientKey)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *AppInstClientKey) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AppInstClientKey) GetKey() *AppInstKey {
	return &m.Key
}

func (m *AppInstClientKey) GetKeyVal() AppInstKey {
	return m.Key
}

func (m *AppInstClientKey) SetKey(key *AppInstKey) {
	m.Key = *key
}

func CmpSortAppInstClientKey(a AppInstClientKey, b AppInstClientKey) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *AppInstClientKey) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

const AppInstClientFieldClientKey = "2"
const AppInstClientFieldClientKeyKey = "2.1"
const AppInstClientFieldClientKeyKeyAppKey = "2.1.1"
const AppInstClientFieldClientKeyKeyAppKeyDeveloperKey = "2.1.1.1"
const AppInstClientFieldClientKeyKeyAppKeyDeveloperKeyName = "2.1.1.1.2"
const AppInstClientFieldClientKeyKeyAppKeyName = "2.1.1.2"
const AppInstClientFieldClientKeyKeyAppKeyVersion = "2.1.1.3"
const AppInstClientFieldClientKeyKeyClusterInstKey = "2.1.4"
const AppInstClientFieldClientKeyKeyClusterInstKeyClusterKey = "2.1.4.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName = "2.1.4.1.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey = "2.1.4.2"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKey = "2.1.4.2.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKeyName = "2.1.4.2.1.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName = "2.1.4.2.2"
const AppInstClientFieldClientKeyKeyClusterInstKeyDeveloper = "2.1.4.3"
const AppInstClientFieldClientKeyUuid = "2.2"
const AppInstClientFieldLocation = "3"
const AppInstClientFieldLocationLatitude = "3.1"
const AppInstClientFieldLocationLongitude = "3.2"
const AppInstClientFieldLocationHorizontalAccuracy = "3.3"
const AppInstClientFieldLocationVerticalAccuracy = "3.4"
const AppInstClientFieldLocationAltitude = "3.5"
const AppInstClientFieldLocationCourse = "3.6"
const AppInstClientFieldLocationSpeed = "3.7"
const AppInstClientFieldLocationTimestamp = "3.8"
const AppInstClientFieldLocationTimestampSeconds = "3.8.1"
const AppInstClientFieldLocationTimestampNanos = "3.8.2"
const AppInstClientFieldNotifyId = "5"
const AppInstClientFieldStatus = "6"

var AppInstClientAllFields = []string{
	AppInstClientFieldClientKeyKeyAppKeyDeveloperKeyName,
	AppInstClientFieldClientKeyKeyAppKeyName,
	AppInstClientFieldClientKeyKeyAppKeyVersion,
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName,
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKeyName,
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName,
	AppInstClientFieldClientKeyKeyClusterInstKeyDeveloper,
	AppInstClientFieldClientKeyUuid,
	AppInstClientFieldLocationLatitude,
	AppInstClientFieldLocationLongitude,
	AppInstClientFieldLocationHorizontalAccuracy,
	AppInstClientFieldLocationVerticalAccuracy,
	AppInstClientFieldLocationAltitude,
	AppInstClientFieldLocationCourse,
	AppInstClientFieldLocationSpeed,
	AppInstClientFieldLocationTimestampSeconds,
	AppInstClientFieldLocationTimestampNanos,
	AppInstClientFieldNotifyId,
	AppInstClientFieldStatus,
}

var AppInstClientAllFieldsMap = map[string]struct{}{
	AppInstClientFieldClientKeyKeyAppKeyDeveloperKeyName:                   struct{}{},
	AppInstClientFieldClientKeyKeyAppKeyName:                               struct{}{},
	AppInstClientFieldClientKeyKeyAppKeyVersion:                            struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName:             struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKeyName: struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName:            struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyDeveloper:                  struct{}{},
	AppInstClientFieldClientKeyUuid:                                        struct{}{},
	AppInstClientFieldLocationLatitude:                                     struct{}{},
	AppInstClientFieldLocationLongitude:                                    struct{}{},
	AppInstClientFieldLocationHorizontalAccuracy:                           struct{}{},
	AppInstClientFieldLocationVerticalAccuracy:                             struct{}{},
	AppInstClientFieldLocationAltitude:                                     struct{}{},
	AppInstClientFieldLocationCourse:                                       struct{}{},
	AppInstClientFieldLocationSpeed:                                        struct{}{},
	AppInstClientFieldLocationTimestampSeconds:                             struct{}{},
	AppInstClientFieldLocationTimestampNanos:                               struct{}{},
	AppInstClientFieldNotifyId:                                             struct{}{},
	AppInstClientFieldStatus:                                               struct{}{},
}

var AppInstClientAllFieldsStringMap = map[string]string{
	AppInstClientFieldClientKeyKeyAppKeyDeveloperKeyName:                   "Client Key Key App Key Developer Key Name",
	AppInstClientFieldClientKeyKeyAppKeyName:                               "Client Key Key App Key Name",
	AppInstClientFieldClientKeyKeyAppKeyVersion:                            "Client Key Key App Key Version",
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName:             "Client Key Key Cluster Inst Key Cluster Key Name",
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKeyName: "Client Key Key Cluster Inst Key Cloudlet Key Operator Key Name",
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName:            "Client Key Key Cluster Inst Key Cloudlet Key Name",
	AppInstClientFieldClientKeyKeyClusterInstKeyDeveloper:                  "Client Key Key Cluster Inst Key Developer",
	AppInstClientFieldClientKeyUuid:                                        "Client Key Uuid",
	AppInstClientFieldLocationLatitude:                                     "Location Latitude",
	AppInstClientFieldLocationLongitude:                                    "Location Longitude",
	AppInstClientFieldLocationHorizontalAccuracy:                           "Location Horizontal Accuracy",
	AppInstClientFieldLocationVerticalAccuracy:                             "Location Vertical Accuracy",
	AppInstClientFieldLocationAltitude:                                     "Location Altitude",
	AppInstClientFieldLocationCourse:                                       "Location Course",
	AppInstClientFieldLocationSpeed:                                        "Location Speed",
	AppInstClientFieldLocationTimestampSeconds:                             "Location Timestamp Seconds",
	AppInstClientFieldLocationTimestampNanos:                               "Location Timestamp Nanos",
	AppInstClientFieldNotifyId:                                             "Notify Id",
	AppInstClientFieldStatus:                                               "Status",
}

func (m *AppInstClient) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AppInstClientFieldClientKey+".")
}

func (m *AppInstClient) DiffFields(o *AppInstClient, fields map[string]struct{}) {
	if m.ClientKey.Key.AppKey.DeveloperKey.Name != o.ClientKey.Key.AppKey.DeveloperKey.Name {
		fields[AppInstClientFieldClientKeyKeyAppKeyDeveloperKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKeyDeveloperKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.AppKey.Name != o.ClientKey.Key.AppKey.Name {
		fields[AppInstClientFieldClientKeyKeyAppKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.AppKey.Version != o.ClientKey.Key.AppKey.Version {
		fields[AppInstClientFieldClientKeyKeyAppKeyVersion] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.ClusterKey.Name != o.ClientKey.Key.ClusterInstKey.ClusterKey.Name {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyClusterKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name != o.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOperatorKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.CloudletKey.Name != o.ClientKey.Key.ClusterInstKey.CloudletKey.Name {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.Developer != o.ClientKey.Key.ClusterInstKey.Developer {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyDeveloper] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Uuid != o.ClientKey.Uuid {
		fields[AppInstClientFieldClientKeyUuid] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.Location.Latitude != o.Location.Latitude {
		fields[AppInstClientFieldLocationLatitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Longitude != o.Location.Longitude {
		fields[AppInstClientFieldLocationLongitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.HorizontalAccuracy != o.Location.HorizontalAccuracy {
		fields[AppInstClientFieldLocationHorizontalAccuracy] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.VerticalAccuracy != o.Location.VerticalAccuracy {
		fields[AppInstClientFieldLocationVerticalAccuracy] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Altitude != o.Location.Altitude {
		fields[AppInstClientFieldLocationAltitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Course != o.Location.Course {
		fields[AppInstClientFieldLocationCourse] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Speed != o.Location.Speed {
		fields[AppInstClientFieldLocationSpeed] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Timestamp != nil && o.Location.Timestamp != nil {
		if m.Location.Timestamp.Seconds != o.Location.Timestamp.Seconds {
			fields[AppInstClientFieldLocationTimestampSeconds] = struct{}{}
			fields[AppInstClientFieldLocationTimestamp] = struct{}{}
			fields[AppInstClientFieldLocation] = struct{}{}
		}
		if m.Location.Timestamp.Nanos != o.Location.Timestamp.Nanos {
			fields[AppInstClientFieldLocationTimestampNanos] = struct{}{}
			fields[AppInstClientFieldLocationTimestamp] = struct{}{}
			fields[AppInstClientFieldLocation] = struct{}{}
		}
	} else if (m.Location.Timestamp != nil && o.Location.Timestamp == nil) || (m.Location.Timestamp == nil && o.Location.Timestamp != nil) {
		fields[AppInstClientFieldLocationTimestamp] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[AppInstClientFieldNotifyId] = struct{}{}
	}
	if m.Status != o.Status {
		fields[AppInstClientFieldStatus] = struct{}{}
	}
}

func (m *AppInstClient) CopyInFields(src *AppInstClient) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				if _, set := fmap["2.1.1.1"]; set {
					if _, set := fmap["2.1.1.1.2"]; set {
						if m.ClientKey.Key.AppKey.DeveloperKey.Name != src.ClientKey.Key.AppKey.DeveloperKey.Name {
							m.ClientKey.Key.AppKey.DeveloperKey.Name = src.ClientKey.Key.AppKey.DeveloperKey.Name
							changed++
						}
					}
				}
				if _, set := fmap["2.1.1.2"]; set {
					if m.ClientKey.Key.AppKey.Name != src.ClientKey.Key.AppKey.Name {
						m.ClientKey.Key.AppKey.Name = src.ClientKey.Key.AppKey.Name
						changed++
					}
				}
				if _, set := fmap["2.1.1.3"]; set {
					if m.ClientKey.Key.AppKey.Version != src.ClientKey.Key.AppKey.Version {
						m.ClientKey.Key.AppKey.Version = src.ClientKey.Key.AppKey.Version
						changed++
					}
				}
			}
			if _, set := fmap["2.1.4"]; set {
				if _, set := fmap["2.1.4.1"]; set {
					if _, set := fmap["2.1.4.1.1"]; set {
						if m.ClientKey.Key.ClusterInstKey.ClusterKey.Name != src.ClientKey.Key.ClusterInstKey.ClusterKey.Name {
							m.ClientKey.Key.ClusterInstKey.ClusterKey.Name = src.ClientKey.Key.ClusterInstKey.ClusterKey.Name
							changed++
						}
					}
				}
				if _, set := fmap["2.1.4.2"]; set {
					if _, set := fmap["2.1.4.2.1"]; set {
						if _, set := fmap["2.1.4.2.1.1"]; set {
							if m.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name != src.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name {
								m.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name = src.ClientKey.Key.ClusterInstKey.CloudletKey.OperatorKey.Name
								changed++
							}
						}
					}
					if _, set := fmap["2.1.4.2.2"]; set {
						if m.ClientKey.Key.ClusterInstKey.CloudletKey.Name != src.ClientKey.Key.ClusterInstKey.CloudletKey.Name {
							m.ClientKey.Key.ClusterInstKey.CloudletKey.Name = src.ClientKey.Key.ClusterInstKey.CloudletKey.Name
							changed++
						}
					}
				}
				if _, set := fmap["2.1.4.3"]; set {
					if m.ClientKey.Key.ClusterInstKey.Developer != src.ClientKey.Key.ClusterInstKey.Developer {
						m.ClientKey.Key.ClusterInstKey.Developer = src.ClientKey.Key.ClusterInstKey.Developer
						changed++
					}
				}
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.ClientKey.Uuid != src.ClientKey.Uuid {
				m.ClientKey.Uuid = src.ClientKey.Uuid
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			if m.Location.Latitude != src.Location.Latitude {
				m.Location.Latitude = src.Location.Latitude
				changed++
			}
		}
		if _, set := fmap["3.2"]; set {
			if m.Location.Longitude != src.Location.Longitude {
				m.Location.Longitude = src.Location.Longitude
				changed++
			}
		}
		if _, set := fmap["3.3"]; set {
			if m.Location.HorizontalAccuracy != src.Location.HorizontalAccuracy {
				m.Location.HorizontalAccuracy = src.Location.HorizontalAccuracy
				changed++
			}
		}
		if _, set := fmap["3.4"]; set {
			if m.Location.VerticalAccuracy != src.Location.VerticalAccuracy {
				m.Location.VerticalAccuracy = src.Location.VerticalAccuracy
				changed++
			}
		}
		if _, set := fmap["3.5"]; set {
			if m.Location.Altitude != src.Location.Altitude {
				m.Location.Altitude = src.Location.Altitude
				changed++
			}
		}
		if _, set := fmap["3.6"]; set {
			if m.Location.Course != src.Location.Course {
				m.Location.Course = src.Location.Course
				changed++
			}
		}
		if _, set := fmap["3.7"]; set {
			if m.Location.Speed != src.Location.Speed {
				m.Location.Speed = src.Location.Speed
				changed++
			}
		}
		if _, set := fmap["3.8"]; set {
			if src.Location.Timestamp != nil {
				m.Location.Timestamp = &distributed_match_engine.Timestamp{}
				if _, set := fmap["3.8.1"]; set {
					if m.Location.Timestamp.Seconds != src.Location.Timestamp.Seconds {
						m.Location.Timestamp.Seconds = src.Location.Timestamp.Seconds
						changed++
					}
				}
				if _, set := fmap["3.8.2"]; set {
					if m.Location.Timestamp.Nanos != src.Location.Timestamp.Nanos {
						m.Location.Timestamp.Nanos = src.Location.Timestamp.Nanos
						changed++
					}
				}
			} else if m.Location.Timestamp != nil {
				m.Location.Timestamp = nil
				changed++
			}
		}
	}
	if _, set := fmap["5"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.Status != src.Status {
			m.Status = src.Status
			changed++
		}
	}
	return changed
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AppInstClient) ValidateEnums() error {
	if err := m.ClientKey.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := AppInstClient_FindStatus_name[int32(m.Status)]; !ok {
		return errors.New("invalid Status")
	}
	return nil
}

func IgnoreAppInstClientFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	return cmpopts.IgnoreFields(AppInstClient{}, names...)
}

var FindStatusStrings = []string{
	"FIND_UNKNOWN",
	"FIND_FOUND",
	"FIND_NOTFOUND",
}

const (
	FindStatusFIND_UNKNOWN  uint64 = 1 << 0
	FindStatusFIND_FOUND    uint64 = 1 << 1
	FindStatusFIND_NOTFOUND uint64 = 1 << 2
)

var AppInstClient_FindStatus_CamelName = map[int32]string{
	// FIND_UNKNOWN -> FindUnknown
	0: "FindUnknown",
	// FIND_FOUND -> FindFound
	1: "FindFound",
	// FIND_NOTFOUND -> FindNotfound
	2: "FindNotfound",
}
var AppInstClient_FindStatus_CamelValue = map[string]int32{
	"FindUnknown":  0,
	"FindFound":    1,
	"FindNotfound": 2,
}

func (e *AppInstClient_FindStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := AppInstClient_FindStatus_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = AppInstClient_FindStatus_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = AppInstClient_FindStatus(val)
	return nil
}

func (e AppInstClient_FindStatus) MarshalYAML() (interface{}, error) {
	return proto.EnumName(AppInstClient_FindStatus_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *AppInstClient_FindStatus) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := AppInstClient_FindStatus_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = AppInstClient_FindStatus_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = AppInstClient_FindStatus(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = AppInstClient_FindStatus(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *AppInstClientKey) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovClient(uint64(l))
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *AppInstClient) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	l = m.ClientKey.Size()
	n += 1 + l + sovClient(uint64(l))
	l = m.Location.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovClient(uint64(m.NotifyId))
	}
	if m.Status != 0 {
		n += 1 + sovClient(uint64(m.Status))
	}
	return n
}

func sovClient(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppInstClientKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstClientKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstClientKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppInstClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (AppInstClient_FindStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("client.proto", fileDescriptorClient) }

var fileDescriptorClient = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xb4, 0xd0, 0xd0, 0xf9, 0x01, 0xbf, 0xb2, 0xfe, 0xc9, 0x58, 0xb5, 0x36, 0xf5, 0xd2,
	0x90, 0x76, 0xd7, 0xe0, 0xc5, 0x60, 0xfc, 0x53, 0x4a, 0x48, 0x48, 0xcd, 0x36, 0x29, 0x82, 0xc7,
	0x66, 0xbb, 0x3b, 0x6c, 0x27, 0xee, 0xce, 0x4c, 0x76, 0x67, 0xc1, 0xde, 0x8c, 0x9f, 0xc0, 0xe8,
	0xcd, 0x4f, 0xc0, 0xd1, 0xf0, 0x05, 0xf4, 0x26, 0x47, 0x13, 0x2f, 0x9e, 0x0c, 0x12, 0x0f, 0xc6,
	0x13, 0x09, 0xe5, 0x6e, 0x76, 0x76, 0x58, 0xa9, 0x06, 0xb8, 0xb4, 0xef, 0x3c, 0xef, 0xf3, 0xbc,
	0x79, 0xe7, 0x99, 0x67, 0xe1, 0xb4, 0xed, 0x11, 0x4c, 0x85, 0xce, 0x03, 0x26, 0x98, 0x56, 0xc0,
	0x8e, 0x8b, 0x65, 0x59, 0xba, 0xe1, 0x32, 0xe6, 0x7a, 0xd8, 0xb0, 0x38, 0x31, 0x2c, 0x4a, 0x99,
	0xb0, 0x04, 0x61, 0x34, 0x4c, 0x88, 0xa5, 0x7b, 0x2e, 0x11, 0x83, 0xa8, 0xaf, 0xdb, 0xcc, 0x37,
	0x7c, 0xd6, 0x27, 0x5e, 0x2c, 0x7c, 0x61, 0xc4, 0xbf, 0x0d, 0xdb, 0x63, 0x91, 0x63, 0x48, 0x9e,
	0x8b, 0x69, 0x5a, 0x28, 0x65, 0xeb, 0x42, 0xa5, 0xd3, 0xf0, 0x2d, 0x61, 0x0f, 0x1a, 0x98, 0xba,
	0x84, 0x62, 0xc3, 0xf1, 0x71, 0x43, 0x4a, 0x0d, 0x8f, 0xd9, 0x6a, 0x48, 0xc1, 0xe2, 0x5c, 0x95,
	0xb3, 0x16, 0xe7, 0x3d, 0x42, 0x43, 0x75, 0x85, 0xd2, 0xff, 0x0e, 0xde, 0xc2, 0x1e, 0xe3, 0x38,
	0x50, 0xc0, 0x65, 0x97, 0xb9, 0x2c, 0x19, 0x10, 0x57, 0x09, 0x5a, 0x7d, 0x9f, 0x85, 0xc5, 0x26,
	0xe7, 0xab, 0x34, 0x14, 0x2d, 0xe9, 0x40, 0x1b, 0x0f, 0xb5, 0x06, 0xcc, 0x3d, 0xc7, 0x43, 0x04,
	0x2a, 0xa0, 0xf6, 0xdf, 0xc2, 0x15, 0x3d, 0x35, 0x43, 0x57, 0xcc, 0x36, 0x1e, 0x2e, 0x4d, 0xec,
	0x7d, 0xbb, 0x95, 0xe9, 0xc6, 0x3c, 0x4d, 0x83, 0x13, 0x51, 0x44, 0x1c, 0x94, 0xad, 0x80, 0x5a,
	0xa1, 0x2b, 0xeb, 0xc5, 0xaf, 0xe0, 0xe7, 0x11, 0x02, 0x87, 0x47, 0x08, 0xbc, 0x1c, 0x21, 0xf0,
	0x7a, 0x84, 0xc0, 0xc7, 0x11, 0x02, 0xef, 0x8e, 0xd1, 0x07, 0x60, 0x71, 0x4e, 0x2d, 0x1f, 0x3f,
	0x68, 0xe3, 0x61, 0x3c, 0x30, 0xfe, 0x33, 0x2d, 0x1f, 0xd7, 0x2d, 0xce, 0xb7, 0x70, 0x10, 0x9e,
	0xc6, 0x37, 0x70, 0x10, 0x12, 0x46, 0xeb, 0xe9, 0x5d, 0x4e, 0x37, 0x97, 0x4f, 0xc0, 0x74, 0x82,
	0xf4, 0xcd, 0xc3, 0x42, 0xb2, 0x5a, 0x5e, 0x14, 0x0a, 0x1c, 0xa8, 0x7d, 0xf5, 0x96, 0xea, 0xa5,
	0xe4, 0x58, 0x69, 0x09, 0x16, 0x5c, 0x44, 0xee, 0x28, 0xde, 0x89, 0xb0, 0xba, 0x9f, 0x85, 0x33,
	0x63, 0x96, 0x69, 0x57, 0x61, 0x7e, 0x93, 0x60, 0xcf, 0x09, 0x11, 0xa8, 0xe4, 0x6a, 0x85, 0xae,
	0x3a, 0x69, 0x8f, 0x21, 0x4c, 0x62, 0xd5, 0x8b, 0xed, 0xcc, 0x4a, 0x3b, 0xaf, 0xff, 0x6b, 0x67,
	0x6a, 0xbc, 0x32, 0xb5, 0x60, 0xa7, 0x2f, 0xf1, 0x08, 0x4e, 0x79, 0xcc, 0x96, 0x91, 0x43, 0x39,
	0xa9, 0xbf, 0xa9, 0x3b, 0x24, 0x14, 0x01, 0xe9, 0x47, 0x02, 0x3b, 0x3d, 0x99, 0x90, 0x5e, 0x92,
	0x10, 0xfd, 0x09, 0xb3, 0xd5, 0x84, 0x54, 0xa4, 0xcd, 0xc3, 0x02, 0x65, 0x82, 0x6c, 0x0e, 0x7b,
	0xc4, 0x41, 0x93, 0x15, 0x50, 0xcb, 0x2d, 0xcd, 0xec, 0x8c, 0x10, 0x78, 0xb3, 0x7b, 0x6d, 0x92,
	0x32, 0xdb, 0xe7, 0xdd, 0xa9, 0xa4, 0xbf, 0xea, 0x68, 0xf7, 0x61, 0x3e, 0x14, 0x96, 0x88, 0x42,
	0x94, 0xaf, 0x80, 0xda, 0xec, 0xc2, 0xed, 0xb3, 0x56, 0xd5, 0x57, 0x08, 0x75, 0xd6, 0x24, 0xb5,
	0xab, 0x24, 0xd5, 0x26, 0x84, 0x7f, 0x50, 0xad, 0x08, 0xa7, 0x57, 0x56, 0xcd, 0xe5, 0xde, 0xba,
	0xd9, 0x36, 0x3b, 0xcf, 0xcc, 0x62, 0x46, 0x9b, 0x85, 0x50, 0x22, 0x2b, 0x9d, 0x75, 0x73, 0xb9,
	0x08, 0xb4, 0x39, 0x38, 0x23, 0xcf, 0x66, 0xe7, 0x69, 0x02, 0x65, 0x17, 0xa7, 0xe2, 0x88, 0x1c,
	0x8e, 0x50, 0x66, 0xe1, 0x13, 0xf8, 0x2b, 0x95, 0x4d, 0x4e, 0xb4, 0x5d, 0x00, 0xe7, 0xd6, 0x06,
	0x6c, 0x7b, 0xdc, 0xfb, 0xf3, 0xfc, 0x2c, 0xa1, 0xb3, 0x9a, 0x55, 0xe7, 0xd7, 0x08, 0x3d, 0xec,
	0xe2, 0x90, 0x45, 0x81, 0x8d, 0xc7, 0x5a, 0x61, 0xbd, 0x69, 0xc7, 0xd6, 0x6d, 0x10, 0xbc, 0x5d,
	0x3f, 0x2f, 0x6e, 0x3b, 0xc7, 0x08, 0xbc, 0xfa, 0xf2, 0xe3, 0x6d, 0x16, 0x55, 0x2f, 0x19, 0xe1,
	0x80, 0x6d, 0x1b, 0x16, 0xe7, 0xf1, 0x17, 0x98, 0x3c, 0xdf, 0x22, 0x98, 0xbf, 0x03, 0x96, 0x8a,
	0x7b, 0xdf, 0xcb, 0x99, 0xbd, 0x83, 0x32, 0xf8, 0x7c, 0x50, 0x06, 0xfb, 0x07, 0x65, 0xd0, 0xcf,
	0xcb, 0x75, 0xee, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xb6, 0xa4, 0xa1, 0x72, 0x04, 0x00,
	0x00,
}
