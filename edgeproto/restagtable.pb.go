// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restagtable.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OptResNames int32

const (
	OptResNames_GPU OptResNames = 0
	OptResNames_NAS OptResNames = 1
	OptResNames_NIC OptResNames = 2
)

var OptResNames_name = map[int32]string{
	0: "GPU",
	1: "NAS",
	2: "NIC",
}
var OptResNames_value = map[string]int32{
	"GPU": 0,
	"NAS": 1,
	"NIC": 2,
}

func (x OptResNames) String() string {
	return proto.EnumName(OptResNames_name, int32(x))
}
func (OptResNames) EnumDescriptor() ([]byte, []int) { return fileDescriptorRestagtable, []int{0} }

type ResTagTableKey struct {
	// Resource Table Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Operator of the cloudlet site.
	OperatorKey OperatorKey `protobuf:"bytes,2,opt,name=operator_key,json=operatorKey" json:"operator_key"`
}

func (m *ResTagTableKey) Reset()                    { *m = ResTagTableKey{} }
func (m *ResTagTableKey) String() string            { return proto.CompactTextString(m) }
func (*ResTagTableKey) ProtoMessage()               {}
func (*ResTagTableKey) Descriptor() ([]byte, []int) { return fileDescriptorRestagtable, []int{0} }

type ResTagTable struct {
	Fields []string       `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Key    ResTagTableKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// one or more string tags
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	// availability zone(s) of resource if required
	Azone string `protobuf:"bytes,4,opt,name=azone,proto3" json:"azone,omitempty"`
}

func (m *ResTagTable) Reset()                    { *m = ResTagTable{} }
func (m *ResTagTable) String() string            { return proto.CompactTextString(m) }
func (*ResTagTable) ProtoMessage()               {}
func (*ResTagTable) Descriptor() ([]byte, []int) { return fileDescriptorRestagtable, []int{1} }

func init() {
	proto.RegisterType((*ResTagTableKey)(nil), "edgeproto.ResTagTableKey")
	proto.RegisterType((*ResTagTable)(nil), "edgeproto.ResTagTable")
	proto.RegisterEnum("edgeproto.OptResNames", OptResNames_name, OptResNames_value)
}
func (this *ResTagTableKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.ResTagTableKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "OperatorKey: "+strings.Replace(this.OperatorKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResTagTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&edgeproto.ResTagTable{")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	s = append(s, "Key: "+strings.Replace(this.Key.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "Azone: "+fmt.Sprintf("%#v", this.Azone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRestagtable(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResTagTableApi service

type ResTagTableApiClient interface {
	// Create TagTable
	CreateResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error)
	// Delete TagTable
	DeleteResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error)
	UpdateResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error)
	// show TagTable
	ShowResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (ResTagTableApi_ShowResTagTableClient, error)
	// add new tag(s) to TagTable
	AddResTag(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error)
	// remove existing tag(s) from TagTable
	RemoveResTag(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error)
	// Fetch a copy of the TagTable
	GetResTagTable(ctx context.Context, in *ResTagTableKey, opts ...grpc.CallOption) (*ResTagTable, error)
}

type resTagTableApiClient struct {
	cc *grpc.ClientConn
}

func NewResTagTableApiClient(cc *grpc.ClientConn) ResTagTableApiClient {
	return &resTagTableApiClient{cc}
}

func (c *resTagTableApiClient) CreateResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/CreateResTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resTagTableApiClient) DeleteResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/DeleteResTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resTagTableApiClient) UpdateResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/UpdateResTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resTagTableApiClient) ShowResTagTable(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (ResTagTableApi_ShowResTagTableClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ResTagTableApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ResTagTableApi/ShowResTagTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &resTagTableApiShowResTagTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResTagTableApi_ShowResTagTableClient interface {
	Recv() (*ResTagTable, error)
	grpc.ClientStream
}

type resTagTableApiShowResTagTableClient struct {
	grpc.ClientStream
}

func (x *resTagTableApiShowResTagTableClient) Recv() (*ResTagTable, error) {
	m := new(ResTagTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resTagTableApiClient) AddResTag(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/AddResTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resTagTableApiClient) RemoveResTag(ctx context.Context, in *ResTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/RemoveResTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resTagTableApiClient) GetResTagTable(ctx context.Context, in *ResTagTableKey, opts ...grpc.CallOption) (*ResTagTable, error) {
	out := new(ResTagTable)
	err := grpc.Invoke(ctx, "/edgeproto.ResTagTableApi/GetResTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResTagTableApi service

type ResTagTableApiServer interface {
	// Create TagTable
	CreateResTagTable(context.Context, *ResTagTable) (*Result, error)
	// Delete TagTable
	DeleteResTagTable(context.Context, *ResTagTable) (*Result, error)
	UpdateResTagTable(context.Context, *ResTagTable) (*Result, error)
	// show TagTable
	ShowResTagTable(*ResTagTable, ResTagTableApi_ShowResTagTableServer) error
	// add new tag(s) to TagTable
	AddResTag(context.Context, *ResTagTable) (*Result, error)
	// remove existing tag(s) from TagTable
	RemoveResTag(context.Context, *ResTagTable) (*Result, error)
	// Fetch a copy of the TagTable
	GetResTagTable(context.Context, *ResTagTableKey) (*ResTagTable, error)
}

func RegisterResTagTableApiServer(s *grpc.Server, srv ResTagTableApiServer) {
	s.RegisterService(&_ResTagTableApi_serviceDesc, srv)
}

func _ResTagTableApi_CreateResTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).CreateResTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/CreateResTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).CreateResTagTable(ctx, req.(*ResTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResTagTableApi_DeleteResTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).DeleteResTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/DeleteResTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).DeleteResTagTable(ctx, req.(*ResTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResTagTableApi_UpdateResTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).UpdateResTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/UpdateResTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).UpdateResTagTable(ctx, req.(*ResTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResTagTableApi_ShowResTagTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResTagTable)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResTagTableApiServer).ShowResTagTable(m, &resTagTableApiShowResTagTableServer{stream})
}

type ResTagTableApi_ShowResTagTableServer interface {
	Send(*ResTagTable) error
	grpc.ServerStream
}

type resTagTableApiShowResTagTableServer struct {
	grpc.ServerStream
}

func (x *resTagTableApiShowResTagTableServer) Send(m *ResTagTable) error {
	return x.ServerStream.SendMsg(m)
}

func _ResTagTableApi_AddResTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).AddResTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/AddResTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).AddResTag(ctx, req.(*ResTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResTagTableApi_RemoveResTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).RemoveResTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/RemoveResTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).RemoveResTag(ctx, req.(*ResTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResTagTableApi_GetResTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResTagTableKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResTagTableApiServer).GetResTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ResTagTableApi/GetResTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResTagTableApiServer).GetResTagTable(ctx, req.(*ResTagTableKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResTagTableApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ResTagTableApi",
	HandlerType: (*ResTagTableApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResTagTable",
			Handler:    _ResTagTableApi_CreateResTagTable_Handler,
		},
		{
			MethodName: "DeleteResTagTable",
			Handler:    _ResTagTableApi_DeleteResTagTable_Handler,
		},
		{
			MethodName: "UpdateResTagTable",
			Handler:    _ResTagTableApi_UpdateResTagTable_Handler,
		},
		{
			MethodName: "AddResTag",
			Handler:    _ResTagTableApi_AddResTag_Handler,
		},
		{
			MethodName: "RemoveResTag",
			Handler:    _ResTagTableApi_RemoveResTag_Handler,
		},
		{
			MethodName: "GetResTagTable",
			Handler:    _ResTagTableApi_GetResTagTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowResTagTable",
			Handler:       _ResTagTableApi_ShowResTagTable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "restagtable.proto",
}

func (m *ResTagTableKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagTableKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRestagtable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRestagtable(dAtA, i, uint64(m.OperatorKey.Size()))
	n1, err := m.OperatorKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ResTagTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResTagTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRestagtable(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Azone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRestagtable(dAtA, i, uint64(len(m.Azone)))
		i += copy(dAtA[i:], m.Azone)
	}
	return i, nil
}

func encodeVarintRestagtable(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResTagTableKey) Matches(o *ResTagTableKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !m.OperatorKey.Matches(&o.OperatorKey, fopts...) {
		return false
	}
	return true
}

func (m *ResTagTableKey) CopyInFields(src *ResTagTableKey) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.OperatorKey.Name != src.OperatorKey.Name {
		m.OperatorKey.Name = src.OperatorKey.Name
		changed++
	}
	return changed
}

func (m *ResTagTableKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ResTagTableKey key string", "obj", m)
	}
	return string(key)
}

func ResTagTableKeyStringParse(str string, key *ResTagTableKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ResTagTableKey key string", "str", str)
	}
}

func (m *ResTagTableKey) NotFoundError() error {
	return fmt.Errorf("ResTagTable key %s not found", m.GetKeyString())
}

func (m *ResTagTableKey) ExistsError() error {
	return fmt.Errorf("ResTagTable key %s already exists", m.GetKeyString())
}

// Helper method to check that enums have valid values
func (m *ResTagTableKey) ValidateEnums() error {
	if err := m.OperatorKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *ResTagTable) Matches(o *ResTagTable, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Tags != nil {
		if m.Tags == nil && o.Tags != nil || m.Tags != nil && o.Tags == nil {
			return false
		} else if m.Tags != nil && o.Tags != nil {
			if len(m.Tags) != len(o.Tags) {
				return false
			}
			for i := 0; i < len(m.Tags); i++ {
				if o.Tags[i] != m.Tags[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Azone != "" {
		if o.Azone != m.Azone {
			return false
		}
	}
	return true
}

const ResTagTableFieldKey = "2"
const ResTagTableFieldKeyName = "2.1"
const ResTagTableFieldKeyOperatorKey = "2.2"
const ResTagTableFieldKeyOperatorKeyName = "2.2.1"
const ResTagTableFieldTags = "3"
const ResTagTableFieldAzone = "4"

var ResTagTableAllFields = []string{
	ResTagTableFieldKeyName,
	ResTagTableFieldKeyOperatorKeyName,
	ResTagTableFieldTags,
	ResTagTableFieldAzone,
}

var ResTagTableAllFieldsMap = map[string]struct{}{
	ResTagTableFieldKeyName:            struct{}{},
	ResTagTableFieldKeyOperatorKeyName: struct{}{},
	ResTagTableFieldTags:               struct{}{},
	ResTagTableFieldAzone:              struct{}{},
}

var ResTagTableAllFieldsStringMap = map[string]string{
	ResTagTableFieldKeyName:            "Res Tag Table Field Key Name",
	ResTagTableFieldKeyOperatorKeyName: "Res Tag Table Field Key Operator Key Name",
	ResTagTableFieldTags:               "Res Tag Table Field Tags",
	ResTagTableFieldAzone:              "Res Tag Table Field Azone",
}

func (m *ResTagTable) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ResTagTableFieldKey+".")
}

func (m *ResTagTable) DiffFields(o *ResTagTable, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[ResTagTableFieldKeyName] = struct{}{}
		fields[ResTagTableFieldKey] = struct{}{}
	}
	if m.Key.OperatorKey.Name != o.Key.OperatorKey.Name {
		fields[ResTagTableFieldKeyOperatorKeyName] = struct{}{}
		fields[ResTagTableFieldKeyOperatorKey] = struct{}{}
		fields[ResTagTableFieldKey] = struct{}{}
	}
	if len(m.Tags) != len(o.Tags) {
		fields[ResTagTableFieldTags] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Tags); i0++ {
			if m.Tags[i0] != o.Tags[i0] {
				fields[ResTagTableFieldTags] = struct{}{}
				break
			}
		}
	}
	if m.Azone != o.Azone {
		fields[ResTagTableFieldAzone] = struct{}{}
	}
}

func (m *ResTagTable) CopyInFields(src *ResTagTable) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if m.Key.OperatorKey.Name != src.Key.OperatorKey.Name {
					m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.Tags == nil || len(m.Tags) != len(src.Tags) {
			m.Tags = make([]string, len(src.Tags))
			changed++
		}
		copy(m.Tags, src.Tags)
		changed++
	}
	if _, set := fmap["4"]; set {
		if m.Azone != src.Azone {
			m.Azone = src.Azone
			changed++
		}
	}
	return changed
}

func (s *ResTagTable) HasFields() bool {
	return true
}

type ResTagTableStore struct {
	kvstore objstore.KVStore
}

func NewResTagTableStore(kvstore objstore.KVStore) ResTagTableStore {
	return ResTagTableStore{kvstore: kvstore}
}

func (s *ResTagTableStore) Create(ctx context.Context, m *ResTagTable, wait func(int64)) (*Result, error) {
	err := m.Validate(ResTagTableAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ResTagTable", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ResTagTableStore) Update(ctx context.Context, m *ResTagTable, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ResTagTable", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ResTagTable
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ResTagTableStore) Put(ctx context.Context, m *ResTagTable, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ResTagTableAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ResTagTable", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ResTagTableStore) Delete(ctx context.Context, m *ResTagTable, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ResTagTable", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ResTagTableStore) LoadOne(key string) (*ResTagTable, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ResTagTable
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ResTagTable data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ResTagTableStore) STMGet(stm concurrency.STM, key *ResTagTableKey, buf *ResTagTable) bool {
	keystr := objstore.DbKeyString("ResTagTable", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ResTagTableStore) STMPut(stm concurrency.STM, obj *ResTagTable, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("ResTagTable", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("ResTagTable json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ResTagTableStore) STMDel(stm concurrency.STM, key *ResTagTableKey) {
	keystr := objstore.DbKeyString("ResTagTable", key)
	stm.Del(keystr)
}

type ResTagTableKeyWatcher struct {
	cb func(ctx context.Context)
}

// ResTagTableCache caches ResTagTable objects in memory in a hash table
// and keeps them in sync with the database.
type ResTagTableCache struct {
	Objs        map[ResTagTableKey]*ResTagTable
	Mux         util.Mutex
	List        map[ResTagTableKey]struct{}
	NotifyCb    func(ctx context.Context, obj *ResTagTableKey, old *ResTagTable)
	UpdatedCb   func(ctx context.Context, old *ResTagTable, new *ResTagTable)
	KeyWatchers map[ResTagTableKey][]*ResTagTableKeyWatcher
}

func NewResTagTableCache() *ResTagTableCache {
	cache := ResTagTableCache{}
	InitResTagTableCache(&cache)
	return &cache
}

func InitResTagTableCache(cache *ResTagTableCache) {
	cache.Objs = make(map[ResTagTableKey]*ResTagTable)
	cache.KeyWatchers = make(map[ResTagTableKey][]*ResTagTableKeyWatcher)
}

func (c *ResTagTableCache) GetTypeString() string {
	return "ResTagTable"
}

func (c *ResTagTableCache) Get(key *ResTagTableKey, valbuf *ResTagTable) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ResTagTableCache) HasKey(key *ResTagTableKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ResTagTableCache) GetAllKeys(ctx context.Context, keys map[ResTagTableKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *ResTagTableCache) Update(ctx context.Context, in *ResTagTable, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *ResTagTable) (*ResTagTable, bool) {
		return in, true
	})
}

func (c *ResTagTableCache) UpdateModFunc(ctx context.Context, key *ResTagTableKey, rev int64, modFunc func(old *ResTagTable) (new *ResTagTable, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ResTagTable{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ResTagTable", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *ResTagTableCache) Delete(ctx context.Context, in *ResTagTable, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete ResTagTable", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *ResTagTableCache) Prune(ctx context.Context, validKeys map[ResTagTableKey]struct{}) {
	notify := make(map[ResTagTableKey]*ResTagTable)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ResTagTableCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ResTagTableCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ResTagTableCache) Show(filter *ResTagTable, cb func(ret *ResTagTable) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ResTagTable", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare ResTagTable", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ResTagTable", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ResTagTableGenericNotifyCb(fn func(key *ResTagTableKey, old *ResTagTable)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ResTagTableKey), obj.(*ResTagTable))
	}
}

func (c *ResTagTableCache) SetNotifyCb(fn func(ctx context.Context, obj *ResTagTableKey, old *ResTagTable)) {
	c.NotifyCb = fn
}

func (c *ResTagTableCache) SetUpdatedCb(fn func(ctx context.Context, old *ResTagTable, new *ResTagTable)) {
	c.UpdatedCb = fn
}

func (c *ResTagTableCache) WatchKey(key *ResTagTableKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ResTagTableKeyWatcher, 0)
	}
	watcher := ResTagTableKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ResTagTable", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ResTagTableCache) TriggerKeyWatchers(ctx context.Context, key *ResTagTableKey) {
	watchers := make([]*ResTagTableKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *ResTagTableCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := ResTagTable{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ResTagTable data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ResTagTableCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := ResTagTable{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ResTagTableKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *ResTagTableCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ResTagTableKey]struct{})
}

func (c *ResTagTableCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ResTagTableKey]*ResTagTable)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *ResTagTable) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *ResTagTable) GetKey() *ResTagTableKey {
	return &m.Key
}

func (m *ResTagTable) GetKeyVal() ResTagTableKey {
	return m.Key
}

func (m *ResTagTable) SetKey(key *ResTagTableKey) {
	m.Key = *key
}

func CmpSortResTagTable(a ResTagTable, b ResTagTable) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ResTagTable) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

var OptResNamesStrings = []string{
	"GPU",
	"NAS",
	"NIC",
}

const (
	OptResNamesGPU uint64 = 1 << 0
	OptResNamesNAS uint64 = 1 << 1
	OptResNamesNIC uint64 = 1 << 2
)

var OptResNames_CamelName = map[int32]string{
	// GPU -> Gpu
	0: "Gpu",
	// NAS -> Nas
	1: "Nas",
	// NIC -> Nic
	2: "Nic",
}
var OptResNames_CamelValue = map[string]int32{
	"Gpu": 0,
	"Nas": 1,
	"Nic": 2,
}

func (e *OptResNames) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := OptResNames_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = OptResNames_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = OptResNames(val)
	return nil
}

func (e OptResNames) MarshalYAML() (interface{}, error) {
	return proto.EnumName(OptResNames_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *OptResNames) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := OptResNames_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = OptResNames_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = OptResNames(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = OptResNames(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *ResTagTableKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRestagtable(uint64(l))
	}
	l = m.OperatorKey.Size()
	n += 1 + l + sovRestagtable(uint64(l))
	return n
}

func (m *ResTagTable) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRestagtable(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovRestagtable(uint64(l))
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovRestagtable(uint64(l))
		}
	}
	l = len(m.Azone)
	if l > 0 {
		n += 1 + l + sovRestagtable(uint64(l))
	}
	return n
}

func sovRestagtable(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRestagtable(x uint64) (n int) {
	return sovRestagtable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResTagTableKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestagtable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagTableKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagTableKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestagtable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRestagtable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResTagTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestagtable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResTagTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResTagTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Azone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestagtable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRestagtable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRestagtable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRestagtable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestagtable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRestagtable
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRestagtable
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRestagtable(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRestagtable = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRestagtable   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("restagtable.proto", fileDescriptorRestagtable) }

var fileDescriptorRestagtable = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x4d, 0x6c, 0xc9, 0xa4, 0xa6, 0xc9, 0x5a, 0xca, 0x34, 0x48, 0x5a, 0xf7, 0x14,
	0x4b, 0xcd, 0x6a, 0xbd, 0x48, 0xa1, 0x48, 0x5a, 0xa1, 0x48, 0xb1, 0x95, 0xed, 0x8f, 0xab, 0x4c,
	0xb2, 0xcf, 0xe9, 0xe2, 0x66, 0x67, 0xd9, 0x99, 0xb5, 0xb6, 0x78, 0xd0, 0x5e, 0xbc, 0x16, 0xbc,
	0x88, 0x27, 0xef, 0x5e, 0xfc, 0x13, 0x3c, 0x06, 0x4f, 0x82, 0x37, 0x0f, 0xa2, 0xc5, 0x83, 0xf4,
	0x24, 0x34, 0x01, 0x8f, 0x32, 0x93, 0x6d, 0x9b, 0xa5, 0x06, 0x5a, 0x0f, 0xbd, 0x84, 0xef, 0xbc,
	0x99, 0x37, 0xdf, 0xcf, 0xf7, 0xed, 0x10, 0x5c, 0x0c, 0x41, 0x48, 0xca, 0x24, 0xad, 0x7b, 0x50,
	0x0d, 0x42, 0x2e, 0xb9, 0x91, 0x05, 0x87, 0x81, 0x96, 0xa5, 0xab, 0x8c, 0x73, 0xe6, 0x81, 0x45,
	0x03, 0xd7, 0xa2, 0xbe, 0xcf, 0x25, 0x95, 0x2e, 0xf7, 0x45, 0xf7, 0x60, 0xe9, 0x0e, 0x73, 0xe5,
	0x66, 0x54, 0xaf, 0x36, 0x78, 0xd3, 0x6a, 0xf2, 0xba, 0xeb, 0xa9, 0xc6, 0x67, 0x96, 0xfa, 0xbd,
	0xd1, 0xf0, 0x78, 0xe4, 0x58, 0xfa, 0x1c, 0x03, 0xff, 0x58, 0xc4, 0x9d, 0xc3, 0x21, 0x88, 0xc8,
	0x93, 0xf1, 0x2a, 0xcf, 0x03, 0x08, 0xa9, 0xe4, 0x61, 0xbc, 0x1e, 0x65, 0x9c, 0x71, 0x2d, 0x2d,
	0xa5, 0xba, 0x55, 0x73, 0x0f, 0xe1, 0xbc, 0x0d, 0x62, 0x8d, 0xb2, 0x35, 0x05, 0xbb, 0x04, 0xdb,
	0x86, 0x81, 0x33, 0x3e, 0x6d, 0x02, 0x41, 0x93, 0xa8, 0x92, 0xb5, 0xb5, 0x36, 0xee, 0xe2, 0xe1,
	0xa3, 0xeb, 0x1e, 0x3d, 0x81, 0x6d, 0x32, 0x30, 0x89, 0x2a, 0xb9, 0x99, 0xb1, 0xea, 0x71, 0xa8,
	0xea, 0x4a, 0xbc, 0xbd, 0x04, 0xdb, 0xf3, 0x99, 0xd6, 0xb7, 0x89, 0x94, 0x9d, 0xe3, 0x27, 0xa5,
	0xd9, 0xeb, 0xbf, 0x0e, 0x09, 0xfa, 0x73, 0x48, 0xd0, 0xdb, 0x0e, 0x19, 0x3f, 0xda, 0x98, 0xeb,
	0x69, 0xaa, 0x2e, 0xd3, 0x26, 0x7c, 0x78, 0x37, 0x81, 0xcc, 0xaf, 0x08, 0xe7, 0x7a, 0x90, 0x8c,
	0x31, 0x3c, 0xf8, 0xd8, 0x05, 0xcf, 0x11, 0x04, 0x4d, 0xa6, 0x2b, 0x59, 0x3b, 0x5e, 0x19, 0xb7,
	0x70, 0xfa, 0x04, 0x65, 0xbc, 0x07, 0x25, 0x99, 0x27, 0xa6, 0x51, 0x67, 0x55, 0x34, 0x49, 0x99,
	0x20, 0x69, 0x7d, 0x91, 0xd6, 0xc6, 0x28, 0xbe, 0x44, 0x77, 0xb8, 0x0f, 0x24, 0xa3, 0xf3, 0x76,
	0x17, 0xb3, 0x1b, 0x8a, 0xf7, 0xf7, 0x21, 0x41, 0x2f, 0xda, 0x04, 0xed, 0xb5, 0x09, 0x7a, 0xd3,
	0x26, 0xe8, 0x63, 0x5b, 0xf3, 0x4f, 0x85, 0x20, 0xe6, 0x8e, 0x90, 0xa7, 0x8f, 0xc3, 0xa8, 0xca,
	0xa9, 0x40, 0x1d, 0x92, 0xfa, 0xd4, 0x21, 0x99, 0x35, 0xca, 0x84, 0x0a, 0x37, 0x55, 0xc1, 0xb9,
	0x95, 0x40, 0xda, 0x20, 0xd4, 0xae, 0x30, 0x86, 0x70, 0x7a, 0xf1, 0xe1, 0x7a, 0x21, 0xa5, 0xc4,
	0x72, 0x6d, 0xb5, 0x80, 0xb4, 0xb8, 0xbf, 0x50, 0x18, 0x98, 0x79, 0x3f, 0x94, 0xf8, 0x32, 0xb5,
	0xc0, 0x35, 0x5e, 0x22, 0x5c, 0x5c, 0x08, 0x81, 0x4a, 0x48, 0xcc, 0xe7, 0xdf, 0xd1, 0x4b, 0xc5,
	0x64, 0x3d, 0xf2, 0xa4, 0x59, 0x3b, 0x68, 0x93, 0x6b, 0x36, 0x08, 0x1e, 0x85, 0x8d, 0xde, 0x3b,
	0xa6, 0x6b, 0x0d, 0xf5, 0x04, 0x1f, 0x50, 0x9f, 0x32, 0x98, 0xde, 0xfd, 0xf2, 0xf3, 0xf5, 0xc0,
	0x98, 0x59, 0xb4, 0x1a, 0xda, 0xcb, 0x62, 0x41, 0xa4, 0x1e, 0x73, 0xdd, 0x9b, 0x45, 0x53, 0x9a,
	0xe1, 0x1e, 0x78, 0x70, 0x51, 0x0c, 0x8e, 0xf6, 0x3a, 0xcd, 0xb0, 0x1e, 0x38, 0x17, 0x36, 0x87,
	0x48, 0x7b, 0x25, 0x19, 0x76, 0x11, 0x1e, 0x59, 0xdd, 0xe4, 0x5b, 0x67, 0x21, 0xe8, 0x53, 0x37,
	0xe7, 0x0e, 0xda, 0x64, 0xa2, 0x3f, 0xc6, 0x86, 0x0b, 0x5b, 0x5d, 0x88, 0x51, 0x73, 0xc4, 0x12,
	0x9b, 0x7c, 0x2b, 0x81, 0x70, 0x13, 0x19, 0x3b, 0x38, 0x5b, 0x73, 0x9c, 0x6e, 0xe7, 0x79, 0xf2,
	0xcf, 0x9f, 0x29, 0x7f, 0xab, 0x43, 0x90, 0xb6, 0xbf, 0x62, 0xe6, 0x2d, 0xea, 0x38, 0xc9, 0x01,
	0x3c, 0xc7, 0xc3, 0x36, 0x34, 0xf9, 0x53, 0x38, 0xbf, 0x7d, 0xed, 0x7c, 0xf6, 0x86, 0x79, 0xd9,
	0x0a, 0x9b, 0x49, 0xf7, 0x57, 0x08, 0xe7, 0x17, 0x41, 0xf6, 0x4e, 0xbf, 0xff, 0x5f, 0x40, 0xdf,
	0x0f, 0xf0, 0x1f, 0x73, 0x60, 0x20, 0x13, 0x24, 0xa5, 0xcc, 0x5e, 0x87, 0xa4, 0xe6, 0x0b, 0xad,
	0x1f, 0xe5, 0x54, 0x6b, 0xbf, 0x8c, 0x3e, 0xef, 0x97, 0xd1, 0xf7, 0xfd, 0x32, 0xaa, 0x0f, 0x6a,
	0xbb, 0xdb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x20, 0x75, 0x8f, 0x1e, 0x0c, 0x06, 0x00, 0x00,
}
