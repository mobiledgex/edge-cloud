// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Policy proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";
import "autoscalepolicy.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message SecurityRule {
  // TCP, UDP, ICMP
  string protocol = 1;
  // TCP or UDP port range start
  uint32 port_range_min = 2;  
  // TCP or UDP port range end
  uint32 port_range_max = 3;
  // Remote CIDR X.X.X.X/X
  string remote_cidr = 4;
}


// TrustPolicy defines security restrictions for cluster instances
// nodes scaled up or down.
message TrustPolicy {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  PolicyKey key = 2 [(gogoproto.nullable) = false];
  // List of outbound security rules for whitelisting traffic
  repeated SecurityRule outbound_security_rules = 3 [(gogoproto.nullable) = false];
  // Preparing to be deleted
  bool delete_prepare = 4 [(protogen.backend) = true]; 
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;  
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.alias) = "name=Key.Name,cloudletorg=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.noconfig) = "DeletePrepare";
}

service TrustPolicyApi {
  // Create a Trust Policy
  rpc CreateTrustPolicy(TrustPolicy) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/trustpolicy"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete a Trust policy
  rpc DeleteTrustPolicy(TrustPolicy) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/trustpolicy"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Update a Trust policy
  rpc UpdateTrustPolicy(TrustPolicy) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/trustpolicy"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Show Trust Policies. Any fields specified will be used to filter results.
  rpc ShowTrustPolicy(TrustPolicy) returns (stream TrustPolicy) {
    option (google.api.http) = {
      post: "/show/trustpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
}
