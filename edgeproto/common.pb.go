// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"

import "errors"
import "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Liveness int32

const (
	Liveness_LivenessUnknown Liveness = 0
	Liveness_LivenessStatic  Liveness = 1
	Liveness_LivenessDynamic Liveness = 2
)

var Liveness_name = map[int32]string{
	0: "LivenessUnknown",
	1: "LivenessStatic",
	2: "LivenessDynamic",
}
var Liveness_value = map[string]int32{
	"LivenessUnknown": 0,
	"LivenessStatic":  1,
	"LivenessDynamic": 2,
}

func (x Liveness) String() string {
	return proto.EnumName(Liveness_name, int32(x))
}
func (Liveness) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func init() {
	proto.RegisterEnum("edgeproto.Liveness", Liveness_name, Liveness_value)
}

var LivenessStrings = []string{
	"LivenessUnknown",
	"LivenessStatic",
	"LivenessDynamic",
}

const (
	LivenessLivenessUnknown uint64 = 1 << 0
	LivenessLivenessStatic  uint64 = 1 << 1
	LivenessLivenessDynamic uint64 = 1 << 2
)

func (e *Liveness) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := Liveness_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = Liveness_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = Liveness(val)
	return nil
}

func (e Liveness) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func init() { proto.RegisterFile("common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0x4d, 0x49, 0x4f, 0x05, 0x33,
	0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2,
	0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0x0a, 0xb5, 0x3c, 0xb8, 0x38, 0x7c, 0x32,
	0xcb, 0x52, 0xf3, 0x52, 0x8b, 0x8b, 0x85, 0x84, 0xb9, 0xf8, 0x61, 0xec, 0xd0, 0xbc, 0xec, 0xbc,
	0xfc, 0xf2, 0x3c, 0x01, 0x06, 0x21, 0x21, 0x2e, 0x3e, 0x98, 0x60, 0x30, 0x48, 0x6b, 0xb2, 0x00,
	0x23, 0xb2, 0x42, 0x97, 0xca, 0xbc, 0xc4, 0xdc, 0xcc, 0x64, 0x01, 0x26, 0x27, 0x81, 0x13, 0x0f,
	0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x24,
	0x36, 0xb0, 0x15, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xa0, 0xb4, 0xc8, 0x9b, 0x00,
	0x00, 0x00,
}
