// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacypolicy.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OutboundSecurityRule struct {
	// tcp, udp, icmp
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// TCP or UDP port range start
	PortRangeMin uint32 `protobuf:"varint,2,opt,name=port_range_min,json=portRangeMin,proto3" json:"port_range_min,omitempty"`
	// TCP or UDP port range end
	PortRangeMax uint32 `protobuf:"varint,3,opt,name=port_range_max,json=portRangeMax,proto3" json:"port_range_max,omitempty"`
	// remote CIDR X.X.X.X/X
	RemoteCidr string `protobuf:"bytes,4,opt,name=remote_cidr,json=remoteCidr,proto3" json:"remote_cidr,omitempty"`
}

func (m *OutboundSecurityRule) Reset()         { *m = OutboundSecurityRule{} }
func (m *OutboundSecurityRule) String() string { return proto.CompactTextString(m) }
func (*OutboundSecurityRule) ProtoMessage()    {}
func (*OutboundSecurityRule) Descriptor() ([]byte, []int) {
	return fileDescriptorPrivacypolicy, []int{0}
}

// PrivacyPolicy defines security restrictions for cluster instances
// nodes scaled up or down.
type PrivacyPolicy struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key PolicyKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// list of outbound security rules for whitelisting traffic
	OutboundSecurityRules []OutboundSecurityRule `protobuf:"bytes,3,rep,name=outbound_security_rules,json=outboundSecurityRules" json:"outbound_security_rules"`
}

func (m *PrivacyPolicy) Reset()                    { *m = PrivacyPolicy{} }
func (m *PrivacyPolicy) String() string            { return proto.CompactTextString(m) }
func (*PrivacyPolicy) ProtoMessage()               {}
func (*PrivacyPolicy) Descriptor() ([]byte, []int) { return fileDescriptorPrivacypolicy, []int{1} }

func init() {
	proto.RegisterType((*OutboundSecurityRule)(nil), "edgeproto.OutboundSecurityRule")
	proto.RegisterType((*PrivacyPolicy)(nil), "edgeproto.PrivacyPolicy")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PrivacyPolicyApi service

type PrivacyPolicyApiClient interface {
	// Create a Privacy Policy
	CreatePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error)
	// Delete a Privacy policy
	DeletePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error)
	// Update a Privacy policy
	UpdatePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error)
	// Show Privacy Policies. Any fields specified will be used to filter results.
	ShowPrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (PrivacyPolicyApi_ShowPrivacyPolicyClient, error)
}

type privacyPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewPrivacyPolicyApiClient(cc *grpc.ClientConn) PrivacyPolicyApiClient {
	return &privacyPolicyApiClient{cc}
}

func (c *privacyPolicyApiClient) CreatePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.PrivacyPolicyApi/CreatePrivacyPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyPolicyApiClient) DeletePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.PrivacyPolicyApi/DeletePrivacyPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyPolicyApiClient) UpdatePrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.PrivacyPolicyApi/UpdatePrivacyPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyPolicyApiClient) ShowPrivacyPolicy(ctx context.Context, in *PrivacyPolicy, opts ...grpc.CallOption) (PrivacyPolicyApi_ShowPrivacyPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PrivacyPolicyApi_serviceDesc.Streams[0], c.cc, "/edgeproto.PrivacyPolicyApi/ShowPrivacyPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &privacyPolicyApiShowPrivacyPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrivacyPolicyApi_ShowPrivacyPolicyClient interface {
	Recv() (*PrivacyPolicy, error)
	grpc.ClientStream
}

type privacyPolicyApiShowPrivacyPolicyClient struct {
	grpc.ClientStream
}

func (x *privacyPolicyApiShowPrivacyPolicyClient) Recv() (*PrivacyPolicy, error) {
	m := new(PrivacyPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PrivacyPolicyApi service

type PrivacyPolicyApiServer interface {
	// Create a Privacy Policy
	CreatePrivacyPolicy(context.Context, *PrivacyPolicy) (*Result, error)
	// Delete a Privacy policy
	DeletePrivacyPolicy(context.Context, *PrivacyPolicy) (*Result, error)
	// Update a Privacy policy
	UpdatePrivacyPolicy(context.Context, *PrivacyPolicy) (*Result, error)
	// Show Privacy Policies. Any fields specified will be used to filter results.
	ShowPrivacyPolicy(*PrivacyPolicy, PrivacyPolicyApi_ShowPrivacyPolicyServer) error
}

func RegisterPrivacyPolicyApiServer(s *grpc.Server, srv PrivacyPolicyApiServer) {
	s.RegisterService(&_PrivacyPolicyApi_serviceDesc, srv)
}

func _PrivacyPolicyApi_CreatePrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivacyPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyPolicyApiServer).CreatePrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.PrivacyPolicyApi/CreatePrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyPolicyApiServer).CreatePrivacyPolicy(ctx, req.(*PrivacyPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyPolicyApi_DeletePrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivacyPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyPolicyApiServer).DeletePrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.PrivacyPolicyApi/DeletePrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyPolicyApiServer).DeletePrivacyPolicy(ctx, req.(*PrivacyPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyPolicyApi_UpdatePrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivacyPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyPolicyApiServer).UpdatePrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.PrivacyPolicyApi/UpdatePrivacyPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyPolicyApiServer).UpdatePrivacyPolicy(ctx, req.(*PrivacyPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivacyPolicyApi_ShowPrivacyPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrivacyPolicy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrivacyPolicyApiServer).ShowPrivacyPolicy(m, &privacyPolicyApiShowPrivacyPolicyServer{stream})
}

type PrivacyPolicyApi_ShowPrivacyPolicyServer interface {
	Send(*PrivacyPolicy) error
	grpc.ServerStream
}

type privacyPolicyApiShowPrivacyPolicyServer struct {
	grpc.ServerStream
}

func (x *privacyPolicyApiShowPrivacyPolicyServer) Send(m *PrivacyPolicy) error {
	return x.ServerStream.SendMsg(m)
}

var _PrivacyPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.PrivacyPolicyApi",
	HandlerType: (*PrivacyPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivacyPolicy",
			Handler:    _PrivacyPolicyApi_CreatePrivacyPolicy_Handler,
		},
		{
			MethodName: "DeletePrivacyPolicy",
			Handler:    _PrivacyPolicyApi_DeletePrivacyPolicy_Handler,
		},
		{
			MethodName: "UpdatePrivacyPolicy",
			Handler:    _PrivacyPolicyApi_UpdatePrivacyPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowPrivacyPolicy",
			Handler:       _PrivacyPolicyApi_ShowPrivacyPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "privacypolicy.proto",
}

func (m *OutboundSecurityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundSecurityRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivacypolicy(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.PortRangeMin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivacypolicy(dAtA, i, uint64(m.PortRangeMin))
	}
	if m.PortRangeMax != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrivacypolicy(dAtA, i, uint64(m.PortRangeMax))
	}
	if len(m.RemoteCidr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPrivacypolicy(dAtA, i, uint64(len(m.RemoteCidr)))
		i += copy(dAtA[i:], m.RemoteCidr)
	}
	return i, nil
}

func (m *PrivacyPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivacyPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPrivacypolicy(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.OutboundSecurityRules) > 0 {
		for _, msg := range m.OutboundSecurityRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPrivacypolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPrivacypolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OutboundSecurityRule) CopyInFields(src *OutboundSecurityRule) int {
	changed := 0
	if m.Protocol != src.Protocol {
		m.Protocol = src.Protocol
		changed++
	}
	if m.PortRangeMin != src.PortRangeMin {
		m.PortRangeMin = src.PortRangeMin
		changed++
	}
	if m.PortRangeMax != src.PortRangeMax {
		m.PortRangeMax = src.PortRangeMax
		changed++
	}
	if m.RemoteCidr != src.RemoteCidr {
		m.RemoteCidr = src.RemoteCidr
		changed++
	}
	return changed
}

func (m *OutboundSecurityRule) DeepCopyIn(src *OutboundSecurityRule) {
	m.Protocol = src.Protocol
	m.PortRangeMin = src.PortRangeMin
	m.PortRangeMax = src.PortRangeMax
	m.RemoteCidr = src.RemoteCidr
}

// Helper method to check that enums have valid values
func (m *OutboundSecurityRule) ValidateEnums() error {
	return nil
}

func (m *PrivacyPolicy) Matches(o *PrivacyPolicy, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.OutboundSecurityRules != nil {
		if m.OutboundSecurityRules == nil && o.OutboundSecurityRules != nil || m.OutboundSecurityRules != nil && o.OutboundSecurityRules == nil {
			return false
		} else if m.OutboundSecurityRules != nil && o.OutboundSecurityRules != nil {
			if len(m.OutboundSecurityRules) != len(o.OutboundSecurityRules) {
				return false
			}
			for i := 0; i < len(m.OutboundSecurityRules); i++ {
			}
		}
	}
	return true
}

const PrivacyPolicyFieldKey = "2"
const PrivacyPolicyFieldKeyOrganization = "2.1"
const PrivacyPolicyFieldKeyName = "2.2"
const PrivacyPolicyFieldOutboundSecurityRules = "3"
const PrivacyPolicyFieldOutboundSecurityRulesProtocol = "3.1"
const PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin = "3.2"
const PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax = "3.3"
const PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr = "3.4"

var PrivacyPolicyAllFields = []string{
	PrivacyPolicyFieldKeyOrganization,
	PrivacyPolicyFieldKeyName,
	PrivacyPolicyFieldOutboundSecurityRulesProtocol,
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin,
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax,
	PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr,
}

var PrivacyPolicyAllFieldsMap = map[string]struct{}{
	PrivacyPolicyFieldKeyOrganization:                   struct{}{},
	PrivacyPolicyFieldKeyName:                           struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesProtocol:     struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin: struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax: struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr:   struct{}{},
}

var PrivacyPolicyAllFieldsStringMap = map[string]string{
	PrivacyPolicyFieldKeyOrganization:                   "Key Organization",
	PrivacyPolicyFieldKeyName:                           "Key Name",
	PrivacyPolicyFieldOutboundSecurityRulesProtocol:     "Outbound Security Rules Protocol",
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin: "Outbound Security Rules Port Range Min",
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax: "Outbound Security Rules Port Range Max",
	PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr:   "Outbound Security Rules Remote Cidr",
}

func (m *PrivacyPolicy) IsKeyField(s string) bool {
	return strings.HasPrefix(s, PrivacyPolicyFieldKey+".") || s == PrivacyPolicyFieldKey
}

func (m *PrivacyPolicy) DiffFields(o *PrivacyPolicy, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[PrivacyPolicyFieldKeyOrganization] = struct{}{}
		fields[PrivacyPolicyFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[PrivacyPolicyFieldKeyName] = struct{}{}
		fields[PrivacyPolicyFieldKey] = struct{}{}
	}
	if len(m.OutboundSecurityRules) != len(o.OutboundSecurityRules) {
		fields[PrivacyPolicyFieldOutboundSecurityRules] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.OutboundSecurityRules); i0++ {
			if m.OutboundSecurityRules[i0].Protocol != o.OutboundSecurityRules[i0].Protocol {
				fields[PrivacyPolicyFieldOutboundSecurityRulesProtocol] = struct{}{}
				fields[PrivacyPolicyFieldOutboundSecurityRules] = struct{}{}
			}
			if m.OutboundSecurityRules[i0].PortRangeMin != o.OutboundSecurityRules[i0].PortRangeMin {
				fields[PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin] = struct{}{}
				fields[PrivacyPolicyFieldOutboundSecurityRules] = struct{}{}
			}
			if m.OutboundSecurityRules[i0].PortRangeMax != o.OutboundSecurityRules[i0].PortRangeMax {
				fields[PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax] = struct{}{}
				fields[PrivacyPolicyFieldOutboundSecurityRules] = struct{}{}
			}
			if m.OutboundSecurityRules[i0].RemoteCidr != o.OutboundSecurityRules[i0].RemoteCidr {
				fields[PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr] = struct{}{}
				fields[PrivacyPolicyFieldOutboundSecurityRules] = struct{}{}
			}
		}
	}
}

var UpdatePrivacyPolicyFieldsMap = map[string]struct{}{
	PrivacyPolicyFieldOutboundSecurityRules:             struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesProtocol:     struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMin: struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesPortRangeMax: struct{}{},
	PrivacyPolicyFieldOutboundSecurityRulesRemoteCidr:   struct{}{},
}

func (m *PrivacyPolicy) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdatePrivacyPolicyFieldsMap[field]; !ok {
			if _, ok := PrivacyPolicyAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, PrivacyPolicyAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *PrivacyPolicy) CopyInFields(src *PrivacyPolicy) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if src.OutboundSecurityRules != nil {
			m.OutboundSecurityRules = src.OutboundSecurityRules
			changed++
		} else if m.OutboundSecurityRules != nil {
			m.OutboundSecurityRules = nil
			changed++
		}
	}
	return changed
}

func (m *PrivacyPolicy) DeepCopyIn(src *PrivacyPolicy) {
	m.Key.DeepCopyIn(&src.Key)
	if src.OutboundSecurityRules != nil {
		m.OutboundSecurityRules = make([]OutboundSecurityRule, len(src.OutboundSecurityRules), len(src.OutboundSecurityRules))
		for ii, s := range src.OutboundSecurityRules {
			m.OutboundSecurityRules[ii].DeepCopyIn(&s)
		}
	} else {
		m.OutboundSecurityRules = nil
	}
}

func (s *PrivacyPolicy) HasFields() bool {
	return true
}

type PrivacyPolicyStore struct {
	kvstore objstore.KVStore
}

func NewPrivacyPolicyStore(kvstore objstore.KVStore) PrivacyPolicyStore {
	return PrivacyPolicyStore{kvstore: kvstore}
}

func (s *PrivacyPolicyStore) Create(ctx context.Context, m *PrivacyPolicy, wait func(int64)) (*Result, error) {
	err := m.Validate(PrivacyPolicyAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("PrivacyPolicy", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *PrivacyPolicyStore) Update(ctx context.Context, m *PrivacyPolicy, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("PrivacyPolicy", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur PrivacyPolicy
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *PrivacyPolicyStore) Put(ctx context.Context, m *PrivacyPolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(PrivacyPolicyAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("PrivacyPolicy", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *PrivacyPolicyStore) Delete(ctx context.Context, m *PrivacyPolicy, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("PrivacyPolicy", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *PrivacyPolicyStore) LoadOne(key string) (*PrivacyPolicy, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj PrivacyPolicy
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse PrivacyPolicy data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *PrivacyPolicyStore) STMGet(stm concurrency.STM, key *PolicyKey, buf *PrivacyPolicy) bool {
	keystr := objstore.DbKeyString("PrivacyPolicy", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *PrivacyPolicyStore) STMPut(stm concurrency.STM, obj *PrivacyPolicy, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("PrivacyPolicy", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("PrivacyPolicy json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *PrivacyPolicyStore) STMDel(stm concurrency.STM, key *PolicyKey) {
	keystr := objstore.DbKeyString("PrivacyPolicy", key)
	stm.Del(keystr)
}

type PrivacyPolicyKeyWatcher struct {
	cb func(ctx context.Context)
}

type PrivacyPolicyCacheData struct {
	Obj    *PrivacyPolicy
	ModRev int64
}

// PrivacyPolicyCache caches PrivacyPolicy objects in memory in a hash table
// and keeps them in sync with the database.
type PrivacyPolicyCache struct {
	Objs          map[PolicyKey]*PrivacyPolicyCacheData
	Mux           util.Mutex
	List          map[PolicyKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *PolicyKey, old *PrivacyPolicy, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *PrivacyPolicy, new *PrivacyPolicy)
	DeletedCbs    []func(ctx context.Context, old *PrivacyPolicy)
	KeyWatchers   map[PolicyKey][]*PrivacyPolicyKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *PolicyKey)
	DeletedKeyCbs []func(ctx context.Context, key *PolicyKey)
}

func NewPrivacyPolicyCache() *PrivacyPolicyCache {
	cache := PrivacyPolicyCache{}
	InitPrivacyPolicyCache(&cache)
	return &cache
}

func InitPrivacyPolicyCache(cache *PrivacyPolicyCache) {
	cache.Objs = make(map[PolicyKey]*PrivacyPolicyCacheData)
	cache.KeyWatchers = make(map[PolicyKey][]*PrivacyPolicyKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *PrivacyPolicyCache) GetTypeString() string {
	return "PrivacyPolicy"
}

func (c *PrivacyPolicyCache) Get(key *PolicyKey, valbuf *PrivacyPolicy) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *PrivacyPolicyCache) GetWithRev(key *PolicyKey, valbuf *PrivacyPolicy, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *PrivacyPolicyCache) HasKey(key *PolicyKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *PrivacyPolicyCache) GetAllKeys(ctx context.Context, cb func(key *PolicyKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *PrivacyPolicyCache) Update(ctx context.Context, in *PrivacyPolicy, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *PrivacyPolicy) (*PrivacyPolicy, bool) {
		return in, true
	})
}

func (c *PrivacyPolicyCache) UpdateModFunc(ctx context.Context, key *PolicyKey, modRev int64, modFunc func(old *PrivacyPolicy) (new *PrivacyPolicy, changed bool)) {
	c.Mux.Lock()
	var old *PrivacyPolicy
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &PrivacyPolicy{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &PrivacyPolicy{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &PrivacyPolicyCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *PrivacyPolicyCache) Delete(ctx context.Context, in *PrivacyPolicy, modRev int64) {
	c.Mux.Lock()
	var old *PrivacyPolicy
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *PrivacyPolicyCache) Prune(ctx context.Context, validKeys map[PolicyKey]struct{}) {
	notify := make(map[PolicyKey]*PrivacyPolicyCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *PrivacyPolicyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *PrivacyPolicyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *PrivacyPolicyCache) Show(filter *PrivacyPolicy, cb func(ret *PrivacyPolicy) error) error {
	log.DebugLog(log.DebugLevelApi, "Show PrivacyPolicy", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare PrivacyPolicy", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show PrivacyPolicy", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func PrivacyPolicyGenericNotifyCb(fn func(key *PolicyKey, old *PrivacyPolicy)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*PolicyKey), obj.(*PrivacyPolicy))
	}
}

func (c *PrivacyPolicyCache) SetNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *PrivacyPolicy, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *PolicyKey, old *PrivacyPolicy, modRev int64){fn}
}

func (c *PrivacyPolicyCache) SetUpdatedCb(fn func(ctx context.Context, old *PrivacyPolicy, new *PrivacyPolicy)) {
	c.UpdatedCbs = []func(ctx context.Context, old *PrivacyPolicy, new *PrivacyPolicy){fn}
}

func (c *PrivacyPolicyCache) SetDeletedCb(fn func(ctx context.Context, old *PrivacyPolicy)) {
	c.DeletedCbs = []func(ctx context.Context, old *PrivacyPolicy){fn}
}

func (c *PrivacyPolicyCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *PrivacyPolicyCache) SetDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *PolicyKey){fn}
}

func (c *PrivacyPolicyCache) AddUpdatedCb(fn func(ctx context.Context, old *PrivacyPolicy, new *PrivacyPolicy)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *PrivacyPolicyCache) AddDeletedCb(fn func(ctx context.Context, old *PrivacyPolicy)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *PrivacyPolicyCache) AddNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *PrivacyPolicy, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *PrivacyPolicyCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *PrivacyPolicyCache) AddDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *PrivacyPolicyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *PrivacyPolicyCache) WatchKey(key *PolicyKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*PrivacyPolicyKeyWatcher, 0)
	}
	watcher := PrivacyPolicyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching PrivacyPolicy", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *PrivacyPolicyCache) TriggerKeyWatchers(ctx context.Context, key *PolicyKey) {
	watchers := make([]*PrivacyPolicyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *PrivacyPolicyCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := PrivacyPolicy{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse PrivacyPolicy data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *PrivacyPolicyCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := PrivacyPolicy{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	PolicyKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *PrivacyPolicyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[PolicyKey]struct{})
}

func (c *PrivacyPolicyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[PolicyKey]*PrivacyPolicyCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *PrivacyPolicyCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *PrivacyPolicy) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *PrivacyPolicy) GetKey() *PolicyKey {
	return &m.Key
}

func (m *PrivacyPolicy) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *PrivacyPolicy) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortPrivacyPolicy(a PrivacyPolicy, b PrivacyPolicy) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *PrivacyPolicy) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.OutboundSecurityRules {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *OutboundSecurityRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovPrivacypolicy(uint64(l))
	}
	if m.PortRangeMin != 0 {
		n += 1 + sovPrivacypolicy(uint64(m.PortRangeMin))
	}
	if m.PortRangeMax != 0 {
		n += 1 + sovPrivacypolicy(uint64(m.PortRangeMax))
	}
	l = len(m.RemoteCidr)
	if l > 0 {
		n += 1 + l + sovPrivacypolicy(uint64(l))
	}
	return n
}

func (m *PrivacyPolicy) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovPrivacypolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovPrivacypolicy(uint64(l))
	if len(m.OutboundSecurityRules) > 0 {
		for _, e := range m.OutboundSecurityRules {
			l = e.Size()
			n += 1 + l + sovPrivacypolicy(uint64(l))
		}
	}
	return n
}

func sovPrivacypolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivacypolicy(x uint64) (n int) {
	return sovPrivacypolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutboundSecurityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacypolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundSecurityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundSecurityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRangeMin", wireType)
			}
			m.PortRangeMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortRangeMin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRangeMax", wireType)
			}
			m.PortRangeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortRangeMax |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteCidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacypolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivacyPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacypolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivacyPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivacyPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundSecurityRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundSecurityRules = append(m.OutboundSecurityRules, OutboundSecurityRule{})
			if err := m.OutboundSecurityRules[len(m.OutboundSecurityRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacypolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacypolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivacypolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivacypolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacypolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivacypolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivacypolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivacypolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivacypolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivacypolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("privacypolicy.proto", fileDescriptorPrivacypolicy) }

var fileDescriptorPrivacypolicy = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0xcf, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x3b, 0x4d, 0xbf, 0xe5, 0xdb, 0x69, 0x2b, 0xe9, 0xa6, 0xd5, 0x21, 0x48, 0x1a, 0x82,
	0x87, 0x50, 0xd2, 0xac, 0xb4, 0x08, 0x52, 0xe8, 0xa1, 0x3f, 0x6e, 0xa5, 0xb6, 0x6c, 0x69, 0xc1,
	0x83, 0x84, 0xc9, 0xee, 0xeb, 0x76, 0xe8, 0xec, 0xbe, 0xcb, 0xec, 0x6e, 0xdb, 0xf5, 0x24, 0x9e,
	0x3d, 0x08, 0x5e, 0x44, 0x10, 0xbd, 0xea, 0x4d, 0xff, 0x8a, 0x1e, 0x05, 0xef, 0xa2, 0xc5, 0x83,
	0xf4, 0x24, 0x34, 0xf6, 0x2c, 0x3b, 0x59, 0x42, 0x92, 0x46, 0x11, 0x3d, 0x78, 0x59, 0xde, 0x79,
	0xde, 0x67, 0xe6, 0xfd, 0xcc, 0xc3, 0x2c, 0x2d, 0x04, 0x4a, 0x1c, 0x72, 0x3b, 0x09, 0x50, 0x0a,
	0x3b, 0xa9, 0x07, 0x0a, 0x23, 0x34, 0xc6, 0xc0, 0x71, 0x41, 0x97, 0xc5, 0xeb, 0x2e, 0xa2, 0x2b,
	0xc1, 0xe4, 0x81, 0x30, 0xb9, 0xef, 0x63, 0xc4, 0x23, 0x81, 0x7e, 0xd8, 0x36, 0x16, 0x27, 0x14,
	0x84, 0xb1, 0x8c, 0xb2, 0xd5, 0x6d, 0x57, 0x44, 0xfb, 0x71, 0xb3, 0x6e, 0xa3, 0x67, 0x7a, 0xd8,
	0x14, 0x32, 0x3d, 0xe6, 0xd8, 0x4c, 0xbf, 0xf3, 0xb6, 0xc4, 0xd8, 0x31, 0xb5, 0xcf, 0x05, 0xbf,
	0x53, 0x64, 0x3b, 0xa7, 0x5d, 0x74, 0x51, 0x97, 0x66, 0x5a, 0x65, 0xea, 0x0c, 0x8f, 0x23, 0x0c,
	0x6d, 0x2e, 0xa1, 0x9b, 0xae, 0xf2, 0x92, 0xd0, 0xe9, 0xad, 0x38, 0x6a, 0x62, 0xec, 0x3b, 0x3b,
	0x60, 0xc7, 0x4a, 0x44, 0x89, 0x15, 0x4b, 0x30, 0x8a, 0xf4, 0x7f, 0xed, 0xb0, 0x51, 0x32, 0x52,
	0x26, 0xd5, 0x31, 0xab, 0xb3, 0x36, 0x6e, 0xd0, 0x2b, 0x01, 0xaa, 0xa8, 0xa1, 0xb8, 0xef, 0x42,
	0xc3, 0x13, 0x3e, 0x1b, 0x2e, 0x93, 0xea, 0xa4, 0x35, 0x91, 0xaa, 0x56, 0x2a, 0x6e, 0x0a, 0xbf,
	0xdf, 0xc5, 0x8f, 0x59, 0xae, 0xdf, 0xc5, 0x8f, 0x8d, 0x59, 0x3a, 0xae, 0xc0, 0xc3, 0x08, 0x1a,
	0xb6, 0x70, 0x14, 0x1b, 0xd1, 0xa3, 0x68, 0x5b, 0x5a, 0x13, 0x8e, 0xaa, 0x3c, 0x1e, 0xa6, 0x93,
	0xdb, 0xed, 0x5c, 0xb7, 0x35, 0xb9, 0x71, 0x95, 0x8e, 0xde, 0x17, 0x20, 0x9d, 0x90, 0x91, 0x72,
	0xae, 0x3a, 0x66, 0x65, 0x2b, 0xa3, 0x46, 0x73, 0x07, 0x90, 0x68, 0x96, 0xf1, 0x85, 0xe9, 0x7a,
	0x27, 0xf7, 0x7a, 0x7b, 0xdf, 0x06, 0x24, 0xab, 0x23, 0x27, 0x1f, 0x67, 0x87, 0xac, 0xd4, 0x66,
	0xdc, 0xa3, 0xd7, 0x30, 0xbb, 0x78, 0x23, 0xcc, 0x6e, 0xde, 0x50, 0xb1, 0x84, 0x90, 0xe5, 0xca,
	0xb9, 0xea, 0xf8, 0xc2, 0x6c, 0xd7, 0x09, 0x83, 0x22, 0xca, 0x0e, 0x9b, 0xc1, 0x01, 0xbd, 0x70,
	0x69, 0xef, 0xeb, 0x39, 0x23, 0xdf, 0xce, 0x19, 0x79, 0xd8, 0x62, 0xe4, 0x49, 0x8b, 0x91, 0x67,
	0x2d, 0x46, 0x9e, 0x7f, 0x67, 0x73, 0x3e, 0xf7, 0x60, 0x79, 0x03, 0x92, 0xfa, 0x1d, 0xee, 0x41,
	0xcd, 0x96, 0x71, 0x18, 0x81, 0x9a, 0x47, 0xe5, 0x6a, 0x71, 0x4b, 0xb9, 0xdc, 0x17, 0x0f, 0xf4,
	0xc3, 0x78, 0x77, 0xc1, 0xf2, 0x07, 0x90, 0x2c, 0x77, 0x6b, 0x0b, 0xaf, 0xff, 0xa3, 0xf9, 0x9e,
	0x38, 0x56, 0x02, 0x61, 0xbc, 0x25, 0xb4, 0xb0, 0xa6, 0x80, 0x47, 0xd0, 0x9b, 0x14, 0xeb, 0x0e,
	0xa1, 0xbb, 0x53, 0x9c, 0xea, 0xea, 0x58, 0xfa, 0xdd, 0x55, 0xbc, 0xb3, 0x16, 0xbb, 0x65, 0x41,
	0x88, 0xb1, 0xb2, 0x61, 0x1d, 0x0e, 0x41, 0x62, 0x00, 0xaa, 0xed, 0xaf, 0xad, 0xd8, 0xe9, 0xf4,
	0x4d, 0xee, 0x73, 0x17, 0x6a, 0xfd, 0xa0, 0x6f, 0x2e, 0x58, 0xbe, 0x5f, 0x7b, 0xf4, 0xe1, 0xcb,
	0xd3, 0xe1, 0x62, 0x65, 0xc6, 0xb4, 0x35, 0x97, 0xd9, 0xf3, 0x6b, 0x2c, 0x91, 0x39, 0xe3, 0x05,
	0xa1, 0x85, 0x75, 0x90, 0xf0, 0x57, 0xcc, 0x77, 0xff, 0x98, 0xb9, 0xc3, 0xe7, 0x68, 0x86, 0xc1,
	0x7c, 0xbb, 0x81, 0xc3, 0xff, 0x35, 0x5f, 0xac, 0x19, 0x2e, 0xf3, 0xbd, 0x22, 0x74, 0x6a, 0x67,
	0x1f, 0x8f, 0x7e, 0x97, 0xee, 0xa7, 0x9d, 0xca, 0xee, 0x59, 0x8b, 0x2d, 0xfe, 0x1a, 0x72, 0x4f,
	0xc0, 0xd1, 0x60, 0x44, 0x56, 0x29, 0x98, 0xe1, 0x3e, 0x1e, 0x5d, 0x02, 0xbc, 0x49, 0x56, 0xf3,
	0x27, 0x9f, 0x4b, 0x43, 0x27, 0xa7, 0x25, 0xf2, 0xfe, 0xb4, 0x44, 0x3e, 0x9d, 0x96, 0x48, 0x73,
	0x54, 0xcf, 0x5f, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x76, 0x43, 0xcb, 0x93, 0x2a, 0x05, 0x00,
	0x00,
}
