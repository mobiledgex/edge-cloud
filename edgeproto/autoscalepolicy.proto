// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Policy proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message PolicyKey {
  // Name of the organization for the cluster that this policy will apply to
  string organization = 1 [(protogen.keytag) = "policyorg"];
  // Policy name
  string name = 2 [(protogen.keytag) = "policy"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// AutoScalePolicy defines when and how cluster instances will have their
// nodes scaled up or down.
message AutoScalePolicy {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  PolicyKey key = 2 [(gogoproto.nullable) = false];
  // Minimum number of cluster nodes
  uint32 min_nodes = 3;
  // Maximum number of cluster nodes
  uint32 max_nodes = 4;
  // (Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled
  uint32 scale_up_cpu_thresh = 5;
  // (Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled
  uint32 scale_down_cpu_thresh = 6;
  // (Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.
  uint32 trigger_time_sec = 7 [(protogen.test_update) = true];
  // Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.
  uint32 stabilization_window_sec = 8;
  // Target per-node cpu utilization (percentage 1 to 100), 0 means disabled
  uint32 target_cpu = 9;
  // Target per-node memory utilization (percentage 1 to 100), 0 means disabled
  uint32 target_mem = 10;
  // Target per-node number of active connections, 0 means disabled
  uint64 target_active_connections = 11;
  // Preparing to be deleted
  bool delete_prepare = 12 [(protogen.backend) = true]; 
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.alias) = "name=Key.Name,clusterorg=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.noconfig) = "DeletePrepare";
}

service AutoScalePolicyApi {
  // Create an Auto Scale Policy
  rpc CreateAutoScalePolicy(AutoScalePolicy) returns (Result) {
    option (google.api.http) = {
      post: "/create/autoscalepolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceDeveloperPolicy,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "MinNodes,MaxNodes";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete an Auto Scale Policy
  rpc DeleteAutoScalePolicy(AutoScalePolicy) returns (Result) {
    option (google.api.http) = {
      post: "/delete/autoscalepolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceDeveloperPolicy,ActionManage,Key.Organization";
  }
  // Update an Auto Scale Policy
  rpc UpdateAutoScalePolicy(AutoScalePolicy) returns (Result) {
    option (google.api.http) = {
      post: "/update/autoscalepolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceDeveloperPolicy,ActionManage,Key.Organization";
  }
  // Show Auto Scale Policies. Any fields specified will be used to filter results.
  rpc ShowAutoScalePolicy(AutoScalePolicy) returns (stream AutoScalePolicy) {
    option (google.api.http) = {
      post: "/show/autoscalepolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceDeveloperPolicy,ActionView,Key.Organization";
  }
}
