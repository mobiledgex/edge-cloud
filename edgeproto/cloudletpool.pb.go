// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CloudletPoolKey struct {
	// CloudletPool Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletPoolKey) Reset()                    { *m = CloudletPoolKey{} }
func (m *CloudletPoolKey) String() string            { return proto.CompactTextString(m) }
func (*CloudletPoolKey) ProtoMessage()               {}
func (*CloudletPoolKey) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{0} }

type CloudletPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// CloudletPool key
	Key CloudletPoolKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Pool members
	Members map[string]string `protobuf:"bytes,3,rep,name=members" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CloudletPool) Reset()                    { *m = CloudletPool{} }
func (m *CloudletPool) String() string            { return proto.CompactTextString(m) }
func (*CloudletPool) ProtoMessage()               {}
func (*CloudletPool) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{1} }

type CloudletPoolMember struct {
	// CloudletPool key
	PoolKey CloudletPoolKey `protobuf:"bytes,1,opt,name=pool_key,json=poolKey" json:"pool_key"`
	// Cloudlet key
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
}

func (m *CloudletPoolMember) Reset()                    { *m = CloudletPoolMember{} }
func (m *CloudletPoolMember) String() string            { return proto.CompactTextString(m) }
func (*CloudletPoolMember) ProtoMessage()               {}
func (*CloudletPoolMember) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{2} }

type CloudletPoolList struct {
	// Name of Cloudlet Pool (may be repeated)
	PoolName []string `protobuf:"bytes,1,rep,name=pool_name,json=poolName" json:"pool_name,omitempty"`
}

func (m *CloudletPoolList) Reset()                    { *m = CloudletPoolList{} }
func (m *CloudletPoolList) String() string            { return proto.CompactTextString(m) }
func (*CloudletPoolList) ProtoMessage()               {}
func (*CloudletPoolList) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{3} }

func init() {
	proto.RegisterType((*CloudletPoolKey)(nil), "edgeproto.CloudletPoolKey")
	proto.RegisterType((*CloudletPool)(nil), "edgeproto.CloudletPool")
	proto.RegisterType((*CloudletPoolMember)(nil), "edgeproto.CloudletPoolMember")
	proto.RegisterType((*CloudletPoolList)(nil), "edgeproto.CloudletPoolList")
}
func (this *CloudletPoolKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&edgeproto.CloudletPoolKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloudletPoolMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletPoolMember{")
	s = append(s, "PoolKey: "+strings.Replace(this.PoolKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudletpool(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletPoolApi service

type CloudletPoolApiClient interface {
	// Create a CloudletPool
	CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error)
}

type cloudletPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletPoolApiClient(cc *grpc.ClientConn) CloudletPoolApiClient {
	return &cloudletPoolApiClient{cc}
}

func (c *cloudletPoolApiClient) CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/CreateCloudletPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/DeleteCloudletPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletPoolApi/ShowCloudletPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolApiShowCloudletPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolApi_ShowCloudletPoolClient interface {
	Recv() (*CloudletPool, error)
	grpc.ClientStream
}

type cloudletPoolApiShowCloudletPoolClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolApiShowCloudletPoolClient) Recv() (*CloudletPool, error) {
	m := new(CloudletPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletPoolApi service

type CloudletPoolApiServer interface {
	// Create a CloudletPool
	CreateCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(*CloudletPool, CloudletPoolApi_ShowCloudletPoolServer) error
}

func RegisterCloudletPoolApiServer(s *grpc.Server, srv CloudletPoolApiServer) {
	s.RegisterService(&_CloudletPoolApi_serviceDesc, srv)
}

func _CloudletPoolApi_CreateCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/CreateCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_DeleteCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/DeleteCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_ShowCloudletPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolApiServer).ShowCloudletPool(m, &cloudletPoolApiShowCloudletPoolServer{stream})
}

type CloudletPoolApi_ShowCloudletPoolServer interface {
	Send(*CloudletPool) error
	grpc.ServerStream
}

type cloudletPoolApiShowCloudletPoolServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolApiShowCloudletPoolServer) Send(m *CloudletPool) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletPoolApi",
	HandlerType: (*CloudletPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudletPool",
			Handler:    _CloudletPoolApi_CreateCloudletPool_Handler,
		},
		{
			MethodName: "DeleteCloudletPool",
			Handler:    _CloudletPoolApi_DeleteCloudletPool_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletPool",
			Handler:       _CloudletPoolApi_ShowCloudletPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletpool.proto",
}

// Client API for CloudletPoolMemberApi service

type CloudletPoolMemberApiClient interface {
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
	ShowCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletPoolMemberClient, error)
	// Show CloudletPools that have Cloudlet as a member
	ShowPoolsForCloudlet(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowPoolsForCloudletClient, error)
	// Show Cloudlets that belong to the Pool
	ShowCloudletsForPool(ctx context.Context, in *CloudletPoolKey, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletsForPoolClient, error)
	// Show Cloudlets that belong to listed Pools
	ShowCloudletsForPoolList(ctx context.Context, in *CloudletPoolList, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletsForPoolListClient, error)
}

type cloudletPoolMemberApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletPoolMemberApiClient(cc *grpc.ClientConn) CloudletPoolMemberApiClient {
	return &cloudletPoolMemberApiClient{cc}
}

func (c *cloudletPoolMemberApiClient) AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolMemberApi/AddCloudletPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolMemberApiClient) RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolMemberApi/RemoveCloudletPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolMemberApiClient) ShowCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletPoolMemberClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolMemberApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletPoolMemberApi/ShowCloudletPoolMember", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolMemberApiShowCloudletPoolMemberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolMemberApi_ShowCloudletPoolMemberClient interface {
	Recv() (*CloudletPoolMember, error)
	grpc.ClientStream
}

type cloudletPoolMemberApiShowCloudletPoolMemberClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolMemberApiShowCloudletPoolMemberClient) Recv() (*CloudletPoolMember, error) {
	m := new(CloudletPoolMember)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletPoolMemberApiClient) ShowPoolsForCloudlet(ctx context.Context, in *CloudletKey, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowPoolsForCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolMemberApi_serviceDesc.Streams[1], c.cc, "/edgeproto.CloudletPoolMemberApi/ShowPoolsForCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolMemberApiShowPoolsForCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolMemberApi_ShowPoolsForCloudletClient interface {
	Recv() (*CloudletPool, error)
	grpc.ClientStream
}

type cloudletPoolMemberApiShowPoolsForCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolMemberApiShowPoolsForCloudletClient) Recv() (*CloudletPool, error) {
	m := new(CloudletPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletPoolMemberApiClient) ShowCloudletsForPool(ctx context.Context, in *CloudletPoolKey, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletsForPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolMemberApi_serviceDesc.Streams[2], c.cc, "/edgeproto.CloudletPoolMemberApi/ShowCloudletsForPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolMemberApiShowCloudletsForPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolMemberApi_ShowCloudletsForPoolClient interface {
	Recv() (*Cloudlet, error)
	grpc.ClientStream
}

type cloudletPoolMemberApiShowCloudletsForPoolClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolMemberApiShowCloudletsForPoolClient) Recv() (*Cloudlet, error) {
	m := new(Cloudlet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletPoolMemberApiClient) ShowCloudletsForPoolList(ctx context.Context, in *CloudletPoolList, opts ...grpc.CallOption) (CloudletPoolMemberApi_ShowCloudletsForPoolListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolMemberApi_serviceDesc.Streams[3], c.cc, "/edgeproto.CloudletPoolMemberApi/ShowCloudletsForPoolList", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolMemberApiShowCloudletsForPoolListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolMemberApi_ShowCloudletsForPoolListClient interface {
	Recv() (*Cloudlet, error)
	grpc.ClientStream
}

type cloudletPoolMemberApiShowCloudletsForPoolListClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolMemberApiShowCloudletsForPoolListClient) Recv() (*Cloudlet, error) {
	m := new(Cloudlet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletPoolMemberApi service

type CloudletPoolMemberApiServer interface {
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
	ShowCloudletPoolMember(*CloudletPoolMember, CloudletPoolMemberApi_ShowCloudletPoolMemberServer) error
	// Show CloudletPools that have Cloudlet as a member
	ShowPoolsForCloudlet(*CloudletKey, CloudletPoolMemberApi_ShowPoolsForCloudletServer) error
	// Show Cloudlets that belong to the Pool
	ShowCloudletsForPool(*CloudletPoolKey, CloudletPoolMemberApi_ShowCloudletsForPoolServer) error
	// Show Cloudlets that belong to listed Pools
	ShowCloudletsForPoolList(*CloudletPoolList, CloudletPoolMemberApi_ShowCloudletsForPoolListServer) error
}

func RegisterCloudletPoolMemberApiServer(s *grpc.Server, srv CloudletPoolMemberApiServer) {
	s.RegisterService(&_CloudletPoolMemberApi_serviceDesc, srv)
}

func _CloudletPoolMemberApi_AddCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolMemberApiServer).AddCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolMemberApi/AddCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolMemberApiServer).AddCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolMemberApi_RemoveCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolMemberApiServer).RemoveCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolMemberApi/RemoveCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolMemberApiServer).RemoveCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolMemberApi_ShowCloudletPoolMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPoolMember)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolMemberApiServer).ShowCloudletPoolMember(m, &cloudletPoolMemberApiShowCloudletPoolMemberServer{stream})
}

type CloudletPoolMemberApi_ShowCloudletPoolMemberServer interface {
	Send(*CloudletPoolMember) error
	grpc.ServerStream
}

type cloudletPoolMemberApiShowCloudletPoolMemberServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolMemberApiShowCloudletPoolMemberServer) Send(m *CloudletPoolMember) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletPoolMemberApi_ShowPoolsForCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolMemberApiServer).ShowPoolsForCloudlet(m, &cloudletPoolMemberApiShowPoolsForCloudletServer{stream})
}

type CloudletPoolMemberApi_ShowPoolsForCloudletServer interface {
	Send(*CloudletPool) error
	grpc.ServerStream
}

type cloudletPoolMemberApiShowPoolsForCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolMemberApiShowPoolsForCloudletServer) Send(m *CloudletPool) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletPoolMemberApi_ShowCloudletsForPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPoolKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolMemberApiServer).ShowCloudletsForPool(m, &cloudletPoolMemberApiShowCloudletsForPoolServer{stream})
}

type CloudletPoolMemberApi_ShowCloudletsForPoolServer interface {
	Send(*Cloudlet) error
	grpc.ServerStream
}

type cloudletPoolMemberApiShowCloudletsForPoolServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolMemberApiShowCloudletsForPoolServer) Send(m *Cloudlet) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletPoolMemberApi_ShowCloudletsForPoolList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPoolList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolMemberApiServer).ShowCloudletsForPoolList(m, &cloudletPoolMemberApiShowCloudletsForPoolListServer{stream})
}

type CloudletPoolMemberApi_ShowCloudletsForPoolListServer interface {
	Send(*Cloudlet) error
	grpc.ServerStream
}

type cloudletPoolMemberApiShowCloudletsForPoolListServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolMemberApiShowCloudletsForPoolListServer) Send(m *Cloudlet) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletPoolMemberApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletPoolMemberApi",
	HandlerType: (*CloudletPoolMemberApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCloudletPoolMember",
			Handler:    _CloudletPoolMemberApi_AddCloudletPoolMember_Handler,
		},
		{
			MethodName: "RemoveCloudletPoolMember",
			Handler:    _CloudletPoolMemberApi_RemoveCloudletPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletPoolMember",
			Handler:       _CloudletPoolMemberApi_ShowCloudletPoolMember_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowPoolsForCloudlet",
			Handler:       _CloudletPoolMemberApi_ShowPoolsForCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCloudletsForPool",
			Handler:       _CloudletPoolMemberApi_ShowCloudletsForPool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCloudletsForPoolList",
			Handler:       _CloudletPoolMemberApi_ShowCloudletsForPoolList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletpool.proto",
}

func (m *CloudletPoolKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CloudletPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletpool(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Members) > 0 {
		for k, _ := range m.Members {
			dAtA[i] = 0x1a
			i++
			v := m.Members[k]
			mapSize := 1 + len(k) + sovCloudletpool(uint64(len(k))) + 1 + len(v) + sovCloudletpool(uint64(len(v)))
			i = encodeVarintCloudletpool(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudletpool(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudletpool(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *CloudletPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudletpool(dAtA, i, uint64(m.PoolKey.Size()))
	n2, err := m.PoolKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletpool(dAtA, i, uint64(m.CloudletKey.Size()))
	n3, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *CloudletPoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		for _, s := range m.PoolName {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintCloudletpool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletPoolKey) Matches(o *CloudletPoolKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *CloudletPoolKey) CopyInFields(src *CloudletPoolKey) {
	m.Name = src.Name
}

func (m *CloudletPoolKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletPoolKey key string", "obj", m)
	}
	return string(key)
}

func CloudletPoolKeyStringParse(str string, key *CloudletPoolKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletPoolKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *CloudletPoolKey) ValidateEnums() error {
	return nil
}

func (m *CloudletPool) Matches(o *CloudletPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Members != nil {
		if m.Members == nil && o.Members != nil || m.Members != nil && o.Members == nil {
			return false
		} else if m.Members != nil && o.Members != nil {
			if len(m.Members) != len(o.Members) {
				return false
			}
			for k, _ := range m.Members {
				_, ok := o.Members[k]
				if !ok {
					return false
				}
				if o.Members[k] != m.Members[k] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletPoolFieldKey = "2"
const CloudletPoolFieldKeyName = "2.1"
const CloudletPoolFieldMembers = "3"
const CloudletPoolFieldMembersKey = "3.1"
const CloudletPoolFieldMembersValue = "3.2"

var CloudletPoolAllFields = []string{
	CloudletPoolFieldKeyName,
	CloudletPoolFieldMembersKey,
	CloudletPoolFieldMembersValue,
}

var CloudletPoolAllFieldsMap = map[string]struct{}{
	CloudletPoolFieldKeyName:      struct{}{},
	CloudletPoolFieldMembersKey:   struct{}{},
	CloudletPoolFieldMembersValue: struct{}{},
}

var CloudletPoolAllFieldsStringMap = map[string]string{
	CloudletPoolFieldKeyName:      "Cloudlet Pool Field Key Name",
	CloudletPoolFieldMembersKey:   "Cloudlet Pool Field Members Key",
	CloudletPoolFieldMembersValue: "Cloudlet Pool Field Members Value",
}

func (m *CloudletPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletPoolFieldKey+".")
}

func (m *CloudletPool) DiffFields(o *CloudletPool, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[CloudletPoolFieldKeyName] = struct{}{}
		fields[CloudletPoolFieldKey] = struct{}{}
	}
	if m.Members != nil && o.Members != nil {
		if len(m.Members) != len(o.Members) {
			fields[CloudletPoolFieldMembers] = struct{}{}
		} else {
			for k0, _ := range m.Members {
				_, vok0 := o.Members[k0]
				if !vok0 {
					fields[CloudletPoolFieldMembers] = struct{}{}
				} else {
					if m.Members[k0] != o.Members[k0] {
						fields[CloudletPoolFieldMembers] = struct{}{}
						break
					}
				}
			}
		}
	}
}

func (m *CloudletPool) CopyInFields(src *CloudletPool) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			m.Key.Name = src.Key.Name
		}
	}
	if _, set := fmap["3"]; set && src.Members != nil {
		m.Members = make(map[string]string)
		for k0, _ := range src.Members {
			m.Members[k0] = src.Members[k0]
		}
	}
}

func (s *CloudletPool) HasFields() bool {
	return true
}

type CloudletPoolStore struct {
	kvstore objstore.KVStore
}

func NewCloudletPoolStore(kvstore objstore.KVStore) CloudletPoolStore {
	return CloudletPoolStore{kvstore: kvstore}
}

func (s *CloudletPoolStore) Create(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Update(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Put(ctx context.Context, m *CloudletPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Delete(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) LoadOne(key string) (*CloudletPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletPool data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletPoolStore) STMGet(stm concurrency.STM, key *CloudletPoolKey, buf *CloudletPool) bool {
	keystr := objstore.DbKeyString("CloudletPool", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletPoolStore) STMPut(stm concurrency.STM, obj *CloudletPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletPool json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletPoolStore) STMDel(stm concurrency.STM, key *CloudletPoolKey) {
	keystr := objstore.DbKeyString("CloudletPool", key)
	stm.Del(keystr)
}

type CloudletPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

// CloudletPoolCache caches CloudletPool objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletPoolCache struct {
	Objs        map[CloudletPoolKey]*CloudletPool
	Mux         util.Mutex
	List        map[CloudletPoolKey]struct{}
	NotifyCb    func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool)
	UpdatedCb   func(ctx context.Context, old *CloudletPool, new *CloudletPool)
	KeyWatchers map[CloudletPoolKey][]*CloudletPoolKeyWatcher
}

func NewCloudletPoolCache() *CloudletPoolCache {
	cache := CloudletPoolCache{}
	InitCloudletPoolCache(&cache)
	return &cache
}

func InitCloudletPoolCache(cache *CloudletPoolCache) {
	cache.Objs = make(map[CloudletPoolKey]*CloudletPool)
	cache.KeyWatchers = make(map[CloudletPoolKey][]*CloudletPoolKeyWatcher)
}

func (c *CloudletPoolCache) GetTypeString() string {
	return "CloudletPool"
}

func (c *CloudletPoolCache) Get(key *CloudletPoolKey, valbuf *CloudletPool) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletPoolCache) HasKey(key *CloudletPoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletPoolCache) GetAllKeys(ctx context.Context, keys map[CloudletPoolKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *CloudletPoolCache) Update(ctx context.Context, in *CloudletPool, rev int64) {
	c.UpdateModFunc(ctx, &in.Key, rev, func(old *CloudletPool) (*CloudletPool, bool) {
		return in, true
	})
}

func (c *CloudletPoolCache) UpdateModFunc(ctx context.Context, key *CloudletPoolKey, rev int64, modFunc func(old *CloudletPool) (new *CloudletPool, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &CloudletPool{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, &new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate CloudletPool", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, &new.Key)
}

func (c *CloudletPoolCache) Delete(ctx context.Context, in *CloudletPool, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete CloudletPool", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, &in.Key, old)
	}
	c.TriggerKeyWatchers(ctx, &in.Key)
}

func (c *CloudletPoolCache) Prune(ctx context.Context, validKeys map[CloudletPoolKey]struct{}) {
	notify := make(map[CloudletPoolKey]*CloudletPool)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletPoolCache) Show(filter *CloudletPool, cb func(ret *CloudletPool) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletPool", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletPool", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletPoolGenericNotifyCb(fn func(key *CloudletPoolKey, old *CloudletPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletPoolKey), obj.(*CloudletPool))
	}
}

func (c *CloudletPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool)) {
	c.NotifyCb = fn
}

func (c *CloudletPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletPool, new *CloudletPool)) {
	c.UpdatedCb = fn
}

func (c *CloudletPoolCache) WatchKey(key *CloudletPoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletPoolKeyWatcher, 0)
	}
	watcher := CloudletPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletPoolCache) TriggerKeyWatchers(ctx context.Context, key *CloudletPoolKey) {
	watchers := make([]*CloudletPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *CloudletPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := CloudletPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletPool data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletPoolCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := CloudletPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletPoolKeyStringParse(keystr, &obj.Key)
	c.Delete(ctx, &obj, rev)
}

func (c *CloudletPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletPoolKey]struct{})
}

func (c *CloudletPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletPoolKey]*CloudletPool)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *CloudletPool) GetKey() objstore.ObjKey {
	return &m.Key
}

func CmpSortCloudletPool(a CloudletPool, b CloudletPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *CloudletPoolMember) Matches(o *CloudletPoolMember, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.PoolKey.Matches(&o.PoolKey, fopts...) {
		return false
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	return true
}

func (m *CloudletPoolMember) CopyInFields(src *CloudletPoolMember) {
	m.PoolKey.Name = src.PoolKey.Name
	m.CloudletKey.OperatorKey.Name = src.CloudletKey.OperatorKey.Name
	m.CloudletKey.Name = src.CloudletKey.Name
}

func (s *CloudletPoolMember) HasFields() bool {
	return false
}

type CloudletPoolMemberStore struct {
	kvstore objstore.KVStore
}

func NewCloudletPoolMemberStore(kvstore objstore.KVStore) CloudletPoolMemberStore {
	return CloudletPoolMemberStore{kvstore: kvstore}
}

func (s *CloudletPoolMemberStore) Create(ctx context.Context, m *CloudletPoolMember, wait func(int64)) (*Result, error) {
	err := m.ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPoolMember", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolMemberStore) Update(ctx context.Context, m *CloudletPoolMember, wait func(int64)) (*Result, error) {
	err := m.ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPoolMember", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolMemberStore) Put(ctx context.Context, m *CloudletPoolMember, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPoolMember", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolMemberStore) Delete(ctx context.Context, m *CloudletPoolMember, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPoolMember", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolMemberStore) LoadOne(key string) (*CloudletPoolMember, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletPoolMember
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletPoolMember data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletPoolMemberStore) STMGet(stm concurrency.STM, key *CloudletPoolMember, buf *CloudletPoolMember) bool {
	keystr := objstore.DbKeyString("CloudletPoolMember", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletPoolMemberStore) STMPut(stm concurrency.STM, obj *CloudletPoolMember, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletPoolMember", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletPoolMember json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletPoolMemberStore) STMDel(stm concurrency.STM, key *CloudletPoolMember) {
	keystr := objstore.DbKeyString("CloudletPoolMember", key)
	stm.Del(keystr)
}

func (m *CloudletPoolMember) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletPoolMember key string", "obj", m)
	}
	return string(key)
}

func CloudletPoolMemberStringParse(str string, key *CloudletPoolMember) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletPoolMember key string", "str", str)
	}
}

func (m *CloudletPoolMember) GetKey() objstore.ObjKey {
	return m
}

// Helper method to check that enums have valid values
func (m *CloudletPoolMember) ValidateEnums() error {
	if err := m.PoolKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *CloudletPoolList) CopyInFields(src *CloudletPoolList) {
	if m.PoolName == nil || len(m.PoolName) != len(src.PoolName) {
		m.PoolName = make([]string, len(src.PoolName))
	}
	copy(m.PoolName, src.PoolName)
}

// Helper method to check that enums have valid values
func (m *CloudletPoolList) ValidateEnums() error {
	return nil
}

func (m *CloudletPoolKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	return n
}

func (m *CloudletPool) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	if len(m.Members) > 0 {
		for k, v := range m.Members {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudletpool(uint64(len(k))) + 1 + len(v) + sovCloudletpool(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudletpool(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CloudletPoolMember) Size() (n int) {
	var l int
	_ = l
	l = m.PoolKey.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	return n
}

func (m *CloudletPoolList) Size() (n int) {
	var l int
	_ = l
	if len(m.PoolName) > 0 {
		for _, s := range m.PoolName {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	return n
}

func sovCloudletpool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudletpool(x uint64) (n int) {
	return sovCloudletpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletPoolKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudletpool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletpool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudletpool
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudletpool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudletpool
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudletpool(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudletpool
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Members[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = append(m.PoolName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudletpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudletpool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudletpool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudletpool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudletpool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudletpool   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloudletpool.proto", fileDescriptorCloudletpool) }

var fileDescriptorCloudletpool = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcb, 0x6f, 0xd3, 0x48,
	0x18, 0xc0, 0x33, 0x49, 0xb7, 0xd9, 0x4c, 0xb3, 0xbb, 0xd9, 0xd9, 0x34, 0x9d, 0x75, 0xdb, 0x34,
	0xeb, 0xdd, 0x43, 0xb4, 0xea, 0xc6, 0x55, 0x7a, 0xa9, 0xb2, 0x2a, 0xa8, 0x2d, 0x54, 0x40, 0x1f,
	0x80, 0x91, 0xb8, 0x56, 0x4e, 0x3c, 0x75, 0x2d, 0x9c, 0x4c, 0xb0, 0x9d, 0x96, 0xdc, 0x10, 0x12,
	0x52, 0xc5, 0x09, 0xf1, 0x90, 0x50, 0x0f, 0x08, 0xf1, 0x17, 0xf4, 0xc0, 0x81, 0x23, 0x37, 0x72,
	0x44, 0xe2, 0x8e, 0xa0, 0xe2, 0x80, 0x7a, 0x42, 0x6a, 0x2c, 0x71, 0x44, 0x33, 0xb6, 0x53, 0xa7,
	0x8d, 0xab, 0x14, 0x21, 0x2e, 0xd6, 0x8c, 0xbf, 0xd7, 0xef, 0x7b, 0x0d, 0x44, 0x15, 0x83, 0x36,
	0x54, 0x83, 0xd8, 0x75, 0x4a, 0x8d, 0x42, 0xdd, 0xa4, 0x36, 0x45, 0x09, 0xa2, 0x6a, 0x84, 0x1f,
	0x85, 0x31, 0x8d, 0x52, 0xcd, 0x20, 0x92, 0x52, 0xd7, 0x25, 0xa5, 0x56, 0xa3, 0xb6, 0x62, 0xeb,
	0xb4, 0x66, 0xb9, 0x8a, 0xc2, 0x8c, 0xa6, 0xdb, 0x1b, 0x8d, 0x72, 0xa1, 0x42, 0xab, 0x52, 0x95,
	0x96, 0x75, 0x83, 0x19, 0xde, 0x92, 0xd8, 0xf7, 0x3f, 0xee, 0x57, 0xe2, 0x7a, 0x1a, 0xa9, 0x75,
	0x0e, 0x9e, 0xe5, 0xaf, 0x7e, 0x58, 0xef, 0x9e, 0x34, 0x89, 0xd5, 0x30, 0xfc, 0x5b, 0x5a, 0xa3,
	0x1a, 0xe5, 0x47, 0x89, 0x9d, 0xdc, 0xbf, 0xe2, 0x34, 0xfc, 0x6d, 0xc1, 0xb3, 0xba, 0x42, 0xa9,
	0xb1, 0x44, 0x9a, 0x08, 0xc1, 0x81, 0x9a, 0x52, 0x25, 0x18, 0xe4, 0x40, 0x3e, 0x21, 0xf3, 0x73,
	0x29, 0xf9, 0xe9, 0x00, 0x83, 0x2f, 0x07, 0x18, 0xec, 0x3e, 0x9b, 0x00, 0xe2, 0x76, 0x14, 0x26,
	0x83, 0x56, 0x28, 0x03, 0x07, 0xd7, 0x75, 0x62, 0xa8, 0x16, 0x06, 0xb9, 0x58, 0x3e, 0x21, 0x7b,
	0x37, 0x54, 0x84, 0xb1, 0x1b, 0xa4, 0x89, 0xa3, 0x39, 0x90, 0x1f, 0x2a, 0x0a, 0x85, 0x4e, 0x09,
	0x0a, 0x47, 0x62, 0xce, 0x0f, 0xb4, 0xde, 0x4d, 0x44, 0x64, 0xa6, 0x8c, 0xce, 0xc0, 0x78, 0x95,
	0x54, 0xcb, 0xc4, 0xb4, 0x70, 0x2c, 0x17, 0xcb, 0x0f, 0x15, 0xff, 0x09, 0xb1, 0x2b, 0xac, 0xb8,
	0x6a, 0xe7, 0x6b, 0xb6, 0xd9, 0x94, 0x7d, 0x23, 0xa1, 0x04, 0x93, 0x41, 0x01, 0x4a, 0xb9, 0x0c,
	0x6e, 0x36, 0x3c, 0x42, 0x1a, 0xfe, 0xb4, 0xa9, 0x18, 0x0d, 0xc2, 0xb9, 0x12, 0xb2, 0x7b, 0x29,
	0x45, 0x67, 0x40, 0x69, 0x8a, 0xa5, 0xf9, 0xf9, 0x00, 0x83, 0xdb, 0x6d, 0x0c, 0x9e, 0xb4, 0x31,
	0x78, 0xe0, 0xe0, 0xb8, 0xe7, 0x6d, 0xc7, 0xc1, 0xbf, 0xb0, 0x5a, 0xcc, 0x2e, 0x91, 0x66, 0x61,
	0x55, 0xa9, 0x92, 0x5d, 0x07, 0x47, 0xc4, 0xbb, 0x51, 0x88, 0x82, 0x50, 0xae, 0x32, 0xfa, 0x1f,
	0xfe, 0xcc, 0x7a, 0xbf, 0xe6, 0x47, 0xee, 0x27, 0xfb, 0x78, 0xdd, 0x6b, 0xc0, 0x59, 0x98, 0xf4,
	0x3b, 0xb9, 0x76, 0x58, 0xbe, 0x4c, 0x0f, 0x07, 0x87, 0xc6, 0x43, 0x95, 0xc3, 0x5f, 0xa5, 0x9b,
	0x7e, 0x1a, 0x2c, 0x85, 0x1d, 0x07, 0x5f, 0x65, 0x9e, 0x67, 0xbd, 0x68, 0x9c, 0x7d, 0xd2, 0x57,
	0x9f, 0x0d, 0xb8, 0x72, 0x25, 0xb4, 0x4e, 0x4c, 0xc5, 0xa6, 0x66, 0x97, 0xe4, 0xb2, 0xf7, 0x33,
	0x98, 0xfb, 0x4b, 0x07, 0x83, 0x57, 0x8e, 0x37, 0x12, 0x12, 0x4c, 0x05, 0xb3, 0x5a, 0xd6, 0x2d,
	0x1b, 0x8d, 0xc2, 0x04, 0x2f, 0x82, 0x37, 0x4d, 0x6c, 0x30, 0x78, 0x55, 0x98, 0x83, 0xe2, 0x8b,
	0x58, 0xf7, 0xe4, 0xcd, 0xd5, 0x75, 0xb4, 0x0d, 0x20, 0x5a, 0x30, 0x89, 0x62, 0x93, 0xae, 0xe9,
	0x1a, 0x09, 0x29, 0x9d, 0xf0, 0x7b, 0x40, 0x20, 0xf3, 0x59, 0x17, 0x17, 0xf7, 0xdb, 0xf8, 0x6f,
	0x99, 0x58, 0xb4, 0x61, 0x56, 0xba, 0xbc, 0x58, 0x93, 0x73, 0x15, 0xb6, 0x66, 0x2b, 0x4a, 0x4d,
	0xd1, 0xc8, 0xe4, 0x9d, 0xb7, 0x1f, 0x1f, 0x46, 0xff, 0x14, 0xd3, 0x52, 0x85, 0xc7, 0x93, 0x82,
	0x1b, 0x5b, 0x02, 0xff, 0x72, 0x94, 0x73, 0xc4, 0x20, 0x3f, 0x12, 0x45, 0xe5, 0xf1, 0x8e, 0xa1,
	0xdc, 0x03, 0x30, 0x75, 0x6d, 0x83, 0x6e, 0xf5, 0x07, 0x12, 0x26, 0x10, 0xe7, 0xf7, 0xdb, 0xf8,
	0xaf, 0x93, 0x70, 0xae, 0xeb, 0x64, 0xcb, 0x85, 0x19, 0x11, 0x91, 0x64, 0x6d, 0xd0, 0xad, 0xa3,
	0x28, 0x53, 0xa0, 0xf8, 0x3a, 0x0e, 0x87, 0x8f, 0xcf, 0x3b, 0x6b, 0xde, 0x23, 0x00, 0x87, 0xe7,
	0x54, 0xb5, 0xc7, 0x32, 0x8c, 0x87, 0x20, 0xb9, 0xe2, 0x5e, 0xa5, 0xbb, 0x78, 0x9a, 0xd2, 0x8d,
	0x89, 0x23, 0x92, 0xa2, 0xaa, 0x5d, 0xb0, 0xee, 0x63, 0xc0, 0xaa, 0xb7, 0x03, 0x20, 0x96, 0x49,
	0x95, 0x6e, 0x92, 0xef, 0x42, 0xb6, 0x7c, 0x1a, 0xb2, 0x09, 0x51, 0x90, 0x4c, 0x1e, 0x3b, 0x04,
	0xee, 0x39, 0x80, 0x99, 0xa3, 0xad, 0xed, 0x0f, 0xed, 0x64, 0xb1, 0x78, 0xa1, 0xff, 0x66, 0x8f,
	0x8b, 0xf8, 0x78, 0xb3, 0x3b, 0x88, 0x53, 0x00, 0x3d, 0x06, 0x30, 0xcd, 0x20, 0xb9, 0xf9, 0x22,
	0x35, 0x7d, 0x77, 0x28, 0xe4, 0x45, 0x0a, 0x1f, 0xc1, 0x4b, 0x7d, 0x51, 0xb5, 0x1c, 0x0c, 0x38,
	0xd9, 0xa8, 0x98, 0x71, 0xc9, 0x18, 0x91, 0xb5, 0x4e, 0x4d, 0x9f, 0xb0, 0x9b, 0xcb, 0x77, 0xc4,
	0xd8, 0xf8, 0x6e, 0x9c, 0xf0, 0xd4, 0x0a, 0x7f, 0xf4, 0x90, 0x7d, 0x33, 0x97, 0xcf, 0xc3, 0xd8,
	0x3a, 0x2b, 0x82, 0x9e, 0x02, 0x88, 0x7b, 0x71, 0xb9, 0x6f, 0x62, 0x08, 0x1b, 0x13, 0xf6, 0x86,
	0x5b, 0x3d, 0x1d, 0x1c, 0x9b, 0xb9, 0x9e, 0x70, 0x86, 0x6e, 0xb9, 0x85, 0x13, 0x06, 0xee, 0x3b,
	0x38, 0x32, 0x9f, 0x6a, 0x7d, 0xc8, 0x46, 0x5a, 0x7b, 0x59, 0xf0, 0x66, 0x2f, 0x0b, 0xde, 0xef,
	0x65, 0x41, 0x79, 0x90, 0x47, 0x9e, 0xfe, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x67, 0xa1, 0x4b, 0xf9,
	0xbf, 0x08, 0x00, 0x00,
}
