// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	dme_proto "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CloudletPool unique key
//
// CloudletPoolKey uniquely identifies a CloudletPool.
type CloudletPoolKey struct {
	// Name of the organization this pool belongs to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// CloudletPool Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletPoolKey) Reset()         { *m = CloudletPoolKey{} }
func (m *CloudletPoolKey) String() string { return proto.CompactTextString(m) }
func (*CloudletPoolKey) ProtoMessage()    {}
func (*CloudletPoolKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab11dbae1d81e66, []int{0}
}
func (m *CloudletPoolKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletPoolKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletPoolKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletPoolKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletPoolKey.Merge(m, src)
}
func (m *CloudletPoolKey) XXX_Size() int {
	return m.Size()
}
func (m *CloudletPoolKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletPoolKey.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletPoolKey proto.InternalMessageInfo

// CloudletPool defines a pool of Cloudlets that have restricted access.
type CloudletPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// CloudletPool key
	Key CloudletPoolKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Cloudlets part of the pool
	Cloudlets []string `protobuf:"bytes,3,rep,name=cloudlets,proto3" json:"cloudlets,omitempty"`
	// Created at time
	CreatedAt dme_proto.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// Updated at time
	UpdatedAt dme_proto.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,6,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
}

func (m *CloudletPool) Reset()         { *m = CloudletPool{} }
func (m *CloudletPool) String() string { return proto.CompactTextString(m) }
func (*CloudletPool) ProtoMessage()    {}
func (*CloudletPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab11dbae1d81e66, []int{1}
}
func (m *CloudletPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletPool.Merge(m, src)
}
func (m *CloudletPool) XXX_Size() int {
	return m.Size()
}
func (m *CloudletPool) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletPool.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletPool proto.InternalMessageInfo

// CloudletPoolMember is used to add and remove a Cloudlet from a CloudletPool
type CloudletPoolMember struct {
	// CloudletPool key
	Key CloudletPoolKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// Cloudlet name
	CloudletName string `protobuf:"bytes,2,opt,name=cloudlet_name,json=cloudletName,proto3" json:"cloudlet_name,omitempty"`
}

func (m *CloudletPoolMember) Reset()         { *m = CloudletPoolMember{} }
func (m *CloudletPoolMember) String() string { return proto.CompactTextString(m) }
func (*CloudletPoolMember) ProtoMessage()    {}
func (*CloudletPoolMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ab11dbae1d81e66, []int{2}
}
func (m *CloudletPoolMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletPoolMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletPoolMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletPoolMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletPoolMember.Merge(m, src)
}
func (m *CloudletPoolMember) XXX_Size() int {
	return m.Size()
}
func (m *CloudletPoolMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletPoolMember.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletPoolMember proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CloudletPoolKey)(nil), "edgeproto.CloudletPoolKey")
	proto.RegisterType((*CloudletPool)(nil), "edgeproto.CloudletPool")
	proto.RegisterType((*CloudletPoolMember)(nil), "edgeproto.CloudletPoolMember")
}

func init() { proto.RegisterFile("cloudletpool.proto", fileDescriptor_5ab11dbae1d81e66) }

var fileDescriptor_5ab11dbae1d81e66 = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x3d, 0x6c, 0xeb, 0x54,
	0x14, 0xc7, 0x73, 0x5f, 0xf3, 0xaa, 0xe6, 0xbe, 0x94, 0x17, 0x2e, 0x7d, 0xf4, 0xbe, 0xa8, 0xa4,
	0x95, 0x61, 0x28, 0x4f, 0x49, 0xcc, 0x6b, 0x91, 0xa8, 0x22, 0x3a, 0x24, 0x61, 0xab, 0x0a, 0x95,
	0xf9, 0x90, 0x60, 0x89, 0x1c, 0xfb, 0xe0, 0x58, 0xb5, 0x7d, 0x2d, 0xdb, 0xa1, 0x84, 0x01, 0x21,
	0xd8, 0x51, 0x05, 0x03, 0xa8, 0x62, 0x60, 0x44, 0x4c, 0x55, 0x27, 0xd4, 0x91, 0xa9, 0x6c, 0x95,
	0x58, 0x98, 0x10, 0xa4, 0x0c, 0x28, 0x13, 0x52, 0x93, 0x88, 0x11, 0xdd, 0x6b, 0x3b, 0x71, 0x42,
	0x4a, 0x51, 0x8b, 0xc4, 0x12, 0x5d, 0xdf, 0x73, 0xce, 0xff, 0xfe, 0xce, 0x57, 0x30, 0xd1, 0x2c,
	0xd6, 0xd6, 0x2d, 0x08, 0x5c, 0xc6, 0xac, 0xb2, 0xeb, 0xb1, 0x80, 0x91, 0x0c, 0xe8, 0x06, 0x88,
	0x63, 0x7e, 0xc5, 0x60, 0xcc, 0xb0, 0x40, 0x56, 0x5d, 0x53, 0x56, 0x1d, 0x87, 0x05, 0x6a, 0x60,
	0x32, 0xc7, 0x0f, 0x1d, 0xf3, 0x5b, 0x86, 0x19, 0xb4, 0xda, 0xcd, 0xb2, 0xc6, 0x6c, 0xd9, 0x66,
	0x4d, 0xd3, 0xe2, 0x81, 0xef, 0xcb, 0xfc, 0xb7, 0x24, 0x74, 0x65, 0xe1, 0x67, 0x80, 0x33, 0x3a,
	0x44, 0x91, 0x59, 0x0f, 0xfc, 0xb6, 0x15, 0x44, 0x5f, 0x4b, 0x06, 0x33, 0x98, 0x38, 0xca, 0xfc,
	0x14, 0xdd, 0xd6, 0xaf, 0x55, 0xd7, 0x4b, 0xb6, 0x1a, 0x68, 0xad, 0x12, 0x38, 0x86, 0xe9, 0x80,
	0xac, 0xdb, 0x50, 0x0a, 0x55, 0x2c, 0xa6, 0x85, 0x22, 0xd2, 0x87, 0xf8, 0x7e, 0x3d, 0xca, 0x70,
	0x8f, 0x31, 0x6b, 0x07, 0x3a, 0xe4, 0x25, 0x9c, 0x65, 0x9e, 0xa1, 0x3a, 0xe6, 0x07, 0x22, 0x19,
	0x8a, 0xd6, 0xd0, 0x7a, 0xa6, 0xf6, 0xd4, 0xe9, 0x90, 0xde, 0x4f, 0x16, 0x83, 0x79, 0x86, 0x32,
	0xe1, 0x48, 0x9e, 0xc3, 0x69, 0x47, 0xb5, 0x81, 0xde, 0x11, 0x01, 0xb9, 0xd3, 0x21, 0xcd, 0x26,
	0x03, 0x14, 0x61, 0xad, 0x64, 0x7f, 0xbf, 0xa4, 0xe8, 0xcf, 0x4b, 0x8a, 0x8e, 0xbf, 0x5e, 0x45,
	0xd2, 0x27, 0x69, 0x9c, 0x4d, 0x02, 0x90, 0xa7, 0xf1, 0xfc, 0xbb, 0x26, 0x58, 0xba, 0x4f, 0xd1,
	0xda, 0xdc, 0x7a, 0x46, 0x89, 0xbe, 0xc8, 0x06, 0x9e, 0xdb, 0x87, 0x8e, 0xd0, 0xbe, 0xb7, 0x91,
	0x2f, 0x8f, 0x5a, 0x50, 0x9e, 0xc2, 0xaf, 0xa5, 0xcf, 0x7e, 0x5e, 0x4d, 0x29, 0xdc, 0x99, 0x3c,
	0xc2, 0x99, 0x18, 0xc0, 0xa7, 0x73, 0x5c, 0xae, 0x96, 0xed, 0x0d, 0xe9, 0x42, 0x1c, 0xa2, 0x8c,
	0xcd, 0xe4, 0x6d, 0x8c, 0x35, 0x0f, 0xd4, 0x00, 0xf4, 0x86, 0x1a, 0xd0, 0xb4, 0x78, 0xe6, 0xd9,
	0xb2, 0x6e, 0xfa, 0x81, 0x67, 0x36, 0xdb, 0xfc, 0x5a, 0xd4, 0xb2, 0x11, 0xd6, 0xb2, 0xfc, 0x86,
	0x69, 0x83, 0x1f, 0xa8, 0xb6, 0x5b, 0x7b, 0xf0, 0x4d, 0x9f, 0xa2, 0xcf, 0x4e, 0x1e, 0x66, 0x82,
	0xf8, 0x4a, 0x00, 0x64, 0x22, 0xb5, 0x6a, 0xc0, 0xa5, 0xdb, 0xae, 0x1e, 0x4b, 0xdf, 0xbd, 0xbd,
	0x74, 0xa4, 0x56, 0x0d, 0xc8, 0x8b, 0xf8, 0x09, 0x1d, 0x2c, 0x08, 0xa0, 0xe1, 0x7a, 0xe0, 0xaa,
	0x1e, 0xd0, 0xf9, 0x35, 0xb4, 0xbe, 0x50, 0x5b, 0x8c, 0x22, 0xef, 0x3a, 0x4c, 0xb3, 0x5d, 0x65,
	0x31, 0x74, 0xda, 0x0b, 0x7d, 0x2a, 0x9f, 0x22, 0xde, 0x83, 0x3f, 0x2e, 0x29, 0xfa, 0xa8, 0x4f,
	0xd1, 0x61, 0x9f, 0xa2, 0x2f, 0xb9, 0xfb, 0x80, 0x3e, 0xbf, 0x0b, 0x76, 0x13, 0x3c, 0xbf, 0x58,
	0x8f, 0xe1, 0x8b, 0x6f, 0xc6, 0x6f, 0x15, 0x5f, 0x49, 0x6a, 0x1c, 0x0d, 0xa8, 0xc4, 0xdb, 0xb9,
	0xbd, 0x03, 0x9d, 0xf2, 0xab, 0xaa, 0x0d, 0x45, 0xe6, 0x19, 0xe2, 0xe3, 0xb5, 0xc4, 0x48, 0x1c,
	0x0f, 0x68, 0xea, 0x64, 0x48, 0x73, 0xfb, 0xd0, 0xd9, 0x4e, 0xde, 0x7f, 0x3f, 0xa4, 0xf7, 0xe2,
	0x26, 0xec, 0x40, 0x47, 0xfa, 0x01, 0x61, 0x92, 0xec, 0x63, 0x88, 0x41, 0x6a, 0x61, 0xcf, 0xd1,
	0xb5, 0x3d, 0x5f, 0xea, 0x0d, 0xe9, 0xc4, 0x18, 0x8d, 0x67, 0xe0, 0x31, 0x5e, 0x8c, 0x9b, 0xdc,
	0x48, 0x4c, 0xe7, 0xe4, 0x1c, 0x8c, 0xe6, 0x94, 0x67, 0x52, 0x79, 0xf9, 0x68, 0x40, 0xb7, 0xf8,
	0xc4, 0x8e, 0x93, 0x8b, 0xed, 0xdb, 0xf5, 0x84, 0xe3, 0xcc, 0x94, 0x37, 0xbe, 0x58, 0x98, 0x5c,
	0xa9, 0xaa, 0x6b, 0x92, 0x63, 0x9e, 0x9f, 0x28, 0xe9, 0xc4, 0xac, 0x2f, 0x5f, 0x91, 0x52, 0xfe,
	0xc9, 0x84, 0x41, 0x11, 0xff, 0x04, 0x92, 0xd3, 0xeb, 0xd3, 0x4d, 0x05, 0x7c, 0xd6, 0xf6, 0xb4,
	0x09, 0x15, 0xbf, 0x58, 0xd5, 0xf8, 0xc3, 0xbb, 0xaa, 0xa3, 0x1a, 0x50, 0x9c, 0xe6, 0x39, 0x1f,
	0x50, 0xf4, 0xed, 0x90, 0xe6, 0xa6, 0xef, 0x3f, 0xfe, 0xf1, 0xb7, 0xcf, 0xef, 0x3c, 0x94, 0x96,
	0xe4, 0x70, 0x4e, 0xe5, 0xe4, 0xa6, 0x56, 0xd0, 0x23, 0xf2, 0x15, 0xc2, 0x24, 0xec, 0xf8, 0x8d,
	0x91, 0xdf, 0xb9, 0x05, 0xf2, 0x08, 0x2f, 0x9c, 0xdc, 0x99, 0x78, 0xe1, 0x68, 0xfe, 0xbf, 0x78,
	0xe1, 0x2a, 0xfe, 0x0d, 0xef, 0x08, 0xe1, 0xdc, 0xeb, 0x2d, 0x76, 0xf0, 0xef, 0xe0, 0xae, 0x32,
	0x48, 0x4a, 0xaf, 0x4f, 0x1f, 0xff, 0x13, 0xe2, 0x5b, 0x26, 0x1c, 0x14, 0x67, 0xb6, 0x76, 0x59,
	0x22, 0xb2, 0xdf, 0x62, 0x07, 0xd3, 0x68, 0x2f, 0x20, 0xf2, 0x1d, 0xc2, 0x0f, 0xaa, 0xba, 0x3e,
	0x63, 0xe1, 0x9e, 0xb9, 0x02, 0x24, 0x34, 0xcf, 0x2a, 0xa2, 0x7d, 0x8b, 0x22, 0x76, 0x07, 0xe3,
	0xa5, 0xe5, 0xfb, 0x24, 0xb8, 0x57, 0xa4, 0x65, 0x59, 0xd5, 0xf5, 0x09, 0x6c, 0x5b, 0x3c, 0xcf,
	0xeb, 0x7a, 0x8a, 0x30, 0x55, 0xc0, 0x66, 0xef, 0xc1, 0x7f, 0x42, 0x6f, 0xdd, 0x90, 0x7e, 0x26,
	0xf9, 0xaa, 0x94, 0x97, 0x3d, 0xc1, 0x36, 0x1b, 0xbe, 0xb6, 0x72, 0xf6, 0x6b, 0x21, 0x75, 0xd6,
	0x2d, 0xa0, 0xf3, 0x6e, 0x01, 0xfd, 0xd2, 0x2d, 0xa0, 0xc3, 0x8b, 0x42, 0xea, 0xfc, 0xa2, 0x90,
	0xfa, 0xe9, 0xa2, 0x90, 0x6a, 0xce, 0x0b, 0xb2, 0xcd, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x17,
	0xff, 0x03, 0x1c, 0x72, 0x08, 0x00, 0x00,
}

func (this *CloudletPoolKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletPoolKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudletpool(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudletPoolApiClient is the client API for CloudletPoolApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudletPoolApiClient interface {
	// Create a CloudletPool
	CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Update a CloudletPool
	UpdateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error)
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
}

type cloudletPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletPoolApiClient(cc *grpc.ClientConn) CloudletPoolApiClient {
	return &cloudletPoolApiClient{cc}
}

func (c *cloudletPoolApiClient) CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletPoolApi/CreateCloudletPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletPoolApi/DeleteCloudletPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) UpdateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletPoolApi/UpdateCloudletPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CloudletPoolApi_serviceDesc.Streams[0], "/edgeproto.CloudletPoolApi/ShowCloudletPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolApiShowCloudletPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolApi_ShowCloudletPoolClient interface {
	Recv() (*CloudletPool, error)
	grpc.ClientStream
}

type cloudletPoolApiShowCloudletPoolClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolApiShowCloudletPoolClient) Recv() (*CloudletPool, error) {
	m := new(CloudletPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletPoolApiClient) AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletPoolApi/AddCloudletPoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.CloudletPoolApi/RemoveCloudletPoolMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudletPoolApiServer is the server API for CloudletPoolApi service.
type CloudletPoolApiServer interface {
	// Create a CloudletPool
	CreateCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Update a CloudletPool
	UpdateCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(*CloudletPool, CloudletPoolApi_ShowCloudletPoolServer) error
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
}

// UnimplementedCloudletPoolApiServer can be embedded to have forward compatible implementations.
type UnimplementedCloudletPoolApiServer struct {
}

func (*UnimplementedCloudletPoolApiServer) CreateCloudletPool(ctx context.Context, req *CloudletPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudletPool not implemented")
}
func (*UnimplementedCloudletPoolApiServer) DeleteCloudletPool(ctx context.Context, req *CloudletPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudletPool not implemented")
}
func (*UnimplementedCloudletPoolApiServer) UpdateCloudletPool(ctx context.Context, req *CloudletPool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudletPool not implemented")
}
func (*UnimplementedCloudletPoolApiServer) ShowCloudletPool(req *CloudletPool, srv CloudletPoolApi_ShowCloudletPoolServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCloudletPool not implemented")
}
func (*UnimplementedCloudletPoolApiServer) AddCloudletPoolMember(ctx context.Context, req *CloudletPoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCloudletPoolMember not implemented")
}
func (*UnimplementedCloudletPoolApiServer) RemoveCloudletPoolMember(ctx context.Context, req *CloudletPoolMember) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudletPoolMember not implemented")
}

func RegisterCloudletPoolApiServer(s *grpc.Server, srv CloudletPoolApiServer) {
	s.RegisterService(&_CloudletPoolApi_serviceDesc, srv)
}

func _CloudletPoolApi_CreateCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/CreateCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_DeleteCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/DeleteCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_UpdateCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).UpdateCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/UpdateCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).UpdateCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_ShowCloudletPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolApiServer).ShowCloudletPool(m, &cloudletPoolApiShowCloudletPoolServer{stream})
}

type CloudletPoolApi_ShowCloudletPoolServer interface {
	Send(*CloudletPool) error
	grpc.ServerStream
}

type cloudletPoolApiShowCloudletPoolServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolApiShowCloudletPoolServer) Send(m *CloudletPool) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletPoolApi_AddCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).AddCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/AddCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).AddCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_RemoveCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).RemoveCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/RemoveCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).RemoveCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletPoolApi",
	HandlerType: (*CloudletPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudletPool",
			Handler:    _CloudletPoolApi_CreateCloudletPool_Handler,
		},
		{
			MethodName: "DeleteCloudletPool",
			Handler:    _CloudletPoolApi_DeleteCloudletPool_Handler,
		},
		{
			MethodName: "UpdateCloudletPool",
			Handler:    _CloudletPoolApi_UpdateCloudletPool_Handler,
		},
		{
			MethodName: "AddCloudletPoolMember",
			Handler:    _CloudletPoolApi_AddCloudletPoolMember_Handler,
		},
		{
			MethodName: "RemoveCloudletPoolMember",
			Handler:    _CloudletPoolApi_RemoveCloudletPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletPool",
			Handler:       _CloudletPoolApi_ShowCloudletPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletpool.proto",
}

func (m *CloudletPoolKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletPoolKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudletPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Cloudlets) > 0 {
		for iNdEx := len(m.Cloudlets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cloudlets[iNdEx])
			copy(dAtA[i:], m.Cloudlets[iNdEx])
			i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Cloudlets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CloudletPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletPoolMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CloudletName) > 0 {
		i -= len(m.CloudletName)
		copy(dAtA[i:], m.CloudletName)
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.CloudletName)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCloudletpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCloudletpool(dAtA []byte, offset int, v uint64) int {
	offset -= sovCloudletpool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudletPoolKey) Matches(o *CloudletPoolKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *CloudletPoolKey) CopyInFields(src *CloudletPoolKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *CloudletPoolKey) DeepCopyIn(src *CloudletPoolKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *CloudletPoolKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletPoolKey key string", "obj", m)
	}
	return string(key)
}

func CloudletPoolKeyStringParse(str string, key *CloudletPoolKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletPoolKey key string", "str", str)
	}
}

func (m *CloudletPoolKey) NotFoundError() error {
	return fmt.Errorf("CloudletPool key %s not found", m.GetKeyString())
}

func (m *CloudletPoolKey) ExistsError() error {
	return fmt.Errorf("CloudletPool key %s already exists", m.GetKeyString())
}

func (m *CloudletPoolKey) BeingDeletedError() error {
	return fmt.Errorf("CloudletPool %s is being deleted", m.GetKeyString())
}

var CloudletPoolKeyTagOrganization = "cloudletpoolorg"
var CloudletPoolKeyTagName = "cloudletpool"

func (m *CloudletPoolKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["cloudletpoolorg"] = m.Organization
	tags["cloudletpool"] = m.Name
	return tags
}

// Helper method to check that enums have valid values
func (m *CloudletPoolKey) ValidateEnums() error {
	return nil
}

func (m *CloudletPool) Matches(o *CloudletPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Cloudlets != nil {
		if len(m.Cloudlets) == 0 && len(o.Cloudlets) > 0 || len(m.Cloudlets) > 0 && len(o.Cloudlets) == 0 {
			return false
		} else if m.Cloudlets != nil && o.Cloudlets != nil {
			if !opts.Filter && len(m.Cloudlets) != len(o.Cloudlets) {
				return false
			}
			found := 0
			for oIndex, _ := range o.Cloudlets {
				for mIndex, _ := range m.Cloudlets {
					if o.Cloudlets[oIndex] == m.Cloudlets[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.Cloudlets) {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	return true
}

const CloudletPoolFieldKey = "2"
const CloudletPoolFieldKeyOrganization = "2.1"
const CloudletPoolFieldKeyName = "2.2"
const CloudletPoolFieldCloudlets = "3"
const CloudletPoolFieldCreatedAt = "4"
const CloudletPoolFieldCreatedAtSeconds = "4.1"
const CloudletPoolFieldCreatedAtNanos = "4.2"
const CloudletPoolFieldUpdatedAt = "5"
const CloudletPoolFieldUpdatedAtSeconds = "5.1"
const CloudletPoolFieldUpdatedAtNanos = "5.2"
const CloudletPoolFieldDeletePrepare = "6"

var CloudletPoolAllFields = []string{
	CloudletPoolFieldKeyOrganization,
	CloudletPoolFieldKeyName,
	CloudletPoolFieldCloudlets,
	CloudletPoolFieldCreatedAtSeconds,
	CloudletPoolFieldCreatedAtNanos,
	CloudletPoolFieldUpdatedAtSeconds,
	CloudletPoolFieldUpdatedAtNanos,
	CloudletPoolFieldDeletePrepare,
}

var CloudletPoolAllFieldsMap = map[string]struct{}{
	CloudletPoolFieldKeyOrganization:  struct{}{},
	CloudletPoolFieldKeyName:          struct{}{},
	CloudletPoolFieldCloudlets:        struct{}{},
	CloudletPoolFieldCreatedAtSeconds: struct{}{},
	CloudletPoolFieldCreatedAtNanos:   struct{}{},
	CloudletPoolFieldUpdatedAtSeconds: struct{}{},
	CloudletPoolFieldUpdatedAtNanos:   struct{}{},
	CloudletPoolFieldDeletePrepare:    struct{}{},
}

var CloudletPoolAllFieldsStringMap = map[string]string{
	CloudletPoolFieldKeyOrganization:  "Key Organization",
	CloudletPoolFieldKeyName:          "Key Name",
	CloudletPoolFieldCloudlets:        "Cloudlets",
	CloudletPoolFieldCreatedAtSeconds: "Created At Seconds",
	CloudletPoolFieldCreatedAtNanos:   "Created At Nanos",
	CloudletPoolFieldUpdatedAtSeconds: "Updated At Seconds",
	CloudletPoolFieldUpdatedAtNanos:   "Updated At Nanos",
	CloudletPoolFieldDeletePrepare:    "Delete Prepare",
}

func (m *CloudletPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletPoolFieldKey+".") || s == CloudletPoolFieldKey
}

func (m *CloudletPool) DiffFields(o *CloudletPool, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[CloudletPoolFieldKeyOrganization] = struct{}{}
		fields[CloudletPoolFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletPoolFieldKeyName] = struct{}{}
		fields[CloudletPoolFieldKey] = struct{}{}
	}
	if len(m.Cloudlets) != len(o.Cloudlets) {
		fields[CloudletPoolFieldCloudlets] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Cloudlets); i0++ {
			if m.Cloudlets[i0] != o.Cloudlets[i0] {
				fields[CloudletPoolFieldCloudlets] = struct{}{}
				break
			}
		}
	}
	if m.CreatedAt.Seconds != o.CreatedAt.Seconds {
		fields[CloudletPoolFieldCreatedAtSeconds] = struct{}{}
		fields[CloudletPoolFieldCreatedAt] = struct{}{}
	}
	if m.CreatedAt.Nanos != o.CreatedAt.Nanos {
		fields[CloudletPoolFieldCreatedAtNanos] = struct{}{}
		fields[CloudletPoolFieldCreatedAt] = struct{}{}
	}
	if m.UpdatedAt.Seconds != o.UpdatedAt.Seconds {
		fields[CloudletPoolFieldUpdatedAtSeconds] = struct{}{}
		fields[CloudletPoolFieldUpdatedAt] = struct{}{}
	}
	if m.UpdatedAt.Nanos != o.UpdatedAt.Nanos {
		fields[CloudletPoolFieldUpdatedAtNanos] = struct{}{}
		fields[CloudletPoolFieldUpdatedAt] = struct{}{}
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields[CloudletPoolFieldDeletePrepare] = struct{}{}
	}
}

var UpdateCloudletPoolFieldsMap = map[string]struct{}{
	CloudletPoolFieldCloudlets: struct{}{},
}

func (m *CloudletPool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateCloudletPoolFieldsMap[field]; !ok {
			if _, ok := CloudletPoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, CloudletPoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *CloudletPool) CopyInFields(src *CloudletPool) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if src.Cloudlets != nil {
			m.Cloudlets = src.Cloudlets
			changed++
		} else if m.Cloudlets != nil {
			m.Cloudlets = nil
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if _, set := fmap["4.1"]; set {
			if m.CreatedAt.Seconds != src.CreatedAt.Seconds {
				m.CreatedAt.Seconds = src.CreatedAt.Seconds
				changed++
			}
		}
		if _, set := fmap["4.2"]; set {
			if m.CreatedAt.Nanos != src.CreatedAt.Nanos {
				m.CreatedAt.Nanos = src.CreatedAt.Nanos
				changed++
			}
		}
	}
	if _, set := fmap["5"]; set {
		if _, set := fmap["5.1"]; set {
			if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
				m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
				changed++
			}
		}
		if _, set := fmap["5.2"]; set {
			if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
				m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
				changed++
			}
		}
	}
	if _, set := fmap["6"]; set {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	return changed
}

func (m *CloudletPool) DeepCopyIn(src *CloudletPool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.Cloudlets != nil {
		m.Cloudlets = make([]string, len(src.Cloudlets), len(src.Cloudlets))
		for ii, s := range src.Cloudlets {
			m.Cloudlets[ii] = s
		}
	} else {
		m.Cloudlets = nil
	}
	m.CreatedAt = src.CreatedAt
	m.UpdatedAt = src.UpdatedAt
	m.DeletePrepare = src.DeletePrepare
}

func (s *CloudletPool) HasFields() bool {
	return true
}

type CloudletPoolStore interface {
	Create(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *CloudletPool, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*CloudletPool, int64, error)
	Get(ctx context.Context, key *CloudletPoolKey, buf *CloudletPool) bool
	STMGet(stm concurrency.STM, key *CloudletPoolKey, buf *CloudletPool) bool
	STMPut(stm concurrency.STM, obj *CloudletPool, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *CloudletPoolKey)
}

type CloudletPoolStoreImpl struct {
	kvstore objstore.KVStore
}

func NewCloudletPoolStore(kvstore objstore.KVStore) *CloudletPoolStoreImpl {
	return &CloudletPoolStoreImpl{kvstore: kvstore}
}

func (s *CloudletPoolStoreImpl) Create(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStoreImpl) Update(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStoreImpl) Put(ctx context.Context, m *CloudletPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStoreImpl) Delete(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStoreImpl) LoadOne(key string) (*CloudletPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletPool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletPoolStoreImpl) Get(ctx context.Context, key *CloudletPoolKey, buf *CloudletPool) bool {
	keystr := objstore.DbKeyString("CloudletPool", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *CloudletPoolStoreImpl) STMGet(stm concurrency.STM, key *CloudletPoolKey, buf *CloudletPool) bool {
	keystr := objstore.DbKeyString("CloudletPool", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *CloudletPoolStoreImpl) parseGetData(val []byte, buf *CloudletPool) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = CloudletPool{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletPoolStoreImpl) STMPut(stm concurrency.STM, obj *CloudletPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletPool json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletPoolStoreImpl) STMDel(stm concurrency.STM, key *CloudletPoolKey) {
	keystr := objstore.DbKeyString("CloudletPool", key)
	stm.Del(keystr)
}

type CloudletPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type CloudletPoolCacheData struct {
	Obj    *CloudletPool
	ModRev int64
}

// CloudletPoolCache caches CloudletPool objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletPoolCache struct {
	Objs          map[CloudletPoolKey]*CloudletPoolCacheData
	Mux           util.Mutex
	List          map[CloudletPoolKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *CloudletPool, new *CloudletPool)
	DeletedCbs    []func(ctx context.Context, old *CloudletPool)
	KeyWatchers   map[CloudletPoolKey][]*CloudletPoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletPoolKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletPoolKey)
}

func NewCloudletPoolCache() *CloudletPoolCache {
	cache := CloudletPoolCache{}
	InitCloudletPoolCache(&cache)
	return &cache
}

func InitCloudletPoolCache(cache *CloudletPoolCache) {
	cache.Objs = make(map[CloudletPoolKey]*CloudletPoolCacheData)
	cache.KeyWatchers = make(map[CloudletPoolKey][]*CloudletPoolKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *CloudletPoolCache) GetTypeString() string {
	return "CloudletPool"
}

func (c *CloudletPoolCache) Get(key *CloudletPoolKey, valbuf *CloudletPool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *CloudletPoolCache) GetWithRev(key *CloudletPoolKey, valbuf *CloudletPool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *CloudletPoolCache) HasKey(key *CloudletPoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletPoolCache) GetAllKeys(ctx context.Context, cb func(key *CloudletPoolKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *CloudletPoolCache) Update(ctx context.Context, in *CloudletPool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *CloudletPool) (*CloudletPool, bool) {
		return in, true
	})
}

func (c *CloudletPoolCache) UpdateModFunc(ctx context.Context, key *CloudletPoolKey, modRev int64, modFunc func(old *CloudletPool) (new *CloudletPool, changed bool)) {
	c.Mux.Lock()
	var old *CloudletPool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &CloudletPool{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &CloudletPool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &CloudletPoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletPoolCache) Delete(ctx context.Context, in *CloudletPool, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *CloudletPool) bool {
		return true
	})
}

func (c *CloudletPoolCache) DeleteCondFunc(ctx context.Context, in *CloudletPool, modRev int64, condFunc func(old *CloudletPool) bool) {
	c.Mux.Lock()
	var old *CloudletPool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletPoolCache) Prune(ctx context.Context, validKeys map[CloudletPoolKey]struct{}) {
	notify := make(map[CloudletPoolKey]*CloudletPoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletPoolCache) Show(filter *CloudletPool, cb func(ret *CloudletPool) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletPoolGenericNotifyCb(fn func(key *CloudletPoolKey, old *CloudletPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletPoolKey), obj.(*CloudletPool))
	}
}

func (c *CloudletPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64){fn}
}

func (c *CloudletPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletPool, new *CloudletPool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *CloudletPool, new *CloudletPool){fn}
}

func (c *CloudletPoolCache) SetDeletedCb(fn func(ctx context.Context, old *CloudletPool)) {
	c.DeletedCbs = []func(ctx context.Context, old *CloudletPool){fn}
}

func (c *CloudletPoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletPoolKey){fn}
}

func (c *CloudletPoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletPoolKey){fn}
}

func (c *CloudletPoolCache) AddUpdatedCb(fn func(ctx context.Context, old *CloudletPool, new *CloudletPool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *CloudletPoolCache) AddDeletedCb(fn func(ctx context.Context, old *CloudletPool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *CloudletPoolCache) AddNotifyCb(fn func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *CloudletPoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *CloudletPoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *CloudletPoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletPoolCache) WatchKey(key *CloudletPoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletPoolKeyWatcher, 0)
	}
	watcher := CloudletPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletPoolCache) TriggerKeyWatchers(ctx context.Context, key *CloudletPoolKey) {
	watchers := make([]*CloudletPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *CloudletPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := CloudletPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletPool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletPoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := CloudletPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletPoolKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *CloudletPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletPoolKey]struct{})
}

func (c *CloudletPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletPoolKey]*CloudletPoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletPoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

type CloudletPoolByCloudletKey struct {
	CloudletKeys map[CloudletKey]map[CloudletPoolKey]struct{}
	Mux          util.Mutex
}

func (s *CloudletPoolByCloudletKey) Init() {
	s.CloudletKeys = make(map[CloudletKey]map[CloudletPoolKey]struct{})
}

func (s *CloudletPoolByCloudletKey) Updated(old *CloudletPool, new *CloudletPool) map[CloudletKey]struct{} {
	// the below func must be implemented by the user:
	// CloudletPool.GetCloudletKeys() map[CloudletKey]struct{}
	oldCloudletKeys := make(map[CloudletKey]struct{})
	if old != nil {
		oldCloudletKeys = old.GetCloudletKeys()
	}
	newCloudletKeys := new.GetCloudletKeys()

	for lookup, _ := range oldCloudletKeys {
		if _, found := newCloudletKeys[lookup]; found {
			delete(oldCloudletKeys, lookup)
			delete(newCloudletKeys, lookup)
		}
	}

	s.Mux.Lock()
	defer s.Mux.Unlock()

	changed := make(map[CloudletKey]struct{})
	for lookup, _ := range oldCloudletKeys {
		// remove
		s.removeRef(lookup, old.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	for lookup, _ := range newCloudletKeys {
		// add
		s.addRef(lookup, new.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	return changed
}

func (s *CloudletPoolByCloudletKey) Deleted(old *CloudletPool) {
	oldCloudletKeys := old.GetCloudletKeys()

	s.Mux.Lock()
	defer s.Mux.Unlock()

	for lookup, _ := range oldCloudletKeys {
		s.removeRef(lookup, old.GetKeyVal())
	}
}

func (s *CloudletPoolByCloudletKey) addRef(lookup CloudletKey, key CloudletPoolKey) {
	CloudletPoolKeys, found := s.CloudletKeys[lookup]
	if !found {
		CloudletPoolKeys = make(map[CloudletPoolKey]struct{})
		s.CloudletKeys[lookup] = CloudletPoolKeys
	}
	CloudletPoolKeys[key] = struct{}{}
}

func (s *CloudletPoolByCloudletKey) removeRef(lookup CloudletKey, key CloudletPoolKey) {
	CloudletPoolKeys, found := s.CloudletKeys[lookup]
	if found {
		delete(CloudletPoolKeys, key)
		if len(CloudletPoolKeys) == 0 {
			delete(s.CloudletKeys, lookup)
		}
	}
}

func (s *CloudletPoolByCloudletKey) Find(lookup CloudletKey) []CloudletPoolKey {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	list := []CloudletPoolKey{}
	for k, _ := range s.CloudletKeys[lookup] {
		list = append(list, k)
	}
	return list
}

func (s *CloudletPoolByCloudletKey) HasRef(lookup CloudletKey) bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	_, found := s.CloudletKeys[lookup]
	return found
}

// Convert to dumpable format. JSON cannot marshal maps with struct keys.
func (s *CloudletPoolByCloudletKey) Dumpable() map[string]interface{} {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	dat := make(map[string]interface{})
	for lookup, keys := range s.CloudletKeys {
		keystrs := make(map[string]interface{})
		for k, _ := range keys {
			keystrs[k.GetKeyString()] = struct{}{}
		}
		dat[lookup.GetKeyString()] = keystrs
	}
	return dat
}

func (m *CloudletPool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletPool) GetKey() *CloudletPoolKey {
	return &m.Key
}

func (m *CloudletPool) GetKeyVal() CloudletPoolKey {
	return m.Key
}

func (m *CloudletPool) SetKey(key *CloudletPoolKey) {
	m.Key = *key
}

func CmpSortCloudletPool(a CloudletPool, b CloudletPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreCloudletPoolFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeletePrepare")
	}
	return cmpopts.IgnoreFields(CloudletPool{}, names...)
}

func (m *CloudletPoolMember) CopyInFields(src *CloudletPoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.CloudletName != src.CloudletName {
		m.CloudletName = src.CloudletName
		changed++
	}
	return changed
}

func (m *CloudletPoolMember) DeepCopyIn(src *CloudletPoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.CloudletName = src.CloudletName
}

func (m *CloudletPoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletPoolMember) GetKey() *CloudletPoolKey {
	return &m.Key
}

func (m *CloudletPoolMember) GetKeyVal() CloudletPoolKey {
	return m.Key
}

func (m *CloudletPoolMember) SetKey(key *CloudletPoolKey) {
	m.Key = *key
}

func CmpSortCloudletPoolMember(a CloudletPoolMember, b CloudletPoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *CloudletPoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *CloudletPool) IsValidArgsForCreateCloudletPool() error {
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *CloudletPool) IsValidArgsForDeleteCloudletPool() error {
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *CloudletPool) IsValidArgsForUpdateCloudletPool() error {
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	return nil
}

func (m *CloudletPoolMember) IsValidArgsForAddCloudletPoolMember() error {
	return nil
}

func (m *CloudletPoolMember) IsValidArgsForRemoveCloudletPoolMember() error {
	return nil
}

func (m *CloudletPoolKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	return n
}

func (m *CloudletPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	if len(m.Cloudlets) > 0 {
		for _, s := range m.Cloudlets {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	l = m.CreatedAt.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	l = m.UpdatedAt.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	if m.DeletePrepare {
		n += 2
	}
	return n
}

func (m *CloudletPoolMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	l = len(m.CloudletName)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	return n
}

func sovCloudletpool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCloudletpool(x uint64) (n int) {
	return sovCloudletpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletPoolKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloudlets = append(m.Cloudlets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudletpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCloudletpool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCloudletpool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCloudletpool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCloudletpool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudletpool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCloudletpool = fmt.Errorf("proto: unexpected end of group")
)
