// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CloudletPool unique key
//
// CloudletPoolKey uniquely identifies a CloudletPool.
type CloudletPoolKey struct {
	// Name of the organization this pool belongs to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// CloudletPool Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletPoolKey) Reset()                    { *m = CloudletPoolKey{} }
func (m *CloudletPoolKey) String() string            { return proto.CompactTextString(m) }
func (*CloudletPoolKey) ProtoMessage()               {}
func (*CloudletPoolKey) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{0} }

// CloudletPool defines a pool of Cloudlets that have restricted access.
type CloudletPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// CloudletPool key
	Key CloudletPoolKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Cloudlets part of the pool
	Cloudlets []string `protobuf:"bytes,3,rep,name=cloudlets" json:"cloudlets,omitempty"`
}

func (m *CloudletPool) Reset()                    { *m = CloudletPool{} }
func (m *CloudletPool) String() string            { return proto.CompactTextString(m) }
func (*CloudletPool) ProtoMessage()               {}
func (*CloudletPool) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{1} }

// CloudletPoolMember is used to add and remove a Cloudlet from a CloudletPool
type CloudletPoolMember struct {
	// CloudletPool key
	Key CloudletPoolKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Cloudlet key
	CloudletName string `protobuf:"bytes,2,opt,name=cloudlet_name,json=cloudletName,proto3" json:"cloudlet_name,omitempty"`
}

func (m *CloudletPoolMember) Reset()                    { *m = CloudletPoolMember{} }
func (m *CloudletPoolMember) String() string            { return proto.CompactTextString(m) }
func (*CloudletPoolMember) ProtoMessage()               {}
func (*CloudletPoolMember) Descriptor() ([]byte, []int) { return fileDescriptorCloudletpool, []int{2} }

func init() {
	proto.RegisterType((*CloudletPoolKey)(nil), "edgeproto.CloudletPoolKey")
	proto.RegisterType((*CloudletPool)(nil), "edgeproto.CloudletPool")
	proto.RegisterType((*CloudletPoolMember)(nil), "edgeproto.CloudletPoolMember")
}
func (this *CloudletPoolKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletPoolKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudletpool(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletPoolApi service

type CloudletPoolApiClient interface {
	// Create a CloudletPool
	CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Update a CloudletPool
	UpdateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error)
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error)
}

type cloudletPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletPoolApiClient(cc *grpc.ClientConn) CloudletPoolApiClient {
	return &cloudletPoolApiClient{cc}
}

func (c *cloudletPoolApiClient) CreateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/CreateCloudletPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) DeleteCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/DeleteCloudletPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) UpdateCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/UpdateCloudletPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) ShowCloudletPool(ctx context.Context, in *CloudletPool, opts ...grpc.CallOption) (CloudletPoolApi_ShowCloudletPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletPoolApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletPoolApi/ShowCloudletPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletPoolApiShowCloudletPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletPoolApi_ShowCloudletPoolClient interface {
	Recv() (*CloudletPool, error)
	grpc.ClientStream
}

type cloudletPoolApiShowCloudletPoolClient struct {
	grpc.ClientStream
}

func (x *cloudletPoolApiShowCloudletPoolClient) Recv() (*CloudletPool, error) {
	m := new(CloudletPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletPoolApiClient) AddCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/AddCloudletPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletPoolApiClient) RemoveCloudletPoolMember(ctx context.Context, in *CloudletPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletPoolApi/RemoveCloudletPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudletPoolApi service

type CloudletPoolApiServer interface {
	// Create a CloudletPool
	CreateCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Delete a CloudletPool
	DeleteCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Update a CloudletPool
	UpdateCloudletPool(context.Context, *CloudletPool) (*Result, error)
	// Show CloudletPools
	ShowCloudletPool(*CloudletPool, CloudletPoolApi_ShowCloudletPoolServer) error
	// Add a Cloudlet to a CloudletPool
	AddCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
	// Remove a Cloudlet from a CloudletPool
	RemoveCloudletPoolMember(context.Context, *CloudletPoolMember) (*Result, error)
}

func RegisterCloudletPoolApiServer(s *grpc.Server, srv CloudletPoolApiServer) {
	s.RegisterService(&_CloudletPoolApi_serviceDesc, srv)
}

func _CloudletPoolApi_CreateCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/CreateCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).CreateCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_DeleteCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/DeleteCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).DeleteCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_UpdateCloudletPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).UpdateCloudletPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/UpdateCloudletPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).UpdateCloudletPool(ctx, req.(*CloudletPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_ShowCloudletPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletPoolApiServer).ShowCloudletPool(m, &cloudletPoolApiShowCloudletPoolServer{stream})
}

type CloudletPoolApi_ShowCloudletPoolServer interface {
	Send(*CloudletPool) error
	grpc.ServerStream
}

type cloudletPoolApiShowCloudletPoolServer struct {
	grpc.ServerStream
}

func (x *cloudletPoolApiShowCloudletPoolServer) Send(m *CloudletPool) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletPoolApi_AddCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).AddCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/AddCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).AddCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletPoolApi_RemoveCloudletPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletPoolApiServer).RemoveCloudletPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletPoolApi/RemoveCloudletPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletPoolApiServer).RemoveCloudletPoolMember(ctx, req.(*CloudletPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletPoolApi",
	HandlerType: (*CloudletPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudletPool",
			Handler:    _CloudletPoolApi_CreateCloudletPool_Handler,
		},
		{
			MethodName: "DeleteCloudletPool",
			Handler:    _CloudletPoolApi_DeleteCloudletPool_Handler,
		},
		{
			MethodName: "UpdateCloudletPool",
			Handler:    _CloudletPoolApi_UpdateCloudletPool_Handler,
		},
		{
			MethodName: "AddCloudletPoolMember",
			Handler:    _CloudletPoolApi_AddCloudletPoolMember_Handler,
		},
		{
			MethodName: "RemoveCloudletPoolMember",
			Handler:    _CloudletPoolApi_RemoveCloudletPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletPool",
			Handler:       _CloudletPoolApi_ShowCloudletPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletpool.proto",
}

func (m *CloudletPoolKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organization) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CloudletPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletpool(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Cloudlets) > 0 {
		for _, s := range m.Cloudlets {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CloudletPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletPoolMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudletpool(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.CloudletName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudletpool(dAtA, i, uint64(len(m.CloudletName)))
		i += copy(dAtA[i:], m.CloudletName)
	}
	return i, nil
}

func encodeVarintCloudletpool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletPoolKey) Matches(o *CloudletPoolKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *CloudletPoolKey) CopyInFields(src *CloudletPoolKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *CloudletPoolKey) DeepCopyIn(src *CloudletPoolKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *CloudletPoolKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletPoolKey key string", "obj", m)
	}
	return string(key)
}

func CloudletPoolKeyStringParse(str string, key *CloudletPoolKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletPoolKey key string", "str", str)
	}
}

func (m *CloudletPoolKey) NotFoundError() error {
	return fmt.Errorf("CloudletPool key %s not found", m.GetKeyString())
}

func (m *CloudletPoolKey) ExistsError() error {
	return fmt.Errorf("CloudletPool key %s already exists", m.GetKeyString())
}

var CloudletPoolKeyTagOrganization = "cloudletpoolorg"
var CloudletPoolKeyTagName = "cloudletpool"

func (m *CloudletPoolKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["cloudletpoolorg"] = m.Organization
	tags["cloudletpool"] = m.Name
	return tags
}

// Helper method to check that enums have valid values
func (m *CloudletPoolKey) ValidateEnums() error {
	return nil
}

func (m *CloudletPool) Matches(o *CloudletPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Cloudlets != nil {
		if m.Cloudlets == nil && o.Cloudlets != nil || m.Cloudlets != nil && o.Cloudlets == nil {
			return false
		} else if m.Cloudlets != nil && o.Cloudlets != nil {
			if len(m.Cloudlets) != len(o.Cloudlets) {
				return false
			}
			for i := 0; i < len(m.Cloudlets); i++ {
				if o.Cloudlets[i] != m.Cloudlets[i] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletPoolFieldKey = "2"
const CloudletPoolFieldKeyOrganization = "2.1"
const CloudletPoolFieldKeyName = "2.2"
const CloudletPoolFieldCloudlets = "3"

var CloudletPoolAllFields = []string{
	CloudletPoolFieldKeyOrganization,
	CloudletPoolFieldKeyName,
	CloudletPoolFieldCloudlets,
}

var CloudletPoolAllFieldsMap = map[string]struct{}{
	CloudletPoolFieldKeyOrganization: struct{}{},
	CloudletPoolFieldKeyName:         struct{}{},
	CloudletPoolFieldCloudlets:       struct{}{},
}

var CloudletPoolAllFieldsStringMap = map[string]string{
	CloudletPoolFieldKeyOrganization: "Key Organization",
	CloudletPoolFieldKeyName:         "Key Name",
	CloudletPoolFieldCloudlets:       "Cloudlets",
}

func (m *CloudletPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletPoolFieldKey+".") || s == CloudletPoolFieldKey
}

func (m *CloudletPool) DiffFields(o *CloudletPool, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[CloudletPoolFieldKeyOrganization] = struct{}{}
		fields[CloudletPoolFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletPoolFieldKeyName] = struct{}{}
		fields[CloudletPoolFieldKey] = struct{}{}
	}
	if len(m.Cloudlets) != len(o.Cloudlets) {
		fields[CloudletPoolFieldCloudlets] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Cloudlets); i0++ {
			if m.Cloudlets[i0] != o.Cloudlets[i0] {
				fields[CloudletPoolFieldCloudlets] = struct{}{}
				break
			}
		}
	}
}

var UpdateCloudletPoolFieldsMap = map[string]struct{}{
	CloudletPoolFieldCloudlets: struct{}{},
}

func (m *CloudletPool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateCloudletPoolFieldsMap[field]; !ok {
			if _, ok := CloudletPoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, CloudletPoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *CloudletPool) CopyInFields(src *CloudletPool) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		m.Cloudlets = src.Cloudlets
		changed++
	}
	return changed
}

func (m *CloudletPool) DeepCopyIn(src *CloudletPool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.Cloudlets != nil {
		m.Cloudlets = make([]string, len(src.Cloudlets), len(src.Cloudlets))
		for ii, s := range src.Cloudlets {
			m.Cloudlets[ii] = s
		}
	} else {
		m.Cloudlets = nil
	}
}

func (s *CloudletPool) HasFields() bool {
	return true
}

type CloudletPoolStore struct {
	kvstore objstore.KVStore
}

func NewCloudletPoolStore(kvstore objstore.KVStore) CloudletPoolStore {
	return CloudletPoolStore{kvstore: kvstore}
}

func (s *CloudletPoolStore) Create(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Update(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Put(ctx context.Context, m *CloudletPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) Delete(ctx context.Context, m *CloudletPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletPoolStore) LoadOne(key string) (*CloudletPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletPool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletPoolStore) STMGet(stm concurrency.STM, key *CloudletPoolKey, buf *CloudletPool) bool {
	keystr := objstore.DbKeyString("CloudletPool", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletPoolStore) STMPut(stm concurrency.STM, obj *CloudletPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletPool json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletPoolStore) STMDel(stm concurrency.STM, key *CloudletPoolKey) {
	keystr := objstore.DbKeyString("CloudletPool", key)
	stm.Del(keystr)
}

type CloudletPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type CloudletPoolCacheData struct {
	Obj    *CloudletPool
	ModRev int64
}

// CloudletPoolCache caches CloudletPool objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletPoolCache struct {
	Objs          map[CloudletPoolKey]*CloudletPoolCacheData
	Mux           util.Mutex
	List          map[CloudletPoolKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *CloudletPool, new *CloudletPool)
	DeletedCbs    []func(ctx context.Context, old *CloudletPool)
	KeyWatchers   map[CloudletPoolKey][]*CloudletPoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletPoolKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletPoolKey)
}

func NewCloudletPoolCache() *CloudletPoolCache {
	cache := CloudletPoolCache{}
	InitCloudletPoolCache(&cache)
	return &cache
}

func InitCloudletPoolCache(cache *CloudletPoolCache) {
	cache.Objs = make(map[CloudletPoolKey]*CloudletPoolCacheData)
	cache.KeyWatchers = make(map[CloudletPoolKey][]*CloudletPoolKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *CloudletPoolCache) GetTypeString() string {
	return "CloudletPool"
}

func (c *CloudletPoolCache) Get(key *CloudletPoolKey, valbuf *CloudletPool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *CloudletPoolCache) GetWithRev(key *CloudletPoolKey, valbuf *CloudletPool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *CloudletPoolCache) HasKey(key *CloudletPoolKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletPoolCache) GetAllKeys(ctx context.Context, cb func(key *CloudletPoolKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *CloudletPoolCache) Update(ctx context.Context, in *CloudletPool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *CloudletPool) (*CloudletPool, bool) {
		return in, true
	})
}

func (c *CloudletPoolCache) UpdateModFunc(ctx context.Context, key *CloudletPoolKey, modRev int64, modFunc func(old *CloudletPool) (new *CloudletPool, changed bool)) {
	c.Mux.Lock()
	var old *CloudletPool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &CloudletPool{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &CloudletPool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &CloudletPoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletPoolCache) Delete(ctx context.Context, in *CloudletPool, modRev int64) {
	c.Mux.Lock()
	var old *CloudletPool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletPoolCache) Prune(ctx context.Context, validKeys map[CloudletPoolKey]struct{}) {
	notify := make(map[CloudletPoolKey]*CloudletPoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletPoolCache) Show(filter *CloudletPool, cb func(ret *CloudletPool) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletPool", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare CloudletPool", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletPool", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletPoolGenericNotifyCb(fn func(key *CloudletPoolKey, old *CloudletPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletPoolKey), obj.(*CloudletPool))
	}
}

func (c *CloudletPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64){fn}
}

func (c *CloudletPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletPool, new *CloudletPool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *CloudletPool, new *CloudletPool){fn}
}

func (c *CloudletPoolCache) SetDeletedCb(fn func(ctx context.Context, old *CloudletPool)) {
	c.DeletedCbs = []func(ctx context.Context, old *CloudletPool){fn}
}

func (c *CloudletPoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletPoolKey){fn}
}

func (c *CloudletPoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletPoolKey){fn}
}

func (c *CloudletPoolCache) AddUpdatedCb(fn func(ctx context.Context, old *CloudletPool, new *CloudletPool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *CloudletPoolCache) AddDeletedCb(fn func(ctx context.Context, old *CloudletPool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *CloudletPoolCache) AddNotifyCb(fn func(ctx context.Context, obj *CloudletPoolKey, old *CloudletPool, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *CloudletPoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *CloudletPoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletPoolKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *CloudletPoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletPoolCache) WatchKey(key *CloudletPoolKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletPoolKeyWatcher, 0)
	}
	watcher := CloudletPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletPoolCache) TriggerKeyWatchers(ctx context.Context, key *CloudletPoolKey) {
	watchers := make([]*CloudletPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *CloudletPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := CloudletPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletPool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletPoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := CloudletPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletPoolKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *CloudletPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletPoolKey]struct{})
}

func (c *CloudletPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletPoolKey]*CloudletPoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletPoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *CloudletPool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletPool) GetKey() *CloudletPoolKey {
	return &m.Key
}

func (m *CloudletPool) GetKeyVal() CloudletPoolKey {
	return m.Key
}

func (m *CloudletPool) SetKey(key *CloudletPoolKey) {
	m.Key = *key
}

func CmpSortCloudletPool(a CloudletPool, b CloudletPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *CloudletPoolMember) CopyInFields(src *CloudletPoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.CloudletName != src.CloudletName {
		m.CloudletName = src.CloudletName
		changed++
	}
	return changed
}

func (m *CloudletPoolMember) DeepCopyIn(src *CloudletPoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.CloudletName = src.CloudletName
}

func (m *CloudletPoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletPoolMember) GetKey() *CloudletPoolKey {
	return &m.Key
}

func (m *CloudletPoolMember) GetKeyVal() CloudletPoolKey {
	return m.Key
}

func (m *CloudletPoolMember) SetKey(key *CloudletPoolKey) {
	m.Key = *key
}

func CmpSortCloudletPoolMember(a CloudletPoolMember, b CloudletPoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *CloudletPoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *CloudletPoolKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	return n
}

func (m *CloudletPool) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	if len(m.Cloudlets) > 0 {
		for _, s := range m.Cloudlets {
			l = len(s)
			n += 1 + l + sovCloudletpool(uint64(l))
		}
	}
	return n
}

func (m *CloudletPoolMember) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovCloudletpool(uint64(l))
	l = len(m.CloudletName)
	if l > 0 {
		n += 1 + l + sovCloudletpool(uint64(l))
	}
	return n
}

func sovCloudletpool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudletpool(x uint64) (n int) {
	return sovCloudletpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletPoolKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloudlets = append(m.Cloudlets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudletpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudletpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudletpool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudletpool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudletpool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudletpool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudletpool   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloudletpool.proto", fileDescriptorCloudletpool) }

var fileDescriptorCloudletpool = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x93, 0x4b, 0x6b, 0x13, 0x51,
	0x14, 0xc7, 0x7b, 0xdb, 0xd2, 0x92, 0x6b, 0xa4, 0xf1, 0x5a, 0xcd, 0x35, 0xc4, 0xa4, 0x8c, 0x2e,
	0x8a, 0xc4, 0x8c, 0xa6, 0x0b, 0x4b, 0x30, 0x8b, 0xa4, 0xee, 0x4a, 0x55, 0x46, 0x2c, 0x14, 0x04,
	0x99, 0x64, 0x8e, 0x93, 0xb1, 0x33, 0x73, 0xc3, 0xcc, 0xc4, 0x18, 0x17, 0x22, 0x7e, 0x04, 0xdd,
	0x94, 0xac, 0x5c, 0xb8, 0xaa, 0x2e, 0x8a, 0xcb, 0x7e, 0x82, 0x2c, 0x85, 0xee, 0x45, 0x83, 0xa0,
	0x74, 0x25, 0xe4, 0x81, 0x4b, 0x99, 0x9b, 0xd7, 0x24, 0x4e, 0x44, 0x8d, 0xe0, 0x26, 0x9c, 0x7b,
	0x9e, 0xbf, 0xf3, 0xcf, 0x19, 0x4c, 0x0a, 0x3a, 0x2b, 0x2b, 0x3a, 0x38, 0x25, 0xc6, 0xf4, 0x64,
	0xc9, 0x62, 0x0e, 0x23, 0x01, 0x50, 0x54, 0xe0, 0x66, 0x24, 0xaa, 0x32, 0xa6, 0xea, 0x20, 0xca,
	0x25, 0x4d, 0x94, 0x4d, 0x93, 0x39, 0xb2, 0xa3, 0x31, 0xd3, 0xee, 0x26, 0x46, 0xd6, 0x55, 0xcd,
	0x29, 0x96, 0xf3, 0xc9, 0x02, 0x33, 0x44, 0x83, 0xe5, 0x35, 0xdd, 0x2d, 0x7c, 0x2c, 0xba, 0xbf,
	0x97, 0x79, 0x5f, 0x91, 0xe7, 0xa9, 0x60, 0x0e, 0x8c, 0x5e, 0x65, 0xd0, 0x02, 0xbb, 0xac, 0x3b,
	0xbd, 0xd7, 0xb2, 0xca, 0x54, 0xc6, 0x4d, 0xd1, 0xb5, 0xba, 0x5e, 0xe1, 0x29, 0x5e, 0xda, 0xe8,
	0xc1, 0xdd, 0x66, 0x4c, 0xdf, 0x84, 0x2a, 0xb9, 0x86, 0x83, 0xcc, 0x52, 0x65, 0x53, 0x7b, 0xc2,
	0x39, 0x28, 0x5a, 0x41, 0xab, 0x81, 0xdc, 0xe9, 0xc3, 0x0e, 0x5d, 0xf2, 0xee, 0xc1, 0x2c, 0x55,
	0x1a, 0x49, 0x24, 0x17, 0xf1, 0xbc, 0x29, 0x1b, 0x40, 0x67, 0x79, 0x41, 0xe8, 0xb0, 0x43, 0x83,
	0xde, 0x02, 0x89, 0x47, 0xd3, 0xc1, 0xaf, 0x4d, 0x8a, 0xbe, 0x37, 0x29, 0x3a, 0x78, 0x15, 0x47,
	0xc2, 0x11, 0xc2, 0x41, 0x2f, 0x00, 0x39, 0x8b, 0x17, 0x1e, 0x68, 0xa0, 0x2b, 0x36, 0x45, 0x2b,
	0x73, 0xab, 0x01, 0xa9, 0xf7, 0x22, 0x29, 0x3c, 0xb7, 0x0b, 0x55, 0xde, 0xfb, 0x44, 0x2a, 0x92,
	0x1c, 0xa8, 0x97, 0x1c, 0xc3, 0xcf, 0xcd, 0xd7, 0x3f, 0xc4, 0x67, 0x24, 0x37, 0x99, 0x44, 0x71,
	0xa0, 0x0f, 0x60, 0xd3, 0x39, 0xde, 0x6e, 0xe8, 0x48, 0xef, 0xb8, 0x20, 0xdf, 0x9a, 0x14, 0x3d,
	0x6b, 0x51, 0xb4, 0xd7, 0xa2, 0xe8, 0x45, 0x9b, 0x2e, 0x6e, 0x81, 0x91, 0x07, 0xcb, 0xae, 0xb5,
	0xa9, 0xe0, 0xd2, 0x66, 0x36, 0xa1, 0x9a, 0xbc, 0x29, 0x1b, 0x90, 0x60, 0x96, 0xca, 0x1f, 0xb7,
	0x3c, 0x1b, 0x1f, 0xb4, 0xe9, 0xcc, 0xbb, 0x0e, 0x0d, 0xed, 0x42, 0x35, 0xe3, 0xf5, 0x0b, 0x6f,
	0x10, 0x26, 0x5e, 0xae, 0x6e, 0xd7, 0xfe, 0x0e, 0xe8, 0x4f, 0x76, 0xb8, 0x80, 0x4f, 0xf6, 0x91,
	0xef, 0x0f, 0xd5, 0x95, 0x06, 0xca, 0xba, 0x70, 0xe9, 0xeb, 0xb5, 0x36, 0x5d, 0x77, 0x35, 0x1e,
	0xf2, 0xf6, 0xe3, 0x99, 0x0d, 0x4f, 0xa2, 0xef, 0x16, 0xa9, 0x2f, 0x8b, 0xa3, 0x47, 0x90, 0x2d,
	0x69, 0xe4, 0xad, 0xbb, 0x81, 0x05, 0xb2, 0x03, 0x23, 0xff, 0x4e, 0x78, 0x02, 0x74, 0xe4, 0x94,
	0x27, 0x20, 0xf1, 0xb3, 0x13, 0x1e, 0x1e, 0xb7, 0xe8, 0x9a, 0x04, 0x36, 0x2b, 0x5b, 0x85, 0x91,
	0x2e, 0x76, 0x22, 0x5b, 0x70, 0x07, 0x6f, 0xc9, 0xa6, 0xac, 0x42, 0x62, 0x9c, 0x67, 0xbf, 0x43,
	0x43, 0xe3, 0xbe, 0xe7, 0x47, 0x9f, 0x5f, 0xce, 0x9e, 0x13, 0x96, 0xc5, 0x02, 0x67, 0x12, 0xbd,
	0x77, 0x95, 0x46, 0x97, 0xc8, 0x1e, 0xc2, 0xe4, 0x06, 0xe8, 0x30, 0x05, 0xee, 0xf6, 0x5f, 0xe2,
	0x0e, 0xd0, 0x14, 0x3e, 0xdf, 0x17, 0xed, 0x6e, 0x49, 0x91, 0xff, 0x27, 0x5a, 0x99, 0xcf, 0xff,
	0x09, 0xad, 0x86, 0x70, 0xe8, 0x4e, 0x91, 0x55, 0x7e, 0x0f, 0x6c, 0x52, 0x40, 0x90, 0x8e, 0x5b,
	0xf4, 0xea, 0xaf, 0xf0, 0xb6, 0x35, 0xa8, 0xf8, 0xc3, 0x85, 0x05, 0x22, 0xda, 0x45, 0x56, 0x19,
	0x47, 0xbb, 0x82, 0xc8, 0x6b, 0x84, 0xcf, 0x64, 0x15, 0xc5, 0xe7, 0x33, 0x3a, 0x3f, 0x01, 0xa4,
	0x1b, 0xf6, 0x13, 0x70, 0x67, 0x1a, 0x01, 0xa3, 0x42, 0x58, 0x94, 0x15, 0x65, 0x04, 0xd1, 0xe0,
	0xa3, 0x5c, 0x0d, 0xf7, 0x11, 0xa6, 0x12, 0x18, 0xec, 0x11, 0xfc, 0x13, 0xd2, 0x7b, 0xd3, 0x90,
	0xc6, 0x85, 0x88, 0x68, 0x71, 0x16, 0x7f, 0xd8, 0x5c, 0xa8, 0xfe, 0x29, 0x36, 0x53, 0x6f, 0xc4,
	0xd0, 0xfb, 0x46, 0x0c, 0x7d, 0x6c, 0xc4, 0x50, 0x7e, 0x81, 0x4f, 0x5f, 0xfb, 0x11, 0x00, 0x00,
	0xff, 0xff, 0x74, 0x77, 0x10, 0x0b, 0xa3, 0x06, 0x00, 0x00,
}
