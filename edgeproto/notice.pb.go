// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notice.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NoticeAction int32

const (
	NoticeAction_NONE        NoticeAction = 0
	NoticeAction_UPDATE      NoticeAction = 1
	NoticeAction_DELETE      NoticeAction = 2
	NoticeAction_VERSION     NoticeAction = 3
	NoticeAction_SENDALL_END NoticeAction = 4
)

var NoticeAction_name = map[int32]string{
	0: "NONE",
	1: "UPDATE",
	2: "DELETE",
	3: "VERSION",
	4: "SENDALL_END",
}
var NoticeAction_value = map[string]int32{
	"NONE":        0,
	"UPDATE":      1,
	"DELETE":      2,
	"VERSION":     3,
	"SENDALL_END": 4,
}

func (x NoticeAction) String() string {
	return proto.EnumName(NoticeAction_name, int32(x))
}
func (NoticeAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

type NoticeRequestor int32

const (
	NoticeRequestor_NoticeRequestorNone NoticeRequestor = 0
	NoticeRequestor_NoticeRequestorDME  NoticeRequestor = 1
	NoticeRequestor_NoticeRequestorCRM  NoticeRequestor = 2
)

var NoticeRequestor_name = map[int32]string{
	0: "NoticeRequestorNone",
	1: "NoticeRequestorDME",
	2: "NoticeRequestorCRM",
}
var NoticeRequestor_value = map[string]int32{
	"NoticeRequestorNone": 0,
	"NoticeRequestorDME":  1,
	"NoticeRequestorCRM":  2,
}

func (x NoticeRequestor) String() string {
	return proto.EnumName(NoticeRequestor_name, int32(x))
}
func (NoticeRequestor) EnumDescriptor() ([]byte, []int) { return fileDescriptorNotice, []int{1} }

type NoticeReply struct {
	// action to perform
	Action NoticeAction `protobuf:"varint,1,opt,name=action,proto3,enum=edgeproto.NoticeAction" json:"action,omitempty"`
	// protocol version supported by sender
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// data included (for UPDATE and DELETE)
	//
	// Types that are valid to be assigned to Data:
	//	*NoticeReply_AppInst
	//	*NoticeReply_Cloudlet
	//	*NoticeReply_Flavor
	//	*NoticeReply_ClusterFlavor
	//	*NoticeReply_ClusterInst
	Data isNoticeReply_Data `protobuf_oneof:"data"`
}

func (m *NoticeReply) Reset()                    { *m = NoticeReply{} }
func (m *NoticeReply) String() string            { return proto.CompactTextString(m) }
func (*NoticeReply) ProtoMessage()               {}
func (*NoticeReply) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

type isNoticeReply_Data interface {
	isNoticeReply_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NoticeReply_AppInst struct {
	AppInst *AppInst `protobuf:"bytes,4,opt,name=appInst,oneof"`
}
type NoticeReply_Cloudlet struct {
	Cloudlet *Cloudlet `protobuf:"bytes,5,opt,name=cloudlet,oneof"`
}
type NoticeReply_Flavor struct {
	Flavor *Flavor `protobuf:"bytes,6,opt,name=flavor,oneof"`
}
type NoticeReply_ClusterFlavor struct {
	ClusterFlavor *ClusterFlavor `protobuf:"bytes,8,opt,name=clusterFlavor,oneof"`
}
type NoticeReply_ClusterInst struct {
	ClusterInst *ClusterInst `protobuf:"bytes,7,opt,name=clusterInst,oneof"`
}

func (*NoticeReply_AppInst) isNoticeReply_Data()       {}
func (*NoticeReply_Cloudlet) isNoticeReply_Data()      {}
func (*NoticeReply_Flavor) isNoticeReply_Data()        {}
func (*NoticeReply_ClusterFlavor) isNoticeReply_Data() {}
func (*NoticeReply_ClusterInst) isNoticeReply_Data()   {}

func (m *NoticeReply) GetData() isNoticeReply_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NoticeReply) GetAppInst() *AppInst {
	if x, ok := m.GetData().(*NoticeReply_AppInst); ok {
		return x.AppInst
	}
	return nil
}

func (m *NoticeReply) GetCloudlet() *Cloudlet {
	if x, ok := m.GetData().(*NoticeReply_Cloudlet); ok {
		return x.Cloudlet
	}
	return nil
}

func (m *NoticeReply) GetFlavor() *Flavor {
	if x, ok := m.GetData().(*NoticeReply_Flavor); ok {
		return x.Flavor
	}
	return nil
}

func (m *NoticeReply) GetClusterFlavor() *ClusterFlavor {
	if x, ok := m.GetData().(*NoticeReply_ClusterFlavor); ok {
		return x.ClusterFlavor
	}
	return nil
}

func (m *NoticeReply) GetClusterInst() *ClusterInst {
	if x, ok := m.GetData().(*NoticeReply_ClusterInst); ok {
		return x.ClusterInst
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NoticeReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NoticeReply_OneofMarshaler, _NoticeReply_OneofUnmarshaler, _NoticeReply_OneofSizer, []interface{}{
		(*NoticeReply_AppInst)(nil),
		(*NoticeReply_Cloudlet)(nil),
		(*NoticeReply_Flavor)(nil),
		(*NoticeReply_ClusterFlavor)(nil),
		(*NoticeReply_ClusterInst)(nil),
	}
}

func _NoticeReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NoticeReply)
	// data
	switch x := m.Data.(type) {
	case *NoticeReply_AppInst:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppInst); err != nil {
			return err
		}
	case *NoticeReply_Cloudlet:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cloudlet); err != nil {
			return err
		}
	case *NoticeReply_Flavor:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Flavor); err != nil {
			return err
		}
	case *NoticeReply_ClusterFlavor:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterFlavor); err != nil {
			return err
		}
	case *NoticeReply_ClusterInst:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterInst); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NoticeReply.Data has unexpected type %T", x)
	}
	return nil
}

func _NoticeReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NoticeReply)
	switch tag {
	case 4: // data.appInst
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppInst)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeReply_AppInst{msg}
		return true, err
	case 5: // data.cloudlet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cloudlet)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeReply_Cloudlet{msg}
		return true, err
	case 6: // data.flavor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Flavor)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeReply_Flavor{msg}
		return true, err
	case 8: // data.clusterFlavor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterFlavor)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeReply_ClusterFlavor{msg}
		return true, err
	case 7: // data.clusterInst
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterInst)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeReply_ClusterInst{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NoticeReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NoticeReply)
	// data
	switch x := m.Data.(type) {
	case *NoticeReply_AppInst:
		s := proto.Size(x.AppInst)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeReply_Cloudlet:
		s := proto.Size(x.Cloudlet)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeReply_Flavor:
		s := proto.Size(x.Flavor)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeReply_ClusterFlavor:
		s := proto.Size(x.ClusterFlavor)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeReply_ClusterInst:
		s := proto.Size(x.ClusterInst)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NoticeRequest struct {
	// action
	Action NoticeAction `protobuf:"varint,1,opt,name=action,proto3,enum=edgeproto.NoticeAction" json:"action,omitempty"`
	// protocol version supported by receiver
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// client requestor type
	Requestor NoticeRequestor `protobuf:"varint,3,opt,name=requestor,proto3,enum=edgeproto.NoticeRequestor" json:"requestor,omitempty"`
	// revision of database
	Revision uint64 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	// data included (UPDATE)
	//
	// Types that are valid to be assigned to Data:
	//	*NoticeRequest_CloudletInfo
	//	*NoticeRequest_AppInstInfo
	//	*NoticeRequest_ClusterInstInfo
	Data isNoticeRequest_Data `protobuf_oneof:"data"`
}

func (m *NoticeRequest) Reset()                    { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()               {}
func (*NoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{1} }

type isNoticeRequest_Data interface {
	isNoticeRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NoticeRequest_CloudletInfo struct {
	CloudletInfo *CloudletInfo `protobuf:"bytes,5,opt,name=cloudletInfo,oneof"`
}
type NoticeRequest_AppInstInfo struct {
	AppInstInfo *AppInstInfo `protobuf:"bytes,6,opt,name=appInstInfo,oneof"`
}
type NoticeRequest_ClusterInstInfo struct {
	ClusterInstInfo *ClusterInstInfo `protobuf:"bytes,7,opt,name=clusterInstInfo,oneof"`
}

func (*NoticeRequest_CloudletInfo) isNoticeRequest_Data()    {}
func (*NoticeRequest_AppInstInfo) isNoticeRequest_Data()     {}
func (*NoticeRequest_ClusterInstInfo) isNoticeRequest_Data() {}

func (m *NoticeRequest) GetData() isNoticeRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NoticeRequest) GetCloudletInfo() *CloudletInfo {
	if x, ok := m.GetData().(*NoticeRequest_CloudletInfo); ok {
		return x.CloudletInfo
	}
	return nil
}

func (m *NoticeRequest) GetAppInstInfo() *AppInstInfo {
	if x, ok := m.GetData().(*NoticeRequest_AppInstInfo); ok {
		return x.AppInstInfo
	}
	return nil
}

func (m *NoticeRequest) GetClusterInstInfo() *ClusterInstInfo {
	if x, ok := m.GetData().(*NoticeRequest_ClusterInstInfo); ok {
		return x.ClusterInstInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NoticeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NoticeRequest_OneofMarshaler, _NoticeRequest_OneofUnmarshaler, _NoticeRequest_OneofSizer, []interface{}{
		(*NoticeRequest_CloudletInfo)(nil),
		(*NoticeRequest_AppInstInfo)(nil),
		(*NoticeRequest_ClusterInstInfo)(nil),
	}
}

func _NoticeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NoticeRequest)
	// data
	switch x := m.Data.(type) {
	case *NoticeRequest_CloudletInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloudletInfo); err != nil {
			return err
		}
	case *NoticeRequest_AppInstInfo:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppInstInfo); err != nil {
			return err
		}
	case *NoticeRequest_ClusterInstInfo:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClusterInstInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NoticeRequest.Data has unexpected type %T", x)
	}
	return nil
}

func _NoticeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NoticeRequest)
	switch tag {
	case 5: // data.cloudletInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloudletInfo)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeRequest_CloudletInfo{msg}
		return true, err
	case 6: // data.appInstInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppInstInfo)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeRequest_AppInstInfo{msg}
		return true, err
	case 7: // data.clusterInstInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterInstInfo)
		err := b.DecodeMessage(msg)
		m.Data = &NoticeRequest_ClusterInstInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NoticeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NoticeRequest)
	// data
	switch x := m.Data.(type) {
	case *NoticeRequest_CloudletInfo:
		s := proto.Size(x.CloudletInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeRequest_AppInstInfo:
		s := proto.Size(x.AppInstInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NoticeRequest_ClusterInstInfo:
		s := proto.Size(x.ClusterInstInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NoticeReply)(nil), "edgeproto.NoticeReply")
	proto.RegisterType((*NoticeRequest)(nil), "edgeproto.NoticeRequest")
	proto.RegisterEnum("edgeproto.NoticeAction", NoticeAction_name, NoticeAction_value)
	proto.RegisterEnum("edgeproto.NoticeRequestor", NoticeRequestor_name, NoticeRequestor_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NotifyApi service

type NotifyApiClient interface {
	// Bidrectional stream for exchanging data between controller and dme/crm
	StreamNotice(ctx context.Context, opts ...grpc.CallOption) (NotifyApi_StreamNoticeClient, error)
}

type notifyApiClient struct {
	cc *grpc.ClientConn
}

func NewNotifyApiClient(cc *grpc.ClientConn) NotifyApiClient {
	return &notifyApiClient{cc}
}

func (c *notifyApiClient) StreamNotice(ctx context.Context, opts ...grpc.CallOption) (NotifyApi_StreamNoticeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NotifyApi_serviceDesc.Streams[0], c.cc, "/edgeproto.NotifyApi/StreamNotice", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifyApiStreamNoticeClient{stream}
	return x, nil
}

type NotifyApi_StreamNoticeClient interface {
	Send(*NoticeRequest) error
	Recv() (*NoticeReply, error)
	grpc.ClientStream
}

type notifyApiStreamNoticeClient struct {
	grpc.ClientStream
}

func (x *notifyApiStreamNoticeClient) Send(m *NoticeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notifyApiStreamNoticeClient) Recv() (*NoticeReply, error) {
	m := new(NoticeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NotifyApi service

type NotifyApiServer interface {
	// Bidrectional stream for exchanging data between controller and dme/crm
	StreamNotice(NotifyApi_StreamNoticeServer) error
}

func RegisterNotifyApiServer(s *grpc.Server, srv NotifyApiServer) {
	s.RegisterService(&_NotifyApi_serviceDesc, srv)
}

func _NotifyApi_StreamNotice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotifyApiServer).StreamNotice(&notifyApiStreamNoticeServer{stream})
}

type NotifyApi_StreamNoticeServer interface {
	Send(*NoticeReply) error
	Recv() (*NoticeRequest, error)
	grpc.ServerStream
}

type notifyApiStreamNoticeServer struct {
	grpc.ServerStream
}

func (x *notifyApiStreamNoticeServer) Send(m *NoticeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notifyApiStreamNoticeServer) Recv() (*NoticeRequest, error) {
	m := new(NoticeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NotifyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.NotifyApi",
	HandlerType: (*NotifyApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotice",
			Handler:       _NotifyApi_StreamNotice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notice.proto",
}

func (m *NoticeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Action))
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Version))
	}
	if m.Data != nil {
		nn1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *NoticeReply_AppInst) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppInst != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.AppInst.Size()))
		n2, err := m.AppInst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *NoticeReply_Cloudlet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cloudlet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Cloudlet.Size()))
		n3, err := m.Cloudlet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *NoticeReply_Flavor) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Flavor != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Flavor.Size()))
		n4, err := m.Flavor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *NoticeReply_ClusterInst) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClusterInst != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.ClusterInst.Size()))
		n5, err := m.ClusterInst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *NoticeReply_ClusterFlavor) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClusterFlavor != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.ClusterFlavor.Size()))
		n6, err := m.ClusterFlavor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *NoticeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Action))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Version))
	}
	if m.Requestor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Requestor))
	}
	if m.Revision != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Revision))
	}
	if m.Data != nil {
		nn7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *NoticeRequest_CloudletInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CloudletInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.CloudletInfo.Size()))
		n8, err := m.CloudletInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *NoticeRequest_AppInstInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppInstInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.AppInstInfo.Size()))
		n9, err := m.AppInstInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *NoticeRequest_ClusterInstInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClusterInstInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.ClusterInstInfo.Size()))
		n10, err := m.ClusterInstInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NoticeReply) CopyInFields(src *NoticeReply) {
	m.Action = src.Action
	m.Version = src.Version
}

func (m *NoticeRequest) CopyInFields(src *NoticeRequest) {
	m.Action = src.Action
	m.Version = src.Version
	m.Requestor = src.Requestor
	m.Revision = src.Revision
}

var NoticeActionStrings = []string{
	"NONE",
	"UPDATE",
	"DELETE",
	"VERSION",
	"SENDALL_END",
}

const (
	NoticeActionNONE        uint64 = 1 << 0
	NoticeActionUPDATE      uint64 = 1 << 1
	NoticeActionDELETE      uint64 = 1 << 2
	NoticeActionVERSION     uint64 = 1 << 3
	NoticeActionSENDALL_END uint64 = 1 << 4
)

func (e *NoticeAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := NoticeAction_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = NoticeAction_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = NoticeAction(val)
	return nil
}

func (e NoticeAction) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

var NoticeRequestorStrings = []string{
	"NoticeRequestorNone",
	"NoticeRequestorDME",
	"NoticeRequestorCRM",
}

const (
	NoticeRequestorNoticeRequestorNone uint64 = 1 << 0
	NoticeRequestorNoticeRequestorDME  uint64 = 1 << 1
	NoticeRequestorNoticeRequestorCRM  uint64 = 1 << 2
)

func (e *NoticeRequestor) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := NoticeRequestor_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = NoticeRequestor_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = NoticeRequestor(val)
	return nil
}

func (e NoticeRequestor) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *NoticeReply) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovNotice(uint64(m.Action))
	}
	if m.Version != 0 {
		n += 1 + sovNotice(uint64(m.Version))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *NoticeReply_AppInst) Size() (n int) {
	var l int
	_ = l
	if m.AppInst != nil {
		l = m.AppInst.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeReply_Cloudlet) Size() (n int) {
	var l int
	_ = l
	if m.Cloudlet != nil {
		l = m.Cloudlet.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeReply_Flavor) Size() (n int) {
	var l int
	_ = l
	if m.Flavor != nil {
		l = m.Flavor.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeReply_ClusterInst) Size() (n int) {
	var l int
	_ = l
	if m.ClusterInst != nil {
		l = m.ClusterInst.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeReply_ClusterFlavor) Size() (n int) {
	var l int
	_ = l
	if m.ClusterFlavor != nil {
		l = m.ClusterFlavor.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovNotice(uint64(m.Action))
	}
	if m.Version != 0 {
		n += 1 + sovNotice(uint64(m.Version))
	}
	if m.Requestor != 0 {
		n += 1 + sovNotice(uint64(m.Requestor))
	}
	if m.Revision != 0 {
		n += 1 + sovNotice(uint64(m.Revision))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *NoticeRequest_CloudletInfo) Size() (n int) {
	var l int
	_ = l
	if m.CloudletInfo != nil {
		l = m.CloudletInfo.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeRequest_AppInstInfo) Size() (n int) {
	var l int
	_ = l
	if m.AppInstInfo != nil {
		l = m.AppInstInfo.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeRequest_ClusterInstInfo) Size() (n int) {
	var l int
	_ = l
	if m.ClusterInstInfo != nil {
		l = m.ClusterInstInfo.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func sovNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoticeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (NoticeAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppInst{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeReply_AppInst{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cloudlet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeReply_Cloudlet{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Flavor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeReply_Flavor{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterInst{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeReply_ClusterInst{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterFlavor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeReply_ClusterFlavor{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (NoticeAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestor", wireType)
			}
			m.Requestor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requestor |= (NoticeRequestor(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloudletInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeRequest_CloudletInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppInstInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeRequest_AppInstInfo{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInstInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterInstInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &NoticeRequest_ClusterInstInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("notice.proto", fileDescriptorNotice) }

var fileDescriptorNotice = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0xcd, 0x6e, 0xda, 0x40,
	0x18, 0xb4, 0x09, 0x35, 0xe4, 0xe3, 0xcf, 0x59, 0x24, 0xb0, 0xac, 0x0a, 0x21, 0x4e, 0x28, 0x55,
	0x70, 0x4b, 0x2f, 0x51, 0xa5, 0x4a, 0x75, 0x82, 0x11, 0x48, 0xc4, 0xa9, 0x96, 0xb4, 0x87, 0x5e,
	0x22, 0x03, 0x8b, 0x6b, 0xc9, 0x78, 0x5d, 0xdb, 0xa0, 0xf2, 0x86, 0x39, 0xf6, 0x11, 0x5a, 0x1e,
	0xa0, 0x2f, 0xd0, 0x4b, 0xe5, 0xf5, 0x4f, 0xcc, 0x4f, 0x4f, 0xbd, 0x58, 0x3b, 0xdf, 0xcc, 0x7c,
	0xeb, 0x9d, 0x81, 0xb2, 0x43, 0x03, 0x6b, 0x4e, 0x7a, 0xae, 0x47, 0x03, 0x8a, 0xce, 0xc9, 0xc2,
	0x24, 0xec, 0x28, 0xbf, 0x34, 0x29, 0x35, 0x6d, 0xa2, 0x18, 0xae, 0xa5, 0x18, 0x8e, 0x43, 0x03,
	0x23, 0xb0, 0xa8, 0xe3, 0x47, 0x42, 0xf9, 0xda, 0xb4, 0x82, 0xaf, 0xeb, 0x59, 0x6f, 0x4e, 0x57,
	0xca, 0x8a, 0xce, 0x2c, 0x3b, 0x34, 0x7e, 0x57, 0xc2, 0xef, 0xd5, 0xdc, 0xa6, 0xeb, 0x85, 0xc2,
	0x74, 0x26, 0x71, 0xd2, 0x43, 0xec, 0xac, 0x1a, 0xae, 0xfb, 0x68, 0x39, 0x7e, 0x90, 0x60, 0x26,
	0xb7, 0x49, 0x82, 0xcb, 0x4b, 0xdb, 0xd8, 0x50, 0x2f, 0x46, 0xf5, 0xb9, 0xbd, 0xf6, 0x03, 0xe2,
	0xed, 0x0d, 0x2f, 0xe2, 0x61, 0x66, 0xcb, 0x55, 0xe6, 0x7f, 0x4c, 0x6a, 0xd2, 0xe8, 0xd6, 0xd9,
	0x7a, 0xc9, 0x10, 0x03, 0xec, 0x14, 0xc9, 0x3b, 0xbf, 0x73, 0x50, 0xd2, 0xd9, 0xc3, 0x31, 0x71,
	0xed, 0x2d, 0x52, 0x40, 0x30, 0xe6, 0xe1, 0xfb, 0x24, 0xbe, 0xcd, 0x77, 0xab, 0xfd, 0x66, 0x2f,
	0x0d, 0xa2, 0x17, 0xe9, 0x54, 0x46, 0xe3, 0x58, 0x86, 0x24, 0x28, 0x6c, 0x88, 0xe7, 0x87, 0x8e,
	0xb3, 0x36, 0xdf, 0xad, 0xe0, 0x04, 0xa2, 0x1e, 0x14, 0x0c, 0xd7, 0x1d, 0x3b, 0x7e, 0x20, 0xe5,
	0xdb, 0x7c, 0xb7, 0xd4, 0x47, 0x99, 0x5d, 0x6a, 0xc4, 0x8c, 0x38, 0x9c, 0x88, 0xd0, 0x1b, 0x28,
	0x26, 0x09, 0x48, 0x2f, 0x98, 0xa1, 0x9e, 0x31, 0xdc, 0xc6, 0xd4, 0x88, 0xc3, 0xa9, 0x0c, 0xbd,
	0x02, 0x21, 0xca, 0x43, 0x12, 0x98, 0xe1, 0x22, 0x63, 0x18, 0x32, 0x62, 0xc4, 0xe1, 0x58, 0x82,
	0xde, 0x41, 0x29, 0x8e, 0x8b, 0xfd, 0x53, 0x81, 0x39, 0x1a, 0x7b, 0x57, 0xa4, 0xec, 0x88, 0xc3,
	0x59, 0x31, 0xfa, 0x00, 0x95, 0x18, 0x46, 0x6b, 0xa5, 0x22, 0x73, 0x4b, 0xc7, 0xee, 0xf4, 0xda,
	0x7d, 0xc3, 0x8d, 0x00, 0xf9, 0x85, 0x11, 0x18, 0x9d, 0x3f, 0x39, 0xa8, 0x24, 0x81, 0x7f, 0x5b,
	0x13, 0x3f, 0xf8, 0xaf, 0xc8, 0x73, 0xfb, 0x91, 0x5f, 0xc3, 0xb9, 0x17, 0x6d, 0xa5, 0x1e, 0xab,
	0xa3, 0xda, 0x97, 0x8f, 0xb6, 0xe1, 0x44, 0x81, 0x9f, 0xc5, 0x48, 0x86, 0xa2, 0x47, 0x36, 0x16,
	0x5b, 0x1a, 0xb6, 0x95, 0xc7, 0x29, 0x46, 0xef, 0xa1, 0x9c, 0x24, 0x3e, 0x76, 0x96, 0x34, 0x2e,
	0xa7, 0x79, 0xa2, 0x9c, 0x90, 0x1e, 0x71, 0x78, 0x4f, 0x1e, 0xe6, 0x1e, 0x57, 0xcc, 0xdc, 0xc2,
	0x51, 0xee, 0xea, 0x33, 0x1b, 0xe6, 0x9e, 0x11, 0xa3, 0x21, 0xd4, 0x32, 0x35, 0x30, 0x7f, 0xd4,
	0x9b, 0x7c, 0xba, 0xb7, 0x78, 0xc7, 0xa1, 0x29, 0x49, 0xff, 0x52, 0x87, 0x72, 0x36, 0x52, 0x54,
	0x84, 0xbc, 0x7e, 0xaf, 0x6b, 0x22, 0x87, 0x00, 0x84, 0x4f, 0x1f, 0x07, 0xea, 0x83, 0x26, 0xf2,
	0xe1, 0x79, 0xa0, 0x4d, 0xb4, 0x07, 0x4d, 0xcc, 0xa1, 0x12, 0x14, 0x3e, 0x6b, 0x78, 0x3a, 0xbe,
	0xd7, 0xc5, 0x33, 0x54, 0x83, 0xd2, 0x54, 0xd3, 0x07, 0xea, 0x64, 0xf2, 0xa8, 0xe9, 0x03, 0x31,
	0x7f, 0xf9, 0x05, 0x6a, 0x07, 0xa1, 0xa2, 0x26, 0xd4, 0x0f, 0x46, 0x3a, 0x75, 0x88, 0xc8, 0xa1,
	0x06, 0xa0, 0x03, 0x62, 0x70, 0x17, 0xde, 0x76, 0x3c, 0xbf, 0xc5, 0x77, 0x62, 0xae, 0x3f, 0x85,
	0xf3, 0x70, 0xbe, 0xdc, 0xaa, 0xae, 0x85, 0x86, 0x50, 0x9e, 0x06, 0x1e, 0x31, 0x56, 0x91, 0x14,
	0x49, 0xff, 0xaa, 0x55, 0x6e, 0x9c, 0x60, 0x5c, 0x7b, 0xdb, 0xe1, 0xba, 0xfc, 0x6b, 0xfe, 0x46,
	0x7c, 0xfa, 0xd5, 0xe2, 0x9e, 0x76, 0x2d, 0xfe, 0xc7, 0xae, 0xc5, 0xff, 0xdc, 0xb5, 0xf8, 0x99,
	0xc0, 0xa4, 0x6f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x53, 0x3d, 0xfc, 0x0c, 0x00, 0x05, 0x00,
	0x00,
}
