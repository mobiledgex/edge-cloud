// Microservice nodes

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "cloudlet.proto";
import "gogoproto/gogo.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";

// NodeKey uniquely identifies a DME or CRM node
message NodeKey {
  // Name or hostname of node
  string name = 1 [(protogen.hidetag) = "nocmp"];
  // Node type
  string type = 4;
  // Cloudlet on which node is running, or is associated with
  CloudletKey cloudlet_key = 3 [(gogoproto.nullable) = false];
  // Region the node is in
  string region = 5;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Node defines a DME (distributed matching engine) or CRM (cloudlet resource manager) instance.
message Node {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  NodeKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 3 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Build Master Version
  string build_master = 4 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Build Head Version
  string build_head = 5 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Build Author
  string build_author = 6 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Hostname
  string hostname = 7 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Docker edge-cloud container version which node instance use
  string container_version= 8 [(protogen.backend) = true];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.alias) = "name=Key.Name,type=Key.Type,cloudlet=Key.CloudletKey.Name,organization=Key.CloudletKey.Organization,region=Key.Region";
}

service NodeApi {
  // Show all Nodes connected to all Controllers
  rpc ShowNode(Node) returns (stream Node) {
    option (google.api.http) = {
      post: "/show/node"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceConfig,ActionView,";
    option (protogen.mc2_api_notifyroot) = true;
  }
}
