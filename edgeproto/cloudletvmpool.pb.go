// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Cloudlet VM Type
//
// CloudletVMType is the current type of the CloudletVM
type CloudletVMType int32

const (
	// Platform node, hosts cloudlet services
	CloudletVMType_PLATFORM_NODE CloudletVMType = 0
	// Shared root LB, hosts rootLB to be shared by other clusters/AppVMs
	CloudletVMType_SHARED_ROOT_LB CloudletVMType = 1
	// Dedicated root LB; hosts rootLB to be used by a specific cluster/AppVM
	CloudletVMType_DEDICATED_ROOT_LB CloudletVMType = 2
	// Docker node; hosts docker based applications
	CloudletVMType_DOCKER_NODE CloudletVMType = 3
	// Kubernetes cluster master
	CloudletVMType_K8S_MASTER CloudletVMType = 4
	// Kubernetes cluster node
	CloudletVMType_K8S_NODE CloudletVMType = 5
)

var CloudletVMType_name = map[int32]string{
	0: "PLATFORM_NODE",
	1: "SHARED_ROOT_LB",
	2: "DEDICATED_ROOT_LB",
	3: "DOCKER_NODE",
	4: "K8S_MASTER",
	5: "K8S_NODE",
}
var CloudletVMType_value = map[string]int32{
	"PLATFORM_NODE":     0,
	"SHARED_ROOT_LB":    1,
	"DEDICATED_ROOT_LB": 2,
	"DOCKER_NODE":       3,
	"K8S_MASTER":        4,
	"K8S_NODE":          5,
}

func (x CloudletVMType) String() string {
	return proto.EnumName(CloudletVMType_name, int32(x))
}
func (CloudletVMType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{0} }

// Cloudlet VM State
//
// CloudletVMState is the state of the CloudletVM
type CloudletVMState int32

const (
	// Cloudlet VM is free to use
	CloudletVMState_CLOUDLET_VM_FREE CloudletVMState = 0
	// Cloudlet VM requested
	CloudletVMState_CLOUDLET_VM_REQUESTED CloudletVMState = 1
	// Cloudlet VM allocated
	CloudletVMState_CLOUDLET_VM_ALLOCATED CloudletVMState = 2
	// Cloudlet VM is in use
	CloudletVMState_CLOUDLET_VM_IN_USE CloudletVMState = 3
	// Cloudlet VM is released
	CloudletVMState_CLOUDLET_VM_RELEASED CloudletVMState = 4
	// Cloudlet VM is in error state
	CloudletVMState_CLOUDLET_VM_ERROR CloudletVMState = 5
)

var CloudletVMState_name = map[int32]string{
	0: "CLOUDLET_VM_FREE",
	1: "CLOUDLET_VM_REQUESTED",
	2: "CLOUDLET_VM_ALLOCATED",
	3: "CLOUDLET_VM_IN_USE",
	4: "CLOUDLET_VM_RELEASED",
	5: "CLOUDLET_VM_ERROR",
}
var CloudletVMState_value = map[string]int32{
	"CLOUDLET_VM_FREE":      0,
	"CLOUDLET_VM_REQUESTED": 1,
	"CLOUDLET_VM_ALLOCATED": 2,
	"CLOUDLET_VM_IN_USE":    3,
	"CLOUDLET_VM_RELEASED":  4,
	"CLOUDLET_VM_ERROR":     5,
}

func (x CloudletVMState) String() string {
	return proto.EnumName(CloudletVMState_name, int32(x))
}
func (CloudletVMState) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{1} }

type CloudletVMNetInfo struct {
	// External IP
	ExternalIp string `protobuf:"bytes,1,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	// Internal IP
	InternalIp string `protobuf:"bytes,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
}

func (m *CloudletVMNetInfo) Reset()                    { *m = CloudletVMNetInfo{} }
func (m *CloudletVMNetInfo) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMNetInfo) ProtoMessage()               {}
func (*CloudletVMNetInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{0} }

type CloudletVM struct {
	// VM Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// VM IP
	NetInfo CloudletVMNetInfo `protobuf:"bytes,2,opt,name=net_info,json=netInfo" json:"net_info"`
	// VM Type
	Type CloudletVMType `protobuf:"varint,3,opt,name=type,proto3,enum=edgeproto.CloudletVMType" json:"type,omitempty"`
	// VM User
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// VM State
	State CloudletVMState `protobuf:"varint,5,opt,name=state,proto3,enum=edgeproto.CloudletVMState" json:"state,omitempty"`
	// Last updated time
	UpdatedAt distributed_match_engine.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at"`
}

func (m *CloudletVM) Reset()                    { *m = CloudletVM{} }
func (m *CloudletVM) String() string            { return proto.CompactTextString(m) }
func (*CloudletVM) ProtoMessage()               {}
func (*CloudletVM) Descriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{1} }

// CloudletVMPool defines a pool of Cloudlet VMs to be part of a Cloudlet
type CloudletVMPool struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// list of Cloudlet VMs to be part of Cloudlet
	CloudletVms []*CloudletVM `protobuf:"bytes,3,rep,name=cloudlet_vms,json=cloudletVms" json:"cloudlet_vms,omitempty"`
}

func (m *CloudletVMPool) Reset()                    { *m = CloudletVMPool{} }
func (m *CloudletVMPool) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMPool) ProtoMessage()               {}
func (*CloudletVMPool) Descriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{2} }

// CloudletVMPoolMember is used to add and remove Cloudlet VM from Cloudlet VM Pool
type CloudletVMPoolMember struct {
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Cloudlet VM part of Cloudlet VM Pool
	CloudletVm CloudletVM `protobuf:"bytes,2,opt,name=cloudlet_vm,json=cloudletVm" json:"cloudlet_vm"`
}

func (m *CloudletVMPoolMember) Reset()         { *m = CloudletVMPoolMember{} }
func (m *CloudletVMPoolMember) String() string { return proto.CompactTextString(m) }
func (*CloudletVMPoolMember) ProtoMessage()    {}
func (*CloudletVMPoolMember) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudletvmpool, []int{3}
}

// CloudletVMSpec defines the specification of Cloudlet VM required by CRM
type CloudletVMSpec struct {
	// Cloudlet VM has external network defined or not
	ExternalNetwork bool `protobuf:"varint,1,opt,name=external_network,json=externalNetwork,proto3" json:"external_network,omitempty"`
	// Cloudlet VM has internal network defined or not
	InternalNetwork bool `protobuf:"varint,2,opt,name=internal_network,json=internalNetwork,proto3" json:"internal_network,omitempty"`
}

func (m *CloudletVMSpec) Reset()                    { *m = CloudletVMSpec{} }
func (m *CloudletVMSpec) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMSpec) ProtoMessage()               {}
func (*CloudletVMSpec) Descriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{4} }

// CloudletVMPoolInfo is used to manage CloudletVMPool from CRM
type CloudletVMPoolInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// State of Cloudlet VM request
	State CloudletVMState `protobuf:"varint,3,opt,name=state,proto3,enum=edgeproto.CloudletVMState" json:"state,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,4,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Specs of VMs requested by the caller
	Vmspecs []*CloudletVMSpec `protobuf:"bytes,5,rep,name=vmspecs" json:"vmspecs,omitempty"`
	// List of Cloudlet VMs allocated/released
	CloudletVms []*CloudletVM `protobuf:"bytes,6,rep,name=cloudlet_vms,json=cloudletVms" json:"cloudlet_vms,omitempty"`
	// Errors if any
	Errors []string `protobuf:"bytes,7,rep,name=errors" json:"errors,omitempty"`
}

func (m *CloudletVMPoolInfo) Reset()                    { *m = CloudletVMPoolInfo{} }
func (m *CloudletVMPoolInfo) String() string            { return proto.CompactTextString(m) }
func (*CloudletVMPoolInfo) ProtoMessage()               {}
func (*CloudletVMPoolInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudletvmpool, []int{5} }

func init() {
	proto.RegisterType((*CloudletVMNetInfo)(nil), "edgeproto.CloudletVMNetInfo")
	proto.RegisterType((*CloudletVM)(nil), "edgeproto.CloudletVM")
	proto.RegisterType((*CloudletVMPool)(nil), "edgeproto.CloudletVMPool")
	proto.RegisterType((*CloudletVMPoolMember)(nil), "edgeproto.CloudletVMPoolMember")
	proto.RegisterType((*CloudletVMSpec)(nil), "edgeproto.CloudletVMSpec")
	proto.RegisterType((*CloudletVMPoolInfo)(nil), "edgeproto.CloudletVMPoolInfo")
	proto.RegisterEnum("edgeproto.CloudletVMType", CloudletVMType_name, CloudletVMType_value)
	proto.RegisterEnum("edgeproto.CloudletVMState", CloudletVMState_name, CloudletVMState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletVMPoolApi service

type CloudletVMPoolApiClient interface {
	// Create CloudletVMPool. Creates Cloudlet VM pool which will have
	// Cloudlet VMs defined.
	CreateCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error)
	// Delete CloudletVMPool. Deletes Cloudlet VM pool given that none
	// of Cloudlet VMs part of this pool is used.
	DeleteCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error)
	// Update CloudletVMPool. Updates a Cloudlet VM pool's VMs.
	UpdateCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error)
	// Show CloudletVMPools. Lists all the Cloudlet VMs part of the Cloudlet VM pool.
	ShowCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (CloudletVMPoolApi_ShowCloudletVMPoolClient, error)
	// Add CloudletVMPoolMember. Adds a Cloudlet VM to existing Cloudlet VM Pool.
	AddCloudletVMPoolMember(ctx context.Context, in *CloudletVMPoolMember, opts ...grpc.CallOption) (*Result, error)
	// Remove CloudletVMPoolMember. Removes a Cloudlet VM from existing Cloudlet VM Pool.
	RemoveCloudletVMPoolMember(ctx context.Context, in *CloudletVMPoolMember, opts ...grpc.CallOption) (*Result, error)
}

type cloudletVMPoolApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletVMPoolApiClient(cc *grpc.ClientConn) CloudletVMPoolApiClient {
	return &cloudletVMPoolApiClient{cc}
}

func (c *cloudletVMPoolApiClient) CreateCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletVMPoolApi/CreateCloudletVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletVMPoolApiClient) DeleteCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletVMPoolApi/DeleteCloudletVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletVMPoolApiClient) UpdateCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletVMPoolApi/UpdateCloudletVMPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletVMPoolApiClient) ShowCloudletVMPool(ctx context.Context, in *CloudletVMPool, opts ...grpc.CallOption) (CloudletVMPoolApi_ShowCloudletVMPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletVMPoolApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletVMPoolApi/ShowCloudletVMPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletVMPoolApiShowCloudletVMPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletVMPoolApi_ShowCloudletVMPoolClient interface {
	Recv() (*CloudletVMPool, error)
	grpc.ClientStream
}

type cloudletVMPoolApiShowCloudletVMPoolClient struct {
	grpc.ClientStream
}

func (x *cloudletVMPoolApiShowCloudletVMPoolClient) Recv() (*CloudletVMPool, error) {
	m := new(CloudletVMPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletVMPoolApiClient) AddCloudletVMPoolMember(ctx context.Context, in *CloudletVMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletVMPoolApi/AddCloudletVMPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletVMPoolApiClient) RemoveCloudletVMPoolMember(ctx context.Context, in *CloudletVMPoolMember, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletVMPoolApi/RemoveCloudletVMPoolMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudletVMPoolApi service

type CloudletVMPoolApiServer interface {
	// Create CloudletVMPool. Creates Cloudlet VM pool which will have
	// Cloudlet VMs defined.
	CreateCloudletVMPool(context.Context, *CloudletVMPool) (*Result, error)
	// Delete CloudletVMPool. Deletes Cloudlet VM pool given that none
	// of Cloudlet VMs part of this pool is used.
	DeleteCloudletVMPool(context.Context, *CloudletVMPool) (*Result, error)
	// Update CloudletVMPool. Updates a Cloudlet VM pool's VMs.
	UpdateCloudletVMPool(context.Context, *CloudletVMPool) (*Result, error)
	// Show CloudletVMPools. Lists all the Cloudlet VMs part of the Cloudlet VM pool.
	ShowCloudletVMPool(*CloudletVMPool, CloudletVMPoolApi_ShowCloudletVMPoolServer) error
	// Add CloudletVMPoolMember. Adds a Cloudlet VM to existing Cloudlet VM Pool.
	AddCloudletVMPoolMember(context.Context, *CloudletVMPoolMember) (*Result, error)
	// Remove CloudletVMPoolMember. Removes a Cloudlet VM from existing Cloudlet VM Pool.
	RemoveCloudletVMPoolMember(context.Context, *CloudletVMPoolMember) (*Result, error)
}

func RegisterCloudletVMPoolApiServer(s *grpc.Server, srv CloudletVMPoolApiServer) {
	s.RegisterService(&_CloudletVMPoolApi_serviceDesc, srv)
}

func _CloudletVMPoolApi_CreateCloudletVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletVMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletVMPoolApiServer).CreateCloudletVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletVMPoolApi/CreateCloudletVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletVMPoolApiServer).CreateCloudletVMPool(ctx, req.(*CloudletVMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletVMPoolApi_DeleteCloudletVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletVMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletVMPoolApiServer).DeleteCloudletVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletVMPoolApi/DeleteCloudletVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletVMPoolApiServer).DeleteCloudletVMPool(ctx, req.(*CloudletVMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletVMPoolApi_UpdateCloudletVMPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletVMPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletVMPoolApiServer).UpdateCloudletVMPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletVMPoolApi/UpdateCloudletVMPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletVMPoolApiServer).UpdateCloudletVMPool(ctx, req.(*CloudletVMPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletVMPoolApi_ShowCloudletVMPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletVMPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletVMPoolApiServer).ShowCloudletVMPool(m, &cloudletVMPoolApiShowCloudletVMPoolServer{stream})
}

type CloudletVMPoolApi_ShowCloudletVMPoolServer interface {
	Send(*CloudletVMPool) error
	grpc.ServerStream
}

type cloudletVMPoolApiShowCloudletVMPoolServer struct {
	grpc.ServerStream
}

func (x *cloudletVMPoolApiShowCloudletVMPoolServer) Send(m *CloudletVMPool) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletVMPoolApi_AddCloudletVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletVMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletVMPoolApiServer).AddCloudletVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletVMPoolApi/AddCloudletVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletVMPoolApiServer).AddCloudletVMPoolMember(ctx, req.(*CloudletVMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletVMPoolApi_RemoveCloudletVMPoolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletVMPoolMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletVMPoolApiServer).RemoveCloudletVMPoolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletVMPoolApi/RemoveCloudletVMPoolMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletVMPoolApiServer).RemoveCloudletVMPoolMember(ctx, req.(*CloudletVMPoolMember))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletVMPoolApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletVMPoolApi",
	HandlerType: (*CloudletVMPoolApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudletVMPool",
			Handler:    _CloudletVMPoolApi_CreateCloudletVMPool_Handler,
		},
		{
			MethodName: "DeleteCloudletVMPool",
			Handler:    _CloudletVMPoolApi_DeleteCloudletVMPool_Handler,
		},
		{
			MethodName: "UpdateCloudletVMPool",
			Handler:    _CloudletVMPoolApi_UpdateCloudletVMPool_Handler,
		},
		{
			MethodName: "AddCloudletVMPoolMember",
			Handler:    _CloudletVMPoolApi_AddCloudletVMPoolMember_Handler,
		},
		{
			MethodName: "RemoveCloudletVMPoolMember",
			Handler:    _CloudletVMPoolApi_RemoveCloudletVMPoolMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletVMPool",
			Handler:       _CloudletVMPoolApi_ShowCloudletVMPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletvmpool.proto",
}

// Client API for CloudletVMPoolInfoApi service

type CloudletVMPoolInfoApiClient interface {
	// Show CloudletVMPoolInfos
	ShowCloudletVMPoolInfo(ctx context.Context, in *CloudletVMPoolInfo, opts ...grpc.CallOption) (CloudletVMPoolInfoApi_ShowCloudletVMPoolInfoClient, error)
}

type cloudletVMPoolInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletVMPoolInfoApiClient(cc *grpc.ClientConn) CloudletVMPoolInfoApiClient {
	return &cloudletVMPoolInfoApiClient{cc}
}

func (c *cloudletVMPoolInfoApiClient) ShowCloudletVMPoolInfo(ctx context.Context, in *CloudletVMPoolInfo, opts ...grpc.CallOption) (CloudletVMPoolInfoApi_ShowCloudletVMPoolInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletVMPoolInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletVMPoolInfoApi/ShowCloudletVMPoolInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletVMPoolInfoApiShowCloudletVMPoolInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletVMPoolInfoApi_ShowCloudletVMPoolInfoClient interface {
	Recv() (*CloudletVMPoolInfo, error)
	grpc.ClientStream
}

type cloudletVMPoolInfoApiShowCloudletVMPoolInfoClient struct {
	grpc.ClientStream
}

func (x *cloudletVMPoolInfoApiShowCloudletVMPoolInfoClient) Recv() (*CloudletVMPoolInfo, error) {
	m := new(CloudletVMPoolInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletVMPoolInfoApi service

type CloudletVMPoolInfoApiServer interface {
	// Show CloudletVMPoolInfos
	ShowCloudletVMPoolInfo(*CloudletVMPoolInfo, CloudletVMPoolInfoApi_ShowCloudletVMPoolInfoServer) error
}

func RegisterCloudletVMPoolInfoApiServer(s *grpc.Server, srv CloudletVMPoolInfoApiServer) {
	s.RegisterService(&_CloudletVMPoolInfoApi_serviceDesc, srv)
}

func _CloudletVMPoolInfoApi_ShowCloudletVMPoolInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletVMPoolInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletVMPoolInfoApiServer).ShowCloudletVMPoolInfo(m, &cloudletVMPoolInfoApiShowCloudletVMPoolInfoServer{stream})
}

type CloudletVMPoolInfoApi_ShowCloudletVMPoolInfoServer interface {
	Send(*CloudletVMPoolInfo) error
	grpc.ServerStream
}

type cloudletVMPoolInfoApiShowCloudletVMPoolInfoServer struct {
	grpc.ServerStream
}

func (x *cloudletVMPoolInfoApiShowCloudletVMPoolInfoServer) Send(m *CloudletVMPoolInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletVMPoolInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletVMPoolInfoApi",
	HandlerType: (*CloudletVMPoolInfoApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletVMPoolInfo",
			Handler:       _CloudletVMPoolInfoApi_ShowCloudletVMPoolInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudletvmpool.proto",
}

func (m *CloudletVMNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMNetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalIp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(len(m.ExternalIp)))
		i += copy(dAtA[i:], m.ExternalIp)
	}
	if len(m.InternalIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(len(m.InternalIp)))
		i += copy(dAtA[i:], m.InternalIp)
	}
	return i, nil
}

func (m *CloudletVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.NetInfo.Size()))
	n1, err := m.NetInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.Type))
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.UpdatedAt.Size()))
	n2, err := m.UpdatedAt.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *CloudletVMPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.Key.Size()))
	n3, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.CloudletVms) > 0 {
		for _, msg := range m.CloudletVms {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCloudletvmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CloudletVMPoolMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMPoolMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.Key.Size()))
	n4, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.CloudletVm.Size()))
	n5, err := m.CloudletVm.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CloudletVMSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExternalNetwork {
		dAtA[i] = 0x8
		i++
		if m.ExternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InternalNetwork {
		dAtA[i] = 0x10
		i++
		if m.InternalNetwork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CloudletVMPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletVMPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.Key.Size()))
	n6, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.State))
	}
	if m.NotifyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCloudletvmpool(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.Vmspecs) > 0 {
		for _, msg := range m.Vmspecs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCloudletvmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CloudletVms) > 0 {
		for _, msg := range m.CloudletVms {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCloudletvmpool(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintCloudletvmpool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletVMNetInfo) CopyInFields(src *CloudletVMNetInfo) int {
	changed := 0
	if m.ExternalIp != src.ExternalIp {
		m.ExternalIp = src.ExternalIp
		changed++
	}
	if m.InternalIp != src.InternalIp {
		m.InternalIp = src.InternalIp
		changed++
	}
	return changed
}

func (m *CloudletVMNetInfo) DeepCopyIn(src *CloudletVMNetInfo) {
	m.ExternalIp = src.ExternalIp
	m.InternalIp = src.InternalIp
}

// Helper method to check that enums have valid values
func (m *CloudletVMNetInfo) ValidateEnums() error {
	return nil
}

func (m *CloudletVM) CopyInFields(src *CloudletVM) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.NetInfo.ExternalIp != src.NetInfo.ExternalIp {
		m.NetInfo.ExternalIp = src.NetInfo.ExternalIp
		changed++
	}
	if m.NetInfo.InternalIp != src.NetInfo.InternalIp {
		m.NetInfo.InternalIp = src.NetInfo.InternalIp
		changed++
	}
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.User != src.User {
		m.User = src.User
		changed++
	}
	if m.State != src.State {
		m.State = src.State
		changed++
	}
	if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
		m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
		changed++
	}
	if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
		m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
		changed++
	}
	return changed
}

func (m *CloudletVM) DeepCopyIn(src *CloudletVM) {
	m.Name = src.Name
	m.NetInfo.DeepCopyIn(&src.NetInfo)
	m.Type = src.Type
	m.User = src.User
	m.State = src.State
	m.UpdatedAt = src.UpdatedAt
}

// Helper method to check that enums have valid values
func (m *CloudletVM) ValidateEnums() error {
	if err := m.NetInfo.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletVMType_name[int32(m.Type)]; !ok {
		return errors.New("invalid Type")
	}
	if _, ok := CloudletVMState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	return nil
}

func IgnoreCloudletVMFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(CloudletVM{}, names...)
}

func (m *CloudletVMPool) Matches(o *CloudletVMPool, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.CloudletVms != nil {
		if m.CloudletVms == nil && o.CloudletVms != nil || m.CloudletVms != nil && o.CloudletVms == nil {
			return false
		} else if m.CloudletVms != nil && o.CloudletVms != nil {
			if len(m.CloudletVms) != len(o.CloudletVms) {
				return false
			}
			for i := 0; i < len(m.CloudletVms); i++ {
			}
		}
	}
	return true
}

const CloudletVMPoolFieldKey = "2"
const CloudletVMPoolFieldKeyOrganization = "2.1"
const CloudletVMPoolFieldKeyName = "2.2"
const CloudletVMPoolFieldCloudletVms = "3"
const CloudletVMPoolFieldCloudletVmsName = "3.1"
const CloudletVMPoolFieldCloudletVmsNetInfo = "3.2"
const CloudletVMPoolFieldCloudletVmsNetInfoExternalIp = "3.2.1"
const CloudletVMPoolFieldCloudletVmsNetInfoInternalIp = "3.2.2"
const CloudletVMPoolFieldCloudletVmsType = "3.3"
const CloudletVMPoolFieldCloudletVmsUser = "3.4"
const CloudletVMPoolFieldCloudletVmsState = "3.5"
const CloudletVMPoolFieldCloudletVmsUpdatedAt = "3.6"
const CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds = "3.6.1"
const CloudletVMPoolFieldCloudletVmsUpdatedAtNanos = "3.6.2"

var CloudletVMPoolAllFields = []string{
	CloudletVMPoolFieldKeyOrganization,
	CloudletVMPoolFieldKeyName,
	CloudletVMPoolFieldCloudletVmsName,
	CloudletVMPoolFieldCloudletVmsNetInfoExternalIp,
	CloudletVMPoolFieldCloudletVmsNetInfoInternalIp,
	CloudletVMPoolFieldCloudletVmsType,
	CloudletVMPoolFieldCloudletVmsUser,
	CloudletVMPoolFieldCloudletVmsState,
	CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds,
	CloudletVMPoolFieldCloudletVmsUpdatedAtNanos,
}

var CloudletVMPoolAllFieldsMap = map[string]struct{}{
	CloudletVMPoolFieldKeyOrganization:              struct{}{},
	CloudletVMPoolFieldKeyName:                      struct{}{},
	CloudletVMPoolFieldCloudletVmsName:              struct{}{},
	CloudletVMPoolFieldCloudletVmsNetInfoExternalIp: struct{}{},
	CloudletVMPoolFieldCloudletVmsNetInfoInternalIp: struct{}{},
	CloudletVMPoolFieldCloudletVmsType:              struct{}{},
	CloudletVMPoolFieldCloudletVmsUser:              struct{}{},
	CloudletVMPoolFieldCloudletVmsState:             struct{}{},
	CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	CloudletVMPoolFieldCloudletVmsUpdatedAtNanos:    struct{}{},
}

var CloudletVMPoolAllFieldsStringMap = map[string]string{
	CloudletVMPoolFieldKeyOrganization:              "Key Organization",
	CloudletVMPoolFieldKeyName:                      "Key Name",
	CloudletVMPoolFieldCloudletVmsName:              "Cloudlet Vms Name",
	CloudletVMPoolFieldCloudletVmsNetInfoExternalIp: "Cloudlet Vms Net Info External Ip",
	CloudletVMPoolFieldCloudletVmsNetInfoInternalIp: "Cloudlet Vms Net Info Internal Ip",
	CloudletVMPoolFieldCloudletVmsType:              "Cloudlet Vms Type",
	CloudletVMPoolFieldCloudletVmsUser:              "Cloudlet Vms User",
	CloudletVMPoolFieldCloudletVmsState:             "Cloudlet Vms State",
	CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds:  "Cloudlet Vms Updated At Seconds",
	CloudletVMPoolFieldCloudletVmsUpdatedAtNanos:    "Cloudlet Vms Updated At Nanos",
}

func (m *CloudletVMPool) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletVMPoolFieldKey+".") || s == CloudletVMPoolFieldKey
}

func (m *CloudletVMPool) DiffFields(o *CloudletVMPool, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[CloudletVMPoolFieldKeyOrganization] = struct{}{}
		fields[CloudletVMPoolFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletVMPoolFieldKeyName] = struct{}{}
		fields[CloudletVMPoolFieldKey] = struct{}{}
	}
	if m.CloudletVms != nil && o.CloudletVms != nil {
		if len(m.CloudletVms) != len(o.CloudletVms) {
			fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.CloudletVms); i0++ {
				if m.CloudletVms[i0].Name != o.CloudletVms[i0].Name {
					fields[CloudletVMPoolFieldCloudletVmsName] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].NetInfo.ExternalIp != o.CloudletVms[i0].NetInfo.ExternalIp {
					fields[CloudletVMPoolFieldCloudletVmsNetInfoExternalIp] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVmsNetInfo] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].NetInfo.InternalIp != o.CloudletVms[i0].NetInfo.InternalIp {
					fields[CloudletVMPoolFieldCloudletVmsNetInfoInternalIp] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVmsNetInfo] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].Type != o.CloudletVms[i0].Type {
					fields[CloudletVMPoolFieldCloudletVmsType] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].User != o.CloudletVms[i0].User {
					fields[CloudletVMPoolFieldCloudletVmsUser] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].State != o.CloudletVms[i0].State {
					fields[CloudletVMPoolFieldCloudletVmsState] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].UpdatedAt.Seconds != o.CloudletVms[i0].UpdatedAt.Seconds {
					fields[CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVmsUpdatedAt] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].UpdatedAt.Nanos != o.CloudletVms[i0].UpdatedAt.Nanos {
					fields[CloudletVMPoolFieldCloudletVmsUpdatedAtNanos] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVmsUpdatedAt] = struct{}{}
					fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
				}
			}
		}
	} else if (m.CloudletVms != nil && o.CloudletVms == nil) || (m.CloudletVms == nil && o.CloudletVms != nil) {
		fields[CloudletVMPoolFieldCloudletVms] = struct{}{}
	}
}

var UpdateCloudletVMPoolFieldsMap = map[string]struct{}{
	CloudletVMPoolFieldCloudletVms:                  struct{}{},
	CloudletVMPoolFieldCloudletVmsName:              struct{}{},
	CloudletVMPoolFieldCloudletVmsNetInfo:           struct{}{},
	CloudletVMPoolFieldCloudletVmsNetInfoExternalIp: struct{}{},
	CloudletVMPoolFieldCloudletVmsNetInfoInternalIp: struct{}{},
	CloudletVMPoolFieldCloudletVmsType:              struct{}{},
	CloudletVMPoolFieldCloudletVmsUser:              struct{}{},
	CloudletVMPoolFieldCloudletVmsState:             struct{}{},
	CloudletVMPoolFieldCloudletVmsUpdatedAt:         struct{}{},
	CloudletVMPoolFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	CloudletVMPoolFieldCloudletVmsUpdatedAtNanos:    struct{}{},
}

func (m *CloudletVMPool) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateCloudletVMPoolFieldsMap[field]; !ok {
			if _, ok := CloudletVMPoolAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, CloudletVMPoolAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *CloudletVMPool) CopyInFields(src *CloudletVMPool) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if src.CloudletVms != nil {
			if m.CloudletVms == nil || len(m.CloudletVms) != len(src.CloudletVms) {
				m.CloudletVms = make([]*CloudletVM, len(src.CloudletVms))
				changed++
			}
			for i0 := 0; i0 < len(src.CloudletVms); i0++ {
				m.CloudletVms[i0] = &CloudletVM{}
				if _, set := fmap["3.1"]; set {
					if m.CloudletVms[i0].Name != src.CloudletVms[i0].Name {
						m.CloudletVms[i0].Name = src.CloudletVms[i0].Name
						changed++
					}
				}
				if _, set := fmap["3.2"]; set {
					if _, set := fmap["3.2.1"]; set {
						if m.CloudletVms[i0].NetInfo.ExternalIp != src.CloudletVms[i0].NetInfo.ExternalIp {
							m.CloudletVms[i0].NetInfo.ExternalIp = src.CloudletVms[i0].NetInfo.ExternalIp
							changed++
						}
					}
					if _, set := fmap["3.2.2"]; set {
						if m.CloudletVms[i0].NetInfo.InternalIp != src.CloudletVms[i0].NetInfo.InternalIp {
							m.CloudletVms[i0].NetInfo.InternalIp = src.CloudletVms[i0].NetInfo.InternalIp
							changed++
						}
					}
				}
				if _, set := fmap["3.3"]; set {
					if m.CloudletVms[i0].Type != src.CloudletVms[i0].Type {
						m.CloudletVms[i0].Type = src.CloudletVms[i0].Type
						changed++
					}
				}
				if _, set := fmap["3.4"]; set {
					if m.CloudletVms[i0].User != src.CloudletVms[i0].User {
						m.CloudletVms[i0].User = src.CloudletVms[i0].User
						changed++
					}
				}
				if _, set := fmap["3.5"]; set {
					if m.CloudletVms[i0].State != src.CloudletVms[i0].State {
						m.CloudletVms[i0].State = src.CloudletVms[i0].State
						changed++
					}
				}
				if _, set := fmap["3.6"]; set {
					if _, set := fmap["3.6.1"]; set {
						if m.CloudletVms[i0].UpdatedAt.Seconds != src.CloudletVms[i0].UpdatedAt.Seconds {
							m.CloudletVms[i0].UpdatedAt.Seconds = src.CloudletVms[i0].UpdatedAt.Seconds
							changed++
						}
					}
					if _, set := fmap["3.6.2"]; set {
						if m.CloudletVms[i0].UpdatedAt.Nanos != src.CloudletVms[i0].UpdatedAt.Nanos {
							m.CloudletVms[i0].UpdatedAt.Nanos = src.CloudletVms[i0].UpdatedAt.Nanos
							changed++
						}
					}
				}
			}
		} else if m.CloudletVms != nil {
			m.CloudletVms = nil
			changed++
		}
	}
	return changed
}

func (m *CloudletVMPool) DeepCopyIn(src *CloudletVMPool) {
	m.Key.DeepCopyIn(&src.Key)
	if src.CloudletVms != nil {
		m.CloudletVms = make([]*CloudletVM, len(src.CloudletVms), len(src.CloudletVms))
		for ii, s := range src.CloudletVms {
			var tmp_s CloudletVM
			tmp_s.DeepCopyIn(s)
			m.CloudletVms[ii] = &tmp_s
		}
	} else {
		m.CloudletVms = nil
	}
}

func (s *CloudletVMPool) HasFields() bool {
	return true
}

type CloudletVMPoolStore struct {
	kvstore objstore.KVStore
}

func NewCloudletVMPoolStore(kvstore objstore.KVStore) CloudletVMPoolStore {
	return CloudletVMPoolStore{kvstore: kvstore}
}

func (s *CloudletVMPoolStore) Create(ctx context.Context, m *CloudletVMPool, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletVMPoolAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPool", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolStore) Update(ctx context.Context, m *CloudletVMPool, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPool", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletVMPool
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolStore) Put(ctx context.Context, m *CloudletVMPool, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletVMPoolAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPool", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolStore) Delete(ctx context.Context, m *CloudletVMPool, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPool", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolStore) LoadOne(key string) (*CloudletVMPool, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletVMPool
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletVMPool data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletVMPoolStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *CloudletVMPool) bool {
	keystr := objstore.DbKeyString("CloudletVMPool", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletVMPoolStore) STMPut(stm concurrency.STM, obj *CloudletVMPool, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletVMPool", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletVMPool json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletVMPoolStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("CloudletVMPool", key)
	stm.Del(keystr)
}

type CloudletVMPoolKeyWatcher struct {
	cb func(ctx context.Context)
}

type CloudletVMPoolCacheData struct {
	Obj    *CloudletVMPool
	ModRev int64
}

// CloudletVMPoolCache caches CloudletVMPool objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletVMPoolCache struct {
	Objs          map[CloudletKey]*CloudletVMPoolCacheData
	Mux           util.Mutex
	List          map[CloudletKey]struct{}
	FlushAll      bool
	NotifyCb      func(ctx context.Context, obj *CloudletKey, old *CloudletVMPool, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *CloudletVMPool, new *CloudletVMPool)
	DeletedCbs    []func(ctx context.Context, old *CloudletVMPool)
	KeyWatchers   map[CloudletKey][]*CloudletVMPoolKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletKey)
}

func NewCloudletVMPoolCache() *CloudletVMPoolCache {
	cache := CloudletVMPoolCache{}
	InitCloudletVMPoolCache(&cache)
	return &cache
}

func InitCloudletVMPoolCache(cache *CloudletVMPoolCache) {
	cache.Objs = make(map[CloudletKey]*CloudletVMPoolCacheData)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletVMPoolKeyWatcher)
	cache.NotifyCb = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *CloudletVMPoolCache) GetTypeString() string {
	return "CloudletVMPool"
}

func (c *CloudletVMPoolCache) Get(key *CloudletKey, valbuf *CloudletVMPool) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *CloudletVMPoolCache) GetWithRev(key *CloudletKey, valbuf *CloudletVMPool, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *CloudletVMPoolCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletVMPoolCache) GetAllKeys(ctx context.Context, cb func(key *CloudletKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *CloudletVMPoolCache) Update(ctx context.Context, in *CloudletVMPool, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *CloudletVMPool) (*CloudletVMPool, bool) {
		return in, true
	})
}

func (c *CloudletVMPoolCache) UpdateModFunc(ctx context.Context, key *CloudletKey, modRev int64, modFunc func(old *CloudletVMPool) (new *CloudletVMPool, changed bool)) {
	c.Mux.Lock()
	var old *CloudletVMPool
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &CloudletVMPool{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	if c.NotifyCb != nil {
		defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &CloudletVMPool{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &CloudletVMPoolCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletVMPoolCache) Delete(ctx context.Context, in *CloudletVMPool, modRev int64) {
	c.Mux.Lock()
	var old *CloudletVMPool
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletVMPoolCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*CloudletVMPoolCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletVMPoolCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletVMPoolCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletVMPoolCache) Show(filter *CloudletVMPool, cb func(ret *CloudletVMPool) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletVMPool", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare CloudletVMPool", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletVMPool", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletVMPoolGenericNotifyCb(fn func(key *CloudletKey, old *CloudletVMPool)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*CloudletVMPool))
	}
}

func (c *CloudletVMPoolCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *CloudletVMPool, modRev int64)) {
	c.NotifyCb = fn
}

func (c *CloudletVMPoolCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletVMPool, new *CloudletVMPool)) {
	c.UpdatedCbs = []func(ctx context.Context, old *CloudletVMPool, new *CloudletVMPool){fn}
}

func (c *CloudletVMPoolCache) SetDeletedCb(fn func(ctx context.Context, old *CloudletVMPool)) {
	c.DeletedCbs = []func(ctx context.Context, old *CloudletVMPool){fn}
}

func (c *CloudletVMPoolCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *CloudletVMPoolCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *CloudletVMPoolCache) AddUpdatedCb(fn func(ctx context.Context, old *CloudletVMPool, new *CloudletVMPool)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *CloudletVMPoolCache) AddDeletedCb(fn func(ctx context.Context, old *CloudletVMPool)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *CloudletVMPoolCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *CloudletVMPoolCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *CloudletVMPoolCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletVMPoolCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletVMPoolKeyWatcher, 0)
	}
	watcher := CloudletVMPoolKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletVMPool", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletVMPoolCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*CloudletVMPoolKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *CloudletVMPoolCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := CloudletVMPool{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletVMPool data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletVMPoolCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := CloudletVMPool{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *CloudletVMPoolCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletVMPoolCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*CloudletVMPoolCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletVMPoolCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *CloudletVMPool) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletVMPool) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletVMPool) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletVMPool) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletVMPool(a CloudletVMPool, b CloudletVMPool) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletVMPool) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.CloudletVms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreCloudletVMPoolFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVms.UpdatedAt")
	}
	return cmpopts.IgnoreFields(CloudletVMPool{}, names...)
}

func (m *CloudletVMPoolMember) CopyInFields(src *CloudletVMPoolMember) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.CloudletVm.Name != src.CloudletVm.Name {
		m.CloudletVm.Name = src.CloudletVm.Name
		changed++
	}
	if m.CloudletVm.NetInfo.ExternalIp != src.CloudletVm.NetInfo.ExternalIp {
		m.CloudletVm.NetInfo.ExternalIp = src.CloudletVm.NetInfo.ExternalIp
		changed++
	}
	if m.CloudletVm.NetInfo.InternalIp != src.CloudletVm.NetInfo.InternalIp {
		m.CloudletVm.NetInfo.InternalIp = src.CloudletVm.NetInfo.InternalIp
		changed++
	}
	if m.CloudletVm.Type != src.CloudletVm.Type {
		m.CloudletVm.Type = src.CloudletVm.Type
		changed++
	}
	if m.CloudletVm.User != src.CloudletVm.User {
		m.CloudletVm.User = src.CloudletVm.User
		changed++
	}
	if m.CloudletVm.State != src.CloudletVm.State {
		m.CloudletVm.State = src.CloudletVm.State
		changed++
	}
	if m.CloudletVm.UpdatedAt.Seconds != src.CloudletVm.UpdatedAt.Seconds {
		m.CloudletVm.UpdatedAt.Seconds = src.CloudletVm.UpdatedAt.Seconds
		changed++
	}
	if m.CloudletVm.UpdatedAt.Nanos != src.CloudletVm.UpdatedAt.Nanos {
		m.CloudletVm.UpdatedAt.Nanos = src.CloudletVm.UpdatedAt.Nanos
		changed++
	}
	return changed
}

func (m *CloudletVMPoolMember) DeepCopyIn(src *CloudletVMPoolMember) {
	m.Key.DeepCopyIn(&src.Key)
	m.CloudletVm.DeepCopyIn(&src.CloudletVm)
}

func (m *CloudletVMPoolMember) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletVMPoolMember) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletVMPoolMember) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletVMPoolMember) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletVMPoolMember(a CloudletVMPoolMember, b CloudletVMPoolMember) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *CloudletVMPoolMember) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletVm.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreCloudletVMPoolMemberFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVm.UpdatedAt")
	}
	return cmpopts.IgnoreFields(CloudletVMPoolMember{}, names...)
}

func (m *CloudletVMSpec) CopyInFields(src *CloudletVMSpec) int {
	changed := 0
	if m.ExternalNetwork != src.ExternalNetwork {
		m.ExternalNetwork = src.ExternalNetwork
		changed++
	}
	if m.InternalNetwork != src.InternalNetwork {
		m.InternalNetwork = src.InternalNetwork
		changed++
	}
	return changed
}

func (m *CloudletVMSpec) DeepCopyIn(src *CloudletVMSpec) {
	m.ExternalNetwork = src.ExternalNetwork
	m.InternalNetwork = src.InternalNetwork
}

// Helper method to check that enums have valid values
func (m *CloudletVMSpec) ValidateEnums() error {
	return nil
}

func (m *CloudletVMPoolInfo) Matches(o *CloudletVMPoolInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.State != 0 {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.Vmspecs != nil {
		if m.Vmspecs == nil && o.Vmspecs != nil || m.Vmspecs != nil && o.Vmspecs == nil {
			return false
		} else if m.Vmspecs != nil && o.Vmspecs != nil {
			if len(m.Vmspecs) != len(o.Vmspecs) {
				return false
			}
			for i := 0; i < len(m.Vmspecs); i++ {
			}
		}
	}
	if !opts.Filter || o.CloudletVms != nil {
		if m.CloudletVms == nil && o.CloudletVms != nil || m.CloudletVms != nil && o.CloudletVms == nil {
			return false
		} else if m.CloudletVms != nil && o.CloudletVms != nil {
			if len(m.CloudletVms) != len(o.CloudletVms) {
				return false
			}
			for i := 0; i < len(m.CloudletVms); i++ {
			}
		}
	}
	if !opts.Filter || o.Errors != nil {
		if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if len(m.Errors) != len(o.Errors) {
				return false
			}
			for i := 0; i < len(m.Errors); i++ {
				if o.Errors[i] != m.Errors[i] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletVMPoolInfoFieldKey = "2"
const CloudletVMPoolInfoFieldKeyOrganization = "2.1"
const CloudletVMPoolInfoFieldKeyName = "2.2"
const CloudletVMPoolInfoFieldState = "3"
const CloudletVMPoolInfoFieldNotifyId = "4"
const CloudletVMPoolInfoFieldVmspecs = "5"
const CloudletVMPoolInfoFieldVmspecsExternalNetwork = "5.1"
const CloudletVMPoolInfoFieldVmspecsInternalNetwork = "5.2"
const CloudletVMPoolInfoFieldCloudletVms = "6"
const CloudletVMPoolInfoFieldCloudletVmsName = "6.1"
const CloudletVMPoolInfoFieldCloudletVmsNetInfo = "6.2"
const CloudletVMPoolInfoFieldCloudletVmsNetInfoExternalIp = "6.2.1"
const CloudletVMPoolInfoFieldCloudletVmsNetInfoInternalIp = "6.2.2"
const CloudletVMPoolInfoFieldCloudletVmsType = "6.3"
const CloudletVMPoolInfoFieldCloudletVmsUser = "6.4"
const CloudletVMPoolInfoFieldCloudletVmsState = "6.5"
const CloudletVMPoolInfoFieldCloudletVmsUpdatedAt = "6.6"
const CloudletVMPoolInfoFieldCloudletVmsUpdatedAtSeconds = "6.6.1"
const CloudletVMPoolInfoFieldCloudletVmsUpdatedAtNanos = "6.6.2"
const CloudletVMPoolInfoFieldErrors = "7"

var CloudletVMPoolInfoAllFields = []string{
	CloudletVMPoolInfoFieldKeyOrganization,
	CloudletVMPoolInfoFieldKeyName,
	CloudletVMPoolInfoFieldState,
	CloudletVMPoolInfoFieldNotifyId,
	CloudletVMPoolInfoFieldVmspecsExternalNetwork,
	CloudletVMPoolInfoFieldVmspecsInternalNetwork,
	CloudletVMPoolInfoFieldCloudletVmsName,
	CloudletVMPoolInfoFieldCloudletVmsNetInfoExternalIp,
	CloudletVMPoolInfoFieldCloudletVmsNetInfoInternalIp,
	CloudletVMPoolInfoFieldCloudletVmsType,
	CloudletVMPoolInfoFieldCloudletVmsUser,
	CloudletVMPoolInfoFieldCloudletVmsState,
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtSeconds,
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtNanos,
	CloudletVMPoolInfoFieldErrors,
}

var CloudletVMPoolInfoAllFieldsMap = map[string]struct{}{
	CloudletVMPoolInfoFieldKeyOrganization:              struct{}{},
	CloudletVMPoolInfoFieldKeyName:                      struct{}{},
	CloudletVMPoolInfoFieldState:                        struct{}{},
	CloudletVMPoolInfoFieldNotifyId:                     struct{}{},
	CloudletVMPoolInfoFieldVmspecsExternalNetwork:       struct{}{},
	CloudletVMPoolInfoFieldVmspecsInternalNetwork:       struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsName:              struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsNetInfoExternalIp: struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsNetInfoInternalIp: struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsType:              struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsUser:              struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsState:             struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtSeconds:  struct{}{},
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtNanos:    struct{}{},
	CloudletVMPoolInfoFieldErrors:                       struct{}{},
}

var CloudletVMPoolInfoAllFieldsStringMap = map[string]string{
	CloudletVMPoolInfoFieldKeyOrganization:              "Key Organization",
	CloudletVMPoolInfoFieldKeyName:                      "Key Name",
	CloudletVMPoolInfoFieldState:                        "State",
	CloudletVMPoolInfoFieldNotifyId:                     "Notify Id",
	CloudletVMPoolInfoFieldVmspecsExternalNetwork:       "Vmspecs External Network",
	CloudletVMPoolInfoFieldVmspecsInternalNetwork:       "Vmspecs Internal Network",
	CloudletVMPoolInfoFieldCloudletVmsName:              "Cloudlet Vms Name",
	CloudletVMPoolInfoFieldCloudletVmsNetInfoExternalIp: "Cloudlet Vms Net Info External Ip",
	CloudletVMPoolInfoFieldCloudletVmsNetInfoInternalIp: "Cloudlet Vms Net Info Internal Ip",
	CloudletVMPoolInfoFieldCloudletVmsType:              "Cloudlet Vms Type",
	CloudletVMPoolInfoFieldCloudletVmsUser:              "Cloudlet Vms User",
	CloudletVMPoolInfoFieldCloudletVmsState:             "Cloudlet Vms State",
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtSeconds:  "Cloudlet Vms Updated At Seconds",
	CloudletVMPoolInfoFieldCloudletVmsUpdatedAtNanos:    "Cloudlet Vms Updated At Nanos",
	CloudletVMPoolInfoFieldErrors:                       "Errors",
}

func (m *CloudletVMPoolInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletVMPoolInfoFieldKey+".") || s == CloudletVMPoolInfoFieldKey
}

func (m *CloudletVMPoolInfo) DiffFields(o *CloudletVMPoolInfo, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[CloudletVMPoolInfoFieldKeyOrganization] = struct{}{}
		fields[CloudletVMPoolInfoFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletVMPoolInfoFieldKeyName] = struct{}{}
		fields[CloudletVMPoolInfoFieldKey] = struct{}{}
	}
	if m.State != o.State {
		fields[CloudletVMPoolInfoFieldState] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[CloudletVMPoolInfoFieldNotifyId] = struct{}{}
	}
	if m.Vmspecs != nil && o.Vmspecs != nil {
		if len(m.Vmspecs) != len(o.Vmspecs) {
			fields[CloudletVMPoolInfoFieldVmspecs] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.Vmspecs); i0++ {
				if m.Vmspecs[i0].ExternalNetwork != o.Vmspecs[i0].ExternalNetwork {
					fields[CloudletVMPoolInfoFieldVmspecsExternalNetwork] = struct{}{}
					fields[CloudletVMPoolInfoFieldVmspecs] = struct{}{}
				}
				if m.Vmspecs[i0].InternalNetwork != o.Vmspecs[i0].InternalNetwork {
					fields[CloudletVMPoolInfoFieldVmspecsInternalNetwork] = struct{}{}
					fields[CloudletVMPoolInfoFieldVmspecs] = struct{}{}
				}
			}
		}
	} else if (m.Vmspecs != nil && o.Vmspecs == nil) || (m.Vmspecs == nil && o.Vmspecs != nil) {
		fields[CloudletVMPoolInfoFieldVmspecs] = struct{}{}
	}
	if m.CloudletVms != nil && o.CloudletVms != nil {
		if len(m.CloudletVms) != len(o.CloudletVms) {
			fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.CloudletVms); i0++ {
				if m.CloudletVms[i0].Name != o.CloudletVms[i0].Name {
					fields[CloudletVMPoolInfoFieldCloudletVmsName] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].NetInfo.ExternalIp != o.CloudletVms[i0].NetInfo.ExternalIp {
					fields[CloudletVMPoolInfoFieldCloudletVmsNetInfoExternalIp] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVmsNetInfo] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].NetInfo.InternalIp != o.CloudletVms[i0].NetInfo.InternalIp {
					fields[CloudletVMPoolInfoFieldCloudletVmsNetInfoInternalIp] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVmsNetInfo] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].Type != o.CloudletVms[i0].Type {
					fields[CloudletVMPoolInfoFieldCloudletVmsType] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].User != o.CloudletVms[i0].User {
					fields[CloudletVMPoolInfoFieldCloudletVmsUser] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].State != o.CloudletVms[i0].State {
					fields[CloudletVMPoolInfoFieldCloudletVmsState] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].UpdatedAt.Seconds != o.CloudletVms[i0].UpdatedAt.Seconds {
					fields[CloudletVMPoolInfoFieldCloudletVmsUpdatedAtSeconds] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVmsUpdatedAt] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
				if m.CloudletVms[i0].UpdatedAt.Nanos != o.CloudletVms[i0].UpdatedAt.Nanos {
					fields[CloudletVMPoolInfoFieldCloudletVmsUpdatedAtNanos] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVmsUpdatedAt] = struct{}{}
					fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
				}
			}
		}
	} else if (m.CloudletVms != nil && o.CloudletVms == nil) || (m.CloudletVms == nil && o.CloudletVms != nil) {
		fields[CloudletVMPoolInfoFieldCloudletVms] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[CloudletVMPoolInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[CloudletVMPoolInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
}

func (m *CloudletVMPoolInfo) CopyInFields(src *CloudletVMPoolInfo) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.State != src.State {
			m.State = src.State
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if src.Vmspecs != nil {
			if m.Vmspecs == nil || len(m.Vmspecs) != len(src.Vmspecs) {
				m.Vmspecs = make([]*CloudletVMSpec, len(src.Vmspecs))
				changed++
			}
			for i0 := 0; i0 < len(src.Vmspecs); i0++ {
				m.Vmspecs[i0] = &CloudletVMSpec{}
				if _, set := fmap["5.1"]; set {
					if m.Vmspecs[i0].ExternalNetwork != src.Vmspecs[i0].ExternalNetwork {
						m.Vmspecs[i0].ExternalNetwork = src.Vmspecs[i0].ExternalNetwork
						changed++
					}
				}
				if _, set := fmap["5.2"]; set {
					if m.Vmspecs[i0].InternalNetwork != src.Vmspecs[i0].InternalNetwork {
						m.Vmspecs[i0].InternalNetwork = src.Vmspecs[i0].InternalNetwork
						changed++
					}
				}
			}
		} else if m.Vmspecs != nil {
			m.Vmspecs = nil
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if src.CloudletVms != nil {
			if m.CloudletVms == nil || len(m.CloudletVms) != len(src.CloudletVms) {
				m.CloudletVms = make([]*CloudletVM, len(src.CloudletVms))
				changed++
			}
			for i0 := 0; i0 < len(src.CloudletVms); i0++ {
				m.CloudletVms[i0] = &CloudletVM{}
				if _, set := fmap["6.1"]; set {
					if m.CloudletVms[i0].Name != src.CloudletVms[i0].Name {
						m.CloudletVms[i0].Name = src.CloudletVms[i0].Name
						changed++
					}
				}
				if _, set := fmap["6.2"]; set {
					if _, set := fmap["6.2.1"]; set {
						if m.CloudletVms[i0].NetInfo.ExternalIp != src.CloudletVms[i0].NetInfo.ExternalIp {
							m.CloudletVms[i0].NetInfo.ExternalIp = src.CloudletVms[i0].NetInfo.ExternalIp
							changed++
						}
					}
					if _, set := fmap["6.2.2"]; set {
						if m.CloudletVms[i0].NetInfo.InternalIp != src.CloudletVms[i0].NetInfo.InternalIp {
							m.CloudletVms[i0].NetInfo.InternalIp = src.CloudletVms[i0].NetInfo.InternalIp
							changed++
						}
					}
				}
				if _, set := fmap["6.3"]; set {
					if m.CloudletVms[i0].Type != src.CloudletVms[i0].Type {
						m.CloudletVms[i0].Type = src.CloudletVms[i0].Type
						changed++
					}
				}
				if _, set := fmap["6.4"]; set {
					if m.CloudletVms[i0].User != src.CloudletVms[i0].User {
						m.CloudletVms[i0].User = src.CloudletVms[i0].User
						changed++
					}
				}
				if _, set := fmap["6.5"]; set {
					if m.CloudletVms[i0].State != src.CloudletVms[i0].State {
						m.CloudletVms[i0].State = src.CloudletVms[i0].State
						changed++
					}
				}
				if _, set := fmap["6.6"]; set {
					if _, set := fmap["6.6.1"]; set {
						if m.CloudletVms[i0].UpdatedAt.Seconds != src.CloudletVms[i0].UpdatedAt.Seconds {
							m.CloudletVms[i0].UpdatedAt.Seconds = src.CloudletVms[i0].UpdatedAt.Seconds
							changed++
						}
					}
					if _, set := fmap["6.6.2"]; set {
						if m.CloudletVms[i0].UpdatedAt.Nanos != src.CloudletVms[i0].UpdatedAt.Nanos {
							m.CloudletVms[i0].UpdatedAt.Nanos = src.CloudletVms[i0].UpdatedAt.Nanos
							changed++
						}
					}
				}
			}
		} else if m.CloudletVms != nil {
			m.CloudletVms = nil
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
			changed++
		}
		copy(m.Errors, src.Errors)
		changed++
	}
	return changed
}

func (m *CloudletVMPoolInfo) DeepCopyIn(src *CloudletVMPoolInfo) {
	m.Key.DeepCopyIn(&src.Key)
	m.State = src.State
	m.NotifyId = src.NotifyId
	if src.Vmspecs != nil {
		m.Vmspecs = make([]*CloudletVMSpec, len(src.Vmspecs), len(src.Vmspecs))
		for ii, s := range src.Vmspecs {
			var tmp_s CloudletVMSpec
			tmp_s.DeepCopyIn(s)
			m.Vmspecs[ii] = &tmp_s
		}
	} else {
		m.Vmspecs = nil
	}
	if src.CloudletVms != nil {
		m.CloudletVms = make([]*CloudletVM, len(src.CloudletVms), len(src.CloudletVms))
		for ii, s := range src.CloudletVms {
			var tmp_s CloudletVM
			tmp_s.DeepCopyIn(s)
			m.CloudletVms[ii] = &tmp_s
		}
	} else {
		m.CloudletVms = nil
	}
	if src.Errors != nil {
		m.Errors = make([]string, len(src.Errors), len(src.Errors))
		for ii, s := range src.Errors {
			m.Errors[ii] = s
		}
	} else {
		m.Errors = nil
	}
}

func (s *CloudletVMPoolInfo) HasFields() bool {
	return true
}

type CloudletVMPoolInfoStore struct {
	kvstore objstore.KVStore
}

func NewCloudletVMPoolInfoStore(kvstore objstore.KVStore) CloudletVMPoolInfoStore {
	return CloudletVMPoolInfoStore{kvstore: kvstore}
}

func (s *CloudletVMPoolInfoStore) Create(ctx context.Context, m *CloudletVMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletVMPoolInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPoolInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolInfoStore) Update(ctx context.Context, m *CloudletVMPoolInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPoolInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletVMPoolInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolInfoStore) Put(ctx context.Context, m *CloudletVMPoolInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletVMPoolInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPoolInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolInfoStore) Delete(ctx context.Context, m *CloudletVMPoolInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletVMPoolInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletVMPoolInfoStore) LoadOne(key string) (*CloudletVMPoolInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletVMPoolInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletVMPoolInfo data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletVMPoolInfoStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *CloudletVMPoolInfo) bool {
	keystr := objstore.DbKeyString("CloudletVMPoolInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletVMPoolInfoStore) STMPut(stm concurrency.STM, obj *CloudletVMPoolInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletVMPoolInfo", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletVMPoolInfo json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletVMPoolInfoStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("CloudletVMPoolInfo", key)
	stm.Del(keystr)
}

type CloudletVMPoolInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

type CloudletVMPoolInfoCacheData struct {
	Obj    *CloudletVMPoolInfo
	ModRev int64
}

// CloudletVMPoolInfoCache caches CloudletVMPoolInfo objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletVMPoolInfoCache struct {
	Objs          map[CloudletKey]*CloudletVMPoolInfoCacheData
	Mux           util.Mutex
	List          map[CloudletKey]struct{}
	FlushAll      bool
	NotifyCb      func(ctx context.Context, obj *CloudletKey, old *CloudletVMPoolInfo, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *CloudletVMPoolInfo, new *CloudletVMPoolInfo)
	DeletedCbs    []func(ctx context.Context, old *CloudletVMPoolInfo)
	KeyWatchers   map[CloudletKey][]*CloudletVMPoolInfoKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *CloudletKey)
	DeletedKeyCbs []func(ctx context.Context, key *CloudletKey)
}

func NewCloudletVMPoolInfoCache() *CloudletVMPoolInfoCache {
	cache := CloudletVMPoolInfoCache{}
	InitCloudletVMPoolInfoCache(&cache)
	return &cache
}

func InitCloudletVMPoolInfoCache(cache *CloudletVMPoolInfoCache) {
	cache.Objs = make(map[CloudletKey]*CloudletVMPoolInfoCacheData)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletVMPoolInfoKeyWatcher)
	cache.NotifyCb = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *CloudletVMPoolInfoCache) GetTypeString() string {
	return "CloudletVMPoolInfo"
}

func (c *CloudletVMPoolInfoCache) Get(key *CloudletKey, valbuf *CloudletVMPoolInfo) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *CloudletVMPoolInfoCache) GetWithRev(key *CloudletKey, valbuf *CloudletVMPoolInfo, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *CloudletVMPoolInfoCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletVMPoolInfoCache) GetAllKeys(ctx context.Context, cb func(key *CloudletKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *CloudletVMPoolInfoCache) Update(ctx context.Context, in *CloudletVMPoolInfo, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *CloudletVMPoolInfo) (*CloudletVMPoolInfo, bool) {
		return in, true
	})
}

func (c *CloudletVMPoolInfoCache) UpdateModFunc(ctx context.Context, key *CloudletKey, modRev int64, modFunc func(old *CloudletVMPoolInfo) (new *CloudletVMPoolInfo, changed bool)) {
	c.Mux.Lock()
	var old *CloudletVMPoolInfo
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &CloudletVMPoolInfo{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	if c.NotifyCb != nil {
		defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &CloudletVMPoolInfo{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &CloudletVMPoolInfoCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletVMPoolInfoCache) Delete(ctx context.Context, in *CloudletVMPoolInfo, modRev int64) {
	c.Mux.Lock()
	var old *CloudletVMPoolInfo
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletVMPoolInfoCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*CloudletVMPoolInfoCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletVMPoolInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletVMPoolInfoCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush CloudletVMPoolInfo", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[CloudletKey]*CloudletVMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush CloudletVMPoolInfo delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *CloudletVMPoolInfoCache) Show(filter *CloudletVMPoolInfo, cb func(ret *CloudletVMPoolInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletVMPoolInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare CloudletVMPoolInfo", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletVMPoolInfo", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletVMPoolInfoGenericNotifyCb(fn func(key *CloudletKey, old *CloudletVMPoolInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*CloudletVMPoolInfo))
	}
}

func (c *CloudletVMPoolInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *CloudletVMPoolInfo, modRev int64)) {
	c.NotifyCb = fn
}

func (c *CloudletVMPoolInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletVMPoolInfo, new *CloudletVMPoolInfo)) {
	c.UpdatedCbs = []func(ctx context.Context, old *CloudletVMPoolInfo, new *CloudletVMPoolInfo){fn}
}

func (c *CloudletVMPoolInfoCache) SetDeletedCb(fn func(ctx context.Context, old *CloudletVMPoolInfo)) {
	c.DeletedCbs = []func(ctx context.Context, old *CloudletVMPoolInfo){fn}
}

func (c *CloudletVMPoolInfoCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *CloudletVMPoolInfoCache) SetDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *CloudletKey){fn}
}

func (c *CloudletVMPoolInfoCache) AddUpdatedCb(fn func(ctx context.Context, old *CloudletVMPoolInfo, new *CloudletVMPoolInfo)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *CloudletVMPoolInfoCache) AddDeletedCb(fn func(ctx context.Context, old *CloudletVMPoolInfo)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *CloudletVMPoolInfoCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *CloudletVMPoolInfoCache) AddDeletedKeyCb(fn func(ctx context.Context, key *CloudletKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *CloudletVMPoolInfoCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletVMPoolInfoCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletVMPoolInfoKeyWatcher, 0)
	}
	watcher := CloudletVMPoolInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletVMPoolInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletVMPoolInfoCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*CloudletVMPoolInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *CloudletVMPoolInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := CloudletVMPoolInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletVMPoolInfo data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletVMPoolInfoCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := CloudletVMPoolInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *CloudletVMPoolInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletVMPoolInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*CloudletVMPoolInfoCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletVMPoolInfoCache) UsesOrg(org string) bool {
	return false
}

func (m *CloudletVMPoolInfo) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletVMPoolInfo) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletVMPoolInfo) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletVMPoolInfo) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletVMPoolInfo(a CloudletVMPoolInfo, b CloudletVMPoolInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletVMPoolInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletVMState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	for _, e := range m.Vmspecs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.CloudletVms {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreCloudletVMPoolInfoFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CloudletVms.UpdatedAt")
	}
	return cmpopts.IgnoreFields(CloudletVMPoolInfo{}, names...)
}

var CloudletVMTypeStrings = []string{
	"PLATFORM_NODE",
	"SHARED_ROOT_LB",
	"DEDICATED_ROOT_LB",
	"DOCKER_NODE",
	"K8S_MASTER",
	"K8S_NODE",
}

const (
	CloudletVMTypePLATFORM_NODE     uint64 = 1 << 0
	CloudletVMTypeSHARED_ROOT_LB    uint64 = 1 << 1
	CloudletVMTypeDEDICATED_ROOT_LB uint64 = 1 << 2
	CloudletVMTypeDOCKER_NODE       uint64 = 1 << 3
	CloudletVMTypeK8S_MASTER        uint64 = 1 << 4
	CloudletVMTypeK8S_NODE          uint64 = 1 << 5
)

var CloudletVMType_CamelName = map[int32]string{
	// PLATFORM_NODE -> PlatformNode
	0: "PlatformNode",
	// SHARED_ROOT_LB -> SharedRootLb
	1: "SharedRootLb",
	// DEDICATED_ROOT_LB -> DedicatedRootLb
	2: "DedicatedRootLb",
	// DOCKER_NODE -> DockerNode
	3: "DockerNode",
	// K8S_MASTER -> K8SMaster
	4: "K8SMaster",
	// K8S_NODE -> K8SNode
	5: "K8SNode",
}
var CloudletVMType_CamelValue = map[string]int32{
	"PlatformNode":    0,
	"SharedRootLb":    1,
	"DedicatedRootLb": 2,
	"DockerNode":      3,
	"K8SMaster":       4,
	"K8SNode":         5,
}

func (e *CloudletVMType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletVMType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletVMType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletVMType(val)
	return nil
}

func (e CloudletVMType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(CloudletVMType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *CloudletVMType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := CloudletVMType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletVMType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = CloudletVMType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = CloudletVMType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var CloudletVMStateStrings = []string{
	"CLOUDLET_VM_FREE",
	"CLOUDLET_VM_REQUESTED",
	"CLOUDLET_VM_ALLOCATED",
	"CLOUDLET_VM_IN_USE",
	"CLOUDLET_VM_RELEASED",
	"CLOUDLET_VM_ERROR",
}

const (
	CloudletVMStateCLOUDLET_VM_FREE      uint64 = 1 << 0
	CloudletVMStateCLOUDLET_VM_REQUESTED uint64 = 1 << 1
	CloudletVMStateCLOUDLET_VM_ALLOCATED uint64 = 1 << 2
	CloudletVMStateCLOUDLET_VM_IN_USE    uint64 = 1 << 3
	CloudletVMStateCLOUDLET_VM_RELEASED  uint64 = 1 << 4
	CloudletVMStateCLOUDLET_VM_ERROR     uint64 = 1 << 5
)

var CloudletVMState_CamelName = map[int32]string{
	// CLOUDLET_VM_FREE -> CloudletVmFree
	0: "CloudletVmFree",
	// CLOUDLET_VM_REQUESTED -> CloudletVmRequested
	1: "CloudletVmRequested",
	// CLOUDLET_VM_ALLOCATED -> CloudletVmAllocated
	2: "CloudletVmAllocated",
	// CLOUDLET_VM_IN_USE -> CloudletVmInUse
	3: "CloudletVmInUse",
	// CLOUDLET_VM_RELEASED -> CloudletVmReleased
	4: "CloudletVmReleased",
	// CLOUDLET_VM_ERROR -> CloudletVmError
	5: "CloudletVmError",
}
var CloudletVMState_CamelValue = map[string]int32{
	"CloudletVmFree":      0,
	"CloudletVmRequested": 1,
	"CloudletVmAllocated": 2,
	"CloudletVmInUse":     3,
	"CloudletVmReleased":  4,
	"CloudletVmError":     5,
}

func (e *CloudletVMState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletVMState_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletVMState_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletVMState(val)
	return nil
}

func (e CloudletVMState) MarshalYAML() (interface{}, error) {
	return proto.EnumName(CloudletVMState_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *CloudletVMState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := CloudletVMState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletVMState_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = CloudletVMState(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = CloudletVMState(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *CloudletVMNetInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovCloudletvmpool(uint64(l))
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovCloudletvmpool(uint64(l))
	}
	return n
}

func (m *CloudletVM) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudletvmpool(uint64(l))
	}
	l = m.NetInfo.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	if m.Type != 0 {
		n += 1 + sovCloudletvmpool(uint64(m.Type))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovCloudletvmpool(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCloudletvmpool(uint64(m.State))
	}
	l = m.UpdatedAt.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	return n
}

func (m *CloudletVMPool) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	if len(m.CloudletVms) > 0 {
		for _, e := range m.CloudletVms {
			l = e.Size()
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	return n
}

func (m *CloudletVMPoolMember) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	l = m.CloudletVm.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	return n
}

func (m *CloudletVMSpec) Size() (n int) {
	var l int
	_ = l
	if m.ExternalNetwork {
		n += 2
	}
	if m.InternalNetwork {
		n += 2
	}
	return n
}

func (m *CloudletVMPoolInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudletvmpool(uint64(l))
	if m.State != 0 {
		n += 1 + sovCloudletvmpool(uint64(m.State))
	}
	if m.NotifyId != 0 {
		n += 1 + sovCloudletvmpool(uint64(m.NotifyId))
	}
	if len(m.Vmspecs) > 0 {
		for _, e := range m.Vmspecs {
			l = e.Size()
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	if len(m.CloudletVms) > 0 {
		for _, e := range m.CloudletVms {
			l = e.Size()
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovCloudletvmpool(uint64(l))
		}
	}
	return n
}

func sovCloudletvmpool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudletvmpool(x uint64) (n int) {
	return sovCloudletvmpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletVMNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CloudletVMType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CloudletVMState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVMPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletVms = append(m.CloudletVms, &CloudletVM{})
			if err := m.CloudletVms[len(m.CloudletVms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVMPoolMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMPoolMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMPoolMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletVm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVMSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalNetwork = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalNetwork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalNetwork = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletVMPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletVMPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletVMPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CloudletVMState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmspecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vmspecs = append(m.Vmspecs, &CloudletVMSpec{})
			if err := m.Vmspecs[len(m.Vmspecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletVms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletVms = append(m.CloudletVms, &CloudletVM{})
			if err := m.CloudletVms[len(m.CloudletVms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudletvmpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudletvmpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudletvmpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudletvmpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudletvmpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudletvmpool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudletvmpool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudletvmpool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudletvmpool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudletvmpool   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloudletvmpool.proto", fileDescriptorCloudletvmpool) }

var fileDescriptorCloudletvmpool = []byte{
	// 1239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0xd8, 0x4e, 0x1a, 0x4f, 0x4a, 0xb2, 0x19, 0x39, 0x61, 0x62, 0xda, 0x34, 0xda, 0x4a,
	0x28, 0x54, 0xb1, 0xb7, 0x4a, 0x2f, 0x55, 0x44, 0x0f, 0x8e, 0xbd, 0x15, 0x51, 0xfc, 0xa3, 0xec,
	0x3a, 0x91, 0x38, 0xad, 0x36, 0xde, 0x89, 0xbd, 0xd4, 0xbb, 0xb3, 0xda, 0x5d, 0x27, 0x35, 0x52,
	0x25, 0xc4, 0x5f, 0x80, 0x8a, 0x84, 0xa0, 0xe2, 0x80, 0x38, 0x20, 0xc4, 0x01, 0xa4, 0x72, 0x02,
	0xfe, 0x81, 0x1e, 0x2b, 0x21, 0x71, 0x44, 0x25, 0xe2, 0x80, 0xe0, 0x82, 0x54, 0xa7, 0x67, 0x34,
	0xb3, 0xbb, 0xce, 0xc6, 0x3f, 0x4a, 0x94, 0x86, 0x8b, 0x35, 0xf3, 0xbd, 0x6f, 0xde, 0x7e, 0xf3,
	0xcd, 0x7b, 0x33, 0x86, 0x99, 0x46, 0x9b, 0x76, 0x8c, 0x36, 0xf1, 0xf7, 0x2d, 0x87, 0xd2, 0x76,
	0xde, 0x71, 0xa9, 0x4f, 0x51, 0x9a, 0x18, 0x4d, 0xc2, 0x87, 0xd9, 0xcb, 0x4d, 0x4a, 0x9b, 0x6d,
	0x22, 0xe9, 0x8e, 0x29, 0xe9, 0xb6, 0x4d, 0x7d, 0xdd, 0x37, 0xa9, 0xed, 0x05, 0xc4, 0xec, 0xad,
	0xa6, 0xe9, 0xb7, 0x3a, 0xbb, 0xf9, 0x06, 0xb5, 0x24, 0x8b, 0xee, 0x9a, 0x6d, 0xb6, 0xf0, 0xbe,
	0xc4, 0x7e, 0x73, 0x3c, 0xb3, 0xc4, 0x79, 0x4d, 0x62, 0xf7, 0x07, 0xe1, 0xca, 0x4b, 0x2e, 0xf1,
	0x3a, 0x6d, 0x3f, 0x9c, 0xcd, 0x44, 0x32, 0xc2, 0x79, 0xf1, 0x3f, 0xf3, 0x1a, 0x39, 0x4b, 0xf7,
	0x1b, 0xad, 0x1c, 0xb1, 0x9b, 0xa6, 0x4d, 0x24, 0xc3, 0x22, 0x39, 0xbe, 0x54, 0x6a, 0xd3, 0x46,
	0x98, 0x24, 0xd3, 0xa4, 0x4d, 0x1a, 0x80, 0x6c, 0x14, 0xa0, 0xe2, 0x36, 0x9c, 0x2b, 0x86, 0x1f,
	0xdb, 0xa9, 0x54, 0x89, 0xbf, 0x69, 0xef, 0x51, 0x74, 0x15, 0x4e, 0x93, 0xfb, 0x3e, 0x71, 0x6d,
	0xbd, 0xad, 0x99, 0x0e, 0x06, 0xcb, 0x60, 0x25, 0xad, 0xc0, 0x08, 0xda, 0x74, 0x18, 0xc1, 0xb4,
	0x8f, 0x09, 0x89, 0x80, 0x10, 0x41, 0x9b, 0x8e, 0xf8, 0x7d, 0x02, 0xc2, 0xe3, 0xbc, 0x08, 0xc1,
	0x94, 0xad, 0x5b, 0x24, 0xcc, 0xc4, 0xc7, 0xe8, 0x36, 0x9c, 0xb2, 0x89, 0xaf, 0x99, 0xf6, 0x1e,
	0xe5, 0x09, 0xa6, 0xd7, 0x2e, 0xe7, 0xfb, 0x46, 0xe7, 0x87, 0x44, 0x6d, 0xa4, 0x9e, 0xfc, 0x76,
	0xf5, 0x82, 0x72, 0xd1, 0x0e, 0x35, 0xe6, 0x60, 0xca, 0xef, 0x3a, 0x04, 0x27, 0x97, 0xc1, 0xca,
	0xcc, 0xda, 0xe2, 0xc8, 0xa5, 0xf5, 0xae, 0x43, 0x14, 0x4e, 0x63, 0x0a, 0x3a, 0x1e, 0x71, 0x71,
	0x2a, 0x50, 0xc0, 0xc6, 0xe8, 0x06, 0x9c, 0xf0, 0x7c, 0xdd, 0x27, 0x78, 0x82, 0xe7, 0xc8, 0x8e,
	0xcc, 0xa1, 0x32, 0x86, 0x12, 0x10, 0xd1, 0x7b, 0x10, 0x76, 0x1c, 0x43, 0xf7, 0x89, 0xa1, 0xe9,
	0x3e, 0x9e, 0xe4, 0xaa, 0xaf, 0xe5, 0x0d, 0xd3, 0xf3, 0x5d, 0x73, 0xb7, 0xc3, 0x60, 0x7e, 0x0c,
	0x5a, 0x70, 0x0c, 0xf9, 0xba, 0x69, 0x11, 0xcf, 0xd7, 0x2d, 0x67, 0x63, 0xfe, 0x9b, 0x1e, 0x06,
	0x0f, 0x1f, 0x2f, 0xa6, 0xfd, 0x08, 0xe2, 0xbb, 0x49, 0x87, 0xd9, 0x0a, 0xbe, 0xf8, 0x77, 0x02,
	0xce, 0x1c, 0x7f, 0xf5, 0x2e, 0xa5, 0x6d, 0xb4, 0x00, 0x27, 0xf7, 0x4c, 0xd2, 0x36, 0x3c, 0x0c,
	0x96, 0x93, 0x2b, 0x69, 0x25, 0x9c, 0xa1, 0x3c, 0x4c, 0xde, 0x23, 0xdd, 0xd0, 0xb4, 0x85, 0x11,
	0xaa, 0xb7, 0x48, 0x37, 0xb4, 0x8b, 0x11, 0xd1, 0x2d, 0x78, 0x29, 0x2a, 0x28, 0x6d, 0xdf, 0xf2,
	0x70, 0x72, 0x39, 0xb9, 0x32, 0xbd, 0x36, 0x3f, 0x72, 0xbb, 0xca, 0x74, 0x44, 0xdd, 0xb1, 0xbc,
	0xf5, 0x5f, 0xc1, 0x9f, 0xcf, 0x31, 0xf8, 0xe7, 0x39, 0x06, 0x1f, 0xf6, 0x30, 0xf8, 0xb8, 0x87,
	0xc1, 0x67, 0x6c, 0x1f, 0x47, 0xf8, 0xa0, 0x18, 0x63, 0x5d, 0xcb, 0x33, 0xa3, 0x57, 0x4f, 0x42,
	0xdb, 0x1e, 0x71, 0x07, 0x20, 0x6e, 0xe5, 0x20, 0x2d, 0x32, 0x20, 0xaf, 0x92, 0x06, 0xb5, 0x0d,
	0x6f, 0x6c, 0xbc, 0xaa, 0xdb, 0xd4, 0x7b, 0x74, 0x84, 0xa5, 0x48, 0xe0, 0xed, 0x2d, 0xd2, 0xcd,
	0x57, 0x75, 0x8b, 0xac, 0x46, 0x48, 0x8e, 0xba, 0x4d, 0x8e, 0xd6, 0xdc, 0xa6, 0x6e, 0x9b, 0x1f,
	0xf0, 0xe6, 0x7c, 0xfc, 0x02, 0x0b, 0xf7, 0x48, 0xf7, 0x76, 0x1c, 0x13, 0x7f, 0x4a, 0xc0, 0xcc,
	0x49, 0xb7, 0x2b, 0xc4, 0xda, 0x25, 0x6e, 0xe4, 0x2d, 0x38, 0xad, 0xb7, 0x6f, 0xc3, 0xe9, 0x98,
	0xb7, 0xe1, 0x99, 0x8c, 0xb6, 0x36, 0x5c, 0x06, 0x8f, 0x0d, 0x5e, 0xff, 0x81, 0x79, 0xd9, 0x3a,
	0xde, 0xf1, 0xa0, 0x91, 0x83, 0x2e, 0x0e, 0x59, 0xf8, 0x52, 0xff, 0xfe, 0x2f, 0xf3, 0xf6, 0xe2,
	0x95, 0xaa, 0x3a, 0xa4, 0x81, 0xde, 0x82, 0x42, 0xff, 0xc2, 0xb0, 0x89, 0x7f, 0x40, 0xdd, 0x7b,
	0xdc, 0xc2, 0x29, 0x65, 0x36, 0xc2, 0xab, 0x01, 0xcc, 0xa8, 0xfd, 0xab, 0x23, 0xa2, 0x26, 0x02,
	0x6a, 0x84, 0x87, 0x54, 0xf1, 0x61, 0x12, 0xa2, 0x93, 0x87, 0xc4, 0x3b, 0xff, 0xbc, 0xda, 0xa2,
	0xdf, 0xfe, 0xc9, 0xd3, 0xb6, 0xff, 0x9b, 0x30, 0x6d, 0x53, 0xdf, 0xdc, 0xeb, 0x6a, 0xa6, 0xc1,
	0x6f, 0x92, 0xe4, 0x46, 0xfa, 0xe1, 0xe3, 0xc5, 0x09, 0x9b, 0x36, 0x2c, 0x47, 0x99, 0x0a, 0x62,
	0x9b, 0x06, 0xba, 0x09, 0x2f, 0xee, 0x5b, 0x9e, 0x43, 0x1a, 0x1e, 0x9e, 0xe0, 0xbd, 0x36, 0xfa,
	0x7a, 0x62, 0xd6, 0x29, 0x11, 0x73, 0xa8, 0x4b, 0x27, 0x4f, 0xdb, 0xa5, 0xcc, 0x10, 0xe2, 0xba,
	0xd4, 0xf5, 0xf0, 0xc5, 0xc0, 0x90, 0x60, 0xb6, 0xae, 0x0e, 0x36, 0xef, 0x97, 0x3d, 0x0c, 0x9e,
	0xf5, 0x30, 0x38, 0x5b, 0x21, 0xa4, 0x6c, 0x6a, 0x93, 0xeb, 0x0f, 0xe2, 0x87, 0xcf, 0xca, 0x15,
	0xcd, 0xc1, 0xd7, 0xee, 0x96, 0x0b, 0xf5, 0x3b, 0x35, 0xa5, 0xa2, 0x55, 0x6b, 0x25, 0x59, 0xb8,
	0x80, 0x10, 0x9c, 0x51, 0xdf, 0x29, 0x28, 0x72, 0x49, 0x53, 0x6a, 0xb5, 0xba, 0x56, 0xde, 0x10,
	0x00, 0x9a, 0x87, 0x73, 0x25, 0xb9, 0xb4, 0x59, 0x2c, 0xd4, 0x63, 0x70, 0x02, 0xcd, 0xc2, 0xe9,
	0x52, 0xad, 0xb8, 0x25, 0x2b, 0xc1, 0xda, 0x24, 0x9a, 0x81, 0x70, 0xeb, 0x96, 0xaa, 0x55, 0x0a,
	0x6a, 0x5d, 0x56, 0x84, 0x14, 0xba, 0x04, 0xa7, 0xd8, 0x9c, 0x47, 0x27, 0xae, 0x7f, 0x0d, 0xe0,
	0xec, 0xc0, 0xe9, 0xa0, 0x0c, 0x14, 0x8a, 0xe5, 0xda, 0x76, 0xa9, 0x2c, 0xd7, 0xb5, 0x9d, 0x8a,
	0x76, 0x47, 0x91, 0x99, 0x86, 0x45, 0x38, 0x1f, 0x47, 0x15, 0xf9, 0xdd, 0x6d, 0x59, 0xad, 0xcb,
	0x25, 0x01, 0x0c, 0x86, 0x0a, 0xe5, 0x72, 0x8d, 0xcb, 0x12, 0x12, 0x68, 0x01, 0xa2, 0x78, 0x68,
	0xb3, 0xaa, 0x6d, 0xab, 0x4c, 0x15, 0x86, 0x99, 0x93, 0xd9, 0xca, 0x72, 0x41, 0x95, 0x4b, 0x42,
	0x8a, 0xed, 0x2b, 0x1e, 0x91, 0x15, 0xa5, 0xa6, 0x08, 0x13, 0x6b, 0x5f, 0x4c, 0xc5, 0x5f, 0x56,
	0x56, 0xbc, 0x05, 0xc7, 0x44, 0xdf, 0x01, 0x98, 0x29, 0xba, 0x44, 0xf7, 0xc9, 0xc0, 0x5d, 0x3f,
	0xba, 0x42, 0x58, 0x28, 0x3b, 0x17, 0x0b, 0x29, 0xfc, 0x6f, 0x82, 0xd8, 0xfa, 0xab, 0x87, 0x25,
	0x85, 0x78, 0xb4, 0xe3, 0x36, 0xfa, 0x99, 0xbc, 0xd5, 0x42, 0x83, 0x1d, 0x55, 0x45, 0xb7, 0xf5,
	0x26, 0x59, 0x1d, 0x3c, 0xc1, 0x6f, 0x5f, 0x60, 0x61, 0x10, 0xfb, 0xe8, 0x97, 0x3f, 0x3e, 0x49,
	0xbc, 0x21, 0x2e, 0x48, 0x0d, 0xae, 0x49, 0x3a, 0xf9, 0xf7, 0x67, 0x1d, 0x5c, 0x47, 0x9f, 0x03,
	0x98, 0x29, 0x91, 0x36, 0x79, 0x45, 0xc1, 0xea, 0x19, 0x04, 0x73, 0x71, 0x59, 0x71, 0x5e, 0x32,
	0xf8, 0xf7, 0x03, 0x71, 0x71, 0x6d, 0x8f, 0x00, 0xcc, 0x04, 0x57, 0xdc, 0x2b, 0x69, 0xab, 0x9f,
	0x55, 0x1b, 0x33, 0x2e, 0x78, 0xc0, 0x47, 0x18, 0xf7, 0x15, 0x80, 0x48, 0x6d, 0xd1, 0x83, 0xd3,
	0x4b, 0x1b, 0x1f, 0xe2, 0x12, 0x73, 0xe3, 0x24, 0xee, 0x98, 0xe4, 0x60, 0x48, 0xe0, 0xd3, 0x23,
	0x0c, 0xb8, 0xc8, 0x45, 0x31, 0x23, 0x79, 0x2d, 0x7a, 0x30, 0x2c, 0xf1, 0x06, 0x40, 0x3f, 0x02,
	0xf8, 0x7a, 0xc1, 0x30, 0x46, 0xbe, 0x84, 0x57, 0xc7, 0xca, 0x09, 0x08, 0xa3, 0xac, 0x7c, 0xff,
	0x0c, 0x56, 0x1e, 0x1e, 0xe1, 0xd9, 0xd8, 0x9b, 0xc5, 0xae, 0x22, 0x2e, 0x7c, 0x49, 0x5c, 0x94,
	0x74, 0xc3, 0x18, 0xd0, 0x6d, 0xf1, 0x6f, 0x33, 0x83, 0x7f, 0x06, 0x30, 0xab, 0x10, 0x8b, 0xee,
	0x93, 0x73, 0x93, 0x6f, 0x9e, 0xa3, 0xfc, 0x2b, 0x22, 0x96, 0x5c, 0x6b, 0x9c, 0xfa, 0xb5, 0x4f,
	0x01, 0x9c, 0x1f, 0x7e, 0xdb, 0xd8, 0x15, 0xf1, 0x00, 0x2e, 0x0c, 0xd7, 0x0d, 0x7f, 0xf8, 0xae,
	0x8c, 0xdd, 0x12, 0x0b, 0x67, 0x5f, 0x1e, 0x16, 0xaf, 0xf5, 0x65, 0x8d, 0x28, 0x07, 0xf6, 0x2f,
	0x9c, 0x97, 0xc4, 0x86, 0xf0, 0xe4, 0xf7, 0xa5, 0x0b, 0x4f, 0x0e, 0x97, 0xc0, 0xd3, 0xc3, 0x25,
	0xf0, 0xec, 0x70, 0x09, 0xec, 0x4e, 0xf2, 0x94, 0x37, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x97,
	0x38, 0x15, 0x4d, 0x1d, 0x0d, 0x00, 0x00,
}
