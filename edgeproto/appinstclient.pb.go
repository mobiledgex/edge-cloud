// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appinstclient.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	dme_proto "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AppKey uniquely identifies an App
type AppInstClientKey struct {
	// AppInst Key
	Key AppInstKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// AppInstClient Unique Id
	UniqueId string `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// AppInstClient Unique Id Type
	UniqueIdType string `protobuf:"bytes,3,opt,name=unique_id_type,json=uniqueIdType,proto3" json:"unique_id_type,omitempty"`
}

func (m *AppInstClientKey) Reset()         { *m = AppInstClientKey{} }
func (m *AppInstClientKey) String() string { return proto.CompactTextString(m) }
func (*AppInstClientKey) ProtoMessage()    {}
func (*AppInstClientKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b03148dc570743, []int{0}
}
func (m *AppInstClientKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppInstClientKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppInstClientKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppInstClientKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppInstClientKey.Merge(m, src)
}
func (m *AppInstClientKey) XXX_Size() int {
	return m.Size()
}
func (m *AppInstClientKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AppInstClientKey.DiscardUnknown(m)
}

var xxx_messageInfo_AppInstClientKey proto.InternalMessageInfo

// Client is an AppInst client that called FindCloudlet DME Api
type AppInstClient struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	ClientKey AppInstClientKey `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key"`
	// Location of the Client
	Location dme_proto.Loc `protobuf:"bytes,3,opt,name=location,proto3" json:"location"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,4,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
}

func (m *AppInstClient) Reset()         { *m = AppInstClient{} }
func (m *AppInstClient) String() string { return proto.CompactTextString(m) }
func (*AppInstClient) ProtoMessage()    {}
func (*AppInstClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b03148dc570743, []int{1}
}
func (m *AppInstClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppInstClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppInstClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppInstClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppInstClient.Merge(m, src)
}
func (m *AppInstClient) XXX_Size() int {
	return m.Size()
}
func (m *AppInstClient) XXX_DiscardUnknown() {
	xxx_messageInfo_AppInstClient.DiscardUnknown(m)
}

var xxx_messageInfo_AppInstClient proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppInstClientKey)(nil), "edgeproto.AppInstClientKey")
	proto.RegisterType((*AppInstClient)(nil), "edgeproto.AppInstClient")
}

func init() { proto.RegisterFile("appinstclient.proto", fileDescriptor_a8b03148dc570743) }

var fileDescriptor_a8b03148dc570743 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0xb4, 0x48, 0xda, 0x45, 0x8c, 0x2e, 0x6a, 0x86, 0x1f, 0xae, 0x4d, 0xe3, 0xa1, 0x21,
	0x6d, 0x97, 0xe0, 0x41, 0x43, 0x62, 0xb4, 0x70, 0x22, 0x10, 0x4d, 0x8a, 0xe1, 0xda, 0x4c, 0x67,
	0x1f, 0xdb, 0x89, 0xbb, 0x33, 0xe3, 0xee, 0xac, 0xb8, 0x9e, 0x88, 0xff, 0x80, 0x44, 0x6f, 0xc6,
	0x3f, 0x80, 0x9b, 0x86, 0x8b, 0x57, 0x8f, 0x1c, 0x49, 0xbc, 0x78, 0x32, 0x08, 0x1e, 0x8c, 0x27,
	0x12, 0x0a, 0x67, 0xb3, 0x3f, 0xd8, 0xb4, 0x28, 0x9a, 0x78, 0x69, 0x67, 0xde, 0xfb, 0xbe, 0xef,
	0xcd, 0xcb, 0xf7, 0x65, 0xb5, 0x31, 0x22, 0x25, 0xe3, 0xbe, 0xa2, 0x0e, 0x03, 0xae, 0x1a, 0xd2,
	0x13, 0x4a, 0xe8, 0x25, 0xb0, 0x6c, 0x88, 0x8f, 0x13, 0x53, 0xb6, 0x10, 0xb6, 0x03, 0x26, 0x91,
	0xcc, 0x24, 0x9c, 0x0b, 0x45, 0x14, 0x13, 0xdc, 0x4f, 0x80, 0x13, 0x77, 0x6d, 0xa6, 0xba, 0x41,
	0xa7, 0x41, 0x85, 0x6b, 0xba, 0xa2, 0xc3, 0x9c, 0x88, 0xf8, 0xdc, 0x8c, 0x7e, 0xeb, 0xd4, 0x11,
	0x81, 0x65, 0xc6, 0x38, 0x1b, 0x78, 0x76, 0x48, 0x99, 0x0b, 0xff, 0x64, 0x5a, 0x75, 0x97, 0x28,
	0xda, 0xad, 0x03, 0xb7, 0x19, 0x07, 0xd3, 0x72, 0xa1, 0x1e, 0x53, 0x4d, 0x47, 0xd0, 0x54, 0x64,
	0x34, 0x7d, 0x7c, 0x7a, 0xbd, 0x6a, 0x0b, 0x5b, 0x24, 0x98, 0xe8, 0x94, 0x54, 0x2b, 0x1f, 0x0b,
	0xda, 0xe5, 0xa6, 0x94, 0x8b, 0xdc, 0x57, 0x0b, 0xf1, 0x92, 0x4b, 0x10, 0xea, 0x75, 0xad, 0xf0,
	0x04, 0x42, 0x8c, 0xca, 0xa8, 0x3a, 0x32, 0x7b, 0xad, 0x91, 0xed, 0xdb, 0x48, 0x91, 0x4b, 0x10,
	0xce, 0x0f, 0xed, 0x7c, 0xbd, 0x99, 0x6b, 0x45, 0x38, 0x7d, 0x52, 0x2b, 0x05, 0x9c, 0x3d, 0x0d,
	0xa0, 0xcd, 0x2c, 0x9c, 0x2f, 0xa3, 0x6a, 0xa9, 0x55, 0x4c, 0x0a, 0x8b, 0x96, 0x7e, 0x4b, 0xbb,
	0x94, 0x35, 0xdb, 0x2a, 0x94, 0x80, 0x0b, 0x31, 0xe2, 0xe2, 0x29, 0xe2, 0x71, 0x28, 0x61, 0xee,
	0x43, 0xfe, 0xc7, 0x11, 0x46, 0x87, 0x47, 0x18, 0x6d, 0xf4, 0x30, 0xda, 0xec, 0x61, 0xf4, 0xa9,
	0x87, 0xd1, 0xdb, 0x63, 0xfc, 0x2a, 0x4f, 0xa4, 0xe4, 0xc4, 0x85, 0x7b, 0x4b, 0x10, 0x46, 0xf3,
	0xa3, 0xbf, 0x87, 0xc4, 0x85, 0x1a, 0x91, 0xf2, 0x19, 0x78, 0x7e, 0x7f, 0x7d, 0x15, 0x3c, 0x9f,
	0x09, 0x1e, 0xb5, 0xea, 0xc2, 0xb3, 0xfb, 0x5b, 0x8f, 0x3c, 0x9b, 0x70, 0xf6, 0x22, 0xf6, 0xa7,
	0x46, 0x9d, 0xc0, 0x57, 0xe0, 0xc5, 0xfd, 0x85, 0xe4, 0x9c, 0xae, 0x75, 0x7a, 0xcd, 0xa6, 0xa4,
	0xd0, 0x4c, 0xee, 0x0c, 0xfc, 0x8c, 0xac, 0x08, 0x2c, 0x07, 0xd4, 0x9f, 0x75, 0x93, 0x5e, 0x9f,
	0x70, 0x52, 0x38, 0x4f, 0xb9, 0x9f, 0xd0, 0x3f, 0x65, 0xfb, 0x04, 0x0f, 0x71, 0xc1, 0xa1, 0xb2,
	0x87, 0xb4, 0xd1, 0x01, 0xe7, 0xf4, 0xeb, 0xda, 0xf0, 0x1a, 0x03, 0xc7, 0xf2, 0x31, 0x2a, 0x17,
	0xaa, 0xa5, 0x56, 0x7a, 0xd3, 0x1f, 0x68, 0x5a, 0x12, 0xe0, 0x76, 0xe4, 0x6a, 0x3e, 0x76, 0x75,
	0xf2, 0x77, 0x57, 0x33, 0xff, 0x53, 0x6f, 0x4b, 0x34, 0x0b, 0xc4, 0x7d, 0xad, 0xe8, 0x08, 0x1a,
	0xcf, 0x8f, 0xed, 0x1b, 0x99, 0xbd, 0xd1, 0xb0, 0x98, 0xaf, 0x3c, 0xd6, 0x09, 0x14, 0x58, 0xed,
	0x38, 0x8b, 0xed, 0x24, 0x8b, 0x8d, 0x65, 0x41, 0x53, 0x85, 0x8c, 0xa4, 0x4f, 0x6b, 0x25, 0x2e,
	0x14, 0x5b, 0x0b, 0xa3, 0x88, 0x0c, 0x95, 0x51, 0xb5, 0x30, 0x3f, 0xba, 0xd5, 0xc3, 0xe8, 0xf5,
	0xf6, 0xf8, 0x05, 0x2e, 0xa8, 0x2b, 0x5b, 0xc5, 0xa4, 0xbf, 0x68, 0xcd, 0x15, 0x23, 0xeb, 0x0f,
	0x7b, 0x38, 0x37, 0xfb, 0x2e, 0x7f, 0x26, 0x9c, 0x4d, 0xc9, 0xf4, 0xf7, 0x48, 0xbb, 0xb2, 0xd2,
	0x15, 0xeb, 0x83, 0xbb, 0xff, 0x6d, 0x9f, 0x09, 0x7c, 0x5e, 0xb3, 0x42, 0x7e, 0xf6, 0xf0, 0x9d,
	0x16, 0xf8, 0x22, 0xf0, 0x28, 0x34, 0xa5, 0x6c, 0x72, 0xe2, 0x84, 0x8a, 0x51, 0xbf, 0xd6, 0xa4,
	0xd1, 0xc3, 0x57, 0x19, 0xac, 0xd7, 0xce, 0x89, 0xd1, 0xd6, 0x31, 0x46, 0x1b, 0x27, 0x18, 0xbd,
	0xfc, 0xfc, 0xfd, 0x4d, 0x1e, 0x57, 0xc6, 0x4c, 0xbf, 0x2b, 0xd6, 0xcd, 0x81, 0x2f, 0xc6, 0x1c,
	0x9a, 0x9e, 0x41, 0xfa, 0xaa, 0x36, 0xbe, 0xa2, 0x3c, 0x20, 0xee, 0xc0, 0x6c, 0x7f, 0x59, 0x50,
	0xe2, 0xfc, 0xef, 0xc3, 0x73, 0x33, 0x68, 0x7e, 0x6a, 0xe7, 0x9b, 0x91, 0xdb, 0xd9, 0x37, 0xd0,
	0xee, 0xbe, 0x81, 0xf6, 0xf6, 0x0d, 0xb4, 0x79, 0x60, 0xe4, 0x76, 0x0f, 0x8c, 0xdc, 0x97, 0x03,
	0x23, 0xd7, 0x19, 0x8e, 0x69, 0xb7, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x67, 0x27, 0x2c, 0xc1,
	0xc4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppInstClientApiClient is the client API for AppInstClientApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppInstClientApiClient interface {
	// Show application instance clients.
	ShowAppInstClient(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_ShowAppInstClientClient, error)
	// This is used unternally to forward AppInstClients to other Controllers
	StreamAppInstClientsLocal(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_StreamAppInstClientsLocalClient, error)
}

type appInstClientApiClient struct {
	cc *grpc.ClientConn
}

func NewAppInstClientApiClient(cc *grpc.ClientConn) AppInstClientApiClient {
	return &appInstClientApiClient{cc}
}

func (c *appInstClientApiClient) ShowAppInstClient(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_ShowAppInstClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppInstClientApi_serviceDesc.Streams[0], "/edgeproto.AppInstClientApi/ShowAppInstClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &appInstClientApiShowAppInstClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppInstClientApi_ShowAppInstClientClient interface {
	Recv() (*AppInstClient, error)
	grpc.ClientStream
}

type appInstClientApiShowAppInstClientClient struct {
	grpc.ClientStream
}

func (x *appInstClientApiShowAppInstClientClient) Recv() (*AppInstClient, error) {
	m := new(AppInstClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appInstClientApiClient) StreamAppInstClientsLocal(ctx context.Context, in *AppInstClientKey, opts ...grpc.CallOption) (AppInstClientApi_StreamAppInstClientsLocalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppInstClientApi_serviceDesc.Streams[1], "/edgeproto.AppInstClientApi/StreamAppInstClientsLocal", opts...)
	if err != nil {
		return nil, err
	}
	x := &appInstClientApiStreamAppInstClientsLocalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppInstClientApi_StreamAppInstClientsLocalClient interface {
	Recv() (*AppInstClient, error)
	grpc.ClientStream
}

type appInstClientApiStreamAppInstClientsLocalClient struct {
	grpc.ClientStream
}

func (x *appInstClientApiStreamAppInstClientsLocalClient) Recv() (*AppInstClient, error) {
	m := new(AppInstClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppInstClientApiServer is the server API for AppInstClientApi service.
type AppInstClientApiServer interface {
	// Show application instance clients.
	ShowAppInstClient(*AppInstClientKey, AppInstClientApi_ShowAppInstClientServer) error
	// This is used unternally to forward AppInstClients to other Controllers
	StreamAppInstClientsLocal(*AppInstClientKey, AppInstClientApi_StreamAppInstClientsLocalServer) error
}

// UnimplementedAppInstClientApiServer can be embedded to have forward compatible implementations.
type UnimplementedAppInstClientApiServer struct {
}

func (*UnimplementedAppInstClientApiServer) ShowAppInstClient(req *AppInstClientKey, srv AppInstClientApi_ShowAppInstClientServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowAppInstClient not implemented")
}
func (*UnimplementedAppInstClientApiServer) StreamAppInstClientsLocal(req *AppInstClientKey, srv AppInstClientApi_StreamAppInstClientsLocalServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAppInstClientsLocal not implemented")
}

func RegisterAppInstClientApiServer(s *grpc.Server, srv AppInstClientApiServer) {
	s.RegisterService(&_AppInstClientApi_serviceDesc, srv)
}

func _AppInstClientApi_ShowAppInstClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppInstClientKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppInstClientApiServer).ShowAppInstClient(m, &appInstClientApiShowAppInstClientServer{stream})
}

type AppInstClientApi_ShowAppInstClientServer interface {
	Send(*AppInstClient) error
	grpc.ServerStream
}

type appInstClientApiShowAppInstClientServer struct {
	grpc.ServerStream
}

func (x *appInstClientApiShowAppInstClientServer) Send(m *AppInstClient) error {
	return x.ServerStream.SendMsg(m)
}

func _AppInstClientApi_StreamAppInstClientsLocal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppInstClientKey)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppInstClientApiServer).StreamAppInstClientsLocal(m, &appInstClientApiStreamAppInstClientsLocalServer{stream})
}

type AppInstClientApi_StreamAppInstClientsLocalServer interface {
	Send(*AppInstClient) error
	grpc.ServerStream
}

type appInstClientApiStreamAppInstClientsLocalServer struct {
	grpc.ServerStream
}

func (x *appInstClientApiStreamAppInstClientsLocalServer) Send(m *AppInstClient) error {
	return x.ServerStream.SendMsg(m)
}

var _AppInstClientApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppInstClientApi",
	HandlerType: (*AppInstClientApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAppInstClient",
			Handler:       _AppInstClientApi_ShowAppInstClient_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAppInstClientsLocal",
			Handler:       _AppInstClientApi_StreamAppInstClientsLocal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "appinstclient.proto",
}

func (m *AppInstClientKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstClientKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppInstClientKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniqueIdType) > 0 {
		i -= len(m.UniqueIdType)
		copy(dAtA[i:], m.UniqueIdType)
		i = encodeVarintAppinstclient(dAtA, i, uint64(len(m.UniqueIdType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintAppinstclient(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAppinstclient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppInstClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppInstClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotifyId != 0 {
		i = encodeVarintAppinstclient(dAtA, i, uint64(m.NotifyId))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAppinstclient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ClientKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAppinstclient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintAppinstclient(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppinstclient(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppinstclient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppInstClientKey) Matches(o *AppInstClientKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.UniqueId != "" {
		if o.UniqueId != m.UniqueId {
			return false
		}
	}
	if !opts.Filter || o.UniqueIdType != "" {
		if o.UniqueIdType != m.UniqueIdType {
			return false
		}
	}
	return true
}

func (m *AppInstClientKey) CopyInFields(src *AppInstClientKey) int {
	changed := 0
	if m.Key.AppKey.Organization != src.Key.AppKey.Organization {
		m.Key.AppKey.Organization = src.Key.AppKey.Organization
		changed++
	}
	if m.Key.AppKey.Name != src.Key.AppKey.Name {
		m.Key.AppKey.Name = src.Key.AppKey.Name
		changed++
	}
	if m.Key.AppKey.Version != src.Key.AppKey.Version {
		m.Key.AppKey.Version = src.Key.AppKey.Version
		changed++
	}
	if m.Key.ClusterInstKey.ClusterKey.Name != src.Key.ClusterInstKey.ClusterKey.Name {
		m.Key.ClusterInstKey.ClusterKey.Name = src.Key.ClusterInstKey.ClusterKey.Name
		changed++
	}
	if m.Key.ClusterInstKey.CloudletKey.Organization != src.Key.ClusterInstKey.CloudletKey.Organization {
		m.Key.ClusterInstKey.CloudletKey.Organization = src.Key.ClusterInstKey.CloudletKey.Organization
		changed++
	}
	if m.Key.ClusterInstKey.CloudletKey.Name != src.Key.ClusterInstKey.CloudletKey.Name {
		m.Key.ClusterInstKey.CloudletKey.Name = src.Key.ClusterInstKey.CloudletKey.Name
		changed++
	}
	if m.Key.ClusterInstKey.Organization != src.Key.ClusterInstKey.Organization {
		m.Key.ClusterInstKey.Organization = src.Key.ClusterInstKey.Organization
		changed++
	}
	if m.UniqueId != src.UniqueId {
		m.UniqueId = src.UniqueId
		changed++
	}
	if m.UniqueIdType != src.UniqueIdType {
		m.UniqueIdType = src.UniqueIdType
		changed++
	}
	return changed
}

func (m *AppInstClientKey) DeepCopyIn(src *AppInstClientKey) {
	m.Key.DeepCopyIn(&src.Key)
	m.UniqueId = src.UniqueId
	m.UniqueIdType = src.UniqueIdType
}

func (s *AppInstClientKey) HasFields() bool {
	return false
}

type AppInstClientKeyStore struct {
	kvstore objstore.KVStore
}

func NewAppInstClientKeyStore(kvstore objstore.KVStore) AppInstClientKeyStore {
	return AppInstClientKeyStore{kvstore: kvstore}
}

func (s *AppInstClientKeyStore) Create(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Update(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Put(ctx context.Context, m *AppInstClientKey, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) Delete(ctx context.Context, m *AppInstClientKey, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AppInstClientKey", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppInstClientKeyStore) LoadOne(key string) (*AppInstClientKey, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AppInstClientKey
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AppInstClientKey data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppInstClientKeyStore) STMGet(stm concurrency.STM, key *AppInstKey, buf *AppInstClientKey) bool {
	keystr := objstore.DbKeyString("AppInstClientKey", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppInstClientKeyStore) STMPut(stm concurrency.STM, obj *AppInstClientKey, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AppInstClientKey", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AppInstClientKey json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AppInstClientKeyStore) STMDel(stm concurrency.STM, key *AppInstKey) {
	keystr := objstore.DbKeyString("AppInstClientKey", key)
	stm.Del(keystr)
}

type AppInstClientKeyKeyWatcher struct {
	cb func(ctx context.Context)
}

type AppInstClientKeyCacheData struct {
	Obj    *AppInstClientKey
	ModRev int64
}

// AppInstClientKeyCache caches AppInstClientKey objects in memory in a hash table
// and keeps them in sync with the database.
type AppInstClientKeyCache struct {
	Objs          map[AppInstKey]*AppInstClientKeyCacheData
	Mux           util.Mutex
	List          map[AppInstKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey)
	DeletedCbs    []func(ctx context.Context, old *AppInstClientKey)
	KeyWatchers   map[AppInstKey][]*AppInstClientKeyKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *AppInstKey)
	DeletedKeyCbs []func(ctx context.Context, key *AppInstKey)
}

func NewAppInstClientKeyCache() *AppInstClientKeyCache {
	cache := AppInstClientKeyCache{}
	InitAppInstClientKeyCache(&cache)
	return &cache
}

func InitAppInstClientKeyCache(cache *AppInstClientKeyCache) {
	cache.Objs = make(map[AppInstKey]*AppInstClientKeyCacheData)
	cache.KeyWatchers = make(map[AppInstKey][]*AppInstClientKeyKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AppInstClientKeyCache) GetTypeString() string {
	return "AppInstClientKey"
}

func (c *AppInstClientKeyCache) Get(key *AppInstKey, valbuf *AppInstClientKey) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AppInstClientKeyCache) GetWithRev(key *AppInstKey, valbuf *AppInstClientKey, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AppInstClientKeyCache) HasKey(key *AppInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppInstClientKeyCache) GetAllKeys(ctx context.Context, cb func(key *AppInstKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AppInstClientKeyCache) Update(ctx context.Context, in *AppInstClientKey, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *AppInstClientKey) (*AppInstClientKey, bool) {
		return in, true
	})
}

func (c *AppInstClientKeyCache) UpdateModFunc(ctx context.Context, key *AppInstKey, modRev int64, modFunc func(old *AppInstClientKey) (new *AppInstClientKey, changed bool)) {
	c.Mux.Lock()
	var old *AppInstClientKey
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &AppInstClientKey{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &AppInstClientKey{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AppInstClientKeyCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AppInstClientKeyCache) Delete(ctx context.Context, in *AppInstClientKey, modRev int64) {
	c.Mux.Lock()
	var old *AppInstClientKey
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AppInstClientKeyCache) Prune(ctx context.Context, validKeys map[AppInstKey]struct{}) {
	notify := make(map[AppInstKey]*AppInstClientKeyCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppInstClientKeyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppInstClientKeyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AppInstClientKeyCache) Show(filter *AppInstClientKey, cb func(ret *AppInstClientKey) error) error {
	log.DebugLog(log.DebugLevelApi, "Show AppInstClientKey", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare AppInstClientKey", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show AppInstClientKey", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AppInstClientKeyGenericNotifyCb(fn func(key *AppInstKey, old *AppInstClientKey)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AppInstKey), obj.(*AppInstClientKey))
	}
}

func (c *AppInstClientKeyCache) SetNotifyCb(fn func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey, modRev int64){fn}
}

func (c *AppInstClientKeyCache) SetUpdatedCb(fn func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey)) {
	c.UpdatedCbs = []func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey){fn}
}

func (c *AppInstClientKeyCache) SetDeletedCb(fn func(ctx context.Context, old *AppInstClientKey)) {
	c.DeletedCbs = []func(ctx context.Context, old *AppInstClientKey){fn}
}

func (c *AppInstClientKeyCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *AppInstKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *AppInstKey){fn}
}

func (c *AppInstClientKeyCache) SetDeletedKeyCb(fn func(ctx context.Context, key *AppInstKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *AppInstKey){fn}
}

func (c *AppInstClientKeyCache) AddUpdatedCb(fn func(ctx context.Context, old *AppInstClientKey, new *AppInstClientKey)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AppInstClientKeyCache) AddDeletedCb(fn func(ctx context.Context, old *AppInstClientKey)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AppInstClientKeyCache) AddNotifyCb(fn func(ctx context.Context, obj *AppInstKey, old *AppInstClientKey, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AppInstClientKeyCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *AppInstKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AppInstClientKeyCache) AddDeletedKeyCb(fn func(ctx context.Context, key *AppInstKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AppInstClientKeyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AppInstClientKeyCache) WatchKey(key *AppInstKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AppInstClientKeyKeyWatcher, 0)
	}
	watcher := AppInstClientKeyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AppInstClientKey", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AppInstClientKeyCache) TriggerKeyWatchers(ctx context.Context, key *AppInstKey) {
	watchers := make([]*AppInstClientKeyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AppInstClientKeyCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := AppInstClientKey{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AppInstClientKey data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppInstClientKeyCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := AppInstClientKey{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppInstKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AppInstClientKeyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AppInstKey]struct{})
}

func (c *AppInstClientKeyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AppInstKey]*AppInstClientKeyCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppInstClientKeyCache) UsesOrg(org string) bool {
	return false
}

func (m *AppInstClientKey) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AppInstClientKey) GetKey() *AppInstKey {
	return &m.Key
}

func (m *AppInstClientKey) GetKeyVal() AppInstKey {
	return m.Key
}

func (m *AppInstClientKey) SetKey(key *AppInstKey) {
	m.Key = *key
}

func CmpSortAppInstClientKey(a AppInstClientKey, b AppInstClientKey) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *AppInstClientKey) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

const AppInstClientFieldClientKey = "2"
const AppInstClientFieldClientKeyKey = "2.1"
const AppInstClientFieldClientKeyKeyAppKey = "2.1.1"
const AppInstClientFieldClientKeyKeyAppKeyOrganization = "2.1.1.1"
const AppInstClientFieldClientKeyKeyAppKeyName = "2.1.1.2"
const AppInstClientFieldClientKeyKeyAppKeyVersion = "2.1.1.3"
const AppInstClientFieldClientKeyKeyClusterInstKey = "2.1.4"
const AppInstClientFieldClientKeyKeyClusterInstKeyClusterKey = "2.1.4.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName = "2.1.4.1.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey = "2.1.4.2"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOrganization = "2.1.4.2.1"
const AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName = "2.1.4.2.2"
const AppInstClientFieldClientKeyKeyClusterInstKeyOrganization = "2.1.4.3"
const AppInstClientFieldClientKeyUniqueId = "2.2"
const AppInstClientFieldClientKeyUniqueIdType = "2.3"
const AppInstClientFieldLocation = "3"
const AppInstClientFieldLocationLatitude = "3.1"
const AppInstClientFieldLocationLongitude = "3.2"
const AppInstClientFieldLocationHorizontalAccuracy = "3.3"
const AppInstClientFieldLocationVerticalAccuracy = "3.4"
const AppInstClientFieldLocationAltitude = "3.5"
const AppInstClientFieldLocationCourse = "3.6"
const AppInstClientFieldLocationSpeed = "3.7"
const AppInstClientFieldLocationTimestamp = "3.8"
const AppInstClientFieldLocationTimestampSeconds = "3.8.1"
const AppInstClientFieldLocationTimestampNanos = "3.8.2"
const AppInstClientFieldNotifyId = "4"

var AppInstClientAllFields = []string{
	AppInstClientFieldClientKeyKeyAppKeyOrganization,
	AppInstClientFieldClientKeyKeyAppKeyName,
	AppInstClientFieldClientKeyKeyAppKeyVersion,
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName,
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOrganization,
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName,
	AppInstClientFieldClientKeyKeyClusterInstKeyOrganization,
	AppInstClientFieldClientKeyUniqueId,
	AppInstClientFieldClientKeyUniqueIdType,
	AppInstClientFieldLocationLatitude,
	AppInstClientFieldLocationLongitude,
	AppInstClientFieldLocationHorizontalAccuracy,
	AppInstClientFieldLocationVerticalAccuracy,
	AppInstClientFieldLocationAltitude,
	AppInstClientFieldLocationCourse,
	AppInstClientFieldLocationSpeed,
	AppInstClientFieldLocationTimestampSeconds,
	AppInstClientFieldLocationTimestampNanos,
	AppInstClientFieldNotifyId,
}

var AppInstClientAllFieldsMap = map[string]struct{}{
	AppInstClientFieldClientKeyKeyAppKeyOrganization:                    struct{}{},
	AppInstClientFieldClientKeyKeyAppKeyName:                            struct{}{},
	AppInstClientFieldClientKeyKeyAppKeyVersion:                         struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName:          struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOrganization: struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName:         struct{}{},
	AppInstClientFieldClientKeyKeyClusterInstKeyOrganization:            struct{}{},
	AppInstClientFieldClientKeyUniqueId:                                 struct{}{},
	AppInstClientFieldClientKeyUniqueIdType:                             struct{}{},
	AppInstClientFieldLocationLatitude:                                  struct{}{},
	AppInstClientFieldLocationLongitude:                                 struct{}{},
	AppInstClientFieldLocationHorizontalAccuracy:                        struct{}{},
	AppInstClientFieldLocationVerticalAccuracy:                          struct{}{},
	AppInstClientFieldLocationAltitude:                                  struct{}{},
	AppInstClientFieldLocationCourse:                                    struct{}{},
	AppInstClientFieldLocationSpeed:                                     struct{}{},
	AppInstClientFieldLocationTimestampSeconds:                          struct{}{},
	AppInstClientFieldLocationTimestampNanos:                            struct{}{},
	AppInstClientFieldNotifyId:                                          struct{}{},
}

var AppInstClientAllFieldsStringMap = map[string]string{
	AppInstClientFieldClientKeyKeyAppKeyOrganization:                    "Client Key Key App Key Organization",
	AppInstClientFieldClientKeyKeyAppKeyName:                            "Client Key Key App Key Name",
	AppInstClientFieldClientKeyKeyAppKeyVersion:                         "Client Key Key App Key Version",
	AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName:          "Client Key Key Cluster Inst Key Cluster Key Name",
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOrganization: "Client Key Key Cluster Inst Key Cloudlet Key Organization",
	AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName:         "Client Key Key Cluster Inst Key Cloudlet Key Name",
	AppInstClientFieldClientKeyKeyClusterInstKeyOrganization:            "Client Key Key Cluster Inst Key Organization",
	AppInstClientFieldClientKeyUniqueId:                                 "Client Key Unique Id",
	AppInstClientFieldClientKeyUniqueIdType:                             "Client Key Unique Id Type",
	AppInstClientFieldLocationLatitude:                                  "Location Latitude",
	AppInstClientFieldLocationLongitude:                                 "Location Longitude",
	AppInstClientFieldLocationHorizontalAccuracy:                        "Location Horizontal Accuracy",
	AppInstClientFieldLocationVerticalAccuracy:                          "Location Vertical Accuracy",
	AppInstClientFieldLocationAltitude:                                  "Location Altitude",
	AppInstClientFieldLocationCourse:                                    "Location Course",
	AppInstClientFieldLocationSpeed:                                     "Location Speed",
	AppInstClientFieldLocationTimestampSeconds:                          "Location Timestamp Seconds",
	AppInstClientFieldLocationTimestampNanos:                            "Location Timestamp Nanos",
	AppInstClientFieldNotifyId:                                          "Notify Id",
}

func (m *AppInstClient) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AppInstClientFieldClientKey+".") || s == AppInstClientFieldClientKey
}

func (m *AppInstClient) DiffFields(o *AppInstClient, fields map[string]struct{}) {
	if m.ClientKey.Key.AppKey.Organization != o.ClientKey.Key.AppKey.Organization {
		fields[AppInstClientFieldClientKeyKeyAppKeyOrganization] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.AppKey.Name != o.ClientKey.Key.AppKey.Name {
		fields[AppInstClientFieldClientKeyKeyAppKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.AppKey.Version != o.ClientKey.Key.AppKey.Version {
		fields[AppInstClientFieldClientKeyKeyAppKeyVersion] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyAppKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.ClusterKey.Name != o.ClientKey.Key.ClusterInstKey.ClusterKey.Name {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyClusterKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyClusterKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.CloudletKey.Organization != o.ClientKey.Key.ClusterInstKey.CloudletKey.Organization {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyOrganization] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.CloudletKey.Name != o.ClientKey.Key.ClusterInstKey.CloudletKey.Name {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKeyName] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyCloudletKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.Key.ClusterInstKey.Organization != o.ClientKey.Key.ClusterInstKey.Organization {
		fields[AppInstClientFieldClientKeyKeyClusterInstKeyOrganization] = struct{}{}
		fields[AppInstClientFieldClientKeyKeyClusterInstKey] = struct{}{}
		fields[AppInstClientFieldClientKeyKey] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.UniqueId != o.ClientKey.UniqueId {
		fields[AppInstClientFieldClientKeyUniqueId] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.ClientKey.UniqueIdType != o.ClientKey.UniqueIdType {
		fields[AppInstClientFieldClientKeyUniqueIdType] = struct{}{}
		fields[AppInstClientFieldClientKey] = struct{}{}
	}
	if m.Location.Latitude != o.Location.Latitude {
		fields[AppInstClientFieldLocationLatitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Longitude != o.Location.Longitude {
		fields[AppInstClientFieldLocationLongitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.HorizontalAccuracy != o.Location.HorizontalAccuracy {
		fields[AppInstClientFieldLocationHorizontalAccuracy] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.VerticalAccuracy != o.Location.VerticalAccuracy {
		fields[AppInstClientFieldLocationVerticalAccuracy] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Altitude != o.Location.Altitude {
		fields[AppInstClientFieldLocationAltitude] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Course != o.Location.Course {
		fields[AppInstClientFieldLocationCourse] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Speed != o.Location.Speed {
		fields[AppInstClientFieldLocationSpeed] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.Location.Timestamp != nil && o.Location.Timestamp != nil {
		if m.Location.Timestamp.Seconds != o.Location.Timestamp.Seconds {
			fields[AppInstClientFieldLocationTimestampSeconds] = struct{}{}
			fields[AppInstClientFieldLocationTimestamp] = struct{}{}
			fields[AppInstClientFieldLocation] = struct{}{}
		}
		if m.Location.Timestamp.Nanos != o.Location.Timestamp.Nanos {
			fields[AppInstClientFieldLocationTimestampNanos] = struct{}{}
			fields[AppInstClientFieldLocationTimestamp] = struct{}{}
			fields[AppInstClientFieldLocation] = struct{}{}
		}
	} else if (m.Location.Timestamp != nil && o.Location.Timestamp == nil) || (m.Location.Timestamp == nil && o.Location.Timestamp != nil) {
		fields[AppInstClientFieldLocationTimestamp] = struct{}{}
		fields[AppInstClientFieldLocation] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[AppInstClientFieldNotifyId] = struct{}{}
	}
}

func (m *AppInstClient) CopyInFields(src *AppInstClient) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				if _, set := fmap["2.1.1.1"]; set {
					if m.ClientKey.Key.AppKey.Organization != src.ClientKey.Key.AppKey.Organization {
						m.ClientKey.Key.AppKey.Organization = src.ClientKey.Key.AppKey.Organization
						changed++
					}
				}
				if _, set := fmap["2.1.1.2"]; set {
					if m.ClientKey.Key.AppKey.Name != src.ClientKey.Key.AppKey.Name {
						m.ClientKey.Key.AppKey.Name = src.ClientKey.Key.AppKey.Name
						changed++
					}
				}
				if _, set := fmap["2.1.1.3"]; set {
					if m.ClientKey.Key.AppKey.Version != src.ClientKey.Key.AppKey.Version {
						m.ClientKey.Key.AppKey.Version = src.ClientKey.Key.AppKey.Version
						changed++
					}
				}
			}
			if _, set := fmap["2.1.4"]; set {
				if _, set := fmap["2.1.4.1"]; set {
					if _, set := fmap["2.1.4.1.1"]; set {
						if m.ClientKey.Key.ClusterInstKey.ClusterKey.Name != src.ClientKey.Key.ClusterInstKey.ClusterKey.Name {
							m.ClientKey.Key.ClusterInstKey.ClusterKey.Name = src.ClientKey.Key.ClusterInstKey.ClusterKey.Name
							changed++
						}
					}
				}
				if _, set := fmap["2.1.4.2"]; set {
					if _, set := fmap["2.1.4.2.1"]; set {
						if m.ClientKey.Key.ClusterInstKey.CloudletKey.Organization != src.ClientKey.Key.ClusterInstKey.CloudletKey.Organization {
							m.ClientKey.Key.ClusterInstKey.CloudletKey.Organization = src.ClientKey.Key.ClusterInstKey.CloudletKey.Organization
							changed++
						}
					}
					if _, set := fmap["2.1.4.2.2"]; set {
						if m.ClientKey.Key.ClusterInstKey.CloudletKey.Name != src.ClientKey.Key.ClusterInstKey.CloudletKey.Name {
							m.ClientKey.Key.ClusterInstKey.CloudletKey.Name = src.ClientKey.Key.ClusterInstKey.CloudletKey.Name
							changed++
						}
					}
				}
				if _, set := fmap["2.1.4.3"]; set {
					if m.ClientKey.Key.ClusterInstKey.Organization != src.ClientKey.Key.ClusterInstKey.Organization {
						m.ClientKey.Key.ClusterInstKey.Organization = src.ClientKey.Key.ClusterInstKey.Organization
						changed++
					}
				}
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.ClientKey.UniqueId != src.ClientKey.UniqueId {
				m.ClientKey.UniqueId = src.ClientKey.UniqueId
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if m.ClientKey.UniqueIdType != src.ClientKey.UniqueIdType {
				m.ClientKey.UniqueIdType = src.ClientKey.UniqueIdType
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			if m.Location.Latitude != src.Location.Latitude {
				m.Location.Latitude = src.Location.Latitude
				changed++
			}
		}
		if _, set := fmap["3.2"]; set {
			if m.Location.Longitude != src.Location.Longitude {
				m.Location.Longitude = src.Location.Longitude
				changed++
			}
		}
		if _, set := fmap["3.3"]; set {
			if m.Location.HorizontalAccuracy != src.Location.HorizontalAccuracy {
				m.Location.HorizontalAccuracy = src.Location.HorizontalAccuracy
				changed++
			}
		}
		if _, set := fmap["3.4"]; set {
			if m.Location.VerticalAccuracy != src.Location.VerticalAccuracy {
				m.Location.VerticalAccuracy = src.Location.VerticalAccuracy
				changed++
			}
		}
		if _, set := fmap["3.5"]; set {
			if m.Location.Altitude != src.Location.Altitude {
				m.Location.Altitude = src.Location.Altitude
				changed++
			}
		}
		if _, set := fmap["3.6"]; set {
			if m.Location.Course != src.Location.Course {
				m.Location.Course = src.Location.Course
				changed++
			}
		}
		if _, set := fmap["3.7"]; set {
			if m.Location.Speed != src.Location.Speed {
				m.Location.Speed = src.Location.Speed
				changed++
			}
		}
		if _, set := fmap["3.8"]; set {
			if src.Location.Timestamp != nil {
				m.Location.Timestamp = &distributed_match_engine.Timestamp{}
				if _, set := fmap["3.8.1"]; set {
					if m.Location.Timestamp.Seconds != src.Location.Timestamp.Seconds {
						m.Location.Timestamp.Seconds = src.Location.Timestamp.Seconds
						changed++
					}
				}
				if _, set := fmap["3.8.2"]; set {
					if m.Location.Timestamp.Nanos != src.Location.Timestamp.Nanos {
						m.Location.Timestamp.Nanos = src.Location.Timestamp.Nanos
						changed++
					}
				}
			} else if m.Location.Timestamp != nil {
				m.Location.Timestamp = nil
				changed++
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	return changed
}

func (m *AppInstClient) DeepCopyIn(src *AppInstClient) {
	m.ClientKey.DeepCopyIn(&src.ClientKey)
	m.Location = src.Location
	m.NotifyId = src.NotifyId
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AppInstClient) ValidateEnums() error {
	if err := m.ClientKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreAppInstClientFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	return cmpopts.IgnoreFields(AppInstClient{}, names...)
}

func (m *AppInstClientKey) IsValidArgsForShowAppInstClient() error {
	return nil
}

func (m *AppInstClientKey) IsValidArgsForStreamAppInstClientsLocal() error {
	return nil
}

func (m *AppInstClientKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovAppinstclient(uint64(l))
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovAppinstclient(uint64(l))
	}
	l = len(m.UniqueIdType)
	if l > 0 {
		n += 1 + l + sovAppinstclient(uint64(l))
	}
	return n
}

func (m *AppInstClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAppinstclient(uint64(l))
		}
	}
	l = m.ClientKey.Size()
	n += 1 + l + sovAppinstclient(uint64(l))
	l = m.Location.Size()
	n += 1 + l + sovAppinstclient(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovAppinstclient(uint64(m.NotifyId))
	}
	return n
}

func sovAppinstclient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppinstclient(x uint64) (n int) {
	return sovAppinstclient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppInstClientKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppinstclient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstClientKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstClientKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueIdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppinstclient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppInstClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppinstclient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppinstclient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppinstclient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAppinstclient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppinstclient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppinstclient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppinstclient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppinstclient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppinstclient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppinstclient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppinstclient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppinstclient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppinstclient = fmt.Errorf("proto: unexpected end of group")
)
