// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	dme_proto "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageType int32

const (
	// Unknown image type
	ImageType_IMAGE_TYPE_UNKNOWN ImageType = 0
	// Docker container image type compatible either with Docker or Kubernetes
	ImageType_IMAGE_TYPE_DOCKER ImageType = 1
	// QCOW2 virtual machine image type
	ImageType_IMAGE_TYPE_QCOW ImageType = 2
	// Helm chart is a separate image type
	ImageType_IMAGE_TYPE_HELM ImageType = 3
	// OVF is for VMWare VCloud Director. A VMDK and optional MF file should also be present
	ImageType_IMAGE_TYPE_OVF ImageType = 4
)

var ImageType_name = map[int32]string{
	0: "IMAGE_TYPE_UNKNOWN",
	1: "IMAGE_TYPE_DOCKER",
	2: "IMAGE_TYPE_QCOW",
	3: "IMAGE_TYPE_HELM",
	4: "IMAGE_TYPE_OVF",
}

var ImageType_value = map[string]int32{
	"IMAGE_TYPE_UNKNOWN": 0,
	"IMAGE_TYPE_DOCKER":  1,
	"IMAGE_TYPE_QCOW":    2,
	"IMAGE_TYPE_HELM":    3,
	"IMAGE_TYPE_OVF":     4,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}

func (ImageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{0}
}

// For DT QOS sessions prority POC
type QosNetworkPriorityType int32

const (
	QosNetworkPriorityType_DEFAULT    QosNetworkPriorityType = 0
	QosNetworkPriorityType_LATENCY    QosNetworkPriorityType = 1
	QosNetworkPriorityType_THROUGHPUT QosNetworkPriorityType = 2
)

var QosNetworkPriorityType_name = map[int32]string{
	0: "DEFAULT",
	1: "LATENCY",
	2: "THROUGHPUT",
}

var QosNetworkPriorityType_value = map[string]int32{
	"DEFAULT":    0,
	"LATENCY":    1,
	"THROUGHPUT": 2,
}

func (x QosNetworkPriorityType) String() string {
	return proto.EnumName(QosNetworkPriorityType_name, int32(x))
}

func (QosNetworkPriorityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{1}
}

type QosLatencyProfile int32

const (
	// Best effort
	QosLatencyProfile_LATENCY_DEFAULT QosLatencyProfile = 0
	// Corresponds to a specific set of network parameters for low latency that will be
	// negotiated with the network provider in advance
	QosLatencyProfile_LATENCY_LOW QosLatencyProfile = 1
)

var QosLatencyProfile_name = map[int32]string{
	0: "LATENCY_DEFAULT",
	1: "LATENCY_LOW",
}

var QosLatencyProfile_value = map[string]int32{
	"LATENCY_DEFAULT": 0,
	"LATENCY_LOW":     1,
}

func (x QosLatencyProfile) String() string {
	return proto.EnumName(QosLatencyProfile_name, int32(x))
}

func (QosLatencyProfile) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{2}
}

// These profile names are from DT and the selected value will be included
// as the "qos" value in the qos-senf/v1/sessions POST.
type QosThroughputProfile int32

const (
	// Best effort
	QosThroughputProfile_THROUGHPUT_DEFAULT QosThroughputProfile = 0
	// Downlink up to 20Mbps
	QosThroughputProfile_THROUGHPUT_S QosThroughputProfile = 1
	// Downlink up to 50Mbps
	QosThroughputProfile_THROUGHPUT_M QosThroughputProfile = 2
	// Downlink up to 100Mbps
	QosThroughputProfile_THROUGHPUT_L QosThroughputProfile = 3
)

var QosThroughputProfile_name = map[int32]string{
	0: "THROUGHPUT_DEFAULT",
	1: "THROUGHPUT_S",
	2: "THROUGHPUT_M",
	3: "THROUGHPUT_L",
}

var QosThroughputProfile_value = map[string]int32{
	"THROUGHPUT_DEFAULT": 0,
	"THROUGHPUT_S":       1,
	"THROUGHPUT_M":       2,
	"THROUGHPUT_L":       3,
}

func (x QosThroughputProfile) String() string {
	return proto.EnumName(QosThroughputProfile_name, int32(x))
}

func (QosThroughputProfile) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{3}
}

type VmAppOsType int32

const (
	// Unknown OS type
	VmAppOsType_VM_APP_OS_UNKNOWN VmAppOsType = 0
	// All Linux 64 bit varieties
	VmAppOsType_VM_APP_OS_LINUX VmAppOsType = 1
	// Windows 10
	VmAppOsType_VM_APP_OS_WINDOWS_10 VmAppOsType = 2
	// Windows 2012 Server
	VmAppOsType_VM_APP_OS_WINDOWS_2012 VmAppOsType = 3
	// Windows 2016 Server
	VmAppOsType_VM_APP_OS_WINDOWS_2016 VmAppOsType = 4
	// Windows 2019 Server
	VmAppOsType_VM_APP_OS_WINDOWS_2019 VmAppOsType = 5
)

var VmAppOsType_name = map[int32]string{
	0: "VM_APP_OS_UNKNOWN",
	1: "VM_APP_OS_LINUX",
	2: "VM_APP_OS_WINDOWS_10",
	3: "VM_APP_OS_WINDOWS_2012",
	4: "VM_APP_OS_WINDOWS_2016",
	5: "VM_APP_OS_WINDOWS_2019",
}

var VmAppOsType_value = map[string]int32{
	"VM_APP_OS_UNKNOWN":      0,
	"VM_APP_OS_LINUX":        1,
	"VM_APP_OS_WINDOWS_10":   2,
	"VM_APP_OS_WINDOWS_2012": 3,
	"VM_APP_OS_WINDOWS_2016": 4,
	"VM_APP_OS_WINDOWS_2019": 5,
}

func (x VmAppOsType) String() string {
	return proto.EnumName(VmAppOsType_name, int32(x))
}

func (VmAppOsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{4}
}

// DeleteType
//
// DeleteType specifies if AppInst can be auto deleted or not
//
// 0: `NO_AUTO_DELETE`
// 1: `AUTO_DELETE`
type DeleteType int32

const (
	// No autodelete
	DeleteType_NO_AUTO_DELETE DeleteType = 0
	// Autodelete
	DeleteType_AUTO_DELETE DeleteType = 1
)

var DeleteType_name = map[int32]string{
	0: "NO_AUTO_DELETE",
	1: "AUTO_DELETE",
}

var DeleteType_value = map[string]int32{
	"NO_AUTO_DELETE": 0,
	"AUTO_DELETE":    1,
}

func (x DeleteType) String() string {
	return proto.EnumName(DeleteType_name, int32(x))
}

func (DeleteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{5}
}

// (Deprecated) AccessType
//
// AccessType indicates how to access the app
//
// 0: `ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT`
// 1: `ACCESS_TYPE_DIRECT`
// 2: `ACCESS_TYPE_LOAD_BALANCER`
type AccessType int32

const (
	// Default load balancer or direct based on deployment
	AccessType_ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT AccessType = 0
	// Direct access with no load balancer
	AccessType_ACCESS_TYPE_DIRECT AccessType = 1
	// Access via a load balancer
	AccessType_ACCESS_TYPE_LOAD_BALANCER AccessType = 2
)

var AccessType_name = map[int32]string{
	0: "ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT",
	1: "ACCESS_TYPE_DIRECT",
	2: "ACCESS_TYPE_LOAD_BALANCER",
}

var AccessType_value = map[string]int32{
	"ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT": 0,
	"ACCESS_TYPE_DIRECT":                 1,
	"ACCESS_TYPE_LOAD_BALANCER":          2,
}

func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}

func (AccessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{6}
}

// Application unique key
//
// AppKey uniquely identifies an App
type AppKey struct {
	// App developer organization
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// App name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// App version
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()         { *m = AppKey{} }
func (m *AppKey) String() string { return proto.CompactTextString(m) }
func (*AppKey) ProtoMessage()    {}
func (*AppKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{0}
}
func (m *AppKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppKey.Merge(m, src)
}
func (m *AppKey) XXX_Size() int {
	return m.Size()
}
func (m *AppKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AppKey.DiscardUnknown(m)
}

var xxx_messageInfo_AppKey proto.InternalMessageInfo

// ConfigFile
type ConfigFile struct {
	// Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Config file contents or URI reference
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigFile) Reset()         { *m = ConfigFile{} }
func (m *ConfigFile) String() string { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()    {}
func (*ConfigFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{1}
}
func (m *ConfigFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigFile.Merge(m, src)
}
func (m *ConfigFile) XXX_Size() int {
	return m.Size()
}
func (m *ConfigFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigFile.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigFile proto.InternalMessageInfo

// Application
//
// App belongs to developer organizations and is used to provide information about their application.
type App struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key AppKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// URI of where image resides
	ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// Image type (see ImageType)
	ImageType ImageType `protobuf:"varint,5,opt,name=image_type,json=imageType,proto3,enum=edgeproto.ImageType" json:"image_type,omitempty"`
	// Comma separated list of protocol:port pairs that the App listens on.
	// Ex: "tcp:80,udp:10002".
	// Also supports additional configurations per port:
	// (1) tls (tcp-only) - Enables TLS on specified port. Ex: "tcp:443:tls".
	// (2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: "udp:10001:nginx".
	// (3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: "udp:10001:maxpktsize=8000".
	AccessPorts string `protobuf:"bytes,7,opt,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	// Default flavor for the App, which may be overridden by the AppInst
	DefaultFlavor FlavorKey `protobuf:"bytes,9,opt,name=default_flavor,json=defaultFlavor,proto3" json:"default_flavor"`
	// Public key used for authentication
	AuthPublicKey string `protobuf:"bytes,12,opt,name=auth_public_key,json=authPublicKey,proto3" json:"auth_public_key,omitempty"`
	// Command that the container runs to start service
	Command string `protobuf:"bytes,13,opt,name=command,proto3" json:"command,omitempty"`
	// Annotations is a comma separated map of arbitrary key value pairs,
	// for example: key1=val1,key2=val2,key3="val 3"
	Annotations string `protobuf:"bytes,14,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Deployment type (kubernetes, docker, or vm)
	Deployment string `protobuf:"bytes,15,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Deployment manifest is the deployment specific manifest file/config.
	// For docker deployment, this can be a docker-compose or docker run file.
	// For kubernetes deployment, this can be a kubernetes yaml or helm chart file.
	DeploymentManifest string `protobuf:"bytes,16,opt,name=deployment_manifest,json=deploymentManifest,proto3" json:"deployment_manifest,omitempty"`
	// Deployment generator target to generate a basic deployment manifest
	DeploymentGenerator string `protobuf:"bytes,17,opt,name=deployment_generator,json=deploymentGenerator,proto3" json:"deployment_generator,omitempty"`
	// Android package name used to match the App name from the Android package
	AndroidPackageName string `protobuf:"bytes,18,opt,name=android_package_name,json=androidPackageName,proto3" json:"android_package_name,omitempty"`
	// Override actions to Controller
	DelOpt DeleteType `protobuf:"varint,20,opt,name=del_opt,json=delOpt,proto3,enum=edgeproto.DeleteType" json:"del_opt,omitempty"`
	// Customization files passed through to implementing services
	Configs []*ConfigFile `protobuf:"bytes,21,rep,name=configs,proto3" json:"configs,omitempty"`
	// Option to run App on all nodes of the cluster
	ScaleWithCluster bool `protobuf:"varint,22,opt,name=scale_with_cluster,json=scaleWithCluster,proto3" json:"scale_with_cluster,omitempty"`
	// Should this app have access to outside world?
	InternalPorts bool `protobuf:"varint,23,opt,name=internal_ports,json=internalPorts,proto3" json:"internal_ports,omitempty"`
	// Revision can be specified or defaults to current timestamp when app is updated
	Revision string `protobuf:"bytes,24,opt,name=revision,proto3" json:"revision,omitempty"`
	// Official FQDN is the FQDN that the app uses to connect by default
	OfficialFqdn string `protobuf:"bytes,25,opt,name=official_fqdn,json=officialFqdn,proto3" json:"official_fqdn,omitempty"`
	// MD5Sum of the VM-based app image
	Md5Sum string `protobuf:"bytes,26,opt,name=md5sum,proto3" json:"md5sum,omitempty"`
	// (_deprecated_) Auto provisioning policy name
	AutoProvPolicy string `protobuf:"bytes,28,opt,name=auto_prov_policy,json=autoProvPolicy,proto3" json:"auto_prov_policy,omitempty"`
	// (Deprecated) Access type
	AccessType AccessType `protobuf:"varint,29,opt,name=access_type,json=accessType,proto3,enum=edgeproto.AccessType" json:"access_type,omitempty"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,31,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
	// Auto provisioning policy names, may be specified multiple times
	AutoProvPolicies []string `protobuf:"bytes,32,rep,name=auto_prov_policies,json=autoProvPolicies,proto3" json:"auto_prov_policies,omitempty"`
	// Delimiter to be used for template parsing, defaults to "[[ ]]"
	TemplateDelimiter string `protobuf:"bytes,33,opt,name=template_delimiter,json=templateDelimiter,proto3" json:"template_delimiter,omitempty"`
	// Comma separated list of protocol:port pairs that we should not run health check on.
	// Should be configured in case app does not always listen on these ports.
	// "all" can be specified if no health check to be run for this app.
	// Numerical values must be decimal format.
	// i.e. tcp:80,udp:10002
	SkipHcPorts string `protobuf:"bytes,34,opt,name=skip_hc_ports,json=skipHcPorts,proto3" json:"skip_hc_ports,omitempty"`
	// Created at time
	CreatedAt dme_proto.Timestamp `protobuf:"bytes,35,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// Updated at time
	UpdatedAt dme_proto.Timestamp `protobuf:"bytes,36,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// Indicates that an instance of this app can be started on a trusted cloudlet
	Trusted bool `protobuf:"varint,37,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// Connections this app require to determine if the app is compatible with a trust policy
	RequiredOutboundConnections []SecurityRule `protobuf:"bytes,38,rep,name=required_outbound_connections,json=requiredOutboundConnections,proto3" json:"required_outbound_connections"`
	// App is allowed to deploy as serverless containers
	AllowServerless bool `protobuf:"varint,39,opt,name=allow_serverless,json=allowServerless,proto3" json:"allow_serverless,omitempty"`
	// Configuration when deployed as serverless containers
	ServerlessConfig *ServerlessConfig `protobuf:"bytes,40,opt,name=serverless_config,json=serverlessConfig,proto3" json:"serverless_config,omitempty"`
	// OS Type for VM Apps
	VmAppOsType VmAppOsType `protobuf:"varint,41,opt,name=vm_app_os_type,json=vmAppOsType,proto3,enum=edgeproto.VmAppOsType" json:"vm_app_os_type,omitempty"`
	// Alert Policies
	AlertPolicies []string `protobuf:"bytes,42,rep,name=alert_policies,json=alertPolicies,proto3" json:"alert_policies,omitempty"`
	// For DT QOS Priority Sessions API
	QosNetworkPriorityType QosNetworkPriorityType `protobuf:"varint,43,opt,name=qos_network_priority_type,json=qosNetworkPriorityType,proto3,enum=edgeproto.QosNetworkPriorityType" json:"qos_network_priority_type,omitempty"`
	QosLatencyProfile      QosLatencyProfile      `protobuf:"varint,44,opt,name=qos_latency_profile,json=qosLatencyProfile,proto3,enum=edgeproto.QosLatencyProfile" json:"qos_latency_profile,omitempty"`
	QosThroughputProfile   QosThroughputProfile   `protobuf:"varint,45,opt,name=qos_throughput_profile,json=qosThroughputProfile,proto3,enum=edgeproto.QosThroughputProfile" json:"qos_throughput_profile,omitempty"`
}

func (m *App) Reset()         { *m = App{} }
func (m *App) String() string { return proto.CompactTextString(m) }
func (*App) ProtoMessage()    {}
func (*App) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{2}
}
func (m *App) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *App) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_App.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *App) XXX_Merge(src proto.Message) {
	xxx_messageInfo_App.Merge(m, src)
}
func (m *App) XXX_Size() int {
	return m.Size()
}
func (m *App) XXX_DiscardUnknown() {
	xxx_messageInfo_App.DiscardUnknown(m)
}

var xxx_messageInfo_App proto.InternalMessageInfo

type ServerlessConfig struct {
	// Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001
	Vcpus Udec64 `protobuf:"bytes,1,opt,name=vcpus,proto3" json:"vcpus"`
	// RAM allocation in megabytes per container when serverless
	Ram uint64 `protobuf:"varint,2,opt,name=ram,proto3" json:"ram,omitempty"`
	// Minimum number of replicas when serverless
	MinReplicas uint32 `protobuf:"varint,3,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
}

func (m *ServerlessConfig) Reset()         { *m = ServerlessConfig{} }
func (m *ServerlessConfig) String() string { return proto.CompactTextString(m) }
func (*ServerlessConfig) ProtoMessage()    {}
func (*ServerlessConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{3}
}
func (m *ServerlessConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerlessConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerlessConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerlessConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerlessConfig.Merge(m, src)
}
func (m *ServerlessConfig) XXX_Size() int {
	return m.Size()
}
func (m *ServerlessConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerlessConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServerlessConfig proto.InternalMessageInfo

type AppAutoProvPolicy struct {
	// App key
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key"`
	// Auto provisioning policy name
	AutoProvPolicy string `protobuf:"bytes,2,opt,name=auto_prov_policy,json=autoProvPolicy,proto3" json:"auto_prov_policy,omitempty"`
}

func (m *AppAutoProvPolicy) Reset()         { *m = AppAutoProvPolicy{} }
func (m *AppAutoProvPolicy) String() string { return proto.CompactTextString(m) }
func (*AppAutoProvPolicy) ProtoMessage()    {}
func (*AppAutoProvPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{4}
}
func (m *AppAutoProvPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppAutoProvPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppAutoProvPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppAutoProvPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppAutoProvPolicy.Merge(m, src)
}
func (m *AppAutoProvPolicy) XXX_Size() int {
	return m.Size()
}
func (m *AppAutoProvPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AppAutoProvPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AppAutoProvPolicy proto.InternalMessageInfo

type AppAlertPolicy struct {
	// App key
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key"`
	// Alert name
	AlertPolicy string `protobuf:"bytes,2,opt,name=alert_policy,json=alertPolicy,proto3" json:"alert_policy,omitempty"`
}

func (m *AppAlertPolicy) Reset()         { *m = AppAlertPolicy{} }
func (m *AppAlertPolicy) String() string { return proto.CompactTextString(m) }
func (*AppAlertPolicy) ProtoMessage()    {}
func (*AppAlertPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{5}
}
func (m *AppAlertPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppAlertPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppAlertPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppAlertPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppAlertPolicy.Merge(m, src)
}
func (m *AppAlertPolicy) XXX_Size() int {
	return m.Size()
}
func (m *AppAlertPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AppAlertPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AppAlertPolicy proto.InternalMessageInfo

type DeploymentCloudletRequest struct {
	// Discover potential App Cloudlets
	App *App `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// Attempt to qualify cloudlet resources for deployment
	DryRunDeploy bool `protobuf:"varint,2,opt,name=dry_run_deploy,json=dryRunDeploy,proto3" json:"dry_run_deploy,omitempty"`
	// Optional number of worker VMs in dry run K8s Cluster, default = 2
	NumNodes uint32 `protobuf:"varint,3,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
}

func (m *DeploymentCloudletRequest) Reset()         { *m = DeploymentCloudletRequest{} }
func (m *DeploymentCloudletRequest) String() string { return proto.CompactTextString(m) }
func (*DeploymentCloudletRequest) ProtoMessage()    {}
func (*DeploymentCloudletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{6}
}
func (m *DeploymentCloudletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentCloudletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentCloudletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentCloudletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentCloudletRequest.Merge(m, src)
}
func (m *DeploymentCloudletRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentCloudletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentCloudletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentCloudletRequest proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("edgeproto.ImageType", ImageType_name, ImageType_value)
	proto.RegisterEnum("edgeproto.QosNetworkPriorityType", QosNetworkPriorityType_name, QosNetworkPriorityType_value)
	proto.RegisterEnum("edgeproto.QosLatencyProfile", QosLatencyProfile_name, QosLatencyProfile_value)
	proto.RegisterEnum("edgeproto.QosThroughputProfile", QosThroughputProfile_name, QosThroughputProfile_value)
	proto.RegisterEnum("edgeproto.VmAppOsType", VmAppOsType_name, VmAppOsType_value)
	proto.RegisterEnum("edgeproto.DeleteType", DeleteType_name, DeleteType_value)
	proto.RegisterEnum("edgeproto.AccessType", AccessType_name, AccessType_value)
	proto.RegisterType((*AppKey)(nil), "edgeproto.AppKey")
	proto.RegisterType((*ConfigFile)(nil), "edgeproto.ConfigFile")
	proto.RegisterType((*App)(nil), "edgeproto.App")
	proto.RegisterType((*ServerlessConfig)(nil), "edgeproto.ServerlessConfig")
	proto.RegisterType((*AppAutoProvPolicy)(nil), "edgeproto.AppAutoProvPolicy")
	proto.RegisterType((*AppAlertPolicy)(nil), "edgeproto.AppAlertPolicy")
	proto.RegisterType((*DeploymentCloudletRequest)(nil), "edgeproto.DeploymentCloudletRequest")
}

func init() { proto.RegisterFile("app.proto", fileDescriptor_e0f9056a14b86d47) }

var fileDescriptor_e0f9056a14b86d47 = []byte{
	// 2398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xd6, 0x4a, 0xb2, 0x64, 0x0e, 0x25, 0x6a, 0x35, 0x96, 0x95, 0xd1, 0x8f, 0x65, 0x85, 0xb6,
	0x53, 0x45, 0x95, 0x48, 0x47, 0x49, 0x9d, 0x44, 0x6d, 0x8a, 0x50, 0x24, 0x15, 0xb9, 0xa2, 0x48,
	0x66, 0x45, 0x49, 0x35, 0x50, 0x74, 0xb1, 0xda, 0x1d, 0x91, 0x0b, 0xed, 0xcf, 0x68, 0x7f, 0x28,
	0x33, 0xa7, 0xa2, 0xb7, 0xa2, 0x97, 0xa0, 0x05, 0x8a, 0x20, 0x28, 0x90, 0x5e, 0x82, 0xe6, 0x58,
	0x04, 0xe8, 0xa1, 0x41, 0x4f, 0x3d, 0x19, 0x41, 0x0f, 0x06, 0x7a, 0xe9, 0xa9, 0x68, 0xed, 0x16,
	0x28, 0x74, 0x2a, 0x60, 0x49, 0xe8, 0xb1, 0x98, 0x99, 0x5d, 0xee, 0x92, 0xa2, 0xd0, 0xc6, 0x31,
	0x7a, 0x21, 0x76, 0xbe, 0xf7, 0xe6, 0xbd, 0xb7, 0xdf, 0xbc, 0xf7, 0xe6, 0x2d, 0x41, 0x42, 0x21,
	0x24, 0x43, 0x1c, 0xdb, 0xb3, 0x61, 0x02, 0x6b, 0x75, 0xcc, 0x1e, 0xa7, 0x67, 0xeb, 0xb6, 0x5d,
	0x37, 0x70, 0x56, 0x21, 0x7a, 0x56, 0xb1, 0x2c, 0xdb, 0x53, 0x3c, 0xdd, 0xb6, 0x5c, 0xae, 0x38,
	0x3d, 0xe2, 0x60, 0xd7, 0x37, 0xbc, 0x60, 0x35, 0xae, 0x1a, 0xb6, 0xaf, 0x19, 0xd8, 0x3b, 0xc4,
	0xad, 0x10, 0xf2, 0x1c, 0xdf, 0xf5, 0x88, 0x6d, 0xe8, 0x6a, 0x08, 0xbd, 0x55, 0xd7, 0xbd, 0x86,
	0xbf, 0x9f, 0x51, 0x6d, 0x33, 0x6b, 0xda, 0xfb, 0xba, 0x41, 0x9d, 0x3d, 0xcc, 0xd2, 0xdf, 0x65,
	0x66, 0x20, 0xcb, 0xf4, 0xea, 0xd8, 0x6a, 0x3f, 0x84, 0xde, 0x0e, 0x0c, 0xa5, 0x69, 0x3b, 0xc1,
	0x6a, 0x54, 0xc3, 0xaa, 0x6e, 0x2a, 0x46, 0xb0, 0x9c, 0xa8, 0xdb, 0x75, 0x9b, 0x3d, 0x66, 0xe9,
	0x53, 0x80, 0xe6, 0xff, 0xab, 0x33, 0x6d, 0xd9, 0x54, 0x3c, 0xb5, 0xb1, 0x8c, 0xad, 0xba, 0x6e,
	0xe1, 0xac, 0x66, 0xe2, 0x65, 0x6e, 0xc5, 0xb0, 0x55, 0x6e, 0x24, 0xfd, 0x13, 0x01, 0x0c, 0xe5,
	0x08, 0xd9, 0xc4, 0x2d, 0x98, 0x01, 0x23, 0xb6, 0x53, 0x57, 0x2c, 0xfd, 0x03, 0xc6, 0x03, 0x12,
	0xe6, 0x85, 0x85, 0xc4, 0x1a, 0xf8, 0xe2, 0x1c, 0x0d, 0x29, 0x84, 0xd8, 0x4e, 0x5d, 0xea, 0x90,
	0xc3, 0x19, 0x30, 0x68, 0x29, 0x26, 0x46, 0xfd, 0x4c, 0x6f, 0xf8, 0x8b, 0x73, 0x34, 0xa0, 0x10,
	0x22, 0x31, 0x10, 0xde, 0x06, 0xc3, 0x4d, 0xec, 0xb8, 0xd4, 0xce, 0x40, 0x87, 0x9d, 0x26, 0x76,
	0xa4, 0x50, 0xb4, 0x3a, 0xf2, 0xcf, 0x67, 0x48, 0xf8, 0xf7, 0x33, 0x24, 0xfc, 0xe6, 0x57, 0x37,
	0x85, 0xf4, 0x5b, 0x00, 0xe4, 0x6d, 0xeb, 0x40, 0xaf, 0xaf, 0xeb, 0x06, 0x86, 0x10, 0x0c, 0x1e,
	0xea, 0x96, 0xc6, 0xc3, 0x90, 0xd8, 0x33, 0x9c, 0x04, 0x43, 0x2a, 0xd3, 0xe0, 0x4e, 0xa5, 0x60,
	0x95, 0xfe, 0xe3, 0x38, 0x18, 0xc8, 0x11, 0x42, 0xe5, 0x07, 0x3a, 0x36, 0x34, 0x17, 0x09, 0xf3,
	0x03, 0x54, 0xce, 0x57, 0xf0, 0x55, 0x30, 0x70, 0x88, 0x5b, 0x6c, 0x53, 0x72, 0x65, 0x3c, 0xd3,
	0x4e, 0x81, 0x0c, 0x7f, 0xf5, 0xb5, 0xc1, 0x47, 0x7f, 0xb9, 0xd9, 0x27, 0x51, 0x1d, 0x78, 0x0b,
	0x00, 0xdd, 0x54, 0xea, 0x58, 0x26, 0x8a, 0xd7, 0x40, 0x83, 0x2c, 0xf6, 0xc1, 0xcf, 0x4e, 0x91,
	0x20, 0x25, 0x18, 0x5e, 0x55, 0xbc, 0x06, 0x7c, 0x3d, 0x54, 0xf2, 0x5a, 0x04, 0xa3, 0x2b, 0xf3,
	0xc2, 0x42, 0x6a, 0x65, 0x22, 0x66, 0xf6, 0x3e, 0x15, 0xd6, 0x5a, 0x04, 0x07, 0x9b, 0xe8, 0x23,
	0x7c, 0x19, 0x8c, 0x28, 0xaa, 0x8a, 0x5d, 0x57, 0x26, 0xb6, 0xe3, 0xb9, 0x68, 0x98, 0xbd, 0x42,
	0x92, 0x63, 0x55, 0x0a, 0xc1, 0x4d, 0x90, 0xd2, 0xf0, 0x81, 0xe2, 0x1b, 0x9e, 0xcc, 0xf3, 0x01,
	0x25, 0x58, 0xc8, 0x71, 0xdb, 0xeb, 0x4c, 0x40, 0xa3, 0x4e, 0x9d, 0x9c, 0xa3, 0x21, 0xbe, 0x64,
	0xf1, 0x8f, 0x06, 0x7b, 0x39, 0x04, 0x5f, 0x01, 0x63, 0x8a, 0xef, 0x35, 0x64, 0xe2, 0xef, 0x1b,
	0xba, 0x2a, 0x53, 0x02, 0x46, 0x98, 0xcb, 0x51, 0x0a, 0x57, 0x19, 0x4a, 0xcf, 0x1d, 0x81, 0x61,
	0xd5, 0x36, 0x4d, 0xc5, 0xd2, 0xd0, 0x28, 0x93, 0x87, 0x4b, 0x38, 0x0f, 0x92, 0xb1, 0xba, 0x40,
	0xa9, 0x20, 0xe0, 0x08, 0x82, 0xb7, 0x01, 0xd0, 0x30, 0x31, 0xec, 0x96, 0x89, 0x2d, 0x0f, 0x8d,
	0xc5, 0xd8, 0x8a, 0xe1, 0xf0, 0xbb, 0xe0, 0x5a, 0xb4, 0x92, 0x4d, 0xc5, 0xd2, 0x0f, 0xb0, 0xeb,
	0x21, 0x91, 0xa9, 0x8f, 0x52, 0xf5, 0x9f, 0x7d, 0x3e, 0x75, 0xc5, 0xb2, 0x55, 0x93, 0x48, 0x30,
	0xd2, 0xdc, 0x0a, 0x14, 0xe1, 0xbb, 0x60, 0x22, 0xb6, 0xbf, 0x8e, 0x2d, 0xec, 0x28, 0x9e, 0xed,
	0xa0, 0xf1, 0x5e, 0x06, 0x62, 0xae, 0xde, 0x0b, 0x35, 0xe1, 0x5d, 0x30, 0xa1, 0x58, 0x9a, 0x63,
	0xeb, 0x9a, 0x4c, 0x14, 0xf5, 0x90, 0x1e, 0x1d, 0xcb, 0x5d, 0xc8, 0x5e, 0x09, 0x06, 0xb2, 0x2a,
	0x17, 0x95, 0x69, 0x02, 0xbf, 0x0d, 0x86, 0x35, 0x6c, 0xc8, 0x36, 0xf1, 0xd0, 0x04, 0x3b, 0xdf,
	0xeb, 0xb1, 0x33, 0x28, 0x60, 0x03, 0x7b, 0xec, 0x54, 0xd7, 0x12, 0x91, 0xe7, 0x21, 0x0d, 0x1b,
	0x15, 0xe2, 0xc1, 0x2c, 0x25, 0x94, 0xe6, 0xa5, 0x8b, 0xae, 0xcf, 0x0f, 0x2c, 0x24, 0x3b, 0xb6,
	0x46, 0x19, 0x2e, 0x85, 0x5a, 0x70, 0x09, 0x40, 0x57, 0x55, 0x0c, 0x2c, 0x1f, 0xeb, 0x5e, 0x43,
	0x56, 0x0d, 0xdf, 0xf5, 0xb0, 0x83, 0x26, 0xe7, 0x85, 0x85, 0xab, 0x92, 0xc8, 0x24, 0x7b, 0xba,
	0xd7, 0xc8, 0x73, 0x1c, 0xde, 0x01, 0x29, 0xdd, 0xf2, 0xb0, 0x63, 0x29, 0x46, 0x90, 0x49, 0x2f,
	0x31, 0xcd, 0xd1, 0x10, 0xe5, 0xb9, 0x74, 0x07, 0x5c, 0x75, 0x70, 0x53, 0x67, 0x25, 0x88, 0x18,
	0x51, 0xb1, 0x50, 0xdb, 0x22, 0x78, 0x0b, 0x8c, 0xda, 0x07, 0x07, 0xba, 0xaa, 0x2b, 0x86, 0x7c,
	0x70, 0xa4, 0x59, 0x68, 0x8a, 0x51, 0x32, 0x12, 0x82, 0xeb, 0x47, 0x9a, 0x45, 0xeb, 0xca, 0xd4,
	0xbe, 0xe5, 0xfa, 0x26, 0x9a, 0xe6, 0x75, 0xc7, 0x57, 0x70, 0x01, 0x88, 0x8a, 0xef, 0xd9, 0x32,
	0x71, 0xec, 0xa6, 0xcc, 0x3b, 0x21, 0x9a, 0x65, 0x1a, 0x29, 0x8a, 0x57, 0x1d, 0xbb, 0x59, 0x65,
	0x28, 0xbc, 0x07, 0x82, 0x44, 0xe7, 0x25, 0x73, 0xe3, 0x02, 0xa5, 0x39, 0x26, 0x65, 0x35, 0x03,
	0x94, 0xf6, 0x33, 0x7c, 0x83, 0x56, 0x04, 0x25, 0x5b, 0x26, 0x0e, 0x26, 0x8a, 0x83, 0xd1, 0x4d,
	0xfa, 0xb2, 0xdd, 0x87, 0x3e, 0xca, 0x95, 0xaa, 0x5c, 0x07, 0xbe, 0x0b, 0x60, 0x57, 0x5c, 0x3a,
	0x76, 0xd1, 0x3c, 0xed, 0x09, 0x6b, 0xf0, 0xe4, 0x1c, 0xa5, 0x72, 0x1d, 0xd1, 0x49, 0x62, 0x47,
	0xb4, 0x3a, 0x76, 0xe1, 0x32, 0x80, 0x1e, 0x36, 0x89, 0xa1, 0x78, 0x58, 0xd6, 0xb0, 0xa1, 0x9b,
	0x3a, 0x3d, 0x92, 0x97, 0xd9, 0xbb, 0x8d, 0x87, 0x92, 0x42, 0x28, 0x80, 0x69, 0x30, 0xea, 0x1e,
	0xea, 0x44, 0x6e, 0xa8, 0xc1, 0x91, 0xa4, 0x79, 0xad, 0x50, 0x70, 0x43, 0xe5, 0x07, 0xf2, 0x00,
	0x00, 0xd5, 0xc1, 0x8a, 0x87, 0x35, 0x59, 0xf1, 0xd0, 0x2d, 0x56, 0xd8, 0xb7, 0x32, 0x9a, 0xee,
	0x7a, 0x8e, 0xbe, 0xef, 0x53, 0x98, 0x75, 0x6b, 0x99, 0x77, 0xeb, 0x4c, 0x4d, 0x37, 0xb1, 0xeb,
	0x29, 0x26, 0x59, 0xbb, 0x1e, 0xbc, 0x6b, 0xc2, 0x0b, 0x21, 0x56, 0xee, 0x89, 0xc0, 0x5a, 0xce,
	0xa3, 0xa6, 0x7d, 0xa2, 0x85, 0xa6, 0x6f, 0x7f, 0x7d, 0xd3, 0x81, 0xb5, 0x9c, 0x47, 0xbb, 0x03,
	0xbb, 0xe7, 0xb0, 0x86, 0xee, 0xb0, 0x34, 0x0b, 0x97, 0x50, 0x01, 0x37, 0x1c, 0x7c, 0xe4, 0xeb,
	0x0e, 0xd6, 0x64, 0xdb, 0xf7, 0xf6, 0x6d, 0xdf, 0xd2, 0x64, 0xd5, 0xb6, 0x2c, 0xac, 0xf2, 0x7e,
	0xf1, 0x0a, 0x4b, 0xfe, 0x97, 0x62, 0x87, 0xbc, 0x8d, 0x55, 0xdf, 0xd1, 0xbd, 0x96, 0xe4, 0x1b,
	0x38, 0x68, 0xba, 0x33, 0xa1, 0x8d, 0x4a, 0x60, 0x22, 0x1f, 0x59, 0x80, 0xaf, 0x02, 0x51, 0x31,
	0x0c, 0xfb, 0x58, 0x76, 0xb1, 0xd3, 0xc4, 0x8e, 0x81, 0x5d, 0x17, 0x7d, 0x83, 0x45, 0x31, 0xc6,
	0xf0, 0xed, 0x36, 0x0c, 0x37, 0xc0, 0x78, 0xa4, 0x24, 0x07, 0xb7, 0xc4, 0x02, 0x63, 0x62, 0xa6,
	0x23, 0x82, 0x50, 0x87, 0x17, 0xa2, 0x24, 0xba, 0x5d, 0x08, 0xfc, 0x36, 0x48, 0x35, 0x4d, 0x59,
	0x21, 0x44, 0xb6, 0x83, 0x6c, 0x7d, 0x95, 0x65, 0xeb, 0x64, 0xcc, 0xcc, 0xae, 0x99, 0x23, 0xa4,
	0xc2, 0xd3, 0x35, 0xd9, 0x8c, 0x16, 0xf0, 0x1e, 0x48, 0x29, 0x06, 0x76, 0xbc, 0x28, 0xeb, 0x16,
	0x59, 0xd6, 0x8d, 0x9d, 0x9c, 0xa3, 0x64, 0x8e, 0x4a, 0x82, 0x94, 0x1b, 0x55, 0xda, 0x0b, 0x9a,
	0x6f, 0x3f, 0x00, 0x53, 0x47, 0xb6, 0x2b, 0x5b, 0xd8, 0x3b, 0xb6, 0x9d, 0x43, 0x99, 0x38, 0xba,
	0x4d, 0x89, 0xe2, 0xfe, 0xbf, 0xc9, 0xfc, 0xbf, 0x1c, 0xf3, 0xff, 0xbe, 0xed, 0x96, 0xb9, 0x6a,
	0x35, 0xd0, 0x64, 0xa1, 0x4c, 0x1e, 0xf5, 0xc4, 0x61, 0x09, 0x5c, 0xa3, 0xd6, 0x69, 0xce, 0x5a,
	0x6a, 0x8b, 0x96, 0xc5, 0x81, 0x6e, 0x60, 0xb4, 0xc4, 0xec, 0xce, 0x76, 0xda, 0x2d, 0x71, 0xa5,
	0x2a, 0xd7, 0x91, 0xc6, 0x8f, 0xba, 0x21, 0xb8, 0x03, 0xa8, 0x1f, 0xd9, 0x6b, 0x38, 0xb6, 0x5f,
	0x6f, 0x10, 0xdf, 0x6b, 0x1b, 0x5c, 0x66, 0x06, 0x6f, 0x76, 0x1a, 0xac, 0xb5, 0xf5, 0x42, 0x9b,
	0x13, 0x47, 0x3d, 0xd0, 0xd5, 0x7f, 0x08, 0x74, 0x1a, 0xf8, 0xd7, 0x33, 0x24, 0xfc, 0xe8, 0x14,
	0x09, 0x1f, 0x9e, 0x22, 0xe1, 0xa3, 0x53, 0x24, 0x3c, 0xa2, 0x09, 0x7a, 0x86, 0xde, 0x2c, 0xc4,
	0x0b, 0x7c, 0x29, 0x1f, 0xa6, 0xfe, 0xd2, 0x4e, 0x98, 0xa9, 0x4b, 0x05, 0xd6, 0x7d, 0x97, 0x3a,
	0x4b, 0xfb, 0xe3, 0x33, 0xf4, 0x43, 0x85, 0x10, 0xda, 0xec, 0xdf, 0xd9, 0xc4, 0xad, 0x0c, 0xed,
	0xed, 0x4b, 0x7c, 0x0c, 0x71, 0x19, 0xb0, 0xcb, 0x47, 0x11, 0x8a, 0x2d, 0xdb, 0x4e, 0x9d, 0x61,
	0x95, 0xd8, 0x98, 0xb3, 0x14, 0x5c, 0xaa, 0xfc, 0x3e, 0x7e, 0xa7, 0x10, 0xbf, 0x62, 0x99, 0xb5,
	0xcf, 0xcf, 0x91, 0x78, 0x88, 0x5b, 0xef, 0xc4, 0x37, 0xfd, 0xe1, 0x1c, 0x21, 0xee, 0x7f, 0x13,
	0xb7, 0x56, 0x3b, 0x23, 0xfa, 0xde, 0xe0, 0xd5, 0x19, 0x71, 0x56, 0x9a, 0x0e, 0x2f, 0x7a, 0xb7,
	0xa1, 0xd0, 0x0a, 0x6a, 0xda, 0x86, 0x6f, 0x62, 0xd9, 0xd5, 0x3f, 0xc0, 0xe9, 0x26, 0x10, 0xbb,
	0xf3, 0x14, 0x2e, 0x83, 0x2b, 0x4d, 0x95, 0xf8, 0x2e, 0x9b, 0x87, 0x3a, 0x87, 0x98, 0x1d, 0x0d,
	0xab, 0xf7, 0xde, 0x08, 0xea, 0x89, 0x6b, 0x41, 0x11, 0x0c, 0x38, 0x8a, 0xc9, 0x26, 0x9e, 0x41,
	0x89, 0x3e, 0xd2, 0xf1, 0xc3, 0xd4, 0x2d, 0xd9, 0xc1, 0xc4, 0xd0, 0x55, 0xc5, 0x65, 0x63, 0xd9,
	0xa8, 0x94, 0x34, 0x75, 0x4b, 0x0a, 0xa0, 0xf4, 0x47, 0xfd, 0x60, 0x3c, 0x47, 0x48, 0x67, 0xbc,
	0xf0, 0x4d, 0x30, 0x4c, 0x8b, 0x81, 0xce, 0x0f, 0xc2, 0x65, 0x03, 0x54, 0xf2, 0xe4, 0x1c, 0xd1,
	0x09, 0x8c, 0x85, 0x40, 0xc7, 0x3c, 0x3a, 0x58, 0x7c, 0xa7, 0xc7, 0xed, 0xc0, 0x87, 0xc5, 0x5e,
	0x3d, 0xb8, 0xeb, 0xc6, 0x58, 0xfd, 0xa9, 0xf0, 0xf1, 0x19, 0x5a, 0x0f, 0xcf, 0x8e, 0xfb, 0xe9,
	0x3c, 0xbe, 0x00, 0xeb, 0x3e, 0xc1, 0x00, 0x8e, 0x9f, 0xc7, 0x97, 0x67, 0xa8, 0xc3, 0x42, 0xd7,
	0xce, 0x1e, 0x3b, 0xba, 0xd2, 0x28, 0xfd, 0x69, 0x3f, 0x48, 0x51, 0x6a, 0xa2, 0x0a, 0x7e, 0x7e,
	0x5e, 0x56, 0xc0, 0x48, 0xac, 0x47, 0x84, 0x9c, 0x5c, 0xe8, 0x10, 0xc9, 0xa8, 0x43, 0xb4, 0x56,
	0x3f, 0xa5, 0x6c, 0xa8, 0x2f, 0x86, 0x8d, 0x25, 0x66, 0x98, 0x3b, 0x5f, 0xe6, 0xf6, 0x22, 0x4f,
	0x5f, 0x9e, 0xa1, 0xd5, 0xaf, 0x4a, 0x55, 0xb4, 0x3b, 0xfd, 0xfb, 0x7e, 0x30, 0x55, 0x68, 0x0f,
	0x60, 0xf9, 0xe0, 0xa3, 0x49, 0xc2, 0x47, 0x3e, 0x1d, 0xe4, 0xe6, 0x01, 0xfd, 0x44, 0x08, 0xe8,
	0x4a, 0x75, 0xd2, 0x25, 0x51, 0x11, 0xbc, 0x0d, 0x52, 0x9a, 0xd3, 0x92, 0x1d, 0xdf, 0x92, 0xf9,
	0x1c, 0xc7, 0xd8, 0xb9, 0x2a, 0x8d, 0x68, 0x4e, 0x4b, 0xf2, 0x2d, 0x6e, 0x1a, 0xce, 0x80, 0x84,
	0xe5, 0x9b, 0xb2, 0x65, 0x6b, 0x38, 0x4c, 0xe4, 0xab, 0x96, 0x6f, 0x96, 0xe9, 0x7a, 0xf5, 0x77,
	0xb4, 0x5f, 0x6c, 0xe6, 0x08, 0xc9, 0x74, 0xf6, 0x0c, 0x8a, 0x44, 0x7d, 0x83, 0xae, 0xa2, 0xde,
	0x11, 0x68, 0xb3, 0xfe, 0x41, 0x48, 0xe6, 0x42, 0x0f, 0x39, 0x88, 0x31, 0x9f, 0xe9, 0x45, 0x7d,
	0xe6, 0x85, 0xf4, 0x92, 0xc5, 0x87, 0x20, 0xd1, 0xfe, 0x76, 0x80, 0x93, 0x00, 0xde, 0xdf, 0xca,
	0xbd, 0x57, 0x94, 0x6b, 0x0f, 0xaa, 0x45, 0x79, 0xa7, 0xbc, 0x59, 0xae, 0xec, 0x95, 0xc5, 0x3e,
	0x78, 0x1d, 0x8c, 0xc7, 0xf0, 0x42, 0x25, 0xbf, 0x59, 0x94, 0x44, 0x01, 0x5e, 0x03, 0x63, 0x31,
	0xf8, 0xfd, 0x7c, 0x65, 0x4f, 0xec, 0xef, 0x02, 0x37, 0x8a, 0xa5, 0x2d, 0x71, 0x00, 0x42, 0x90,
	0x8a, 0x81, 0x95, 0xdd, 0x75, 0x71, 0x70, 0x71, 0x0d, 0x4c, 0xf6, 0xbe, 0x54, 0x60, 0x12, 0x0c,
	0x17, 0x8a, 0xeb, 0xb9, 0x9d, 0x52, 0x4d, 0xec, 0xa3, 0x8b, 0x52, 0xae, 0x56, 0x2c, 0xe7, 0x1f,
	0x88, 0x02, 0x4c, 0x01, 0x50, 0xdb, 0x90, 0x2a, 0x3b, 0xef, 0x6d, 0x54, 0x77, 0x6a, 0x62, 0xff,
	0xe2, 0xdb, 0x60, 0xfc, 0xc2, 0x05, 0x42, 0x23, 0x08, 0x76, 0xc8, 0x91, 0x99, 0x31, 0x90, 0x0c,
	0xc1, 0x52, 0x65, 0x4f, 0x14, 0x16, 0x35, 0x30, 0xd1, 0xeb, 0xaa, 0xa0, 0x1c, 0x44, 0x2e, 0x62,
	0x06, 0x44, 0x30, 0x12, 0xc3, 0xb7, 0x45, 0xa1, 0x0b, 0xd9, 0x12, 0xfb, 0xbb, 0x90, 0x92, 0x38,
	0xb0, 0xf8, 0x6b, 0x01, 0x24, 0x63, 0x57, 0x37, 0x65, 0x72, 0x77, 0x4b, 0xce, 0x55, 0xab, 0x72,
	0x65, 0x3b, 0x46, 0xf0, 0x35, 0x30, 0x16, 0xc1, 0xa5, 0xfb, 0xe5, 0x9d, 0xef, 0x8b, 0x02, 0x44,
	0x60, 0x22, 0x02, 0xf7, 0xee, 0x97, 0x0b, 0x95, 0xbd, 0x6d, 0xf9, 0xb5, 0xbb, 0x62, 0x3f, 0x9c,
	0x06, 0x93, 0x17, 0x25, 0x2b, 0x77, 0x5f, 0x5b, 0x11, 0x07, 0x2e, 0x95, 0xdd, 0x13, 0x07, 0x2f,
	0x95, 0xbd, 0x2d, 0x5e, 0x59, 0x7c, 0x0d, 0x80, 0xe8, 0x23, 0x83, 0x1e, 0x58, 0xb9, 0x22, 0xe7,
	0x76, 0x6a, 0x15, 0xb9, 0x50, 0x2c, 0x15, 0x6b, 0x45, 0x4e, 0x61, 0x1c, 0x10, 0x16, 0x0f, 0x01,
	0x88, 0x86, 0x68, 0xf8, 0x0a, 0x48, 0xe7, 0xf2, 0xf9, 0xe2, 0xf6, 0x76, 0x90, 0x25, 0x9c, 0x39,
	0x79, 0xbd, 0x22, 0xc9, 0x85, 0x62, 0xb5, 0x54, 0x79, 0xb0, 0x55, 0x2c, 0x53, 0x22, 0x27, 0x01,
	0xec, 0xd0, 0xbb, 0x2f, 0x15, 0xf3, 0x35, 0x51, 0x80, 0x37, 0xc0, 0x54, 0x1c, 0x2f, 0x55, 0x72,
	0x05, 0x79, 0x2d, 0x57, 0xca, 0x95, 0xf3, 0x45, 0x49, 0xec, 0x5f, 0xf9, 0x04, 0xb0, 0xff, 0x0d,
	0x72, 0x44, 0x87, 0x0f, 0x41, 0x82, 0x97, 0x15, 0xfd, 0x02, 0xef, 0x2a, 0xea, 0xe9, 0x78, 0x4f,
	0x94, 0xd8, 0x1f, 0x2a, 0xe9, 0x8d, 0x93, 0x53, 0xb4, 0x28, 0x61, 0xd7, 0xf6, 0x1d, 0x95, 0xee,
	0x71, 0x97, 0x72, 0x6c, 0xdc, 0xdb, 0x52, 0x2c, 0xa5, 0x8e, 0x97, 0xba, 0x8b, 0xe6, 0xf1, 0x19,
	0x12, 0x7e, 0xfc, 0xa7, 0xbf, 0xff, 0xbc, 0x5f, 0x4c, 0x27, 0xb3, 0x7c, 0xe4, 0xcd, 0x2a, 0x84,
	0xac, 0x0a, 0x8b, 0xd0, 0x03, 0x09, 0x4e, 0xd2, 0xff, 0xe8, 0xb9, 0xf0, 0xd5, 0x3c, 0xb7, 0xbd,
	0xf2, 0x8f, 0x8b, 0xd0, 0xeb, 0x43, 0x90, 0xe0, 0x8d, 0xe3, 0xff, 0xf0, 0xbe, 0x7c, 0x0e, 0x0f,
	0x3d, 0x1f, 0x81, 0xe1, 0xed, 0x86, 0x7d, 0xdc, 0xcb, 0x6f, 0xd7, 0x9a, 0xbd, 0xea, 0x42, 0x0f,
	0xa7, 0xbb, 0x3a, 0x3e, 0xbe, 0xdc, 0x65, 0x2a, 0x9d, 0xc8, 0xba, 0x0d, 0xfb, 0x38, 0x70, 0x78,
	0x57, 0x80, 0x9f, 0x08, 0x60, 0x22, 0xa7, 0x69, 0x17, 0xa7, 0x82, 0xd9, 0x4e, 0x87, 0x9d, 0xd2,
	0x5e, 0x34, 0xec, 0x9e, 0x9c, 0xa2, 0xe5, 0xcb, 0x69, 0xe8, 0x71, 0xb1, 0x3c, 0x0a, 0xc3, 0x9a,
	0x49, 0x4f, 0x66, 0x15, 0x4d, 0xa3, 0x51, 0xd1, 0x21, 0x81, 0xce, 0x13, 0xfc, 0xf6, 0xa2, 0xa4,
	0x7c, 0x2a, 0x80, 0x97, 0x24, 0x6c, 0xda, 0x4d, 0xfc, 0x02, 0x82, 0x7c, 0xf0, 0xfc, 0x41, 0xce,
	0xa5, 0xa7, 0xb2, 0x0e, 0x8b, 0xa3, 0x77, 0x9c, 0xbf, 0x10, 0xc0, 0x78, 0xc0, 0x64, 0x6c, 0x88,
	0x98, 0xea, 0x8a, 0x30, 0x12, 0xf5, 0x0a, 0x6f, 0xfb, 0xf9, 0xc3, 0x43, 0xe9, 0x6b, 0x6d, 0x0e,
	0xa3, 0xeb, 0x9f, 0x06, 0xf6, 0x4b, 0x01, 0x4c, 0x44, 0x04, 0x3e, 0x77, 0x6c, 0x5f, 0xf3, 0x7c,
	0x63, 0xd4, 0x75, 0x86, 0xf7, 0x5b, 0x01, 0xdc, 0xa0, 0x59, 0x1f, 0xce, 0x12, 0xee, 0xba, 0xed,
	0xe4, 0x08, 0x89, 0x86, 0x0c, 0x78, 0xbb, 0xe3, 0x9f, 0x99, 0x4b, 0x66, 0x8f, 0xe9, 0xf8, 0xe7,
	0x5b, 0x28, 0xdb, 0xc4, 0xad, 0x74, 0xed, 0xe4, 0x14, 0xdd, 0x08, 0xe3, 0x6e, 0x3b, 0x89, 0x97,
	0xcb, 0x67, 0x67, 0x48, 0x68, 0x97, 0xc8, 0x9d, 0xf4, 0x3c, 0x2b, 0x11, 0x53, 0x21, 0x44, 0xb7,
	0xea, 0xd9, 0xe8, 0xdf, 0xa6, 0xf0, 0x1f, 0x62, 0x97, 0x55, 0xce, 0xda, 0xec, 0xa3, 0xbf, 0xcd,
	0xf5, 0x3d, 0x7a, 0x32, 0x27, 0x3c, 0x7e, 0x32, 0x27, 0xfc, 0xf5, 0xc9, 0x9c, 0xf0, 0xe1, 0xd3,
	0xb9, 0xbe, 0xc7, 0x4f, 0xe7, 0xfa, 0xfe, 0xfc, 0x74, 0xae, 0x6f, 0x7f, 0x88, 0x05, 0xf2, 0xfa,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x51, 0x91, 0xcf, 0x9a, 0x16, 0x00, 0x00,
}

func (this *AppKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.AppKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppApiClient is the client API for AppApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppApiClient interface {
	// Create Application. Creates a definition for an application instance for Cloudlet deployment.
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Delete Application. Deletes a definition of an Application instance. Make sure no other application
	// instances exist with that definition. If they do exist, you must delete those Application instances first.
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Update Application. Updates the definition of an Application instance.
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Show Applications. Lists all Application definitions managed from the Edge Controller.
	// Any fields specified will be used to filter results.
	ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
	// Add an AutoProvPolicy to the App
	AddAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Remove an AutoProvPolicy from the App
	RemoveAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Add an AlertPolicy to the App
	AddAppAlertPolicy(ctx context.Context, in *AppAlertPolicy, opts ...grpc.CallOption) (*Result, error)
	// Remove an AlertPolicy from the App
	RemoveAppAlertPolicy(ctx context.Context, in *AppAlertPolicy, opts ...grpc.CallOption) (*Result, error)
	// Discover cloudlets supporting deployments of App.DefaultFlavor
	ShowCloudletsForAppDeployment(ctx context.Context, in *DeploymentCloudletRequest, opts ...grpc.CallOption) (AppApi_ShowCloudletsForAppDeploymentClient, error)
}

type appApiClient struct {
	cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppApi_serviceDesc.Streams[0], "/edgeproto.AppApi/ShowApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowAppClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appApiShowAppClient struct {
	grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appApiClient) AddAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/AddAppAutoProvPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) RemoveAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/RemoveAppAutoProvPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) AddAppAlertPolicy(ctx context.Context, in *AppAlertPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/AddAppAlertPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) RemoveAppAlertPolicy(ctx context.Context, in *AppAlertPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.AppApi/RemoveAppAlertPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowCloudletsForAppDeployment(ctx context.Context, in *DeploymentCloudletRequest, opts ...grpc.CallOption) (AppApi_ShowCloudletsForAppDeploymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppApi_serviceDesc.Streams[1], "/edgeproto.AppApi/ShowCloudletsForAppDeployment", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowCloudletsForAppDeploymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowCloudletsForAppDeploymentClient interface {
	Recv() (*CloudletKey, error)
	grpc.ClientStream
}

type appApiShowCloudletsForAppDeploymentClient struct {
	grpc.ClientStream
}

func (x *appApiShowCloudletsForAppDeploymentClient) Recv() (*CloudletKey, error) {
	m := new(CloudletKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppApiServer is the server API for AppApi service.
type AppApiServer interface {
	// Create Application. Creates a definition for an application instance for Cloudlet deployment.
	CreateApp(context.Context, *App) (*Result, error)
	// Delete Application. Deletes a definition of an Application instance. Make sure no other application
	// instances exist with that definition. If they do exist, you must delete those Application instances first.
	DeleteApp(context.Context, *App) (*Result, error)
	// Update Application. Updates the definition of an Application instance.
	UpdateApp(context.Context, *App) (*Result, error)
	// Show Applications. Lists all Application definitions managed from the Edge Controller.
	// Any fields specified will be used to filter results.
	ShowApp(*App, AppApi_ShowAppServer) error
	// Add an AutoProvPolicy to the App
	AddAppAutoProvPolicy(context.Context, *AppAutoProvPolicy) (*Result, error)
	// Remove an AutoProvPolicy from the App
	RemoveAppAutoProvPolicy(context.Context, *AppAutoProvPolicy) (*Result, error)
	// Add an AlertPolicy to the App
	AddAppAlertPolicy(context.Context, *AppAlertPolicy) (*Result, error)
	// Remove an AlertPolicy from the App
	RemoveAppAlertPolicy(context.Context, *AppAlertPolicy) (*Result, error)
	// Discover cloudlets supporting deployments of App.DefaultFlavor
	ShowCloudletsForAppDeployment(*DeploymentCloudletRequest, AppApi_ShowCloudletsForAppDeploymentServer) error
}

// UnimplementedAppApiServer can be embedded to have forward compatible implementations.
type UnimplementedAppApiServer struct {
}

func (*UnimplementedAppApiServer) CreateApp(ctx context.Context, req *App) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (*UnimplementedAppApiServer) DeleteApp(ctx context.Context, req *App) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (*UnimplementedAppApiServer) UpdateApp(ctx context.Context, req *App) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (*UnimplementedAppApiServer) ShowApp(req *App, srv AppApi_ShowAppServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowApp not implemented")
}
func (*UnimplementedAppApiServer) AddAppAutoProvPolicy(ctx context.Context, req *AppAutoProvPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppAutoProvPolicy not implemented")
}
func (*UnimplementedAppApiServer) RemoveAppAutoProvPolicy(ctx context.Context, req *AppAutoProvPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppAutoProvPolicy not implemented")
}
func (*UnimplementedAppApiServer) AddAppAlertPolicy(ctx context.Context, req *AppAlertPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppAlertPolicy not implemented")
}
func (*UnimplementedAppApiServer) RemoveAppAlertPolicy(ctx context.Context, req *AppAlertPolicy) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppAlertPolicy not implemented")
}
func (*UnimplementedAppApiServer) ShowCloudletsForAppDeployment(req *DeploymentCloudletRequest, srv AppApi_ShowCloudletsForAppDeploymentServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowCloudletsForAppDeployment not implemented")
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
	s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(App)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appApiShowAppServer struct {
	grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

func _AppApi_AddAppAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).AddAppAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/AddAppAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).AddAppAutoProvPolicy(ctx, req.(*AppAutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_RemoveAppAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).RemoveAppAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/RemoveAppAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).RemoveAppAutoProvPolicy(ctx, req.(*AppAutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_AddAppAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).AddAppAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/AddAppAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).AddAppAlertPolicy(ctx, req.(*AppAlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_RemoveAppAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).RemoveAppAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/RemoveAppAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).RemoveAppAlertPolicy(ctx, req.(*AppAlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowCloudletsForAppDeployment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentCloudletRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowCloudletsForAppDeployment(m, &appApiShowCloudletsForAppDeploymentServer{stream})
}

type AppApi_ShowCloudletsForAppDeploymentServer interface {
	Send(*CloudletKey) error
	grpc.ServerStream
}

type appApiShowCloudletsForAppDeploymentServer struct {
	grpc.ServerStream
}

func (x *appApiShowCloudletsForAppDeploymentServer) Send(m *CloudletKey) error {
	return x.ServerStream.SendMsg(m)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppApi_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppApi_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppApi_UpdateApp_Handler,
		},
		{
			MethodName: "AddAppAutoProvPolicy",
			Handler:    _AppApi_AddAppAutoProvPolicy_Handler,
		},
		{
			MethodName: "RemoveAppAutoProvPolicy",
			Handler:    _AppApi_RemoveAppAutoProvPolicy_Handler,
		},
		{
			MethodName: "AddAppAlertPolicy",
			Handler:    _AppApi_AddAppAlertPolicy_Handler,
		},
		{
			MethodName: "RemoveAppAlertPolicy",
			Handler:    _AppApi_RemoveAppAlertPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowApp",
			Handler:       _AppApi_ShowApp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCloudletsForAppDeployment",
			Handler:       _AppApi_ShowCloudletsForAppDeployment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *App) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QosThroughputProfile != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.QosThroughputProfile))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.QosLatencyProfile != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.QosLatencyProfile))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.QosNetworkPriorityType != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.QosNetworkPriorityType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if len(m.AlertPolicies) > 0 {
		for iNdEx := len(m.AlertPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlertPolicies[iNdEx])
			copy(dAtA[i:], m.AlertPolicies[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.AlertPolicies[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.VmAppOsType != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.VmAppOsType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.ServerlessConfig != nil {
		{
			size, err := m.ServerlessConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.AllowServerless {
		i--
		if m.AllowServerless {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.RequiredOutboundConnections) > 0 {
		for iNdEx := len(m.RequiredOutboundConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredOutboundConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.Trusted {
		i--
		if m.Trusted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	{
		size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	if len(m.SkipHcPorts) > 0 {
		i -= len(m.SkipHcPorts)
		copy(dAtA[i:], m.SkipHcPorts)
		i = encodeVarintApp(dAtA, i, uint64(len(m.SkipHcPorts)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.TemplateDelimiter) > 0 {
		i -= len(m.TemplateDelimiter)
		copy(dAtA[i:], m.TemplateDelimiter)
		i = encodeVarintApp(dAtA, i, uint64(len(m.TemplateDelimiter)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AutoProvPolicies) > 0 {
		for iNdEx := len(m.AutoProvPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AutoProvPolicies[iNdEx])
			copy(dAtA[i:], m.AutoProvPolicies[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.AutoProvPolicies[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if m.DeletePrepare {
		i--
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.AccessType != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.AccessType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.AutoProvPolicy) > 0 {
		i -= len(m.AutoProvPolicy)
		copy(dAtA[i:], m.AutoProvPolicy)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AutoProvPolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Md5Sum) > 0 {
		i -= len(m.Md5Sum)
		copy(dAtA[i:], m.Md5Sum)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Md5Sum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.OfficialFqdn) > 0 {
		i -= len(m.OfficialFqdn)
		copy(dAtA[i:], m.OfficialFqdn)
		i = encodeVarintApp(dAtA, i, uint64(len(m.OfficialFqdn)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Revision) > 0 {
		i -= len(m.Revision)
		copy(dAtA[i:], m.Revision)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Revision)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.InternalPorts {
		i--
		if m.InternalPorts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ScaleWithCluster {
		i--
		if m.ScaleWithCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.DelOpt != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.DelOpt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.AndroidPackageName) > 0 {
		i -= len(m.AndroidPackageName)
		copy(dAtA[i:], m.AndroidPackageName)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AndroidPackageName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.DeploymentGenerator) > 0 {
		i -= len(m.DeploymentGenerator)
		copy(dAtA[i:], m.DeploymentGenerator)
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentGenerator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.DeploymentManifest) > 0 {
		i -= len(m.DeploymentManifest)
		copy(dAtA[i:], m.DeploymentManifest)
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentManifest)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Deployment) > 0 {
		i -= len(m.Deployment)
		copy(dAtA[i:], m.Deployment)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Deployment)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Annotations) > 0 {
		i -= len(m.Annotations)
		copy(dAtA[i:], m.Annotations)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Annotations)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AuthPublicKey) > 0 {
		i -= len(m.AuthPublicKey)
		copy(dAtA[i:], m.AuthPublicKey)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AuthPublicKey)))
		i--
		dAtA[i] = 0x62
	}
	{
		size, err := m.DefaultFlavor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.AccessPorts) > 0 {
		i -= len(m.AccessPorts)
		copy(dAtA[i:], m.AccessPorts)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AccessPorts)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ImageType != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.ImageType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintApp(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerlessConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerlessConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerlessConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinReplicas != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.MinReplicas))
		i--
		dAtA[i] = 0x18
	}
	if m.Ram != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Ram))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Vcpus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppAutoProvPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAutoProvPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppAutoProvPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AutoProvPolicy) > 0 {
		i -= len(m.AutoProvPolicy)
		copy(dAtA[i:], m.AutoProvPolicy)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AutoProvPolicy)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.AppKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppAlertPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAlertPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppAlertPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AlertPolicy) > 0 {
		i -= len(m.AlertPolicy)
		copy(dAtA[i:], m.AlertPolicy)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AlertPolicy)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.AppKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeploymentCloudletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentCloudletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentCloudletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumNodes != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x18
	}
	if m.DryRunDeploy {
		i--
		if m.DryRunDeploy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.App != nil {
		{
			size, err := m.App.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppKey) Matches(o *AppKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.Version != "" {
		if o.Version != m.Version {
			return false
		}
	}
	return true
}

func (m *AppKey) CopyInFields(src *AppKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Version != src.Version {
		m.Version = src.Version
		changed++
	}
	return changed
}

func (m *AppKey) DeepCopyIn(src *AppKey) {
	m.Organization = src.Organization
	m.Name = src.Name
	m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal AppKey key string", "obj", m)
	}
	return string(key)
}

func AppKeyStringParse(str string, key *AppKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal AppKey key string", "str", str)
	}
}

func (m *AppKey) NotFoundError() error {
	return fmt.Errorf("App key %s not found", m.GetKeyString())
}

func (m *AppKey) ExistsError() error {
	return fmt.Errorf("App key %s already exists", m.GetKeyString())
}

func (m *AppKey) BeingDeletedError() error {
	return fmt.Errorf("App %s is being deleted", m.GetKeyString())
}

var AppKeyTagOrganization = "apporg"
var AppKeyTagName = "app"
var AppKeyTagVersion = "appver"

func (m *AppKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apporg"] = m.Organization
	tags["app"] = m.Name
	tags["appver"] = m.Version
	return tags
}

// Helper method to check that enums have valid values
func (m *AppKey) ValidateEnums() error {
	return nil
}

func (m *ConfigFile) CopyInFields(src *ConfigFile) int {
	changed := 0
	if m.Kind != src.Kind {
		m.Kind = src.Kind
		changed++
	}
	if m.Config != src.Config {
		m.Config = src.Config
		changed++
	}
	return changed
}

func (m *ConfigFile) DeepCopyIn(src *ConfigFile) {
	m.Kind = src.Kind
	m.Config = src.Config
}

// Helper method to check that enums have valid values
func (m *ConfigFile) ValidateEnums() error {
	return nil
}

func (m *App) Matches(o *App, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ImagePath != "" {
			if o.ImagePath != m.ImagePath {
				return false
			}
		}
	}
	if !opts.Filter || o.ImageType != 0 {
		if o.ImageType != m.ImageType {
			return false
		}
	}
	if !opts.Filter || o.AccessPorts != "" {
		if o.AccessPorts != m.AccessPorts {
			return false
		}
	}
	if !m.DefaultFlavor.Matches(&o.DefaultFlavor, fopts...) {
		return false
	}
	if !opts.Filter || o.AuthPublicKey != "" {
		if o.AuthPublicKey != m.AuthPublicKey {
			return false
		}
	}
	if !opts.Filter || o.Command != "" {
		if o.Command != m.Command {
			return false
		}
	}
	if !opts.Filter || o.Annotations != "" {
		if o.Annotations != m.Annotations {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Deployment != "" {
			if o.Deployment != m.Deployment {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentManifest != "" {
			if o.DeploymentManifest != m.DeploymentManifest {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentGenerator != "" {
			if o.DeploymentGenerator != m.DeploymentGenerator {
				return false
			}
		}
	}
	if !opts.Filter || o.AndroidPackageName != "" {
		if o.AndroidPackageName != m.AndroidPackageName {
			return false
		}
	}
	if !opts.Filter || o.DelOpt != 0 {
		if o.DelOpt != m.DelOpt {
			return false
		}
	}
	if !opts.Filter || o.Configs != nil {
		if len(m.Configs) == 0 && len(o.Configs) > 0 || len(m.Configs) > 0 && len(o.Configs) == 0 {
			return false
		} else if m.Configs != nil && o.Configs != nil {
			if !opts.Filter && len(m.Configs) != len(o.Configs) {
				return false
			}
		}
	}
	if !opts.Filter || o.ScaleWithCluster != false {
		if o.ScaleWithCluster != m.ScaleWithCluster {
			return false
		}
	}
	if !opts.Filter || o.InternalPorts != false {
		if o.InternalPorts != m.InternalPorts {
			return false
		}
	}
	if !opts.Filter || o.Revision != "" {
		if o.Revision != m.Revision {
			return false
		}
	}
	if !opts.Filter || o.OfficialFqdn != "" {
		if o.OfficialFqdn != m.OfficialFqdn {
			return false
		}
	}
	if !opts.Filter || o.Md5Sum != "" {
		if o.Md5Sum != m.Md5Sum {
			return false
		}
	}
	if !opts.Filter || o.AutoProvPolicy != "" {
		if o.AutoProvPolicy != m.AutoProvPolicy {
			return false
		}
	}
	if !opts.Filter || o.AccessType != 0 {
		if o.AccessType != m.AccessType {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	if !opts.Filter || o.AutoProvPolicies != nil {
		if len(m.AutoProvPolicies) == 0 && len(o.AutoProvPolicies) > 0 || len(m.AutoProvPolicies) > 0 && len(o.AutoProvPolicies) == 0 {
			return false
		} else if m.AutoProvPolicies != nil && o.AutoProvPolicies != nil {
			if !opts.Filter && len(m.AutoProvPolicies) != len(o.AutoProvPolicies) {
				return false
			}
			found := 0
			for oIndex, _ := range o.AutoProvPolicies {
				for mIndex, _ := range m.AutoProvPolicies {
					if o.AutoProvPolicies[oIndex] == m.AutoProvPolicies[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.AutoProvPolicies) {
				return false
			}
		}
	}
	if !opts.Filter || o.TemplateDelimiter != "" {
		if o.TemplateDelimiter != m.TemplateDelimiter {
			return false
		}
	}
	if !opts.Filter || o.SkipHcPorts != "" {
		if o.SkipHcPorts != m.SkipHcPorts {
			return false
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
	}
	if !opts.Filter || o.Trusted != false {
		if o.Trusted != m.Trusted {
			return false
		}
	}
	if !opts.Filter || o.RequiredOutboundConnections != nil {
		if len(m.RequiredOutboundConnections) == 0 && len(o.RequiredOutboundConnections) > 0 || len(m.RequiredOutboundConnections) > 0 && len(o.RequiredOutboundConnections) == 0 {
			return false
		} else if m.RequiredOutboundConnections != nil && o.RequiredOutboundConnections != nil {
			if !opts.Filter && len(m.RequiredOutboundConnections) != len(o.RequiredOutboundConnections) {
				return false
			}
		}
	}
	if !opts.Filter || o.AllowServerless != false {
		if o.AllowServerless != m.AllowServerless {
			return false
		}
	}
	if !opts.Filter || o.ServerlessConfig != nil {
		if m.ServerlessConfig == nil && o.ServerlessConfig != nil || m.ServerlessConfig != nil && o.ServerlessConfig == nil {
			return false
		} else if m.ServerlessConfig != nil && o.ServerlessConfig != nil {
		}
	}
	if !opts.Filter || o.VmAppOsType != 0 {
		if o.VmAppOsType != m.VmAppOsType {
			return false
		}
	}
	if !opts.Filter || o.AlertPolicies != nil {
		if len(m.AlertPolicies) == 0 && len(o.AlertPolicies) > 0 || len(m.AlertPolicies) > 0 && len(o.AlertPolicies) == 0 {
			return false
		} else if m.AlertPolicies != nil && o.AlertPolicies != nil {
			if !opts.Filter && len(m.AlertPolicies) != len(o.AlertPolicies) {
				return false
			}
			found := 0
			for oIndex, _ := range o.AlertPolicies {
				for mIndex, _ := range m.AlertPolicies {
					if o.AlertPolicies[oIndex] == m.AlertPolicies[mIndex] {
						found++
						break
					}
				}
			}
			if found != len(o.AlertPolicies) {
				return false
			}
		}
	}
	if !opts.Filter || o.QosNetworkPriorityType != 0 {
		if o.QosNetworkPriorityType != m.QosNetworkPriorityType {
			return false
		}
	}
	if !opts.Filter || o.QosLatencyProfile != 0 {
		if o.QosLatencyProfile != m.QosLatencyProfile {
			return false
		}
	}
	if !opts.Filter || o.QosThroughputProfile != 0 {
		if o.QosThroughputProfile != m.QosThroughputProfile {
			return false
		}
	}
	return true
}

const AppFieldKey = "2"
const AppFieldKeyOrganization = "2.1"
const AppFieldKeyName = "2.2"
const AppFieldKeyVersion = "2.3"
const AppFieldImagePath = "4"
const AppFieldImageType = "5"
const AppFieldAccessPorts = "7"
const AppFieldDefaultFlavor = "9"
const AppFieldDefaultFlavorName = "9.1"
const AppFieldAuthPublicKey = "12"
const AppFieldCommand = "13"
const AppFieldAnnotations = "14"
const AppFieldDeployment = "15"
const AppFieldDeploymentManifest = "16"
const AppFieldDeploymentGenerator = "17"
const AppFieldAndroidPackageName = "18"
const AppFieldDelOpt = "20"
const AppFieldConfigs = "21"
const AppFieldConfigsKind = "21.1"
const AppFieldConfigsConfig = "21.2"
const AppFieldScaleWithCluster = "22"
const AppFieldInternalPorts = "23"
const AppFieldRevision = "24"
const AppFieldOfficialFqdn = "25"
const AppFieldMd5Sum = "26"
const AppFieldAutoProvPolicy = "28"
const AppFieldAccessType = "29"
const AppFieldDeletePrepare = "31"
const AppFieldAutoProvPolicies = "32"
const AppFieldTemplateDelimiter = "33"
const AppFieldSkipHcPorts = "34"
const AppFieldCreatedAt = "35"
const AppFieldCreatedAtSeconds = "35.1"
const AppFieldCreatedAtNanos = "35.2"
const AppFieldUpdatedAt = "36"
const AppFieldUpdatedAtSeconds = "36.1"
const AppFieldUpdatedAtNanos = "36.2"
const AppFieldTrusted = "37"
const AppFieldRequiredOutboundConnections = "38"
const AppFieldRequiredOutboundConnectionsProtocol = "38.1"
const AppFieldRequiredOutboundConnectionsPortRangeMin = "38.2"
const AppFieldRequiredOutboundConnectionsPortRangeMax = "38.3"
const AppFieldRequiredOutboundConnectionsRemoteCidr = "38.4"
const AppFieldAllowServerless = "39"
const AppFieldServerlessConfig = "40"
const AppFieldServerlessConfigVcpus = "40.1"
const AppFieldServerlessConfigVcpusWhole = "40.1.1"
const AppFieldServerlessConfigVcpusNanos = "40.1.2"
const AppFieldServerlessConfigRam = "40.2"
const AppFieldServerlessConfigMinReplicas = "40.3"
const AppFieldVmAppOsType = "41"
const AppFieldAlertPolicies = "42"
const AppFieldQosNetworkPriorityType = "43"
const AppFieldQosLatencyProfile = "44"
const AppFieldQosThroughputProfile = "45"

var AppAllFields = []string{
	AppFieldKeyOrganization,
	AppFieldKeyName,
	AppFieldKeyVersion,
	AppFieldImagePath,
	AppFieldImageType,
	AppFieldAccessPorts,
	AppFieldDefaultFlavorName,
	AppFieldAuthPublicKey,
	AppFieldCommand,
	AppFieldAnnotations,
	AppFieldDeployment,
	AppFieldDeploymentManifest,
	AppFieldDeploymentGenerator,
	AppFieldAndroidPackageName,
	AppFieldDelOpt,
	AppFieldConfigsKind,
	AppFieldConfigsConfig,
	AppFieldScaleWithCluster,
	AppFieldInternalPorts,
	AppFieldRevision,
	AppFieldOfficialFqdn,
	AppFieldMd5Sum,
	AppFieldAutoProvPolicy,
	AppFieldAccessType,
	AppFieldDeletePrepare,
	AppFieldAutoProvPolicies,
	AppFieldTemplateDelimiter,
	AppFieldSkipHcPorts,
	AppFieldCreatedAtSeconds,
	AppFieldCreatedAtNanos,
	AppFieldUpdatedAtSeconds,
	AppFieldUpdatedAtNanos,
	AppFieldTrusted,
	AppFieldRequiredOutboundConnectionsProtocol,
	AppFieldRequiredOutboundConnectionsPortRangeMin,
	AppFieldRequiredOutboundConnectionsPortRangeMax,
	AppFieldRequiredOutboundConnectionsRemoteCidr,
	AppFieldAllowServerless,
	AppFieldServerlessConfigVcpusWhole,
	AppFieldServerlessConfigVcpusNanos,
	AppFieldServerlessConfigRam,
	AppFieldServerlessConfigMinReplicas,
	AppFieldVmAppOsType,
	AppFieldAlertPolicies,
	AppFieldQosNetworkPriorityType,
	AppFieldQosLatencyProfile,
	AppFieldQosThroughputProfile,
}

var AppAllFieldsMap = map[string]struct{}{
	AppFieldKeyOrganization:                         struct{}{},
	AppFieldKeyName:                                 struct{}{},
	AppFieldKeyVersion:                              struct{}{},
	AppFieldImagePath:                               struct{}{},
	AppFieldImageType:                               struct{}{},
	AppFieldAccessPorts:                             struct{}{},
	AppFieldDefaultFlavorName:                       struct{}{},
	AppFieldAuthPublicKey:                           struct{}{},
	AppFieldCommand:                                 struct{}{},
	AppFieldAnnotations:                             struct{}{},
	AppFieldDeployment:                              struct{}{},
	AppFieldDeploymentManifest:                      struct{}{},
	AppFieldDeploymentGenerator:                     struct{}{},
	AppFieldAndroidPackageName:                      struct{}{},
	AppFieldDelOpt:                                  struct{}{},
	AppFieldConfigsKind:                             struct{}{},
	AppFieldConfigsConfig:                           struct{}{},
	AppFieldScaleWithCluster:                        struct{}{},
	AppFieldInternalPorts:                           struct{}{},
	AppFieldRevision:                                struct{}{},
	AppFieldOfficialFqdn:                            struct{}{},
	AppFieldMd5Sum:                                  struct{}{},
	AppFieldAutoProvPolicy:                          struct{}{},
	AppFieldAccessType:                              struct{}{},
	AppFieldDeletePrepare:                           struct{}{},
	AppFieldAutoProvPolicies:                        struct{}{},
	AppFieldTemplateDelimiter:                       struct{}{},
	AppFieldSkipHcPorts:                             struct{}{},
	AppFieldCreatedAtSeconds:                        struct{}{},
	AppFieldCreatedAtNanos:                          struct{}{},
	AppFieldUpdatedAtSeconds:                        struct{}{},
	AppFieldUpdatedAtNanos:                          struct{}{},
	AppFieldTrusted:                                 struct{}{},
	AppFieldRequiredOutboundConnectionsProtocol:     struct{}{},
	AppFieldRequiredOutboundConnectionsPortRangeMin: struct{}{},
	AppFieldRequiredOutboundConnectionsPortRangeMax: struct{}{},
	AppFieldRequiredOutboundConnectionsRemoteCidr:   struct{}{},
	AppFieldAllowServerless:                         struct{}{},
	AppFieldServerlessConfigVcpusWhole:              struct{}{},
	AppFieldServerlessConfigVcpusNanos:              struct{}{},
	AppFieldServerlessConfigRam:                     struct{}{},
	AppFieldServerlessConfigMinReplicas:             struct{}{},
	AppFieldVmAppOsType:                             struct{}{},
	AppFieldAlertPolicies:                           struct{}{},
	AppFieldQosNetworkPriorityType:                  struct{}{},
	AppFieldQosLatencyProfile:                       struct{}{},
	AppFieldQosThroughputProfile:                    struct{}{},
}

var AppAllFieldsStringMap = map[string]string{
	AppFieldKeyOrganization:                         "Key Organization",
	AppFieldKeyName:                                 "Key Name",
	AppFieldKeyVersion:                              "Key Version",
	AppFieldImagePath:                               "Image Path",
	AppFieldImageType:                               "Image Type",
	AppFieldAccessPorts:                             "Access Ports",
	AppFieldDefaultFlavorName:                       "Default Flavor Name",
	AppFieldAuthPublicKey:                           "Auth Public Key",
	AppFieldCommand:                                 "Command",
	AppFieldAnnotations:                             "Annotations",
	AppFieldDeployment:                              "Deployment",
	AppFieldDeploymentManifest:                      "Deployment Manifest",
	AppFieldDeploymentGenerator:                     "Deployment Generator",
	AppFieldAndroidPackageName:                      "Android Package Name",
	AppFieldDelOpt:                                  "Del Opt",
	AppFieldConfigsKind:                             "Configs Kind",
	AppFieldConfigsConfig:                           "Configs Config",
	AppFieldScaleWithCluster:                        "Scale With Cluster",
	AppFieldInternalPorts:                           "Internal Ports",
	AppFieldRevision:                                "Revision",
	AppFieldOfficialFqdn:                            "Official Fqdn",
	AppFieldMd5Sum:                                  "Md5 Sum",
	AppFieldAutoProvPolicy:                          "Auto Prov Policy",
	AppFieldAccessType:                              "Access Type",
	AppFieldDeletePrepare:                           "Delete Prepare",
	AppFieldAutoProvPolicies:                        "Auto Prov Policies",
	AppFieldTemplateDelimiter:                       "Template Delimiter",
	AppFieldSkipHcPorts:                             "Skip Hc Ports",
	AppFieldCreatedAtSeconds:                        "Created At Seconds",
	AppFieldCreatedAtNanos:                          "Created At Nanos",
	AppFieldUpdatedAtSeconds:                        "Updated At Seconds",
	AppFieldUpdatedAtNanos:                          "Updated At Nanos",
	AppFieldTrusted:                                 "Trusted",
	AppFieldRequiredOutboundConnectionsProtocol:     "Required Outbound Connections Protocol",
	AppFieldRequiredOutboundConnectionsPortRangeMin: "Required Outbound Connections Port Range Min",
	AppFieldRequiredOutboundConnectionsPortRangeMax: "Required Outbound Connections Port Range Max",
	AppFieldRequiredOutboundConnectionsRemoteCidr:   "Required Outbound Connections Remote Cidr",
	AppFieldAllowServerless:                         "Allow Serverless",
	AppFieldServerlessConfigVcpusWhole:              "Serverless Config Vcpus Whole",
	AppFieldServerlessConfigVcpusNanos:              "Serverless Config Vcpus Nanos",
	AppFieldServerlessConfigRam:                     "Serverless Config Ram",
	AppFieldServerlessConfigMinReplicas:             "Serverless Config Min Replicas",
	AppFieldVmAppOsType:                             "Vm App Os Type",
	AppFieldAlertPolicies:                           "Alert Policies",
	AppFieldQosNetworkPriorityType:                  "Qos Network Priority Type",
	AppFieldQosLatencyProfile:                       "Qos Latency Profile",
	AppFieldQosThroughputProfile:                    "Qos Throughput Profile",
}

func (m *App) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AppFieldKey+".") || s == AppFieldKey
}

func (m *App) DiffFields(o *App, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[AppFieldKeyOrganization] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AppFieldKeyName] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Version != o.Key.Version {
		fields[AppFieldKeyVersion] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.ImagePath != o.ImagePath {
		fields[AppFieldImagePath] = struct{}{}
	}
	if m.ImageType != o.ImageType {
		fields[AppFieldImageType] = struct{}{}
	}
	if m.AccessPorts != o.AccessPorts {
		fields[AppFieldAccessPorts] = struct{}{}
	}
	if m.DefaultFlavor.Name != o.DefaultFlavor.Name {
		fields[AppFieldDefaultFlavorName] = struct{}{}
		fields[AppFieldDefaultFlavor] = struct{}{}
	}
	if m.AuthPublicKey != o.AuthPublicKey {
		fields[AppFieldAuthPublicKey] = struct{}{}
	}
	if m.Command != o.Command {
		fields[AppFieldCommand] = struct{}{}
	}
	if m.Annotations != o.Annotations {
		fields[AppFieldAnnotations] = struct{}{}
	}
	if m.Deployment != o.Deployment {
		fields[AppFieldDeployment] = struct{}{}
	}
	if m.DeploymentManifest != o.DeploymentManifest {
		fields[AppFieldDeploymentManifest] = struct{}{}
	}
	if m.DeploymentGenerator != o.DeploymentGenerator {
		fields[AppFieldDeploymentGenerator] = struct{}{}
	}
	if m.AndroidPackageName != o.AndroidPackageName {
		fields[AppFieldAndroidPackageName] = struct{}{}
	}
	if m.DelOpt != o.DelOpt {
		fields[AppFieldDelOpt] = struct{}{}
	}
	if m.Configs != nil && o.Configs != nil {
		if len(m.Configs) != len(o.Configs) {
			fields[AppFieldConfigs] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.Configs); i0++ {
				if m.Configs[i0].Kind != o.Configs[i0].Kind {
					fields[AppFieldConfigsKind] = struct{}{}
					fields[AppFieldConfigs] = struct{}{}
				}
				if m.Configs[i0].Config != o.Configs[i0].Config {
					fields[AppFieldConfigsConfig] = struct{}{}
					fields[AppFieldConfigs] = struct{}{}
				}
			}
		}
	} else if (m.Configs != nil && o.Configs == nil) || (m.Configs == nil && o.Configs != nil) {
		fields[AppFieldConfigs] = struct{}{}
	}
	if m.ScaleWithCluster != o.ScaleWithCluster {
		fields[AppFieldScaleWithCluster] = struct{}{}
	}
	if m.InternalPorts != o.InternalPorts {
		fields[AppFieldInternalPorts] = struct{}{}
	}
	if m.Revision != o.Revision {
		fields[AppFieldRevision] = struct{}{}
	}
	if m.OfficialFqdn != o.OfficialFqdn {
		fields[AppFieldOfficialFqdn] = struct{}{}
	}
	if m.Md5Sum != o.Md5Sum {
		fields[AppFieldMd5Sum] = struct{}{}
	}
	if m.AutoProvPolicy != o.AutoProvPolicy {
		fields[AppFieldAutoProvPolicy] = struct{}{}
	}
	if m.AccessType != o.AccessType {
		fields[AppFieldAccessType] = struct{}{}
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields[AppFieldDeletePrepare] = struct{}{}
	}
	if len(m.AutoProvPolicies) != len(o.AutoProvPolicies) {
		fields[AppFieldAutoProvPolicies] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.AutoProvPolicies); i0++ {
			if m.AutoProvPolicies[i0] != o.AutoProvPolicies[i0] {
				fields[AppFieldAutoProvPolicies] = struct{}{}
				break
			}
		}
	}
	if m.TemplateDelimiter != o.TemplateDelimiter {
		fields[AppFieldTemplateDelimiter] = struct{}{}
	}
	if m.SkipHcPorts != o.SkipHcPorts {
		fields[AppFieldSkipHcPorts] = struct{}{}
	}
	if m.CreatedAt.Seconds != o.CreatedAt.Seconds {
		fields[AppFieldCreatedAtSeconds] = struct{}{}
		fields[AppFieldCreatedAt] = struct{}{}
	}
	if m.CreatedAt.Nanos != o.CreatedAt.Nanos {
		fields[AppFieldCreatedAtNanos] = struct{}{}
		fields[AppFieldCreatedAt] = struct{}{}
	}
	if m.UpdatedAt.Seconds != o.UpdatedAt.Seconds {
		fields[AppFieldUpdatedAtSeconds] = struct{}{}
		fields[AppFieldUpdatedAt] = struct{}{}
	}
	if m.UpdatedAt.Nanos != o.UpdatedAt.Nanos {
		fields[AppFieldUpdatedAtNanos] = struct{}{}
		fields[AppFieldUpdatedAt] = struct{}{}
	}
	if m.Trusted != o.Trusted {
		fields[AppFieldTrusted] = struct{}{}
	}
	if len(m.RequiredOutboundConnections) != len(o.RequiredOutboundConnections) {
		fields[AppFieldRequiredOutboundConnections] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RequiredOutboundConnections); i0++ {
			if m.RequiredOutboundConnections[i0].Protocol != o.RequiredOutboundConnections[i0].Protocol {
				fields[AppFieldRequiredOutboundConnectionsProtocol] = struct{}{}
				fields[AppFieldRequiredOutboundConnections] = struct{}{}
			}
			if m.RequiredOutboundConnections[i0].PortRangeMin != o.RequiredOutboundConnections[i0].PortRangeMin {
				fields[AppFieldRequiredOutboundConnectionsPortRangeMin] = struct{}{}
				fields[AppFieldRequiredOutboundConnections] = struct{}{}
			}
			if m.RequiredOutboundConnections[i0].PortRangeMax != o.RequiredOutboundConnections[i0].PortRangeMax {
				fields[AppFieldRequiredOutboundConnectionsPortRangeMax] = struct{}{}
				fields[AppFieldRequiredOutboundConnections] = struct{}{}
			}
			if m.RequiredOutboundConnections[i0].RemoteCidr != o.RequiredOutboundConnections[i0].RemoteCidr {
				fields[AppFieldRequiredOutboundConnectionsRemoteCidr] = struct{}{}
				fields[AppFieldRequiredOutboundConnections] = struct{}{}
			}
		}
	}
	if m.AllowServerless != o.AllowServerless {
		fields[AppFieldAllowServerless] = struct{}{}
	}
	if m.ServerlessConfig != nil && o.ServerlessConfig != nil {
		if m.ServerlessConfig.Vcpus.Whole != o.ServerlessConfig.Vcpus.Whole {
			fields[AppFieldServerlessConfigVcpusWhole] = struct{}{}
			fields[AppFieldServerlessConfigVcpus] = struct{}{}
			fields[AppFieldServerlessConfig] = struct{}{}
		}
		if m.ServerlessConfig.Vcpus.Nanos != o.ServerlessConfig.Vcpus.Nanos {
			fields[AppFieldServerlessConfigVcpusNanos] = struct{}{}
			fields[AppFieldServerlessConfigVcpus] = struct{}{}
			fields[AppFieldServerlessConfig] = struct{}{}
		}
		if m.ServerlessConfig.Ram != o.ServerlessConfig.Ram {
			fields[AppFieldServerlessConfigRam] = struct{}{}
			fields[AppFieldServerlessConfig] = struct{}{}
		}
		if m.ServerlessConfig.MinReplicas != o.ServerlessConfig.MinReplicas {
			fields[AppFieldServerlessConfigMinReplicas] = struct{}{}
			fields[AppFieldServerlessConfig] = struct{}{}
		}
	} else if (m.ServerlessConfig != nil && o.ServerlessConfig == nil) || (m.ServerlessConfig == nil && o.ServerlessConfig != nil) {
		fields[AppFieldServerlessConfig] = struct{}{}
	}
	if m.VmAppOsType != o.VmAppOsType {
		fields[AppFieldVmAppOsType] = struct{}{}
	}
	if len(m.AlertPolicies) != len(o.AlertPolicies) {
		fields[AppFieldAlertPolicies] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.AlertPolicies); i0++ {
			if m.AlertPolicies[i0] != o.AlertPolicies[i0] {
				fields[AppFieldAlertPolicies] = struct{}{}
				break
			}
		}
	}
	if m.QosNetworkPriorityType != o.QosNetworkPriorityType {
		fields[AppFieldQosNetworkPriorityType] = struct{}{}
	}
	if m.QosLatencyProfile != o.QosLatencyProfile {
		fields[AppFieldQosLatencyProfile] = struct{}{}
	}
	if m.QosThroughputProfile != o.QosThroughputProfile {
		fields[AppFieldQosThroughputProfile] = struct{}{}
	}
}

var UpdateAppFieldsMap = map[string]struct{}{
	AppFieldImagePath:                               struct{}{},
	AppFieldImageType:                               struct{}{},
	AppFieldAccessPorts:                             struct{}{},
	AppFieldDefaultFlavor:                           struct{}{},
	AppFieldDefaultFlavorName:                       struct{}{},
	AppFieldAuthPublicKey:                           struct{}{},
	AppFieldCommand:                                 struct{}{},
	AppFieldAnnotations:                             struct{}{},
	AppFieldDeployment:                              struct{}{},
	AppFieldDeploymentManifest:                      struct{}{},
	AppFieldDeploymentGenerator:                     struct{}{},
	AppFieldAndroidPackageName:                      struct{}{},
	AppFieldConfigs:                                 struct{}{},
	AppFieldConfigsKind:                             struct{}{},
	AppFieldConfigsConfig:                           struct{}{},
	AppFieldScaleWithCluster:                        struct{}{},
	AppFieldInternalPorts:                           struct{}{},
	AppFieldRevision:                                struct{}{},
	AppFieldOfficialFqdn:                            struct{}{},
	AppFieldMd5Sum:                                  struct{}{},
	AppFieldAccessType:                              struct{}{},
	AppFieldAutoProvPolicies:                        struct{}{},
	AppFieldTemplateDelimiter:                       struct{}{},
	AppFieldSkipHcPorts:                             struct{}{},
	AppFieldTrusted:                                 struct{}{},
	AppFieldRequiredOutboundConnections:             struct{}{},
	AppFieldRequiredOutboundConnectionsProtocol:     struct{}{},
	AppFieldRequiredOutboundConnectionsPortRangeMin: struct{}{},
	AppFieldRequiredOutboundConnectionsPortRangeMax: struct{}{},
	AppFieldRequiredOutboundConnectionsRemoteCidr:   struct{}{},
	AppFieldAllowServerless:                         struct{}{},
	AppFieldServerlessConfig:                        struct{}{},
	AppFieldServerlessConfigVcpus:                   struct{}{},
	AppFieldServerlessConfigVcpusWhole:              struct{}{},
	AppFieldServerlessConfigVcpusNanos:              struct{}{},
	AppFieldServerlessConfigRam:                     struct{}{},
	AppFieldServerlessConfigMinReplicas:             struct{}{},
	AppFieldVmAppOsType:                             struct{}{},
	AppFieldAlertPolicies:                           struct{}{},
	AppFieldQosNetworkPriorityType:                  struct{}{},
	AppFieldQosLatencyProfile:                       struct{}{},
	AppFieldQosThroughputProfile:                    struct{}{},
}

func (m *App) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateAppFieldsMap[field]; !ok {
			if _, ok := AppAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, AppAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *App) CopyInFields(src *App) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if m.Key.Version != src.Key.Version {
				m.Key.Version = src.Key.Version
				changed++
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.ImagePath != src.ImagePath {
			m.ImagePath = src.ImagePath
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.ImageType != src.ImageType {
			m.ImageType = src.ImageType
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.AccessPorts != src.AccessPorts {
			m.AccessPorts = src.AccessPorts
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if _, set := fmap["9.1"]; set {
			if m.DefaultFlavor.Name != src.DefaultFlavor.Name {
				m.DefaultFlavor.Name = src.DefaultFlavor.Name
				changed++
			}
		}
	}
	if _, set := fmap["12"]; set {
		if m.AuthPublicKey != src.AuthPublicKey {
			m.AuthPublicKey = src.AuthPublicKey
			changed++
		}
	}
	if _, set := fmap["13"]; set {
		if m.Command != src.Command {
			m.Command = src.Command
			changed++
		}
	}
	if _, set := fmap["14"]; set {
		if m.Annotations != src.Annotations {
			m.Annotations = src.Annotations
			changed++
		}
	}
	if _, set := fmap["15"]; set {
		if m.Deployment != src.Deployment {
			m.Deployment = src.Deployment
			changed++
		}
	}
	if _, set := fmap["16"]; set {
		if m.DeploymentManifest != src.DeploymentManifest {
			m.DeploymentManifest = src.DeploymentManifest
			changed++
		}
	}
	if _, set := fmap["17"]; set {
		if m.DeploymentGenerator != src.DeploymentGenerator {
			m.DeploymentGenerator = src.DeploymentGenerator
			changed++
		}
	}
	if _, set := fmap["18"]; set {
		if m.AndroidPackageName != src.AndroidPackageName {
			m.AndroidPackageName = src.AndroidPackageName
			changed++
		}
	}
	if _, set := fmap["20"]; set {
		if m.DelOpt != src.DelOpt {
			m.DelOpt = src.DelOpt
			changed++
		}
	}
	if _, set := fmap["21"]; set {
		if src.Configs != nil {
			m.Configs = src.Configs
			changed++
		} else if m.Configs != nil {
			m.Configs = nil
			changed++
		}
	}
	if _, set := fmap["22"]; set {
		if m.ScaleWithCluster != src.ScaleWithCluster {
			m.ScaleWithCluster = src.ScaleWithCluster
			changed++
		}
	}
	if _, set := fmap["23"]; set {
		if m.InternalPorts != src.InternalPorts {
			m.InternalPorts = src.InternalPorts
			changed++
		}
	}
	if _, set := fmap["24"]; set {
		if m.Revision != src.Revision {
			m.Revision = src.Revision
			changed++
		}
	}
	if _, set := fmap["25"]; set {
		if m.OfficialFqdn != src.OfficialFqdn {
			m.OfficialFqdn = src.OfficialFqdn
			changed++
		}
	}
	if _, set := fmap["26"]; set {
		if m.Md5Sum != src.Md5Sum {
			m.Md5Sum = src.Md5Sum
			changed++
		}
	}
	if _, set := fmap["28"]; set {
		if m.AutoProvPolicy != src.AutoProvPolicy {
			m.AutoProvPolicy = src.AutoProvPolicy
			changed++
		}
	}
	if _, set := fmap["29"]; set {
		if m.AccessType != src.AccessType {
			m.AccessType = src.AccessType
			changed++
		}
	}
	if _, set := fmap["31"]; set {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	if _, set := fmap["32"]; set {
		if src.AutoProvPolicies != nil {
			m.AutoProvPolicies = src.AutoProvPolicies
			changed++
		} else if m.AutoProvPolicies != nil {
			m.AutoProvPolicies = nil
			changed++
		}
	}
	if _, set := fmap["33"]; set {
		if m.TemplateDelimiter != src.TemplateDelimiter {
			m.TemplateDelimiter = src.TemplateDelimiter
			changed++
		}
	}
	if _, set := fmap["34"]; set {
		if m.SkipHcPorts != src.SkipHcPorts {
			m.SkipHcPorts = src.SkipHcPorts
			changed++
		}
	}
	if _, set := fmap["35"]; set {
		if _, set := fmap["35.1"]; set {
			if m.CreatedAt.Seconds != src.CreatedAt.Seconds {
				m.CreatedAt.Seconds = src.CreatedAt.Seconds
				changed++
			}
		}
		if _, set := fmap["35.2"]; set {
			if m.CreatedAt.Nanos != src.CreatedAt.Nanos {
				m.CreatedAt.Nanos = src.CreatedAt.Nanos
				changed++
			}
		}
	}
	if _, set := fmap["36"]; set {
		if _, set := fmap["36.1"]; set {
			if m.UpdatedAt.Seconds != src.UpdatedAt.Seconds {
				m.UpdatedAt.Seconds = src.UpdatedAt.Seconds
				changed++
			}
		}
		if _, set := fmap["36.2"]; set {
			if m.UpdatedAt.Nanos != src.UpdatedAt.Nanos {
				m.UpdatedAt.Nanos = src.UpdatedAt.Nanos
				changed++
			}
		}
	}
	if _, set := fmap["37"]; set {
		if m.Trusted != src.Trusted {
			m.Trusted = src.Trusted
			changed++
		}
	}
	if _, set := fmap["38"]; set {
		if src.RequiredOutboundConnections != nil {
			m.RequiredOutboundConnections = src.RequiredOutboundConnections
			changed++
		} else if m.RequiredOutboundConnections != nil {
			m.RequiredOutboundConnections = nil
			changed++
		}
	}
	if _, set := fmap["39"]; set {
		if m.AllowServerless != src.AllowServerless {
			m.AllowServerless = src.AllowServerless
			changed++
		}
	}
	if _, set := fmap["40"]; set {
		if src.ServerlessConfig != nil {
			m.ServerlessConfig = &ServerlessConfig{}
			if _, set := fmap["40.1"]; set {
				if _, set := fmap["40.1.1"]; set {
					if m.ServerlessConfig.Vcpus.Whole != src.ServerlessConfig.Vcpus.Whole {
						m.ServerlessConfig.Vcpus.Whole = src.ServerlessConfig.Vcpus.Whole
						changed++
					}
				}
				if _, set := fmap["40.1.2"]; set {
					if m.ServerlessConfig.Vcpus.Nanos != src.ServerlessConfig.Vcpus.Nanos {
						m.ServerlessConfig.Vcpus.Nanos = src.ServerlessConfig.Vcpus.Nanos
						changed++
					}
				}
			}
			if _, set := fmap["40.2"]; set {
				if m.ServerlessConfig.Ram != src.ServerlessConfig.Ram {
					m.ServerlessConfig.Ram = src.ServerlessConfig.Ram
					changed++
				}
			}
			if _, set := fmap["40.3"]; set {
				if m.ServerlessConfig.MinReplicas != src.ServerlessConfig.MinReplicas {
					m.ServerlessConfig.MinReplicas = src.ServerlessConfig.MinReplicas
					changed++
				}
			}
		} else if m.ServerlessConfig != nil {
			m.ServerlessConfig = nil
			changed++
		}
	}
	if _, set := fmap["41"]; set {
		if m.VmAppOsType != src.VmAppOsType {
			m.VmAppOsType = src.VmAppOsType
			changed++
		}
	}
	if _, set := fmap["42"]; set {
		if src.AlertPolicies != nil {
			m.AlertPolicies = src.AlertPolicies
			changed++
		} else if m.AlertPolicies != nil {
			m.AlertPolicies = nil
			changed++
		}
	}
	if _, set := fmap["43"]; set {
		if m.QosNetworkPriorityType != src.QosNetworkPriorityType {
			m.QosNetworkPriorityType = src.QosNetworkPriorityType
			changed++
		}
	}
	if _, set := fmap["44"]; set {
		if m.QosLatencyProfile != src.QosLatencyProfile {
			m.QosLatencyProfile = src.QosLatencyProfile
			changed++
		}
	}
	if _, set := fmap["45"]; set {
		if m.QosThroughputProfile != src.QosThroughputProfile {
			m.QosThroughputProfile = src.QosThroughputProfile
			changed++
		}
	}
	return changed
}

func (m *App) DeepCopyIn(src *App) {
	m.Key.DeepCopyIn(&src.Key)
	m.ImagePath = src.ImagePath
	m.ImageType = src.ImageType
	m.AccessPorts = src.AccessPorts
	m.DefaultFlavor.DeepCopyIn(&src.DefaultFlavor)
	m.AuthPublicKey = src.AuthPublicKey
	m.Command = src.Command
	m.Annotations = src.Annotations
	m.Deployment = src.Deployment
	m.DeploymentManifest = src.DeploymentManifest
	m.DeploymentGenerator = src.DeploymentGenerator
	m.AndroidPackageName = src.AndroidPackageName
	m.DelOpt = src.DelOpt
	if src.Configs != nil {
		m.Configs = make([]*ConfigFile, len(src.Configs), len(src.Configs))
		for ii, s := range src.Configs {
			var tmp_s ConfigFile
			tmp_s.DeepCopyIn(s)
			m.Configs[ii] = &tmp_s
		}
	} else {
		m.Configs = nil
	}
	m.ScaleWithCluster = src.ScaleWithCluster
	m.InternalPorts = src.InternalPorts
	m.Revision = src.Revision
	m.OfficialFqdn = src.OfficialFqdn
	m.Md5Sum = src.Md5Sum
	m.AutoProvPolicy = src.AutoProvPolicy
	m.AccessType = src.AccessType
	m.DeletePrepare = src.DeletePrepare
	if src.AutoProvPolicies != nil {
		m.AutoProvPolicies = make([]string, len(src.AutoProvPolicies), len(src.AutoProvPolicies))
		for ii, s := range src.AutoProvPolicies {
			m.AutoProvPolicies[ii] = s
		}
	} else {
		m.AutoProvPolicies = nil
	}
	m.TemplateDelimiter = src.TemplateDelimiter
	m.SkipHcPorts = src.SkipHcPorts
	m.CreatedAt = src.CreatedAt
	m.UpdatedAt = src.UpdatedAt
	m.Trusted = src.Trusted
	if src.RequiredOutboundConnections != nil {
		m.RequiredOutboundConnections = make([]SecurityRule, len(src.RequiredOutboundConnections), len(src.RequiredOutboundConnections))
		for ii, s := range src.RequiredOutboundConnections {
			m.RequiredOutboundConnections[ii].DeepCopyIn(&s)
		}
	} else {
		m.RequiredOutboundConnections = nil
	}
	m.AllowServerless = src.AllowServerless
	if src.ServerlessConfig != nil {
		var tmp_ServerlessConfig ServerlessConfig
		tmp_ServerlessConfig.DeepCopyIn(src.ServerlessConfig)
		m.ServerlessConfig = &tmp_ServerlessConfig
	} else {
		m.ServerlessConfig = nil
	}
	m.VmAppOsType = src.VmAppOsType
	if src.AlertPolicies != nil {
		m.AlertPolicies = make([]string, len(src.AlertPolicies), len(src.AlertPolicies))
		for ii, s := range src.AlertPolicies {
			m.AlertPolicies[ii] = s
		}
	} else {
		m.AlertPolicies = nil
	}
	m.QosNetworkPriorityType = src.QosNetworkPriorityType
	m.QosLatencyProfile = src.QosLatencyProfile
	m.QosThroughputProfile = src.QosThroughputProfile
}

func (s *App) HasFields() bool {
	return true
}

type AppStore interface {
	Create(ctx context.Context, m *App, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *App, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *App, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *App, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*App, int64, error)
	Get(ctx context.Context, key *AppKey, buf *App) bool
	STMGet(stm concurrency.STM, key *AppKey, buf *App) bool
	STMPut(stm concurrency.STM, obj *App, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *AppKey)
}

type AppStoreImpl struct {
	kvstore objstore.KVStore
}

func NewAppStore(kvstore objstore.KVStore) *AppStoreImpl {
	return &AppStoreImpl{kvstore: kvstore}
}

func (s *AppStoreImpl) Create(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStoreImpl) Update(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur App
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStoreImpl) Put(ctx context.Context, m *App, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStoreImpl) Delete(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStoreImpl) LoadOne(key string) (*App, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj App
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse App data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppStoreImpl) Get(ctx context.Context, key *AppKey, buf *App) bool {
	keystr := objstore.DbKeyString("App", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *AppStoreImpl) STMGet(stm concurrency.STM, key *AppKey, buf *App) bool {
	keystr := objstore.DbKeyString("App", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *AppStoreImpl) parseGetData(val []byte, buf *App) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = App{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppStoreImpl) STMPut(stm concurrency.STM, obj *App, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("App", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("App json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AppStoreImpl) STMDel(stm concurrency.STM, key *AppKey) {
	keystr := objstore.DbKeyString("App", key)
	stm.Del(keystr)
}

type AppKeyWatcher struct {
	cb func(ctx context.Context)
}

type AppCacheData struct {
	Obj    *App
	ModRev int64
}

// AppCache caches App objects in memory in a hash table
// and keeps them in sync with the database.
type AppCache struct {
	Objs          map[AppKey]*AppCacheData
	Mux           util.Mutex
	List          map[AppKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AppKey, old *App, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *App, new *App)
	DeletedCbs    []func(ctx context.Context, old *App)
	KeyWatchers   map[AppKey][]*AppKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *AppKey)
	DeletedKeyCbs []func(ctx context.Context, key *AppKey)
}

func NewAppCache() *AppCache {
	cache := AppCache{}
	InitAppCache(&cache)
	return &cache
}

func InitAppCache(cache *AppCache) {
	cache.Objs = make(map[AppKey]*AppCacheData)
	cache.KeyWatchers = make(map[AppKey][]*AppKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AppCache) GetTypeString() string {
	return "App"
}

func (c *AppCache) Get(key *AppKey, valbuf *App) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AppCache) GetWithRev(key *AppKey, valbuf *App, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AppCache) HasKey(key *AppKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppCache) GetAllKeys(ctx context.Context, cb func(key *AppKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AppCache) Update(ctx context.Context, in *App, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *App) (*App, bool) {
		return in, true
	})
}

func (c *AppCache) UpdateModFunc(ctx context.Context, key *AppKey, modRev int64, modFunc func(old *App) (new *App, changed bool)) {
	c.Mux.Lock()
	var old *App
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &App{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &App{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AppCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AppCache) Delete(ctx context.Context, in *App, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *App) bool {
		return true
	})
}

func (c *AppCache) DeleteCondFunc(ctx context.Context, in *App, modRev int64, condFunc func(old *App) bool) {
	c.Mux.Lock()
	var old *App
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AppCache) Prune(ctx context.Context, validKeys map[AppKey]struct{}) {
	notify := make(map[AppKey]*AppCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AppCache) Show(filter *App, cb func(ret *App) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AppGenericNotifyCb(fn func(key *AppKey, old *App)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AppKey), obj.(*App))
	}
}

func (c *AppCache) SetNotifyCb(fn func(ctx context.Context, obj *AppKey, old *App, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AppKey, old *App, modRev int64){fn}
}

func (c *AppCache) SetUpdatedCb(fn func(ctx context.Context, old *App, new *App)) {
	c.UpdatedCbs = []func(ctx context.Context, old *App, new *App){fn}
}

func (c *AppCache) SetDeletedCb(fn func(ctx context.Context, old *App)) {
	c.DeletedCbs = []func(ctx context.Context, old *App){fn}
}

func (c *AppCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *AppKey){fn}
}

func (c *AppCache) SetDeletedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *AppKey){fn}
}

func (c *AppCache) AddUpdatedCb(fn func(ctx context.Context, old *App, new *App)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AppCache) AddDeletedCb(fn func(ctx context.Context, old *App)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AppCache) AddNotifyCb(fn func(ctx context.Context, obj *AppKey, old *App, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AppCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AppCache) AddDeletedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AppCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AppCache) WatchKey(key *AppKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AppKeyWatcher, 0)
	}
	watcher := AppKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching App", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AppCache) TriggerKeyWatchers(ctx context.Context, key *AppKey) {
	watchers := make([]*AppKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AppCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := App{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse App data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := App{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AppCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AppKey]struct{})
}

func (c *AppCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AppKey]*AppCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

type AppByAutoProvPolicy struct {
	AutoProvPolicys map[PolicyKey]map[AppKey]struct{}
	Mux             util.Mutex
}

func (s *AppByAutoProvPolicy) Init() {
	s.AutoProvPolicys = make(map[PolicyKey]map[AppKey]struct{})
}

func (s *AppByAutoProvPolicy) Updated(old *App, new *App) map[PolicyKey]struct{} {
	// the below func must be implemented by the user:
	// App.GetAutoProvPolicys() map[PolicyKey]struct{}
	oldAutoProvPolicys := make(map[PolicyKey]struct{})
	if old != nil {
		oldAutoProvPolicys = old.GetAutoProvPolicys()
	}
	newAutoProvPolicys := new.GetAutoProvPolicys()

	for lookup, _ := range oldAutoProvPolicys {
		if _, found := newAutoProvPolicys[lookup]; found {
			delete(oldAutoProvPolicys, lookup)
			delete(newAutoProvPolicys, lookup)
		}
	}

	s.Mux.Lock()
	defer s.Mux.Unlock()

	changed := make(map[PolicyKey]struct{})
	for lookup, _ := range oldAutoProvPolicys {
		// remove
		s.removeRef(lookup, old.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	for lookup, _ := range newAutoProvPolicys {
		// add
		s.addRef(lookup, new.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	return changed
}

func (s *AppByAutoProvPolicy) Deleted(old *App) {
	oldAutoProvPolicys := old.GetAutoProvPolicys()

	s.Mux.Lock()
	defer s.Mux.Unlock()

	for lookup, _ := range oldAutoProvPolicys {
		s.removeRef(lookup, old.GetKeyVal())
	}
}

func (s *AppByAutoProvPolicy) addRef(lookup PolicyKey, key AppKey) {
	AppKeys, found := s.AutoProvPolicys[lookup]
	if !found {
		AppKeys = make(map[AppKey]struct{})
		s.AutoProvPolicys[lookup] = AppKeys
	}
	AppKeys[key] = struct{}{}
}

func (s *AppByAutoProvPolicy) removeRef(lookup PolicyKey, key AppKey) {
	AppKeys, found := s.AutoProvPolicys[lookup]
	if found {
		delete(AppKeys, key)
		if len(AppKeys) == 0 {
			delete(s.AutoProvPolicys, lookup)
		}
	}
}

func (s *AppByAutoProvPolicy) Find(lookup PolicyKey) []AppKey {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	list := []AppKey{}
	for k, _ := range s.AutoProvPolicys[lookup] {
		list = append(list, k)
	}
	return list
}

func (s *AppByAutoProvPolicy) HasRef(lookup PolicyKey) bool {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	_, found := s.AutoProvPolicys[lookup]
	return found
}

// Convert to dumpable format. JSON cannot marshal maps with struct keys.
func (s *AppByAutoProvPolicy) Dumpable() map[string]interface{} {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	dat := make(map[string]interface{})
	for lookup, keys := range s.AutoProvPolicys {
		keystrs := make(map[string]interface{})
		for k, _ := range keys {
			keystrs[k.GetKeyString()] = struct{}{}
		}
		dat[lookup.GetKeyString()] = keystrs
	}
	return dat
}

func (m *App) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *App) GetKey() *AppKey {
	return &m.Key
}

func (m *App) GetKeyVal() AppKey {
	return m.Key
}

func (m *App) SetKey(key *AppKey) {
	m.Key = *key
}

func CmpSortApp(a App, b App) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *App) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := ImageType_name[int32(m.ImageType)]; !ok {
		return errors.New("invalid ImageType")
	}
	if err := m.DefaultFlavor.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := DeleteType_name[int32(m.DelOpt)]; !ok {
		return errors.New("invalid DelOpt")
	}
	for _, e := range m.Configs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := AccessType_name[int32(m.AccessType)]; !ok {
		return errors.New("invalid AccessType")
	}
	for _, e := range m.RequiredOutboundConnections {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if m.ServerlessConfig != nil {
		if err := m.ServerlessConfig.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := VmAppOsType_name[int32(m.VmAppOsType)]; !ok {
		return errors.New("invalid VmAppOsType")
	}
	if _, ok := QosNetworkPriorityType_name[int32(m.QosNetworkPriorityType)]; !ok {
		return errors.New("invalid QosNetworkPriorityType")
	}
	if _, ok := QosLatencyProfile_name[int32(m.QosLatencyProfile)]; !ok {
		return errors.New("invalid QosLatencyProfile")
	}
	if _, ok := QosThroughputProfile_name[int32(m.QosThroughputProfile)]; !ok {
		return errors.New("invalid QosThroughputProfile")
	}
	return nil
}

func IgnoreAppFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DelOpt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Revision")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeletePrepare")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "UpdatedAt")
	}
	return cmpopts.IgnoreFields(App{}, names...)
}

func (m *ServerlessConfig) CopyInFields(src *ServerlessConfig) int {
	changed := 0
	if m.Vcpus.Whole != src.Vcpus.Whole {
		m.Vcpus.Whole = src.Vcpus.Whole
		changed++
	}
	if m.Vcpus.Nanos != src.Vcpus.Nanos {
		m.Vcpus.Nanos = src.Vcpus.Nanos
		changed++
	}
	if m.Ram != src.Ram {
		m.Ram = src.Ram
		changed++
	}
	if m.MinReplicas != src.MinReplicas {
		m.MinReplicas = src.MinReplicas
		changed++
	}
	return changed
}

func (m *ServerlessConfig) DeepCopyIn(src *ServerlessConfig) {
	m.Vcpus.DeepCopyIn(&src.Vcpus)
	m.Ram = src.Ram
	m.MinReplicas = src.MinReplicas
}

// Helper method to check that enums have valid values
func (m *ServerlessConfig) ValidateEnums() error {
	if err := m.Vcpus.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AppAutoProvPolicy) CopyInFields(src *AppAutoProvPolicy) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.AutoProvPolicy != src.AutoProvPolicy {
		m.AutoProvPolicy = src.AutoProvPolicy
		changed++
	}
	return changed
}

func (m *AppAutoProvPolicy) DeepCopyIn(src *AppAutoProvPolicy) {
	m.AppKey.DeepCopyIn(&src.AppKey)
	m.AutoProvPolicy = src.AutoProvPolicy
}

// Helper method to check that enums have valid values
func (m *AppAutoProvPolicy) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AppAlertPolicy) CopyInFields(src *AppAlertPolicy) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.AlertPolicy != src.AlertPolicy {
		m.AlertPolicy = src.AlertPolicy
		changed++
	}
	return changed
}

func (m *AppAlertPolicy) DeepCopyIn(src *AppAlertPolicy) {
	m.AppKey.DeepCopyIn(&src.AppKey)
	m.AlertPolicy = src.AlertPolicy
}

// Helper method to check that enums have valid values
func (m *AppAlertPolicy) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentCloudletRequest) CopyInFields(src *DeploymentCloudletRequest) int {
	changed := 0
	if src.App != nil {
		m.App = &App{}
		if m.App.Key.Organization != src.App.Key.Organization {
			m.App.Key.Organization = src.App.Key.Organization
			changed++
		}
		if m.App.Key.Name != src.App.Key.Name {
			m.App.Key.Name = src.App.Key.Name
			changed++
		}
		if m.App.Key.Version != src.App.Key.Version {
			m.App.Key.Version = src.App.Key.Version
			changed++
		}
		if m.App.ImagePath != src.App.ImagePath {
			m.App.ImagePath = src.App.ImagePath
			changed++
		}
		if m.App.ImageType != src.App.ImageType {
			m.App.ImageType = src.App.ImageType
			changed++
		}
		if m.App.AccessPorts != src.App.AccessPorts {
			m.App.AccessPorts = src.App.AccessPorts
			changed++
		}
		if m.App.DefaultFlavor.Name != src.App.DefaultFlavor.Name {
			m.App.DefaultFlavor.Name = src.App.DefaultFlavor.Name
			changed++
		}
		if m.App.AuthPublicKey != src.App.AuthPublicKey {
			m.App.AuthPublicKey = src.App.AuthPublicKey
			changed++
		}
		if m.App.Command != src.App.Command {
			m.App.Command = src.App.Command
			changed++
		}
		if m.App.Annotations != src.App.Annotations {
			m.App.Annotations = src.App.Annotations
			changed++
		}
		if m.App.Deployment != src.App.Deployment {
			m.App.Deployment = src.App.Deployment
			changed++
		}
		if m.App.DeploymentManifest != src.App.DeploymentManifest {
			m.App.DeploymentManifest = src.App.DeploymentManifest
			changed++
		}
		if m.App.DeploymentGenerator != src.App.DeploymentGenerator {
			m.App.DeploymentGenerator = src.App.DeploymentGenerator
			changed++
		}
		if m.App.AndroidPackageName != src.App.AndroidPackageName {
			m.App.AndroidPackageName = src.App.AndroidPackageName
			changed++
		}
		if m.App.DelOpt != src.App.DelOpt {
			m.App.DelOpt = src.App.DelOpt
			changed++
		}
		if src.App.Configs != nil {
			m.App.Configs = src.App.Configs
			changed++
		} else if m.App.Configs != nil {
			m.App.Configs = nil
			changed++
		}
		if m.App.ScaleWithCluster != src.App.ScaleWithCluster {
			m.App.ScaleWithCluster = src.App.ScaleWithCluster
			changed++
		}
		if m.App.InternalPorts != src.App.InternalPorts {
			m.App.InternalPorts = src.App.InternalPorts
			changed++
		}
		if m.App.Revision != src.App.Revision {
			m.App.Revision = src.App.Revision
			changed++
		}
		if m.App.OfficialFqdn != src.App.OfficialFqdn {
			m.App.OfficialFqdn = src.App.OfficialFqdn
			changed++
		}
		if m.App.Md5Sum != src.App.Md5Sum {
			m.App.Md5Sum = src.App.Md5Sum
			changed++
		}
		if m.App.AutoProvPolicy != src.App.AutoProvPolicy {
			m.App.AutoProvPolicy = src.App.AutoProvPolicy
			changed++
		}
		if m.App.AccessType != src.App.AccessType {
			m.App.AccessType = src.App.AccessType
			changed++
		}
		if m.App.DeletePrepare != src.App.DeletePrepare {
			m.App.DeletePrepare = src.App.DeletePrepare
			changed++
		}
		if src.App.AutoProvPolicies != nil {
			m.App.AutoProvPolicies = src.App.AutoProvPolicies
			changed++
		} else if m.App.AutoProvPolicies != nil {
			m.App.AutoProvPolicies = nil
			changed++
		}
		if m.App.TemplateDelimiter != src.App.TemplateDelimiter {
			m.App.TemplateDelimiter = src.App.TemplateDelimiter
			changed++
		}
		if m.App.SkipHcPorts != src.App.SkipHcPorts {
			m.App.SkipHcPorts = src.App.SkipHcPorts
			changed++
		}
		if m.App.CreatedAt.Seconds != src.App.CreatedAt.Seconds {
			m.App.CreatedAt.Seconds = src.App.CreatedAt.Seconds
			changed++
		}
		if m.App.CreatedAt.Nanos != src.App.CreatedAt.Nanos {
			m.App.CreatedAt.Nanos = src.App.CreatedAt.Nanos
			changed++
		}
		if m.App.UpdatedAt.Seconds != src.App.UpdatedAt.Seconds {
			m.App.UpdatedAt.Seconds = src.App.UpdatedAt.Seconds
			changed++
		}
		if m.App.UpdatedAt.Nanos != src.App.UpdatedAt.Nanos {
			m.App.UpdatedAt.Nanos = src.App.UpdatedAt.Nanos
			changed++
		}
		if m.App.Trusted != src.App.Trusted {
			m.App.Trusted = src.App.Trusted
			changed++
		}
		if src.App.RequiredOutboundConnections != nil {
			m.App.RequiredOutboundConnections = src.App.RequiredOutboundConnections
			changed++
		} else if m.App.RequiredOutboundConnections != nil {
			m.App.RequiredOutboundConnections = nil
			changed++
		}
		if m.App.AllowServerless != src.App.AllowServerless {
			m.App.AllowServerless = src.App.AllowServerless
			changed++
		}
		if src.App.ServerlessConfig != nil {
			m.App.ServerlessConfig = &ServerlessConfig{}
			if m.App.ServerlessConfig.Vcpus.Whole != src.App.ServerlessConfig.Vcpus.Whole {
				m.App.ServerlessConfig.Vcpus.Whole = src.App.ServerlessConfig.Vcpus.Whole
				changed++
			}
			if m.App.ServerlessConfig.Vcpus.Nanos != src.App.ServerlessConfig.Vcpus.Nanos {
				m.App.ServerlessConfig.Vcpus.Nanos = src.App.ServerlessConfig.Vcpus.Nanos
				changed++
			}
			if m.App.ServerlessConfig.Ram != src.App.ServerlessConfig.Ram {
				m.App.ServerlessConfig.Ram = src.App.ServerlessConfig.Ram
				changed++
			}
			if m.App.ServerlessConfig.MinReplicas != src.App.ServerlessConfig.MinReplicas {
				m.App.ServerlessConfig.MinReplicas = src.App.ServerlessConfig.MinReplicas
				changed++
			}
		} else if m.App.ServerlessConfig != nil {
			m.App.ServerlessConfig = nil
			changed++
		}
		if m.App.VmAppOsType != src.App.VmAppOsType {
			m.App.VmAppOsType = src.App.VmAppOsType
			changed++
		}
		if src.App.AlertPolicies != nil {
			m.App.AlertPolicies = src.App.AlertPolicies
			changed++
		} else if m.App.AlertPolicies != nil {
			m.App.AlertPolicies = nil
			changed++
		}
		if m.App.QosNetworkPriorityType != src.App.QosNetworkPriorityType {
			m.App.QosNetworkPriorityType = src.App.QosNetworkPriorityType
			changed++
		}
		if m.App.QosLatencyProfile != src.App.QosLatencyProfile {
			m.App.QosLatencyProfile = src.App.QosLatencyProfile
			changed++
		}
		if m.App.QosThroughputProfile != src.App.QosThroughputProfile {
			m.App.QosThroughputProfile = src.App.QosThroughputProfile
			changed++
		}
	} else if m.App != nil {
		m.App = nil
		changed++
	}
	if m.DryRunDeploy != src.DryRunDeploy {
		m.DryRunDeploy = src.DryRunDeploy
		changed++
	}
	if m.NumNodes != src.NumNodes {
		m.NumNodes = src.NumNodes
		changed++
	}
	return changed
}

func (m *DeploymentCloudletRequest) DeepCopyIn(src *DeploymentCloudletRequest) {
	if src.App != nil {
		var tmp_App App
		tmp_App.DeepCopyIn(src.App)
		m.App = &tmp_App
	} else {
		m.App = nil
	}
	m.DryRunDeploy = src.DryRunDeploy
	m.NumNodes = src.NumNodes
}

// Helper method to check that enums have valid values
func (m *DeploymentCloudletRequest) ValidateEnums() error {
	if m.App != nil {
		if err := m.App.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreDeploymentCloudletRequestFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "App.DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "App.DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "App.DelOpt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "App.Revision")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "App.DeletePrepare")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "App.CreatedAt")
	}
	if _, found := tags["timestamp"]; found {
		names = append(names, "App.UpdatedAt")
	}
	return cmpopts.IgnoreFields(DeploymentCloudletRequest{}, names...)
}

var ImageTypeStrings = []string{
	"IMAGE_TYPE_UNKNOWN",
	"IMAGE_TYPE_DOCKER",
	"IMAGE_TYPE_QCOW",
	"IMAGE_TYPE_HELM",
	"IMAGE_TYPE_OVF",
}

const (
	ImageTypeIMAGE_TYPE_UNKNOWN uint64 = 1 << 0
	ImageTypeIMAGE_TYPE_DOCKER  uint64 = 1 << 1
	ImageTypeIMAGE_TYPE_QCOW    uint64 = 1 << 2
	ImageTypeIMAGE_TYPE_HELM    uint64 = 1 << 3
	ImageTypeIMAGE_TYPE_OVF     uint64 = 1 << 4
)

var ImageType_CamelName = map[int32]string{
	// IMAGE_TYPE_UNKNOWN -> ImageTypeUnknown
	0: "ImageTypeUnknown",
	// IMAGE_TYPE_DOCKER -> ImageTypeDocker
	1: "ImageTypeDocker",
	// IMAGE_TYPE_QCOW -> ImageTypeQcow
	2: "ImageTypeQcow",
	// IMAGE_TYPE_HELM -> ImageTypeHelm
	3: "ImageTypeHelm",
	// IMAGE_TYPE_OVF -> ImageTypeOvf
	4: "ImageTypeOvf",
}
var ImageType_CamelValue = map[string]int32{
	"ImageTypeUnknown": 0,
	"ImageTypeDocker":  1,
	"ImageTypeQcow":    2,
	"ImageTypeHelm":    3,
	"ImageTypeOvf":     4,
}

func (e *ImageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ImageType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may have omitted common prefix
		val, ok = ImageType_CamelValue["ImageType"+util.CamelCase(str)]
	}
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ImageType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid ImageType value %q", str)
	}
	*e = ImageType(val)
	return nil
}

func (e ImageType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(ImageType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "ImageType")
	return str, nil
}

// custom JSON encoding/decoding
func (e *ImageType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ImageType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = ImageType_CamelValue["ImageType"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ImageType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid ImageType value %q", str)
		}
		*e = ImageType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := ImageType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid ImageType value %d", val)
		}
		*e = ImageType(val)
		return nil
	}
	return fmt.Errorf("Invalid ImageType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e ImageType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(ImageType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "ImageType")
	return json.Marshal(str)
}
*/
var ImageTypeCommonPrefix = "ImageType"

var QosNetworkPriorityTypeStrings = []string{
	"DEFAULT",
	"LATENCY",
	"THROUGHPUT",
}

const (
	QosNetworkPriorityTypeDEFAULT    uint64 = 1 << 0
	QosNetworkPriorityTypeLATENCY    uint64 = 1 << 1
	QosNetworkPriorityTypeTHROUGHPUT uint64 = 1 << 2
)

var QosNetworkPriorityType_CamelName = map[int32]string{
	// DEFAULT -> Default
	0: "Default",
	// LATENCY -> Latency
	1: "Latency",
	// THROUGHPUT -> Throughput
	2: "Throughput",
}
var QosNetworkPriorityType_CamelValue = map[string]int32{
	"Default":    0,
	"Latency":    1,
	"Throughput": 2,
}

func (e *QosNetworkPriorityType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := QosNetworkPriorityType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = QosNetworkPriorityType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid QosNetworkPriorityType value %q", str)
	}
	*e = QosNetworkPriorityType(val)
	return nil
}

func (e QosNetworkPriorityType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(QosNetworkPriorityType_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *QosNetworkPriorityType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := QosNetworkPriorityType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = QosNetworkPriorityType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid QosNetworkPriorityType value %q", str)
		}
		*e = QosNetworkPriorityType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := QosNetworkPriorityType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid QosNetworkPriorityType value %d", val)
		}
		*e = QosNetworkPriorityType(val)
		return nil
	}
	return fmt.Errorf("Invalid QosNetworkPriorityType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e QosNetworkPriorityType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(QosNetworkPriorityType_CamelName, int32(e))
	return json.Marshal(str)
}
*/
var QosLatencyProfileStrings = []string{
	"LATENCY_DEFAULT",
	"LATENCY_LOW",
}

const (
	QosLatencyProfileLATENCY_DEFAULT uint64 = 1 << 0
	QosLatencyProfileLATENCY_LOW     uint64 = 1 << 1
)

var QosLatencyProfile_CamelName = map[int32]string{
	// LATENCY_DEFAULT -> LatencyDefault
	0: "LatencyDefault",
	// LATENCY_LOW -> LatencyLow
	1: "LatencyLow",
}
var QosLatencyProfile_CamelValue = map[string]int32{
	"LatencyDefault": 0,
	"LatencyLow":     1,
}

func (e *QosLatencyProfile) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := QosLatencyProfile_CamelValue[util.CamelCase(str)]
	if !ok {
		// may have omitted common prefix
		val, ok = QosLatencyProfile_CamelValue["Latency"+util.CamelCase(str)]
	}
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = QosLatencyProfile_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid QosLatencyProfile value %q", str)
	}
	*e = QosLatencyProfile(val)
	return nil
}

func (e QosLatencyProfile) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(QosLatencyProfile_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Latency")
	return str, nil
}

// custom JSON encoding/decoding
func (e *QosLatencyProfile) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := QosLatencyProfile_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = QosLatencyProfile_CamelValue["Latency"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = QosLatencyProfile_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid QosLatencyProfile value %q", str)
		}
		*e = QosLatencyProfile(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := QosLatencyProfile_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid QosLatencyProfile value %d", val)
		}
		*e = QosLatencyProfile(val)
		return nil
	}
	return fmt.Errorf("Invalid QosLatencyProfile value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e QosLatencyProfile) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(QosLatencyProfile_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Latency")
	return json.Marshal(str)
}
*/
var QosLatencyProfileCommonPrefix = "Latency"

var QosThroughputProfileStrings = []string{
	"THROUGHPUT_DEFAULT",
	"THROUGHPUT_S",
	"THROUGHPUT_M",
	"THROUGHPUT_L",
}

const (
	QosThroughputProfileTHROUGHPUT_DEFAULT uint64 = 1 << 0
	QosThroughputProfileTHROUGHPUT_S       uint64 = 1 << 1
	QosThroughputProfileTHROUGHPUT_M       uint64 = 1 << 2
	QosThroughputProfileTHROUGHPUT_L       uint64 = 1 << 3
)

var QosThroughputProfile_CamelName = map[int32]string{
	// THROUGHPUT_DEFAULT -> ThroughputDefault
	0: "ThroughputDefault",
	// THROUGHPUT_S -> ThroughputS
	1: "ThroughputS",
	// THROUGHPUT_M -> ThroughputM
	2: "ThroughputM",
	// THROUGHPUT_L -> ThroughputL
	3: "ThroughputL",
}
var QosThroughputProfile_CamelValue = map[string]int32{
	"ThroughputDefault": 0,
	"ThroughputS":       1,
	"ThroughputM":       2,
	"ThroughputL":       3,
}

func (e *QosThroughputProfile) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := QosThroughputProfile_CamelValue[util.CamelCase(str)]
	if !ok {
		// may have omitted common prefix
		val, ok = QosThroughputProfile_CamelValue["Throughput"+util.CamelCase(str)]
	}
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = QosThroughputProfile_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid QosThroughputProfile value %q", str)
	}
	*e = QosThroughputProfile(val)
	return nil
}

func (e QosThroughputProfile) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(QosThroughputProfile_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Throughput")
	return str, nil
}

// custom JSON encoding/decoding
func (e *QosThroughputProfile) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := QosThroughputProfile_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = QosThroughputProfile_CamelValue["Throughput"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = QosThroughputProfile_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid QosThroughputProfile value %q", str)
		}
		*e = QosThroughputProfile(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := QosThroughputProfile_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid QosThroughputProfile value %d", val)
		}
		*e = QosThroughputProfile(val)
		return nil
	}
	return fmt.Errorf("Invalid QosThroughputProfile value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e QosThroughputProfile) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(QosThroughputProfile_CamelName, int32(e))
	str = strings.TrimPrefix(str, "Throughput")
	return json.Marshal(str)
}
*/
var QosThroughputProfileCommonPrefix = "Throughput"

var VmAppOsTypeStrings = []string{
	"VM_APP_OS_UNKNOWN",
	"VM_APP_OS_LINUX",
	"VM_APP_OS_WINDOWS_10",
	"VM_APP_OS_WINDOWS_2012",
	"VM_APP_OS_WINDOWS_2016",
	"VM_APP_OS_WINDOWS_2019",
}

const (
	VmAppOsTypeVM_APP_OS_UNKNOWN      uint64 = 1 << 0
	VmAppOsTypeVM_APP_OS_LINUX        uint64 = 1 << 1
	VmAppOsTypeVM_APP_OS_WINDOWS_10   uint64 = 1 << 2
	VmAppOsTypeVM_APP_OS_WINDOWS_2012 uint64 = 1 << 3
	VmAppOsTypeVM_APP_OS_WINDOWS_2016 uint64 = 1 << 4
	VmAppOsTypeVM_APP_OS_WINDOWS_2019 uint64 = 1 << 5
)

var VmAppOsType_CamelName = map[int32]string{
	// VM_APP_OS_UNKNOWN -> VmAppOsUnknown
	0: "VmAppOsUnknown",
	// VM_APP_OS_LINUX -> VmAppOsLinux
	1: "VmAppOsLinux",
	// VM_APP_OS_WINDOWS_10 -> VmAppOsWindows10
	2: "VmAppOsWindows10",
	// VM_APP_OS_WINDOWS_2012 -> VmAppOsWindows2012
	3: "VmAppOsWindows2012",
	// VM_APP_OS_WINDOWS_2016 -> VmAppOsWindows2016
	4: "VmAppOsWindows2016",
	// VM_APP_OS_WINDOWS_2019 -> VmAppOsWindows2019
	5: "VmAppOsWindows2019",
}
var VmAppOsType_CamelValue = map[string]int32{
	"VmAppOsUnknown":     0,
	"VmAppOsLinux":       1,
	"VmAppOsWindows10":   2,
	"VmAppOsWindows2012": 3,
	"VmAppOsWindows2016": 4,
	"VmAppOsWindows2019": 5,
}

func (e *VmAppOsType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := VmAppOsType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may have omitted common prefix
		val, ok = VmAppOsType_CamelValue["VmAppOs"+util.CamelCase(str)]
	}
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = VmAppOsType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid VmAppOsType value %q", str)
	}
	*e = VmAppOsType(val)
	return nil
}

func (e VmAppOsType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(VmAppOsType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "VmAppOs")
	return str, nil
}

// custom JSON encoding/decoding
func (e *VmAppOsType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := VmAppOsType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = VmAppOsType_CamelValue["VmAppOs"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = VmAppOsType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid VmAppOsType value %q", str)
		}
		*e = VmAppOsType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := VmAppOsType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid VmAppOsType value %d", val)
		}
		*e = VmAppOsType(val)
		return nil
	}
	return fmt.Errorf("Invalid VmAppOsType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e VmAppOsType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(VmAppOsType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "VmAppOs")
	return json.Marshal(str)
}
*/
var VmAppOsTypeCommonPrefix = "VmAppOs"

var DeleteTypeStrings = []string{
	"NO_AUTO_DELETE",
	"AUTO_DELETE",
}

const (
	DeleteTypeNO_AUTO_DELETE uint64 = 1 << 0
	DeleteTypeAUTO_DELETE    uint64 = 1 << 1
)

var DeleteType_CamelName = map[int32]string{
	// NO_AUTO_DELETE -> NoAutoDelete
	0: "NoAutoDelete",
	// AUTO_DELETE -> AutoDelete
	1: "AutoDelete",
}
var DeleteType_CamelValue = map[string]int32{
	"NoAutoDelete": 0,
	"AutoDelete":   1,
}

func (e *DeleteType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := DeleteType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = DeleteType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid DeleteType value %q", str)
	}
	*e = DeleteType(val)
	return nil
}

func (e DeleteType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(DeleteType_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *DeleteType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := DeleteType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = DeleteType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid DeleteType value %q", str)
		}
		*e = DeleteType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := DeleteType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid DeleteType value %d", val)
		}
		*e = DeleteType(val)
		return nil
	}
	return fmt.Errorf("Invalid DeleteType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e DeleteType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(DeleteType_CamelName, int32(e))
	return json.Marshal(str)
}
*/
var AccessTypeStrings = []string{
	"ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT",
	"ACCESS_TYPE_DIRECT",
	"ACCESS_TYPE_LOAD_BALANCER",
}

const (
	AccessTypeACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT uint64 = 1 << 0
	AccessTypeACCESS_TYPE_DIRECT                 uint64 = 1 << 1
	AccessTypeACCESS_TYPE_LOAD_BALANCER          uint64 = 1 << 2
)

var AccessType_CamelName = map[int32]string{
	// ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT -> AccessTypeDefaultForDeployment
	0: "AccessTypeDefaultForDeployment",
	// ACCESS_TYPE_DIRECT -> AccessTypeDirect
	1: "AccessTypeDirect",
	// ACCESS_TYPE_LOAD_BALANCER -> AccessTypeLoadBalancer
	2: "AccessTypeLoadBalancer",
}
var AccessType_CamelValue = map[string]int32{
	"AccessTypeDefaultForDeployment": 0,
	"AccessTypeDirect":               1,
	"AccessTypeLoadBalancer":         2,
}

func (e *AccessType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := AccessType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may have omitted common prefix
		val, ok = AccessType_CamelValue["AccessType"+util.CamelCase(str)]
	}
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = AccessType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid AccessType value %q", str)
	}
	*e = AccessType(val)
	return nil
}

func (e AccessType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(AccessType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "AccessType")
	return str, nil
}

// custom JSON encoding/decoding
func (e *AccessType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := AccessType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may have omitted common prefix
			val, ok = AccessType_CamelValue["AccessType"+util.CamelCase(str)]
		}
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = AccessType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid AccessType value %q", str)
		}
		*e = AccessType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := AccessType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid AccessType value %d", val)
		}
		*e = AccessType(val)
		return nil
	}
	return fmt.Errorf("Invalid AccessType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e AccessType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(AccessType_CamelName, int32(e))
	str = strings.TrimPrefix(str, "AccessType")
	return json.Marshal(str)
}
*/
var AccessTypeCommonPrefix = "AccessType"

func (m *App) IsValidArgsForCreateApp() error {
	if m.DelOpt != 0 {
		return fmt.Errorf("Invalid field specified: DelOpt, this field is only for internal use")
	}
	if m.AutoProvPolicy != "" {
		return fmt.Errorf("Invalid field specified: AutoProvPolicy, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *App) IsValidArgsForDeleteApp() error {
	if m.DelOpt != 0 {
		return fmt.Errorf("Invalid field specified: DelOpt, this field is only for internal use")
	}
	if m.AutoProvPolicy != "" {
		return fmt.Errorf("Invalid field specified: AutoProvPolicy, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *App) IsValidArgsForUpdateApp() error {
	if m.DelOpt != 0 {
		return fmt.Errorf("Invalid field specified: DelOpt, this field is only for internal use")
	}
	if m.AutoProvPolicy != "" {
		return fmt.Errorf("Invalid field specified: AutoProvPolicy, this field is only for internal use")
	}
	if m.DeletePrepare != false {
		return fmt.Errorf("Invalid field specified: DeletePrepare, this field is only for internal use")
	}
	if m.CreatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Seconds, this field is only for internal use")
	}
	if m.CreatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: CreatedAt.Nanos, this field is only for internal use")
	}
	if m.UpdatedAt.Seconds != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Seconds, this field is only for internal use")
	}
	if m.UpdatedAt.Nanos != 0 {
		return fmt.Errorf("Invalid field specified: UpdatedAt.Nanos, this field is only for internal use")
	}
	return nil
}

func (m *AppAutoProvPolicy) IsValidArgsForAddAppAutoProvPolicy() error {
	return nil
}

func (m *AppAutoProvPolicy) IsValidArgsForRemoveAppAutoProvPolicy() error {
	return nil
}

func (m *AppAlertPolicy) IsValidArgsForAddAppAlertPolicy() error {
	return nil
}

func (m *AppAlertPolicy) IsValidArgsForRemoveAppAlertPolicy() error {
	return nil
}

func (m *AppKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *ConfigFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *App) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ImageType != 0 {
		n += 1 + sovApp(uint64(m.ImageType))
	}
	l = len(m.AccessPorts)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = m.DefaultFlavor.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AuthPublicKey)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Annotations)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentManifest)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentGenerator)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.AndroidPackageName)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.DelOpt != 0 {
		n += 2 + sovApp(uint64(m.DelOpt))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 2 + l + sovApp(uint64(l))
		}
	}
	if m.ScaleWithCluster {
		n += 3
	}
	if m.InternalPorts {
		n += 3
	}
	l = len(m.Revision)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.OfficialFqdn)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.Md5Sum)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.AutoProvPolicy)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.AccessType != 0 {
		n += 2 + sovApp(uint64(m.AccessType))
	}
	if m.DeletePrepare {
		n += 3
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, s := range m.AutoProvPolicies {
			l = len(s)
			n += 2 + l + sovApp(uint64(l))
		}
	}
	l = len(m.TemplateDelimiter)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.SkipHcPorts)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = m.CreatedAt.Size()
	n += 2 + l + sovApp(uint64(l))
	l = m.UpdatedAt.Size()
	n += 2 + l + sovApp(uint64(l))
	if m.Trusted {
		n += 3
	}
	if len(m.RequiredOutboundConnections) > 0 {
		for _, e := range m.RequiredOutboundConnections {
			l = e.Size()
			n += 2 + l + sovApp(uint64(l))
		}
	}
	if m.AllowServerless {
		n += 3
	}
	if m.ServerlessConfig != nil {
		l = m.ServerlessConfig.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.VmAppOsType != 0 {
		n += 2 + sovApp(uint64(m.VmAppOsType))
	}
	if len(m.AlertPolicies) > 0 {
		for _, s := range m.AlertPolicies {
			l = len(s)
			n += 2 + l + sovApp(uint64(l))
		}
	}
	if m.QosNetworkPriorityType != 0 {
		n += 2 + sovApp(uint64(m.QosNetworkPriorityType))
	}
	if m.QosLatencyProfile != 0 {
		n += 2 + sovApp(uint64(m.QosLatencyProfile))
	}
	if m.QosThroughputProfile != 0 {
		n += 2 + sovApp(uint64(m.QosThroughputProfile))
	}
	return n
}

func (m *ServerlessConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vcpus.Size()
	n += 1 + l + sovApp(uint64(l))
	if m.Ram != 0 {
		n += 1 + sovApp(uint64(m.Ram))
	}
	if m.MinReplicas != 0 {
		n += 1 + sovApp(uint64(m.MinReplicas))
	}
	return n
}

func (m *AppAutoProvPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AutoProvPolicy)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppAlertPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AlertPolicy)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *DeploymentCloudletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.DryRunDeploy {
		n += 2
	}
	if m.NumNodes != 0 {
		n += 1 + sovApp(uint64(m.NumNodes))
	}
	return n
}

func sovApp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			m.ImageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageType |= ImageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentManifest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentManifest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentGenerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentGenerator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidPackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidPackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelOpt", wireType)
			}
			m.DelOpt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelOpt |= DeleteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigFile{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleWithCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScaleWithCluster = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPorts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalPorts = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialFqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfficialFqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			m.AccessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessType |= AccessType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicies = append(m.AutoProvPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateDelimiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateDelimiter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipHcPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipHcPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trusted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trusted = bool(v != 0)
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredOutboundConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredOutboundConnections = append(m.RequiredOutboundConnections, SecurityRule{})
			if err := m.RequiredOutboundConnections[len(m.RequiredOutboundConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowServerless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowServerless = bool(v != 0)
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerlessConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerlessConfig == nil {
				m.ServerlessConfig = &ServerlessConfig{}
			}
			if err := m.ServerlessConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmAppOsType", wireType)
			}
			m.VmAppOsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmAppOsType |= VmAppOsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicies = append(m.AlertPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosNetworkPriorityType", wireType)
			}
			m.QosNetworkPriorityType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QosNetworkPriorityType |= QosNetworkPriorityType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosLatencyProfile", wireType)
			}
			m.QosLatencyProfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QosLatencyProfile |= QosLatencyProfile(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosThroughputProfile", wireType)
			}
			m.QosThroughputProfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QosThroughputProfile |= QosThroughputProfile(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerlessConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerlessConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerlessConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcpus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vcpus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicas", wireType)
			}
			m.MinReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicas |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAutoProvPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAutoProvPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAutoProvPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAlertPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAlertPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAlertPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentCloudletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentCloudletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentCloudletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &App{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRunDeploy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRunDeploy = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApp = fmt.Errorf("proto: unexpected end of group")
)
