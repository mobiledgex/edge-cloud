// Application proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "developer.proto";
import "flavor.proto";
import "cluster.proto";
import "common.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// It is important that embedded key structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded key structs have nullable false.

// AppKey uniquely identifies an Application.
message AppKey {
  // Developer key
  DeveloperKey developer_key = 1 [(gogoproto.nullable) = false];
  // Application name
  string name = 2;
  // Version of the app
  string version = 3;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ImageType specifies the image type of the application.
enum ImageType {
  // Unknown image type
  ImageTypeUnknown = 0;
  // Docker container image type compatible with Kubernetes
  ImageTypeDocker= 1;
  // QCOW2 virtual machine image type
  ImageTypeQCOW = 2;
}

// Apps are applications that may be instantiated on Cloudlets, providing a back-end service to an application client (using the mobiledgex SDK) running on a user device such as a cell phone, wearable, drone, etc. Applications belong to Developers, and must specify their image and accessibility. Applications are analagous to Pods in Kubernetes, and similarly are tied to a Cluster.
// An application in itself is not tied to a Cloudlet, but provides a definition that can be used to instantiate it on a Cloudlet. AppInsts are applications instantiated on a particular Cloudlet.
message App {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  AppKey key = 2 [(gogoproto.nullable) = false];
  // URI from which to download image
  string image_path = 4 [(protogen.backend) = true];
  // Image type (see ImageType)
  ImageType image_type = 5;
  // IP access type
  IpAccess ip_access = 6;
  // For Layer4 access, the ports the app listens on.
  // This is a comma separated list of protocol:port pairs, i.e.
  // tcp:80,http:443,udp:10002.
  // Only tcp, udp, and http protocols are supported; tcp and udp are assumed
  // to be L4, and http is assumed to be L7 access.
  string access_ports = 7;
  // URI of resource to be used to establish config for App.
  string config = 8;
  // Default flavor for the App, may be overridden by the AppInst
  FlavorKey default_flavor = 9 [(gogoproto.nullable) = false];
  // Cluster on which the App can be instantiated.
  // If not specified during create, a cluster will be automatically created.
  // If specified, it must exist.
  ClusterKey cluster = 10 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Template of kubernetes deployment yaml.
  // Who/What sets this is TDB, but it should not be directly
  // exposed to the user, because we do not want to expose
  // kubernetes to the user. However, because we currently don't have any
  // other way to set it, for flexibility, for now it is exposed to the user.
  string app_template = 11;
  // public key used for authentication
  string auth_public_key = 12;
  // Android package name, optional
  string android_package_name = 13;
  // manifest - which cloudlets can this run on?
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
}

service AppApi {
  // Create an application
  rpc CreateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/create/app"
      body: "*"
    };
  }
  // Delete an application
  rpc DeleteApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/delete/app"
      body: "*"
    };
  }
  // Update an application
  rpc UpdateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/update/app"
      body: "*"
    };
  }
  // Show applications. Any fields specified will be used to filter results.
  rpc ShowApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/app"
      body: "*"
    };
  }
}
JMORRIS-MAC:edge-cloud jimmorris$ CAT Ec
CAT: Ec: No such file or directory
JMORRIS-MAC:edge-cloud jimmorris$ 
JMORRIS-MAC:edge-cloud jimmorris$ cat edgeproto/app.pb.go
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
        Package edgeproto is a generated protocol buffer package.

        It is generated from these files:
                app.proto
                app_inst.proto
                cloud-resource-manager.proto
                cloudlet.proto
                cluster.proto
                clusterflavor.proto
                clusterinst.proto
                common.proto
                controller.proto
                developer.proto
                flavor.proto
                metric.proto
                node.proto
                notice.proto
                operator.proto
                refs.proto
                result.proto

        It has these top-level messages:
                AppKey
                App
                AppInstKey
                AppInst
                AppInstInfo
                AppInstMetrics
                CloudResource
                EdgeCloudApp
                EdgeCloudApplication
                CloudletKey
                Cloudlet
                CloudletInfo
                CloudletMetrics
                ClusterKey
                Cluster
                ClusterFlavorKey
                ClusterFlavor
                ClusterInstKey
                ClusterInst
                ClusterInstInfo
                ControllerKey
                Controller
                DeveloperKey
                Developer
                FlavorKey
                Flavor
                MetricTag
                MetricVal
                Metric
                NodeKey
                Node
                NoticeReply
                NoticeRequest
                OperatorKey
                Operator
                CloudletRefs
                ClusterRefs
                Result
*/
package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ImageType specifies the image type of the application.
type ImageType int32

const (
        // Unknown image type
        ImageType_ImageTypeUnknown ImageType = 0
        // Docker container image type compatible with Kubernetes
        ImageType_ImageTypeDocker ImageType = 1
        // QCOW2 virtual machine image type
        ImageType_ImageTypeQCOW ImageType = 2
)

var ImageType_name = map[int32]string{
        0: "ImageTypeUnknown",
        1: "ImageTypeDocker",
        2: "ImageTypeQCOW",
}
var ImageType_value = map[string]int32{
        "ImageTypeUnknown": 0,
        "ImageTypeDocker":  1,
        "ImageTypeQCOW":    2,
}

func (x ImageType) String() string {
        return proto.EnumName(ImageType_name, int32(x))
}
func (ImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// AppKey uniquely identifies an Application.
type AppKey struct {
        // Developer key
        DeveloperKey DeveloperKey `protobuf:"bytes,1,opt,name=developer_key,json=developerKey" json:"developer_key"`
        // Application name
        Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
        // Version of the app
        Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()                    { *m = AppKey{} }
func (m *AppKey) String() string            { return proto.CompactTextString(m) }
func (*AppKey) ProtoMessage()               {}
func (*AppKey) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// Apps are applications that may be instantiated on Cloudlets, providing a back-end service to an application client (using the mobiledgex SDK) running on a user device such as a cell phone, wearable, drone, etc. Applications belong to Developers, and must specify their image and accessibility. Applications are analagous to Pods in Kubernetes, and similarly are tied to a Cluster.
// An application in itself is not tied to a Cloudlet, but provides a definition that can be used to instantiate it on a Cloudlet. AppInsts are applications instantiated on a particular Cloudlet.
type App struct {
        // Fields are used for the Update API to specify which fields to apply
        Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
        // Unique identifier key
        Key AppKey `protobuf:"bytes,2,opt,name=key" json:"key"`
        // URI from which to download image
        ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
        // Image type (see ImageType)
        ImageType ImageType `protobuf:"varint,5,opt,name=image_type,json=imageType,proto3,enum=edgeproto.ImageType" json:"image_type,omitempty"`
        // IP access type
        IpAccess IpAccess `protobuf:"varint,6,opt,name=ip_access,json=ipAccess,proto3,enum=edgeproto.IpAccess" json:"ip_access,omitempty"`
        // For Layer4 access, the ports the app listens on.
        // This is a comma separated list of protocol:port pairs, i.e.
        // tcp:80,http:443,udp:10002.
        // Only tcp, udp, and http protocols are supported; tcp and udp are assumed
        // to be L4, and http is assumed to be L7 access.
        AccessPorts string `protobuf:"bytes,7,opt,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
        // URI of resource to be used to establish config for App.
        Config string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
        // Default flavor for the App, may be overridden by the AppInst
        DefaultFlavor FlavorKey `protobuf:"bytes,9,opt,name=default_flavor,json=defaultFlavor" json:"default_flavor"`
        // Cluster on which the App can be instantiated.
        // If not specified during create, a cluster will be automatically created.
        // If specified, it must exist.
        Cluster ClusterKey `protobuf:"bytes,10,opt,name=cluster" json:"cluster"`
        // Template of kubernetes deployment yaml.
        // Who/What sets this is TDB, but it should not be directly
        // exposed to the user, because we do not want to expose
        // kubernetes to the user. However, because we currently don't have any
        // other way to set it, for flexibility, for now it is exposed to the user.
        AppTemplate string `protobuf:"bytes,11,opt,name=app_template,json=appTemplate,proto3" json:"app_template,omitempty"`
        // public key used for authentication
        AuthPublicKey string `protobuf:"bytes,12,opt,name=auth_public_key,json=authPublicKey,proto3" json:"auth_public_key,omitempty"`
        // Android package name, optional
        AndroidPackageName string `protobuf:"bytes,13,opt,name=android_package_name,json=androidPackageName,proto3" json:"android_package_name,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func init() {
        proto.RegisterType((*AppKey)(nil), "edgeproto.AppKey")
        proto.RegisterType((*App)(nil), "edgeproto.App")
        proto.RegisterEnum("edgeproto.ImageType", ImageType_name, ImageType_value)
}
func (this *AppKey) GoString() string {
        if this == nil {
                return "nil"
        }
        s := make([]string, 0, 7)
        s = append(s, "&edgeproto.AppKey{")
        s = append(s, "DeveloperKey: "+strings.Replace(this.DeveloperKey.GoString(), `&`, ``, 1)+",\n")
        s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
        s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
        s = append(s, "}")
        return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
        rv := reflect.ValueOf(v)
        if rv.IsNil() {
                return "nil"
        }
        pv := reflect.Indirect(rv).Interface()
        return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppApi service

type AppApiClient interface {
        // Create an application
        CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
        // Delete an application
        DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
        // Update an application
        UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
        // Show applications. Any fields specified will be used to filter results.
        ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
}

type appApiClient struct {
        cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
        return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
        out := new(Result)
        err := grpc.Invoke(ctx, "/edgeproto.AppApi/CreateApp", in, out, c.cc, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
        out := new(Result)
        err := grpc.Invoke(ctx, "/edgeproto.AppApi/DeleteApp", in, out, c.cc, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
        out := new(Result)
        err := grpc.Invoke(ctx, "/edgeproto.AppApi/UpdateApp", in, out, c.cc, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
        stream, err := grpc.NewClientStream(ctx, &_AppApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AppApi/ShowApp", opts...)
        if err != nil {
                return nil, err
        }
        x := &appApiShowAppClient{stream}
        if err := x.ClientStream.SendMsg(in); err != nil {
                return nil, err
        }
        if err := x.ClientStream.CloseSend(); err != nil {
                return nil, err
        }
        return x, nil
}

type AppApi_ShowAppClient interface {
        Recv() (*App, error)
        grpc.ClientStream
}

type appApiShowAppClient struct {
        grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
        m := new(App)
        if err := x.ClientStream.RecvMsg(m); err != nil {
                return nil, err
        }
        return m, nil
}

// Server API for AppApi service

type AppApiServer interface {
        // Create an application
        CreateApp(context.Context, *App) (*Result, error)
        // Delete an application
        DeleteApp(context.Context, *App) (*Result, error)
        // Update an application
        UpdateApp(context.Context, *App) (*Result, error)
        // Show applications. Any fields specified will be used to filter results.
        ShowApp(*App, AppApi_ShowAppServer) error
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
        s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(App)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(AppApiServer).CreateApp(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: "/edgeproto.AppApi/CreateApp",
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(AppApiServer).CreateApp(ctx, req.(*App))
        }
        return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(App)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(AppApiServer).DeleteApp(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: "/edgeproto.AppApi/DeleteApp",
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
        }
        return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(App)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(AppApiServer).UpdateApp(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: "/edgeproto.AppApi/UpdateApp",
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
        }
        return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
        m := new(App)
        if err := stream.RecvMsg(m); err != nil {
                return err
        }
        return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
        Send(*App) error
        grpc.ServerStream
}

type appApiShowAppServer struct {
        grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
        return x.ServerStream.SendMsg(m)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
        ServiceName: "edgeproto.AppApi",
        HandlerType: (*AppApiServer)(nil),
        Methods: []grpc.MethodDesc{
                {
                        MethodName: "CreateApp",
                        Handler:    _AppApi_CreateApp_Handler,
                },
                {
                        MethodName: "DeleteApp",
                        Handler:    _AppApi_DeleteApp_Handler,
                },
                {
                        MethodName: "UpdateApp",
                        Handler:    _AppApi_UpdateApp_Handler,
                },
        },
        Streams: []grpc.StreamDesc{
                {
                        StreamName:    "ShowApp",
                        Handler:       _AppApi_ShowApp_Handler,
                        ServerStreams: true,
                },
        },
        Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
        size := m.Size()
        dAtA = make([]byte, size)
        n, err := m.MarshalTo(dAtA)
        if err != nil {
                return nil, err
        }
        return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
        var i int
        _ = i
        var l int
        _ = l
        dAtA[i] = 0xa
        i++
        i = encodeVarintApp(dAtA, i, uint64(m.DeveloperKey.Size()))
        n1, err := m.DeveloperKey.MarshalTo(dAtA[i:])
        if err != nil {
                return 0, err
        }
        i += n1
        if len(m.Name) > 0 {
                dAtA[i] = 0x12
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
                i += copy(dAtA[i:], m.Name)
        }
        if len(m.Version) > 0 {
                dAtA[i] = 0x1a
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
                i += copy(dAtA[i:], m.Version)
        }
        return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
        size := m.Size()
        dAtA = make([]byte, size)
        n, err := m.MarshalTo(dAtA)
        if err != nil {
                return nil, err
        }
        return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
        var i int
        _ = i
        var l int
        _ = l
        if len(m.Fields) > 0 {
                for _, s := range m.Fields {
                        dAtA[i] = 0xa
                        i++
                        l = len(s)
                        for l >= 1<<7 {
                                dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
                                l >>= 7
                                i++
                        }
                        dAtA[i] = uint8(l)
                        i++
                        i += copy(dAtA[i:], s)
                }
        }
        dAtA[i] = 0x12
        i++
        i = encodeVarintApp(dAtA, i, uint64(m.Key.Size()))
        n2, err := m.Key.MarshalTo(dAtA[i:])
        if err != nil {
                return 0, err
        }
        i += n2
        if len(m.ImagePath) > 0 {
                dAtA[i] = 0x22
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.ImagePath)))
                i += copy(dAtA[i:], m.ImagePath)
        }
        if m.ImageType != 0 {
                dAtA[i] = 0x28
                i++
                i = encodeVarintApp(dAtA, i, uint64(m.ImageType))
        }
        if m.IpAccess != 0 {
                dAtA[i] = 0x30
                i++
                i = encodeVarintApp(dAtA, i, uint64(m.IpAccess))
        }
        if len(m.AccessPorts) > 0 {
                dAtA[i] = 0x3a
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.AccessPorts)))
                i += copy(dAtA[i:], m.AccessPorts)
        }
        if len(m.Config) > 0 {
                dAtA[i] = 0x42
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.Config)))
                i += copy(dAtA[i:], m.Config)
        }
        dAtA[i] = 0x4a
        i++
        i = encodeVarintApp(dAtA, i, uint64(m.DefaultFlavor.Size()))
        n3, err := m.DefaultFlavor.MarshalTo(dAtA[i:])
        if err != nil {
                return 0, err
        }
        i += n3
        dAtA[i] = 0x52
        i++
        i = encodeVarintApp(dAtA, i, uint64(m.Cluster.Size()))
        n4, err := m.Cluster.MarshalTo(dAtA[i:])
        if err != nil {
                return 0, err
        }
        i += n4
        if len(m.AppTemplate) > 0 {
                dAtA[i] = 0x5a
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.AppTemplate)))
                i += copy(dAtA[i:], m.AppTemplate)
        }
        if len(m.AuthPublicKey) > 0 {
                dAtA[i] = 0x62
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.AuthPublicKey)))
                i += copy(dAtA[i:], m.AuthPublicKey)
        }
        if len(m.AndroidPackageName) > 0 {
                dAtA[i] = 0x6a
                i++
                i = encodeVarintApp(dAtA, i, uint64(len(m.AndroidPackageName)))
                i += copy(dAtA[i:], m.AndroidPackageName)
        }
        return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
        for v >= 1<<7 {
                dAtA[offset] = uint8(v&0x7f | 0x80)
                v >>= 7
                offset++
        }
        dAtA[offset] = uint8(v)
        return offset + 1
}
func (m *AppKey) Matches(o *AppKey, fopts ...MatchOpt) bool {
        opts := MatchOptions{}
        applyMatchOptions(&opts, fopts...)
        if o == nil {
                if opts.Filter {
                        return true
                }
                return false
        }
        if !m.DeveloperKey.Matches(&o.DeveloperKey, fopts...) {
                return false
        }
        if !opts.Filter || o.Name != "" {
                if o.Name != m.Name {
                        return false
                }
        }
        if !opts.Filter || o.Version != "" {
                if o.Version != m.Version {
                        return false
                }
        }
        return true
}

func (m *AppKey) CopyInFields(src *AppKey) {
        m.DeveloperKey.Name = src.DeveloperKey.Name
        m.Name = src.Name
        m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
        key, err := json.Marshal(m)
        if err != nil {
                log.FatalLog("Failed to marshal AppKey key string", "obj", m)
        }
        return string(key)
}

func AppKeyStringParse(str string, key *AppKey) {
        err := json.Unmarshal([]byte(str), key)
        if err != nil {
                log.FatalLog("Failed to unmarshal AppKey key string", "str", str)
        }
}

// Helper method to check that enums have valid values
func (m *AppKey) ValidateEnums() error {
        if err := m.DeveloperKey.ValidateEnums(); err != nil {
                return err
        }
        return nil
}

func (m *App) Matches(o *App, fopts ...MatchOpt) bool {
        opts := MatchOptions{}
        applyMatchOptions(&opts, fopts...)
        if o == nil {
                if opts.Filter {
                        return true
                }
                return false
        }
        if !m.Key.Matches(&o.Key, fopts...) {
                return false
        }
        if !opts.IgnoreBackend {
                if !opts.Filter || o.ImagePath != "" {
                        if o.ImagePath != m.ImagePath {
                                return false
                        }
                }
        }
        if !opts.Filter || o.ImageType != 0 {
                if o.ImageType != m.ImageType {
                        return false
                }
        }
        if !opts.Filter || o.IpAccess != 0 {
                if o.IpAccess != m.IpAccess {
                        return false
                }
        }
        if !opts.Filter || o.AccessPorts != "" {
                if o.AccessPorts != m.AccessPorts {
                        return false
                }
        }
        if !opts.Filter || o.Config != "" {
                if o.Config != m.Config {
                        return false
                }
        }
        if !m.DefaultFlavor.Matches(&o.DefaultFlavor, fopts...) {
                return false
        }
        if !opts.IgnoreBackend {
                if !m.Cluster.Matches(&o.Cluster, fopts...) {
                        return false
                }
        }
        if !opts.Filter || o.AppTemplate != "" {
                if o.AppTemplate != m.AppTemplate {
                        return false
                }
        }
        if !opts.Filter || o.AuthPublicKey != "" {
                if o.AuthPublicKey != m.AuthPublicKey {
                        return false
                }
        }
        if !opts.Filter || o.AndroidPackageName != "" {
                if o.AndroidPackageName != m.AndroidPackageName {
                        return false
                }
        }
        return true
}

const AppFieldKey = "2"
const AppFieldKeyDeveloperKey = "2.1"
const AppFieldKeyDeveloperKeyName = "2.1.2"
const AppFieldKeyName = "2.2"
const AppFieldKeyVersion = "2.3"
const AppFieldImagePath = "4"
const AppFieldImageType = "5"
const AppFieldIpAccess = "6"
const AppFieldAccessPorts = "7"
const AppFieldConfig = "8"
const AppFieldDefaultFlavor = "9"
const AppFieldDefaultFlavorName = "9.1"
const AppFieldCluster = "10"
const AppFieldClusterName = "10.1"
const AppFieldAppTemplate = "11"
const AppFieldAuthPublicKey = "12"
const AppFieldAndroidPackageName = "13"

var AppAllFields = []string{
        AppFieldKeyDeveloperKeyName,
        AppFieldKeyName,
        AppFieldKeyVersion,
        AppFieldImagePath,
        AppFieldImageType,
        AppFieldIpAccess,
        AppFieldAccessPorts,
        AppFieldConfig,
        AppFieldDefaultFlavorName,
        AppFieldClusterName,
        AppFieldAppTemplate,
        AppFieldAuthPublicKey,
        AppFieldAndroidPackageName,
}

var AppAllFieldsMap = map[string]struct{}{
        AppFieldKeyDeveloperKeyName: struct{}{},
        AppFieldKeyName:             struct{}{},
        AppFieldKeyVersion:          struct{}{},
        AppFieldImagePath:           struct{}{},
        AppFieldImageType:           struct{}{},
        AppFieldIpAccess:            struct{}{},
        AppFieldAccessPorts:         struct{}{},
        AppFieldConfig:              struct{}{},
        AppFieldDefaultFlavorName:   struct{}{},
        AppFieldClusterName:         struct{}{},
        AppFieldAppTemplate:         struct{}{},
        AppFieldAuthPublicKey:       struct{}{},
        AppFieldAndroidPackageName:  struct{}{},
}

func (m *App) DiffFields(o *App, fields map[string]struct{}) {
        if m.Key.DeveloperKey.Name != o.Key.DeveloperKey.Name {
                fields[AppFieldKeyDeveloperKeyName] = struct{}{}
                fields[AppFieldKeyDeveloperKey] = struct{}{}
                fields[AppFieldKey] = struct{}{}
        }
        if m.Key.Name != o.Key.Name {
                fields[AppFieldKeyName] = struct{}{}
                fields[AppFieldKey] = struct{}{}
        }
        if m.Key.Version != o.Key.Version {
                fields[AppFieldKeyVersion] = struct{}{}
                fields[AppFieldKey] = struct{}{}
        }
        if m.ImagePath != o.ImagePath {
                fields[AppFieldImagePath] = struct{}{}
        }
        if m.ImageType != o.ImageType {
                fields[AppFieldImageType] = struct{}{}
        }
        if m.IpAccess != o.IpAccess {
                fields[AppFieldIpAccess] = struct{}{}
        }
        if m.AccessPorts != o.AccessPorts {
                fields[AppFieldAccessPorts] = struct{}{}
        }
        if m.Config != o.Config {
                fields[AppFieldConfig] = struct{}{}
        }
        if m.DefaultFlavor.Name != o.DefaultFlavor.Name {
                fields[AppFieldDefaultFlavorName] = struct{}{}
                fields[AppFieldDefaultFlavor] = struct{}{}
        }
        if m.Cluster.Name != o.Cluster.Name {
                fields[AppFieldClusterName] = struct{}{}
                fields[AppFieldCluster] = struct{}{}
        }
        if m.AppTemplate != o.AppTemplate {
                fields[AppFieldAppTemplate] = struct{}{}
        }
        if m.AuthPublicKey != o.AuthPublicKey {
                fields[AppFieldAuthPublicKey] = struct{}{}
        }
        if m.AndroidPackageName != o.AndroidPackageName {
                fields[AppFieldAndroidPackageName] = struct{}{}
        }
}

func (m *App) CopyInFields(src *App) {
        fmap := MakeFieldMap(src.Fields)
        if _, set := fmap["2"]; set {
                if _, set := fmap["2.1"]; set {
                        if _, set := fmap["2.1.2"]; set {
                                m.Key.DeveloperKey.Name = src.Key.DeveloperKey.Name
                        }
                }
                if _, set := fmap["2.2"]; set {
                        m.Key.Name = src.Key.Name
                }
                if _, set := fmap["2.3"]; set {
                        m.Key.Version = src.Key.Version
                }
        }
        if _, set := fmap["4"]; set {
                m.ImagePath = src.ImagePath
        }
        if _, set := fmap["5"]; set {
                m.ImageType = src.ImageType
        }
        if _, set := fmap["6"]; set {
                m.IpAccess = src.IpAccess
        }
        if _, set := fmap["7"]; set {
                m.AccessPorts = src.AccessPorts
        }
        if _, set := fmap["8"]; set {
                m.Config = src.Config
        }
        if _, set := fmap["9"]; set {
                if _, set := fmap["9.1"]; set {
                        m.DefaultFlavor.Name = src.DefaultFlavor.Name
                }
        }
        if _, set := fmap["10"]; set {
                if _, set := fmap["10.1"]; set {
                        m.Cluster.Name = src.Cluster.Name
                }
        }
        if _, set := fmap["11"]; set {
                m.AppTemplate = src.AppTemplate
        }
        if _, set := fmap["12"]; set {
                m.AuthPublicKey = src.AuthPublicKey
        }
        if _, set := fmap["13"]; set {
                m.AndroidPackageName = src.AndroidPackageName
        }
}

func (s *App) HasFields() bool {
        return true
}

type AppStore struct {
        kvstore objstore.KVStore
}

func NewAppStore(kvstore objstore.KVStore) AppStore {
        return AppStore{kvstore: kvstore}
}

func (s *AppStore) Create(m *App, wait func(int64)) (*Result, error) {
        err := m.Validate(AppAllFieldsMap)
        if err != nil {
                return nil, err
        }
        key := objstore.DbKeyString("App", m.GetKey())
        val, err := json.Marshal(m)
        if err != nil {
                return nil, err
        }
        rev, err := s.kvstore.Create(key, string(val))
        if err != nil {
                return nil, err
        }
        if wait != nil {
                wait(rev)
        }
        return &Result{}, err
}

func (s *AppStore) Update(m *App, wait func(int64)) (*Result, error) {
        fmap := MakeFieldMap(m.Fields)
        err := m.Validate(fmap)
        if err != nil {
                return nil, err
        }
        key := objstore.DbKeyString("App", m.GetKey())
        var vers int64 = 0
        curBytes, vers, _, err := s.kvstore.Get(key)
        if err != nil {
                return nil, err
        }
        var cur App
        err = json.Unmarshal(curBytes, &cur)
        if err != nil {
                return nil, err
        }
        cur.CopyInFields(m)
        // never save fields
        cur.Fields = nil
        val, err := json.Marshal(cur)
        if err != nil {
                return nil, err
        }
        rev, err := s.kvstore.Update(key, string(val), vers)
        if err != nil {
                return nil, err
        }
        if wait != nil {
                wait(rev)
        }
        return &Result{}, err
}

func (s *AppStore) Put(m *App, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
        fmap := MakeFieldMap(m.Fields)
        err := m.Validate(fmap)
        if err != nil {
                return nil, err
        }
        key := objstore.DbKeyString("App", m.GetKey())
        var val []byte
        curBytes, _, _, err := s.kvstore.Get(key)
        if err == nil {
                var cur App
                err = json.Unmarshal(curBytes, &cur)
                if err != nil {
                        return nil, err
                }
                cur.CopyInFields(m)
                // never save fields
                cur.Fields = nil
                val, err = json.Marshal(cur)
        } else {
                m.Fields = nil
                val, err = json.Marshal(m)
        }
        if err != nil {
                return nil, err
        }
        rev, err := s.kvstore.Put(key, string(val), ops...)
        if err != nil {
                return nil, err
        }
        if wait != nil {
                wait(rev)
        }
        return &Result{}, err
}

func (s *AppStore) Delete(m *App, wait func(int64)) (*Result, error) {
        err := m.GetKey().Validate()
        if err != nil {
                return nil, err
        }
        key := objstore.DbKeyString("App", m.GetKey())
        rev, err := s.kvstore.Delete(key)
        if err != nil {
                return nil, err
        }
        if wait != nil {
                wait(rev)
        }
        return &Result{}, err
}

func (s *AppStore) LoadOne(key string) (*App, int64, error) {
        val, rev, _, err := s.kvstore.Get(key)
        if err != nil {
                return nil, 0, err
        }
        var obj App
        err = json.Unmarshal(val, &obj)
        if err != nil {
                log.DebugLog(log.DebugLevelApi, "Failed to parse App data", "val", string(val))
                return nil, 0, err
        }
        return &obj, rev, nil
}

func (s *AppStore) STMGet(stm concurrency.STM, key *AppKey, buf *App) bool {
        keystr := objstore.DbKeyString("App", key)
        valstr := stm.Get(keystr)
        if valstr == "" {
                return false
        }
        if buf != nil {
                err := json.Unmarshal([]byte(valstr), buf)
                if err != nil {
                        return false
                }
        }
        return true
}

func (s *AppStore) STMPut(stm concurrency.STM, obj *App) {
        keystr := objstore.DbKeyString("App", obj.GetKey())
        val, _ := json.Marshal(obj)
        stm.Put(keystr, string(val))
}

func (s *AppStore) STMDel(stm concurrency.STM, key *AppKey) {
        keystr := objstore.DbKeyString("App", key)
        stm.Del(keystr)
}

type AppKeyWatcher struct {
        cb func()
}

// AppCache caches App objects in memory in a hash table
// and keeps them in sync with the database.
type AppCache struct {
        Objs        map[AppKey]*App
        Mux         util.Mutex
        List        map[AppKey]struct{}
        NotifyCb    func(obj *AppKey, old *App)
        UpdatedCb   func(old *App, new *App)
        KeyWatchers map[AppKey][]*AppKeyWatcher
}

func NewAppCache() *AppCache {
        cache := AppCache{}
        InitAppCache(&cache)
        return &cache
}

func InitAppCache(cache *AppCache) {
        cache.Objs = make(map[AppKey]*App)
        cache.KeyWatchers = make(map[AppKey][]*AppKeyWatcher)
}

func (c *AppCache) GetTypeString() string {
        return "App"
}

func (c *AppCache) Get(key *AppKey, valbuf *App) bool {
        c.Mux.Lock()
        defer c.Mux.Unlock()
        inst, found := c.Objs[*key]
        if found {
                *valbuf = *inst
        }
        return found
}

func (c *AppCache) HasKey(key *AppKey) bool {
        c.Mux.Lock()
        defer c.Mux.Unlock()
        _, found := c.Objs[*key]
        return found
}

func (c *AppCache) GetAllKeys(keys map[AppKey]struct{}) {
        c.Mux.Lock()
        defer c.Mux.Unlock()
        for key, _ := range c.Objs {
                keys[key] = struct{}{}
        }
}

func (c *AppCache) Update(in *App, rev int64) {
        c.UpdateModFunc(&in.Key, rev, func(old *App) (*App, bool) {
                return in, true
        })
}

func (c *AppCache) UpdateModFunc(key *AppKey, rev int64, modFunc func(old *App) (new *App, changed bool)) {
        c.Mux.Lock()
        old := c.Objs[*key]
        new, changed := modFunc(old)
        if !changed {
                c.Mux.Unlock()
                return
        }
        if c.UpdatedCb != nil || c.NotifyCb != nil {
                if c.UpdatedCb != nil {
                        newCopy := &App{}
                        *newCopy = *new
                        defer c.UpdatedCb(old, newCopy)
                }
                if c.NotifyCb != nil {
                        defer c.NotifyCb(&new.Key, old)
                }
        }
        c.Objs[new.Key] = new
        log.DebugLog(log.DebugLevelApi, "SyncUpdate App", "obj", new, "rev", rev)
        c.Mux.Unlock()
        c.TriggerKeyWatchers(&new.Key)
}

func (c *AppCache) Delete(in *App, rev int64) {
        c.Mux.Lock()
        old := c.Objs[in.Key]
        delete(c.Objs, in.Key)
        log.DebugLog(log.DebugLevelApi, "SyncDelete App", "key", in.Key, "rev", rev)
        c.Mux.Unlock()
        if c.NotifyCb != nil {
                c.NotifyCb(&in.Key, old)
        }
        c.TriggerKeyWatchers(&in.Key)
}

func (c *AppCache) Prune(validKeys map[AppKey]struct{}) {
        notify := make(map[AppKey]*App)
        c.Mux.Lock()
        for key, _ := range c.Objs {
                if _, ok := validKeys[key]; !ok {
                        if c.NotifyCb != nil {
                                notify[key] = c.Objs[key]
                        }
                        delete(c.Objs, key)
                }
        }
        c.Mux.Unlock()
        for key, old := range notify {
                if c.NotifyCb != nil {
                        c.NotifyCb(&key, old)
                }
                c.TriggerKeyWatchers(&key)
        }
}

func (c *AppCache) GetCount() int {
        c.Mux.Lock()
        defer c.Mux.Unlock()
        return len(c.Objs)
}

func (c *AppCache) Show(filter *App, cb func(ret *App) error) error {
        log.DebugLog(log.DebugLevelApi, "Show App", "count", len(c.Objs))
        c.Mux.Lock()
        defer c.Mux.Unlock()
        for _, obj := range c.Objs {
                if !obj.Matches(filter, MatchFilter()) {
                        continue
                }
                log.DebugLog(log.DebugLevelApi, "Show App", "obj", obj)
                err := cb(obj)
                if err != nil {
                        return err
                }
        }
        return nil
}

func AppGenericNotifyCb(fn func(key *AppKey, old *App)) func(objstore.ObjKey, objstore.Obj) {
        return func(objkey objstore.ObjKey, obj objstore.Obj) {
                fn(objkey.(*AppKey), obj.(*App))
        }
}

func (c *AppCache) SetNotifyCb(fn func(obj *AppKey, old *App)) {
        c.NotifyCb = fn
}

func (c *AppCache) SetUpdatedCb(fn func(old *App, new *App)) {
        c.UpdatedCb = fn
}

func (c *AppCache) WatchKey(key *AppKey, cb func()) context.CancelFunc {
        c.Mux.Lock()
        defer c.Mux.Unlock()
        list, ok := c.KeyWatchers[*key]
        if !ok {
                list = make([]*AppKeyWatcher, 0)
        }
        watcher := AppKeyWatcher{cb: cb}
        c.KeyWatchers[*key] = append(list, &watcher)
        log.DebugLog(log.DebugLevelApi, "Watching App", "key", key)
        return func() {
                c.Mux.Lock()
                defer c.Mux.Unlock()
                list, ok := c.KeyWatchers[*key]
                if !ok {
                        return
                }
                for ii, _ := range list {
                        if list[ii] != &watcher {
                                continue
                        }
                        if len(list) == 1 {
                                delete(c.KeyWatchers, *key)
                                return
                        }
                        list[ii] = list[len(list)-1]
                        list[len(list)-1] = nil
                        c.KeyWatchers[*key] = list[:len(list)-1]
                        return
                }
        }
}

func (c *AppCache) TriggerKeyWatchers(key *AppKey) {
        watchers := make([]*AppKeyWatcher, 0)
        c.Mux.Lock()
        if list, ok := c.KeyWatchers[*key]; ok {
                watchers = append(watchers, list...)
        }
        c.Mux.Unlock()
        for ii, _ := range watchers {
                watchers[ii].cb()
        }
}
func (c *AppCache) SyncUpdate(key, val []byte, rev int64) {
        obj := App{}
        err := json.Unmarshal(val, &obj)
        if err != nil {
                log.WarnLog("Failed to parse App data", "val", string(val))
                return
        }
        c.Update(&obj, rev)
        c.Mux.Lock()
        if c.List != nil {
                c.List[obj.Key] = struct{}{}
        }
        c.Mux.Unlock()
}

func (c *AppCache) SyncDelete(key []byte, rev int64) {
        obj := App{}
        keystr := objstore.DbKeyPrefixRemove(string(key))
        AppKeyStringParse(keystr, &obj.Key)
        c.Delete(&obj, rev)
}

func (c *AppCache) SyncListStart() {
        c.List = make(map[AppKey]struct{})
}

func (c *AppCache) SyncListEnd() {
        deleted := make(map[AppKey]*App)
        c.Mux.Lock()
        for key, val := range c.Objs {
                if _, found := c.List[key]; !found {
                        deleted[key] = val
                        delete(c.Objs, key)
                }
        }
        c.List = nil
        c.Mux.Unlock()
        if c.NotifyCb != nil {
                for key, val := range deleted {
                        c.NotifyCb(&key, val)
                        c.TriggerKeyWatchers(&key)
                }
        }
}

func (m *App) GetKey() objstore.ObjKey {
        return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *App) ValidateEnums() error {
        if err := m.Key.ValidateEnums(); err != nil {
                return err
        }
        if _, ok := ImageType_name[int32(m.ImageType)]; !ok {
                return errors.New("invalid ImageType")
        }
        if _, ok := IpAccess_name[int32(m.IpAccess)]; !ok {
                return errors.New("invalid IpAccess")
        }
        if err := m.DefaultFlavor.ValidateEnums(); err != nil {
                return err
        }
        if err := m.Cluster.ValidateEnums(); err != nil {
                return err
        }
        return nil
}

var ImageTypeStrings = []string{
        "ImageTypeUnknown",
        "ImageTypeDocker",
        "ImageTypeQCOW",
}

const (
        ImageTypeImageTypeUnknown uint64 = 1 << 0
        ImageTypeImageTypeDocker  uint64 = 1 << 1
        ImageTypeImageTypeQCOW    uint64 = 1 << 2
)

func (e *ImageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
        var str string
        err := unmarshal(&str)
        if err != nil {
                return err
        }
        val, ok := ImageType_value[str]
        if !ok {
                // may be enum value instead of string
                ival, err := strconv.Atoi(str)
                val = int32(ival)
                if err == nil {
                        _, ok = ImageType_name[val]
                }
        }
        if !ok {
                return errors.New(fmt.Sprintf("No enum value for %s", str))
        }
        *e = ImageType(val)
        return nil
}

func (e ImageType) MarshalYAML() (interface{}, error) {
        return e.String(), nil
}

type MatchOptions struct {
        // Filter will ignore 0 or nil fields on the passed in object
        Filter bool
        // IgnoreBackend will ignore fields that were marked backend in .proto
        IgnoreBackend bool
        // Sort repeated (arrays) of Key objects so matching does not
        // fail due to order.
        SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
        return func(opts *MatchOptions) {
                opts.Filter = true
        }
}

func MatchIgnoreBackend() MatchOpt {
        return func(opts *MatchOptions) {
                opts.IgnoreBackend = true
        }
}

func MatchSortArrayedKeys() MatchOpt {
        return func(opts *MatchOptions) {
                opts.SortArrayedKeys = true
        }
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
        for _, f := range args {
                f(opts)
        }
}

func (m *AppKey) Size() (n int) {
        var l int
        _ = l
        l = m.DeveloperKey.Size()
        n += 1 + l + sovApp(uint64(l))
        l = len(m.Name)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        l = len(m.Version)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        return n
}

func (m *App) Size() (n int) {
        var l int
        _ = l
        if len(m.Fields) > 0 {
                for _, s := range m.Fields {
                        l = len(s)
                        n += 1 + l + sovApp(uint64(l))
                }
        }
        l = m.Key.Size()
        n += 1 + l + sovApp(uint64(l))
        l = len(m.ImagePath)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        if m.ImageType != 0 {
                n += 1 + sovApp(uint64(m.ImageType))
        }
        if m.IpAccess != 0 {
                n += 1 + sovApp(uint64(m.IpAccess))
        }
        l = len(m.AccessPorts)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        l = len(m.Config)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        l = m.DefaultFlavor.Size()
        n += 1 + l + sovApp(uint64(l))
        l = m.Cluster.Size()
        n += 1 + l + sovApp(uint64(l))
        l = len(m.AppTemplate)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        l = len(m.AuthPublicKey)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        l = len(m.AndroidPackageName)
        if l > 0 {
                n += 1 + l + sovApp(uint64(l))
        }
        return n
}

func sovApp(x uint64) (n int) {
        for {
                n++
                x >>= 7
                if x == 0 {
                        break
                }
        }
        return n
}
func sozApp(x uint64) (n int) {
        return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
        l := len(dAtA)
        iNdEx := 0
        for iNdEx < l {
                preIndex := iNdEx
                var wire uint64
                for shift := uint(0); ; shift += 7 {
                        if shift >= 64 {
                                return ErrIntOverflowApp
                        }
                        if iNdEx >= l {
                                return io.ErrUnexpectedEOF
                        }
                        b := dAtA[iNdEx]
                        iNdEx++
                        wire |= (uint64(b) & 0x7F) << shift
                        if b < 0x80 {
                                break
                        }
                }
                fieldNum := int32(wire >> 3)
                wireType := int(wire & 0x7)
                if wireType == 4 {
                        return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
                }
                if fieldNum <= 0 {
                        return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
                }
                switch fieldNum {
                case 1:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field DeveloperKey", wireType)
                        }
                        var msglen int
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                msglen |= (int(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        if msglen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + msglen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        if err := m.DeveloperKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
                                return err
                        }
                        iNdEx = postIndex
                case 2:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.Name = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 3:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.Version = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                default:
                        iNdEx = preIndex
                        skippy, err := skipApp(dAtA[iNdEx:])
                        if err != nil {
                                return err
                        }
                        if skippy < 0 {
                                return ErrInvalidLengthApp
                        }
                        if (iNdEx + skippy) > l {
                                return io.ErrUnexpectedEOF
                        }
                        iNdEx += skippy
                }
        }

        if iNdEx > l {
                return io.ErrUnexpectedEOF
        }
        return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
        l := len(dAtA)
        iNdEx := 0
        for iNdEx < l {
                preIndex := iNdEx
                var wire uint64
                for shift := uint(0); ; shift += 7 {
                        if shift >= 64 {
                                return ErrIntOverflowApp
                        }
                        if iNdEx >= l {
                                return io.ErrUnexpectedEOF
                        }
                        b := dAtA[iNdEx]
                        iNdEx++
                        wire |= (uint64(b) & 0x7F) << shift
                        if b < 0x80 {
                                break
                        }
                }
                fieldNum := int32(wire >> 3)
                wireType := int(wire & 0x7)
                if wireType == 4 {
                        return fmt.Errorf("proto: App: wiretype end group for non-group")
                }
                if fieldNum <= 0 {
                        return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
                }
                switch fieldNum {
                case 1:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
                        iNdEx = postIndex
                case 2:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
                        }
                        var msglen int
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                msglen |= (int(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        if msglen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + msglen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
                                return err
                        }
                        iNdEx = postIndex
                case 4:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.ImagePath = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 5:
                        if wireType != 0 {
                                return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
                        }
                        m.ImageType = 0
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                m.ImageType |= (ImageType(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                case 6:
                        if wireType != 0 {
                                return fmt.Errorf("proto: wrong wireType = %d for field IpAccess", wireType)
                        }
                        m.IpAccess = 0
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                m.IpAccess |= (IpAccess(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                case 7:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.AccessPorts = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 8:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.Config = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 9:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavor", wireType)
                        }
                        var msglen int
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                msglen |= (int(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        if msglen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + msglen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        if err := m.DefaultFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
                                return err
                        }
                        iNdEx = postIndex
                case 10:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
                        }
                        var msglen int
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                msglen |= (int(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        if msglen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + msglen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
                                return err
                        }
                        iNdEx = postIndex
                case 11:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field AppTemplate", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.AppTemplate = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 12:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field AuthPublicKey", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.AuthPublicKey = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                case 13:
                        if wireType != 2 {
                                return fmt.Errorf("proto: wrong wireType = %d for field AndroidPackageName", wireType)
                        }
                        var stringLen uint64
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                stringLen |= (uint64(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        intStringLen := int(stringLen)
                        if intStringLen < 0 {
                                return ErrInvalidLengthApp
                        }
                        postIndex := iNdEx + intStringLen
                        if postIndex > l {
                                return io.ErrUnexpectedEOF
                        }
                        m.AndroidPackageName = string(dAtA[iNdEx:postIndex])
                        iNdEx = postIndex
                default:
                        iNdEx = preIndex
                        skippy, err := skipApp(dAtA[iNdEx:])
                        if err != nil {
                                return err
                        }
                        if skippy < 0 {
                                return ErrInvalidLengthApp
                        }
                        if (iNdEx + skippy) > l {
                                return io.ErrUnexpectedEOF
                        }
                        iNdEx += skippy
                }
        }

        if iNdEx > l {
                return io.ErrUnexpectedEOF
        }
        return nil
}
func skipApp(dAtA []byte) (n int, err error) {
        l := len(dAtA)
        iNdEx := 0
        for iNdEx < l {
                var wire uint64
                for shift := uint(0); ; shift += 7 {
                        if shift >= 64 {
                                return 0, ErrIntOverflowApp
                        }
                        if iNdEx >= l {
                                return 0, io.ErrUnexpectedEOF
                        }
                        b := dAtA[iNdEx]
                        iNdEx++
                        wire |= (uint64(b) & 0x7F) << shift
                        if b < 0x80 {
                                break
                        }
                }
                wireType := int(wire & 0x7)
                switch wireType {
                case 0:
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return 0, ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return 0, io.ErrUnexpectedEOF
                                }
                                iNdEx++
                                if dAtA[iNdEx-1] < 0x80 {
                                        break
                                }
                        }
                        return iNdEx, nil
                case 1:
                        iNdEx += 8
                        return iNdEx, nil
                case 2:
                        var length int
                        for shift := uint(0); ; shift += 7 {
                                if shift >= 64 {
                                        return 0, ErrIntOverflowApp
                                }
                                if iNdEx >= l {
                                        return 0, io.ErrUnexpectedEOF
                                }
                                b := dAtA[iNdEx]
                                iNdEx++
                                length |= (int(b) & 0x7F) << shift
                                if b < 0x80 {
                                        break
                                }
                        }
                        iNdEx += length
                        if length < 0 {
                                return 0, ErrInvalidLengthApp
                        }
                        return iNdEx, nil
                case 3:
                        for {
                                var innerWire uint64
                                var start int = iNdEx
                                for shift := uint(0); ; shift += 7 {
                                        if shift >= 64 {
                                                return 0, ErrIntOverflowApp
                                        }
                                        if iNdEx >= l {
                                                return 0, io.ErrUnexpectedEOF
                                        }
                                        b := dAtA[iNdEx]
                                        iNdEx++
                                        innerWire |= (uint64(b) & 0x7F) << shift
                                        if b < 0x80 {
                                                break
                                        }
                                }
                                innerWireType := int(innerWire & 0x7)
                                if innerWireType == 4 {
                                        break
                                }
                                next, err := skipApp(dAtA[start:])
                                if err != nil {
                                        return 0, err
                                }
                                iNdEx = start + next
                        }
                        return iNdEx, nil
                case 4:
                        return iNdEx, nil
                case 5:
                        iNdEx += 4
                        return iNdEx, nil
                default:
                        return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
                }
        }
        panic("unreachable")
}

var (
        ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
        ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
        // 734 bytes of a gzipped FileDescriptorProto
        0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6b, 0x1b, 0x49,
        0x18, 0xf5, 0x48, 0x3a, 0xc9, 0x3b, 0xfa, 0x61, 0x79, 0xac, 0xf3, 0x0d, 0xe6, 0x90, 0x75, 0x3a,
        0x38, 0x74, 0x06, 0x69, 0x8d, 0xdd, 0xdc, 0xb9, 0x93, 0x6c, 0x1c, 0x8c, 0x21, 0x51, 0x14, 0x9b,
        0x94, 0xcb, 0x68, 0x77, 0xb4, 0x5a, 0xb4, 0xbb, 0x33, 0xec, 0xce, 0xda, 0x51, 0x17, 0x52, 0xa5,
        0x4f, 0x93, 0x22, 0x45, 0x20, 0x4d, 0xca, 0xfc, 0x19, 0x2e, 0x03, 0xe9, 0x43, 0x62, 0x52, 0xa4,
        0x0c, 0xd8, 0x45, 0xca, 0x30, 0xb3, 0xbb, 0xf2, 0x26, 0xa4, 0x08, 0x6e, 0xc4, 0xf7, 0xbd, 0xef,
        0x7b, 0x6f, 0xde, 0x8c, 0x1e, 0x0b, 0x35, 0xc2, 0x79, 0x8f, 0x07, 0x4c, 0x30, 0xa4, 0x51, 0xcb,
        0xa6, 0xaa, 0xdc, 0xf8, 0xd3, 0x66, 0xcc, 0x76, 0xa9, 0x4e, 0xb8, 0xa3, 0x13, 0xdf, 0x67, 0x82,
        0x08, 0x87, 0xf9, 0x61, 0xbc, 0xb8, 0x51, 0x09, 0x68, 0x18, 0xb9, 0x22, 0xe9, 0xfe, 0xb3, 0x1d,
        0x31, 0x8d, 0xc6, 0x3d, 0x93, 0x79, 0xba, 0xc7, 0xc6, 0x8e, 0x2b, 0x65, 0x1e, 0xe9, 0xf2, 0xb7,
        0x6b, 0xba, 0x2c, 0xb2, 0x74, 0xb5, 0x67, 0x53, 0x7f, 0x51, 0x24, 0xcc, 0x3b, 0xbf, 0xc6, 0x34,
        0xbb, 0x36, 0xf5, 0xbb, 0xa6, 0x97, 0xb6, 0x99, 0x22, 0x11, 0x5a, 0xb1, 0xe8, 0x19, 0x75, 0x19,
        0xa7, 0x41, 0xea, 0x70, 0xe2, 0x92, 0x33, 0x96, 0x76, 0x55, 0xd3, 0x8d, 0x42, 0x71, 0x33, 0x34,
        0x99, 0xe7, 0xb1, 0xd4, 0x44, 0x37, 0x63, 0xc2, 0x66, 0x36, 0x8b, 0xb5, 0xc7, 0xd1, 0x44, 0x75,
        0xaa, 0x51, 0x55, 0xbc, 0xde, 0x7e, 0x0a, 0x60, 0xb1, 0xcf, 0xf9, 0x31, 0x9d, 0xa3, 0x01, 0xac,
        0x2e, 0xce, 0x35, 0x66, 0x74, 0x8e, 0x41, 0x0b, 0x74, 0xca, 0x3b, 0x7f, 0xf4, 0x16, 0xef, 0xd8,
        0x3b, 0x48, 0xe7, 0xc7, 0x74, 0x3e, 0x28, 0x5c, 0xbc, 0xdf, 0x5c, 0x1a, 0x55, 0xac, 0x0c, 0x86,
        0x10, 0x2c, 0xf8, 0xc4, 0xa3, 0x38, 0xd7, 0x02, 0x1d, 0x6d, 0xa4, 0x6a, 0x84, 0x61, 0xe9, 0x8c,
        0x06, 0xa1, 0xc3, 0x7c, 0x9c, 0x57, 0x70, 0xda, 0xee, 0x55, 0x3e, 0x5f, 0x61, 0xf0, 0xf5, 0x0a,
        0x83, 0x37, 0x2f, 0x37, 0x41, 0xfb, 0x45, 0x01, 0xe6, 0xfb, 0x9c, 0xa3, 0x75, 0x58, 0x9c, 0x38,
        0xd4, 0xb5, 0x42, 0x0c, 0x5a, 0xf9, 0x8e, 0x36, 0x4a, 0x3a, 0xf4, 0x2f, 0xcc, 0x4b, 0x57, 0x39,
        0xe5, 0x6a, 0x35, 0xe3, 0x2a, 0xf6, 0x9f, 0xf8, 0x91, 0x3b, 0xe8, 0x6f, 0x08, 0x1d, 0x8f, 0xd8,
        0xd4, 0xe0, 0x44, 0x4c, 0x71, 0x41, 0x9e, 0x3a, 0x28, 0xbc, 0xbe, 0xc6, 0x60, 0xa4, 0x29, 0x7c,
        0x48, 0xc4, 0x14, 0xed, 0xa6, 0x4b, 0x62, 0xce, 0x29, 0xfe, 0xad, 0x05, 0x3a, 0xb5, 0x9d, 0x46,
        0x46, 0xf6, 0x48, 0x0e, 0x4f, 0xe6, 0x9c, 0x26, 0x24, 0x59, 0xa2, 0x6d, 0xa8, 0x39, 0xdc, 0x20,
        0xa6, 0x49, 0xc3, 0x10, 0x17, 0x15, 0x67, 0x2d, 0xcb, 0xe1, 0x7d, 0x35, 0x1a, 0x2d, 0x3b, 0x49,
        0x85, 0xfe, 0x82, 0x95, 0x78, 0xdd, 0xe0, 0x2c, 0x10, 0x21, 0x2e, 0xa9, 0x37, 0x28, 0xc7, 0xd8,
        0x50, 0x42, 0xf2, 0xc6, 0x26, 0xf3, 0x27, 0x8e, 0x8d, 0x97, 0xd5, 0x30, 0xe9, 0x50, 0x1f, 0xd6,
        0x2c, 0x3a, 0x21, 0x91, 0x2b, 0x8c, 0x38, 0x00, 0x58, 0x53, 0x97, 0xcf, 0xba, 0x3c, 0x54, 0x83,
        0x9b, 0xfb, 0x57, 0x13, 0x46, 0x8c, 0xa3, 0xff, 0x61, 0x29, 0x49, 0x0b, 0x86, 0x8a, 0xfb, 0x7b,
        0x86, 0xbb, 0x1f, 0x4f, 0x24, 0x79, 0x59, 0xbe, 0x8e, 0x12, 0x48, 0xf7, 0x95, 0x71, 0xce, 0x0d,
        0x41, 0x3d, 0xee, 0x12, 0x41, 0x71, 0x39, 0x31, 0xce, 0xf9, 0x49, 0x02, 0xa1, 0x7f, 0xe0, 0x0a,
        0x89, 0xc4, 0xd4, 0xe0, 0xd1, 0xd8, 0x75, 0x4c, 0x15, 0x9a, 0x8a, 0xda, 0xaa, 0x4a, 0x78, 0xa8,
        0x50, 0x19, 0x8b, 0x6d, 0xd8, 0x20, 0xbe, 0x15, 0x30, 0xc7, 0x32, 0x38, 0x31, 0x67, 0xf2, 0xd1,
        0x55, 0x4c, 0xaa, 0x6a, 0x19, 0x25, 0xb3, 0x61, 0x3c, 0xba, 0x4b, 0x3c, 0xba, 0x57, 0x97, 0xd1,
        0xf8, 0x72, 0x85, 0xc1, 0xe3, 0x6b, 0x0c, 0x9e, 0x5f, 0x63, 0xb0, 0x75, 0x04, 0xb5, 0xc5, 0x3f,
        0x82, 0x1a, 0xb0, 0xbe, 0x68, 0x4e, 0xfd, 0x99, 0xcf, 0xce, 0xfd, 0xfa, 0x12, 0x5a, 0x83, 0x2b,
        0x0b, 0xf4, 0x80, 0x99, 0x33, 0x1a, 0xd4, 0x01, 0x5a, 0x85, 0xd5, 0x05, 0x78, 0x7f, 0xff, 0xde,
        0xc3, 0x7a, 0x6e, 0xe7, 0x55, 0x4e, 0x85, 0xbe, 0xcf, 0x1d, 0x74, 0x08, 0xb5, 0xfd, 0x80, 0x12,
        0x41, 0x65, 0xf2, 0x6a, 0xdf, 0x87, 0x6a, 0x23, 0x1b, 0xb2, 0x91, 0xfa, 0x46, 0xb4, 0xd7, 0x9f,
        0xbc, 0xfb, 0xf4, 0x2c, 0x57, 0x6f, 0x97, 0x75, 0x53, 0xd1, 0x74, 0xc2, 0xf9, 0x1e, 0xd8, 0x92,
        0x3a, 0x07, 0xd4, 0xa5, 0xb7, 0xd0, 0xb1, 0x14, 0x2d, 0xa3, 0x73, 0xca, 0xad, 0xdb, 0xf8, 0x89,
        0x14, 0x2d, 0xd5, 0xe9, 0xc3, 0xd2, 0x83, 0x29, 0x3b, 0xff, 0x99, 0xca, 0x0f, 0x7d, 0xbb, 0xa1,
        0x24, 0x6a, 0x6d, 0x4d, 0x0f, 0xa7, 0xec, 0x3c, 0x11, 0xd8, 0x06, 0x83, 0xfa, 0xc5, 0xc7, 0xe6,
        0xd2, 0xc5, 0x65, 0x13, 0xbc, 0xbd, 0x6c, 0x82, 0x0f, 0x97, 0x4d, 0x30, 0x2e, 0x2a, 0xd2, 0xee,
        0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x13, 0x15, 0x74, 0x65, 0x05, 0x00, 0x00,
}