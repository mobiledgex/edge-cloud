// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
	Package edgeproto is a generated protocol buffer package.

	It is generated from these files:
		app.proto
		app_inst.proto
		cloud-resource-manager.proto
		cloudlet.proto
		cluster.proto
		clusterinst.proto
		common.proto
		developer.proto
		flavor.proto
		notice.proto
		operator.proto
		result.proto

	It has these top-level messages:
		AppKey
		App
		AppInstKey
		AppInst
		AppInstInfo
		AppInstMetrics
		CloudResource
		EdgeCloudApp
		EdgeCloudApplication
		CloudletKey
		Cloudlet
		CloudletInfo
		CloudletMetrics
		ClusterKey
		Cluster
		ClusterInstKey
		ClusterInst
		ClusterInstInfo
		DeveloperKey
		Developer
		FlavorKey
		Flavor
		NoticeReply
		NoticeRequest
		OperatorCode
		OperatorKey
		Operator
		Result
*/
package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ImageType specifies the image type
type ImageType int32

const (
	ImageType_ImageTypeUnknown ImageType = 0
	ImageType_ImageTypeDocker  ImageType = 1
	ImageType_ImageTypeQCOW    ImageType = 2
)

var ImageType_name = map[int32]string{
	0: "ImageTypeUnknown",
	1: "ImageTypeDocker",
	2: "ImageTypeQCOW",
}
var ImageType_value = map[string]int32{
	"ImageTypeUnknown": 0,
	"ImageTypeDocker":  1,
	"ImageTypeQCOW":    2,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}
func (ImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// AccessLayer defines what layers must be exposed
type AccessLayer int32

const (
	AccessLayer_AccessLayerUnknown AccessLayer = 0
	AccessLayer_AccessLayerL4      AccessLayer = 1
	AccessLayer_AccessLayerL7      AccessLayer = 2
	AccessLayer_AccessLayerL4L7    AccessLayer = 3
)

var AccessLayer_name = map[int32]string{
	0: "AccessLayerUnknown",
	1: "AccessLayerL4",
	2: "AccessLayerL7",
	3: "AccessLayerL4L7",
}
var AccessLayer_value = map[string]int32{
	"AccessLayerUnknown": 0,
	"AccessLayerL4":      1,
	"AccessLayerL7":      2,
	"AccessLayerL4L7":    3,
}

func (x AccessLayer) String() string {
	return proto.EnumName(AccessLayer_name, int32(x))
}
func (AccessLayer) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

// key that uniquely identifies an application
// It is important that embedded structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded structs have nullable false.
type AppKey struct {
	// developer key
	DeveloperKey DeveloperKey `protobuf:"bytes,1,opt,name=developer_key,json=developerKey" json:"developer_key"`
	// application name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// version of the app
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()                    { *m = AppKey{} }
func (m *AppKey) String() string            { return proto.CompactTextString(m) }
func (*AppKey) ProtoMessage()               {}
func (*AppKey) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// Applications are created and uploaded by developers
// Only registered applications can access location and cloudlet services
type App struct {
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key AppKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Path to the application container or VM on shared storage
	ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// Image type
	ImageType ImageType `protobuf:"varint,5,opt,name=image_type,json=imageType,proto3,enum=edgeproto.ImageType" json:"image_type,omitempty"`
	// Access layer(s)
	AccessLayer AccessLayer `protobuf:"varint,6,opt,name=access_layer,json=accessLayer,proto3,enum=edgeproto.AccessLayer" json:"access_layer,omitempty"`
	// For Layer4 access, the ports the app listens on.
	AccessPorts string `protobuf:"bytes,7,opt,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	// initial config passed to image (docker only)?
	// is this a string format of the file or a pointer to the
	// file stored elsewhere?
	ConfigMap string `protobuf:"bytes,8,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty"`
	// resource requirements
	Flavor FlavorKey `protobuf:"bytes,9,opt,name=flavor" json:"flavor"`
	// Cluster on which the app can be instantiated.
	// If not specified during create, a cluster will be automatically created.
	Cluster ClusterKey `protobuf:"bytes,10,opt,name=cluster" json:"cluster"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func init() {
	proto.RegisterType((*AppKey)(nil), "edgeproto.AppKey")
	proto.RegisterType((*App)(nil), "edgeproto.App")
	proto.RegisterEnum("edgeproto.ImageType", ImageType_name, ImageType_value)
	proto.RegisterEnum("edgeproto.AccessLayer", AccessLayer_name, AccessLayer_value)
}
func (this *AppKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.AppKey{")
	s = append(s, "DeveloperKey: "+strings.Replace(this.DeveloperKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppApi service

type AppApiClient interface {
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
}

type appApiClient struct {
	cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AppApi/ShowApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowAppClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appApiShowAppClient struct {
	grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppApi service

type AppApiServer interface {
	CreateApp(context.Context, *App) (*Result, error)
	DeleteApp(context.Context, *App) (*Result, error)
	UpdateApp(context.Context, *App) (*Result, error)
	ShowApp(*App, AppApi_ShowAppServer) error
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
	s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(App)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appApiShowAppServer struct {
	grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppApi_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppApi_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppApi_UpdateApp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowApp",
			Handler:       _AppApi_ShowApp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.DeveloperKey.Size()))
	n1, err := m.DeveloperKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if m.ImageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.ImageType))
	}
	if m.AccessLayer != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.AccessLayer))
	}
	if len(m.AccessPorts) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AccessPorts)))
		i += copy(dAtA[i:], m.AccessPorts)
	}
	if len(m.ConfigMap) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ConfigMap)))
		i += copy(dAtA[i:], m.ConfigMap)
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Flavor.Size()))
	n3, err := m.Flavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x52
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Cluster.Size()))
	n4, err := m.Cluster.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppKey) Matches(filter *AppKey) bool {
	if filter == nil {
		return true
	}
	if !m.DeveloperKey.Matches(&filter.DeveloperKey) {
		return false
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	if filter.Version != "" && filter.Version != m.Version {
		return false
	}
	return true
}

func (m *AppKey) MatchesIgnoreBackend(filter *AppKey) bool {
	if filter == nil {
		return true
	}
	if !m.DeveloperKey.MatchesIgnoreBackend(&filter.DeveloperKey) {
		return false
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	if filter.Version != "" && filter.Version != m.Version {
		return false
	}
	return true
}

func (m *AppKey) CopyInFields(src *AppKey) {
	m.DeveloperKey.Name = src.DeveloperKey.Name
	m.Name = src.Name
	m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal AppKey key string", "obj", m)
	}
	return string(key)
}

func AppKeyStringParse(str string, key *AppKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal AppKey key string", "str", str)
	}
}

func (m *App) Matches(filter *App) bool {
	if filter == nil {
		return true
	}
	if !m.Key.Matches(&filter.Key) {
		return false
	}
	if filter.ImagePath != "" && filter.ImagePath != m.ImagePath {
		return false
	}
	if filter.ImageType != 0 && filter.ImageType != m.ImageType {
		return false
	}
	if filter.AccessLayer != 0 && filter.AccessLayer != m.AccessLayer {
		return false
	}
	if filter.AccessPorts != "" && filter.AccessPorts != m.AccessPorts {
		return false
	}
	if filter.ConfigMap != "" && filter.ConfigMap != m.ConfigMap {
		return false
	}
	if !m.Flavor.Matches(&filter.Flavor) {
		return false
	}
	if !m.Cluster.Matches(&filter.Cluster) {
		return false
	}
	return true
}

func (m *App) MatchesIgnoreBackend(filter *App) bool {
	if filter == nil {
		return true
	}
	if !m.Key.MatchesIgnoreBackend(&filter.Key) {
		return false
	}
	if filter.ImageType != 0 && filter.ImageType != m.ImageType {
		return false
	}
	if filter.AccessLayer != 0 && filter.AccessLayer != m.AccessLayer {
		return false
	}
	if filter.AccessPorts != "" && filter.AccessPorts != m.AccessPorts {
		return false
	}
	if filter.ConfigMap != "" && filter.ConfigMap != m.ConfigMap {
		return false
	}
	if !m.Flavor.MatchesIgnoreBackend(&filter.Flavor) {
		return false
	}
	if !m.Cluster.MatchesIgnoreBackend(&filter.Cluster) {
		return false
	}
	return true
}

const AppFieldKey = "2"
const AppFieldKeyDeveloperKey = "2.1"
const AppFieldKeyDeveloperKeyName = "2.1.2"
const AppFieldKeyName = "2.2"
const AppFieldKeyVersion = "2.3"
const AppFieldImagePath = "4"
const AppFieldImageType = "5"
const AppFieldAccessLayer = "6"
const AppFieldAccessPorts = "7"
const AppFieldConfigMap = "8"
const AppFieldFlavor = "9"
const AppFieldFlavorName = "9.1"
const AppFieldCluster = "10"
const AppFieldClusterName = "10.1"

var AppAllFields = []string{
	AppFieldKeyDeveloperKeyName,
	AppFieldKeyName,
	AppFieldKeyVersion,
	AppFieldImagePath,
	AppFieldImageType,
	AppFieldAccessLayer,
	AppFieldAccessPorts,
	AppFieldConfigMap,
	AppFieldFlavorName,
	AppFieldClusterName,
}

var AppAllFieldsMap = map[string]struct{}{
	AppFieldKeyDeveloperKeyName: struct{}{},
	AppFieldKeyName:             struct{}{},
	AppFieldKeyVersion:          struct{}{},
	AppFieldImagePath:           struct{}{},
	AppFieldImageType:           struct{}{},
	AppFieldAccessLayer:         struct{}{},
	AppFieldAccessPorts:         struct{}{},
	AppFieldConfigMap:           struct{}{},
	AppFieldFlavorName:          struct{}{},
	AppFieldClusterName:         struct{}{},
}

func (m *App) DiffFields(o *App, fields map[string]struct{}) {
	if m.Key.DeveloperKey.Name != o.Key.DeveloperKey.Name {
		fields[AppFieldKeyDeveloperKeyName] = struct{}{}
		fields[AppFieldKeyDeveloperKey] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AppFieldKeyName] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Version != o.Key.Version {
		fields[AppFieldKeyVersion] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.ImagePath != o.ImagePath {
		fields[AppFieldImagePath] = struct{}{}
	}
	if m.ImageType != o.ImageType {
		fields[AppFieldImageType] = struct{}{}
	}
	if m.AccessLayer != o.AccessLayer {
		fields[AppFieldAccessLayer] = struct{}{}
	}
	if m.AccessPorts != o.AccessPorts {
		fields[AppFieldAccessPorts] = struct{}{}
	}
	if m.ConfigMap != o.ConfigMap {
		fields[AppFieldConfigMap] = struct{}{}
	}
	if m.Flavor.Name != o.Flavor.Name {
		fields[AppFieldFlavorName] = struct{}{}
		fields[AppFieldFlavor] = struct{}{}
	}
	if m.Cluster.Name != o.Cluster.Name {
		fields[AppFieldClusterName] = struct{}{}
		fields[AppFieldCluster] = struct{}{}
	}
}

func (m *App) CopyInFields(src *App) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.2"]; set {
				m.Key.DeveloperKey.Name = src.Key.DeveloperKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			m.Key.Name = src.Key.Name
		}
		if _, set := fmap["2.3"]; set {
			m.Key.Version = src.Key.Version
		}
	}
	if _, set := fmap["4"]; set {
		m.ImagePath = src.ImagePath
	}
	if _, set := fmap["5"]; set {
		m.ImageType = src.ImageType
	}
	if _, set := fmap["6"]; set {
		m.AccessLayer = src.AccessLayer
	}
	if _, set := fmap["7"]; set {
		m.AccessPorts = src.AccessPorts
	}
	if _, set := fmap["8"]; set {
		m.ConfigMap = src.ConfigMap
	}
	if _, set := fmap["9"]; set {
		if _, set := fmap["9.1"]; set {
			m.Flavor.Name = src.Flavor.Name
		}
	}
	if _, set := fmap["10"]; set {
		if _, set := fmap["10.1"]; set {
			m.Cluster.Name = src.Cluster.Name
		}
	}
}

func (s *App) HasFields() bool {
	return true
}

type AppStore struct {
	kvstore objstore.KVStore
}

func NewAppStore(kvstore objstore.KVStore) AppStore {
	return AppStore{kvstore: kvstore}
}

func (s *AppStore) Create(m *App, wait func(int64)) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Update(m *App, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur App
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Put(m *App, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur App
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Delete(m *App, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) LoadOne(key string) (*App, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj App
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse App data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppStore) STMGet(stm concurrency.STM, key *AppKey, buf *App) bool {
	keystr := objstore.DbKeyString("App", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppStore) STMPut(stm concurrency.STM, obj *App) {
	keystr := objstore.DbKeyString("App", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *AppStore) STMDel(stm concurrency.STM, key *AppKey) {
	keystr := objstore.DbKeyString("App", key)
	stm.Del(keystr)
}

// AppCache caches App objects in memory in a hash table
// and keeps them in sync with the database.
type AppCache struct {
	Objs      map[AppKey]*App
	Mux       util.Mutex
	List      map[AppKey]struct{}
	NotifyCb  func(obj *AppKey)
	UpdatedCb func(old *App, new *App)
}

func NewAppCache() *AppCache {
	cache := AppCache{}
	InitAppCache(&cache)
	return &cache
}

func InitAppCache(cache *AppCache) {
	cache.Objs = make(map[AppKey]*App)
}

func (c *AppCache) GetTypeString() string {
	return "App"
}

func (c *AppCache) Get(key *AppKey, valbuf *App) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *AppCache) HasKey(key *AppKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppCache) GetAllKeys(keys map[AppKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *AppCache) Update(in *App, rev int64) {
	c.Mux.Lock()
	if c.UpdatedCb != nil {
		old := c.Objs[in.Key]
		new := &App{}
		*new = *in
		defer c.UpdatedCb(old, new)
	}
	c.Objs[in.Key] = in
	log.DebugLog(log.DebugLevelApi, "SyncUpdate", "obj", in, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key)
	}
}

func (c *AppCache) Delete(in *App, rev int64) {
	c.Mux.Lock()
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key)
	}
}

func (c *AppCache) Prune(validKeys map[AppKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			delete(c.Objs, key)
			if c.NotifyCb != nil {
				c.NotifyCb(&key)
			}
		}
	}
}

func (c *AppCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppCache) Show(filter *App, cb func(ret *App) error) error {
	log.DebugLog(log.DebugLevelApi, "Show App", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show App", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func (c *AppCache) SetNotifyCb(fn func(obj *AppKey)) {
	c.NotifyCb = fn
}

func (c *AppCache) SetUpdatedCb(fn func(old *App, new *App)) {
	c.UpdatedCb = fn
}
func (c *AppCache) SyncUpdate(key, val []byte, rev int64) {
	obj := App{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse App data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppCache) SyncDelete(key []byte, rev int64) {
	obj := App{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *AppCache) SyncListStart() {
	c.List = make(map[AppKey]struct{})
}

func (c *AppCache) SyncListEnd() {
	deleted := make(map[AppKey]struct{})
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, found := c.List[key]; !found {
			delete(c.Objs, key)
			deleted[key] = struct{}{}
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, _ := range deleted {
			c.NotifyCb(&key)
		}
	}
}
func (m *App) GetKey() *AppKey {
	return &m.Key
}

var ImageTypeStrings = []string{
	"ImageTypeUnknown",
	"ImageTypeDocker",
	"ImageTypeQCOW",
}

const (
	ImageTypeImageTypeUnknown uint64 = 1 << 0
	ImageTypeImageTypeDocker  uint64 = 1 << 1
	ImageTypeImageTypeQCOW    uint64 = 1 << 2
)

func (e *ImageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ImageType_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ImageType_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ImageType(val)
	return nil
}

func (e ImageType) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

var AccessLayerStrings = []string{
	"AccessLayerUnknown",
	"AccessLayerL4",
	"AccessLayerL7",
	"AccessLayerL4L7",
}

const (
	AccessLayerAccessLayerUnknown uint64 = 1 << 0
	AccessLayerAccessLayerL4      uint64 = 1 << 1
	AccessLayerAccessLayerL7      uint64 = 1 << 2
	AccessLayerAccessLayerL4L7    uint64 = 1 << 3
)

func (e *AccessLayer) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := AccessLayer_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = AccessLayer_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = AccessLayer(val)
	return nil
}

func (e AccessLayer) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *AppKey) Size() (n int) {
	var l int
	_ = l
	l = m.DeveloperKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *App) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ImageType != 0 {
		n += 1 + sovApp(uint64(m.ImageType))
	}
	if m.AccessLayer != 0 {
		n += 1 + sovApp(uint64(m.AccessLayer))
	}
	l = len(m.AccessPorts)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.ConfigMap)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = m.Flavor.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Cluster.Size()
	n += 1 + l + sovApp(uint64(l))
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			m.ImageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageType |= (ImageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLayer", wireType)
			}
			m.AccessLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessLayer |= (AccessLayer(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xee, 0x25, 0x6d, 0x82, 0x2f, 0x49, 0xeb, 0x1e, 0x25, 0x1c, 0x15, 0x4d, 0x43, 0xc4, 0x10,
	0x2a, 0x25, 0x46, 0x29, 0xa8, 0xd0, 0x2d, 0x69, 0x55, 0x54, 0xb5, 0x88, 0x12, 0xa8, 0x18, 0xc3,
	0xc5, 0xbe, 0x38, 0x56, 0x1d, 0xdf, 0xc9, 0x76, 0x5a, 0xb2, 0x21, 0x58, 0x10, 0x2b, 0x0b, 0x23,
	0x12, 0x1b, 0x13, 0xe2, 0xaf, 0xe8, 0x88, 0xc4, 0x8e, 0xa0, 0x62, 0xe8, 0x88, 0xd4, 0x0e, 0xb0,
	0x21, 0x9f, 0x7f, 0xe4, 0x8a, 0x18, 0x50, 0x97, 0xe8, 0x7d, 0xef, 0x7d, 0xdf, 0x77, 0x9f, 0x9e,
	0x9f, 0x02, 0x15, 0xc2, 0x79, 0x9d, 0xbb, 0xcc, 0x67, 0x48, 0xa1, 0x86, 0x49, 0x45, 0x39, 0x7f,
	0xd5, 0x64, 0xcc, 0xb4, 0xa9, 0x46, 0xb8, 0xa5, 0x11, 0xc7, 0x61, 0x3e, 0xf1, 0x2d, 0xe6, 0x78,
	0x21, 0x71, 0x3e, 0xef, 0x52, 0x6f, 0x68, 0xfb, 0x11, 0xba, 0x63, 0x5a, 0x7e, 0x7f, 0xd8, 0xad,
	0xeb, 0x6c, 0xa0, 0x0d, 0x58, 0xd7, 0xb2, 0x03, 0x9b, 0x67, 0x5a, 0xf0, 0x5b, 0xd3, 0x6d, 0x36,
	0x34, 0x34, 0xc1, 0x33, 0xa9, 0x93, 0x14, 0x91, 0xf2, 0xde, 0xff, 0x29, 0xf5, 0x9a, 0x49, 0x9d,
	0x9a, 0x3e, 0x88, 0xa1, 0x54, 0x44, 0x46, 0x33, 0x06, 0xdd, 0xa7, 0x36, 0xe3, 0xd4, 0x8d, 0x13,
	0xf6, 0x6c, 0xb2, 0xcf, 0x62, 0x54, 0xd0, 0xed, 0xa1, 0xe7, 0x27, 0xc3, 0x9a, 0xf4, 0xac, 0xc9,
	0x4c, 0x16, 0xba, 0x75, 0x87, 0x3d, 0x81, 0x04, 0x10, 0x55, 0x48, 0xaf, 0xbc, 0x02, 0x30, 0xd3,
	0xe4, 0x7c, 0x8b, 0x8e, 0x50, 0x0b, 0x16, 0x92, 0x97, 0x3a, 0x7b, 0x74, 0x84, 0x41, 0x19, 0x54,
	0x73, 0x8d, 0xcb, 0xf5, 0x64, 0x73, 0xf5, 0xf5, 0x78, 0xbe, 0x45, 0x47, 0xad, 0xc9, 0xc3, 0xaf,
	0x8b, 0x13, 0xed, 0xbc, 0x21, 0xf5, 0x10, 0x82, 0x93, 0x0e, 0x19, 0x50, 0x9c, 0x2a, 0x83, 0xaa,
	0xd2, 0x16, 0x35, 0xc2, 0x30, 0xbb, 0x4f, 0x5d, 0xcf, 0x62, 0x0e, 0x4e, 0x8b, 0x76, 0x0c, 0x57,
	0xf3, 0xc7, 0x27, 0x18, 0xfc, 0x3a, 0xc1, 0xe0, 0xe3, 0xbb, 0x45, 0x50, 0xf9, 0x90, 0x86, 0xe9,
	0x26, 0xe7, 0xa8, 0x08, 0x33, 0x3d, 0x8b, 0xda, 0x86, 0x87, 0x41, 0x39, 0x5d, 0x55, 0xda, 0x11,
	0x42, 0x37, 0x60, 0x3a, 0x48, 0x95, 0x12, 0xa9, 0x66, 0xa5, 0x54, 0x61, 0xfe, 0x28, 0x4f, 0xc0,
	0x41, 0xd7, 0x21, 0xb4, 0x06, 0xc4, 0xa4, 0x1d, 0x4e, 0xfc, 0x3e, 0x9e, 0x0c, 0x5e, 0x6d, 0x4d,
	0x1d, 0xbf, 0xfc, 0x0d, 0x40, 0x5b, 0x11, 0x83, 0x1d, 0xe2, 0xf7, 0xd1, 0x72, 0xcc, 0xf2, 0x47,
	0x9c, 0xe2, 0xa9, 0x32, 0xa8, 0x4e, 0x37, 0xe6, 0x24, 0xdf, 0xcd, 0x60, 0xf8, 0x78, 0xc4, 0x69,
	0x24, 0x0a, 0x4a, 0x74, 0x17, 0xe6, 0x89, 0xae, 0x53, 0xcf, 0xeb, 0xd8, 0x64, 0x44, 0x5d, 0x9c,
	0x11, 0xb2, 0xa2, 0x1c, 0x47, 0x8c, 0xb7, 0x83, 0x69, 0x3b, 0x47, 0xc6, 0x00, 0x5d, 0x4b, 0xa4,
	0x9c, 0xb9, 0xbe, 0x87, 0xb3, 0x62, 0x1b, 0x11, 0x65, 0x27, 0x68, 0xa1, 0x05, 0x08, 0x75, 0xe6,
	0xf4, 0x2c, 0xb3, 0x33, 0x20, 0x1c, 0x5f, 0x10, 0x04, 0x25, 0xec, 0xdc, 0x27, 0x1c, 0x35, 0x60,
	0x26, 0xfc, 0xf6, 0x58, 0x11, 0x5b, 0x90, 0xd3, 0x6e, 0x88, 0xc1, 0x78, 0x11, 0x11, 0x13, 0xdd,
	0x86, 0xd9, 0xe8, 0x42, 0x30, 0x14, 0xa2, 0x4b, 0x92, 0x68, 0x2d, 0x9c, 0x8c, 0x55, 0x31, 0x77,
	0x75, 0x21, 0xf8, 0x36, 0x3f, 0x4f, 0x30, 0x78, 0x7e, 0x8a, 0xc1, 0xdb, 0x53, 0x0c, 0x5e, 0x7f,
	0xba, 0xa2, 0x6c, 0xc6, 0xbb, 0x5b, 0xda, 0x84, 0x4a, 0xb2, 0x1e, 0x34, 0x07, 0xd5, 0x04, 0xec,
	0x3a, 0x7b, 0x0e, 0x3b, 0x70, 0xd4, 0x09, 0x74, 0x11, 0xce, 0x24, 0xdd, 0x75, 0xa6, 0xef, 0x51,
	0x57, 0x05, 0x68, 0x16, 0x16, 0x92, 0xe6, 0xc3, 0xb5, 0x07, 0x4f, 0xd4, 0xd4, 0xd2, 0x53, 0x98,
	0x93, 0x56, 0x86, 0x8a, 0x10, 0x49, 0x70, 0x6c, 0x37, 0x0b, 0x0b, 0x52, 0x7f, 0xfb, 0x56, 0x68,
	0x26, 0xb7, 0x56, 0xd4, 0x54, 0xf0, 0xe8, 0x19, 0xd6, 0xf6, 0x8a, 0x9a, 0x6e, 0xbc, 0x4f, 0x89,
	0x23, 0x6f, 0x72, 0x0b, 0x6d, 0x40, 0x65, 0xcd, 0xa5, 0xc4, 0xa7, 0xc1, 0xa5, 0x4d, 0x9f, 0x3d,
	0xa2, 0x79, 0xf9, 0xa8, 0xda, 0xe2, 0x5f, 0xa0, 0x52, 0x7c, 0xf1, 0xe5, 0xc7, 0x9b, 0x94, 0x5a,
	0xc9, 0x69, 0xba, 0x90, 0x69, 0x84, 0xf3, 0x55, 0xb0, 0x14, 0xf8, 0xac, 0x53, 0x9b, 0x9e, 0xc3,
	0xc7, 0x10, 0x32, 0xc9, 0x67, 0x97, 0x1b, 0xe7, 0xc9, 0x33, 0x14, 0xb2, 0xd8, 0xa7, 0x09, 0xb3,
	0x8f, 0xfa, 0xec, 0xe0, 0x5f, 0x2e, 0x7f, 0xe1, 0xca, 0x9c, 0xb0, 0x98, 0xae, 0x28, 0x9a, 0xd7,
	0x67, 0x07, 0x91, 0xc1, 0x4d, 0xd0, 0x52, 0x0f, 0xbf, 0x97, 0x26, 0x0e, 0x8f, 0x4a, 0xe0, 0xf3,
	0x51, 0x09, 0x7c, 0x3b, 0x2a, 0x81, 0x6e, 0x46, 0x88, 0x96, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x85, 0x61, 0x6e, 0x47, 0x05, 0x00, 0x00,
}
