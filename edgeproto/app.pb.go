// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ImageType
//
// ImageType specifies image type of an App
type ImageType int32

const (
	// Unknown image type
	ImageType_IMAGE_TYPE_UNKNOWN ImageType = 0
	// Docker container image type compatible either with Docker or Kubernetes
	ImageType_IMAGE_TYPE_DOCKER ImageType = 1
	// QCOW2 virtual machine image type
	ImageType_IMAGE_TYPE_QCOW ImageType = 2
	// Helm chart is a separate image type
	ImageType_IMAGE_TYPE_HELM ImageType = 3
)

var ImageType_name = map[int32]string{
	0: "IMAGE_TYPE_UNKNOWN",
	1: "IMAGE_TYPE_DOCKER",
	2: "IMAGE_TYPE_QCOW",
	3: "IMAGE_TYPE_HELM",
}
var ImageType_value = map[string]int32{
	"IMAGE_TYPE_UNKNOWN": 0,
	"IMAGE_TYPE_DOCKER":  1,
	"IMAGE_TYPE_QCOW":    2,
	"IMAGE_TYPE_HELM":    3,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}
func (ImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// DeleteType
//
// DeleteType specifies if AppInst can be auto deleted or not
type DeleteType int32

const (
	// No autodelete
	DeleteType_NO_AUTO_DELETE DeleteType = 0
	// Autodelete
	DeleteType_AUTO_DELETE DeleteType = 1
)

var DeleteType_name = map[int32]string{
	0: "NO_AUTO_DELETE",
	1: "AUTO_DELETE",
}
var DeleteType_value = map[string]int32{
	"NO_AUTO_DELETE": 0,
	"AUTO_DELETE":    1,
}

func (x DeleteType) String() string {
	return proto.EnumName(DeleteType_name, int32(x))
}
func (DeleteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

type AccessType int32

const (
	// Default load balancer or direct based on deployment
	AccessType_ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT AccessType = 0
	// Direct access with no load balancer
	AccessType_ACCESS_TYPE_DIRECT AccessType = 1
	// Access via a load balancer
	AccessType_ACCESS_TYPE_LOAD_BALANCER AccessType = 2
)

var AccessType_name = map[int32]string{
	0: "ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT",
	1: "ACCESS_TYPE_DIRECT",
	2: "ACCESS_TYPE_LOAD_BALANCER",
}
var AccessType_value = map[string]int32{
	"ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT": 0,
	"ACCESS_TYPE_DIRECT":                 1,
	"ACCESS_TYPE_LOAD_BALANCER":          2,
}

func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}
func (AccessType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

// Application unique key
//
// AppKey uniquely identifies an App
type AppKey struct {
	// App developer organization
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// App name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// App version
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()                    { *m = AppKey{} }
func (m *AppKey) String() string            { return proto.CompactTextString(m) }
func (*AppKey) ProtoMessage()               {}
func (*AppKey) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// ConfigFile
type ConfigFile struct {
	// kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// config file contents or URI reference
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

// Application
//
// App belongs to developer organizations and is used to provide information about their application.
type App struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key AppKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// URI of where image resides
	ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// Image type (see ImageType)
	ImageType ImageType `protobuf:"varint,5,opt,name=image_type,json=imageType,proto3,enum=edgeproto.ImageType" json:"image_type,omitempty"`
	// Comma separated list of protocol:port pairs that the App listens on.
	// Numerical values must be decimal format.
	// i.e. tcp:80,udp:10002,http:443
	AccessPorts string `protobuf:"bytes,7,opt,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	// Default flavor for the App, which may be overridden by the AppInst
	DefaultFlavor FlavorKey `protobuf:"bytes,9,opt,name=default_flavor,json=defaultFlavor" json:"default_flavor"`
	// public key used for authentication
	AuthPublicKey string `protobuf:"bytes,12,opt,name=auth_public_key,json=authPublicKey,proto3" json:"auth_public_key,omitempty"`
	// Command that the container runs to start service
	Command string `protobuf:"bytes,13,opt,name=command,proto3" json:"command,omitempty"`
	// Annotations is a comma separated map of arbitrary key value pairs,
	// for example: key1=val1,key2=val2,key3="val 3"
	Annotations string `protobuf:"bytes,14,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Deployment type (kubernetes, docker, or vm)
	Deployment string `protobuf:"bytes,15,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Deployment manifest is the deployment specific manifest file/config
	// For docker deployment, this can be a docker-compose or docker run file
	// For kubernetes deployment, this can be a kubernetes yaml or helm chart file
	DeploymentManifest string `protobuf:"bytes,16,opt,name=deployment_manifest,json=deploymentManifest,proto3" json:"deployment_manifest,omitempty"`
	// Deployment generator target to generate a basic deployment manifest
	DeploymentGenerator string `protobuf:"bytes,17,opt,name=deployment_generator,json=deploymentGenerator,proto3" json:"deployment_generator,omitempty"`
	// Android package name used to match the App name from the Android package
	AndroidPackageName string `protobuf:"bytes,18,opt,name=android_package_name,json=androidPackageName,proto3" json:"android_package_name,omitempty"`
	// Override actions to Controller
	DelOpt DeleteType `protobuf:"varint,20,opt,name=del_opt,json=delOpt,proto3,enum=edgeproto.DeleteType" json:"del_opt,omitempty"`
	// Customization files passed through to implementing services
	Configs []*ConfigFile `protobuf:"bytes,21,rep,name=configs" json:"configs,omitempty"`
	// Option to run App on all nodes of the cluster
	ScaleWithCluster bool `protobuf:"varint,22,opt,name=scale_with_cluster,json=scaleWithCluster,proto3" json:"scale_with_cluster,omitempty"`
	// Should this app have access to outside world?
	InternalPorts bool `protobuf:"varint,23,opt,name=internal_ports,json=internalPorts,proto3" json:"internal_ports,omitempty"`
	// Revision can be specified or defaults to current timestamp when app is updated
	Revision string `protobuf:"bytes,24,opt,name=revision,proto3" json:"revision,omitempty"`
	// Official FQDN is the FQDN that the app uses to connect by default
	OfficialFqdn string `protobuf:"bytes,25,opt,name=official_fqdn,json=officialFqdn,proto3" json:"official_fqdn,omitempty"`
	// MD5Sum of the VM-based app image
	Md5Sum string `protobuf:"bytes,26,opt,name=md5sum,proto3" json:"md5sum,omitempty"`
	// shared volume size when creating auto cluster
	DefaultSharedVolumeSize uint64 `protobuf:"varint,27,opt,name=default_shared_volume_size,json=defaultSharedVolumeSize,proto3" json:"default_shared_volume_size,omitempty"`
	// (_deprecated_) Auto provisioning policy name
	AutoProvPolicy string `protobuf:"bytes,28,opt,name=auto_prov_policy,json=autoProvPolicy,proto3" json:"auto_prov_policy,omitempty"`
	// Access type
	AccessType AccessType `protobuf:"varint,29,opt,name=access_type,json=accessType,proto3,enum=edgeproto.AccessType" json:"access_type,omitempty"`
	// Privacy policy when creating auto cluster
	DefaultPrivacyPolicy string `protobuf:"bytes,30,opt,name=default_privacy_policy,json=defaultPrivacyPolicy,proto3" json:"default_privacy_policy,omitempty"`
	// Preparing to be deleted
	DeletePrepare bool `protobuf:"varint,31,opt,name=delete_prepare,json=deletePrepare,proto3" json:"delete_prepare,omitempty"`
	// Auto provisioning policy names
	AutoProvPolicies []string `protobuf:"bytes,32,rep,name=auto_prov_policies,json=autoProvPolicies" json:"auto_prov_policies,omitempty"`
	// Delimiter to be used for template parsing, defaults to "[[ ]]"
	TemplateDelimiter string `protobuf:"bytes,33,opt,name=template_delimiter,json=templateDelimiter,proto3" json:"template_delimiter,omitempty"`
	// Comma separated list of protocol:port pairs that we should not run health check on
	// Should be configured in case app does not always listen on these ports
	// "all" can be specified if no health check to be run for this app
	// Numerical values must be decimal format.
	// i.e. tcp:80,udp:10002,http:443
	SkipHcPorts string `protobuf:"bytes,34,opt,name=skip_hc_ports,json=skipHcPorts,proto3" json:"skip_hc_ports,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

type AppAutoProvPolicy struct {
	// App key
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey" json:"app_key"`
	// Auto provisioning policy name
	AutoProvPolicy string `protobuf:"bytes,2,opt,name=auto_prov_policy,json=autoProvPolicy,proto3" json:"auto_prov_policy,omitempty"`
}

func (m *AppAutoProvPolicy) Reset()                    { *m = AppAutoProvPolicy{} }
func (m *AppAutoProvPolicy) String() string            { return proto.CompactTextString(m) }
func (*AppAutoProvPolicy) ProtoMessage()               {}
func (*AppAutoProvPolicy) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{3} }

func init() {
	proto.RegisterType((*AppKey)(nil), "edgeproto.AppKey")
	proto.RegisterType((*ConfigFile)(nil), "edgeproto.ConfigFile")
	proto.RegisterType((*App)(nil), "edgeproto.App")
	proto.RegisterType((*AppAutoProvPolicy)(nil), "edgeproto.AppAutoProvPolicy")
	proto.RegisterEnum("edgeproto.ImageType", ImageType_name, ImageType_value)
	proto.RegisterEnum("edgeproto.DeleteType", DeleteType_name, DeleteType_value)
	proto.RegisterEnum("edgeproto.AccessType", AccessType_name, AccessType_value)
}
func (this *AppKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.AppKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppApi service

type AppApiClient interface {
	// Create Application. Creates a definition for an application instance for Cloudlet deployment.
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Delete Application. Deletes a definition of an Application instance. Make sure no other application
	// instances exist with that definition. If they do exist, you must delete those Application instances first.
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Update Application. Updates the definition of an Application instance.
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Show Applications. Lists all Application definitions managed from the Edge Controller.
	// Any fields specified will be used to filter results.
	ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
	AddAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	RemoveAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
}

type appApiClient struct {
	cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AppApi/ShowApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowAppClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appApiShowAppClient struct {
	grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appApiClient) AddAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/AddAppAutoProvPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) RemoveAppAutoProvPolicy(ctx context.Context, in *AppAutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/RemoveAppAutoProvPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppApi service

type AppApiServer interface {
	// Create Application. Creates a definition for an application instance for Cloudlet deployment.
	CreateApp(context.Context, *App) (*Result, error)
	// Delete Application. Deletes a definition of an Application instance. Make sure no other application
	// instances exist with that definition. If they do exist, you must delete those Application instances first.
	DeleteApp(context.Context, *App) (*Result, error)
	// Update Application. Updates the definition of an Application instance.
	UpdateApp(context.Context, *App) (*Result, error)
	// Show Applications. Lists all Application definitions managed from the Edge Controller.
	// Any fields specified will be used to filter results.
	ShowApp(*App, AppApi_ShowAppServer) error
	AddAppAutoProvPolicy(context.Context, *AppAutoProvPolicy) (*Result, error)
	RemoveAppAutoProvPolicy(context.Context, *AppAutoProvPolicy) (*Result, error)
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
	s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(App)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appApiShowAppServer struct {
	grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

func _AppApi_AddAppAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).AddAppAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/AddAppAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).AddAppAutoProvPolicy(ctx, req.(*AppAutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_RemoveAppAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).RemoveAppAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/RemoveAppAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).RemoveAppAutoProvPolicy(ctx, req.(*AppAutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppApi_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppApi_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppApi_UpdateApp_Handler,
		},
		{
			MethodName: "AddAppAutoProvPolicy",
			Handler:    _AppApi_AddAppAutoProvPolicy_Handler,
		},
		{
			MethodName: "RemoveAppAutoProvPolicy",
			Handler:    _AppApi_RemoveAppAutoProvPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowApp",
			Handler:       _AppApi_ShowApp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organization) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Organization)))
		i += copy(dAtA[i:], m.Organization)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *ConfigFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if m.ImageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.ImageType))
	}
	if len(m.AccessPorts) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AccessPorts)))
		i += copy(dAtA[i:], m.AccessPorts)
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.DefaultFlavor.Size()))
	n2, err := m.DefaultFlavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.AuthPublicKey) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AuthPublicKey)))
		i += copy(dAtA[i:], m.AuthPublicKey)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Annotations) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Annotations)))
		i += copy(dAtA[i:], m.Annotations)
	}
	if len(m.Deployment) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Deployment)))
		i += copy(dAtA[i:], m.Deployment)
	}
	if len(m.DeploymentManifest) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentManifest)))
		i += copy(dAtA[i:], m.DeploymentManifest)
	}
	if len(m.DeploymentGenerator) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentGenerator)))
		i += copy(dAtA[i:], m.DeploymentGenerator)
	}
	if len(m.AndroidPackageName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AndroidPackageName)))
		i += copy(dAtA[i:], m.AndroidPackageName)
	}
	if m.DelOpt != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.DelOpt))
	}
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ScaleWithCluster {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.ScaleWithCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InternalPorts {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.InternalPorts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.OfficialFqdn) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.OfficialFqdn)))
		i += copy(dAtA[i:], m.OfficialFqdn)
	}
	if len(m.Md5Sum) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Md5Sum)))
		i += copy(dAtA[i:], m.Md5Sum)
	}
	if m.DefaultSharedVolumeSize != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.DefaultSharedVolumeSize))
	}
	if len(m.AutoProvPolicy) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AutoProvPolicy)))
		i += copy(dAtA[i:], m.AutoProvPolicy)
	}
	if m.AccessType != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.AccessType))
	}
	if len(m.DefaultPrivacyPolicy) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.DefaultPrivacyPolicy)))
		i += copy(dAtA[i:], m.DefaultPrivacyPolicy)
	}
	if m.DeletePrepare {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.DeletePrepare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, s := range m.AutoProvPolicies {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TemplateDelimiter) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.TemplateDelimiter)))
		i += copy(dAtA[i:], m.TemplateDelimiter)
	}
	if len(m.SkipHcPorts) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.SkipHcPorts)))
		i += copy(dAtA[i:], m.SkipHcPorts)
	}
	return i, nil
}

func (m *AppAutoProvPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAutoProvPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.AppKey.Size()))
	n3, err := m.AppKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.AutoProvPolicy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AutoProvPolicy)))
		i += copy(dAtA[i:], m.AutoProvPolicy)
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppKey) Matches(o *AppKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.Version != "" {
		if o.Version != m.Version {
			return false
		}
	}
	return true
}

func (m *AppKey) CopyInFields(src *AppKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Version != src.Version {
		m.Version = src.Version
		changed++
	}
	return changed
}

func (m *AppKey) DeepCopyIn(src *AppKey) {
	m.Organization = src.Organization
	m.Name = src.Name
	m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal AppKey key string", "obj", m)
	}
	return string(key)
}

func AppKeyStringParse(str string, key *AppKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal AppKey key string", "str", str)
	}
}

func (m *AppKey) NotFoundError() error {
	return fmt.Errorf("App key %s not found", m.GetKeyString())
}

func (m *AppKey) ExistsError() error {
	return fmt.Errorf("App key %s already exists", m.GetKeyString())
}

var AppKeyTagOrganization = "apporg"
var AppKeyTagName = "app"
var AppKeyTagVersion = "appver"

func (m *AppKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apporg"] = m.Organization
	tags["app"] = m.Name
	tags["appver"] = m.Version
	return tags
}

// Helper method to check that enums have valid values
func (m *AppKey) ValidateEnums() error {
	return nil
}

func (m *ConfigFile) CopyInFields(src *ConfigFile) int {
	changed := 0
	if m.Kind != src.Kind {
		m.Kind = src.Kind
		changed++
	}
	if m.Config != src.Config {
		m.Config = src.Config
		changed++
	}
	return changed
}

func (m *ConfigFile) DeepCopyIn(src *ConfigFile) {
	m.Kind = src.Kind
	m.Config = src.Config
}

// Helper method to check that enums have valid values
func (m *ConfigFile) ValidateEnums() error {
	return nil
}

func (m *App) Matches(o *App, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ImagePath != "" {
			if o.ImagePath != m.ImagePath {
				return false
			}
		}
	}
	if !opts.Filter || o.ImageType != 0 {
		if o.ImageType != m.ImageType {
			return false
		}
	}
	if !opts.Filter || o.AccessPorts != "" {
		if o.AccessPorts != m.AccessPorts {
			return false
		}
	}
	if !m.DefaultFlavor.Matches(&o.DefaultFlavor, fopts...) {
		return false
	}
	if !opts.Filter || o.AuthPublicKey != "" {
		if o.AuthPublicKey != m.AuthPublicKey {
			return false
		}
	}
	if !opts.Filter || o.Command != "" {
		if o.Command != m.Command {
			return false
		}
	}
	if !opts.Filter || o.Annotations != "" {
		if o.Annotations != m.Annotations {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Deployment != "" {
			if o.Deployment != m.Deployment {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentManifest != "" {
			if o.DeploymentManifest != m.DeploymentManifest {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentGenerator != "" {
			if o.DeploymentGenerator != m.DeploymentGenerator {
				return false
			}
		}
	}
	if !opts.Filter || o.AndroidPackageName != "" {
		if o.AndroidPackageName != m.AndroidPackageName {
			return false
		}
	}
	if !opts.Filter || o.DelOpt != 0 {
		if o.DelOpt != m.DelOpt {
			return false
		}
	}
	if !opts.Filter || o.Configs != nil {
		if m.Configs == nil && o.Configs != nil || m.Configs != nil && o.Configs == nil {
			return false
		} else if m.Configs != nil && o.Configs != nil {
			if len(m.Configs) != len(o.Configs) {
				return false
			}
			for i := 0; i < len(m.Configs); i++ {
			}
		}
	}
	if !opts.Filter || o.ScaleWithCluster != false {
		if o.ScaleWithCluster != m.ScaleWithCluster {
			return false
		}
	}
	if !opts.Filter || o.InternalPorts != false {
		if o.InternalPorts != m.InternalPorts {
			return false
		}
	}
	if !opts.Filter || o.Revision != "" {
		if o.Revision != m.Revision {
			return false
		}
	}
	if !opts.Filter || o.OfficialFqdn != "" {
		if o.OfficialFqdn != m.OfficialFqdn {
			return false
		}
	}
	if !opts.Filter || o.Md5Sum != "" {
		if o.Md5Sum != m.Md5Sum {
			return false
		}
	}
	if !opts.Filter || o.DefaultSharedVolumeSize != 0 {
		if o.DefaultSharedVolumeSize != m.DefaultSharedVolumeSize {
			return false
		}
	}
	if !opts.Filter || o.AutoProvPolicy != "" {
		if o.AutoProvPolicy != m.AutoProvPolicy {
			return false
		}
	}
	if !opts.Filter || o.AccessType != 0 {
		if o.AccessType != m.AccessType {
			return false
		}
	}
	if !opts.Filter || o.DefaultPrivacyPolicy != "" {
		if o.DefaultPrivacyPolicy != m.DefaultPrivacyPolicy {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeletePrepare != false {
			if o.DeletePrepare != m.DeletePrepare {
				return false
			}
		}
	}
	if !opts.Filter || o.AutoProvPolicies != nil {
		if m.AutoProvPolicies == nil && o.AutoProvPolicies != nil || m.AutoProvPolicies != nil && o.AutoProvPolicies == nil {
			return false
		} else if m.AutoProvPolicies != nil && o.AutoProvPolicies != nil {
			if len(m.AutoProvPolicies) != len(o.AutoProvPolicies) {
				return false
			}
			for i := 0; i < len(m.AutoProvPolicies); i++ {
				if o.AutoProvPolicies[i] != m.AutoProvPolicies[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.TemplateDelimiter != "" {
		if o.TemplateDelimiter != m.TemplateDelimiter {
			return false
		}
	}
	if !opts.Filter || o.SkipHcPorts != "" {
		if o.SkipHcPorts != m.SkipHcPorts {
			return false
		}
	}
	return true
}

const AppFieldKey = "2"
const AppFieldKeyOrganization = "2.1"
const AppFieldKeyName = "2.2"
const AppFieldKeyVersion = "2.3"
const AppFieldImagePath = "4"
const AppFieldImageType = "5"
const AppFieldAccessPorts = "7"
const AppFieldDefaultFlavor = "9"
const AppFieldDefaultFlavorName = "9.1"
const AppFieldAuthPublicKey = "12"
const AppFieldCommand = "13"
const AppFieldAnnotations = "14"
const AppFieldDeployment = "15"
const AppFieldDeploymentManifest = "16"
const AppFieldDeploymentGenerator = "17"
const AppFieldAndroidPackageName = "18"
const AppFieldDelOpt = "20"
const AppFieldConfigs = "21"
const AppFieldConfigsKind = "21.1"
const AppFieldConfigsConfig = "21.2"
const AppFieldScaleWithCluster = "22"
const AppFieldInternalPorts = "23"
const AppFieldRevision = "24"
const AppFieldOfficialFqdn = "25"
const AppFieldMd5Sum = "26"
const AppFieldDefaultSharedVolumeSize = "27"
const AppFieldAutoProvPolicy = "28"
const AppFieldAccessType = "29"
const AppFieldDefaultPrivacyPolicy = "30"
const AppFieldDeletePrepare = "31"
const AppFieldAutoProvPolicies = "32"
const AppFieldTemplateDelimiter = "33"
const AppFieldSkipHcPorts = "34"

var AppAllFields = []string{
	AppFieldKeyOrganization,
	AppFieldKeyName,
	AppFieldKeyVersion,
	AppFieldImagePath,
	AppFieldImageType,
	AppFieldAccessPorts,
	AppFieldDefaultFlavorName,
	AppFieldAuthPublicKey,
	AppFieldCommand,
	AppFieldAnnotations,
	AppFieldDeployment,
	AppFieldDeploymentManifest,
	AppFieldDeploymentGenerator,
	AppFieldAndroidPackageName,
	AppFieldDelOpt,
	AppFieldConfigsKind,
	AppFieldConfigsConfig,
	AppFieldScaleWithCluster,
	AppFieldInternalPorts,
	AppFieldRevision,
	AppFieldOfficialFqdn,
	AppFieldMd5Sum,
	AppFieldDefaultSharedVolumeSize,
	AppFieldAutoProvPolicy,
	AppFieldAccessType,
	AppFieldDefaultPrivacyPolicy,
	AppFieldDeletePrepare,
	AppFieldAutoProvPolicies,
	AppFieldTemplateDelimiter,
	AppFieldSkipHcPorts,
}

var AppAllFieldsMap = map[string]struct{}{
	AppFieldKeyOrganization:         struct{}{},
	AppFieldKeyName:                 struct{}{},
	AppFieldKeyVersion:              struct{}{},
	AppFieldImagePath:               struct{}{},
	AppFieldImageType:               struct{}{},
	AppFieldAccessPorts:             struct{}{},
	AppFieldDefaultFlavorName:       struct{}{},
	AppFieldAuthPublicKey:           struct{}{},
	AppFieldCommand:                 struct{}{},
	AppFieldAnnotations:             struct{}{},
	AppFieldDeployment:              struct{}{},
	AppFieldDeploymentManifest:      struct{}{},
	AppFieldDeploymentGenerator:     struct{}{},
	AppFieldAndroidPackageName:      struct{}{},
	AppFieldDelOpt:                  struct{}{},
	AppFieldConfigsKind:             struct{}{},
	AppFieldConfigsConfig:           struct{}{},
	AppFieldScaleWithCluster:        struct{}{},
	AppFieldInternalPorts:           struct{}{},
	AppFieldRevision:                struct{}{},
	AppFieldOfficialFqdn:            struct{}{},
	AppFieldMd5Sum:                  struct{}{},
	AppFieldDefaultSharedVolumeSize: struct{}{},
	AppFieldAutoProvPolicy:          struct{}{},
	AppFieldAccessType:              struct{}{},
	AppFieldDefaultPrivacyPolicy:    struct{}{},
	AppFieldDeletePrepare:           struct{}{},
	AppFieldAutoProvPolicies:        struct{}{},
	AppFieldTemplateDelimiter:       struct{}{},
	AppFieldSkipHcPorts:             struct{}{},
}

var AppAllFieldsStringMap = map[string]string{
	AppFieldKeyOrganization:         "Key Organization",
	AppFieldKeyName:                 "Key Name",
	AppFieldKeyVersion:              "Key Version",
	AppFieldImagePath:               "Image Path",
	AppFieldImageType:               "Image Type",
	AppFieldAccessPorts:             "Access Ports",
	AppFieldDefaultFlavorName:       "Default Flavor Name",
	AppFieldAuthPublicKey:           "Auth Public Key",
	AppFieldCommand:                 "Command",
	AppFieldAnnotations:             "Annotations",
	AppFieldDeployment:              "Deployment",
	AppFieldDeploymentManifest:      "Deployment Manifest",
	AppFieldDeploymentGenerator:     "Deployment Generator",
	AppFieldAndroidPackageName:      "Android Package Name",
	AppFieldDelOpt:                  "Del Opt",
	AppFieldConfigsKind:             "Configs Kind",
	AppFieldConfigsConfig:           "Configs Config",
	AppFieldScaleWithCluster:        "Scale With Cluster",
	AppFieldInternalPorts:           "Internal Ports",
	AppFieldRevision:                "Revision",
	AppFieldOfficialFqdn:            "Official Fqdn",
	AppFieldMd5Sum:                  "Md5 Sum",
	AppFieldDefaultSharedVolumeSize: "Default Shared Volume Size",
	AppFieldAutoProvPolicy:          "Auto Prov Policy",
	AppFieldAccessType:              "Access Type",
	AppFieldDefaultPrivacyPolicy:    "Default Privacy Policy",
	AppFieldDeletePrepare:           "Delete Prepare",
	AppFieldAutoProvPolicies:        "Auto Prov Policies",
	AppFieldTemplateDelimiter:       "Template Delimiter",
	AppFieldSkipHcPorts:             "Skip Hc Ports",
}

func (m *App) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AppFieldKey+".") || s == AppFieldKey
}

func (m *App) DiffFields(o *App, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[AppFieldKeyOrganization] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AppFieldKeyName] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Version != o.Key.Version {
		fields[AppFieldKeyVersion] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.ImagePath != o.ImagePath {
		fields[AppFieldImagePath] = struct{}{}
	}
	if m.ImageType != o.ImageType {
		fields[AppFieldImageType] = struct{}{}
	}
	if m.AccessPorts != o.AccessPorts {
		fields[AppFieldAccessPorts] = struct{}{}
	}
	if m.DefaultFlavor.Name != o.DefaultFlavor.Name {
		fields[AppFieldDefaultFlavorName] = struct{}{}
		fields[AppFieldDefaultFlavor] = struct{}{}
	}
	if m.AuthPublicKey != o.AuthPublicKey {
		fields[AppFieldAuthPublicKey] = struct{}{}
	}
	if m.Command != o.Command {
		fields[AppFieldCommand] = struct{}{}
	}
	if m.Annotations != o.Annotations {
		fields[AppFieldAnnotations] = struct{}{}
	}
	if m.Deployment != o.Deployment {
		fields[AppFieldDeployment] = struct{}{}
	}
	if m.DeploymentManifest != o.DeploymentManifest {
		fields[AppFieldDeploymentManifest] = struct{}{}
	}
	if m.DeploymentGenerator != o.DeploymentGenerator {
		fields[AppFieldDeploymentGenerator] = struct{}{}
	}
	if m.AndroidPackageName != o.AndroidPackageName {
		fields[AppFieldAndroidPackageName] = struct{}{}
	}
	if m.DelOpt != o.DelOpt {
		fields[AppFieldDelOpt] = struct{}{}
	}
	if m.Configs != nil && o.Configs != nil {
		if len(m.Configs) != len(o.Configs) {
			fields[AppFieldConfigs] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.Configs); i0++ {
				if m.Configs[i0].Kind != o.Configs[i0].Kind {
					fields[AppFieldConfigsKind] = struct{}{}
					fields[AppFieldConfigs] = struct{}{}
				}
				if m.Configs[i0].Config != o.Configs[i0].Config {
					fields[AppFieldConfigsConfig] = struct{}{}
					fields[AppFieldConfigs] = struct{}{}
				}
			}
		}
	} else if (m.Configs != nil && o.Configs == nil) || (m.Configs == nil && o.Configs != nil) {
		fields[AppFieldConfigs] = struct{}{}
	}
	if m.ScaleWithCluster != o.ScaleWithCluster {
		fields[AppFieldScaleWithCluster] = struct{}{}
	}
	if m.InternalPorts != o.InternalPorts {
		fields[AppFieldInternalPorts] = struct{}{}
	}
	if m.Revision != o.Revision {
		fields[AppFieldRevision] = struct{}{}
	}
	if m.OfficialFqdn != o.OfficialFqdn {
		fields[AppFieldOfficialFqdn] = struct{}{}
	}
	if m.Md5Sum != o.Md5Sum {
		fields[AppFieldMd5Sum] = struct{}{}
	}
	if m.DefaultSharedVolumeSize != o.DefaultSharedVolumeSize {
		fields[AppFieldDefaultSharedVolumeSize] = struct{}{}
	}
	if m.AutoProvPolicy != o.AutoProvPolicy {
		fields[AppFieldAutoProvPolicy] = struct{}{}
	}
	if m.AccessType != o.AccessType {
		fields[AppFieldAccessType] = struct{}{}
	}
	if m.DefaultPrivacyPolicy != o.DefaultPrivacyPolicy {
		fields[AppFieldDefaultPrivacyPolicy] = struct{}{}
	}
	if m.DeletePrepare != o.DeletePrepare {
		fields[AppFieldDeletePrepare] = struct{}{}
	}
	if len(m.AutoProvPolicies) != len(o.AutoProvPolicies) {
		fields[AppFieldAutoProvPolicies] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.AutoProvPolicies); i0++ {
			if m.AutoProvPolicies[i0] != o.AutoProvPolicies[i0] {
				fields[AppFieldAutoProvPolicies] = struct{}{}
				break
			}
		}
	}
	if m.TemplateDelimiter != o.TemplateDelimiter {
		fields[AppFieldTemplateDelimiter] = struct{}{}
	}
	if m.SkipHcPorts != o.SkipHcPorts {
		fields[AppFieldSkipHcPorts] = struct{}{}
	}
}

var UpdateAppFieldsMap = map[string]struct{}{
	AppFieldImagePath:               struct{}{},
	AppFieldImageType:               struct{}{},
	AppFieldAccessPorts:             struct{}{},
	AppFieldDefaultFlavor:           struct{}{},
	AppFieldDefaultFlavorName:       struct{}{},
	AppFieldAuthPublicKey:           struct{}{},
	AppFieldCommand:                 struct{}{},
	AppFieldAnnotations:             struct{}{},
	AppFieldDeploymentManifest:      struct{}{},
	AppFieldAndroidPackageName:      struct{}{},
	AppFieldDelOpt:                  struct{}{},
	AppFieldConfigs:                 struct{}{},
	AppFieldConfigsKind:             struct{}{},
	AppFieldConfigsConfig:           struct{}{},
	AppFieldScaleWithCluster:        struct{}{},
	AppFieldInternalPorts:           struct{}{},
	AppFieldRevision:                struct{}{},
	AppFieldOfficialFqdn:            struct{}{},
	AppFieldMd5Sum:                  struct{}{},
	AppFieldDefaultSharedVolumeSize: struct{}{},
	AppFieldAutoProvPolicy:          struct{}{},
	AppFieldAccessType:              struct{}{},
	AppFieldDefaultPrivacyPolicy:    struct{}{},
	AppFieldAutoProvPolicies:        struct{}{},
	AppFieldTemplateDelimiter:       struct{}{},
	AppFieldSkipHcPorts:             struct{}{},
}

func (m *App) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateAppFieldsMap[field]; !ok {
			if _, ok := AppAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, AppAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *App) CopyInFields(src *App) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if m.Key.Version != src.Key.Version {
				m.Key.Version = src.Key.Version
				changed++
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.ImagePath != src.ImagePath {
			m.ImagePath = src.ImagePath
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.ImageType != src.ImageType {
			m.ImageType = src.ImageType
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.AccessPorts != src.AccessPorts {
			m.AccessPorts = src.AccessPorts
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if _, set := fmap["9.1"]; set {
			if m.DefaultFlavor.Name != src.DefaultFlavor.Name {
				m.DefaultFlavor.Name = src.DefaultFlavor.Name
				changed++
			}
		}
	}
	if _, set := fmap["12"]; set {
		if m.AuthPublicKey != src.AuthPublicKey {
			m.AuthPublicKey = src.AuthPublicKey
			changed++
		}
	}
	if _, set := fmap["13"]; set {
		if m.Command != src.Command {
			m.Command = src.Command
			changed++
		}
	}
	if _, set := fmap["14"]; set {
		if m.Annotations != src.Annotations {
			m.Annotations = src.Annotations
			changed++
		}
	}
	if _, set := fmap["15"]; set {
		if m.Deployment != src.Deployment {
			m.Deployment = src.Deployment
			changed++
		}
	}
	if _, set := fmap["16"]; set {
		if m.DeploymentManifest != src.DeploymentManifest {
			m.DeploymentManifest = src.DeploymentManifest
			changed++
		}
	}
	if _, set := fmap["17"]; set {
		if m.DeploymentGenerator != src.DeploymentGenerator {
			m.DeploymentGenerator = src.DeploymentGenerator
			changed++
		}
	}
	if _, set := fmap["18"]; set {
		if m.AndroidPackageName != src.AndroidPackageName {
			m.AndroidPackageName = src.AndroidPackageName
			changed++
		}
	}
	if _, set := fmap["20"]; set {
		if m.DelOpt != src.DelOpt {
			m.DelOpt = src.DelOpt
			changed++
		}
	}
	if _, set := fmap["21"]; set {
		if src.Configs != nil {
			if src.Configs != nil {
				m.Configs = src.Configs
				changed++
			}
		} else if m.Configs != nil {
			m.Configs = nil
			changed++
		}
	}
	if _, set := fmap["22"]; set {
		if m.ScaleWithCluster != src.ScaleWithCluster {
			m.ScaleWithCluster = src.ScaleWithCluster
			changed++
		}
	}
	if _, set := fmap["23"]; set {
		if m.InternalPorts != src.InternalPorts {
			m.InternalPorts = src.InternalPorts
			changed++
		}
	}
	if _, set := fmap["24"]; set {
		if m.Revision != src.Revision {
			m.Revision = src.Revision
			changed++
		}
	}
	if _, set := fmap["25"]; set {
		if m.OfficialFqdn != src.OfficialFqdn {
			m.OfficialFqdn = src.OfficialFqdn
			changed++
		}
	}
	if _, set := fmap["26"]; set {
		if m.Md5Sum != src.Md5Sum {
			m.Md5Sum = src.Md5Sum
			changed++
		}
	}
	if _, set := fmap["27"]; set {
		if m.DefaultSharedVolumeSize != src.DefaultSharedVolumeSize {
			m.DefaultSharedVolumeSize = src.DefaultSharedVolumeSize
			changed++
		}
	}
	if _, set := fmap["28"]; set {
		if m.AutoProvPolicy != src.AutoProvPolicy {
			m.AutoProvPolicy = src.AutoProvPolicy
			changed++
		}
	}
	if _, set := fmap["29"]; set {
		if m.AccessType != src.AccessType {
			m.AccessType = src.AccessType
			changed++
		}
	}
	if _, set := fmap["30"]; set {
		if m.DefaultPrivacyPolicy != src.DefaultPrivacyPolicy {
			m.DefaultPrivacyPolicy = src.DefaultPrivacyPolicy
			changed++
		}
	}
	if _, set := fmap["31"]; set {
		if m.DeletePrepare != src.DeletePrepare {
			m.DeletePrepare = src.DeletePrepare
			changed++
		}
	}
	if _, set := fmap["32"]; set {
		m.AutoProvPolicies = src.AutoProvPolicies
		changed++
	}
	if _, set := fmap["33"]; set {
		if m.TemplateDelimiter != src.TemplateDelimiter {
			m.TemplateDelimiter = src.TemplateDelimiter
			changed++
		}
	}
	if _, set := fmap["34"]; set {
		if m.SkipHcPorts != src.SkipHcPorts {
			m.SkipHcPorts = src.SkipHcPorts
			changed++
		}
	}
	return changed
}

func (m *App) DeepCopyIn(src *App) {
	m.Key.DeepCopyIn(&src.Key)
	m.ImagePath = src.ImagePath
	m.ImageType = src.ImageType
	m.AccessPorts = src.AccessPorts
	m.DefaultFlavor.DeepCopyIn(&src.DefaultFlavor)
	m.AuthPublicKey = src.AuthPublicKey
	m.Command = src.Command
	m.Annotations = src.Annotations
	m.Deployment = src.Deployment
	m.DeploymentManifest = src.DeploymentManifest
	m.DeploymentGenerator = src.DeploymentGenerator
	m.AndroidPackageName = src.AndroidPackageName
	m.DelOpt = src.DelOpt
	if src.Configs != nil {
		m.Configs = make([]*ConfigFile, len(src.Configs), len(src.Configs))
		for ii, s := range src.Configs {
			var tmp_s ConfigFile
			tmp_s.DeepCopyIn(s)
			m.Configs[ii] = &tmp_s
		}
	} else {
		m.Configs = nil
	}
	m.ScaleWithCluster = src.ScaleWithCluster
	m.InternalPorts = src.InternalPorts
	m.Revision = src.Revision
	m.OfficialFqdn = src.OfficialFqdn
	m.Md5Sum = src.Md5Sum
	m.DefaultSharedVolumeSize = src.DefaultSharedVolumeSize
	m.AutoProvPolicy = src.AutoProvPolicy
	m.AccessType = src.AccessType
	m.DefaultPrivacyPolicy = src.DefaultPrivacyPolicy
	m.DeletePrepare = src.DeletePrepare
	if src.AutoProvPolicies != nil {
		m.AutoProvPolicies = make([]string, len(src.AutoProvPolicies), len(src.AutoProvPolicies))
		for ii, s := range src.AutoProvPolicies {
			m.AutoProvPolicies[ii] = s
		}
	} else {
		m.AutoProvPolicies = nil
	}
	m.TemplateDelimiter = src.TemplateDelimiter
	m.SkipHcPorts = src.SkipHcPorts
}

func (s *App) HasFields() bool {
	return true
}

type AppStore struct {
	kvstore objstore.KVStore
}

func NewAppStore(kvstore objstore.KVStore) AppStore {
	return AppStore{kvstore: kvstore}
}

func (s *AppStore) Create(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Update(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur App
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Put(ctx context.Context, m *App, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Delete(ctx context.Context, m *App, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) LoadOne(key string) (*App, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj App
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse App data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppStore) STMGet(stm concurrency.STM, key *AppKey, buf *App) bool {
	keystr := objstore.DbKeyString("App", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppStore) STMPut(stm concurrency.STM, obj *App, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("App", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("App json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AppStore) STMDel(stm concurrency.STM, key *AppKey) {
	keystr := objstore.DbKeyString("App", key)
	stm.Del(keystr)
}

type AppKeyWatcher struct {
	cb func(ctx context.Context)
}

type AppCacheData struct {
	Obj    *App
	ModRev int64
}

// AppCache caches App objects in memory in a hash table
// and keeps them in sync with the database.
type AppCache struct {
	Objs          map[AppKey]*AppCacheData
	Mux           util.Mutex
	List          map[AppKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AppKey, old *App, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *App, new *App)
	DeletedCbs    []func(ctx context.Context, old *App)
	KeyWatchers   map[AppKey][]*AppKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *AppKey)
	DeletedKeyCbs []func(ctx context.Context, key *AppKey)
}

func NewAppCache() *AppCache {
	cache := AppCache{}
	InitAppCache(&cache)
	return &cache
}

func InitAppCache(cache *AppCache) {
	cache.Objs = make(map[AppKey]*AppCacheData)
	cache.KeyWatchers = make(map[AppKey][]*AppKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AppCache) GetTypeString() string {
	return "App"
}

func (c *AppCache) Get(key *AppKey, valbuf *App) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AppCache) GetWithRev(key *AppKey, valbuf *App, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AppCache) HasKey(key *AppKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppCache) GetAllKeys(ctx context.Context, cb func(key *AppKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AppCache) Update(ctx context.Context, in *App, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *App) (*App, bool) {
		return in, true
	})
}

func (c *AppCache) UpdateModFunc(ctx context.Context, key *AppKey, modRev int64, modFunc func(old *App) (new *App, changed bool)) {
	c.Mux.Lock()
	var old *App
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &App{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &App{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AppCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AppCache) Delete(ctx context.Context, in *App, modRev int64) {
	c.Mux.Lock()
	var old *App
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AppCache) Prune(ctx context.Context, validKeys map[AppKey]struct{}) {
	notify := make(map[AppKey]*AppCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AppCache) Show(filter *App, cb func(ret *App) error) error {
	log.DebugLog(log.DebugLevelApi, "Show App", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare App", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show App", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AppGenericNotifyCb(fn func(key *AppKey, old *App)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AppKey), obj.(*App))
	}
}

func (c *AppCache) SetNotifyCb(fn func(ctx context.Context, obj *AppKey, old *App, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AppKey, old *App, modRev int64){fn}
}

func (c *AppCache) SetUpdatedCb(fn func(ctx context.Context, old *App, new *App)) {
	c.UpdatedCbs = []func(ctx context.Context, old *App, new *App){fn}
}

func (c *AppCache) SetDeletedCb(fn func(ctx context.Context, old *App)) {
	c.DeletedCbs = []func(ctx context.Context, old *App){fn}
}

func (c *AppCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *AppKey){fn}
}

func (c *AppCache) SetDeletedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *AppKey){fn}
}

func (c *AppCache) AddUpdatedCb(fn func(ctx context.Context, old *App, new *App)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AppCache) AddDeletedCb(fn func(ctx context.Context, old *App)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AppCache) AddNotifyCb(fn func(ctx context.Context, obj *AppKey, old *App, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AppCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AppCache) AddDeletedKeyCb(fn func(ctx context.Context, key *AppKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AppCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AppCache) WatchKey(key *AppKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AppKeyWatcher, 0)
	}
	watcher := AppKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching App", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AppCache) TriggerKeyWatchers(ctx context.Context, key *AppKey) {
	watchers := make([]*AppKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AppCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := App{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse App data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := App{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AppCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AppKey]struct{})
}

func (c *AppCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AppKey]*AppCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AppCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

type AppByAutoProvPolicy struct {
	AutoProvPolicys map[PolicyKey]map[AppKey]struct{}
	Mux             util.Mutex
}

func (s *AppByAutoProvPolicy) Init() {
	s.AutoProvPolicys = make(map[PolicyKey]map[AppKey]struct{})
}

func (s *AppByAutoProvPolicy) Updated(old *App, new *App) map[PolicyKey]struct{} {
	// the below func must be implemented by the user:
	// App.GetAutoProvPolicys() map[PolicyKey]struct{}
	oldAutoProvPolicys := make(map[PolicyKey]struct{})
	if old != nil {
		oldAutoProvPolicys = old.GetAutoProvPolicys()
	}
	newAutoProvPolicys := new.GetAutoProvPolicys()

	for lookup, _ := range oldAutoProvPolicys {
		if _, found := newAutoProvPolicys[lookup]; found {
			delete(oldAutoProvPolicys, lookup)
			delete(newAutoProvPolicys, lookup)
		}
	}

	s.Mux.Lock()
	defer s.Mux.Unlock()

	changed := make(map[PolicyKey]struct{})
	for lookup, _ := range oldAutoProvPolicys {
		// remove
		s.removeRef(lookup, old.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	for lookup, _ := range newAutoProvPolicys {
		// add
		s.addRef(lookup, new.GetKeyVal())
		changed[lookup] = struct{}{}
	}
	return changed
}

func (s *AppByAutoProvPolicy) Deleted(old *App) {
	oldAutoProvPolicys := old.GetAutoProvPolicys()

	s.Mux.Lock()
	defer s.Mux.Unlock()

	for lookup, _ := range oldAutoProvPolicys {
		s.removeRef(lookup, old.GetKeyVal())
	}
}

func (s *AppByAutoProvPolicy) addRef(lookup PolicyKey, key AppKey) {
	AppKeys, found := s.AutoProvPolicys[lookup]
	if !found {
		AppKeys = make(map[AppKey]struct{})
		s.AutoProvPolicys[lookup] = AppKeys
	}
	AppKeys[key] = struct{}{}
}

func (s *AppByAutoProvPolicy) removeRef(lookup PolicyKey, key AppKey) {
	AppKeys, found := s.AutoProvPolicys[lookup]
	if found {
		delete(AppKeys, key)
		if len(AppKeys) == 0 {
			delete(s.AutoProvPolicys, lookup)
		}
	}
}

func (s *AppByAutoProvPolicy) Find(lookup PolicyKey) []AppKey {
	s.Mux.Lock()
	defer s.Mux.Unlock()

	list := []AppKey{}
	for k, _ := range s.AutoProvPolicys[lookup] {
		list = append(list, k)
	}
	return list
}

func (m *App) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *App) GetKey() *AppKey {
	return &m.Key
}

func (m *App) GetKeyVal() AppKey {
	return m.Key
}

func (m *App) SetKey(key *AppKey) {
	m.Key = *key
}

func CmpSortApp(a App, b App) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *App) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := ImageType_name[int32(m.ImageType)]; !ok {
		return errors.New("invalid ImageType")
	}
	if err := m.DefaultFlavor.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := DeleteType_name[int32(m.DelOpt)]; !ok {
		return errors.New("invalid DelOpt")
	}
	for _, e := range m.Configs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if _, ok := AccessType_name[int32(m.AccessType)]; !ok {
		return errors.New("invalid AccessType")
	}
	return nil
}

func IgnoreAppFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DelOpt")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Revision")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeletePrepare")
	}
	return cmpopts.IgnoreFields(App{}, names...)
}

func (m *AppAutoProvPolicy) CopyInFields(src *AppAutoProvPolicy) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.AutoProvPolicy != src.AutoProvPolicy {
		m.AutoProvPolicy = src.AutoProvPolicy
		changed++
	}
	return changed
}

func (m *AppAutoProvPolicy) DeepCopyIn(src *AppAutoProvPolicy) {
	m.AppKey.DeepCopyIn(&src.AppKey)
	m.AutoProvPolicy = src.AutoProvPolicy
}

// Helper method to check that enums have valid values
func (m *AppAutoProvPolicy) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

var ImageTypeStrings = []string{
	"IMAGE_TYPE_UNKNOWN",
	"IMAGE_TYPE_DOCKER",
	"IMAGE_TYPE_QCOW",
	"IMAGE_TYPE_HELM",
}

const (
	ImageTypeIMAGE_TYPE_UNKNOWN uint64 = 1 << 0
	ImageTypeIMAGE_TYPE_DOCKER  uint64 = 1 << 1
	ImageTypeIMAGE_TYPE_QCOW    uint64 = 1 << 2
	ImageTypeIMAGE_TYPE_HELM    uint64 = 1 << 3
)

var ImageType_CamelName = map[int32]string{
	// IMAGE_TYPE_UNKNOWN -> ImageTypeUnknown
	0: "ImageTypeUnknown",
	// IMAGE_TYPE_DOCKER -> ImageTypeDocker
	1: "ImageTypeDocker",
	// IMAGE_TYPE_QCOW -> ImageTypeQcow
	2: "ImageTypeQcow",
	// IMAGE_TYPE_HELM -> ImageTypeHelm
	3: "ImageTypeHelm",
}
var ImageType_CamelValue = map[string]int32{
	"ImageTypeUnknown": 0,
	"ImageTypeDocker":  1,
	"ImageTypeQcow":    2,
	"ImageTypeHelm":    3,
}

func (e *ImageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ImageType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ImageType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ImageType(val)
	return nil
}

func (e ImageType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(ImageType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *ImageType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ImageType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ImageType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = ImageType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = ImageType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var DeleteTypeStrings = []string{
	"NO_AUTO_DELETE",
	"AUTO_DELETE",
}

const (
	DeleteTypeNO_AUTO_DELETE uint64 = 1 << 0
	DeleteTypeAUTO_DELETE    uint64 = 1 << 1
)

var DeleteType_CamelName = map[int32]string{
	// NO_AUTO_DELETE -> NoAutoDelete
	0: "NoAutoDelete",
	// AUTO_DELETE -> AutoDelete
	1: "AutoDelete",
}
var DeleteType_CamelValue = map[string]int32{
	"NoAutoDelete": 0,
	"AutoDelete":   1,
}

func (e *DeleteType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := DeleteType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = DeleteType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = DeleteType(val)
	return nil
}

func (e DeleteType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(DeleteType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *DeleteType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := DeleteType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = DeleteType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = DeleteType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = DeleteType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var AccessTypeStrings = []string{
	"ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT",
	"ACCESS_TYPE_DIRECT",
	"ACCESS_TYPE_LOAD_BALANCER",
}

const (
	AccessTypeACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT uint64 = 1 << 0
	AccessTypeACCESS_TYPE_DIRECT                 uint64 = 1 << 1
	AccessTypeACCESS_TYPE_LOAD_BALANCER          uint64 = 1 << 2
)

var AccessType_CamelName = map[int32]string{
	// ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT -> AccessTypeDefaultForDeployment
	0: "AccessTypeDefaultForDeployment",
	// ACCESS_TYPE_DIRECT -> AccessTypeDirect
	1: "AccessTypeDirect",
	// ACCESS_TYPE_LOAD_BALANCER -> AccessTypeLoadBalancer
	2: "AccessTypeLoadBalancer",
}
var AccessType_CamelValue = map[string]int32{
	"AccessTypeDefaultForDeployment": 0,
	"AccessTypeDirect":               1,
	"AccessTypeLoadBalancer":         2,
}

func (e *AccessType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := AccessType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = AccessType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = AccessType(val)
	return nil
}

func (e AccessType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(AccessType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *AccessType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := AccessType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = AccessType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = AccessType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = AccessType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *AppKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *ConfigFile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *App) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ImageType != 0 {
		n += 1 + sovApp(uint64(m.ImageType))
	}
	l = len(m.AccessPorts)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = m.DefaultFlavor.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AuthPublicKey)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Annotations)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentManifest)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentGenerator)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.AndroidPackageName)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.DelOpt != 0 {
		n += 2 + sovApp(uint64(m.DelOpt))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 2 + l + sovApp(uint64(l))
		}
	}
	if m.ScaleWithCluster {
		n += 3
	}
	if m.InternalPorts {
		n += 3
	}
	l = len(m.Revision)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.OfficialFqdn)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.Md5Sum)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.DefaultSharedVolumeSize != 0 {
		n += 2 + sovApp(uint64(m.DefaultSharedVolumeSize))
	}
	l = len(m.AutoProvPolicy)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.AccessType != 0 {
		n += 2 + sovApp(uint64(m.AccessType))
	}
	l = len(m.DefaultPrivacyPolicy)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.DeletePrepare {
		n += 3
	}
	if len(m.AutoProvPolicies) > 0 {
		for _, s := range m.AutoProvPolicies {
			l = len(s)
			n += 2 + l + sovApp(uint64(l))
		}
	}
	l = len(m.TemplateDelimiter)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.SkipHcPorts)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppAutoProvPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AutoProvPolicy)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			m.ImageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageType |= (ImageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentManifest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentManifest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentGenerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentGenerator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidPackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidPackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelOpt", wireType)
			}
			m.DelOpt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelOpt |= (DeleteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigFile{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleWithCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScaleWithCluster = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPorts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalPorts = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialFqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfficialFqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSharedVolumeSize", wireType)
			}
			m.DefaultSharedVolumeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSharedVolumeSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			m.AccessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessType |= (AccessType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrivacyPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultPrivacyPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletePrepare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletePrepare = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicies = append(m.AutoProvPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateDelimiter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateDelimiter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipHcPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipHcPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAutoProvPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAutoProvPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAutoProvPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoProvPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoProvPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 1472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6c, 0x1b, 0x45,
	0x1b, 0xce, 0x26, 0x69, 0x52, 0x4f, 0x62, 0xc7, 0x99, 0xa6, 0xe9, 0x24, 0x6d, 0x53, 0xd7, 0xfd,
	0x51, 0xbe, 0x28, 0x89, 0xfb, 0xb5, 0xfd, 0x3e, 0x95, 0xa0, 0xa2, 0x6e, 0x6c, 0xa7, 0xad, 0xf2,
	0x63, 0xb3, 0xf9, 0xa9, 0x7a, 0x61, 0x35, 0xd9, 0x1d, 0xdb, 0x43, 0x76, 0x77, 0xa6, 0xbb, 0x6b,
	0xa7, 0xee, 0x09, 0x71, 0xe3, 0x86, 0xe0, 0x82, 0x7a, 0x81, 0x0b, 0x12, 0x47, 0x54, 0x89, 0x4b,
	0xb9, 0x71, 0xca, 0x09, 0x55, 0xe2, 0xc6, 0x01, 0x41, 0xc5, 0x01, 0xf5, 0x84, 0xd4, 0x24, 0xe2,
	0x88, 0x66, 0x76, 0xd7, 0x5e, 0xa7, 0x06, 0xb5, 0x88, 0x8b, 0x35, 0xf3, 0xbc, 0xcf, 0xcc, 0xfb,
	0xcc, 0xfb, 0xb7, 0x06, 0x09, 0xcc, 0xf9, 0x3c, 0x77, 0x99, 0xcf, 0x60, 0x82, 0x98, 0x55, 0x22,
	0x97, 0x93, 0x67, 0xaa, 0x8c, 0x55, 0x2d, 0x92, 0xc3, 0x9c, 0xe6, 0xb0, 0xe3, 0x30, 0x1f, 0xfb,
	0x94, 0x39, 0x5e, 0x40, 0x9c, 0x1c, 0x76, 0x89, 0x57, 0xb7, 0xfc, 0x70, 0x77, 0xa3, 0x4a, 0xfd,
	0x5a, 0x7d, 0x7b, 0xde, 0x60, 0x76, 0xce, 0x66, 0xdb, 0xd4, 0x12, 0xd7, 0x3c, 0xcc, 0x89, 0xdf,
	0x39, 0xc3, 0x62, 0x75, 0x33, 0x27, 0x79, 0x55, 0xe2, 0xb4, 0x16, 0xd1, 0x3d, 0x15, 0x0b, 0x37,
	0x98, 0x1b, 0xee, 0xc6, 0xaa, 0xac, 0xca, 0xe4, 0x32, 0x27, 0x56, 0x01, 0x9a, 0xfd, 0x48, 0x01,
	0x03, 0x2a, 0xe7, 0xcb, 0xa4, 0x09, 0xe7, 0xc1, 0x30, 0x73, 0xab, 0xd8, 0xa1, 0x8f, 0xa4, 0x1a,
	0xa4, 0x64, 0x94, 0xe9, 0xc4, 0x22, 0x78, 0x7a, 0x88, 0x06, 0x30, 0xe7, 0xcc, 0xad, 0x6a, 0x1d,
	0x76, 0x78, 0x1a, 0xf4, 0x3b, 0xd8, 0x26, 0xa8, 0x57, 0xf2, 0x06, 0x9f, 0x1e, 0xa2, 0x3e, 0xcc,
	0xb9, 0x26, 0x41, 0x78, 0x11, 0x0c, 0x36, 0x88, 0xeb, 0x89, 0x7b, 0xfa, 0x3a, 0xee, 0x69, 0x10,
	0x57, 0x8b, 0x4c, 0x0b, 0xc3, 0xbf, 0xbd, 0x44, 0xca, 0x1f, 0x2f, 0x91, 0xf2, 0xf5, 0x17, 0xe7,
	0x94, 0xec, 0x0d, 0x00, 0xf2, 0xcc, 0xa9, 0xd0, 0xea, 0x12, 0xb5, 0x08, 0x84, 0xa0, 0x7f, 0x87,
	0x3a, 0x66, 0x20, 0x43, 0x93, 0x6b, 0x38, 0x0e, 0x06, 0x0c, 0xc9, 0x08, 0x9c, 0x6a, 0xe1, 0x2e,
	0xfb, 0xcd, 0x10, 0xe8, 0x53, 0x39, 0x17, 0xf6, 0x0a, 0x25, 0x96, 0xe9, 0x21, 0x25, 0xd3, 0x27,
	0xec, 0xc1, 0x0e, 0xfe, 0x07, 0xf4, 0xed, 0x90, 0xa6, 0x3c, 0x34, 0x74, 0x75, 0x74, 0xbe, 0x95,
	0x88, 0xf9, 0xe0, 0xe9, 0x8b, 0xfd, 0x7b, 0x3f, 0x9d, 0xeb, 0xd1, 0x04, 0x07, 0x5e, 0x00, 0x80,
	0xda, 0xb8, 0x4a, 0x74, 0x8e, 0xfd, 0x1a, 0xea, 0x97, 0xda, 0xfb, 0xbf, 0xda, 0x47, 0x8a, 0x96,
	0x90, 0x78, 0x19, 0xfb, 0x35, 0x78, 0x2d, 0x22, 0xf9, 0x4d, 0x4e, 0xd0, 0xb1, 0x8c, 0x32, 0x9d,
	0xba, 0x3a, 0x16, 0xbb, 0xf6, 0xae, 0x30, 0x6e, 0x34, 0x39, 0x09, 0x0f, 0x89, 0x25, 0x3c, 0x0f,
	0x86, 0xb1, 0x61, 0x10, 0xcf, 0xd3, 0x39, 0x73, 0x7d, 0x0f, 0x0d, 0xca, 0x27, 0x0c, 0x05, 0x58,
	0x59, 0x40, 0x50, 0x05, 0x29, 0x93, 0x54, 0x70, 0xdd, 0xf2, 0xf5, 0x20, 0x77, 0x28, 0x21, 0x25,
	0xc7, 0xef, 0x5e, 0x92, 0x86, 0xb6, 0xea, 0x64, 0x78, 0x22, 0xc0, 0xe1, 0x65, 0x30, 0x82, 0xeb,
	0x7e, 0x4d, 0xe7, 0xf5, 0x6d, 0x8b, 0x1a, 0xba, 0x78, 0xf6, 0xb0, 0x74, 0x94, 0x14, 0x70, 0x59,
	0xa2, 0x22, 0xdb, 0x08, 0x0c, 0x1a, 0xcc, 0xb6, 0xb1, 0x63, 0xa2, 0xa4, 0xb4, 0x47, 0x5b, 0x98,
	0x01, 0x43, 0xb1, 0x9a, 0x44, 0xa9, 0x50, 0x66, 0x1b, 0x82, 0x17, 0x01, 0x30, 0x09, 0xb7, 0x58,
	0xd3, 0x26, 0x8e, 0x8f, 0x46, 0x62, 0x31, 0x8a, 0xe1, 0xf0, 0x1d, 0x70, 0xa2, 0xbd, 0xd3, 0x6d,
	0xec, 0xd0, 0x0a, 0xf1, 0x7c, 0x94, 0x96, 0xf4, 0xa4, 0xa0, 0x7f, 0xf2, 0x64, 0xe2, 0x98, 0xc3,
	0x0c, 0x9b, 0x6b, 0xb0, 0xcd, 0x5c, 0x0d, 0x89, 0xf0, 0x16, 0x18, 0x8b, 0x9d, 0xaf, 0x12, 0x87,
	0xb8, 0xd8, 0x67, 0x2e, 0x1a, 0xed, 0x76, 0x41, 0xcc, 0xd5, 0xed, 0x88, 0x09, 0xaf, 0x80, 0x31,
	0xec, 0x98, 0x2e, 0xa3, 0xa6, 0xce, 0xb1, 0xb1, 0x23, 0x12, 0x26, 0x2b, 0x16, 0xca, 0x27, 0xc1,
	0xd0, 0x56, 0x0e, 0x4c, 0x6b, 0xa2, 0x6c, 0xdf, 0x02, 0x83, 0x26, 0xb1, 0x74, 0xc6, 0x7d, 0x34,
	0x26, 0xb3, 0x7a, 0x32, 0x16, 0xf9, 0x02, 0xb1, 0x88, 0x2f, 0x73, 0xb9, 0x98, 0x68, 0x7b, 0x1e,
	0x30, 0x89, 0x55, 0xe2, 0x3e, 0xcc, 0x89, 0x80, 0x8a, 0x6a, 0xf4, 0xd0, 0xc9, 0x4c, 0xdf, 0xf4,
	0x50, 0xc7, 0xd1, 0x76, 0x5d, 0x6b, 0x11, 0x0b, 0xce, 0x02, 0xe8, 0x19, 0xd8, 0x22, 0xfa, 0x2e,
	0xf5, 0x6b, 0xba, 0x61, 0xd5, 0x3d, 0x9f, 0xb8, 0x68, 0x3c, 0xa3, 0x4c, 0x1f, 0xd7, 0xd2, 0xd2,
	0x72, 0x8f, 0xfa, 0xb5, 0x7c, 0x80, 0xc3, 0x4b, 0x20, 0x45, 0x1d, 0x9f, 0xb8, 0x0e, 0xb6, 0xc2,
	0xfa, 0x39, 0x25, 0x99, 0xc9, 0x08, 0x0d, 0x2a, 0xe8, 0x12, 0x38, 0xee, 0x92, 0x06, 0x95, 0x8d,
	0x87, 0x64, 0xa0, 0x62, 0x52, 0x5b, 0x26, 0x78, 0x01, 0x24, 0x59, 0xa5, 0x42, 0x0d, 0x8a, 0x2d,
	0xbd, 0xf2, 0xc0, 0x74, 0xd0, 0x84, 0x0c, 0xc9, 0x70, 0x04, 0x2e, 0x3d, 0x30, 0x1d, 0xd1, 0x4d,
	0xb6, 0xf9, 0x3f, 0xaf, 0x6e, 0xa3, 0xc9, 0xa0, 0xdb, 0x82, 0x1d, 0x7c, 0x1b, 0x4c, 0x46, 0x55,
	0xea, 0xd5, 0xb0, 0x4b, 0x4c, 0xbd, 0xc1, 0xac, 0xba, 0x4d, 0x74, 0x8f, 0x3e, 0x22, 0xe8, 0x74,
	0x46, 0x99, 0xee, 0xd7, 0x4e, 0x85, 0x8c, 0x75, 0x49, 0xd8, 0x92, 0xf6, 0x75, 0xfa, 0x88, 0xc0,
	0x69, 0x90, 0xc6, 0x75, 0x9f, 0xe9, 0xdc, 0x65, 0x0d, 0x9d, 0x33, 0x8b, 0x1a, 0x4d, 0x74, 0x46,
	0x5e, 0x9f, 0x12, 0x78, 0xd9, 0x65, 0x8d, 0xb2, 0x44, 0xe1, 0xff, 0x41, 0xd8, 0x1b, 0x41, 0x97,
	0x9d, 0x7d, 0x25, 0x1f, 0xaa, 0xb4, 0xca, 0x36, 0x03, 0xb8, 0xb5, 0x86, 0xd7, 0xc1, 0x78, 0x24,
	0x8f, 0xbb, 0xb4, 0x81, 0x8d, 0x66, 0xe4, 0x67, 0x4a, 0xfa, 0x19, 0x0b, 0xad, 0xe5, 0xc0, 0x18,
	0x7a, 0xbb, 0x2e, 0x5a, 0x4f, 0xe4, 0x57, 0xe7, 0x2e, 0xe1, 0xd8, 0x25, 0xe8, 0x9c, 0x88, 0xef,
	0xd1, 0x3a, 0x4b, 0x06, 0xa4, 0x72, 0xc0, 0x11, 0x39, 0x3c, 0xf2, 0x1a, 0x4a, 0x3c, 0x94, 0x91,
	0xc3, 0x27, 0xdd, 0xf1, 0x1e, 0x4a, 0x3c, 0x38, 0x07, 0xa0, 0x4f, 0x6c, 0x6e, 0x61, 0x9f, 0xe8,
	0x26, 0xb1, 0xa8, 0x4d, 0x45, 0xc6, 0xcf, 0x4b, 0x55, 0xa3, 0x91, 0xa5, 0x10, 0x19, 0x60, 0x16,
	0x24, 0xbd, 0x1d, 0xca, 0xf5, 0x9a, 0x11, 0x66, 0x3c, 0x1b, 0xb4, 0xa2, 0x00, 0xef, 0x18, 0x32,
	0xdf, 0x0b, 0xdf, 0x2a, 0x62, 0x84, 0xfe, 0xfe, 0x12, 0x29, 0x1f, 0xec, 0x23, 0xe5, 0xe3, 0x7d,
	0xa4, 0x7c, 0xb6, 0x8f, 0x94, 0x3d, 0xa1, 0xf9, 0x00, 0x25, 0x0b, 0x71, 0xb1, 0x8f, 0x0f, 0xd0,
	0x7b, 0x98, 0x73, 0xd1, 0x01, 0x37, 0x97, 0x49, 0x73, 0x5e, 0x14, 0xfc, 0x6c, 0x30, 0x91, 0x3d,
	0x09, 0x6c, 0x05, 0x53, 0x59, 0x60, 0x73, 0xcc, 0xad, 0x4a, 0xac, 0x14, 0x9b, 0xf8, 0xb3, 0x61,
	0xe0, 0x82, 0xd1, 0x74, 0xb3, 0x10, 0x9f, 0x3b, 0xf2, 0xb6, 0x27, 0x87, 0x28, 0xbd, 0x43, 0x9a,
	0x37, 0xe3, 0x87, 0xbe, 0x3b, 0x44, 0x28, 0x08, 0xf1, 0x32, 0x69, 0x2e, 0xa8, 0x1d, 0x29, 0xce,
	0x32, 0x30, 0xaa, 0x72, 0xde, 0x09, 0xc2, 0x2b, 0x60, 0x10, 0x73, 0x2e, 0x27, 0x97, 0xf2, 0xf7,
	0x03, 0x5b, 0x7c, 0x4f, 0xc4, 0x2c, 0xeb, 0x56, 0x53, 0xbd, 0xdd, 0x6a, 0x6a, 0xc6, 0x04, 0x89,
	0xd6, 0x6c, 0x86, 0xe3, 0x00, 0xde, 0x5d, 0x55, 0x6f, 0x17, 0xf5, 0x8d, 0xfb, 0xe5, 0xa2, 0xbe,
	0xb9, 0xb6, 0xbc, 0x56, 0xba, 0xb7, 0x96, 0xee, 0x81, 0x27, 0xc1, 0x68, 0x0c, 0x2f, 0x94, 0xf2,
	0xcb, 0x45, 0x2d, 0xad, 0xc0, 0x13, 0x60, 0x24, 0x06, 0xbf, 0x9b, 0x2f, 0xdd, 0x4b, 0xf7, 0x1e,
	0x01, 0xef, 0x14, 0x57, 0x56, 0xd3, 0x7d, 0x33, 0xff, 0x05, 0xa0, 0x3d, 0x2b, 0x20, 0x04, 0xa9,
	0xb5, 0x92, 0xae, 0x6e, 0x6e, 0x94, 0xf4, 0x42, 0x71, 0xa5, 0xb8, 0x51, 0x4c, 0xf7, 0xc0, 0x11,
	0x30, 0x14, 0x07, 0x94, 0x99, 0x1d, 0x00, 0xda, 0xe5, 0x0c, 0x2f, 0x83, 0xac, 0x9a, 0xcf, 0x17,
	0xd7, 0xd7, 0x43, 0x09, 0xc5, 0x25, 0x75, 0x73, 0x65, 0x43, 0x5f, 0x2a, 0x69, 0x7a, 0xa1, 0x58,
	0x5e, 0x29, 0xdd, 0x5f, 0x2d, 0xae, 0x6d, 0xa4, 0x7b, 0xc4, 0x0b, 0x3a, 0x78, 0x77, 0xb5, 0x62,
	0x7e, 0x23, 0xad, 0xc0, 0xb3, 0x60, 0x22, 0x8e, 0xaf, 0x94, 0xd4, 0x82, 0xbe, 0xa8, 0xae, 0xa8,
	0x6b, 0xf9, 0xa2, 0x96, 0xee, 0xbd, 0xfa, 0xfd, 0x80, 0xfc, 0xe8, 0xab, 0x9c, 0xc2, 0x87, 0x20,
	0x91, 0x77, 0x09, 0xf6, 0x89, 0xf8, 0x7c, 0xa6, 0x3a, 0x03, 0x3d, 0x19, 0x0f, 0xbc, 0x26, 0xff,
	0x93, 0x64, 0xef, 0xbc, 0xd8, 0x47, 0x33, 0x1a, 0xf1, 0x58, 0xdd, 0x35, 0xc4, 0x19, 0x6f, 0x56,
	0x35, 0x44, 0x9a, 0x57, 0xb1, 0x83, 0xab, 0x64, 0xf6, 0x68, 0xc9, 0x3c, 0x3b, 0x40, 0xca, 0x87,
	0x3f, 0xfc, 0xfa, 0x69, 0x6f, 0x3a, 0x3b, 0x94, 0x33, 0xa4, 0xa3, 0x1c, 0xe6, 0x7c, 0x41, 0x99,
	0x81, 0x3e, 0x48, 0x04, 0x41, 0x7a, 0x4d, 0xcf, 0x85, 0x37, 0xf3, 0xdc, 0xf2, 0x1a, 0x34, 0x6c,
	0xe4, 0xf5, 0xb1, 0x02, 0x12, 0x9b, 0xdc, 0x7c, 0xfd, 0x07, 0xbf, 0xff, 0xe6, 0x0f, 0xfe, 0xf1,
	0x00, 0x4d, 0x15, 0x5a, 0x9f, 0xa3, 0xd9, 0xc2, 0xab, 0x5f, 0xa6, 0x96, 0xb8, 0xba, 0x94, 0x12,
	0x89, 0xb3, 0xc1, 0xe0, 0x7a, 0x8d, 0xed, 0x76, 0x53, 0x76, 0x64, 0x9f, 0xbd, 0xf5, 0x62, 0x1f,
	0x4d, 0x77, 0x91, 0xb5, 0x45, 0xc9, 0x6e, 0xf7, 0x58, 0xa4, 0xb2, 0x89, 0x9c, 0x57, 0x63, 0xbb,
	0xa1, 0xb3, 0x2b, 0x0a, 0xfc, 0x5c, 0x01, 0x63, 0xaa, 0x69, 0xbe, 0xda, 0x81, 0x67, 0x3a, 0x9d,
	0x75, 0x5a, 0xbb, 0x05, 0x69, 0xeb, 0xc5, 0x3e, 0x9a, 0xfb, 0xeb, 0x20, 0x05, 0x4d, 0xdb, 0x21,
	0x69, 0x2f, 0x2a, 0x8c, 0xd3, 0xd9, 0xf1, 0x1c, 0x36, 0x4d, 0xa1, 0x4a, 0xf4, 0xaa, 0x68, 0xe1,
	0xa0, 0x83, 0x45, 0x40, 0xbe, 0x54, 0xc0, 0x29, 0x8d, 0xd8, 0xac, 0x41, 0xfe, 0x05, 0x91, 0xf7,
	0xff, 0xb9, 0xc8, 0xa9, 0xec, 0x44, 0xce, 0x95, 0x3a, 0xba, 0xea, 0x5c, 0x4c, 0xef, 0xfd, 0x32,
	0xd5, 0xb3, 0xf7, 0x7c, 0x4a, 0x79, 0xf6, 0x7c, 0x4a, 0xf9, 0xf9, 0xf9, 0x94, 0xb2, 0x3d, 0x20,
	0x5d, 0x5f, 0xfb, 0x33, 0x00, 0x00, 0xff, 0xff, 0x78, 0x30, 0xe8, 0x62, 0x00, 0x0c, 0x00, 0x00,
}
