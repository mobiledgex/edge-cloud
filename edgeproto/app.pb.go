// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
	Package edgeproto is a generated protocol buffer package.

	It is generated from these files:
		app.proto
		app_inst.proto
		cloudlet.proto
		cluster.proto
		clusterinst.proto
		common.proto
		controller.proto
		developer.proto
		exec.proto
		flavor.proto
		metric.proto
		node.proto
		notice.proto
		operator.proto
		refs.proto
		result.proto
		version.proto

	It has these top-level messages:
		AppKey
		ConfigFile
		App
		AppInstKey
		AppInst
		AppInstRuntime
		AppInstInfo
		AppInstMetrics
		CloudletKey
		CloudletInfraCommon
		AzureProperties
		GcpProperties
		OpenStackProperties
		CloudletInfraProperties
		Cloudlet
		FlavorInfo
		CloudletInfo
		CloudletMetrics
		ClusterKey
		Cluster
		ClusterInstKey
		ClusterInst
		ClusterInstInfo
		ControllerKey
		Controller
		DeveloperKey
		Developer
		ExecRequest
		FlavorKey
		Flavor
		MetricTag
		MetricVal
		Metric
		NodeKey
		Node
		Notice
		OperatorKey
		Operator
		CloudletRefs
		ClusterRefs
		Result
*/
package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ImageType specifies the image type of the application.
type ImageType int32

const (
	// Unknown image type
	ImageType_ImageTypeUnknown ImageType = 0
	// Docker container image type compatible with Kubernetes
	ImageType_ImageTypeDocker ImageType = 1
	// QCOW2 virtual machine image type
	ImageType_ImageTypeQCOW ImageType = 2
)

var ImageType_name = map[int32]string{
	0: "ImageTypeUnknown",
	1: "ImageTypeDocker",
	2: "ImageTypeQCOW",
}
var ImageType_value = map[string]int32{
	"ImageTypeUnknown": 0,
	"ImageTypeDocker":  1,
	"ImageTypeQCOW":    2,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}
func (ImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

type DeleteType int32

const (
	// No autodelete
	DeleteType_NoAutoDelete DeleteType = 0
	// Autodelete
	DeleteType_AutoDelete DeleteType = 1
)

var DeleteType_name = map[int32]string{
	0: "NoAutoDelete",
	1: "AutoDelete",
}
var DeleteType_value = map[string]int32{
	"NoAutoDelete": 0,
	"AutoDelete":   1,
}

func (x DeleteType) String() string {
	return proto.EnumName(DeleteType_name, int32(x))
}
func (DeleteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

// AppKey uniquely identifies an Application.
type AppKey struct {
	// Developer key
	DeveloperKey DeveloperKey `protobuf:"bytes,1,opt,name=developer_key,json=developerKey" json:"developer_key"`
	// Application name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the app
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()                    { *m = AppKey{} }
func (m *AppKey) String() string            { return proto.CompactTextString(m) }
func (*AppKey) ProtoMessage()               {}
func (*AppKey) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

type ConfigFile struct {
	// kind (type) of config, i.e. k8s-manifest, helm-values, deploygen-config
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// config file contents or URI reference
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

// Apps are applications that may be instantiated on Cloudlets, providing a back-end service to an application client (using the mobiledgex SDK) running on a user device such as a cell phone, wearable, drone, etc. Applications belong to Developers, and must specify their image and accessibility. Applications are analagous to Pods in Kubernetes, and similarly are tied to a Cluster.
// An application in itself is not tied to a Cloudlet, but provides a definition that can be used to instantiate it on a Cloudlet. AppInsts are applications instantiated on a particular Cloudlet.
type App struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key AppKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// URI from which to download image
	ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// Image type (see ImageType)
	ImageType ImageType `protobuf:"varint,5,opt,name=image_type,json=imageType,proto3,enum=edgeproto.ImageType" json:"image_type,omitempty"`
	// For Layer4 access, the ports the app listens on.
	// This is a comma separated list of protocol:port pairs, i.e.
	// tcp:80,http:443,udp:10002.
	// Only tcp, udp, and http protocols are supported; tcp and udp are assumed
	// to be L4, and http is assumed to be L7 access.
	AccessPorts string `protobuf:"bytes,7,opt,name=access_ports,json=accessPorts,proto3" json:"access_ports,omitempty"`
	// URI of resource to be used to establish config for App.
	Config string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	// Default flavor for the App, may be overridden by the AppInst
	DefaultFlavor FlavorKey `protobuf:"bytes,9,opt,name=default_flavor,json=defaultFlavor" json:"default_flavor"`
	// Cluster field is deprecated. Apps no longer have dependencies on Clusters.
	Cluster ClusterKey `protobuf:"bytes,10,opt,name=cluster" json:"cluster"`
	// Template of kubernetes deployment yaml.
	// Who/What sets this is TDB, but it should not be directly
	// exposed to the user, because we do not want to expose
	// kubernetes to the user. However, because we currently don't have any
	// other way to set it, for flexibility, for now it is exposed to the user.
	AppTemplate string `protobuf:"bytes,11,opt,name=app_template,json=appTemplate,proto3" json:"app_template,omitempty"`
	// public key used for authentication
	AuthPublicKey string `protobuf:"bytes,12,opt,name=auth_public_key,json=authPublicKey,proto3" json:"auth_public_key,omitempty"`
	// Command to start service
	Command string `protobuf:"bytes,13,opt,name=command,proto3" json:"command,omitempty"`
	// Annotations is a comma separated map of arbitrary key value pairs,
	// for example: key1=val1,key2=val2,key3="val 3"
	Annotations string `protobuf:"bytes,14,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Deployment target (kubernetes, docker, kvm, etc)
	Deployment string `protobuf:"bytes,15,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Deployment manifest is the deployment specific manifest file/config
	DeploymentManifest string `protobuf:"bytes,16,opt,name=deployment_manifest,json=deploymentManifest,proto3" json:"deployment_manifest,omitempty"`
	// Deployment generator target
	DeploymentGenerator string `protobuf:"bytes,17,opt,name=deployment_generator,json=deploymentGenerator,proto3" json:"deployment_generator,omitempty"`
	// Android package name, optional
	AndroidPackageName string `protobuf:"bytes,18,opt,name=android_package_name,json=androidPackageName,proto3" json:"android_package_name,omitempty"`
	// Indicates whether or not platform apps are allowed to perform actions
	// on behalf of this app, such as FindCloudlet
	PermitsPlatformApps bool `protobuf:"varint,19,opt,name=permits_platform_apps,json=permitsPlatformApps,proto3" json:"permits_platform_apps,omitempty"`
	// Override actions to Controller
	DelOpt DeleteType `protobuf:"varint,20,opt,name=del_opt,json=delOpt,proto3,enum=edgeproto.DeleteType" json:"del_opt,omitempty"`
	// Customization files
	Configs []*ConfigFile `protobuf:"bytes,21,rep,name=configs" json:"configs,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

func init() {
	proto.RegisterType((*AppKey)(nil), "edgeproto.AppKey")
	proto.RegisterType((*ConfigFile)(nil), "edgeproto.ConfigFile")
	proto.RegisterType((*App)(nil), "edgeproto.App")
	proto.RegisterEnum("edgeproto.ImageType", ImageType_name, ImageType_value)
	proto.RegisterEnum("edgeproto.DeleteType", DeleteType_name, DeleteType_value)
}
func (this *AppKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.AppKey{")
	s = append(s, "DeveloperKey: "+strings.Replace(this.DeveloperKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppApi service

type AppApiClient interface {
	// Create an application
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Delete an application
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Update an application
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	// Show applications. Any fields specified will be used to filter results.
	ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
}

type appApiClient struct {
	cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AppApi/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AppApi/ShowApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowAppClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appApiShowAppClient struct {
	grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppApi service

type AppApiServer interface {
	// Create an application
	CreateApp(context.Context, *App) (*Result, error)
	// Delete an application
	DeleteApp(context.Context, *App) (*Result, error)
	// Update an application
	UpdateApp(context.Context, *App) (*Result, error)
	// Show applications. Any fields specified will be used to filter results.
	ShowApp(*App, AppApi_ShowAppServer) error
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
	s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AppApi/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(App)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appApiShowAppServer struct {
	grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppApi_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppApi_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppApi_UpdateApp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowApp",
			Handler:       _AppApi_ShowApp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.DeveloperKey.Size()))
	n1, err := m.DeveloperKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *ConfigFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if m.ImageType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.ImageType))
	}
	if len(m.AccessPorts) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AccessPorts)))
		i += copy(dAtA[i:], m.AccessPorts)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.DefaultFlavor.Size()))
	n3, err := m.DefaultFlavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x52
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Cluster.Size()))
	n4, err := m.Cluster.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.AppTemplate) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppTemplate)))
		i += copy(dAtA[i:], m.AppTemplate)
	}
	if len(m.AuthPublicKey) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AuthPublicKey)))
		i += copy(dAtA[i:], m.AuthPublicKey)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.Annotations) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Annotations)))
		i += copy(dAtA[i:], m.Annotations)
	}
	if len(m.Deployment) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Deployment)))
		i += copy(dAtA[i:], m.Deployment)
	}
	if len(m.DeploymentManifest) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentManifest)))
		i += copy(dAtA[i:], m.DeploymentManifest)
	}
	if len(m.DeploymentGenerator) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.DeploymentGenerator)))
		i += copy(dAtA[i:], m.DeploymentGenerator)
	}
	if len(m.AndroidPackageName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AndroidPackageName)))
		i += copy(dAtA[i:], m.AndroidPackageName)
	}
	if m.PermitsPlatformApps {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.PermitsPlatformApps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DelOpt != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.DelOpt))
	}
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppKey) Matches(o *AppKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.DeveloperKey.Matches(&o.DeveloperKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.Version != "" {
		if o.Version != m.Version {
			return false
		}
	}
	return true
}

func (m *AppKey) CopyInFields(src *AppKey) {
	m.DeveloperKey.Name = src.DeveloperKey.Name
	m.Name = src.Name
	m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal AppKey key string", "obj", m)
	}
	return string(key)
}

func AppKeyStringParse(str string, key *AppKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal AppKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *AppKey) ValidateEnums() error {
	if err := m.DeveloperKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *ConfigFile) CopyInFields(src *ConfigFile) {
	m.Kind = src.Kind
	m.Config = src.Config
}

// Helper method to check that enums have valid values
func (m *ConfigFile) ValidateEnums() error {
	return nil
}

func (m *App) Matches(o *App, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ImagePath != "" {
			if o.ImagePath != m.ImagePath {
				return false
			}
		}
	}
	if !opts.Filter || o.ImageType != 0 {
		if o.ImageType != m.ImageType {
			return false
		}
	}
	if !opts.Filter || o.AccessPorts != "" {
		if o.AccessPorts != m.AccessPorts {
			return false
		}
	}
	if !opts.Filter || o.Config != "" {
		if o.Config != m.Config {
			return false
		}
	}
	if !m.DefaultFlavor.Matches(&o.DefaultFlavor, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !m.Cluster.Matches(&o.Cluster, fopts...) {
			return false
		}
	}
	if !opts.Filter || o.AppTemplate != "" {
		if o.AppTemplate != m.AppTemplate {
			return false
		}
	}
	if !opts.Filter || o.AuthPublicKey != "" {
		if o.AuthPublicKey != m.AuthPublicKey {
			return false
		}
	}
	if !opts.Filter || o.Command != "" {
		if o.Command != m.Command {
			return false
		}
	}
	if !opts.Filter || o.Annotations != "" {
		if o.Annotations != m.Annotations {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Deployment != "" {
			if o.Deployment != m.Deployment {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentManifest != "" {
			if o.DeploymentManifest != m.DeploymentManifest {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentGenerator != "" {
			if o.DeploymentGenerator != m.DeploymentGenerator {
				return false
			}
		}
	}
	if !opts.Filter || o.AndroidPackageName != "" {
		if o.AndroidPackageName != m.AndroidPackageName {
			return false
		}
	}
	if !opts.Filter || o.PermitsPlatformApps != false {
		if o.PermitsPlatformApps != m.PermitsPlatformApps {
			return false
		}
	}
	if !opts.Filter || o.DelOpt != 0 {
		if o.DelOpt != m.DelOpt {
			return false
		}
	}
	if !opts.Filter || o.Configs != nil {
		if m.Configs == nil && o.Configs != nil || m.Configs != nil && o.Configs == nil {
			return false
		} else if m.Configs != nil && o.Configs != nil {
			if len(m.Configs) != len(o.Configs) {
				return false
			}
			for i := 0; i < len(m.Configs); i++ {
			}
		}
	}
	return true
}

const AppFieldKey = "2"
const AppFieldKeyDeveloperKey = "2.1"
const AppFieldKeyDeveloperKeyName = "2.1.2"
const AppFieldKeyName = "2.2"
const AppFieldKeyVersion = "2.3"
const AppFieldImagePath = "4"
const AppFieldImageType = "5"
const AppFieldAccessPorts = "7"
const AppFieldConfig = "8"
const AppFieldDefaultFlavor = "9"
const AppFieldDefaultFlavorName = "9.1"
const AppFieldCluster = "10"
const AppFieldClusterName = "10.1"
const AppFieldAppTemplate = "11"
const AppFieldAuthPublicKey = "12"
const AppFieldCommand = "13"
const AppFieldAnnotations = "14"
const AppFieldDeployment = "15"
const AppFieldDeploymentManifest = "16"
const AppFieldDeploymentGenerator = "17"
const AppFieldAndroidPackageName = "18"
const AppFieldPermitsPlatformApps = "19"
const AppFieldDelOpt = "20"
const AppFieldConfigs = "21"
const AppFieldConfigsKind = "21.1"
const AppFieldConfigsConfig = "21.2"

var AppAllFields = []string{
	AppFieldKeyDeveloperKeyName,
	AppFieldKeyName,
	AppFieldKeyVersion,
	AppFieldImagePath,
	AppFieldImageType,
	AppFieldAccessPorts,
	AppFieldConfig,
	AppFieldDefaultFlavorName,
	AppFieldClusterName,
	AppFieldAppTemplate,
	AppFieldAuthPublicKey,
	AppFieldCommand,
	AppFieldAnnotations,
	AppFieldDeployment,
	AppFieldDeploymentManifest,
	AppFieldDeploymentGenerator,
	AppFieldAndroidPackageName,
	AppFieldPermitsPlatformApps,
	AppFieldDelOpt,
	AppFieldConfigsKind,
	AppFieldConfigsConfig,
}

var AppAllFieldsMap = map[string]struct{}{
	AppFieldKeyDeveloperKeyName: struct{}{},
	AppFieldKeyName:             struct{}{},
	AppFieldKeyVersion:          struct{}{},
	AppFieldImagePath:           struct{}{},
	AppFieldImageType:           struct{}{},
	AppFieldAccessPorts:         struct{}{},
	AppFieldConfig:              struct{}{},
	AppFieldDefaultFlavorName:   struct{}{},
	AppFieldClusterName:         struct{}{},
	AppFieldAppTemplate:         struct{}{},
	AppFieldAuthPublicKey:       struct{}{},
	AppFieldCommand:             struct{}{},
	AppFieldAnnotations:         struct{}{},
	AppFieldDeployment:          struct{}{},
	AppFieldDeploymentManifest:  struct{}{},
	AppFieldDeploymentGenerator: struct{}{},
	AppFieldAndroidPackageName:  struct{}{},
	AppFieldPermitsPlatformApps: struct{}{},
	AppFieldDelOpt:              struct{}{},
	AppFieldConfigsKind:         struct{}{},
	AppFieldConfigsConfig:       struct{}{},
}

func (m *App) DiffFields(o *App, fields map[string]struct{}) {
	if m.Key.DeveloperKey.Name != o.Key.DeveloperKey.Name {
		fields[AppFieldKeyDeveloperKeyName] = struct{}{}
		fields[AppFieldKeyDeveloperKey] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AppFieldKeyName] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.Key.Version != o.Key.Version {
		fields[AppFieldKeyVersion] = struct{}{}
		fields[AppFieldKey] = struct{}{}
	}
	if m.ImagePath != o.ImagePath {
		fields[AppFieldImagePath] = struct{}{}
	}
	if m.ImageType != o.ImageType {
		fields[AppFieldImageType] = struct{}{}
	}
	if m.AccessPorts != o.AccessPorts {
		fields[AppFieldAccessPorts] = struct{}{}
	}
	if m.Config != o.Config {
		fields[AppFieldConfig] = struct{}{}
	}
	if m.DefaultFlavor.Name != o.DefaultFlavor.Name {
		fields[AppFieldDefaultFlavorName] = struct{}{}
		fields[AppFieldDefaultFlavor] = struct{}{}
	}
	if m.Cluster.Name != o.Cluster.Name {
		fields[AppFieldClusterName] = struct{}{}
		fields[AppFieldCluster] = struct{}{}
	}
	if m.AppTemplate != o.AppTemplate {
		fields[AppFieldAppTemplate] = struct{}{}
	}
	if m.AuthPublicKey != o.AuthPublicKey {
		fields[AppFieldAuthPublicKey] = struct{}{}
	}
	if m.Command != o.Command {
		fields[AppFieldCommand] = struct{}{}
	}
	if m.Annotations != o.Annotations {
		fields[AppFieldAnnotations] = struct{}{}
	}
	if m.Deployment != o.Deployment {
		fields[AppFieldDeployment] = struct{}{}
	}
	if m.DeploymentManifest != o.DeploymentManifest {
		fields[AppFieldDeploymentManifest] = struct{}{}
	}
	if m.DeploymentGenerator != o.DeploymentGenerator {
		fields[AppFieldDeploymentGenerator] = struct{}{}
	}
	if m.AndroidPackageName != o.AndroidPackageName {
		fields[AppFieldAndroidPackageName] = struct{}{}
	}
	if m.PermitsPlatformApps != o.PermitsPlatformApps {
		fields[AppFieldPermitsPlatformApps] = struct{}{}
	}
	if m.DelOpt != o.DelOpt {
		fields[AppFieldDelOpt] = struct{}{}
	}
	if len(m.Configs) != len(o.Configs) {
		fields[AppFieldConfigs] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Configs); i0++ {
			if m.Configs[i0].Kind != o.Configs[i0].Kind {
				fields[AppFieldConfigsKind] = struct{}{}
				fields[AppFieldConfigs] = struct{}{}
			}
			if m.Configs[i0].Config != o.Configs[i0].Config {
				fields[AppFieldConfigsConfig] = struct{}{}
				fields[AppFieldConfigs] = struct{}{}
			}
		}
	}
}

func (m *App) CopyInFields(src *App) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.2"]; set {
				m.Key.DeveloperKey.Name = src.Key.DeveloperKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			m.Key.Name = src.Key.Name
		}
		if _, set := fmap["2.3"]; set {
			m.Key.Version = src.Key.Version
		}
	}
	if _, set := fmap["4"]; set {
		m.ImagePath = src.ImagePath
	}
	if _, set := fmap["5"]; set {
		m.ImageType = src.ImageType
	}
	if _, set := fmap["7"]; set {
		m.AccessPorts = src.AccessPorts
	}
	if _, set := fmap["8"]; set {
		m.Config = src.Config
	}
	if _, set := fmap["9"]; set {
		if _, set := fmap["9.1"]; set {
			m.DefaultFlavor.Name = src.DefaultFlavor.Name
		}
	}
	if _, set := fmap["10"]; set {
		if _, set := fmap["10.1"]; set {
			m.Cluster.Name = src.Cluster.Name
		}
	}
	if _, set := fmap["11"]; set {
		m.AppTemplate = src.AppTemplate
	}
	if _, set := fmap["12"]; set {
		m.AuthPublicKey = src.AuthPublicKey
	}
	if _, set := fmap["13"]; set {
		m.Command = src.Command
	}
	if _, set := fmap["14"]; set {
		m.Annotations = src.Annotations
	}
	if _, set := fmap["15"]; set {
		m.Deployment = src.Deployment
	}
	if _, set := fmap["16"]; set {
		m.DeploymentManifest = src.DeploymentManifest
	}
	if _, set := fmap["17"]; set {
		m.DeploymentGenerator = src.DeploymentGenerator
	}
	if _, set := fmap["18"]; set {
		m.AndroidPackageName = src.AndroidPackageName
	}
	if _, set := fmap["19"]; set {
		m.PermitsPlatformApps = src.PermitsPlatformApps
	}
	if _, set := fmap["20"]; set {
		m.DelOpt = src.DelOpt
	}
	if _, set := fmap["21"]; set && src.Configs != nil {
		if m.Configs == nil || len(m.Configs) != len(src.Configs) {
			m.Configs = make([]*ConfigFile, len(src.Configs))
		}
		for i0 := 0; i0 < len(src.Configs); i0++ {
			m.Configs[i0] = &ConfigFile{}
			if _, set := fmap["21.1"]; set {
				m.Configs[i0].Kind = src.Configs[i0].Kind
			}
			if _, set := fmap["21.2"]; set {
				m.Configs[i0].Config = src.Configs[i0].Config
			}
		}
	}
}

func (s *App) HasFields() bool {
	return true
}

type AppStore struct {
	kvstore objstore.KVStore
}

func NewAppStore(kvstore objstore.KVStore) AppStore {
	return AppStore{kvstore: kvstore}
}

func (s *AppStore) Create(m *App, wait func(int64)) (*Result, error) {
	err := m.Validate(AppAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Update(m *App, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur App
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Put(m *App, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur App
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) Delete(m *App, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("App", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AppStore) LoadOne(key string) (*App, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj App
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse App data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AppStore) STMGet(stm concurrency.STM, key *AppKey, buf *App) bool {
	keystr := objstore.DbKeyString("App", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AppStore) STMPut(stm concurrency.STM, obj *App, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("App", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("App json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AppStore) STMDel(stm concurrency.STM, key *AppKey) {
	keystr := objstore.DbKeyString("App", key)
	stm.Del(keystr)
}

type AppKeyWatcher struct {
	cb func()
}

// AppCache caches App objects in memory in a hash table
// and keeps them in sync with the database.
type AppCache struct {
	Objs        map[AppKey]*App
	Mux         util.Mutex
	List        map[AppKey]struct{}
	NotifyCb    func(obj *AppKey, old *App)
	UpdatedCb   func(old *App, new *App)
	KeyWatchers map[AppKey][]*AppKeyWatcher
}

func NewAppCache() *AppCache {
	cache := AppCache{}
	InitAppCache(&cache)
	return &cache
}

func InitAppCache(cache *AppCache) {
	cache.Objs = make(map[AppKey]*App)
	cache.KeyWatchers = make(map[AppKey][]*AppKeyWatcher)
}

func (c *AppCache) GetTypeString() string {
	return "App"
}

func (c *AppCache) Get(key *AppKey, valbuf *App) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *AppCache) HasKey(key *AppKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AppCache) GetAllKeys(keys map[AppKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *AppCache) Update(in *App, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *App) (*App, bool) {
		return in, true
	})
}

func (c *AppCache) UpdateModFunc(key *AppKey, rev int64, modFunc func(old *App) (new *App, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &App{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate App", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *AppCache) Delete(in *App, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete App", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *AppCache) Prune(validKeys map[AppKey]struct{}) {
	notify := make(map[AppKey]*App)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *AppCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AppCache) Flush(notifyId int64) {
}

func (c *AppCache) Show(filter *App, cb func(ret *App) error) error {
	log.DebugLog(log.DebugLevelApi, "Show App", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show App", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AppGenericNotifyCb(fn func(key *AppKey, old *App)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AppKey), obj.(*App))
	}
}

func (c *AppCache) SetNotifyCb(fn func(obj *AppKey, old *App)) {
	c.NotifyCb = fn
}

func (c *AppCache) SetUpdatedCb(fn func(old *App, new *App)) {
	c.UpdatedCb = fn
}

func (c *AppCache) WatchKey(key *AppKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AppKeyWatcher, 0)
	}
	watcher := AppKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching App", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AppCache) TriggerKeyWatchers(key *AppKey) {
	watchers := make([]*AppKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *AppCache) SyncUpdate(key, val []byte, rev int64) {
	obj := App{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse App data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AppCache) SyncDelete(key []byte, rev int64) {
	obj := App{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AppKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *AppCache) SyncListStart() {
	c.List = make(map[AppKey]struct{})
}

func (c *AppCache) SyncListEnd() {
	deleted := make(map[AppKey]*App)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (m *App) GetKey() objstore.ObjKey {
	return &m.Key
}

func CmpSortApp(a App, b App) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *App) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := ImageType_name[int32(m.ImageType)]; !ok {
		return errors.New("invalid ImageType")
	}
	if err := m.DefaultFlavor.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Cluster.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := DeleteType_name[int32(m.DelOpt)]; !ok {
		return errors.New("invalid DelOpt")
	}
	for _, e := range m.Configs {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreAppFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentManifest")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentGenerator")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DelOpt")
	}
	return cmpopts.IgnoreFields(App{}, names...)
}

var ImageTypeStrings = []string{
	"ImageTypeUnknown",
	"ImageTypeDocker",
	"ImageTypeQCOW",
}

const (
	ImageTypeImageTypeUnknown uint64 = 1 << 0
	ImageTypeImageTypeDocker  uint64 = 1 << 1
	ImageTypeImageTypeQCOW    uint64 = 1 << 2
)

func (e *ImageType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ImageType_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ImageType_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ImageType(val)
	return nil
}

func (e ImageType) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

// custom JSON encoding/decoding
func (e *ImageType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ImageType_value[str]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ImageType_name[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = ImageType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = ImageType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

func (e ImageType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

var DeleteTypeStrings = []string{
	"NoAutoDelete",
	"AutoDelete",
}

const (
	DeleteTypeNoAutoDelete uint64 = 1 << 0
	DeleteTypeAutoDelete   uint64 = 1 << 1
)

func (e *DeleteType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := DeleteType_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = DeleteType_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = DeleteType(val)
	return nil
}

func (e DeleteType) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

// custom JSON encoding/decoding
func (e *DeleteType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := DeleteType_value[str]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = DeleteType_name[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = DeleteType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = DeleteType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

func (e DeleteType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	if from.Kind() != reflect.String {
		return data, nil
	}
	switch to {
	case reflect.TypeOf(ImageType(0)):
		if en, ok := ImageType_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(DeleteType(0)):
		if en, ok := DeleteType_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(Liveness(0)):
		if en, ok := Liveness_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(IpSupport(0)):
		if en, ok := IpSupport_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(IpAccess(0)):
		if en, ok := IpAccess_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(TrackedState(0)):
		if en, ok := TrackedState_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(CRMOverride(0)):
		if en, ok := CRMOverride_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(CloudletState(0)):
		if en, ok := CloudletState_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(NodeType(0)):
		if en, ok := NodeType_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(NoticeAction(0)):
		if en, ok := NoticeAction_value[data.(string)]; ok {
			return en, nil
		}
	case reflect.TypeOf(VersionHash(0)):
		if en, ok := VersionHash_value[data.(string)]; ok {
			return en, nil
		}
	}
	return data, nil
}

func (m *AppKey) Size() (n int) {
	var l int
	_ = l
	l = m.DeveloperKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *ConfigFile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *App) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ImageType != 0 {
		n += 1 + sovApp(uint64(m.ImageType))
	}
	l = len(m.AccessPorts)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = m.DefaultFlavor.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Cluster.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AppTemplate)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.AuthPublicKey)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Annotations)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentManifest)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.DeploymentGenerator)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.AndroidPackageName)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.PermitsPlatformApps {
		n += 3
	}
	if m.DelOpt != 0 {
		n += 2 + sovApp(uint64(m.DelOpt))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 2 + l + sovApp(uint64(l))
		}
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			m.ImageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageType |= (ImageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessPorts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultFlavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTemplate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentManifest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentManifest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentGenerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentGenerator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidPackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidPackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermitsPlatformApps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PermitsPlatformApps = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelOpt", wireType)
			}
			m.DelOpt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelOpt |= (DeleteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigFile{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc4, 0x69, 0xdc, 0x9d, 0xd8, 0x8e, 0x33, 0x71, 0x60, 0x88, 0x50, 0x6a, 0x0c, 0x42,
	0x21, 0x4a, 0xbc, 0x55, 0x7a, 0x29, 0x91, 0x40, 0xd8, 0x09, 0xad, 0xa2, 0xa8, 0xad, 0x31, 0x6d,
	0x39, 0x2e, 0x93, 0xdd, 0xe7, 0xf5, 0xca, 0xbb, 0x3b, 0xa3, 0xdd, 0xd9, 0x04, 0xdf, 0x10, 0x27,
	0x8e, 0x08, 0x2e, 0x1c, 0x39, 0x72, 0x44, 0xfc, 0x01, 0x9c, 0x73, 0x44, 0xe2, 0x8e, 0x20, 0xe2,
	0x80, 0x2a, 0x21, 0x21, 0xc5, 0x07, 0x8e, 0x68, 0x66, 0x7f, 0x78, 0x5b, 0x45, 0x88, 0x53, 0x2f,
	0xd6, 0x7b, 0xdf, 0xfb, 0xf1, 0xcd, 0xb7, 0xf3, 0xde, 0x18, 0x1b, 0x4c, 0x88, 0xae, 0x88, 0xb8,
	0xe4, 0xc4, 0x00, 0xc7, 0x05, 0x6d, 0x6e, 0xbe, 0xee, 0x72, 0xee, 0xfa, 0x60, 0x32, 0xe1, 0x99,
	0x2c, 0x0c, 0xb9, 0x64, 0xd2, 0xe3, 0x61, 0x9c, 0x26, 0x6e, 0xd6, 0x22, 0x88, 0x13, 0x5f, 0x66,
	0xde, 0x5d, 0xd7, 0x93, 0xe3, 0xe4, 0xb4, 0x6b, 0xf3, 0xc0, 0x0c, 0xf8, 0xa9, 0xe7, 0xab, 0x36,
	0x9f, 0x99, 0xea, 0x77, 0xcf, 0xf6, 0x79, 0xe2, 0x98, 0x3a, 0xcf, 0x85, 0xb0, 0x30, 0xb2, 0xca,
	0xfb, 0xff, 0xaf, 0xd2, 0xde, 0x73, 0x21, 0xdc, 0xb3, 0x83, 0xdc, 0x2d, 0x19, 0x59, 0xa3, 0x55,
	0x07, 0xce, 0xc0, 0xe7, 0x02, 0xa2, 0xfc, 0x84, 0x23, 0x9f, 0x9d, 0xf1, 0xdc, 0xab, 0xdb, 0x7e,
	0x12, 0xcb, 0x22, 0xd8, 0x72, 0xb9, 0xcb, 0xb5, 0x69, 0x2a, 0x2b, 0x45, 0x3b, 0x5f, 0x22, 0xbc,
	0xdc, 0x13, 0xe2, 0x04, 0xa6, 0xa4, 0x8f, 0xeb, 0x45, 0x43, 0x6b, 0x02, 0x53, 0x8a, 0xda, 0x68,
	0x7b, 0x65, 0xff, 0xd5, 0x6e, 0xf1, 0x81, 0xba, 0x47, 0x79, 0xfc, 0x04, 0xa6, 0xfd, 0xa5, 0x8b,
	0x5f, 0x6f, 0x2d, 0x0c, 0x6b, 0x4e, 0x09, 0x23, 0x04, 0x2f, 0x85, 0x2c, 0x00, 0xba, 0xd8, 0x46,
	0xdb, 0xc6, 0x50, 0xdb, 0x84, 0xe2, 0xea, 0x19, 0x44, 0xb1, 0xc7, 0x43, 0x5a, 0xd1, 0x70, 0xee,
	0x1e, 0xd4, 0xfe, 0xbc, 0xa2, 0xe8, 0x9f, 0x2b, 0x8a, 0x7e, 0xf8, 0xee, 0x16, 0xea, 0xdc, 0xc5,
	0xf8, 0x90, 0x87, 0x23, 0xcf, 0xbd, 0xe7, 0xf9, 0xa0, 0x3a, 0x4d, 0xbc, 0xd0, 0xd1, 0x87, 0x30,
	0x86, 0xda, 0x26, 0xaf, 0xe0, 0x65, 0x5b, 0x67, 0x64, 0xfd, 0x33, 0xaf, 0xf3, 0x53, 0x15, 0x57,
	0x7a, 0x42, 0xa8, 0xf8, 0xc8, 0x03, 0xdf, 0x89, 0x29, 0x6a, 0x57, 0x54, 0x3c, 0xf5, 0xc8, 0x3b,
	0xb8, 0xa2, 0xf4, 0x2c, 0x6a, 0x3d, 0x6b, 0x25, 0x3d, 0xa9, 0xf2, 0x4c, 0x89, 0xca, 0x21, 0x6f,
	0x62, 0xec, 0x05, 0xcc, 0x05, 0x4b, 0x30, 0x39, 0xa6, 0x4b, 0x8a, 0xa6, 0xbf, 0xf4, 0xfd, 0x8c,
	0xa2, 0xa1, 0xa1, 0xf1, 0x01, 0x93, 0x63, 0x72, 0x27, 0x4f, 0x92, 0x53, 0x01, 0xf4, 0x46, 0x1b,
	0x6d, 0x37, 0xf6, 0x5b, 0xa5, 0xb6, 0xc7, 0x2a, 0xf8, 0x78, 0x2a, 0x20, 0x2b, 0x52, 0x26, 0x79,
	0x03, 0xd7, 0x98, 0x6d, 0x43, 0x1c, 0x5b, 0x82, 0x47, 0x32, 0xa6, 0x55, 0x2d, 0x61, 0x25, 0xc5,
	0x06, 0x0a, 0x2a, 0xe9, 0xbb, 0x59, 0xd6, 0x47, 0x7a, 0xb8, 0xe1, 0xc0, 0x88, 0x25, 0xbe, 0xb4,
	0xd2, 0x1b, 0xa6, 0x86, 0x96, 0x52, 0xe6, 0xbc, 0xa7, 0x03, 0x73, 0x35, 0xf5, 0xac, 0x22, 0xc5,
	0xc9, 0xbb, 0xb8, 0x9a, 0x8d, 0x03, 0xc5, 0xba, 0x76, 0xa3, 0x54, 0x7b, 0x98, 0x46, 0x54, 0xf1,
	0x4d, 0xa5, 0x55, 0x37, 0xc8, 0xf3, 0xf5, 0xc1, 0x85, 0xb0, 0x24, 0x04, 0xc2, 0x67, 0x12, 0xe8,
	0x4a, 0x76, 0x70, 0x21, 0x1e, 0x67, 0x10, 0x79, 0x1b, 0xaf, 0xb2, 0x44, 0x8e, 0x2d, 0x91, 0x9c,
	0xfa, 0x9e, 0xad, 0x87, 0xa7, 0xa6, 0xb3, 0xea, 0x0a, 0x1e, 0x68, 0x54, 0x8d, 0x07, 0xc5, 0x55,
	0x9b, 0x07, 0x01, 0x0b, 0x1d, 0x5a, 0x4f, 0x47, 0x21, 0x73, 0x49, 0x1b, 0xaf, 0x94, 0x36, 0x8e,
	0x36, 0x32, 0x8e, 0x39, 0x44, 0xde, 0xc2, 0xd8, 0x01, 0xe1, 0xf3, 0x69, 0x00, 0xa1, 0xa4, 0xab,
	0xa5, 0x9b, 0x29, 0xe1, 0xe4, 0x7d, 0xbc, 0x3e, 0xf7, 0xac, 0x80, 0x85, 0xde, 0x08, 0x62, 0x49,
	0x9b, 0x3a, 0xbd, 0xae, 0xd2, 0xbf, 0xfe, 0xf1, 0xb5, 0x1b, 0x21, 0xb7, 0x03, 0x31, 0x24, 0xf3,
	0xcc, 0x07, 0x59, 0x22, 0xf9, 0x00, 0xb7, 0x4a, 0xf5, 0x2e, 0x84, 0x10, 0x31, 0xc9, 0x23, 0xba,
	0x76, 0x5d, 0x83, 0x12, 0xd5, 0xfd, 0x3c, 0x93, 0xdc, 0xc6, 0x2d, 0x16, 0x3a, 0x11, 0xf7, 0x1c,
	0x4b, 0x30, 0x7b, 0xa2, 0xc6, 0x44, 0xaf, 0x04, 0xd1, 0x92, 0x48, 0x16, 0x1b, 0xa4, 0xa1, 0x87,
	0x6a, 0x41, 0xf6, 0xf1, 0x86, 0x80, 0x28, 0xf0, 0x64, 0x6c, 0xa9, 0xcf, 0x39, 0xe2, 0x51, 0x60,
	0x31, 0x21, 0x62, 0xba, 0xde, 0x46, 0xdb, 0x37, 0x87, 0xeb, 0x59, 0x70, 0x90, 0xc5, 0x7a, 0x42,
	0xc4, 0xea, 0x3e, 0x1d, 0xf0, 0x2d, 0x2e, 0x24, 0x6d, 0xe9, 0xf9, 0xdb, 0x78, 0x6e, 0x4d, 0x7d,
	0x90, 0x7a, 0xea, 0xfa, 0xc6, 0xfc, 0xb4, 0xcb, 0x0e, 0xf8, 0x8f, 0x84, 0x24, 0xa6, 0xba, 0x04,
	0x35, 0x57, 0x31, 0xdd, 0x68, 0x57, 0x5e, 0x1c, 0x85, 0x62, 0x03, 0x87, 0x79, 0xd6, 0xc1, 0xa7,
	0x6a, 0x4d, 0xff, 0xbe, 0xa2, 0xe8, 0xf3, 0x19, 0x45, 0x5f, 0xcd, 0x28, 0xfa, 0x56, 0xcd, 0x48,
	0xfa, 0x25, 0x8e, 0x98, 0x10, 0x4a, 0xde, 0x7b, 0x27, 0x30, 0xed, 0x2a, 0x35, 0xbb, 0x4c, 0x08,
	0xb5, 0xdf, 0x1a, 0x78, 0x9a, 0x2e, 0xfa, 0x6e, 0xf1, 0x46, 0x68, 0xb4, 0xfc, 0x8a, 0xe8, 0x9a,
	0x9d, 0x63, 0x6c, 0x14, 0x3b, 0x43, 0x5a, 0xb8, 0x59, 0x38, 0x4f, 0xc2, 0x49, 0xc8, 0xcf, 0xc3,
	0xe6, 0x02, 0x59, 0xc7, 0xab, 0x05, 0x7a, 0xc4, 0xed, 0x09, 0x44, 0x4d, 0x44, 0xd6, 0x70, 0xbd,
	0x00, 0x3f, 0x3a, 0x7c, 0xf4, 0x49, 0x73, 0x71, 0xa7, 0x8b, 0xf1, 0x5c, 0x3e, 0x69, 0xe2, 0xda,
	0x43, 0xde, 0x4b, 0x24, 0x4f, 0xb1, 0xe6, 0x02, 0x69, 0x60, 0x5c, 0xf2, 0xd1, 0xfe, 0x5f, 0x15,
	0xfd, 0x00, 0xf6, 0x84, 0x47, 0xa6, 0xd8, 0x38, 0x8c, 0x80, 0x49, 0x50, 0x6f, 0x49, 0xe3, 0xf9,
	0x67, 0x62, 0xb3, 0xfc, 0x6c, 0x0c, 0xf5, 0x1f, 0x41, 0xe7, 0xf8, 0xd9, 0x8c, 0x9a, 0x43, 0x88,
	0x79, 0x12, 0xd9, 0xaa, 0x26, 0xde, 0xed, 0xd9, 0x6a, 0x56, 0x1f, 0xb0, 0x90, 0xb9, 0xb0, 0x7b,
	0xad, 0xd4, 0x2f, 0x7e, 0xf9, 0xe3, 0x9b, 0xc5, 0x66, 0x67, 0xc5, 0xb4, 0x35, 0x93, 0xc9, 0x84,
	0x38, 0x40, 0x3b, 0x8a, 0x3a, 0x3d, 0xd1, 0xcb, 0xa0, 0x76, 0x34, 0x53, 0x89, 0xfa, 0x89, 0x70,
	0x5e, 0x92, 0xea, 0x44, 0x33, 0xe5, 0xd4, 0x11, 0xae, 0x7e, 0x3c, 0xe6, 0xe7, 0xd7, 0x11, 0xbf,
	0xe0, 0x77, 0x3e, 0x7c, 0x36, 0xa3, 0x7b, 0xd7, 0xb0, 0x3e, 0xf5, 0xe0, 0xfc, 0x3f, 0x38, 0x1b,
	0x1d, 0xc3, 0x8c, 0xc7, 0xfc, 0x3c, 0x63, 0xbc, 0x8d, 0xfa, 0xcd, 0x8b, 0xdf, 0xb7, 0x16, 0x2e,
	0x2e, 0xb7, 0xd0, 0xcf, 0x97, 0x5b, 0xe8, 0xb7, 0xcb, 0x2d, 0x74, 0xba, 0xac, 0x59, 0xee, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x69, 0x95, 0x5c, 0x5f, 0x14, 0x08, 0x00, 0x00,
}
