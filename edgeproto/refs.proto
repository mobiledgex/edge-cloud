// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "cloudlet.proto";
import "clusterinst.proto";
import "app.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// VMResource provision state
//
// Provision state of the VM resource in cloudlet
//
//  0: `PROV_STATE_UNKNOWN`
//  1: `PROV_STATE_ADD`
//  2: `PROV_STATE_REMOVE`
enum VMProvState {
  // None
  PROV_STATE_NONE = 0;
  // VM resource to be provisioned
  PROV_STATE_ADD = 1;
  // VM resource to be unprovisioned
  PROV_STATE_REMOVE = 2;
}


// VMResource
//
// VMResource specifies the resource requirement of a VM
message VMResource {
  // ClusterInstKey to track which cluster this VM resource belongs to
  ClusterInstKey key = 1 [(gogoproto.nullable) = false];
  // Flavor requirement of the VM required by the cluster
  FlavorInfo vm_flavor = 2;
  // Resource provision state
  VMProvState prov_state = 3;
  // Resource Type can be platform, rootlb, cluster-master, cluster-node, vmapp
  string type = 4;
}

// Refs track ref counts of used resources, ports, etc.
// They are not part of the base Cloudlet/Cluster objects because
// there's no way in GRPC to prevent certain fields from being sent/marshalled,
// and we don't need these fields being sent via the notify protocol
// to the CRM.
// On CloudletRefs, CloudletKey will be the same for all cluster insts,
// so we use the cluster key rather than the cluster inst key.

// CloudletRefs track used resources and Clusters instantiated on a Cloudlet. Used resources are compared against max resources for a Cloudlet to determine if resources are available for a new Cluster to be instantiated on the Cloudlet.
message CloudletRefs {
  // Cloudlet key
  CloudletKey key = 1 [(gogoproto.nullable) = false];
  // Used RAM in MB
  uint64 used_ram = 4;
  // Used VCPU cores
  uint64 used_vcores = 5;
  // Used disk in GB
  uint64 used_disk = 6;
  // Used ports on root load balancer. Map key is public port, value is a bitmap for the protocol
  // bitmap: bit 0: tcp, bit 1: udp
  map<int32, int32> root_lb_ports = 8;
  // Used dynamic IPs
  int32 used_dynamic_ips = 9;
  // Used static IPs
  string used_static_ips = 10;
  // Used Optional Resources
  map<string, uint32> opt_res_used_map = 11;
  // Clusters instantiated on the Cloudlet
  repeated ClusterInstKey cluster_insts = 12 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
}

// Track app insts created on a ClusterInst.
// These are used to calculated used resources.
// Note that since CloudletKey will be the same for all app insts,
// we use the app key rather than the app inst key.

// ClusterRefs track used resources within a ClusterInst. Each AppInst specifies a set of required resources (Flavor), so tracking resources used by Apps within a Cluster is necessary to determine if enough resources are available for another AppInst to be instantiated on a ClusterInst.
message ClusterInstRefs {
  // Cluster Instance key
  ClusterInstKey key = 1 [(gogoproto.nullable) = false];
  // Apps instances in the Cluster Instance
  repeated AppKey apps = 2 [(gogoproto.nullable) = false];
  // Used RAM in MB
  uint64 used_ram = 4;
  // Used VCPU cores
  uint64 used_vcores = 5;
  // Used disk in GB
  uint64 used_disk = 6;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.notify_cache) = true;
}

// This API should be admin-only
service CloudletRefsApi {
  // Show CloudletRefs (debug only)
  rpc ShowCloudletRefs(CloudletRefs) returns (stream CloudletRefs) {
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
  }
}

service ClusterInstRefsApi {
  // Show ClusterInstRefs (debug only)
  rpc ShowClusterInstRefs(ClusterInstRefs) returns (stream ClusterInstRefs) {
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionView,";
  }
}

message AppInstRefs {
  // App key
  AppKey key = 1 [(gogoproto.nullable) = false];
  // AppInsts for App (key is JSON of AppInst Key)
  map<string, uint32> insts = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.notify_cache) = true;
}

service AppInstRefsApi {
  // Show AppInstRefs (debug only)
  rpc ShowAppInstRefs(AppInstRefs) returns (stream AppInstRefs) {
    option (protogen.mc2_api) = "ResourceAppInsts,ActionView,Key.Organization";
  }
}
