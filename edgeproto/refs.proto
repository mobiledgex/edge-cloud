// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";
import "cloudletkey.proto";
import "cloudlet.proto";
import "clusterinst.proto";
import "app.proto";
import "infraresources.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// VMResource
//
// VMResource specifies the resource requirement of a VM
message VMResource {
  // ClusterInstKey to track which cluster this VM resource belongs to
  ClusterInstKey key = 1 [(gogoproto.nullable) = false];
  // Flavor requirement of the VM required by the cluster
  FlavorInfo vm_flavor = 2;
  // Resource Type can be platform, rootlb, cluster-master, cluster-k8s-node, cluster-docker-node, appvm, k8s-lb-svc
  string type = 3;
  // (deprecated) Access type for resource of type App VM
  AccessType app_access_type = 4;
}

// Refs track ref counts of used resources, ports, etc.
// They are not part of the base Cloudlet/Cluster objects because
// there's no way in GRPC to prevent certain fields from being sent/marshalled,
// and we don't need these fields being sent via the notify protocol
// to the CRM.
// On CloudletRefs, CloudletKey will be the same for all cluster insts,
// so we use the cluster key rather than the cluster inst key.

// CloudletRefs track used resources and Clusters instantiated on a Cloudlet. Used resources are compared against max resources for a Cloudlet to determine if resources are available for a new Cluster to be instantiated on the Cloudlet.
message CloudletRefs {
  // Cloudlet key
  CloudletKey key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "Cloudlet"];
  // Used ports on root load balancer. Map key is public port, value is a bitmap for the protocol
  // bitmap: bit 0: tcp, bit 1: udp
  map<int32, int32> root_lb_ports = 8;
  // Used dynamic IPs
  int32 used_dynamic_ips = 9;
  // Used static IPs
  string used_static_ips = 10;
  // Used Optional Resources
  map<string, uint32> opt_res_used_map = 11;
  // Track reservable autoclusterinsts ids in use. This is a bitmap.
  fixed64 reserved_auto_cluster_ids = 12;
  // Clusters instantiated on the Cloudlet
  repeated ClusterInstRefKey cluster_insts = 13 [(gogoproto.nullable) = false, (protogen.tracks_refs_by) = "ClusterInst"];
  // VM apps instantiated on the Cloudlet
  repeated AppInstRefKey vm_app_insts = 14 [(gogoproto.nullable) = false];
  // K8s apps instantiated on the Cloudlet
  repeated AppInstRefKey k8s_app_insts = 15 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.tracks_refers_to) = true;
}

// ClusterRefs AppInst Key
//
// ClusterRefsAppInstKey is an app instance key without the cluster inst key,
// but including the virtual cluster name. This is used by the ClusterRefs
// to track AppInsts instantiated in the cluster.
message ClusterRefsAppInstKey {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false];
  // Virtual cluster name
  string v_cluster_name = 2 [(protogen.keytag) = "vcluster"];
  option (protogen.obj_key) = true;
  option (protogen.generate_matches) = true;
}

// Track app insts created on a ClusterInst.
// These are used to calculated used resources.
// Note that since CloudletKey will be the same for all app insts,
// we use the app key rather than the app inst key.

// ClusterRefs track used resources within a ClusterInst. Each AppInst specifies a set of required resources (Flavor), so tracking resources used by Apps within a Cluster is necessary to determine if enough resources are available for another AppInst to be instantiated on a ClusterInst.
message ClusterRefs {
  // Cluster Instance key
  ClusterInstKey key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "ClusterInst"];
  // App instances in the Cluster Instance
  repeated ClusterRefsAppInstKey apps = 2 [(gogoproto.nullable) = false, (protogen.tracks_refs_by) = "AppInst"];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.notify_cache) = true;
  option (protogen.tracks_refers_to) = true;
}

// This API should be admin-only
service CloudletRefsApi {
  // Show CloudletRefs (debug only)
  rpc ShowCloudletRefs(CloudletRefs) returns (stream CloudletRefs) {
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
  }
}

service ClusterRefsApi {
  // Show ClusterRefs (debug only)
  rpc ShowClusterRefs(ClusterRefs) returns (stream ClusterRefs) {
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionView,Key.Organization";
  }
}

message AppInstRefs {
  // App key
  AppKey key = 1 [(gogoproto.nullable) = false, (protogen.refers_to) = "App"];
  // AppInsts for App (key is JSON of AppInst Key)
  map<string, uint32> insts = 2 [(gogoproto.nullable) = false, (protogen.tracks_refs_by) = "AppInst"];
  // AppInsts being deleted (key is JSON of AppInst Key)
  map<string, uint32> delete_requested_insts = 3 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.notify_cache) = true;
  option (protogen.tracks_refers_to) = true;
}

service AppInstRefsApi {
  // Show AppInstRefs (debug only)
  rpc ShowAppInstRefs(AppInstRefs) returns (stream AppInstRefs) {
    option (protogen.mc2_api) = "ResourceAppInsts,ActionView,Key.Organization";
  }
}
