// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: refs.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "sort"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CloudletRefs track used resources and Clusters instantiated on a Cloudlet. Used resources are compared against max resources for a Cloudlet to determine if resources are available for a new Cluster to be instantiated on the Cloudlet.
type CloudletRefs struct {
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Clusters instantiated on the Cloudlet
	Clusters []ClusterKey `protobuf:"bytes,2,rep,name=clusters" json:"clusters"`
	// Used RAM in MB
	UsedRam uint64 `protobuf:"varint,4,opt,name=used_ram,json=usedRam,proto3" json:"used_ram,omitempty"`
	// Used VCPU cores
	UsedVcores uint64 `protobuf:"varint,5,opt,name=used_vcores,json=usedVcores,proto3" json:"used_vcores,omitempty"`
	// Used disk in GB
	UsedDisk uint64 `protobuf:"varint,6,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
	// Used ports on root load balancer. Map key is public port, value is a bitmap for the protocol
	// bitmap: bit 0: tcp, bit 1: udp
	RootLbPorts map[int32]int32 `protobuf:"bytes,8,rep,name=root_lb_ports,json=rootLbPorts" json:"root_lb_ports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Used dynamic IPs
	UsedDynamicIps int32 `protobuf:"varint,9,opt,name=used_dynamic_ips,json=usedDynamicIps,proto3" json:"used_dynamic_ips,omitempty"`
	// Used static IPs
	UsedStaticIps string `protobuf:"bytes,10,opt,name=used_static_ips,json=usedStaticIps,proto3" json:"used_static_ips,omitempty"`
	// Used Optional Resources
	OptResUsedMap map[string]uint32 `protobuf:"bytes,11,rep,name=opt_res_used_map,json=optResUsedMap" json:"opt_res_used_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CloudletRefs) Reset()                    { *m = CloudletRefs{} }
func (m *CloudletRefs) String() string            { return proto.CompactTextString(m) }
func (*CloudletRefs) ProtoMessage()               {}
func (*CloudletRefs) Descriptor() ([]byte, []int) { return fileDescriptorRefs, []int{0} }

// ClusterRefs track used resources within a ClusterInst. Each AppInst specifies a set of required resources (Flavor), so tracking resources used by Apps within a Cluster is necessary to determine if enough resources are available for another AppInst to be instantiated on a ClusterInst.
type ClusterRefs struct {
	// Cluster Instance key
	Key ClusterInstKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Apps instances in the Cluster Instance
	Apps []AppKey `protobuf:"bytes,2,rep,name=apps" json:"apps"`
	// Used RAM in MB
	UsedRam uint64 `protobuf:"varint,4,opt,name=used_ram,json=usedRam,proto3" json:"used_ram,omitempty"`
	// Used VCPU cores
	UsedVcores uint64 `protobuf:"varint,5,opt,name=used_vcores,json=usedVcores,proto3" json:"used_vcores,omitempty"`
	// Used disk in GB
	UsedDisk uint64 `protobuf:"varint,6,opt,name=used_disk,json=usedDisk,proto3" json:"used_disk,omitempty"`
}

func (m *ClusterRefs) Reset()                    { *m = ClusterRefs{} }
func (m *ClusterRefs) String() string            { return proto.CompactTextString(m) }
func (*ClusterRefs) ProtoMessage()               {}
func (*ClusterRefs) Descriptor() ([]byte, []int) { return fileDescriptorRefs, []int{1} }

func init() {
	proto.RegisterType((*CloudletRefs)(nil), "edgeproto.CloudletRefs")
	proto.RegisterType((*ClusterRefs)(nil), "edgeproto.ClusterRefs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletRefsApi service

type CloudletRefsApiClient interface {
	// Show CloudletRefs (debug only)
	ShowCloudletRefs(ctx context.Context, in *CloudletRefs, opts ...grpc.CallOption) (CloudletRefsApi_ShowCloudletRefsClient, error)
}

type cloudletRefsApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletRefsApiClient(cc *grpc.ClientConn) CloudletRefsApiClient {
	return &cloudletRefsApiClient{cc}
}

func (c *cloudletRefsApiClient) ShowCloudletRefs(ctx context.Context, in *CloudletRefs, opts ...grpc.CallOption) (CloudletRefsApi_ShowCloudletRefsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletRefsApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletRefsApi/ShowCloudletRefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletRefsApiShowCloudletRefsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletRefsApi_ShowCloudletRefsClient interface {
	Recv() (*CloudletRefs, error)
	grpc.ClientStream
}

type cloudletRefsApiShowCloudletRefsClient struct {
	grpc.ClientStream
}

func (x *cloudletRefsApiShowCloudletRefsClient) Recv() (*CloudletRefs, error) {
	m := new(CloudletRefs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletRefsApi service

type CloudletRefsApiServer interface {
	// Show CloudletRefs (debug only)
	ShowCloudletRefs(*CloudletRefs, CloudletRefsApi_ShowCloudletRefsServer) error
}

func RegisterCloudletRefsApiServer(s *grpc.Server, srv CloudletRefsApiServer) {
	s.RegisterService(&_CloudletRefsApi_serviceDesc, srv)
}

func _CloudletRefsApi_ShowCloudletRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletRefs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletRefsApiServer).ShowCloudletRefs(m, &cloudletRefsApiShowCloudletRefsServer{stream})
}

type CloudletRefsApi_ShowCloudletRefsServer interface {
	Send(*CloudletRefs) error
	grpc.ServerStream
}

type cloudletRefsApiShowCloudletRefsServer struct {
	grpc.ServerStream
}

func (x *cloudletRefsApiShowCloudletRefsServer) Send(m *CloudletRefs) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletRefsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletRefsApi",
	HandlerType: (*CloudletRefsApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletRefs",
			Handler:       _CloudletRefsApi_ShowCloudletRefs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "refs.proto",
}

// Client API for ClusterRefsApi service

type ClusterRefsApiClient interface {
	// Show ClusterRefs (debug only)
	ShowClusterRefs(ctx context.Context, in *ClusterRefs, opts ...grpc.CallOption) (ClusterRefsApi_ShowClusterRefsClient, error)
}

type clusterRefsApiClient struct {
	cc *grpc.ClientConn
}

func NewClusterRefsApiClient(cc *grpc.ClientConn) ClusterRefsApiClient {
	return &clusterRefsApiClient{cc}
}

func (c *clusterRefsApiClient) ShowClusterRefs(ctx context.Context, in *ClusterRefs, opts ...grpc.CallOption) (ClusterRefsApi_ShowClusterRefsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterRefsApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ClusterRefsApi/ShowClusterRefs", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterRefsApiShowClusterRefsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterRefsApi_ShowClusterRefsClient interface {
	Recv() (*ClusterRefs, error)
	grpc.ClientStream
}

type clusterRefsApiShowClusterRefsClient struct {
	grpc.ClientStream
}

func (x *clusterRefsApiShowClusterRefsClient) Recv() (*ClusterRefs, error) {
	m := new(ClusterRefs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterRefsApi service

type ClusterRefsApiServer interface {
	// Show ClusterRefs (debug only)
	ShowClusterRefs(*ClusterRefs, ClusterRefsApi_ShowClusterRefsServer) error
}

func RegisterClusterRefsApiServer(s *grpc.Server, srv ClusterRefsApiServer) {
	s.RegisterService(&_ClusterRefsApi_serviceDesc, srv)
}

func _ClusterRefsApi_ShowClusterRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterRefs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterRefsApiServer).ShowClusterRefs(m, &clusterRefsApiShowClusterRefsServer{stream})
}

type ClusterRefsApi_ShowClusterRefsServer interface {
	Send(*ClusterRefs) error
	grpc.ServerStream
}

type clusterRefsApiShowClusterRefsServer struct {
	grpc.ServerStream
}

func (x *clusterRefsApiShowClusterRefsServer) Send(m *ClusterRefs) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterRefsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ClusterRefsApi",
	HandlerType: (*ClusterRefsApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowClusterRefs",
			Handler:       _ClusterRefsApi_ShowClusterRefs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "refs.proto",
}

func (m *CloudletRefs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletRefs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRefs(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Clusters) > 0 {
		for _, msg := range m.Clusters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRefs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UsedRam != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedRam))
	}
	if m.UsedVcores != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedVcores))
	}
	if m.UsedDisk != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedDisk))
	}
	if len(m.RootLbPorts) > 0 {
		for k, _ := range m.RootLbPorts {
			dAtA[i] = 0x42
			i++
			v := m.RootLbPorts[k]
			mapSize := 1 + sovRefs(uint64(k)) + 1 + sovRefs(uint64(v))
			i = encodeVarintRefs(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRefs(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintRefs(dAtA, i, uint64(v))
		}
	}
	if m.UsedDynamicIps != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedDynamicIps))
	}
	if len(m.UsedStaticIps) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRefs(dAtA, i, uint64(len(m.UsedStaticIps)))
		i += copy(dAtA[i:], m.UsedStaticIps)
	}
	if len(m.OptResUsedMap) > 0 {
		for k, _ := range m.OptResUsedMap {
			dAtA[i] = 0x5a
			i++
			v := m.OptResUsedMap[k]
			mapSize := 1 + len(k) + sovRefs(uint64(len(k))) + 1 + sovRefs(uint64(v))
			i = encodeVarintRefs(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRefs(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintRefs(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ClusterRefs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterRefs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRefs(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Apps) > 0 {
		for _, msg := range m.Apps {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRefs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UsedRam != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedRam))
	}
	if m.UsedVcores != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedVcores))
	}
	if m.UsedDisk != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRefs(dAtA, i, uint64(m.UsedDisk))
	}
	return i, nil
}

func encodeVarintRefs(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletRefs) Matches(o *CloudletRefs, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Clusters != nil {
		if m.Clusters == nil && o.Clusters != nil || m.Clusters != nil && o.Clusters == nil {
			return false
		} else if m.Clusters != nil && o.Clusters != nil {
			if len(m.Clusters) != len(o.Clusters) {
				return false
			}
			if opts.SortArrayedKeys {
				sort.Slice(m.Clusters, func(i, j int) bool {
					return m.Clusters[i].GetKeyString() < m.Clusters[j].GetKeyString()
				})
				sort.Slice(o.Clusters, func(i, j int) bool {
					return o.Clusters[i].GetKeyString() < o.Clusters[j].GetKeyString()
				})
			}
			for i := 0; i < len(m.Clusters); i++ {
				if !m.Clusters[i].Matches(&o.Clusters[i], fopts...) {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.UsedRam != 0 {
		if o.UsedRam != m.UsedRam {
			return false
		}
	}
	if !opts.Filter || o.UsedVcores != 0 {
		if o.UsedVcores != m.UsedVcores {
			return false
		}
	}
	if !opts.Filter || o.UsedDisk != 0 {
		if o.UsedDisk != m.UsedDisk {
			return false
		}
	}
	if !opts.Filter || o.RootLbPorts != nil {
		if m.RootLbPorts == nil && o.RootLbPorts != nil || m.RootLbPorts != nil && o.RootLbPorts == nil {
			return false
		} else if m.RootLbPorts != nil && o.RootLbPorts != nil {
			if len(m.RootLbPorts) != len(o.RootLbPorts) {
				return false
			}
			for k, _ := range m.RootLbPorts {
				_, ok := o.RootLbPorts[k]
				if !ok {
					return false
				}
				if o.RootLbPorts[k] != m.RootLbPorts[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.UsedDynamicIps != 0 {
		if o.UsedDynamicIps != m.UsedDynamicIps {
			return false
		}
	}
	if !opts.Filter || o.UsedStaticIps != "" {
		if o.UsedStaticIps != m.UsedStaticIps {
			return false
		}
	}
	if !opts.Filter || o.OptResUsedMap != nil {
		if m.OptResUsedMap == nil && o.OptResUsedMap != nil || m.OptResUsedMap != nil && o.OptResUsedMap == nil {
			return false
		} else if m.OptResUsedMap != nil && o.OptResUsedMap != nil {
			if len(m.OptResUsedMap) != len(o.OptResUsedMap) {
				return false
			}
			for k, _ := range m.OptResUsedMap {
				_, ok := o.OptResUsedMap[k]
				if !ok {
					return false
				}
				if o.OptResUsedMap[k] != m.OptResUsedMap[k] {
					return false
				}
			}
		}
	}
	return true
}

func (m *CloudletRefs) CopyInFields(src *CloudletRefs) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.Clusters == nil || len(m.Clusters) != len(src.Clusters) {
		m.Clusters = make([]ClusterKey, len(src.Clusters))
		changed++
	}
	for i0 := 0; i0 < len(src.Clusters); i0++ {
		if m.Clusters[i0].Name != src.Clusters[i0].Name {
			m.Clusters[i0].Name = src.Clusters[i0].Name
			changed++
		}
	}
	if m.UsedRam != src.UsedRam {
		m.UsedRam = src.UsedRam
		changed++
	}
	if m.UsedVcores != src.UsedVcores {
		m.UsedVcores = src.UsedVcores
		changed++
	}
	if m.UsedDisk != src.UsedDisk {
		m.UsedDisk = src.UsedDisk
		changed++
	}
	if src.RootLbPorts != nil {
		m.RootLbPorts = make(map[int32]int32)
		for k0, _ := range src.RootLbPorts {
			m.RootLbPorts[k0] = src.RootLbPorts[k0]
		}
	} else if m.RootLbPorts != nil {
		m.RootLbPorts = nil
		changed++
	}
	if m.UsedDynamicIps != src.UsedDynamicIps {
		m.UsedDynamicIps = src.UsedDynamicIps
		changed++
	}
	if m.UsedStaticIps != src.UsedStaticIps {
		m.UsedStaticIps = src.UsedStaticIps
		changed++
	}
	if src.OptResUsedMap != nil {
		m.OptResUsedMap = make(map[string]uint32)
		for k0, _ := range src.OptResUsedMap {
			m.OptResUsedMap[k0] = src.OptResUsedMap[k0]
		}
	} else if m.OptResUsedMap != nil {
		m.OptResUsedMap = nil
		changed++
	}
	return changed
}

func (s *CloudletRefs) HasFields() bool {
	return false
}

type CloudletRefsStore struct {
	kvstore objstore.KVStore
}

func NewCloudletRefsStore(kvstore objstore.KVStore) CloudletRefsStore {
	return CloudletRefsStore{kvstore: kvstore}
}

func (s *CloudletRefsStore) Create(ctx context.Context, m *CloudletRefs, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletRefs", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletRefsStore) Update(ctx context.Context, m *CloudletRefs, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletRefs", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletRefsStore) Put(ctx context.Context, m *CloudletRefs, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletRefs", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletRefsStore) Delete(ctx context.Context, m *CloudletRefs, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletRefs", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletRefsStore) LoadOne(key string) (*CloudletRefs, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletRefs
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletRefs data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletRefsStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *CloudletRefs) bool {
	keystr := objstore.DbKeyString("CloudletRefs", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletRefsStore) STMPut(stm concurrency.STM, obj *CloudletRefs, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletRefs", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletRefs json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletRefsStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("CloudletRefs", key)
	stm.Del(keystr)
}

type CloudletRefsKeyWatcher struct {
	cb func(ctx context.Context)
}

// CloudletRefsCache caches CloudletRefs objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletRefsCache struct {
	Objs        map[CloudletKey]*CloudletRefs
	Mux         util.Mutex
	List        map[CloudletKey]struct{}
	FlushAll    bool
	NotifyCb    func(ctx context.Context, obj *CloudletKey, old *CloudletRefs)
	UpdatedCb   func(ctx context.Context, old *CloudletRefs, new *CloudletRefs)
	KeyWatchers map[CloudletKey][]*CloudletRefsKeyWatcher
}

func NewCloudletRefsCache() *CloudletRefsCache {
	cache := CloudletRefsCache{}
	InitCloudletRefsCache(&cache)
	return &cache
}

func InitCloudletRefsCache(cache *CloudletRefsCache) {
	cache.Objs = make(map[CloudletKey]*CloudletRefs)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletRefsKeyWatcher)
}

func (c *CloudletRefsCache) GetTypeString() string {
	return "CloudletRefs"
}

func (c *CloudletRefsCache) Get(key *CloudletKey, valbuf *CloudletRefs) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletRefsCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletRefsCache) GetAllKeys(ctx context.Context, keys map[CloudletKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *CloudletRefsCache) Update(ctx context.Context, in *CloudletRefs, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *CloudletRefs) (*CloudletRefs, bool) {
		return in, true
	})
}

func (c *CloudletRefsCache) UpdateModFunc(ctx context.Context, key *CloudletKey, rev int64, modFunc func(old *CloudletRefs) (new *CloudletRefs, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &CloudletRefs{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate CloudletRefs", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletRefsCache) Delete(ctx context.Context, in *CloudletRefs, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete CloudletRefs", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletRefsCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*CloudletRefs)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletRefsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletRefsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletRefsCache) Show(filter *CloudletRefs, cb func(ret *CloudletRefs) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletRefs", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare CloudletRefs", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletRefs", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletRefsGenericNotifyCb(fn func(key *CloudletKey, old *CloudletRefs)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*CloudletRefs))
	}
}

func (c *CloudletRefsCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *CloudletRefs)) {
	c.NotifyCb = fn
}

func (c *CloudletRefsCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletRefs, new *CloudletRefs)) {
	c.UpdatedCb = fn
}

func (c *CloudletRefsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *CloudletRefsCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletRefsKeyWatcher, 0)
	}
	watcher := CloudletRefsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletRefs", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletRefsCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*CloudletRefsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *CloudletRefsCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := CloudletRefs{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletRefs data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletRefsCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := CloudletRefs{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *CloudletRefsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletRefsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*CloudletRefs)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *CloudletRefsCache) UsesOrg(org string) bool {
	return false
}

func (m *CloudletRefs) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletRefs) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletRefs) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletRefs) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletRefs(a CloudletRefs, b CloudletRefs) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *CloudletRefs) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Clusters {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *ClusterRefs) Matches(o *ClusterRefs, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Apps != nil {
		if m.Apps == nil && o.Apps != nil || m.Apps != nil && o.Apps == nil {
			return false
		} else if m.Apps != nil && o.Apps != nil {
			if len(m.Apps) != len(o.Apps) {
				return false
			}
			if opts.SortArrayedKeys {
				sort.Slice(m.Apps, func(i, j int) bool {
					return m.Apps[i].GetKeyString() < m.Apps[j].GetKeyString()
				})
				sort.Slice(o.Apps, func(i, j int) bool {
					return o.Apps[i].GetKeyString() < o.Apps[j].GetKeyString()
				})
			}
			for i := 0; i < len(m.Apps); i++ {
				if !m.Apps[i].Matches(&o.Apps[i], fopts...) {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.UsedRam != 0 {
		if o.UsedRam != m.UsedRam {
			return false
		}
	}
	if !opts.Filter || o.UsedVcores != 0 {
		if o.UsedVcores != m.UsedVcores {
			return false
		}
	}
	if !opts.Filter || o.UsedDisk != 0 {
		if o.UsedDisk != m.UsedDisk {
			return false
		}
	}
	return true
}

func (m *ClusterRefs) CopyInFields(src *ClusterRefs) int {
	changed := 0
	if m.Key.ClusterKey.Name != src.Key.ClusterKey.Name {
		m.Key.ClusterKey.Name = src.Key.ClusterKey.Name
		changed++
	}
	if m.Key.CloudletKey.Organization != src.Key.CloudletKey.Organization {
		m.Key.CloudletKey.Organization = src.Key.CloudletKey.Organization
		changed++
	}
	if m.Key.CloudletKey.Name != src.Key.CloudletKey.Name {
		m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
		changed++
	}
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Apps == nil || len(m.Apps) != len(src.Apps) {
		m.Apps = make([]AppKey, len(src.Apps))
		changed++
	}
	for i0 := 0; i0 < len(src.Apps); i0++ {
		if m.Apps[i0].Organization != src.Apps[i0].Organization {
			m.Apps[i0].Organization = src.Apps[i0].Organization
			changed++
		}
		if m.Apps[i0].Name != src.Apps[i0].Name {
			m.Apps[i0].Name = src.Apps[i0].Name
			changed++
		}
		if m.Apps[i0].Version != src.Apps[i0].Version {
			m.Apps[i0].Version = src.Apps[i0].Version
			changed++
		}
	}
	if m.UsedRam != src.UsedRam {
		m.UsedRam = src.UsedRam
		changed++
	}
	if m.UsedVcores != src.UsedVcores {
		m.UsedVcores = src.UsedVcores
		changed++
	}
	if m.UsedDisk != src.UsedDisk {
		m.UsedDisk = src.UsedDisk
		changed++
	}
	return changed
}

func (s *ClusterRefs) HasFields() bool {
	return false
}

type ClusterRefsStore struct {
	kvstore objstore.KVStore
}

func NewClusterRefsStore(kvstore objstore.KVStore) ClusterRefsStore {
	return ClusterRefsStore{kvstore: kvstore}
}

func (s *ClusterRefsStore) Create(ctx context.Context, m *ClusterRefs, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterRefs", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterRefsStore) Update(ctx context.Context, m *ClusterRefs, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterRefs", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterRefsStore) Put(ctx context.Context, m *ClusterRefs, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterRefs", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterRefsStore) Delete(ctx context.Context, m *ClusterRefs, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterRefs", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterRefsStore) LoadOne(key string) (*ClusterRefs, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ClusterRefs
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ClusterRefs data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ClusterRefsStore) STMGet(stm concurrency.STM, key *ClusterInstKey, buf *ClusterRefs) bool {
	keystr := objstore.DbKeyString("ClusterRefs", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ClusterRefsStore) STMPut(stm concurrency.STM, obj *ClusterRefs, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("ClusterRefs", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("ClusterRefs json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ClusterRefsStore) STMDel(stm concurrency.STM, key *ClusterInstKey) {
	keystr := objstore.DbKeyString("ClusterRefs", key)
	stm.Del(keystr)
}

type ClusterRefsKeyWatcher struct {
	cb func(ctx context.Context)
}

// ClusterRefsCache caches ClusterRefs objects in memory in a hash table
// and keeps them in sync with the database.
type ClusterRefsCache struct {
	Objs        map[ClusterInstKey]*ClusterRefs
	Mux         util.Mutex
	List        map[ClusterInstKey]struct{}
	FlushAll    bool
	NotifyCb    func(ctx context.Context, obj *ClusterInstKey, old *ClusterRefs)
	UpdatedCb   func(ctx context.Context, old *ClusterRefs, new *ClusterRefs)
	KeyWatchers map[ClusterInstKey][]*ClusterRefsKeyWatcher
}

func NewClusterRefsCache() *ClusterRefsCache {
	cache := ClusterRefsCache{}
	InitClusterRefsCache(&cache)
	return &cache
}

func InitClusterRefsCache(cache *ClusterRefsCache) {
	cache.Objs = make(map[ClusterInstKey]*ClusterRefs)
	cache.KeyWatchers = make(map[ClusterInstKey][]*ClusterRefsKeyWatcher)
}

func (c *ClusterRefsCache) GetTypeString() string {
	return "ClusterRefs"
}

func (c *ClusterRefsCache) Get(key *ClusterInstKey, valbuf *ClusterRefs) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ClusterRefsCache) HasKey(key *ClusterInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ClusterRefsCache) GetAllKeys(ctx context.Context, keys map[ClusterInstKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *ClusterRefsCache) Update(ctx context.Context, in *ClusterRefs, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *ClusterRefs) (*ClusterRefs, bool) {
		return in, true
	})
}

func (c *ClusterRefsCache) UpdateModFunc(ctx context.Context, key *ClusterInstKey, rev int64, modFunc func(old *ClusterRefs) (new *ClusterRefs, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ClusterRefs{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ClusterRefs", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *ClusterRefsCache) Delete(ctx context.Context, in *ClusterRefs, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete ClusterRefs", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *ClusterRefsCache) Prune(ctx context.Context, validKeys map[ClusterInstKey]struct{}) {
	notify := make(map[ClusterInstKey]*ClusterRefs)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ClusterRefsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ClusterRefsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ClusterRefsCache) Show(filter *ClusterRefs, cb func(ret *ClusterRefs) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ClusterRefs", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare ClusterRefs", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ClusterRefs", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ClusterRefsGenericNotifyCb(fn func(key *ClusterInstKey, old *ClusterRefs)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ClusterInstKey), obj.(*ClusterRefs))
	}
}

func (c *ClusterRefsCache) SetNotifyCb(fn func(ctx context.Context, obj *ClusterInstKey, old *ClusterRefs)) {
	c.NotifyCb = fn
}

func (c *ClusterRefsCache) SetUpdatedCb(fn func(ctx context.Context, old *ClusterRefs, new *ClusterRefs)) {
	c.UpdatedCb = fn
}

func (c *ClusterRefsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *ClusterRefsCache) WatchKey(key *ClusterInstKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ClusterRefsKeyWatcher, 0)
	}
	watcher := ClusterRefsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ClusterRefs", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ClusterRefsCache) TriggerKeyWatchers(ctx context.Context, key *ClusterInstKey) {
	watchers := make([]*ClusterRefsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *ClusterRefsCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := ClusterRefs{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ClusterRefs data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ClusterRefsCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := ClusterRefs{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ClusterInstKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *ClusterRefsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ClusterInstKey]struct{})
}

func (c *ClusterRefsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ClusterInstKey]*ClusterRefs)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *ClusterRefsCache) UsesOrg(org string) bool {
	return false
}

func (m *ClusterRefs) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *ClusterRefs) GetKey() *ClusterInstKey {
	return &m.Key
}

func (m *ClusterRefs) GetKeyVal() ClusterInstKey {
	return m.Key
}

func (m *ClusterRefs) SetKey(key *ClusterInstKey) {
	m.Key = *key
}

func CmpSortClusterRefs(a ClusterRefs, b ClusterRefs) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *ClusterRefs) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Apps {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *CloudletRefs) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovRefs(uint64(l))
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovRefs(uint64(l))
		}
	}
	if m.UsedRam != 0 {
		n += 1 + sovRefs(uint64(m.UsedRam))
	}
	if m.UsedVcores != 0 {
		n += 1 + sovRefs(uint64(m.UsedVcores))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovRefs(uint64(m.UsedDisk))
	}
	if len(m.RootLbPorts) > 0 {
		for k, v := range m.RootLbPorts {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRefs(uint64(k)) + 1 + sovRefs(uint64(v))
			n += mapEntrySize + 1 + sovRefs(uint64(mapEntrySize))
		}
	}
	if m.UsedDynamicIps != 0 {
		n += 1 + sovRefs(uint64(m.UsedDynamicIps))
	}
	l = len(m.UsedStaticIps)
	if l > 0 {
		n += 1 + l + sovRefs(uint64(l))
	}
	if len(m.OptResUsedMap) > 0 {
		for k, v := range m.OptResUsedMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRefs(uint64(len(k))) + 1 + sovRefs(uint64(v))
			n += mapEntrySize + 1 + sovRefs(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClusterRefs) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovRefs(uint64(l))
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovRefs(uint64(l))
		}
	}
	if m.UsedRam != 0 {
		n += 1 + sovRefs(uint64(m.UsedRam))
	}
	if m.UsedVcores != 0 {
		n += 1 + sovRefs(uint64(m.UsedVcores))
	}
	if m.UsedDisk != 0 {
		n += 1 + sovRefs(uint64(m.UsedDisk))
	}
	return n
}

func sovRefs(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRefs(x uint64) (n int) {
	return sovRefs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletRefs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRefs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletRefs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletRefs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, ClusterKey{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedRam", wireType)
			}
			m.UsedRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedRam |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedVcores", wireType)
			}
			m.UsedVcores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedVcores |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootLbPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootLbPorts == nil {
				m.RootLbPorts = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRefs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRefs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRefs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRefs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRefs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RootLbPorts[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDynamicIps", wireType)
			}
			m.UsedDynamicIps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDynamicIps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedStaticIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedStaticIps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptResUsedMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptResUsedMap == nil {
				m.OptResUsedMap = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRefs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRefs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRefs
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRefs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRefs(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRefs
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OptResUsedMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRefs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRefs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterRefs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRefs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterRefs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterRefs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRefs
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, AppKey{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedRam", wireType)
			}
			m.UsedRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedRam |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedVcores", wireType)
			}
			m.UsedVcores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedVcores |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedDisk", wireType)
			}
			m.UsedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedDisk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRefs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRefs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRefs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRefs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRefs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRefs
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRefs
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRefs(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRefs = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRefs   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("refs.proto", fileDescriptorRefs) }

var fileDescriptorRefs = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0x66, 0x21, 0xe1, 0x27, 0x9b, 0x3f, 0x10, 0x56, 0x94, 0x2e, 0xa9, 0x14, 0xa2, 0xa8, 0xaa,
	0xac, 0x16, 0x1c, 0x48, 0x0f, 0x45, 0x1c, 0xaa, 0x42, 0xdb, 0x03, 0x82, 0x8a, 0xca, 0xa8, 0x5c,
	0x23, 0xc7, 0x59, 0xc2, 0x8a, 0xd8, 0xbb, 0xda, 0x5d, 0x43, 0xdd, 0x5e, 0xfa, 0x00, 0x7d, 0x88,
	0x3e, 0x43, 0x9f, 0x82, 0x63, 0x9f, 0xa0, 0x02, 0x4e, 0x15, 0xa7, 0x4a, 0x44, 0x3d, 0x57, 0xbb,
	0x76, 0x62, 0x43, 0xc8, 0xb1, 0x97, 0x68, 0xe6, 0xfb, 0xbe, 0x9d, 0xf9, 0xc6, 0x33, 0x81, 0x50,
	0x90, 0x23, 0x69, 0x73, 0xc1, 0x14, 0x43, 0x05, 0xd2, 0xe9, 0x12, 0x13, 0x56, 0x36, 0xba, 0x54,
	0x1d, 0x87, 0x6d, 0xdb, 0x63, 0x7e, 0xc3, 0x67, 0x6d, 0xda, 0xd3, 0xd4, 0xc7, 0x86, 0xfe, 0x5d,
	0xf5, 0x7a, 0x2c, 0xec, 0x34, 0x8c, 0xae, 0x4b, 0x82, 0x61, 0x10, 0x17, 0xa9, 0xcc, 0x1a, 0xba,
	0x47, 0x54, 0x92, 0x97, 0xbc, 0x5e, 0x28, 0x15, 0x11, 0x49, 0x3a, 0x9f, 0xa4, 0x34, 0x90, 0x03,
	0x45, 0xc1, 0xe5, 0x3c, 0x09, 0x17, 0xba, 0xac, 0xcb, 0x4c, 0xd8, 0xd0, 0x51, 0x8c, 0xd6, 0x2f,
	0x73, 0xf0, 0xff, 0xd7, 0x49, 0x55, 0x87, 0x1c, 0x49, 0x64, 0xc3, 0xa9, 0x13, 0x12, 0x61, 0x50,
	0x03, 0x56, 0xb1, 0xb9, 0x68, 0x0f, 0x6d, 0xdb, 0x03, 0xd5, 0x2e, 0x89, 0xb6, 0x73, 0xe7, 0x3f,
	0x97, 0x27, 0x1c, 0x2d, 0x44, 0x2f, 0xe0, 0x4c, 0xd2, 0x56, 0xe2, 0xc9, 0xda, 0x94, 0x55, 0x6c,
	0x3e, 0xb8, 0xf5, 0xc8, 0x50, 0xe9, 0x9b, 0xa1, 0x18, 0x2d, 0xc1, 0x99, 0x50, 0x92, 0x4e, 0x4b,
	0xb8, 0x3e, 0xce, 0xd5, 0x80, 0x95, 0x73, 0xfe, 0xd3, 0xb9, 0xe3, 0xfa, 0x68, 0x19, 0x16, 0x0d,
	0x75, 0xea, 0x31, 0x41, 0x24, 0xce, 0x1b, 0x16, 0x6a, 0xe8, 0xd0, 0x20, 0xe8, 0x11, 0x2c, 0x18,
	0x41, 0x87, 0xca, 0x13, 0x3c, 0x6d, 0x68, 0x53, 0xec, 0x0d, 0x95, 0x27, 0x68, 0x0f, 0x96, 0x04,
	0x63, 0xaa, 0xd5, 0x6b, 0xb7, 0x38, 0x13, 0x4a, 0xe2, 0x19, 0x63, 0xcb, 0xba, 0x67, 0x16, 0x3d,
	0xb1, 0xed, 0x30, 0xa6, 0xf6, 0xda, 0xef, 0xb5, 0xf4, 0x6d, 0xa0, 0x44, 0xe4, 0x14, 0x45, 0x8a,
	0x20, 0x0b, 0x96, 0xe3, 0x56, 0x51, 0xe0, 0xfa, 0xd4, 0x6b, 0x51, 0x2e, 0x71, 0xa1, 0x06, 0xac,
	0xbc, 0x33, 0x6b, 0x3a, 0xc6, 0xf0, 0x0e, 0x97, 0xe8, 0x09, 0x9c, 0x33, 0x4a, 0xa9, 0x5c, 0x95,
	0x08, 0x61, 0x0d, 0x58, 0x05, 0xa7, 0xa4, 0xe1, 0x03, 0x83, 0x6a, 0xdd, 0x01, 0x2c, 0x33, 0xae,
	0x5a, 0x82, 0xc8, 0x96, 0xd1, 0xfb, 0x2e, 0xc7, 0x45, 0x63, 0xf1, 0xe9, 0x38, 0x8b, 0xfb, 0x5c,
	0x39, 0x44, 0x7e, 0x90, 0xa4, 0xf3, 0xce, 0xe5, 0xb1, 0xc9, 0x12, 0xcb, 0x62, 0x95, 0x97, 0xb0,
	0x7c, 0x77, 0x0e, 0x54, 0x4e, 0x57, 0x99, 0x8f, 0x97, 0xb5, 0x00, 0xf3, 0xa7, 0x6e, 0x2f, 0x24,
	0x78, 0xd2, 0x60, 0x71, 0xb2, 0x39, 0xb9, 0x01, 0x2a, 0xaf, 0x20, 0x1a, 0x6d, 0x92, 0xad, 0x50,
	0xb8, 0xa7, 0x42, 0x29, 0x53, 0x61, 0x13, 0xff, 0xba, 0xc1, 0xe0, 0xf7, 0x0d, 0x06, 0x5f, 0xfa,
	0x18, 0x7c, 0xeb, 0x63, 0xf0, 0xfd, 0x0f, 0xce, 0x05, 0x2c, 0x20, 0xf5, 0x0b, 0x00, 0x8b, 0xc9,
	0x21, 0x98, 0x13, 0x5b, 0xcf, 0x9e, 0xd8, 0xd2, 0xe8, 0xb5, 0xec, 0x04, 0xf2, 0xee, 0x95, 0x3d,
	0x83, 0x39, 0x97, 0xf3, 0xc1, 0x85, 0xcd, 0x67, 0xde, 0x6c, 0x71, 0x9e, 0x6a, 0x8d, 0xe8, 0x9f,
	0x5d, 0xd6, 0xf8, 0x11, 0x9b, 0x5f, 0x01, 0x9c, 0xcb, 0x6e, 0x6c, 0x8b, 0x53, 0x14, 0xc1, 0xf2,
	0xc1, 0x31, 0x3b, 0xbb, 0xf5, 0xef, 0x7a, 0x38, 0x66, 0xc3, 0x95, 0x71, 0x44, 0x7d, 0xfd, 0xba,
	0x8f, 0x57, 0x1d, 0x22, 0x59, 0x28, 0x3c, 0x32, 0x60, 0xe4, 0xca, 0x96, 0xa7, 0x28, 0x0b, 0x0e,
	0x29, 0x39, 0x5b, 0xd9, 0x25, 0x91, 0xbd, 0x2f, 0xba, 0x6e, 0x40, 0x3f, 0xb9, 0x1a, 0x5c, 0x03,
	0xcd, 0xcf, 0x70, 0x36, 0xf3, 0xc1, 0xb5, 0x19, 0x0a, 0xe7, 0x62, 0x33, 0xe9, 0x1a, 0x16, 0x47,
	0xbf, 0xbc, 0xb1, 0x32, 0x06, 0xaf, 0x3f, 0xbe, 0xee, 0xe3, 0x5a, 0xea, 0x64, 0xb8, 0xaa, 0x5b,
	0x66, 0xd6, 0xc0, 0x76, 0xf9, 0xfc, 0xb2, 0x3a, 0x71, 0x7e, 0x55, 0x05, 0x3f, 0xae, 0xaa, 0xe0,
	0xe2, 0xaa, 0x0a, 0xda, 0xd3, 0xa6, 0xd8, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xdb,
	0xaf, 0x5d, 0x11, 0x05, 0x00, 0x00,
}
