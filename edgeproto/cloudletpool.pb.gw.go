// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: cloudletpool.proto

/*
Package edgeproto is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package edgeproto

import (
	"io"
	"net/http"

	"github.com/golang/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/status"
)

var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray

func request_CloudletPoolApi_CreateCloudletPool_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolApiClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CloudletPool
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateCloudletPool(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_CloudletPoolApi_DeleteCloudletPool_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolApiClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CloudletPool
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteCloudletPool(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_CloudletPoolApi_ShowCloudletPool_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolApiClient, req *http.Request, pathParams map[string]string) (CloudletPoolApi_ShowCloudletPoolClient, runtime.ServerMetadata, error) {
	var protoReq CloudletPool
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	stream, err := client.ShowCloudletPool(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

func request_CloudletPoolMemberApi_CreateCloudletPoolMember_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolMemberApiClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CloudletPoolMember
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateCloudletPoolMember(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_CloudletPoolMemberApi_DeleteCloudletPoolMember_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolMemberApiClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CloudletPoolMember
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteCloudletPoolMember(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_CloudletPoolMemberApi_ShowCloudletPoolMember_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolMemberApiClient, req *http.Request, pathParams map[string]string) (CloudletPoolMemberApi_ShowCloudletPoolMemberClient, runtime.ServerMetadata, error) {
	var protoReq CloudletPoolMember
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	stream, err := client.ShowCloudletPoolMember(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

func request_CloudletPoolShowApi_ShowPoolsForCloudlet_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolShowApiClient, req *http.Request, pathParams map[string]string) (CloudletPoolShowApi_ShowPoolsForCloudletClient, runtime.ServerMetadata, error) {
	var protoReq CloudletKey
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	stream, err := client.ShowPoolsForCloudlet(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

func request_CloudletPoolShowApi_ShowCloudletsForPool_0(ctx context.Context, marshaler runtime.Marshaler, client CloudletPoolShowApiClient, req *http.Request, pathParams map[string]string) (CloudletPoolShowApi_ShowCloudletsForPoolClient, runtime.ServerMetadata, error) {
	var protoReq CloudletPoolKey
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	stream, err := client.ShowCloudletsForPool(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

// RegisterCloudletPoolApiHandlerFromEndpoint is same as RegisterCloudletPoolApiHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCloudletPoolApiHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCloudletPoolApiHandler(ctx, mux, conn)
}

// RegisterCloudletPoolApiHandler registers the http handlers for service CloudletPoolApi to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCloudletPoolApiHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCloudletPoolApiHandlerClient(ctx, mux, NewCloudletPoolApiClient(conn))
}

// RegisterCloudletPoolApiHandlerClient registers the http handlers for service CloudletPoolApi
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CloudletPoolApiClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CloudletPoolApiClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CloudletPoolApiClient" to call the correct interceptors.
func RegisterCloudletPoolApiHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CloudletPoolApiClient) error {

	mux.Handle("POST", pattern_CloudletPoolApi_CreateCloudletPool_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolApi_CreateCloudletPool_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolApi_CreateCloudletPool_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CloudletPoolApi_DeleteCloudletPool_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolApi_DeleteCloudletPool_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolApi_DeleteCloudletPool_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CloudletPoolApi_ShowCloudletPool_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolApi_ShowCloudletPool_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolApi_ShowCloudletPool_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CloudletPoolApi_CreateCloudletPool_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"create", "cloudletpool"}, ""))

	pattern_CloudletPoolApi_DeleteCloudletPool_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"delete", "cloudletpool"}, ""))

	pattern_CloudletPoolApi_ShowCloudletPool_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"show", "cloudletpool"}, ""))
)

var (
	forward_CloudletPoolApi_CreateCloudletPool_0 = runtime.ForwardResponseMessage

	forward_CloudletPoolApi_DeleteCloudletPool_0 = runtime.ForwardResponseMessage

	forward_CloudletPoolApi_ShowCloudletPool_0 = runtime.ForwardResponseStream
)

// RegisterCloudletPoolMemberApiHandlerFromEndpoint is same as RegisterCloudletPoolMemberApiHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCloudletPoolMemberApiHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCloudletPoolMemberApiHandler(ctx, mux, conn)
}

// RegisterCloudletPoolMemberApiHandler registers the http handlers for service CloudletPoolMemberApi to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCloudletPoolMemberApiHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCloudletPoolMemberApiHandlerClient(ctx, mux, NewCloudletPoolMemberApiClient(conn))
}

// RegisterCloudletPoolMemberApiHandlerClient registers the http handlers for service CloudletPoolMemberApi
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CloudletPoolMemberApiClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CloudletPoolMemberApiClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CloudletPoolMemberApiClient" to call the correct interceptors.
func RegisterCloudletPoolMemberApiHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CloudletPoolMemberApiClient) error {

	mux.Handle("POST", pattern_CloudletPoolMemberApi_CreateCloudletPoolMember_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolMemberApi_CreateCloudletPoolMember_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolMemberApi_CreateCloudletPoolMember_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CloudletPoolMemberApi_DeleteCloudletPoolMember_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolMemberApi_DeleteCloudletPoolMember_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolMemberApi_DeleteCloudletPoolMember_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CloudletPoolMemberApi_ShowCloudletPoolMember_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolMemberApi_ShowCloudletPoolMember_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolMemberApi_ShowCloudletPoolMember_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CloudletPoolMemberApi_CreateCloudletPoolMember_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"add", "cloudletpoolmember"}, ""))

	pattern_CloudletPoolMemberApi_DeleteCloudletPoolMember_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"remove", "cloudletpoolmember"}, ""))

	pattern_CloudletPoolMemberApi_ShowCloudletPoolMember_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"show", "cloudletpoolmember"}, ""))
)

var (
	forward_CloudletPoolMemberApi_CreateCloudletPoolMember_0 = runtime.ForwardResponseMessage

	forward_CloudletPoolMemberApi_DeleteCloudletPoolMember_0 = runtime.ForwardResponseMessage

	forward_CloudletPoolMemberApi_ShowCloudletPoolMember_0 = runtime.ForwardResponseStream
)

// RegisterCloudletPoolShowApiHandlerFromEndpoint is same as RegisterCloudletPoolShowApiHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCloudletPoolShowApiHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCloudletPoolShowApiHandler(ctx, mux, conn)
}

// RegisterCloudletPoolShowApiHandler registers the http handlers for service CloudletPoolShowApi to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCloudletPoolShowApiHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCloudletPoolShowApiHandlerClient(ctx, mux, NewCloudletPoolShowApiClient(conn))
}

// RegisterCloudletPoolShowApiHandlerClient registers the http handlers for service CloudletPoolShowApi
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CloudletPoolShowApiClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CloudletPoolShowApiClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CloudletPoolShowApiClient" to call the correct interceptors.
func RegisterCloudletPoolShowApiHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CloudletPoolShowApiClient) error {

	mux.Handle("POST", pattern_CloudletPoolShowApi_ShowPoolsForCloudlet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolShowApi_ShowPoolsForCloudlet_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolShowApi_ShowPoolsForCloudlet_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CloudletPoolShowApi_ShowCloudletsForPool_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CloudletPoolShowApi_ShowCloudletsForPool_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CloudletPoolShowApi_ShowCloudletsForPool_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CloudletPoolShowApi_ShowPoolsForCloudlet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"show", "poolsforcloudlet"}, ""))

	pattern_CloudletPoolShowApi_ShowCloudletsForPool_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"show", "cloudletsforpool"}, ""))
)

var (
	forward_CloudletPoolShowApi_ShowPoolsForCloudlet_0 = runtime.ForwardResponseStream

	forward_CloudletPoolShowApi_ShowCloudletsForPool_0 = runtime.ForwardResponseStream
)
