// Operator proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "result.proto";
import "gogoproto/gogo.proto";

// OperatorKey uniquely identifies an Operator
message OperatorKey {
  // Company or Organization name of the operator 
  string name = 1;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// An Operator supplies compute resources.
// For example, telecommunications provider such as AT&T is an Operator
message Operator {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  OperatorKey key = 2 [(gogoproto.nullable) = false];

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.alias) = "name=Key.Name";
}

service OperatorApi {
  // Create an Operator
  rpc CreateOperator(Operator) returns (Result) {
    option (google.api.http) = {
      post: "/create/operator"
      body: "*"
    };
  }
  // Delete an Operator
  rpc DeleteOperator(Operator) returns (Result) {
    option (google.api.http) = {
      post: "/delete/operator"
      body: "*"
    };
  }
  // Update an Operator
  rpc UpdateOperator(Operator) returns (Result) {
    option (google.api.http) = {
      post: "/update/operator"
      body: "*"
    };
  }
  // Show Operators
  rpc ShowOperator(Operator) returns (stream Operator) {
    option (google.api.http) = {
      post: "/show/operator"
      body: "*"
    };
  }
}

// OperatorCode maps a carrier code to an Operator name
message OperatorCode {
  // MCC plus MNC code, or custom carrier code designation.
  string code = 1;
  // MobiledgeX operator name
  string operator_name = 2;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.custom_key_type) = "OperatorCodeKey";
}

service OperatorCodeApi {
  // Create a code for an Operator.
  rpc CreateOperatorCode(OperatorCode) returns (Result) {
    option (google.api.http) = {
      post: "/create/operatorcode"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
  }
  // Delete a code for an Operator.
  rpc DeleteOperatorCode(OperatorCode) returns (Result) {
    option (google.api.http) = {
      post: "/delete/operatorcode"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
  }
  // Show OperatorCodes
  rpc ShowOperatorCode(OperatorCode) returns (stream OperatorCode) {
    option (google.api.http) = {
      post: "/show/operatorcode"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,";
  }
}
