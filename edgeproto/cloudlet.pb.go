// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PlatformType is the supported list of cloudlet types
type PlatformType int32

const (
	// Fake Cloudlet
	PlatformType_PLATFORM_TYPE_FAKE PlatformType = 0
	// DIND Cloudlet
	PlatformType_PLATFORM_TYPE_DIND PlatformType = 1
	// Openstack Cloudlet
	PlatformType_PLATFORM_TYPE_OPENSTACK PlatformType = 2
	// Azure Cloudlet
	PlatformType_PLATFORM_TYPE_AZURE PlatformType = 3
	// GCP Cloudlet
	PlatformType_PLATFORM_TYPE_GCP PlatformType = 4
	// Edgebox Cloudlet
	PlatformType_PLATFORM_TYPE_EDGEBOX PlatformType = 5
	// Fake Infra Cloudlet
	PlatformType_PLATFORM_TYPE_FAKEINFRA PlatformType = 6
)

var PlatformType_name = map[int32]string{
	0: "PLATFORM_TYPE_FAKE",
	1: "PLATFORM_TYPE_DIND",
	2: "PLATFORM_TYPE_OPENSTACK",
	3: "PLATFORM_TYPE_AZURE",
	4: "PLATFORM_TYPE_GCP",
	5: "PLATFORM_TYPE_EDGEBOX",
	6: "PLATFORM_TYPE_FAKEINFRA",
}
var PlatformType_value = map[string]int32{
	"PLATFORM_TYPE_FAKE":      0,
	"PLATFORM_TYPE_DIND":      1,
	"PLATFORM_TYPE_OPENSTACK": 2,
	"PLATFORM_TYPE_AZURE":     3,
	"PLATFORM_TYPE_GCP":       4,
	"PLATFORM_TYPE_EDGEBOX":   5,
	"PLATFORM_TYPE_FAKEINFRA": 6,
}

func (x PlatformType) String() string {
	return proto.EnumName(PlatformType_name, int32(x))
}
func (PlatformType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{0} }

// CloudletState is the state of the Cloudlet.
type CloudletState int32

const (
	// Unknown
	CloudletState_CLOUDLET_STATE_UNKNOWN CloudletState = 0
	// Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
	CloudletState_CLOUDLET_STATE_ERRORS CloudletState = 1
	// Cloudlet is created and ready
	CloudletState_CLOUDLET_STATE_READY CloudletState = 2
	// Cloudlet is offline (unreachable)
	CloudletState_CLOUDLET_STATE_OFFLINE CloudletState = 3
	// Cloudlet is not present
	CloudletState_CLOUDLET_STATE_NOT_PRESENT CloudletState = 4
	// Cloudlet is initializing
	CloudletState_CLOUDLET_STATE_INIT CloudletState = 5
	// Cloudlet is upgrading
	CloudletState_CLOUDLET_STATE_UPGRADE CloudletState = 6
)

var CloudletState_name = map[int32]string{
	0: "CLOUDLET_STATE_UNKNOWN",
	1: "CLOUDLET_STATE_ERRORS",
	2: "CLOUDLET_STATE_READY",
	3: "CLOUDLET_STATE_OFFLINE",
	4: "CLOUDLET_STATE_NOT_PRESENT",
	5: "CLOUDLET_STATE_INIT",
	6: "CLOUDLET_STATE_UPGRADE",
}
var CloudletState_value = map[string]int32{
	"CLOUDLET_STATE_UNKNOWN":     0,
	"CLOUDLET_STATE_ERRORS":      1,
	"CLOUDLET_STATE_READY":       2,
	"CLOUDLET_STATE_OFFLINE":     3,
	"CLOUDLET_STATE_NOT_PRESENT": 4,
	"CLOUDLET_STATE_INIT":        5,
	"CLOUDLET_STATE_UPGRADE":     6,
}

func (x CloudletState) String() string {
	return proto.EnumName(CloudletState_name, int32(x))
}
func (CloudletState) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{1} }

// CloudletKey uniquely identifies a Cloudlet.
type CloudletKey struct {
	// Operator of the cloudlet site
	OperatorKey OperatorKey `protobuf:"bytes,1,opt,name=operator_key,json=operatorKey" json:"operator_key"`
	// Name of the cloudlet
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletKey) Reset()                    { *m = CloudletKey{} }
func (m *CloudletKey) String() string            { return proto.CompactTextString(m) }
func (*CloudletKey) ProtoMessage()               {}
func (*CloudletKey) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{0} }

// time limits for cloudlet create, update and delete operations
type OperationTimeLimits struct {
	// max time to create a cluster instance
	CreateClusterInstTimeout int64 `protobuf:"varint,1,opt,name=create_cluster_inst_timeout,json=createClusterInstTimeout,proto3" json:"create_cluster_inst_timeout,omitempty"`
	// max time to update a cluster instance
	UpdateClusterInstTimeout int64 `protobuf:"varint,2,opt,name=update_cluster_inst_timeout,json=updateClusterInstTimeout,proto3" json:"update_cluster_inst_timeout,omitempty"`
	// max time to delete a cluster instance
	DeleteClusterInstTimeout int64 `protobuf:"varint,3,opt,name=delete_cluster_inst_timeout,json=deleteClusterInstTimeout,proto3" json:"delete_cluster_inst_timeout,omitempty"`
	// max time to create an app instance
	CreateAppInstTimeout int64 `protobuf:"varint,4,opt,name=create_app_inst_timeout,json=createAppInstTimeout,proto3" json:"create_app_inst_timeout,omitempty"`
	// max time to update an app instance
	UpdateAppInstTimeout int64 `protobuf:"varint,5,opt,name=update_app_inst_timeout,json=updateAppInstTimeout,proto3" json:"update_app_inst_timeout,omitempty"`
	// max time to delete an app instance
	DeleteAppInstTimeout int64 `protobuf:"varint,6,opt,name=delete_app_inst_timeout,json=deleteAppInstTimeout,proto3" json:"delete_app_inst_timeout,omitempty"`
}

func (m *OperationTimeLimits) Reset()                    { *m = OperationTimeLimits{} }
func (m *OperationTimeLimits) String() string            { return proto.CompactTextString(m) }
func (*OperationTimeLimits) ProtoMessage()               {}
func (*OperationTimeLimits) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{1} }

// properites common to all cloudlets
type CloudletInfraCommon struct {
	// the mex docker registry, e.g.  registry.mobiledgex.net:5000.
	DockerRegistry string `protobuf:"bytes,1,opt,name=docker_registry,json=dockerRegistry,proto3" json:"docker_registry,omitempty"`
	// DNS Zone
	DnsZone string `protobuf:"bytes,2,opt,name=dns_zone,json=dnsZone,proto3" json:"dns_zone,omitempty"`
	// registry file server contains files which get pulled on instantiation such as certs and images
	RegistryFileServer string `protobuf:"bytes,3,opt,name=registry_file_server,json=registryFileServer,proto3" json:"registry_file_server,omitempty"`
	// Cloudflare key
	CfKey string `protobuf:"bytes,4,opt,name=cf_key,json=cfKey,proto3" json:"cf_key,omitempty"`
	// Cloudflare key
	CfUser string `protobuf:"bytes,5,opt,name=cf_user,json=cfUser,proto3" json:"cf_user,omitempty"`
	// Docker registry password
	DockerRegPass string `protobuf:"bytes,6,opt,name=docker_reg_pass,json=dockerRegPass,proto3" json:"docker_reg_pass,omitempty"`
	// network scheme
	NetworkScheme string `protobuf:"bytes,7,opt,name=network_scheme,json=networkScheme,proto3" json:"network_scheme,omitempty"`
	// the name of the docker registry secret, e.g. mexgitlabsecret
	DockerRegistrySecret string `protobuf:"bytes,8,opt,name=docker_registry_secret,json=dockerRegistrySecret,proto3" json:"docker_registry_secret,omitempty"`
}

func (m *CloudletInfraCommon) Reset()                    { *m = CloudletInfraCommon{} }
func (m *CloudletInfraCommon) String() string            { return proto.CompactTextString(m) }
func (*CloudletInfraCommon) ProtoMessage()               {}
func (*CloudletInfraCommon) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{2} }

type AzureProperties struct {
	// azure region e.g. uswest2
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// azure resource group
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// azure username
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// azure password
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *AzureProperties) Reset()                    { *m = AzureProperties{} }
func (m *AzureProperties) String() string            { return proto.CompactTextString(m) }
func (*AzureProperties) ProtoMessage()               {}
func (*AzureProperties) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{3} }

type GcpProperties struct {
	// gcp project for billing
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// availability zone
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	// service account to login with
	ServiceAccount string `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// vault credentials link
	GcpAuthKeyUrl string `protobuf:"bytes,4,opt,name=gcp_auth_key_url,json=gcpAuthKeyUrl,proto3" json:"gcp_auth_key_url,omitempty"`
}

func (m *GcpProperties) Reset()                    { *m = GcpProperties{} }
func (m *GcpProperties) String() string            { return proto.CompactTextString(m) }
func (*GcpProperties) ProtoMessage()               {}
func (*GcpProperties) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{4} }

type OpenStackProperties struct {
	// name of the external network, e.g. external-network-shared
	OsExternalNetworkName string `protobuf:"bytes,1,opt,name=os_external_network_name,json=osExternalNetworkName,proto3" json:"os_external_network_name,omitempty"`
	// openstack image , e.g. mobiledgex
	OsImageName string `protobuf:"bytes,2,opt,name=os_image_name,json=osImageName,proto3" json:"os_image_name,omitempty"`
	// openstack router
	OsExternalRouterName string `protobuf:"bytes,3,opt,name=os_external_router_name,json=osExternalRouterName,proto3" json:"os_external_router_name,omitempty"`
	// openstack internal network
	OsMexNetwork string `protobuf:"bytes,4,opt,name=os_mex_network,json=osMexNetwork,proto3" json:"os_mex_network,omitempty"`
	// openrc env vars
	OpenRcVars map[string]string `protobuf:"bytes,5,rep,name=open_rc_vars,json=openRcVars" json:"open_rc_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OpenStackProperties) Reset()                    { *m = OpenStackProperties{} }
func (m *OpenStackProperties) String() string            { return proto.CompactTextString(m) }
func (*OpenStackProperties) ProtoMessage()               {}
func (*OpenStackProperties) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{5} }

type CloudletInfraProperties struct {
	// what kind of infrastructure: Azure, GCP, Openstack
	CloudletKind string `protobuf:"bytes,1,opt,name=cloudlet_kind,json=cloudletKind,proto3" json:"cloudlet_kind,omitempty"`
	// name and version of the docker image container image that mexos runs in
	MexosContainerImageName string `protobuf:"bytes,2,opt,name=mexos_container_image_name,json=mexosContainerImageName,proto3" json:"mexos_container_image_name,omitempty"`
	// openstack
	OpenstackProperties *OpenStackProperties `protobuf:"bytes,3,opt,name=openstack_properties,json=openstackProperties" json:"openstack_properties,omitempty"`
	// azure
	AzureProperties *AzureProperties `protobuf:"bytes,4,opt,name=azure_properties,json=azureProperties" json:"azure_properties,omitempty"`
	// gcp
	GcpProperties *GcpProperties `protobuf:"bytes,5,opt,name=gcp_properties,json=gcpProperties" json:"gcp_properties,omitempty"`
}

func (m *CloudletInfraProperties) Reset()                    { *m = CloudletInfraProperties{} }
func (m *CloudletInfraProperties) String() string            { return proto.CompactTextString(m) }
func (*CloudletInfraProperties) ProtoMessage()               {}
func (*CloudletInfraProperties) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{6} }

type PlatformConfig struct {
	// Path to Docker registry holding edge-cloud image
	RegistryPath string `protobuf:"bytes,1,opt,name=registry_path,json=registryPath,proto3" json:"registry_path,omitempty"`
	// Path to platform base image
	ImagePath string `protobuf:"bytes,2,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// Address of controller notify port (can be multiple of these)
	NotifyCtrlAddrs string `protobuf:"bytes,3,opt,name=notify_ctrl_addrs,json=notifyCtrlAddrs,proto3" json:"notify_ctrl_addrs,omitempty"`
	// Vault address
	VaultAddr string `protobuf:"bytes,4,opt,name=vault_addr,json=vaultAddr,proto3" json:"vault_addr,omitempty"`
	// TLS cert file
	TlsCertFile string `protobuf:"bytes,5,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty"`
	// Environment variables
	EnvVar map[string]string `protobuf:"bytes,6,rep,name=env_var,json=envVar" json:"env_var,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tag of edge-cloud image
	PlatformTag string `protobuf:"bytes,8,opt,name=platform_tag,json=platformTag,proto3" json:"platform_tag,omitempty"`
	// Internal Test flag
	TestMode bool `protobuf:"varint,9,opt,name=test_mode,json=testMode,proto3" json:"test_mode,omitempty"`
	// Span string
	Span string `protobuf:"bytes,10,opt,name=span,proto3" json:"span,omitempty"`
	// Internal cleanup flag
	CleanupMode bool `protobuf:"varint,11,opt,name=cleanup_mode,json=cleanupMode,proto3" json:"cleanup_mode,omitempty"`
	// Region
	Region string `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *PlatformConfig) Reset()                    { *m = PlatformConfig{} }
func (m *PlatformConfig) String() string            { return proto.CompactTextString(m) }
func (*PlatformConfig) ProtoMessage()               {}
func (*PlatformConfig) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{7} }

// optional resource input consists of a resource specifier and clouldkey name
type CloudletResMap struct {
	// Resource cloudlet key
	Key CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Resource mapping info
	Mapping map[string]string `protobuf:"bytes,2,rep,name=mapping" json:"mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CloudletResMap) Reset()                    { *m = CloudletResMap{} }
func (m *CloudletResMap) String() string            { return proto.CompactTextString(m) }
func (*CloudletResMap) ProtoMessage()               {}
func (*CloudletResMap) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{8} }

// A Cloudlet is a set of compute resources at a particular location, provided by an Operator.
type Cloudlet struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Location of the Cloudlet site
	Location distributed_match_engine.Loc `protobuf:"bytes,5,opt,name=location" json:"location"`
	// Type of IP support provided by Cloudlet (see IpSupport)
	IpSupport IpSupport `protobuf:"varint,6,opt,name=ip_support,json=ipSupport,proto3,enum=edgeproto.IpSupport" json:"ip_support,omitempty"`
	// List of static IPs for static IP support
	StaticIps string `protobuf:"bytes,7,opt,name=static_ips,json=staticIps,proto3" json:"static_ips,omitempty"`
	// Number of dynamic IPs available for dynamic IP support
	NumDynamicIps int32 `protobuf:"varint,8,opt,name=num_dynamic_ips,json=numDynamicIps,proto3" json:"num_dynamic_ips,omitempty"`
	// time limits
	TimeLimits OperationTimeLimits `protobuf:"bytes,9,opt,name=time_limits,json=timeLimits" json:"time_limits"`
	// Any errors trying to create, update, or delete the Cloudlet.
	Errors []string `protobuf:"bytes,10,rep,name=errors" json:"errors,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,11,opt,name=status" json:"status"`
	// Current state of the cloudlet
	State TrackedState `protobuf:"varint,12,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Override actions to CRM
	CrmOverride CRMOverride `protobuf:"varint,13,opt,name=crm_override,json=crmOverride,proto3,enum=edgeproto.CRMOverride" json:"crm_override,omitempty"`
	// Deploy cloudlet services locally
	DeploymentLocal bool `protobuf:"varint,14,opt,name=deployment_local,json=deploymentLocal,proto3" json:"deployment_local,omitempty"`
	// Platform type
	PlatformType PlatformType `protobuf:"varint,15,opt,name=platform_type,json=platformType,proto3,enum=edgeproto.PlatformType" json:"platform_type,omitempty"`
	// Address for the CRM notify listener to run on
	NotifySrvAddr string `protobuf:"bytes,16,opt,name=notify_srv_addr,json=notifySrvAddr,proto3" json:"notify_srv_addr,omitempty"`
	// Min system resource requirements for platform
	Flavor FlavorKey `protobuf:"bytes,17,opt,name=flavor" json:"flavor"`
	// Physical infrastructure cloudlet name
	PhysicalName string `protobuf:"bytes,18,opt,name=physical_name,json=physicalName,proto3" json:"physical_name,omitempty"`
	// Single Key-Value pair of env var to be passed to CRM
	EnvVar map[string]string `protobuf:"bytes,19,rep,name=env_var,json=envVar" json:"env_var,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Cloudlet version
	Version string `protobuf:"bytes,20,opt,name=version,proto3" json:"version,omitempty"`
	// Platform Config Info
	Config PlatformConfig `protobuf:"bytes,21,opt,name=config" json:"config"`
	// Optional resource to restagtbl key map key values = [gpu, nas, nic]
	ResTagMap map[string]*ResTagTableKey `protobuf:"bytes,22,rep,name=res_tag_map,json=resTagMap" json:"res_tag_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Variables required to access cloudlet
	AccessVars map[string]string `protobuf:"bytes,23,rep,name=access_vars,json=accessVars" json:"access_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Cloudlet) Reset()                    { *m = Cloudlet{} }
func (m *Cloudlet) String() string            { return proto.CompactTextString(m) }
func (*Cloudlet) ProtoMessage()               {}
func (*Cloudlet) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{9} }

type FlavorMatch struct {
	// Cloudlet ctx
	Key              CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	FlavorName       string      `protobuf:"bytes,3,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`
	AvailabilityZone string      `protobuf:"bytes,4,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
}

func (m *FlavorMatch) Reset()                    { *m = FlavorMatch{} }
func (m *FlavorMatch) String() string            { return proto.CompactTextString(m) }
func (*FlavorMatch) ProtoMessage()               {}
func (*FlavorMatch) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{10} }

// Flavor details from the Cloudlet
type FlavorInfo struct {
	// Name of the flavor on the Cloudlet
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of VCPU cores on the Cloudlet
	Vcpus uint64 `protobuf:"varint,2,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	// Ram in MB on the Cloudlet
	Ram uint64 `protobuf:"varint,3,opt,name=ram,proto3" json:"ram,omitempty"`
	// Amount of disk in GB on the Cloudlet
	Disk uint64 `protobuf:"varint,4,opt,name=disk,proto3" json:"disk,omitempty"`
	// OS Flavor Properties, if any
	Properties string `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (m *FlavorInfo) Reset()                    { *m = FlavorInfo{} }
func (m *FlavorInfo) String() string            { return proto.CompactTextString(m) }
func (*FlavorInfo) ProtoMessage()               {}
func (*FlavorInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{11} }

type OSAZone struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *OSAZone) Reset()                    { *m = OSAZone{} }
func (m *OSAZone) String() string            { return proto.CompactTextString(m) }
func (*OSAZone) ProtoMessage()               {}
func (*OSAZone) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{12} }

type OSImage struct {
	// image name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// optional tags present on image
	Tags string `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	// image properties/metadata
	Properties string `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	// format qcow2, img, etc
	DiskFormat string `protobuf:"bytes,4,opt,name=disk_format,json=diskFormat,proto3" json:"disk_format,omitempty"`
}

func (m *OSImage) Reset()                    { *m = OSImage{} }
func (m *OSImage) String() string            { return proto.CompactTextString(m) }
func (*OSImage) ProtoMessage()               {}
func (*OSImage) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{13} }

// CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.
type CloudletInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// State of cloudlet
	State CloudletState `protobuf:"varint,3,opt,name=state,proto3,enum=edgeproto.CloudletState" json:"state,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,4,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Connected controller unique id
	Controller string `protobuf:"bytes,5,opt,name=controller,proto3" json:"controller,omitempty"`
	// Maximum Ram in MB on the Cloudlet
	OsMaxRam uint64 `protobuf:"varint,6,opt,name=os_max_ram,json=osMaxRam,proto3" json:"os_max_ram,omitempty"`
	// Maximum number of VCPU cores on the Cloudlet
	OsMaxVcores uint64 `protobuf:"varint,7,opt,name=os_max_vcores,json=osMaxVcores,proto3" json:"os_max_vcores,omitempty"`
	// Maximum amount of disk in GB on the Cloudlet
	OsMaxVolGb uint64 `protobuf:"varint,8,opt,name=os_max_vol_gb,json=osMaxVolGb,proto3" json:"os_max_vol_gb,omitempty"`
	// Any errors encountered while making changes to the Cloudlet
	Errors []string `protobuf:"bytes,9,rep,name=errors" json:"errors,omitempty"`
	// Supported flavors by the Cloudlet
	Flavors []*FlavorInfo `protobuf:"bytes,10,rep,name=flavors" json:"flavors,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,11,opt,name=status" json:"status"`
	// Cloudlet version
	Version string `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Availability Zones if any
	AvailabilityZones []*OSAZone `protobuf:"bytes,13,rep,name=availability_zones,json=availabilityZones" json:"availability_zones,omitempty"`
	// Local Images availble to cloudlet
	OsImages []*OSImage `protobuf:"bytes,14,rep,name=os_images,json=osImages" json:"os_images,omitempty"`
}

func (m *CloudletInfo) Reset()                    { *m = CloudletInfo{} }
func (m *CloudletInfo) String() string            { return proto.CompactTextString(m) }
func (*CloudletInfo) ProtoMessage()               {}
func (*CloudletInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{14} }

// (TODO) CloudletMetrics provide metrics collected about the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
type CloudletMetrics struct {
	// what goes here?
	Foo uint64 `protobuf:"varint,5,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *CloudletMetrics) Reset()                    { *m = CloudletMetrics{} }
func (m *CloudletMetrics) String() string            { return proto.CompactTextString(m) }
func (*CloudletMetrics) ProtoMessage()               {}
func (*CloudletMetrics) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{15} }

func init() {
	proto.RegisterType((*CloudletKey)(nil), "edgeproto.CloudletKey")
	proto.RegisterType((*OperationTimeLimits)(nil), "edgeproto.OperationTimeLimits")
	proto.RegisterType((*CloudletInfraCommon)(nil), "edgeproto.CloudletInfraCommon")
	proto.RegisterType((*AzureProperties)(nil), "edgeproto.AzureProperties")
	proto.RegisterType((*GcpProperties)(nil), "edgeproto.GcpProperties")
	proto.RegisterType((*OpenStackProperties)(nil), "edgeproto.OpenStackProperties")
	proto.RegisterType((*CloudletInfraProperties)(nil), "edgeproto.CloudletInfraProperties")
	proto.RegisterType((*PlatformConfig)(nil), "edgeproto.PlatformConfig")
	proto.RegisterType((*CloudletResMap)(nil), "edgeproto.CloudletResMap")
	proto.RegisterType((*Cloudlet)(nil), "edgeproto.Cloudlet")
	proto.RegisterType((*FlavorMatch)(nil), "edgeproto.FlavorMatch")
	proto.RegisterType((*FlavorInfo)(nil), "edgeproto.FlavorInfo")
	proto.RegisterType((*OSAZone)(nil), "edgeproto.OSAZone")
	proto.RegisterType((*OSImage)(nil), "edgeproto.OSImage")
	proto.RegisterType((*CloudletInfo)(nil), "edgeproto.CloudletInfo")
	proto.RegisterType((*CloudletMetrics)(nil), "edgeproto.CloudletMetrics")
	proto.RegisterEnum("edgeproto.PlatformType", PlatformType_name, PlatformType_value)
	proto.RegisterEnum("edgeproto.CloudletState", CloudletState_name, CloudletState_value)
}
func (this *CloudletKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletKey{")
	s = append(s, "OperatorKey: "+strings.Replace(this.OperatorKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudlet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletApi service

type CloudletApiClient interface {
	// Create a Cloudlet
	CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_CreateCloudletClient, error)
	// Delete a Cloudlet
	DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_DeleteCloudletClient, error)
	// Update a Cloudlet
	UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_UpdateCloudletClient, error)
	// Show Cloudlets
	ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error)
	// Add Optional Resource tag table
	AddCloudletResMapping(ctx context.Context, in *CloudletResMap, opts ...grpc.CallOption) (*Result, error)
	// Add Optional Resource tag table
	RemoveCloudletResMapping(ctx context.Context, in *CloudletResMap, opts ...grpc.CallOption) (*Result, error)
	// Discover if flavor produces a matching platform flavor
	FindFlavorMatch(ctx context.Context, in *FlavorMatch, opts ...grpc.CallOption) (*FlavorMatch, error)
}

type cloudletApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletApiClient(cc *grpc.ClientConn) CloudletApiClient {
	return &cloudletApiClient{cc}
}

func (c *cloudletApiClient) CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_CreateCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletApi/CreateCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiCreateCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_CreateCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiCreateCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiCreateCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_DeleteCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[1], c.cc, "/edgeproto.CloudletApi/DeleteCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiDeleteCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_DeleteCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiDeleteCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiDeleteCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_UpdateCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[2], c.cc, "/edgeproto.CloudletApi/UpdateCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiUpdateCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_UpdateCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiUpdateCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiUpdateCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[3], c.cc, "/edgeproto.CloudletApi/ShowCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiShowCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_ShowCloudletClient interface {
	Recv() (*Cloudlet, error)
	grpc.ClientStream
}

type cloudletApiShowCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiShowCloudletClient) Recv() (*Cloudlet, error) {
	m := new(Cloudlet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) AddCloudletResMapping(ctx context.Context, in *CloudletResMap, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletApi/AddCloudletResMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletApiClient) RemoveCloudletResMapping(ctx context.Context, in *CloudletResMap, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletApi/RemoveCloudletResMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletApiClient) FindFlavorMatch(ctx context.Context, in *FlavorMatch, opts ...grpc.CallOption) (*FlavorMatch, error) {
	out := new(FlavorMatch)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletApi/FindFlavorMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudletApi service

type CloudletApiServer interface {
	// Create a Cloudlet
	CreateCloudlet(*Cloudlet, CloudletApi_CreateCloudletServer) error
	// Delete a Cloudlet
	DeleteCloudlet(*Cloudlet, CloudletApi_DeleteCloudletServer) error
	// Update a Cloudlet
	UpdateCloudlet(*Cloudlet, CloudletApi_UpdateCloudletServer) error
	// Show Cloudlets
	ShowCloudlet(*Cloudlet, CloudletApi_ShowCloudletServer) error
	// Add Optional Resource tag table
	AddCloudletResMapping(context.Context, *CloudletResMap) (*Result, error)
	// Add Optional Resource tag table
	RemoveCloudletResMapping(context.Context, *CloudletResMap) (*Result, error)
	// Discover if flavor produces a matching platform flavor
	FindFlavorMatch(context.Context, *FlavorMatch) (*FlavorMatch, error)
}

func RegisterCloudletApiServer(s *grpc.Server, srv CloudletApiServer) {
	s.RegisterService(&_CloudletApi_serviceDesc, srv)
}

func _CloudletApi_CreateCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).CreateCloudlet(m, &cloudletApiCreateCloudletServer{stream})
}

type CloudletApi_CreateCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiCreateCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiCreateCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_DeleteCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).DeleteCloudlet(m, &cloudletApiDeleteCloudletServer{stream})
}

type CloudletApi_DeleteCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiDeleteCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiDeleteCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_UpdateCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).UpdateCloudlet(m, &cloudletApiUpdateCloudletServer{stream})
}

type CloudletApi_UpdateCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiUpdateCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiUpdateCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_ShowCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).ShowCloudlet(m, &cloudletApiShowCloudletServer{stream})
}

type CloudletApi_ShowCloudletServer interface {
	Send(*Cloudlet) error
	grpc.ServerStream
}

type cloudletApiShowCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiShowCloudletServer) Send(m *Cloudlet) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_AddCloudletResMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletResMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).AddCloudletResMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletApi/AddCloudletResMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).AddCloudletResMapping(ctx, req.(*CloudletResMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletApi_RemoveCloudletResMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletResMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).RemoveCloudletResMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletApi/RemoveCloudletResMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).RemoveCloudletResMapping(ctx, req.(*CloudletResMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletApi_FindFlavorMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlavorMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).FindFlavorMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletApi/FindFlavorMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).FindFlavorMatch(ctx, req.(*FlavorMatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletApi",
	HandlerType: (*CloudletApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCloudletResMapping",
			Handler:    _CloudletApi_AddCloudletResMapping_Handler,
		},
		{
			MethodName: "RemoveCloudletResMapping",
			Handler:    _CloudletApi_RemoveCloudletResMapping_Handler,
		},
		{
			MethodName: "FindFlavorMatch",
			Handler:    _CloudletApi_FindFlavorMatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCloudlet",
			Handler:       _CloudletApi_CreateCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteCloudlet",
			Handler:       _CloudletApi_DeleteCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateCloudlet",
			Handler:       _CloudletApi_UpdateCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCloudlet",
			Handler:       _CloudletApi_ShowCloudlet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

// Client API for CloudletInfoApi service

type CloudletInfoApiClient interface {
	// Show CloudletInfos
	ShowCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (CloudletInfoApi_ShowCloudletInfoClient, error)
	// Inject (create) a CloudletInfo for regression testing
	InjectCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error)
	// Evict (delete) a CloudletInfo for regression testing
	EvictCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error)
}

type cloudletInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletInfoApiClient(cc *grpc.ClientConn) CloudletInfoApiClient {
	return &cloudletInfoApiClient{cc}
}

func (c *cloudletInfoApiClient) ShowCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (CloudletInfoApi_ShowCloudletInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletInfoApi/ShowCloudletInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletInfoApiShowCloudletInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletInfoApi_ShowCloudletInfoClient interface {
	Recv() (*CloudletInfo, error)
	grpc.ClientStream
}

type cloudletInfoApiShowCloudletInfoClient struct {
	grpc.ClientStream
}

func (x *cloudletInfoApiShowCloudletInfoClient) Recv() (*CloudletInfo, error) {
	m := new(CloudletInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletInfoApiClient) InjectCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletInfoApi/InjectCloudletInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletInfoApiClient) EvictCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletInfoApi/EvictCloudletInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudletInfoApi service

type CloudletInfoApiServer interface {
	// Show CloudletInfos
	ShowCloudletInfo(*CloudletInfo, CloudletInfoApi_ShowCloudletInfoServer) error
	// Inject (create) a CloudletInfo for regression testing
	InjectCloudletInfo(context.Context, *CloudletInfo) (*Result, error)
	// Evict (delete) a CloudletInfo for regression testing
	EvictCloudletInfo(context.Context, *CloudletInfo) (*Result, error)
}

func RegisterCloudletInfoApiServer(s *grpc.Server, srv CloudletInfoApiServer) {
	s.RegisterService(&_CloudletInfoApi_serviceDesc, srv)
}

func _CloudletInfoApi_ShowCloudletInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletInfoApiServer).ShowCloudletInfo(m, &cloudletInfoApiShowCloudletInfoServer{stream})
}

type CloudletInfoApi_ShowCloudletInfoServer interface {
	Send(*CloudletInfo) error
	grpc.ServerStream
}

type cloudletInfoApiShowCloudletInfoServer struct {
	grpc.ServerStream
}

func (x *cloudletInfoApiShowCloudletInfoServer) Send(m *CloudletInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletInfoApi_InjectCloudletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletInfoApiServer).InjectCloudletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletInfoApi/InjectCloudletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletInfoApiServer).InjectCloudletInfo(ctx, req.(*CloudletInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletInfoApi_EvictCloudletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletInfoApiServer).EvictCloudletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletInfoApi/EvictCloudletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletInfoApiServer).EvictCloudletInfo(ctx, req.(*CloudletInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletInfoApi",
	HandlerType: (*CloudletInfoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectCloudletInfo",
			Handler:    _CloudletInfoApi_InjectCloudletInfo_Handler,
		},
		{
			MethodName: "EvictCloudletInfo",
			Handler:    _CloudletInfoApi_EvictCloudletInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletInfo",
			Handler:       _CloudletInfoApi_ShowCloudletInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

// Client API for CloudletMetricsApi service

type CloudletMetricsApiClient interface {
	// Show Cloudlet metrics
	ShowCloudletMetrics(ctx context.Context, in *CloudletMetrics, opts ...grpc.CallOption) (CloudletMetricsApi_ShowCloudletMetricsClient, error)
}

type cloudletMetricsApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletMetricsApiClient(cc *grpc.ClientConn) CloudletMetricsApiClient {
	return &cloudletMetricsApiClient{cc}
}

func (c *cloudletMetricsApiClient) ShowCloudletMetrics(ctx context.Context, in *CloudletMetrics, opts ...grpc.CallOption) (CloudletMetricsApi_ShowCloudletMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletMetricsApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletMetricsApi/ShowCloudletMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletMetricsApiShowCloudletMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletMetricsApi_ShowCloudletMetricsClient interface {
	Recv() (*CloudletMetrics, error)
	grpc.ClientStream
}

type cloudletMetricsApiShowCloudletMetricsClient struct {
	grpc.ClientStream
}

func (x *cloudletMetricsApiShowCloudletMetricsClient) Recv() (*CloudletMetrics, error) {
	m := new(CloudletMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletMetricsApi service

type CloudletMetricsApiServer interface {
	// Show Cloudlet metrics
	ShowCloudletMetrics(*CloudletMetrics, CloudletMetricsApi_ShowCloudletMetricsServer) error
}

func RegisterCloudletMetricsApiServer(s *grpc.Server, srv CloudletMetricsApiServer) {
	s.RegisterService(&_CloudletMetricsApi_serviceDesc, srv)
}

func _CloudletMetricsApi_ShowCloudletMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletMetrics)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletMetricsApiServer).ShowCloudletMetrics(m, &cloudletMetricsApiShowCloudletMetricsServer{stream})
}

type CloudletMetricsApi_ShowCloudletMetricsServer interface {
	Send(*CloudletMetrics) error
	grpc.ServerStream
}

type cloudletMetricsApiShowCloudletMetricsServer struct {
	grpc.ServerStream
}

func (x *cloudletMetricsApiShowCloudletMetricsServer) Send(m *CloudletMetrics) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletMetricsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletMetricsApi",
	HandlerType: (*CloudletMetricsApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletMetrics",
			Handler:       _CloudletMetricsApi_ShowCloudletMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

func (m *CloudletKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.OperatorKey.Size()))
	n1, err := m.OperatorKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *OperationTimeLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationTimeLimits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreateClusterInstTimeout != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.CreateClusterInstTimeout))
	}
	if m.UpdateClusterInstTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.UpdateClusterInstTimeout))
	}
	if m.DeleteClusterInstTimeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.DeleteClusterInstTimeout))
	}
	if m.CreateAppInstTimeout != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.CreateAppInstTimeout))
	}
	if m.UpdateAppInstTimeout != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.UpdateAppInstTimeout))
	}
	if m.DeleteAppInstTimeout != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.DeleteAppInstTimeout))
	}
	return i, nil
}

func (m *CloudletInfraCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletInfraCommon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DockerRegistry) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.DockerRegistry)))
		i += copy(dAtA[i:], m.DockerRegistry)
	}
	if len(m.DnsZone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.DnsZone)))
		i += copy(dAtA[i:], m.DnsZone)
	}
	if len(m.RegistryFileServer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.RegistryFileServer)))
		i += copy(dAtA[i:], m.RegistryFileServer)
	}
	if len(m.CfKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.CfKey)))
		i += copy(dAtA[i:], m.CfKey)
	}
	if len(m.CfUser) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.CfUser)))
		i += copy(dAtA[i:], m.CfUser)
	}
	if len(m.DockerRegPass) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.DockerRegPass)))
		i += copy(dAtA[i:], m.DockerRegPass)
	}
	if len(m.NetworkScheme) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.NetworkScheme)))
		i += copy(dAtA[i:], m.NetworkScheme)
	}
	if len(m.DockerRegistrySecret) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.DockerRegistrySecret)))
		i += copy(dAtA[i:], m.DockerRegistrySecret)
	}
	return i, nil
}

func (m *AzureProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Location) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *GcpProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GcpProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Project) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Project)))
		i += copy(dAtA[i:], m.Project)
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	if len(m.ServiceAccount) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.ServiceAccount)))
		i += copy(dAtA[i:], m.ServiceAccount)
	}
	if len(m.GcpAuthKeyUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.GcpAuthKeyUrl)))
		i += copy(dAtA[i:], m.GcpAuthKeyUrl)
	}
	return i, nil
}

func (m *OpenStackProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenStackProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OsExternalNetworkName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.OsExternalNetworkName)))
		i += copy(dAtA[i:], m.OsExternalNetworkName)
	}
	if len(m.OsImageName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.OsImageName)))
		i += copy(dAtA[i:], m.OsImageName)
	}
	if len(m.OsExternalRouterName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.OsExternalRouterName)))
		i += copy(dAtA[i:], m.OsExternalRouterName)
	}
	if len(m.OsMexNetwork) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.OsMexNetwork)))
		i += copy(dAtA[i:], m.OsMexNetwork)
	}
	if len(m.OpenRcVars) > 0 {
		for k, _ := range m.OpenRcVars {
			dAtA[i] = 0x2a
			i++
			v := m.OpenRcVars[k]
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *CloudletInfraProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletInfraProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CloudletKind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.CloudletKind)))
		i += copy(dAtA[i:], m.CloudletKind)
	}
	if len(m.MexosContainerImageName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.MexosContainerImageName)))
		i += copy(dAtA[i:], m.MexosContainerImageName)
	}
	if m.OpenstackProperties != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OpenstackProperties.Size()))
		n2, err := m.OpenstackProperties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AzureProperties != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.AzureProperties.Size()))
		n3, err := m.AzureProperties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GcpProperties != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.GcpProperties.Size()))
		n4, err := m.GcpProperties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PlatformConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegistryPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.RegistryPath)))
		i += copy(dAtA[i:], m.RegistryPath)
	}
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if len(m.NotifyCtrlAddrs) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.NotifyCtrlAddrs)))
		i += copy(dAtA[i:], m.NotifyCtrlAddrs)
	}
	if len(m.VaultAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.VaultAddr)))
		i += copy(dAtA[i:], m.VaultAddr)
	}
	if len(m.TlsCertFile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.TlsCertFile)))
		i += copy(dAtA[i:], m.TlsCertFile)
	}
	if len(m.EnvVar) > 0 {
		for k, _ := range m.EnvVar {
			dAtA[i] = 0x32
			i++
			v := m.EnvVar[k]
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.PlatformTag) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.PlatformTag)))
		i += copy(dAtA[i:], m.PlatformTag)
	}
	if m.TestMode {
		dAtA[i] = 0x48
		i++
		if m.TestMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Span) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Span)))
		i += copy(dAtA[i:], m.Span)
	}
	if m.CleanupMode {
		dAtA[i] = 0x58
		i++
		if m.CleanupMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	return i, nil
}

func (m *CloudletResMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletResMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n5, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Mapping) > 0 {
		for k, _ := range m.Mapping {
			dAtA[i] = 0x12
			i++
			v := m.Mapping[k]
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Cloudlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cloudlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n6, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Location.Size()))
	n7, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.IpSupport != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.IpSupport))
	}
	if len(m.StaticIps) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.StaticIps)))
		i += copy(dAtA[i:], m.StaticIps)
	}
	if m.NumDynamicIps != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.NumDynamicIps))
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.TimeLimits.Size()))
	n8, err := m.TimeLimits.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.State != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.State))
	}
	if m.CrmOverride != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.CrmOverride))
	}
	if m.DeploymentLocal {
		dAtA[i] = 0x70
		i++
		if m.DeploymentLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PlatformType != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.PlatformType))
	}
	if len(m.NotifySrvAddr) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.NotifySrvAddr)))
		i += copy(dAtA[i:], m.NotifySrvAddr)
	}
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Flavor.Size()))
	n10, err := m.Flavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.PhysicalName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.PhysicalName)))
		i += copy(dAtA[i:], m.PhysicalName)
	}
	if len(m.EnvVar) > 0 {
		for k, _ := range m.EnvVar {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			v := m.EnvVar[k]
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Config.Size()))
	n11, err := m.Config.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.ResTagMap) > 0 {
		for k, _ := range m.ResTagMap {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.ResTagMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCloudlet(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + msgSize
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCloudlet(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	if len(m.AccessVars) > 0 {
		for k, _ := range m.AccessVars {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			v := m.AccessVars[k]
			mapSize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			i = encodeVarintCloudlet(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *FlavorMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlavorMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n13, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.FlavorName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.FlavorName)))
		i += copy(dAtA[i:], m.FlavorName)
	}
	if len(m.AvailabilityZone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.AvailabilityZone)))
		i += copy(dAtA[i:], m.AvailabilityZone)
	}
	return i, nil
}

func (m *FlavorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlavorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Vcpus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.Vcpus))
	}
	if m.Ram != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.Ram))
	}
	if m.Disk != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.Disk))
	}
	if len(m.Properties) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Properties)))
		i += copy(dAtA[i:], m.Properties)
	}
	return i, nil
}

func (m *OSAZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSAZone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *OSImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSImage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if len(m.Properties) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Properties)))
		i += copy(dAtA[i:], m.Properties)
	}
	if len(m.DiskFormat) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.DiskFormat)))
		i += copy(dAtA[i:], m.DiskFormat)
	}
	return i, nil
}

func (m *CloudletInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n14, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.State))
	}
	if m.NotifyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.Controller) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Controller)))
		i += copy(dAtA[i:], m.Controller)
	}
	if m.OsMaxRam != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxRam))
	}
	if m.OsMaxVcores != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxVcores))
	}
	if m.OsMaxVolGb != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxVolGb))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Flavors) > 0 {
		for _, msg := range m.Flavors {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Status.Size()))
	n15, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Version) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.AvailabilityZones) > 0 {
		for _, msg := range m.AvailabilityZones {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OsImages) > 0 {
		for _, msg := range m.OsImages {
			dAtA[i] = 0x72
			i++
			i = encodeVarintCloudlet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CloudletMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletMetrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.Foo))
	}
	return i, nil
}

func encodeVarintCloudlet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletKey) Matches(o *CloudletKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.OperatorKey.Matches(&o.OperatorKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *CloudletKey) CopyInFields(src *CloudletKey) int {
	changed := 0
	if m.OperatorKey.Name != src.OperatorKey.Name {
		m.OperatorKey.Name = src.OperatorKey.Name
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *CloudletKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletKey key string", "obj", m)
	}
	return string(key)
}

func CloudletKeyStringParse(str string, key *CloudletKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletKey key string", "str", str)
	}
}

func (m *CloudletKey) NotFoundError() error {
	return fmt.Errorf("Cloudlet key %s not found", m.GetKeyString())
}

func (m *CloudletKey) ExistsError() error {
	return fmt.Errorf("Cloudlet key %s already exists", m.GetKeyString())
}

// Helper method to check that enums have valid values
func (m *CloudletKey) ValidateEnums() error {
	if err := m.OperatorKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *OperationTimeLimits) CopyInFields(src *OperationTimeLimits) int {
	changed := 0
	if m.CreateClusterInstTimeout != src.CreateClusterInstTimeout {
		m.CreateClusterInstTimeout = src.CreateClusterInstTimeout
		changed++
	}
	if m.UpdateClusterInstTimeout != src.UpdateClusterInstTimeout {
		m.UpdateClusterInstTimeout = src.UpdateClusterInstTimeout
		changed++
	}
	if m.DeleteClusterInstTimeout != src.DeleteClusterInstTimeout {
		m.DeleteClusterInstTimeout = src.DeleteClusterInstTimeout
		changed++
	}
	if m.CreateAppInstTimeout != src.CreateAppInstTimeout {
		m.CreateAppInstTimeout = src.CreateAppInstTimeout
		changed++
	}
	if m.UpdateAppInstTimeout != src.UpdateAppInstTimeout {
		m.UpdateAppInstTimeout = src.UpdateAppInstTimeout
		changed++
	}
	if m.DeleteAppInstTimeout != src.DeleteAppInstTimeout {
		m.DeleteAppInstTimeout = src.DeleteAppInstTimeout
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *OperationTimeLimits) ValidateEnums() error {
	return nil
}

func (m *CloudletInfraCommon) CopyInFields(src *CloudletInfraCommon) int {
	changed := 0
	if m.DockerRegistry != src.DockerRegistry {
		m.DockerRegistry = src.DockerRegistry
		changed++
	}
	if m.DnsZone != src.DnsZone {
		m.DnsZone = src.DnsZone
		changed++
	}
	if m.RegistryFileServer != src.RegistryFileServer {
		m.RegistryFileServer = src.RegistryFileServer
		changed++
	}
	if m.CfKey != src.CfKey {
		m.CfKey = src.CfKey
		changed++
	}
	if m.CfUser != src.CfUser {
		m.CfUser = src.CfUser
		changed++
	}
	if m.DockerRegPass != src.DockerRegPass {
		m.DockerRegPass = src.DockerRegPass
		changed++
	}
	if m.NetworkScheme != src.NetworkScheme {
		m.NetworkScheme = src.NetworkScheme
		changed++
	}
	if m.DockerRegistrySecret != src.DockerRegistrySecret {
		m.DockerRegistrySecret = src.DockerRegistrySecret
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *CloudletInfraCommon) ValidateEnums() error {
	return nil
}

func (m *AzureProperties) CopyInFields(src *AzureProperties) int {
	changed := 0
	if m.Location != src.Location {
		m.Location = src.Location
		changed++
	}
	if m.ResourceGroup != src.ResourceGroup {
		m.ResourceGroup = src.ResourceGroup
		changed++
	}
	if m.UserName != src.UserName {
		m.UserName = src.UserName
		changed++
	}
	if m.Password != src.Password {
		m.Password = src.Password
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *AzureProperties) ValidateEnums() error {
	return nil
}

func (m *GcpProperties) CopyInFields(src *GcpProperties) int {
	changed := 0
	if m.Project != src.Project {
		m.Project = src.Project
		changed++
	}
	if m.Zone != src.Zone {
		m.Zone = src.Zone
		changed++
	}
	if m.ServiceAccount != src.ServiceAccount {
		m.ServiceAccount = src.ServiceAccount
		changed++
	}
	if m.GcpAuthKeyUrl != src.GcpAuthKeyUrl {
		m.GcpAuthKeyUrl = src.GcpAuthKeyUrl
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *GcpProperties) ValidateEnums() error {
	return nil
}

func (m *OpenStackProperties) CopyInFields(src *OpenStackProperties) int {
	changed := 0
	if m.OsExternalNetworkName != src.OsExternalNetworkName {
		m.OsExternalNetworkName = src.OsExternalNetworkName
		changed++
	}
	if m.OsImageName != src.OsImageName {
		m.OsImageName = src.OsImageName
		changed++
	}
	if m.OsExternalRouterName != src.OsExternalRouterName {
		m.OsExternalRouterName = src.OsExternalRouterName
		changed++
	}
	if m.OsMexNetwork != src.OsMexNetwork {
		m.OsMexNetwork = src.OsMexNetwork
		changed++
	}
	if src.OpenRcVars != nil {
		m.OpenRcVars = make(map[string]string)
		for k0, _ := range src.OpenRcVars {
			m.OpenRcVars[k0] = src.OpenRcVars[k0]
		}
	} else if m.OpenRcVars != nil {
		m.OpenRcVars = nil
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *OpenStackProperties) ValidateEnums() error {
	return nil
}

func (m *CloudletInfraProperties) CopyInFields(src *CloudletInfraProperties) int {
	changed := 0
	if m.CloudletKind != src.CloudletKind {
		m.CloudletKind = src.CloudletKind
		changed++
	}
	if m.MexosContainerImageName != src.MexosContainerImageName {
		m.MexosContainerImageName = src.MexosContainerImageName
		changed++
	}
	if src.OpenstackProperties != nil {
		m.OpenstackProperties = &OpenStackProperties{}
		if m.OpenstackProperties.OsExternalNetworkName != src.OpenstackProperties.OsExternalNetworkName {
			m.OpenstackProperties.OsExternalNetworkName = src.OpenstackProperties.OsExternalNetworkName
			changed++
		}
		if m.OpenstackProperties.OsImageName != src.OpenstackProperties.OsImageName {
			m.OpenstackProperties.OsImageName = src.OpenstackProperties.OsImageName
			changed++
		}
		if m.OpenstackProperties.OsExternalRouterName != src.OpenstackProperties.OsExternalRouterName {
			m.OpenstackProperties.OsExternalRouterName = src.OpenstackProperties.OsExternalRouterName
			changed++
		}
		if m.OpenstackProperties.OsMexNetwork != src.OpenstackProperties.OsMexNetwork {
			m.OpenstackProperties.OsMexNetwork = src.OpenstackProperties.OsMexNetwork
			changed++
		}
		if src.OpenstackProperties.OpenRcVars != nil {
			m.OpenstackProperties.OpenRcVars = make(map[string]string)
			for k1, _ := range src.OpenstackProperties.OpenRcVars {
				m.OpenstackProperties.OpenRcVars[k1] = src.OpenstackProperties.OpenRcVars[k1]
			}
		} else if m.OpenstackProperties.OpenRcVars != nil {
			m.OpenstackProperties.OpenRcVars = nil
			changed++
		}
	} else if m.OpenstackProperties != nil {
		m.OpenstackProperties = nil
		changed++
	}
	if src.AzureProperties != nil {
		m.AzureProperties = &AzureProperties{}
		if m.AzureProperties.Location != src.AzureProperties.Location {
			m.AzureProperties.Location = src.AzureProperties.Location
			changed++
		}
		if m.AzureProperties.ResourceGroup != src.AzureProperties.ResourceGroup {
			m.AzureProperties.ResourceGroup = src.AzureProperties.ResourceGroup
			changed++
		}
		if m.AzureProperties.UserName != src.AzureProperties.UserName {
			m.AzureProperties.UserName = src.AzureProperties.UserName
			changed++
		}
		if m.AzureProperties.Password != src.AzureProperties.Password {
			m.AzureProperties.Password = src.AzureProperties.Password
			changed++
		}
	} else if m.AzureProperties != nil {
		m.AzureProperties = nil
		changed++
	}
	if src.GcpProperties != nil {
		m.GcpProperties = &GcpProperties{}
		if m.GcpProperties.Project != src.GcpProperties.Project {
			m.GcpProperties.Project = src.GcpProperties.Project
			changed++
		}
		if m.GcpProperties.Zone != src.GcpProperties.Zone {
			m.GcpProperties.Zone = src.GcpProperties.Zone
			changed++
		}
		if m.GcpProperties.ServiceAccount != src.GcpProperties.ServiceAccount {
			m.GcpProperties.ServiceAccount = src.GcpProperties.ServiceAccount
			changed++
		}
		if m.GcpProperties.GcpAuthKeyUrl != src.GcpProperties.GcpAuthKeyUrl {
			m.GcpProperties.GcpAuthKeyUrl = src.GcpProperties.GcpAuthKeyUrl
			changed++
		}
	} else if m.GcpProperties != nil {
		m.GcpProperties = nil
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *CloudletInfraProperties) ValidateEnums() error {
	if err := m.OpenstackProperties.ValidateEnums(); err != nil {
		return err
	}
	if err := m.AzureProperties.ValidateEnums(); err != nil {
		return err
	}
	if err := m.GcpProperties.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *PlatformConfig) CopyInFields(src *PlatformConfig) int {
	changed := 0
	if m.RegistryPath != src.RegistryPath {
		m.RegistryPath = src.RegistryPath
		changed++
	}
	if m.ImagePath != src.ImagePath {
		m.ImagePath = src.ImagePath
		changed++
	}
	if m.NotifyCtrlAddrs != src.NotifyCtrlAddrs {
		m.NotifyCtrlAddrs = src.NotifyCtrlAddrs
		changed++
	}
	if m.VaultAddr != src.VaultAddr {
		m.VaultAddr = src.VaultAddr
		changed++
	}
	if m.TlsCertFile != src.TlsCertFile {
		m.TlsCertFile = src.TlsCertFile
		changed++
	}
	if src.EnvVar != nil {
		m.EnvVar = make(map[string]string)
		for k0, _ := range src.EnvVar {
			m.EnvVar[k0] = src.EnvVar[k0]
		}
	} else if m.EnvVar != nil {
		m.EnvVar = nil
		changed++
	}
	if m.PlatformTag != src.PlatformTag {
		m.PlatformTag = src.PlatformTag
		changed++
	}
	if m.TestMode != src.TestMode {
		m.TestMode = src.TestMode
		changed++
	}
	if m.Span != src.Span {
		m.Span = src.Span
		changed++
	}
	if m.CleanupMode != src.CleanupMode {
		m.CleanupMode = src.CleanupMode
		changed++
	}
	if m.Region != src.Region {
		m.Region = src.Region
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *PlatformConfig) ValidateEnums() error {
	return nil
}

func (m *CloudletResMap) CopyInFields(src *CloudletResMap) int {
	changed := 0
	if m.Key.OperatorKey.Name != src.Key.OperatorKey.Name {
		m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if src.Mapping != nil {
		m.Mapping = make(map[string]string)
		for k0, _ := range src.Mapping {
			m.Mapping[k0] = src.Mapping[k0]
		}
	} else if m.Mapping != nil {
		m.Mapping = nil
		changed++
	}
	return changed
}

func (m *CloudletResMap) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletResMap) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletResMap) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletResMap) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletResMap(a CloudletResMap, b CloudletResMap) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *CloudletResMap) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *Cloudlet) Matches(o *Cloudlet, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.IpSupport != 0 {
		if o.IpSupport != m.IpSupport {
			return false
		}
	}
	if !opts.Filter || o.StaticIps != "" {
		if o.StaticIps != m.StaticIps {
			return false
		}
	}
	if !opts.Filter || o.NumDynamicIps != 0 {
		if o.NumDynamicIps != m.NumDynamicIps {
			return false
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Errors != nil {
			if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
				return false
			} else if m.Errors != nil && o.Errors != nil {
				if len(m.Errors) != len(o.Errors) {
					return false
				}
				for i := 0; i < len(m.Errors); i++ {
					if o.Errors[i] != m.Errors[i] {
						return false
					}
				}
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.State != 0 {
			if o.State != m.State {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.CrmOverride != 0 {
			if o.CrmOverride != m.CrmOverride {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.DeploymentLocal != false {
			if o.DeploymentLocal != m.DeploymentLocal {
				return false
			}
		}
	}
	if !opts.Filter || o.PlatformType != 0 {
		if o.PlatformType != m.PlatformType {
			return false
		}
	}
	if !opts.Filter || o.NotifySrvAddr != "" {
		if o.NotifySrvAddr != m.NotifySrvAddr {
			return false
		}
	}
	if !m.Flavor.Matches(&o.Flavor, fopts...) {
		return false
	}
	if !opts.Filter || o.PhysicalName != "" {
		if o.PhysicalName != m.PhysicalName {
			return false
		}
	}
	if !opts.Filter || o.EnvVar != nil {
		if m.EnvVar == nil && o.EnvVar != nil || m.EnvVar != nil && o.EnvVar == nil {
			return false
		} else if m.EnvVar != nil && o.EnvVar != nil {
			if len(m.EnvVar) != len(o.EnvVar) {
				return false
			}
			for k, _ := range m.EnvVar {
				_, ok := o.EnvVar[k]
				if !ok {
					return false
				}
				if o.EnvVar[k] != m.EnvVar[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Version != "" {
		if o.Version != m.Version {
			return false
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ResTagMap != nil {
			if m.ResTagMap == nil && o.ResTagMap != nil || m.ResTagMap != nil && o.ResTagMap == nil {
				return false
			} else if m.ResTagMap != nil && o.ResTagMap != nil {
				if len(m.ResTagMap) != len(o.ResTagMap) {
					return false
				}
				for k, _ := range m.ResTagMap {
					_, ok := o.ResTagMap[k]
					if !ok {
						return false
					}
					if !m.ResTagMap[k].Matches(o.ResTagMap[k], fopts...) {
						return false
					}
				}
			}
		}
	}
	if !opts.Filter || o.AccessVars != nil {
		if m.AccessVars == nil && o.AccessVars != nil || m.AccessVars != nil && o.AccessVars == nil {
			return false
		} else if m.AccessVars != nil && o.AccessVars != nil {
			if len(m.AccessVars) != len(o.AccessVars) {
				return false
			}
			for k, _ := range m.AccessVars {
				_, ok := o.AccessVars[k]
				if !ok {
					return false
				}
				if o.AccessVars[k] != m.AccessVars[k] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletFieldKey = "2"
const CloudletFieldKeyOperatorKey = "2.1"
const CloudletFieldKeyOperatorKeyName = "2.1.1"
const CloudletFieldKeyName = "2.2"
const CloudletFieldLocation = "5"
const CloudletFieldLocationLatitude = "5.1"
const CloudletFieldLocationLongitude = "5.2"
const CloudletFieldLocationHorizontalAccuracy = "5.3"
const CloudletFieldLocationVerticalAccuracy = "5.4"
const CloudletFieldLocationAltitude = "5.5"
const CloudletFieldLocationCourse = "5.6"
const CloudletFieldLocationSpeed = "5.7"
const CloudletFieldLocationTimestamp = "5.8"
const CloudletFieldLocationTimestampSeconds = "5.8.1"
const CloudletFieldLocationTimestampNanos = "5.8.2"
const CloudletFieldIpSupport = "6"
const CloudletFieldStaticIps = "7"
const CloudletFieldNumDynamicIps = "8"
const CloudletFieldTimeLimits = "9"
const CloudletFieldTimeLimitsCreateClusterInstTimeout = "9.1"
const CloudletFieldTimeLimitsUpdateClusterInstTimeout = "9.2"
const CloudletFieldTimeLimitsDeleteClusterInstTimeout = "9.3"
const CloudletFieldTimeLimitsCreateAppInstTimeout = "9.4"
const CloudletFieldTimeLimitsUpdateAppInstTimeout = "9.5"
const CloudletFieldTimeLimitsDeleteAppInstTimeout = "9.6"
const CloudletFieldErrors = "10"
const CloudletFieldStatus = "11"
const CloudletFieldStatusTaskNumber = "11.1"
const CloudletFieldStatusMaxTasks = "11.2"
const CloudletFieldStatusTaskName = "11.3"
const CloudletFieldStatusStepName = "11.4"
const CloudletFieldState = "12"
const CloudletFieldCrmOverride = "13"
const CloudletFieldDeploymentLocal = "14"
const CloudletFieldPlatformType = "15"
const CloudletFieldNotifySrvAddr = "16"
const CloudletFieldFlavor = "17"
const CloudletFieldFlavorName = "17.1"
const CloudletFieldPhysicalName = "18"
const CloudletFieldEnvVar = "19"
const CloudletFieldEnvVarKey = "19.1"
const CloudletFieldEnvVarValue = "19.2"
const CloudletFieldVersion = "20"
const CloudletFieldConfig = "21"
const CloudletFieldConfigRegistryPath = "21.1"
const CloudletFieldConfigImagePath = "21.2"
const CloudletFieldConfigNotifyCtrlAddrs = "21.3"
const CloudletFieldConfigVaultAddr = "21.4"
const CloudletFieldConfigTlsCertFile = "21.5"
const CloudletFieldConfigEnvVar = "21.6"
const CloudletFieldConfigEnvVarKey = "21.6.1"
const CloudletFieldConfigEnvVarValue = "21.6.2"
const CloudletFieldConfigPlatformTag = "21.8"
const CloudletFieldConfigTestMode = "21.9"
const CloudletFieldConfigSpan = "21.10"
const CloudletFieldConfigCleanupMode = "21.11"
const CloudletFieldConfigRegion = "21.12"
const CloudletFieldResTagMap = "22"
const CloudletFieldResTagMapKey = "22.1"
const CloudletFieldResTagMapValue = "22.2"
const CloudletFieldResTagMapValueName = "22.2.1"
const CloudletFieldResTagMapValueOperatorKey = "22.2.2"
const CloudletFieldResTagMapValueOperatorKeyName = "22.2.2.1"
const CloudletFieldAccessVars = "23"
const CloudletFieldAccessVarsKey = "23.1"
const CloudletFieldAccessVarsValue = "23.2"

var CloudletAllFields = []string{
	CloudletFieldKeyOperatorKeyName,
	CloudletFieldKeyName,
	CloudletFieldLocationLatitude,
	CloudletFieldLocationLongitude,
	CloudletFieldLocationHorizontalAccuracy,
	CloudletFieldLocationVerticalAccuracy,
	CloudletFieldLocationAltitude,
	CloudletFieldLocationCourse,
	CloudletFieldLocationSpeed,
	CloudletFieldLocationTimestampSeconds,
	CloudletFieldLocationTimestampNanos,
	CloudletFieldIpSupport,
	CloudletFieldStaticIps,
	CloudletFieldNumDynamicIps,
	CloudletFieldTimeLimitsCreateClusterInstTimeout,
	CloudletFieldTimeLimitsUpdateClusterInstTimeout,
	CloudletFieldTimeLimitsDeleteClusterInstTimeout,
	CloudletFieldTimeLimitsCreateAppInstTimeout,
	CloudletFieldTimeLimitsUpdateAppInstTimeout,
	CloudletFieldTimeLimitsDeleteAppInstTimeout,
	CloudletFieldErrors,
	CloudletFieldStatusTaskNumber,
	CloudletFieldStatusMaxTasks,
	CloudletFieldStatusTaskName,
	CloudletFieldStatusStepName,
	CloudletFieldState,
	CloudletFieldCrmOverride,
	CloudletFieldDeploymentLocal,
	CloudletFieldPlatformType,
	CloudletFieldNotifySrvAddr,
	CloudletFieldFlavorName,
	CloudletFieldPhysicalName,
	CloudletFieldEnvVarKey,
	CloudletFieldEnvVarValue,
	CloudletFieldVersion,
	CloudletFieldConfigRegistryPath,
	CloudletFieldConfigImagePath,
	CloudletFieldConfigNotifyCtrlAddrs,
	CloudletFieldConfigVaultAddr,
	CloudletFieldConfigTlsCertFile,
	CloudletFieldConfigEnvVarKey,
	CloudletFieldConfigEnvVarValue,
	CloudletFieldConfigPlatformTag,
	CloudletFieldConfigTestMode,
	CloudletFieldConfigSpan,
	CloudletFieldConfigCleanupMode,
	CloudletFieldConfigRegion,
	CloudletFieldResTagMapKey,
	CloudletFieldResTagMapValueName,
	CloudletFieldResTagMapValueOperatorKeyName,
	CloudletFieldAccessVarsKey,
	CloudletFieldAccessVarsValue,
}

var CloudletAllFieldsMap = map[string]struct{}{
	CloudletFieldKeyOperatorKeyName:                 struct{}{},
	CloudletFieldKeyName:                            struct{}{},
	CloudletFieldLocationLatitude:                   struct{}{},
	CloudletFieldLocationLongitude:                  struct{}{},
	CloudletFieldLocationHorizontalAccuracy:         struct{}{},
	CloudletFieldLocationVerticalAccuracy:           struct{}{},
	CloudletFieldLocationAltitude:                   struct{}{},
	CloudletFieldLocationCourse:                     struct{}{},
	CloudletFieldLocationSpeed:                      struct{}{},
	CloudletFieldLocationTimestampSeconds:           struct{}{},
	CloudletFieldLocationTimestampNanos:             struct{}{},
	CloudletFieldIpSupport:                          struct{}{},
	CloudletFieldStaticIps:                          struct{}{},
	CloudletFieldNumDynamicIps:                      struct{}{},
	CloudletFieldTimeLimitsCreateClusterInstTimeout: struct{}{},
	CloudletFieldTimeLimitsUpdateClusterInstTimeout: struct{}{},
	CloudletFieldTimeLimitsDeleteClusterInstTimeout: struct{}{},
	CloudletFieldTimeLimitsCreateAppInstTimeout:     struct{}{},
	CloudletFieldTimeLimitsUpdateAppInstTimeout:     struct{}{},
	CloudletFieldTimeLimitsDeleteAppInstTimeout:     struct{}{},
	CloudletFieldErrors:                             struct{}{},
	CloudletFieldStatusTaskNumber:                   struct{}{},
	CloudletFieldStatusMaxTasks:                     struct{}{},
	CloudletFieldStatusTaskName:                     struct{}{},
	CloudletFieldStatusStepName:                     struct{}{},
	CloudletFieldState:                              struct{}{},
	CloudletFieldCrmOverride:                        struct{}{},
	CloudletFieldDeploymentLocal:                    struct{}{},
	CloudletFieldPlatformType:                       struct{}{},
	CloudletFieldNotifySrvAddr:                      struct{}{},
	CloudletFieldFlavorName:                         struct{}{},
	CloudletFieldPhysicalName:                       struct{}{},
	CloudletFieldEnvVarKey:                          struct{}{},
	CloudletFieldEnvVarValue:                        struct{}{},
	CloudletFieldVersion:                            struct{}{},
	CloudletFieldConfigRegistryPath:                 struct{}{},
	CloudletFieldConfigImagePath:                    struct{}{},
	CloudletFieldConfigNotifyCtrlAddrs:              struct{}{},
	CloudletFieldConfigVaultAddr:                    struct{}{},
	CloudletFieldConfigTlsCertFile:                  struct{}{},
	CloudletFieldConfigEnvVarKey:                    struct{}{},
	CloudletFieldConfigEnvVarValue:                  struct{}{},
	CloudletFieldConfigPlatformTag:                  struct{}{},
	CloudletFieldConfigTestMode:                     struct{}{},
	CloudletFieldConfigSpan:                         struct{}{},
	CloudletFieldConfigCleanupMode:                  struct{}{},
	CloudletFieldConfigRegion:                       struct{}{},
	CloudletFieldResTagMapKey:                       struct{}{},
	CloudletFieldResTagMapValueName:                 struct{}{},
	CloudletFieldResTagMapValueOperatorKeyName:      struct{}{},
	CloudletFieldAccessVarsKey:                      struct{}{},
	CloudletFieldAccessVarsValue:                    struct{}{},
}

var CloudletAllFieldsStringMap = map[string]string{
	CloudletFieldKeyOperatorKeyName:                 "Cloudlet Field Key Operator Key Name",
	CloudletFieldKeyName:                            "Cloudlet Field Key Name",
	CloudletFieldLocationLatitude:                   "Cloudlet Field Location Latitude",
	CloudletFieldLocationLongitude:                  "Cloudlet Field Location Longitude",
	CloudletFieldLocationHorizontalAccuracy:         "Cloudlet Field Location Horizontal Accuracy",
	CloudletFieldLocationVerticalAccuracy:           "Cloudlet Field Location Vertical Accuracy",
	CloudletFieldLocationAltitude:                   "Cloudlet Field Location Altitude",
	CloudletFieldLocationCourse:                     "Cloudlet Field Location Course",
	CloudletFieldLocationSpeed:                      "Cloudlet Field Location Speed",
	CloudletFieldLocationTimestampSeconds:           "Cloudlet Field Location Timestamp Seconds",
	CloudletFieldLocationTimestampNanos:             "Cloudlet Field Location Timestamp Nanos",
	CloudletFieldIpSupport:                          "Cloudlet Field Ip Support",
	CloudletFieldStaticIps:                          "Cloudlet Field Static Ips",
	CloudletFieldNumDynamicIps:                      "Cloudlet Field Num Dynamic Ips",
	CloudletFieldTimeLimitsCreateClusterInstTimeout: "Cloudlet Field Time Limits Create Cluster Inst Timeout",
	CloudletFieldTimeLimitsUpdateClusterInstTimeout: "Cloudlet Field Time Limits Update Cluster Inst Timeout",
	CloudletFieldTimeLimitsDeleteClusterInstTimeout: "Cloudlet Field Time Limits Delete Cluster Inst Timeout",
	CloudletFieldTimeLimitsCreateAppInstTimeout:     "Cloudlet Field Time Limits Create App Inst Timeout",
	CloudletFieldTimeLimitsUpdateAppInstTimeout:     "Cloudlet Field Time Limits Update App Inst Timeout",
	CloudletFieldTimeLimitsDeleteAppInstTimeout:     "Cloudlet Field Time Limits Delete App Inst Timeout",
	CloudletFieldErrors:                             "Cloudlet Field Errors",
	CloudletFieldStatusTaskNumber:                   "Cloudlet Field Status Task Number",
	CloudletFieldStatusMaxTasks:                     "Cloudlet Field Status Max Tasks",
	CloudletFieldStatusTaskName:                     "Cloudlet Field Status Task Name",
	CloudletFieldStatusStepName:                     "Cloudlet Field Status Step Name",
	CloudletFieldState:                              "Cloudlet Field State",
	CloudletFieldCrmOverride:                        "Cloudlet Field Crm Override",
	CloudletFieldDeploymentLocal:                    "Cloudlet Field Deployment Local",
	CloudletFieldPlatformType:                       "Cloudlet Field Platform Type",
	CloudletFieldNotifySrvAddr:                      "Cloudlet Field Notify Srv Addr",
	CloudletFieldFlavorName:                         "Cloudlet Field Flavor Name",
	CloudletFieldPhysicalName:                       "Cloudlet Field Physical Name",
	CloudletFieldEnvVarKey:                          "Cloudlet Field Env Var Key",
	CloudletFieldEnvVarValue:                        "Cloudlet Field Env Var Value",
	CloudletFieldVersion:                            "Cloudlet Field Version",
	CloudletFieldConfigRegistryPath:                 "Cloudlet Field Config Registry Path",
	CloudletFieldConfigImagePath:                    "Cloudlet Field Config Image Path",
	CloudletFieldConfigNotifyCtrlAddrs:              "Cloudlet Field Config Notify Ctrl Addrs",
	CloudletFieldConfigVaultAddr:                    "Cloudlet Field Config Vault Addr",
	CloudletFieldConfigTlsCertFile:                  "Cloudlet Field Config Tls Cert File",
	CloudletFieldConfigEnvVarKey:                    "Cloudlet Field Config Env Var Key",
	CloudletFieldConfigEnvVarValue:                  "Cloudlet Field Config Env Var Value",
	CloudletFieldConfigPlatformTag:                  "Cloudlet Field Config Platform Tag",
	CloudletFieldConfigTestMode:                     "Cloudlet Field Config Test Mode",
	CloudletFieldConfigSpan:                         "Cloudlet Field Config Span",
	CloudletFieldConfigCleanupMode:                  "Cloudlet Field Config Cleanup Mode",
	CloudletFieldConfigRegion:                       "Cloudlet Field Config Region",
	CloudletFieldResTagMapKey:                       "Cloudlet Field Res Tag Map Key",
	CloudletFieldResTagMapValueName:                 "Cloudlet Field Res Tag Map Value Name",
	CloudletFieldResTagMapValueOperatorKeyName:      "Cloudlet Field Res Tag Map Value Operator Key Name",
	CloudletFieldAccessVarsKey:                      "Cloudlet Field Access Vars Key",
	CloudletFieldAccessVarsValue:                    "Cloudlet Field Access Vars Value",
}

func (m *Cloudlet) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletFieldKey+".")
}

func (m *Cloudlet) DiffFields(o *Cloudlet, fields map[string]struct{}) {
	if m.Key.OperatorKey.Name != o.Key.OperatorKey.Name {
		fields[CloudletFieldKeyOperatorKeyName] = struct{}{}
		fields[CloudletFieldKeyOperatorKey] = struct{}{}
		fields[CloudletFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletFieldKeyName] = struct{}{}
		fields[CloudletFieldKey] = struct{}{}
	}
	if m.Location.Latitude != o.Location.Latitude {
		fields[CloudletFieldLocationLatitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Longitude != o.Location.Longitude {
		fields[CloudletFieldLocationLongitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.HorizontalAccuracy != o.Location.HorizontalAccuracy {
		fields[CloudletFieldLocationHorizontalAccuracy] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.VerticalAccuracy != o.Location.VerticalAccuracy {
		fields[CloudletFieldLocationVerticalAccuracy] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Altitude != o.Location.Altitude {
		fields[CloudletFieldLocationAltitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Course != o.Location.Course {
		fields[CloudletFieldLocationCourse] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Speed != o.Location.Speed {
		fields[CloudletFieldLocationSpeed] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Timestamp != nil && o.Location.Timestamp != nil {
		if m.Location.Timestamp.Seconds != o.Location.Timestamp.Seconds {
			fields[CloudletFieldLocationTimestampSeconds] = struct{}{}
			fields[CloudletFieldLocationTimestamp] = struct{}{}
			fields[CloudletFieldLocation] = struct{}{}
		}
		if m.Location.Timestamp.Nanos != o.Location.Timestamp.Nanos {
			fields[CloudletFieldLocationTimestampNanos] = struct{}{}
			fields[CloudletFieldLocationTimestamp] = struct{}{}
			fields[CloudletFieldLocation] = struct{}{}
		}
	} else if (m.Location.Timestamp != nil && o.Location.Timestamp == nil) || (m.Location.Timestamp == nil && o.Location.Timestamp != nil) {
		fields[CloudletFieldLocationTimestamp] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.IpSupport != o.IpSupport {
		fields[CloudletFieldIpSupport] = struct{}{}
	}
	if m.StaticIps != o.StaticIps {
		fields[CloudletFieldStaticIps] = struct{}{}
	}
	if m.NumDynamicIps != o.NumDynamicIps {
		fields[CloudletFieldNumDynamicIps] = struct{}{}
	}
	if m.TimeLimits.CreateClusterInstTimeout != o.TimeLimits.CreateClusterInstTimeout {
		fields[CloudletFieldTimeLimitsCreateClusterInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if m.TimeLimits.UpdateClusterInstTimeout != o.TimeLimits.UpdateClusterInstTimeout {
		fields[CloudletFieldTimeLimitsUpdateClusterInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if m.TimeLimits.DeleteClusterInstTimeout != o.TimeLimits.DeleteClusterInstTimeout {
		fields[CloudletFieldTimeLimitsDeleteClusterInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if m.TimeLimits.CreateAppInstTimeout != o.TimeLimits.CreateAppInstTimeout {
		fields[CloudletFieldTimeLimitsCreateAppInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if m.TimeLimits.UpdateAppInstTimeout != o.TimeLimits.UpdateAppInstTimeout {
		fields[CloudletFieldTimeLimitsUpdateAppInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if m.TimeLimits.DeleteAppInstTimeout != o.TimeLimits.DeleteAppInstTimeout {
		fields[CloudletFieldTimeLimitsDeleteAppInstTimeout] = struct{}{}
		fields[CloudletFieldTimeLimits] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[CloudletFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[CloudletFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[CloudletFieldStatusTaskNumber] = struct{}{}
		fields[CloudletFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[CloudletFieldStatusMaxTasks] = struct{}{}
		fields[CloudletFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[CloudletFieldStatusTaskName] = struct{}{}
		fields[CloudletFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[CloudletFieldStatusStepName] = struct{}{}
		fields[CloudletFieldStatus] = struct{}{}
	}
	if m.State != o.State {
		fields[CloudletFieldState] = struct{}{}
	}
	if m.CrmOverride != o.CrmOverride {
		fields[CloudletFieldCrmOverride] = struct{}{}
	}
	if m.DeploymentLocal != o.DeploymentLocal {
		fields[CloudletFieldDeploymentLocal] = struct{}{}
	}
	if m.PlatformType != o.PlatformType {
		fields[CloudletFieldPlatformType] = struct{}{}
	}
	if m.NotifySrvAddr != o.NotifySrvAddr {
		fields[CloudletFieldNotifySrvAddr] = struct{}{}
	}
	if m.Flavor.Name != o.Flavor.Name {
		fields[CloudletFieldFlavorName] = struct{}{}
		fields[CloudletFieldFlavor] = struct{}{}
	}
	if m.PhysicalName != o.PhysicalName {
		fields[CloudletFieldPhysicalName] = struct{}{}
	}
	if m.EnvVar != nil && o.EnvVar != nil {
		if len(m.EnvVar) != len(o.EnvVar) {
			fields[CloudletFieldEnvVar] = struct{}{}
		} else {
			for k0, _ := range m.EnvVar {
				_, vok0 := o.EnvVar[k0]
				if !vok0 {
					fields[CloudletFieldEnvVar] = struct{}{}
				} else {
					if m.EnvVar[k0] != o.EnvVar[k0] {
						fields[CloudletFieldEnvVar] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.EnvVar != nil && o.EnvVar == nil) || (m.EnvVar == nil && o.EnvVar != nil) {
		fields[CloudletFieldEnvVar] = struct{}{}
	}
	if m.Version != o.Version {
		fields[CloudletFieldVersion] = struct{}{}
	}
	if m.Config.RegistryPath != o.Config.RegistryPath {
		fields[CloudletFieldConfigRegistryPath] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.ImagePath != o.Config.ImagePath {
		fields[CloudletFieldConfigImagePath] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.NotifyCtrlAddrs != o.Config.NotifyCtrlAddrs {
		fields[CloudletFieldConfigNotifyCtrlAddrs] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.VaultAddr != o.Config.VaultAddr {
		fields[CloudletFieldConfigVaultAddr] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.TlsCertFile != o.Config.TlsCertFile {
		fields[CloudletFieldConfigTlsCertFile] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.EnvVar != nil && o.Config.EnvVar != nil {
		if len(m.Config.EnvVar) != len(o.Config.EnvVar) {
			fields[CloudletFieldConfigEnvVar] = struct{}{}
			fields[CloudletFieldConfig] = struct{}{}
		} else {
			for k1, _ := range m.Config.EnvVar {
				_, vok1 := o.Config.EnvVar[k1]
				if !vok1 {
					fields[CloudletFieldConfigEnvVar] = struct{}{}
					fields[CloudletFieldConfig] = struct{}{}
				} else {
					if m.Config.EnvVar[k1] != o.Config.EnvVar[k1] {
						fields[CloudletFieldConfigEnvVar] = struct{}{}
						fields[CloudletFieldConfig] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.Config.EnvVar != nil && o.Config.EnvVar == nil) || (m.Config.EnvVar == nil && o.Config.EnvVar != nil) {
		fields[CloudletFieldConfigEnvVar] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.PlatformTag != o.Config.PlatformTag {
		fields[CloudletFieldConfigPlatformTag] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.TestMode != o.Config.TestMode {
		fields[CloudletFieldConfigTestMode] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.Span != o.Config.Span {
		fields[CloudletFieldConfigSpan] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.CleanupMode != o.Config.CleanupMode {
		fields[CloudletFieldConfigCleanupMode] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.Config.Region != o.Config.Region {
		fields[CloudletFieldConfigRegion] = struct{}{}
		fields[CloudletFieldConfig] = struct{}{}
	}
	if m.ResTagMap != nil && o.ResTagMap != nil {
		if len(m.ResTagMap) != len(o.ResTagMap) {
			fields[CloudletFieldResTagMap] = struct{}{}
		} else {
			for k0, _ := range m.ResTagMap {
				_, vok0 := o.ResTagMap[k0]
				if !vok0 {
					fields[CloudletFieldResTagMap] = struct{}{}
				} else {
					if m.ResTagMap[k0].Name != o.ResTagMap[k0].Name {
						fields[CloudletFieldResTagMapValueName] = struct{}{}
						fields[CloudletFieldResTagMapValue] = struct{}{}
						fields[CloudletFieldResTagMap] = struct{}{}
					}
					if m.ResTagMap[k0].OperatorKey.Name != o.ResTagMap[k0].OperatorKey.Name {
						fields[CloudletFieldResTagMapValueOperatorKeyName] = struct{}{}
						fields[CloudletFieldResTagMapValueOperatorKey] = struct{}{}
						fields[CloudletFieldResTagMapValue] = struct{}{}
						fields[CloudletFieldResTagMap] = struct{}{}
					}
				}
			}
		}
	} else if (m.ResTagMap != nil && o.ResTagMap == nil) || (m.ResTagMap == nil && o.ResTagMap != nil) {
		fields[CloudletFieldResTagMap] = struct{}{}
	}
	if m.AccessVars != nil && o.AccessVars != nil {
		if len(m.AccessVars) != len(o.AccessVars) {
			fields[CloudletFieldAccessVars] = struct{}{}
		} else {
			for k0, _ := range m.AccessVars {
				_, vok0 := o.AccessVars[k0]
				if !vok0 {
					fields[CloudletFieldAccessVars] = struct{}{}
				} else {
					if m.AccessVars[k0] != o.AccessVars[k0] {
						fields[CloudletFieldAccessVars] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.AccessVars != nil && o.AccessVars == nil) || (m.AccessVars == nil && o.AccessVars != nil) {
		fields[CloudletFieldAccessVars] = struct{}{}
	}
}

func (m *Cloudlet) CopyInFields(src *Cloudlet) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				if m.Key.OperatorKey.Name != src.Key.OperatorKey.Name {
					m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
					changed++
				}
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["5"]; set {
		if _, set := fmap["5.1"]; set {
			if m.Location.Latitude != src.Location.Latitude {
				m.Location.Latitude = src.Location.Latitude
				changed++
			}
		}
		if _, set := fmap["5.2"]; set {
			if m.Location.Longitude != src.Location.Longitude {
				m.Location.Longitude = src.Location.Longitude
				changed++
			}
		}
		if _, set := fmap["5.3"]; set {
			if m.Location.HorizontalAccuracy != src.Location.HorizontalAccuracy {
				m.Location.HorizontalAccuracy = src.Location.HorizontalAccuracy
				changed++
			}
		}
		if _, set := fmap["5.4"]; set {
			if m.Location.VerticalAccuracy != src.Location.VerticalAccuracy {
				m.Location.VerticalAccuracy = src.Location.VerticalAccuracy
				changed++
			}
		}
		if _, set := fmap["5.5"]; set {
			if m.Location.Altitude != src.Location.Altitude {
				m.Location.Altitude = src.Location.Altitude
				changed++
			}
		}
		if _, set := fmap["5.6"]; set {
			if m.Location.Course != src.Location.Course {
				m.Location.Course = src.Location.Course
				changed++
			}
		}
		if _, set := fmap["5.7"]; set {
			if m.Location.Speed != src.Location.Speed {
				m.Location.Speed = src.Location.Speed
				changed++
			}
		}
		if _, set := fmap["5.8"]; set {
			if src.Location.Timestamp != nil {
				m.Location.Timestamp = &distributed_match_engine.Timestamp{}
				if _, set := fmap["5.8.1"]; set {
					if m.Location.Timestamp.Seconds != src.Location.Timestamp.Seconds {
						m.Location.Timestamp.Seconds = src.Location.Timestamp.Seconds
						changed++
					}
				}
				if _, set := fmap["5.8.2"]; set {
					if m.Location.Timestamp.Nanos != src.Location.Timestamp.Nanos {
						m.Location.Timestamp.Nanos = src.Location.Timestamp.Nanos
						changed++
					}
				}
			} else if m.Location.Timestamp != nil {
				m.Location.Timestamp = nil
				changed++
			}
		}
	}
	if _, set := fmap["6"]; set {
		if m.IpSupport != src.IpSupport {
			m.IpSupport = src.IpSupport
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.StaticIps != src.StaticIps {
			m.StaticIps = src.StaticIps
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.NumDynamicIps != src.NumDynamicIps {
			m.NumDynamicIps = src.NumDynamicIps
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if _, set := fmap["9.1"]; set {
			if m.TimeLimits.CreateClusterInstTimeout != src.TimeLimits.CreateClusterInstTimeout {
				m.TimeLimits.CreateClusterInstTimeout = src.TimeLimits.CreateClusterInstTimeout
				changed++
			}
		}
		if _, set := fmap["9.2"]; set {
			if m.TimeLimits.UpdateClusterInstTimeout != src.TimeLimits.UpdateClusterInstTimeout {
				m.TimeLimits.UpdateClusterInstTimeout = src.TimeLimits.UpdateClusterInstTimeout
				changed++
			}
		}
		if _, set := fmap["9.3"]; set {
			if m.TimeLimits.DeleteClusterInstTimeout != src.TimeLimits.DeleteClusterInstTimeout {
				m.TimeLimits.DeleteClusterInstTimeout = src.TimeLimits.DeleteClusterInstTimeout
				changed++
			}
		}
		if _, set := fmap["9.4"]; set {
			if m.TimeLimits.CreateAppInstTimeout != src.TimeLimits.CreateAppInstTimeout {
				m.TimeLimits.CreateAppInstTimeout = src.TimeLimits.CreateAppInstTimeout
				changed++
			}
		}
		if _, set := fmap["9.5"]; set {
			if m.TimeLimits.UpdateAppInstTimeout != src.TimeLimits.UpdateAppInstTimeout {
				m.TimeLimits.UpdateAppInstTimeout = src.TimeLimits.UpdateAppInstTimeout
				changed++
			}
		}
		if _, set := fmap["9.6"]; set {
			if m.TimeLimits.DeleteAppInstTimeout != src.TimeLimits.DeleteAppInstTimeout {
				m.TimeLimits.DeleteAppInstTimeout = src.TimeLimits.DeleteAppInstTimeout
				changed++
			}
		}
	}
	if _, set := fmap["10"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
			changed++
		}
		copy(m.Errors, src.Errors)
		changed++
	}
	if _, set := fmap["11"]; set {
		if _, set := fmap["11.1"]; set {
			if m.Status.TaskNumber != src.Status.TaskNumber {
				m.Status.TaskNumber = src.Status.TaskNumber
				changed++
			}
		}
		if _, set := fmap["11.2"]; set {
			if m.Status.MaxTasks != src.Status.MaxTasks {
				m.Status.MaxTasks = src.Status.MaxTasks
				changed++
			}
		}
		if _, set := fmap["11.3"]; set {
			if m.Status.TaskName != src.Status.TaskName {
				m.Status.TaskName = src.Status.TaskName
				changed++
			}
		}
		if _, set := fmap["11.4"]; set {
			if m.Status.StepName != src.Status.StepName {
				m.Status.StepName = src.Status.StepName
				changed++
			}
		}
	}
	if _, set := fmap["12"]; set {
		if m.State != src.State {
			m.State = src.State
			changed++
		}
	}
	if _, set := fmap["13"]; set {
		if m.CrmOverride != src.CrmOverride {
			m.CrmOverride = src.CrmOverride
			changed++
		}
	}
	if _, set := fmap["14"]; set {
		if m.DeploymentLocal != src.DeploymentLocal {
			m.DeploymentLocal = src.DeploymentLocal
			changed++
		}
	}
	if _, set := fmap["15"]; set {
		if m.PlatformType != src.PlatformType {
			m.PlatformType = src.PlatformType
			changed++
		}
	}
	if _, set := fmap["16"]; set {
		if m.NotifySrvAddr != src.NotifySrvAddr {
			m.NotifySrvAddr = src.NotifySrvAddr
			changed++
		}
	}
	if _, set := fmap["17"]; set {
		if _, set := fmap["17.1"]; set {
			if m.Flavor.Name != src.Flavor.Name {
				m.Flavor.Name = src.Flavor.Name
				changed++
			}
		}
	}
	if _, set := fmap["18"]; set {
		if m.PhysicalName != src.PhysicalName {
			m.PhysicalName = src.PhysicalName
			changed++
		}
	}
	if _, set := fmap["19"]; set {
		if src.EnvVar != nil {
			m.EnvVar = make(map[string]string)
			for k0, _ := range src.EnvVar {
				m.EnvVar[k0] = src.EnvVar[k0]
			}
		} else if m.EnvVar != nil {
			m.EnvVar = nil
			changed++
		}
	}
	if _, set := fmap["20"]; set {
		if m.Version != src.Version {
			m.Version = src.Version
			changed++
		}
	}
	if _, set := fmap["21"]; set {
		if _, set := fmap["21.1"]; set {
			if m.Config.RegistryPath != src.Config.RegistryPath {
				m.Config.RegistryPath = src.Config.RegistryPath
				changed++
			}
		}
		if _, set := fmap["21.2"]; set {
			if m.Config.ImagePath != src.Config.ImagePath {
				m.Config.ImagePath = src.Config.ImagePath
				changed++
			}
		}
		if _, set := fmap["21.3"]; set {
			if m.Config.NotifyCtrlAddrs != src.Config.NotifyCtrlAddrs {
				m.Config.NotifyCtrlAddrs = src.Config.NotifyCtrlAddrs
				changed++
			}
		}
		if _, set := fmap["21.4"]; set {
			if m.Config.VaultAddr != src.Config.VaultAddr {
				m.Config.VaultAddr = src.Config.VaultAddr
				changed++
			}
		}
		if _, set := fmap["21.5"]; set {
			if m.Config.TlsCertFile != src.Config.TlsCertFile {
				m.Config.TlsCertFile = src.Config.TlsCertFile
				changed++
			}
		}
		if _, set := fmap["21.6"]; set {
			if src.Config.EnvVar != nil {
				m.Config.EnvVar = make(map[string]string)
				for k1, _ := range src.Config.EnvVar {
					m.Config.EnvVar[k1] = src.Config.EnvVar[k1]
				}
			} else if m.Config.EnvVar != nil {
				m.Config.EnvVar = nil
				changed++
			}
		}
		if _, set := fmap["21.8"]; set {
			if m.Config.PlatformTag != src.Config.PlatformTag {
				m.Config.PlatformTag = src.Config.PlatformTag
				changed++
			}
		}
		if _, set := fmap["21.9"]; set {
			if m.Config.TestMode != src.Config.TestMode {
				m.Config.TestMode = src.Config.TestMode
				changed++
			}
		}
		if _, set := fmap["21.10"]; set {
			if m.Config.Span != src.Config.Span {
				m.Config.Span = src.Config.Span
				changed++
			}
		}
		if _, set := fmap["21.11"]; set {
			if m.Config.CleanupMode != src.Config.CleanupMode {
				m.Config.CleanupMode = src.Config.CleanupMode
				changed++
			}
		}
		if _, set := fmap["21.12"]; set {
			if m.Config.Region != src.Config.Region {
				m.Config.Region = src.Config.Region
				changed++
			}
		}
	}
	if _, set := fmap["22"]; set {
		if src.ResTagMap != nil {
			m.ResTagMap = make(map[string]*ResTagTableKey)
			for k0, _ := range src.ResTagMap {
				m.ResTagMap[k0] = &ResTagTableKey{}
				if _, set := fmap["22.1"]; set {
					if m.ResTagMap[k0].Name != src.ResTagMap[k0].Name {
						m.ResTagMap[k0].Name = src.ResTagMap[k0].Name
						changed++
					}
				}
				if _, set := fmap["22.2"]; set {
					if _, set := fmap["22.2.1"]; set {
						if m.ResTagMap[k0].OperatorKey.Name != src.ResTagMap[k0].OperatorKey.Name {
							m.ResTagMap[k0].OperatorKey.Name = src.ResTagMap[k0].OperatorKey.Name
							changed++
						}
					}
				}
			}
		} else if m.ResTagMap != nil {
			m.ResTagMap = nil
			changed++
		}
	}
	if _, set := fmap["23"]; set {
		if src.AccessVars != nil {
			m.AccessVars = make(map[string]string)
			for k0, _ := range src.AccessVars {
				m.AccessVars[k0] = src.AccessVars[k0]
			}
		} else if m.AccessVars != nil {
			m.AccessVars = nil
			changed++
		}
	}
	return changed
}

func (s *Cloudlet) HasFields() bool {
	return true
}

type CloudletStore struct {
	kvstore objstore.KVStore
}

func NewCloudletStore(kvstore objstore.KVStore) CloudletStore {
	return CloudletStore{kvstore: kvstore}
}

func (s *CloudletStore) Create(ctx context.Context, m *Cloudlet, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Update(ctx context.Context, m *Cloudlet, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Cloudlet
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Put(ctx context.Context, m *Cloudlet, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Delete(ctx context.Context, m *Cloudlet, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) LoadOne(key string) (*Cloudlet, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Cloudlet
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Cloudlet data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *Cloudlet) bool {
	keystr := objstore.DbKeyString("Cloudlet", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletStore) STMPut(stm concurrency.STM, obj *Cloudlet, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Cloudlet", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Cloudlet json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("Cloudlet", key)
	stm.Del(keystr)
}

type CloudletKeyWatcher struct {
	cb func(ctx context.Context)
}

// CloudletCache caches Cloudlet objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletCache struct {
	Objs        map[CloudletKey]*Cloudlet
	Mux         util.Mutex
	List        map[CloudletKey]struct{}
	NotifyCb    func(ctx context.Context, obj *CloudletKey, old *Cloudlet)
	UpdatedCb   func(ctx context.Context, old *Cloudlet, new *Cloudlet)
	KeyWatchers map[CloudletKey][]*CloudletKeyWatcher
}

func NewCloudletCache() *CloudletCache {
	cache := CloudletCache{}
	InitCloudletCache(&cache)
	return &cache
}

func InitCloudletCache(cache *CloudletCache) {
	cache.Objs = make(map[CloudletKey]*Cloudlet)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletKeyWatcher)
}

func (c *CloudletCache) GetTypeString() string {
	return "Cloudlet"
}

func (c *CloudletCache) Get(key *CloudletKey, valbuf *Cloudlet) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletCache) GetAllKeys(ctx context.Context, keys map[CloudletKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *CloudletCache) Update(ctx context.Context, in *Cloudlet, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *Cloudlet) (*Cloudlet, bool) {
		return in, true
	})
}

func (c *CloudletCache) UpdateModFunc(ctx context.Context, key *CloudletKey, rev int64, modFunc func(old *Cloudlet) (new *Cloudlet, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &Cloudlet{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate Cloudlet", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletCache) Delete(ctx context.Context, in *Cloudlet, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete Cloudlet", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*Cloudlet)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *CloudletCache) Show(filter *Cloudlet, cb func(ret *Cloudlet) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Cloudlet", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare Cloudlet", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Cloudlet", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletGenericNotifyCb(fn func(key *CloudletKey, old *Cloudlet)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*Cloudlet))
	}
}

func (c *CloudletCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *Cloudlet)) {
	c.NotifyCb = fn
}

func (c *CloudletCache) SetUpdatedCb(fn func(ctx context.Context, old *Cloudlet, new *Cloudlet)) {
	c.UpdatedCb = fn
}

func (c *CloudletCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletKeyWatcher, 0)
	}
	watcher := CloudletKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Cloudlet", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*CloudletKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *CloudletCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := Cloudlet{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Cloudlet data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := Cloudlet{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *CloudletCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*Cloudlet)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *Cloudlet) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Cloudlet) GetKey() *CloudletKey {
	return &m.Key
}

func (m *Cloudlet) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *Cloudlet) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudlet(a Cloudlet, b Cloudlet) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Cloudlet) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := IpSupport_name[int32(m.IpSupport)]; !ok {
		return errors.New("invalid IpSupport")
	}
	if err := m.TimeLimits.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if _, ok := CRMOverride_name[int32(m.CrmOverride)]; !ok {
		return errors.New("invalid CrmOverride")
	}
	if _, ok := PlatformType_name[int32(m.PlatformType)]; !ok {
		return errors.New("invalid PlatformType")
	}
	if err := m.Flavor.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Config.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreCloudletFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "TimeLimits")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Status")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "DeploymentLocal")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifySrvAddr")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Config")
	}
	return cmpopts.IgnoreFields(Cloudlet{}, names...)
}

func (m *FlavorMatch) CopyInFields(src *FlavorMatch) int {
	changed := 0
	if m.Key.OperatorKey.Name != src.Key.OperatorKey.Name {
		m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.FlavorName != src.FlavorName {
		m.FlavorName = src.FlavorName
		changed++
	}
	if m.AvailabilityZone != src.AvailabilityZone {
		m.AvailabilityZone = src.AvailabilityZone
		changed++
	}
	return changed
}

func (m *FlavorMatch) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *FlavorMatch) GetKey() *CloudletKey {
	return &m.Key
}

func (m *FlavorMatch) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *FlavorMatch) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortFlavorMatch(a FlavorMatch, b FlavorMatch) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *FlavorMatch) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *FlavorInfo) CopyInFields(src *FlavorInfo) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Vcpus != src.Vcpus {
		m.Vcpus = src.Vcpus
		changed++
	}
	if m.Ram != src.Ram {
		m.Ram = src.Ram
		changed++
	}
	if m.Disk != src.Disk {
		m.Disk = src.Disk
		changed++
	}
	if m.Properties != src.Properties {
		m.Properties = src.Properties
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *FlavorInfo) ValidateEnums() error {
	return nil
}

func (m *OSAZone) CopyInFields(src *OSAZone) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Status != src.Status {
		m.Status = src.Status
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *OSAZone) ValidateEnums() error {
	return nil
}

func (m *OSImage) CopyInFields(src *OSImage) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Tags != src.Tags {
		m.Tags = src.Tags
		changed++
	}
	if m.Properties != src.Properties {
		m.Properties = src.Properties
		changed++
	}
	if m.DiskFormat != src.DiskFormat {
		m.DiskFormat = src.DiskFormat
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *OSImage) ValidateEnums() error {
	return nil
}

func (m *CloudletInfo) Matches(o *CloudletInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.State != 0 {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.Controller != "" {
		if o.Controller != m.Controller {
			return false
		}
	}
	if !opts.Filter || o.OsMaxRam != 0 {
		if o.OsMaxRam != m.OsMaxRam {
			return false
		}
	}
	if !opts.Filter || o.OsMaxVcores != 0 {
		if o.OsMaxVcores != m.OsMaxVcores {
			return false
		}
	}
	if !opts.Filter || o.OsMaxVolGb != 0 {
		if o.OsMaxVolGb != m.OsMaxVolGb {
			return false
		}
	}
	if !opts.Filter || o.Errors != nil {
		if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if len(m.Errors) != len(o.Errors) {
				return false
			}
			for i := 0; i < len(m.Errors); i++ {
				if o.Errors[i] != m.Errors[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Flavors != nil {
		if m.Flavors == nil && o.Flavors != nil || m.Flavors != nil && o.Flavors == nil {
			return false
		} else if m.Flavors != nil && o.Flavors != nil {
			if len(m.Flavors) != len(o.Flavors) {
				return false
			}
			for i := 0; i < len(m.Flavors); i++ {
			}
		}
	}
	if !opts.Filter || o.Version != "" {
		if o.Version != m.Version {
			return false
		}
	}
	if !opts.Filter || o.AvailabilityZones != nil {
		if m.AvailabilityZones == nil && o.AvailabilityZones != nil || m.AvailabilityZones != nil && o.AvailabilityZones == nil {
			return false
		} else if m.AvailabilityZones != nil && o.AvailabilityZones != nil {
			if len(m.AvailabilityZones) != len(o.AvailabilityZones) {
				return false
			}
			for i := 0; i < len(m.AvailabilityZones); i++ {
			}
		}
	}
	if !opts.Filter || o.OsImages != nil {
		if m.OsImages == nil && o.OsImages != nil || m.OsImages != nil && o.OsImages == nil {
			return false
		} else if m.OsImages != nil && o.OsImages != nil {
			if len(m.OsImages) != len(o.OsImages) {
				return false
			}
			for i := 0; i < len(m.OsImages); i++ {
			}
		}
	}
	return true
}

const CloudletInfoFieldKey = "2"
const CloudletInfoFieldKeyOperatorKey = "2.1"
const CloudletInfoFieldKeyOperatorKeyName = "2.1.1"
const CloudletInfoFieldKeyName = "2.2"
const CloudletInfoFieldState = "3"
const CloudletInfoFieldNotifyId = "4"
const CloudletInfoFieldController = "5"
const CloudletInfoFieldOsMaxRam = "6"
const CloudletInfoFieldOsMaxVcores = "7"
const CloudletInfoFieldOsMaxVolGb = "8"
const CloudletInfoFieldErrors = "9"
const CloudletInfoFieldFlavors = "10"
const CloudletInfoFieldFlavorsName = "10.1"
const CloudletInfoFieldFlavorsVcpus = "10.2"
const CloudletInfoFieldFlavorsRam = "10.3"
const CloudletInfoFieldFlavorsDisk = "10.4"
const CloudletInfoFieldFlavorsProperties = "10.5"
const CloudletInfoFieldStatus = "11"
const CloudletInfoFieldStatusTaskNumber = "11.1"
const CloudletInfoFieldStatusMaxTasks = "11.2"
const CloudletInfoFieldStatusTaskName = "11.3"
const CloudletInfoFieldStatusStepName = "11.4"
const CloudletInfoFieldVersion = "12"
const CloudletInfoFieldAvailabilityZones = "13"
const CloudletInfoFieldAvailabilityZonesName = "13.1"
const CloudletInfoFieldAvailabilityZonesStatus = "13.2"
const CloudletInfoFieldOsImages = "14"
const CloudletInfoFieldOsImagesName = "14.1"
const CloudletInfoFieldOsImagesTags = "14.2"
const CloudletInfoFieldOsImagesProperties = "14.3"
const CloudletInfoFieldOsImagesDiskFormat = "14.4"

var CloudletInfoAllFields = []string{
	CloudletInfoFieldKeyOperatorKeyName,
	CloudletInfoFieldKeyName,
	CloudletInfoFieldState,
	CloudletInfoFieldNotifyId,
	CloudletInfoFieldController,
	CloudletInfoFieldOsMaxRam,
	CloudletInfoFieldOsMaxVcores,
	CloudletInfoFieldOsMaxVolGb,
	CloudletInfoFieldErrors,
	CloudletInfoFieldFlavorsName,
	CloudletInfoFieldFlavorsVcpus,
	CloudletInfoFieldFlavorsRam,
	CloudletInfoFieldFlavorsDisk,
	CloudletInfoFieldFlavorsProperties,
	CloudletInfoFieldStatusTaskNumber,
	CloudletInfoFieldStatusMaxTasks,
	CloudletInfoFieldStatusTaskName,
	CloudletInfoFieldStatusStepName,
	CloudletInfoFieldVersion,
	CloudletInfoFieldAvailabilityZonesName,
	CloudletInfoFieldAvailabilityZonesStatus,
	CloudletInfoFieldOsImagesName,
	CloudletInfoFieldOsImagesTags,
	CloudletInfoFieldOsImagesProperties,
	CloudletInfoFieldOsImagesDiskFormat,
}

var CloudletInfoAllFieldsMap = map[string]struct{}{
	CloudletInfoFieldKeyOperatorKeyName:      struct{}{},
	CloudletInfoFieldKeyName:                 struct{}{},
	CloudletInfoFieldState:                   struct{}{},
	CloudletInfoFieldNotifyId:                struct{}{},
	CloudletInfoFieldController:              struct{}{},
	CloudletInfoFieldOsMaxRam:                struct{}{},
	CloudletInfoFieldOsMaxVcores:             struct{}{},
	CloudletInfoFieldOsMaxVolGb:              struct{}{},
	CloudletInfoFieldErrors:                  struct{}{},
	CloudletInfoFieldFlavorsName:             struct{}{},
	CloudletInfoFieldFlavorsVcpus:            struct{}{},
	CloudletInfoFieldFlavorsRam:              struct{}{},
	CloudletInfoFieldFlavorsDisk:             struct{}{},
	CloudletInfoFieldFlavorsProperties:       struct{}{},
	CloudletInfoFieldStatusTaskNumber:        struct{}{},
	CloudletInfoFieldStatusMaxTasks:          struct{}{},
	CloudletInfoFieldStatusTaskName:          struct{}{},
	CloudletInfoFieldStatusStepName:          struct{}{},
	CloudletInfoFieldVersion:                 struct{}{},
	CloudletInfoFieldAvailabilityZonesName:   struct{}{},
	CloudletInfoFieldAvailabilityZonesStatus: struct{}{},
	CloudletInfoFieldOsImagesName:            struct{}{},
	CloudletInfoFieldOsImagesTags:            struct{}{},
	CloudletInfoFieldOsImagesProperties:      struct{}{},
	CloudletInfoFieldOsImagesDiskFormat:      struct{}{},
}

var CloudletInfoAllFieldsStringMap = map[string]string{
	CloudletInfoFieldKeyOperatorKeyName:      "Cloudlet Info Field Key Operator Key Name",
	CloudletInfoFieldKeyName:                 "Cloudlet Info Field Key Name",
	CloudletInfoFieldState:                   "Cloudlet Info Field State",
	CloudletInfoFieldNotifyId:                "Cloudlet Info Field Notify Id",
	CloudletInfoFieldController:              "Cloudlet Info Field Controller",
	CloudletInfoFieldOsMaxRam:                "Cloudlet Info Field Os Max Ram",
	CloudletInfoFieldOsMaxVcores:             "Cloudlet Info Field Os Max Vcores",
	CloudletInfoFieldOsMaxVolGb:              "Cloudlet Info Field Os Max Vol Gb",
	CloudletInfoFieldErrors:                  "Cloudlet Info Field Errors",
	CloudletInfoFieldFlavorsName:             "Cloudlet Info Field Flavors Name",
	CloudletInfoFieldFlavorsVcpus:            "Cloudlet Info Field Flavors Vcpus",
	CloudletInfoFieldFlavorsRam:              "Cloudlet Info Field Flavors Ram",
	CloudletInfoFieldFlavorsDisk:             "Cloudlet Info Field Flavors Disk",
	CloudletInfoFieldFlavorsProperties:       "Cloudlet Info Field Flavors Properties",
	CloudletInfoFieldStatusTaskNumber:        "Cloudlet Info Field Status Task Number",
	CloudletInfoFieldStatusMaxTasks:          "Cloudlet Info Field Status Max Tasks",
	CloudletInfoFieldStatusTaskName:          "Cloudlet Info Field Status Task Name",
	CloudletInfoFieldStatusStepName:          "Cloudlet Info Field Status Step Name",
	CloudletInfoFieldVersion:                 "Cloudlet Info Field Version",
	CloudletInfoFieldAvailabilityZonesName:   "Cloudlet Info Field Availability Zones Name",
	CloudletInfoFieldAvailabilityZonesStatus: "Cloudlet Info Field Availability Zones Status",
	CloudletInfoFieldOsImagesName:            "Cloudlet Info Field Os Images Name",
	CloudletInfoFieldOsImagesTags:            "Cloudlet Info Field Os Images Tags",
	CloudletInfoFieldOsImagesProperties:      "Cloudlet Info Field Os Images Properties",
	CloudletInfoFieldOsImagesDiskFormat:      "Cloudlet Info Field Os Images Disk Format",
}

func (m *CloudletInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, CloudletInfoFieldKey+".")
}

func (m *CloudletInfo) DiffFields(o *CloudletInfo, fields map[string]struct{}) {
	if m.Key.OperatorKey.Name != o.Key.OperatorKey.Name {
		fields[CloudletInfoFieldKeyOperatorKeyName] = struct{}{}
		fields[CloudletInfoFieldKeyOperatorKey] = struct{}{}
		fields[CloudletInfoFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletInfoFieldKeyName] = struct{}{}
		fields[CloudletInfoFieldKey] = struct{}{}
	}
	if m.State != o.State {
		fields[CloudletInfoFieldState] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[CloudletInfoFieldNotifyId] = struct{}{}
	}
	if m.Controller != o.Controller {
		fields[CloudletInfoFieldController] = struct{}{}
	}
	if m.OsMaxRam != o.OsMaxRam {
		fields[CloudletInfoFieldOsMaxRam] = struct{}{}
	}
	if m.OsMaxVcores != o.OsMaxVcores {
		fields[CloudletInfoFieldOsMaxVcores] = struct{}{}
	}
	if m.OsMaxVolGb != o.OsMaxVolGb {
		fields[CloudletInfoFieldOsMaxVolGb] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[CloudletInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[CloudletInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.Flavors != nil && o.Flavors != nil {
		if len(m.Flavors) != len(o.Flavors) {
			fields[CloudletInfoFieldFlavors] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.Flavors); i0++ {
				if m.Flavors[i0].Name != o.Flavors[i0].Name {
					fields[CloudletInfoFieldFlavorsName] = struct{}{}
					fields[CloudletInfoFieldFlavors] = struct{}{}
				}
				if m.Flavors[i0].Vcpus != o.Flavors[i0].Vcpus {
					fields[CloudletInfoFieldFlavorsVcpus] = struct{}{}
					fields[CloudletInfoFieldFlavors] = struct{}{}
				}
				if m.Flavors[i0].Ram != o.Flavors[i0].Ram {
					fields[CloudletInfoFieldFlavorsRam] = struct{}{}
					fields[CloudletInfoFieldFlavors] = struct{}{}
				}
				if m.Flavors[i0].Disk != o.Flavors[i0].Disk {
					fields[CloudletInfoFieldFlavorsDisk] = struct{}{}
					fields[CloudletInfoFieldFlavors] = struct{}{}
				}
				if m.Flavors[i0].Properties != o.Flavors[i0].Properties {
					fields[CloudletInfoFieldFlavorsProperties] = struct{}{}
					fields[CloudletInfoFieldFlavors] = struct{}{}
				}
			}
		}
	} else if (m.Flavors != nil && o.Flavors == nil) || (m.Flavors == nil && o.Flavors != nil) {
		fields[CloudletInfoFieldFlavors] = struct{}{}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[CloudletInfoFieldStatusTaskNumber] = struct{}{}
		fields[CloudletInfoFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[CloudletInfoFieldStatusMaxTasks] = struct{}{}
		fields[CloudletInfoFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[CloudletInfoFieldStatusTaskName] = struct{}{}
		fields[CloudletInfoFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[CloudletInfoFieldStatusStepName] = struct{}{}
		fields[CloudletInfoFieldStatus] = struct{}{}
	}
	if m.Version != o.Version {
		fields[CloudletInfoFieldVersion] = struct{}{}
	}
	if m.AvailabilityZones != nil && o.AvailabilityZones != nil {
		if len(m.AvailabilityZones) != len(o.AvailabilityZones) {
			fields[CloudletInfoFieldAvailabilityZones] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.AvailabilityZones); i0++ {
				if m.AvailabilityZones[i0].Name != o.AvailabilityZones[i0].Name {
					fields[CloudletInfoFieldAvailabilityZonesName] = struct{}{}
					fields[CloudletInfoFieldAvailabilityZones] = struct{}{}
				}
				if m.AvailabilityZones[i0].Status != o.AvailabilityZones[i0].Status {
					fields[CloudletInfoFieldAvailabilityZonesStatus] = struct{}{}
					fields[CloudletInfoFieldAvailabilityZones] = struct{}{}
				}
			}
		}
	} else if (m.AvailabilityZones != nil && o.AvailabilityZones == nil) || (m.AvailabilityZones == nil && o.AvailabilityZones != nil) {
		fields[CloudletInfoFieldAvailabilityZones] = struct{}{}
	}
	if m.OsImages != nil && o.OsImages != nil {
		if len(m.OsImages) != len(o.OsImages) {
			fields[CloudletInfoFieldOsImages] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.OsImages); i0++ {
				if m.OsImages[i0].Name != o.OsImages[i0].Name {
					fields[CloudletInfoFieldOsImagesName] = struct{}{}
					fields[CloudletInfoFieldOsImages] = struct{}{}
				}
				if m.OsImages[i0].Tags != o.OsImages[i0].Tags {
					fields[CloudletInfoFieldOsImagesTags] = struct{}{}
					fields[CloudletInfoFieldOsImages] = struct{}{}
				}
				if m.OsImages[i0].Properties != o.OsImages[i0].Properties {
					fields[CloudletInfoFieldOsImagesProperties] = struct{}{}
					fields[CloudletInfoFieldOsImages] = struct{}{}
				}
				if m.OsImages[i0].DiskFormat != o.OsImages[i0].DiskFormat {
					fields[CloudletInfoFieldOsImagesDiskFormat] = struct{}{}
					fields[CloudletInfoFieldOsImages] = struct{}{}
				}
			}
		}
	} else if (m.OsImages != nil && o.OsImages == nil) || (m.OsImages == nil && o.OsImages != nil) {
		fields[CloudletInfoFieldOsImages] = struct{}{}
	}
}

func (m *CloudletInfo) CopyInFields(src *CloudletInfo) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				if m.Key.OperatorKey.Name != src.Key.OperatorKey.Name {
					m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
					changed++
				}
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.State != src.State {
			m.State = src.State
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.Controller != src.Controller {
			m.Controller = src.Controller
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.OsMaxRam != src.OsMaxRam {
			m.OsMaxRam = src.OsMaxRam
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.OsMaxVcores != src.OsMaxVcores {
			m.OsMaxVcores = src.OsMaxVcores
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.OsMaxVolGb != src.OsMaxVolGb {
			m.OsMaxVolGb = src.OsMaxVolGb
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
			changed++
		}
		copy(m.Errors, src.Errors)
		changed++
	}
	if _, set := fmap["10"]; set {
		if src.Flavors != nil {
			if m.Flavors == nil || len(m.Flavors) != len(src.Flavors) {
				m.Flavors = make([]*FlavorInfo, len(src.Flavors))
				changed++
			}
			for i0 := 0; i0 < len(src.Flavors); i0++ {
				m.Flavors[i0] = &FlavorInfo{}
				if _, set := fmap["10.1"]; set {
					if m.Flavors[i0].Name != src.Flavors[i0].Name {
						m.Flavors[i0].Name = src.Flavors[i0].Name
						changed++
					}
				}
				if _, set := fmap["10.2"]; set {
					if m.Flavors[i0].Vcpus != src.Flavors[i0].Vcpus {
						m.Flavors[i0].Vcpus = src.Flavors[i0].Vcpus
						changed++
					}
				}
				if _, set := fmap["10.3"]; set {
					if m.Flavors[i0].Ram != src.Flavors[i0].Ram {
						m.Flavors[i0].Ram = src.Flavors[i0].Ram
						changed++
					}
				}
				if _, set := fmap["10.4"]; set {
					if m.Flavors[i0].Disk != src.Flavors[i0].Disk {
						m.Flavors[i0].Disk = src.Flavors[i0].Disk
						changed++
					}
				}
				if _, set := fmap["10.5"]; set {
					if m.Flavors[i0].Properties != src.Flavors[i0].Properties {
						m.Flavors[i0].Properties = src.Flavors[i0].Properties
						changed++
					}
				}
			}
		} else if m.Flavors != nil {
			m.Flavors = nil
			changed++
		}
	}
	if _, set := fmap["11"]; set {
		if _, set := fmap["11.1"]; set {
			if m.Status.TaskNumber != src.Status.TaskNumber {
				m.Status.TaskNumber = src.Status.TaskNumber
				changed++
			}
		}
		if _, set := fmap["11.2"]; set {
			if m.Status.MaxTasks != src.Status.MaxTasks {
				m.Status.MaxTasks = src.Status.MaxTasks
				changed++
			}
		}
		if _, set := fmap["11.3"]; set {
			if m.Status.TaskName != src.Status.TaskName {
				m.Status.TaskName = src.Status.TaskName
				changed++
			}
		}
		if _, set := fmap["11.4"]; set {
			if m.Status.StepName != src.Status.StepName {
				m.Status.StepName = src.Status.StepName
				changed++
			}
		}
	}
	if _, set := fmap["12"]; set {
		if m.Version != src.Version {
			m.Version = src.Version
			changed++
		}
	}
	if _, set := fmap["13"]; set {
		if src.AvailabilityZones != nil {
			if m.AvailabilityZones == nil || len(m.AvailabilityZones) != len(src.AvailabilityZones) {
				m.AvailabilityZones = make([]*OSAZone, len(src.AvailabilityZones))
				changed++
			}
			for i0 := 0; i0 < len(src.AvailabilityZones); i0++ {
				m.AvailabilityZones[i0] = &OSAZone{}
				if _, set := fmap["13.1"]; set {
					if m.AvailabilityZones[i0].Name != src.AvailabilityZones[i0].Name {
						m.AvailabilityZones[i0].Name = src.AvailabilityZones[i0].Name
						changed++
					}
				}
				if _, set := fmap["13.2"]; set {
					if m.AvailabilityZones[i0].Status != src.AvailabilityZones[i0].Status {
						m.AvailabilityZones[i0].Status = src.AvailabilityZones[i0].Status
						changed++
					}
				}
			}
		} else if m.AvailabilityZones != nil {
			m.AvailabilityZones = nil
			changed++
		}
	}
	if _, set := fmap["14"]; set {
		if src.OsImages != nil {
			if m.OsImages == nil || len(m.OsImages) != len(src.OsImages) {
				m.OsImages = make([]*OSImage, len(src.OsImages))
				changed++
			}
			for i0 := 0; i0 < len(src.OsImages); i0++ {
				m.OsImages[i0] = &OSImage{}
				if _, set := fmap["14.1"]; set {
					if m.OsImages[i0].Name != src.OsImages[i0].Name {
						m.OsImages[i0].Name = src.OsImages[i0].Name
						changed++
					}
				}
				if _, set := fmap["14.2"]; set {
					if m.OsImages[i0].Tags != src.OsImages[i0].Tags {
						m.OsImages[i0].Tags = src.OsImages[i0].Tags
						changed++
					}
				}
				if _, set := fmap["14.3"]; set {
					if m.OsImages[i0].Properties != src.OsImages[i0].Properties {
						m.OsImages[i0].Properties = src.OsImages[i0].Properties
						changed++
					}
				}
				if _, set := fmap["14.4"]; set {
					if m.OsImages[i0].DiskFormat != src.OsImages[i0].DiskFormat {
						m.OsImages[i0].DiskFormat = src.OsImages[i0].DiskFormat
						changed++
					}
				}
			}
		} else if m.OsImages != nil {
			m.OsImages = nil
			changed++
		}
	}
	return changed
}

func (s *CloudletInfo) HasFields() bool {
	return true
}

type CloudletInfoStore struct {
	kvstore objstore.KVStore
}

func NewCloudletInfoStore(kvstore objstore.KVStore) CloudletInfoStore {
	return CloudletInfoStore{kvstore: kvstore}
}

func (s *CloudletInfoStore) Create(ctx context.Context, m *CloudletInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Update(ctx context.Context, m *CloudletInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Put(ctx context.Context, m *CloudletInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(CloudletInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Delete(ctx context.Context, m *CloudletInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) LoadOne(key string) (*CloudletInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletInfo data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletInfoStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *CloudletInfo) bool {
	keystr := objstore.DbKeyString("CloudletInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletInfoStore) STMPut(stm concurrency.STM, obj *CloudletInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("CloudletInfo", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("CloudletInfo json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *CloudletInfoStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("CloudletInfo", key)
	stm.Del(keystr)
}

type CloudletInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

// CloudletInfoCache caches CloudletInfo objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletInfoCache struct {
	Objs        map[CloudletKey]*CloudletInfo
	Mux         util.Mutex
	List        map[CloudletKey]struct{}
	NotifyCb    func(ctx context.Context, obj *CloudletKey, old *CloudletInfo)
	UpdatedCb   func(ctx context.Context, old *CloudletInfo, new *CloudletInfo)
	KeyWatchers map[CloudletKey][]*CloudletInfoKeyWatcher
}

func NewCloudletInfoCache() *CloudletInfoCache {
	cache := CloudletInfoCache{}
	InitCloudletInfoCache(&cache)
	return &cache
}

func InitCloudletInfoCache(cache *CloudletInfoCache) {
	cache.Objs = make(map[CloudletKey]*CloudletInfo)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletInfoKeyWatcher)
}

func (c *CloudletInfoCache) GetTypeString() string {
	return "CloudletInfo"
}

func (c *CloudletInfoCache) Get(key *CloudletKey, valbuf *CloudletInfo) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletInfoCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletInfoCache) GetAllKeys(ctx context.Context, keys map[CloudletKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *CloudletInfoCache) Update(ctx context.Context, in *CloudletInfo, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *CloudletInfo) (*CloudletInfo, bool) {
		return in, true
	})
}

func (c *CloudletInfoCache) UpdateModFunc(ctx context.Context, key *CloudletKey, rev int64, modFunc func(old *CloudletInfo) (new *CloudletInfo, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &CloudletInfo{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate CloudletInfo", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *CloudletInfoCache) Delete(ctx context.Context, in *CloudletInfo, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete CloudletInfo", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *CloudletInfoCache) Prune(ctx context.Context, validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *CloudletInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletInfoCache) Flush(ctx context.Context, notifyId int64) {
	flushed := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if val.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(ctx, &key, old)
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *CloudletInfoCache) Show(filter *CloudletInfo, cb func(ret *CloudletInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare CloudletInfo", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletInfo", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletInfoGenericNotifyCb(fn func(key *CloudletKey, old *CloudletInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*CloudletInfo))
	}
}

func (c *CloudletInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *CloudletKey, old *CloudletInfo)) {
	c.NotifyCb = fn
}

func (c *CloudletInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *CloudletInfo, new *CloudletInfo)) {
	c.UpdatedCb = fn
}

func (c *CloudletInfoCache) WatchKey(key *CloudletKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletInfoKeyWatcher, 0)
	}
	watcher := CloudletInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletInfoCache) TriggerKeyWatchers(ctx context.Context, key *CloudletKey) {
	watchers := make([]*CloudletInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *CloudletInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := CloudletInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletInfo data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletInfoCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := CloudletInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *CloudletInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *CloudletInfo) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *CloudletInfo) GetKey() *CloudletKey {
	return &m.Key
}

func (m *CloudletInfo) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *CloudletInfo) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortCloudletInfo(a CloudletInfo, b CloudletInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	for _, e := range m.Flavors {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.AvailabilityZones {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.OsImages {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *CloudletMetrics) CopyInFields(src *CloudletMetrics) int {
	changed := 0
	if m.Foo != src.Foo {
		m.Foo = src.Foo
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *CloudletMetrics) ValidateEnums() error {
	return nil
}

var PlatformTypeStrings = []string{
	"PLATFORM_TYPE_FAKE",
	"PLATFORM_TYPE_DIND",
	"PLATFORM_TYPE_OPENSTACK",
	"PLATFORM_TYPE_AZURE",
	"PLATFORM_TYPE_GCP",
	"PLATFORM_TYPE_EDGEBOX",
	"PLATFORM_TYPE_FAKEINFRA",
}

const (
	PlatformTypePLATFORM_TYPE_FAKE      uint64 = 1 << 0
	PlatformTypePLATFORM_TYPE_DIND      uint64 = 1 << 1
	PlatformTypePLATFORM_TYPE_OPENSTACK uint64 = 1 << 2
	PlatformTypePLATFORM_TYPE_AZURE     uint64 = 1 << 3
	PlatformTypePLATFORM_TYPE_GCP       uint64 = 1 << 4
	PlatformTypePLATFORM_TYPE_EDGEBOX   uint64 = 1 << 5
	PlatformTypePLATFORM_TYPE_FAKEINFRA uint64 = 1 << 6
)

var PlatformType_CamelName = map[int32]string{
	// PLATFORM_TYPE_FAKE -> PlatformTypeFake
	0: "PlatformTypeFake",
	// PLATFORM_TYPE_DIND -> PlatformTypeDind
	1: "PlatformTypeDind",
	// PLATFORM_TYPE_OPENSTACK -> PlatformTypeOpenstack
	2: "PlatformTypeOpenstack",
	// PLATFORM_TYPE_AZURE -> PlatformTypeAzure
	3: "PlatformTypeAzure",
	// PLATFORM_TYPE_GCP -> PlatformTypeGcp
	4: "PlatformTypeGcp",
	// PLATFORM_TYPE_EDGEBOX -> PlatformTypeEdgebox
	5: "PlatformTypeEdgebox",
	// PLATFORM_TYPE_FAKEINFRA -> PlatformTypeFakeinfra
	6: "PlatformTypeFakeinfra",
}
var PlatformType_CamelValue = map[string]int32{
	"PlatformTypeFake":      0,
	"PlatformTypeDind":      1,
	"PlatformTypeOpenstack": 2,
	"PlatformTypeAzure":     3,
	"PlatformTypeGcp":       4,
	"PlatformTypeEdgebox":   5,
	"PlatformTypeFakeinfra": 6,
}

func (e *PlatformType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := PlatformType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = PlatformType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = PlatformType(val)
	return nil
}

func (e PlatformType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(PlatformType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *PlatformType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := PlatformType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = PlatformType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = PlatformType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = PlatformType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var CloudletStateStrings = []string{
	"CLOUDLET_STATE_UNKNOWN",
	"CLOUDLET_STATE_ERRORS",
	"CLOUDLET_STATE_READY",
	"CLOUDLET_STATE_OFFLINE",
	"CLOUDLET_STATE_NOT_PRESENT",
	"CLOUDLET_STATE_INIT",
	"CLOUDLET_STATE_UPGRADE",
}

const (
	CloudletStateCLOUDLET_STATE_UNKNOWN     uint64 = 1 << 0
	CloudletStateCLOUDLET_STATE_ERRORS      uint64 = 1 << 1
	CloudletStateCLOUDLET_STATE_READY       uint64 = 1 << 2
	CloudletStateCLOUDLET_STATE_OFFLINE     uint64 = 1 << 3
	CloudletStateCLOUDLET_STATE_NOT_PRESENT uint64 = 1 << 4
	CloudletStateCLOUDLET_STATE_INIT        uint64 = 1 << 5
	CloudletStateCLOUDLET_STATE_UPGRADE     uint64 = 1 << 6
)

var CloudletState_CamelName = map[int32]string{
	// CLOUDLET_STATE_UNKNOWN -> CloudletStateUnknown
	0: "CloudletStateUnknown",
	// CLOUDLET_STATE_ERRORS -> CloudletStateErrors
	1: "CloudletStateErrors",
	// CLOUDLET_STATE_READY -> CloudletStateReady
	2: "CloudletStateReady",
	// CLOUDLET_STATE_OFFLINE -> CloudletStateOffline
	3: "CloudletStateOffline",
	// CLOUDLET_STATE_NOT_PRESENT -> CloudletStateNotPresent
	4: "CloudletStateNotPresent",
	// CLOUDLET_STATE_INIT -> CloudletStateInit
	5: "CloudletStateInit",
	// CLOUDLET_STATE_UPGRADE -> CloudletStateUpgrade
	6: "CloudletStateUpgrade",
}
var CloudletState_CamelValue = map[string]int32{
	"CloudletStateUnknown":    0,
	"CloudletStateErrors":     1,
	"CloudletStateReady":      2,
	"CloudletStateOffline":    3,
	"CloudletStateNotPresent": 4,
	"CloudletStateInit":       5,
	"CloudletStateUpgrade":    6,
}

func (e *CloudletState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletState_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletState_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletState(val)
	return nil
}

func (e CloudletState) MarshalYAML() (interface{}, error) {
	return proto.EnumName(CloudletState_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *CloudletState) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := CloudletState_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = CloudletState_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = CloudletState(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = CloudletState(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *CloudletKey) Size() (n int) {
	var l int
	_ = l
	l = m.OperatorKey.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *OperationTimeLimits) Size() (n int) {
	var l int
	_ = l
	if m.CreateClusterInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.CreateClusterInstTimeout))
	}
	if m.UpdateClusterInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.UpdateClusterInstTimeout))
	}
	if m.DeleteClusterInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.DeleteClusterInstTimeout))
	}
	if m.CreateAppInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.CreateAppInstTimeout))
	}
	if m.UpdateAppInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.UpdateAppInstTimeout))
	}
	if m.DeleteAppInstTimeout != 0 {
		n += 1 + sovCloudlet(uint64(m.DeleteAppInstTimeout))
	}
	return n
}

func (m *CloudletInfraCommon) Size() (n int) {
	var l int
	_ = l
	l = len(m.DockerRegistry)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.DnsZone)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.RegistryFileServer)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.CfKey)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.CfUser)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.DockerRegPass)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.NetworkScheme)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.DockerRegistrySecret)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *AzureProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *GcpProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.ServiceAccount)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.GcpAuthKeyUrl)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *OpenStackProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.OsExternalNetworkName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.OsImageName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.OsExternalRouterName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.OsMexNetwork)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if len(m.OpenRcVars) > 0 {
		for k, v := range m.OpenRcVars {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CloudletInfraProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.CloudletKind)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.MexosContainerImageName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.OpenstackProperties != nil {
		l = m.OpenstackProperties.Size()
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.AzureProperties != nil {
		l = m.AzureProperties.Size()
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.GcpProperties != nil {
		l = m.GcpProperties.Size()
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *PlatformConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegistryPath)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.NotifyCtrlAddrs)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.VaultAddr)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.TlsCertFile)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if len(m.EnvVar) > 0 {
		for k, v := range m.EnvVar {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	l = len(m.PlatformTag)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.TestMode {
		n += 2
	}
	l = len(m.Span)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.CleanupMode {
		n += 2
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *CloudletResMap) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if len(m.Mapping) > 0 {
		for k, v := range m.Mapping {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			n += mapEntrySize + 1 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Cloudlet) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = m.Location.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if m.IpSupport != 0 {
		n += 1 + sovCloudlet(uint64(m.IpSupport))
	}
	l = len(m.StaticIps)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.NumDynamicIps != 0 {
		n += 1 + sovCloudlet(uint64(m.NumDynamicIps))
	}
	l = m.TimeLimits.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if m.State != 0 {
		n += 1 + sovCloudlet(uint64(m.State))
	}
	if m.CrmOverride != 0 {
		n += 1 + sovCloudlet(uint64(m.CrmOverride))
	}
	if m.DeploymentLocal {
		n += 2
	}
	if m.PlatformType != 0 {
		n += 1 + sovCloudlet(uint64(m.PlatformType))
	}
	l = len(m.NotifySrvAddr)
	if l > 0 {
		n += 2 + l + sovCloudlet(uint64(l))
	}
	l = m.Flavor.Size()
	n += 2 + l + sovCloudlet(uint64(l))
	l = len(m.PhysicalName)
	if l > 0 {
		n += 2 + l + sovCloudlet(uint64(l))
	}
	if len(m.EnvVar) > 0 {
		for k, v := range m.EnvVar {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			n += mapEntrySize + 2 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovCloudlet(uint64(l))
	}
	l = m.Config.Size()
	n += 2 + l + sovCloudlet(uint64(l))
	if len(m.ResTagMap) > 0 {
		for k, v := range m.ResTagMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCloudlet(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	if len(m.AccessVars) > 0 {
		for k, v := range m.AccessVars {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCloudlet(uint64(len(k))) + 1 + len(v) + sovCloudlet(uint64(len(v)))
			n += mapEntrySize + 2 + sovCloudlet(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FlavorMatch) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.FlavorName)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *FlavorInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.Vcpus != 0 {
		n += 1 + sovCloudlet(uint64(m.Vcpus))
	}
	if m.Ram != 0 {
		n += 1 + sovCloudlet(uint64(m.Ram))
	}
	if m.Disk != 0 {
		n += 1 + sovCloudlet(uint64(m.Disk))
	}
	l = len(m.Properties)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *OSAZone) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *OSImage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.Properties)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = len(m.DiskFormat)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *CloudletInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if m.State != 0 {
		n += 1 + sovCloudlet(uint64(m.State))
	}
	if m.NotifyId != 0 {
		n += 1 + sovCloudlet(uint64(m.NotifyId))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.OsMaxRam != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxRam))
	}
	if m.OsMaxVcores != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxVcores))
	}
	if m.OsMaxVolGb != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxVolGb))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if len(m.AvailabilityZones) > 0 {
		for _, e := range m.AvailabilityZones {
			l = e.Size()
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	if len(m.OsImages) > 0 {
		for _, e := range m.OsImages {
			l = e.Size()
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	return n
}

func (m *CloudletMetrics) Size() (n int) {
	var l int
	_ = l
	if m.Foo != 0 {
		n += 1 + sovCloudlet(uint64(m.Foo))
	}
	return n
}

func sovCloudlet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudlet(x uint64) (n int) {
	return sovCloudlet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationTimeLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationTimeLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationTimeLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateClusterInstTimeout", wireType)
			}
			m.CreateClusterInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateClusterInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateClusterInstTimeout", wireType)
			}
			m.UpdateClusterInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateClusterInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteClusterInstTimeout", wireType)
			}
			m.DeleteClusterInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteClusterInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAppInstTimeout", wireType)
			}
			m.CreateAppInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAppInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAppInstTimeout", wireType)
			}
			m.UpdateAppInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAppInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteAppInstTimeout", wireType)
			}
			m.DeleteAppInstTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteAppInstTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletInfraCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletInfraCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletInfraCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerRegistry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerRegistry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryFileServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryFileServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CfUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerRegPass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerRegPass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkScheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkScheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerRegistrySecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerRegistrySecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GcpProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GcpProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GcpProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpAuthKeyUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcpAuthKeyUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenStackProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenStackProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenStackProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsExternalNetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsExternalNetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsExternalRouterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsExternalRouterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMexNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsMexNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenRcVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenRcVars == nil {
				m.OpenRcVars = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OpenRcVars[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletInfraProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletInfraProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletInfraProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudletKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MexosContainerImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MexosContainerImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenstackProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OpenstackProperties == nil {
				m.OpenstackProperties = &OpenStackProperties{}
			}
			if err := m.OpenstackProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureProperties == nil {
				m.AzureProperties = &AzureProperties{}
			}
			if err := m.AzureProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GcpProperties == nil {
				m.GcpProperties = &GcpProperties{}
			}
			if err := m.GcpProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyCtrlAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifyCtrlAddrs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvVar == nil {
				m.EnvVar = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EnvVar[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestMode = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Span = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanupMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CleanupMode = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletResMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletResMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletResMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mapping == nil {
				m.Mapping = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mapping[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cloudlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cloudlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cloudlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpSupport", wireType)
			}
			m.IpSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpSupport |= (IpSupport(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticIps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDynamicIps", wireType)
			}
			m.NumDynamicIps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDynamicIps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TrackedState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmOverride", wireType)
			}
			m.CrmOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrmOverride |= (CRMOverride(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeploymentLocal = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			m.PlatformType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformType |= (PlatformType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifySrvAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotifySrvAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhysicalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvVar == nil {
				m.EnvVar = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EnvVar[mapkey] = mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResTagMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResTagMap == nil {
				m.ResTagMap = make(map[string]*ResTagTableKey)
			}
			var mapkey string
			var mapvalue *ResTagTableKey
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCloudlet
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCloudlet
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResTagTableKey{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResTagMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessVars == nil {
				m.AccessVars = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCloudlet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCloudlet
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCloudlet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCloudlet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AccessVars[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlavorMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlavorMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlavorMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlavorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlavorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlavorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcpus", wireType)
			}
			m.Vcpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vcpus |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSAZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSAZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSAZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CloudletState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxRam", wireType)
			}
			m.OsMaxRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxRam |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxVcores", wireType)
			}
			m.OsMaxVcores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxVcores |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxVolGb", wireType)
			}
			m.OsMaxVolGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxVolGb |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, &FlavorInfo{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZones = append(m.AvailabilityZones, &OSAZone{})
			if err := m.AvailabilityZones[len(m.AvailabilityZones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImages = append(m.OsImages, &OSImage{})
			if err := m.OsImages[len(m.OsImages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			m.Foo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Foo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudlet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudlet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudlet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudlet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudlet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloudlet.proto", fileDescriptorCloudlet) }

var fileDescriptorCloudlet = []byte{
	// 2917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x18, 0x4b, 0x6c, 0x1b, 0xc7,
	0xd5, 0x2b, 0x51, 0x1f, 0x0e, 0x29, 0x8a, 0x1a, 0xfd, 0xd6, 0x74, 0x62, 0x3b, 0xcc, 0xcf, 0x75,
	0x64, 0x31, 0x91, 0x1b, 0xd4, 0x55, 0xe3, 0x24, 0x94, 0x44, 0x39, 0x82, 0x24, 0x4a, 0x5d, 0x52,
	0x4e, 0x93, 0xcb, 0x62, 0xb4, 0x3b, 0xa4, 0x36, 0xde, 0xdd, 0xd9, 0xce, 0xec, 0xd2, 0xa2, 0x4f,
	0x6d, 0x2e, 0xbd, 0xf4, 0x9b, 0x5e, 0x02, 0x03, 0x45, 0x73, 0xcc, 0x31, 0x28, 0xd0, 0x4b, 0x4f,
	0x05, 0x7a, 0x71, 0x0b, 0x14, 0x48, 0x5b, 0xa0, 0x97, 0x02, 0x45, 0x6a, 0xf4, 0x50, 0xe4, 0x54,
	0x20, 0x12, 0x5a, 0xf4, 0x54, 0xcc, 0x67, 0xc9, 0x25, 0x45, 0xb9, 0x56, 0x9d, 0xcb, 0x62, 0xe6,
	0xfd, 0xf6, 0xbd, 0x37, 0xef, 0x37, 0x03, 0x72, 0x96, 0x4b, 0x22, 0xdb, 0xc5, 0xe1, 0x62, 0x40,
	0x49, 0x48, 0x60, 0x1a, 0xdb, 0x4d, 0x2c, 0x96, 0x85, 0xa7, 0x9a, 0x84, 0x34, 0x5d, 0x5c, 0x42,
	0x81, 0x53, 0x42, 0xbe, 0x4f, 0x42, 0x14, 0x3a, 0xc4, 0x67, 0x92, 0xb0, 0x70, 0xa3, 0xe9, 0x84,
	0x07, 0xd1, 0xfe, 0xa2, 0x45, 0xbc, 0x92, 0x47, 0xf6, 0x1d, 0x97, 0x33, 0x1e, 0x96, 0xf8, 0xf7,
	0x9a, 0x90, 0x59, 0x12, 0x74, 0x4d, 0xec, 0x77, 0x16, 0x8a, 0x33, 0xdb, 0x70, 0x51, 0x8b, 0x50,
	0xb5, 0xcb, 0x91, 0x00, 0x53, 0x14, 0x76, 0xf6, 0x59, 0x8a, 0x59, 0xe4, 0x2a, 0x75, 0x0a, 0x53,
	0x14, 0xb3, 0x10, 0x35, 0x43, 0xb4, 0xef, 0xe2, 0x98, 0xc0, 0x22, 0x9e, 0x47, 0x62, 0x61, 0xab,
	0xff, 0x53, 0x0d, 0xfb, 0x9a, 0x87, 0x42, 0xeb, 0xe0, 0x1a, 0xf6, 0x9b, 0x8e, 0x8f, 0x4b, 0xb6,
	0x87, 0xaf, 0x09, 0xd6, 0x92, 0x4b, 0x2c, 0x25, 0x64, 0xa6, 0x49, 0x9a, 0x44, 0x02, 0xf9, 0x4a,
	0x42, 0x8b, 0x3f, 0xd0, 0x40, 0x66, 0x55, 0x79, 0x67, 0x13, 0xb7, 0xe1, 0x1b, 0x20, 0x1b, 0xeb,
	0x6a, 0xde, 0xc1, 0x6d, 0x5d, 0xbb, 0xac, 0x5d, 0xc9, 0x2c, 0xcd, 0x2d, 0x76, 0x3c, 0xb6, 0xb8,
	0xa3, 0xd0, 0x9b, 0xb8, 0xbd, 0x92, 0x7a, 0xf0, 0xd7, 0x4b, 0xe7, 0x8c, 0x0c, 0xe9, 0x82, 0x20,
	0x04, 0x29, 0x1f, 0x79, 0x58, 0x1f, 0xba, 0xac, 0x5d, 0x49, 0x1b, 0x62, 0xbd, 0xfc, 0x95, 0x7f,
	0x7c, 0xa1, 0x6b, 0xff, 0xfe, 0x42, 0xd7, 0xee, 0x1f, 0xeb, 0xe7, 0x63, 0xe2, 0x9b, 0x09, 0x41,
	0x8b, 0x55, 0xe4, 0xe1, 0x4f, 0x3e, 0xba, 0xa4, 0x15, 0xff, 0x35, 0x04, 0xa6, 0x25, 0xc2, 0x21,
	0x7e, 0xdd, 0xf1, 0xf0, 0x96, 0xe3, 0x39, 0x21, 0x83, 0x37, 0xc1, 0x05, 0x8b, 0x62, 0x14, 0x62,
	0xd3, 0x72, 0x23, 0x16, 0x62, 0x6a, 0x3a, 0x3e, 0x0b, 0xcd, 0xd0, 0xf1, 0x30, 0x89, 0x42, 0xa1,
	0xe6, 0xb0, 0xa1, 0x4b, 0x92, 0x55, 0x49, 0xb1, 0xe1, 0xb3, 0xb0, 0x2e, 0xf1, 0x9c, 0x3d, 0x0a,
	0xec, 0x53, 0xd9, 0x87, 0x24, 0xbb, 0x24, 0x19, 0xcc, 0x6e, 0x63, 0x17, 0x9f, 0xc6, 0x3e, 0x2c,
	0xd9, 0x25, 0xc9, 0x00, 0xf6, 0x57, 0xc1, 0xbc, 0x52, 0x1e, 0x05, 0x41, 0x2f, 0x6b, 0x4a, 0xb0,
	0xce, 0x48, 0x74, 0x39, 0x08, 0xfa, 0xd8, 0x94, 0xd2, 0x27, 0xd8, 0x46, 0x24, 0x9b, 0x44, 0x9f,
	0x64, 0x53, 0xca, 0x9e, 0x60, 0x1b, 0x95, 0x6c, 0x12, 0xdd, 0xcb, 0x56, 0xfc, 0xf5, 0x10, 0x98,
	0x8e, 0x23, 0x61, 0xc3, 0x6f, 0x50, 0xb4, 0x2a, 0x42, 0x10, 0xbe, 0x08, 0x26, 0x6d, 0x62, 0xdd,
	0xc1, 0xd4, 0xa4, 0xb8, 0xe9, 0xb0, 0x90, 0xca, 0xa0, 0x48, 0x1b, 0x39, 0x09, 0x36, 0x14, 0x14,
	0x9e, 0x07, 0xe3, 0xb6, 0xcf, 0xcc, 0x7b, 0xc4, 0x8f, 0x4f, 0x7f, 0xcc, 0xf6, 0xd9, 0xbb, 0xc4,
	0xc7, 0xf0, 0x65, 0x30, 0x13, 0x33, 0x9b, 0x0d, 0xc7, 0xc5, 0x26, 0xc3, 0xb4, 0x85, 0xa9, 0x70,
	0x5c, 0xda, 0x80, 0x31, 0x6e, 0xdd, 0x71, 0x71, 0x4d, 0x60, 0xe0, 0x2c, 0x18, 0xb5, 0x1a, 0x22,
	0x02, 0x53, 0x82, 0x66, 0xc4, 0x6a, 0xf0, 0xe8, 0x9a, 0x07, 0x63, 0x56, 0xc3, 0x8c, 0x18, 0xa6,
	0xc2, 0x05, 0x69, 0x63, 0xd4, 0x6a, 0xec, 0x31, 0x4c, 0xe1, 0x0b, 0x49, 0x2d, 0xcd, 0x00, 0x31,
	0x26, 0x8c, 0x4d, 0x1b, 0x13, 0x1d, 0x2d, 0x77, 0x11, 0x63, 0xf0, 0x79, 0x90, 0xf3, 0x71, 0x78,
	0x97, 0xd0, 0x3b, 0x26, 0xb3, 0x0e, 0xb0, 0x87, 0xf5, 0x31, 0x49, 0xa6, 0xa0, 0x35, 0x01, 0x84,
	0x5f, 0x05, 0x73, 0x7d, 0x46, 0x9b, 0x0c, 0x5b, 0x14, 0x87, 0xfa, 0xb8, 0x20, 0x9f, 0xe9, 0xb5,
	0xbd, 0x26, 0x70, 0x3c, 0x99, 0x26, 0xcb, 0xf7, 0x22, 0x8a, 0x77, 0x29, 0x8f, 0xf2, 0xd0, 0xc1,
	0x0c, 0x16, 0xc0, 0xb8, 0x4b, 0x2c, 0x11, 0xce, 0xca, 0x6f, 0x9d, 0x3d, 0x57, 0x86, 0x62, 0x46,
	0x22, 0x6a, 0x61, 0xb3, 0x49, 0x49, 0x14, 0x28, 0xbf, 0x4d, 0xc4, 0xd0, 0x5b, 0x1c, 0x08, 0x2f,
	0x80, 0x34, 0xb7, 0xd8, 0x14, 0x79, 0x25, 0x5d, 0x36, 0xce, 0x01, 0x3c, 0x69, 0xb8, 0x7c, 0x6e,
	0xed, 0x5d, 0x42, 0x6d, 0xe5, 0xaa, 0xce, 0xbe, 0xf8, 0x23, 0x0d, 0x4c, 0xdc, 0xb2, 0x82, 0x84,
	0x36, 0x3a, 0x18, 0x0b, 0x28, 0x79, 0x0f, 0x5b, 0xa1, 0x52, 0x26, 0xde, 0xf2, 0xbc, 0x4d, 0x9c,
	0x9c, 0x58, 0xf3, 0xa3, 0xe7, 0x07, 0xe5, 0x58, 0xd8, 0x44, 0x96, 0x45, 0x22, 0x3f, 0x54, 0xbf,
	0xcf, 0x29, 0x70, 0x59, 0x42, 0xe1, 0x8b, 0x20, 0xdf, 0xb4, 0x02, 0x13, 0x45, 0xe1, 0x01, 0x3f,
	0x33, 0x33, 0xa2, 0xae, 0x52, 0x66, 0xa2, 0x69, 0x05, 0xe5, 0x28, 0x3c, 0xd8, 0xc4, 0xed, 0x3d,
	0xea, 0x16, 0x3f, 0x93, 0xe9, 0xed, 0xd7, 0x42, 0x64, 0xdd, 0x49, 0xe8, 0xf5, 0x35, 0xa0, 0x13,
	0x66, 0xe2, 0xc3, 0x10, 0x53, 0x1f, 0xb9, 0x66, 0x7c, 0x44, 0xc2, 0x62, 0xa9, 0xe8, 0x2c, 0x61,
	0x15, 0x85, 0xae, 0x4a, 0xac, 0x30, 0xbf, 0x08, 0x26, 0x08, 0x33, 0x1d, 0x0f, 0x35, 0xb1, 0x99,
	0xa8, 0x3b, 0x19, 0xc2, 0x36, 0x38, 0x4c, 0xd0, 0xbc, 0x0a, 0xe6, 0x93, 0xc2, 0x29, 0x89, 0xc2,
	0x5e, 0x6f, 0xce, 0x74, 0x65, 0x1b, 0x02, 0x29, 0xd8, 0x9e, 0x03, 0x39, 0xc2, 0x4c, 0x0f, 0x1f,
	0xc6, 0xea, 0x28, 0x93, 0xb2, 0x84, 0x6d, 0xe3, 0x43, 0xa5, 0x04, 0xdc, 0x15, 0x05, 0xd3, 0x37,
	0xa9, 0x65, 0xb6, 0x10, 0x65, 0xfa, 0xc8, 0xe5, 0xe1, 0x2b, 0x99, 0xa5, 0xc5, 0xde, 0x82, 0xd9,
	0x6f, 0xaf, 0x80, 0x19, 0xd6, 0x6d, 0x44, 0x59, 0xc5, 0x0f, 0x69, 0xdb, 0x00, 0xa4, 0x03, 0x28,
	0xdc, 0x04, 0x93, 0x7d, 0x68, 0x98, 0x07, 0xc3, 0x71, 0x31, 0x4e, 0x1b, 0x7c, 0x09, 0x67, 0xc0,
	0x48, 0x0b, 0xb9, 0x51, 0x6c, 0xaf, 0xdc, 0x2c, 0x0f, 0xdd, 0xd0, 0x8a, 0x7f, 0x1e, 0x02, 0xf3,
	0x3d, 0x79, 0x9c, 0x70, 0xf3, 0xb3, 0x60, 0x22, 0x6e, 0x85, 0xe6, 0x1d, 0xc7, 0xb7, 0x95, 0xc4,
	0x6c, 0x0c, 0xdc, 0x74, 0x7c, 0x1b, 0x7e, 0x03, 0x14, 0x3c, 0x7c, 0x48, 0x98, 0x69, 0x11, 0x3f,
	0x44, 0x8e, 0xcf, 0xab, 0x5d, 0xbf, 0x7f, 0xe7, 0x05, 0xc5, 0x6a, 0x4c, 0xd0, 0xf5, 0xf5, 0x37,
	0xc1, 0x0c, 0x37, 0x85, 0x71, 0x7b, 0xcd, 0xa0, 0xf3, 0x67, 0xe1, 0xe8, 0xcc, 0xd2, 0xc5, 0x47,
	0xbb, 0xc5, 0x98, 0xee, 0xf0, 0x26, 0x94, 0xae, 0x80, 0x3c, 0xe2, 0x49, 0x95, 0x14, 0x97, 0x12,
	0xe2, 0x0a, 0x09, 0x71, 0x7d, 0x79, 0x67, 0x4c, 0xa2, 0xbe, 0x44, 0x7c, 0x03, 0xe4, 0x78, 0x8c,
	0x26, 0x84, 0x8c, 0x08, 0x21, 0x7a, 0x42, 0x48, 0x4f, 0xb2, 0x88, 0xd8, 0xed, 0x6e, 0x8b, 0xbf,
	0x1f, 0x06, 0xb9, 0x5d, 0x17, 0x85, 0x0d, 0x42, 0xbd, 0x55, 0xe2, 0x37, 0x9c, 0x26, 0xf7, 0x67,
	0xa7, 0x3e, 0x04, 0x28, 0x3c, 0x88, 0xfd, 0x19, 0x03, 0x77, 0x51, 0x78, 0x00, 0x9f, 0x06, 0x40,
	0xfa, 0x4f, 0x50, 0x48, 0xff, 0xa5, 0x05, 0x44, 0xa0, 0xaf, 0x82, 0x29, 0x9f, 0x84, 0x4e, 0xa3,
	0x6d, 0x5a, 0x21, 0x75, 0x4d, 0x64, 0xdb, 0x94, 0xa9, 0xb8, 0x9c, 0x94, 0x88, 0xd5, 0x90, 0xba,
	0x65, 0x0e, 0xe6, 0xa2, 0x5a, 0x28, 0x72, 0x43, 0x41, 0xa5, 0xc2, 0x31, 0x2d, 0x20, 0x1c, 0xcf,
	0x93, 0x21, 0x74, 0x99, 0x69, 0x61, 0x1a, 0x8a, 0x32, 0xab, 0x6a, 0x64, 0x26, 0x74, 0xd9, 0x2a,
	0xa6, 0x21, 0x2f, 0xaf, 0xf0, 0x75, 0x30, 0x86, 0xfd, 0x16, 0x8f, 0x55, 0x7d, 0x54, 0x84, 0xea,
	0xf3, 0x09, 0xfb, 0x7b, 0xcd, 0x5b, 0xac, 0xf8, 0xad, 0xdb, 0x88, 0xca, 0x08, 0x1d, 0xc5, 0x62,
	0x03, 0x9f, 0x01, 0xd9, 0x40, 0x51, 0x99, 0x21, 0x6a, 0xaa, 0x7a, 0x98, 0x89, 0x61, 0x75, 0xd4,
	0xe4, 0xf5, 0x2a, 0xc4, 0x2c, 0x34, 0x3d, 0x62, 0x63, 0x3d, 0x7d, 0x59, 0xbb, 0x32, 0x6e, 0x8c,
	0x73, 0xc0, 0x36, 0xb1, 0x31, 0xaf, 0x33, 0x2c, 0x40, 0xbe, 0x0e, 0x64, 0x9d, 0xe1, 0x6b, 0x2e,
	0xd3, 0x72, 0x31, 0xf2, 0xa3, 0x40, 0xf2, 0x64, 0x04, 0x4f, 0x46, 0xc1, 0x04, 0xdb, 0x1c, 0x18,
	0xe5, 0x4e, 0x25, 0xbe, 0x9e, 0x95, 0x75, 0x5f, 0xee, 0x0a, 0x5f, 0x07, 0x99, 0x84, 0x96, 0x67,
	0x4a, 0x94, 0xff, 0x68, 0x20, 0x17, 0x27, 0x8a, 0x81, 0xd9, 0x36, 0x0a, 0xe0, 0x62, 0x97, 0xbd,
	0x77, 0xe8, 0x49, 0x8c, 0x48, 0x6a, 0xe8, 0x11, 0xc2, 0xdf, 0x04, 0x63, 0x1e, 0x0a, 0x02, 0xc7,
	0x6f, 0xea, 0x43, 0xc2, 0x99, 0x2f, 0x0c, 0xe0, 0x91, 0xb2, 0x17, 0xb7, 0x25, 0xa1, 0xf4, 0x66,
	0xcc, 0x56, 0x58, 0x06, 0xd9, 0x24, 0xe2, 0x2c, 0x06, 0x2c, 0x2f, 0xdf, 0x3f, 0xd6, 0x5f, 0xe2,
	0x49, 0x79, 0x33, 0x1e, 0xa1, 0x16, 0x3a, 0xc3, 0x15, 0x87, 0xf4, 0x0f, 0x58, 0xbf, 0x3b, 0xd6,
	0xc7, 0xd4, 0xcf, 0x8a, 0xbf, 0xca, 0x82, 0xf1, 0x58, 0x41, 0xee, 0xdc, 0x86, 0x83, 0x5d, 0x9b,
	0xe9, 0xda, 0xe5, 0x61, 0xee, 0x5c, 0xb9, 0x8b, 0xdd, 0x31, 0xf4, 0xb8, 0xee, 0x78, 0x23, 0xd1,
	0xeb, 0x64, 0x72, 0x3d, 0xbd, 0x68, 0xf3, 0x44, 0x70, 0xf6, 0xa3, 0x10, 0xdb, 0xa6, 0x98, 0x51,
	0x4d, 0x39, 0xa3, 0x2e, 0x6e, 0x11, 0x4b, 0xf1, 0x76, 0x1b, 0xe2, 0x75, 0x00, 0x9c, 0xc0, 0x64,
	0x51, 0x10, 0x10, 0x2a, 0xa7, 0x95, 0xdc, 0xd2, 0x4c, 0xe2, 0xbf, 0x1b, 0x41, 0x4d, 0xe2, 0x8c,
	0xb4, 0x13, 0x2f, 0x79, 0x52, 0x30, 0x3e, 0xb6, 0x5b, 0xa6, 0x13, 0x30, 0xd5, 0xce, 0xd3, 0x12,
	0xb2, 0x11, 0x30, 0x3e, 0x19, 0xf8, 0x91, 0x67, 0xda, 0x6d, 0x1f, 0x79, 0x8a, 0x86, 0xc7, 0xec,
	0x88, 0x31, 0xe1, 0x47, 0xde, 0x9a, 0x84, 0x72, 0x3a, 0x03, 0x64, 0xf8, 0x98, 0x64, 0xba, 0x62,
	0xe0, 0x14, 0x71, 0x7b, 0xa2, 0x60, 0xf5, 0x8f, 0xa5, 0x2b, 0x53, 0x1f, 0x1f, 0xe9, 0xda, 0x07,
	0xbf, 0x38, 0x3f, 0xe2, 0x13, 0xcb, 0x0b, 0x84, 0x35, 0x20, 0xec, 0x4e, 0xad, 0xcf, 0x83, 0x51,
	0x4c, 0x29, 0xa1, 0x4c, 0x07, 0xdc, 0xb1, 0x2b, 0x13, 0x3d, 0xe4, 0x86, 0x42, 0xc2, 0x37, 0xc1,
	0x28, 0xd7, 0x37, 0x62, 0x22, 0xf2, 0x33, 0x4b, 0xb3, 0x89, 0xbf, 0xd6, 0x04, 0x62, 0xc3, 0x6f,
	0x90, 0x41, 0x3f, 0x53, 0x7c, 0xf0, 0x35, 0x30, 0xc2, 0x57, 0x58, 0x64, 0x47, 0x6e, 0x69, 0x3e,
	0x21, 0xa0, 0x4e, 0x91, 0x75, 0x07, 0xdb, 0x5c, 0x0e, 0xee, 0x57, 0x40, 0x32, 0xc1, 0xb7, 0x40,
	0xd6, 0xa2, 0x9e, 0x49, 0x5a, 0x98, 0x52, 0xc7, 0xc6, 0xfa, 0x84, 0x10, 0xd2, 0x73, 0xe0, 0xc6,
	0xf6, 0x8e, 0xc2, 0xf6, 0xcb, 0xc8, 0x58, 0xd4, 0x8b, 0x71, 0xf0, 0x06, 0xc8, 0xdb, 0x38, 0x70,
	0x49, 0xdb, 0xc3, 0x7e, 0x68, 0xf2, 0x73, 0x75, 0xf5, 0x1c, 0xcf, 0xe6, 0x7e, 0xae, 0xc9, 0x2e,
	0xd9, 0x16, 0xa7, 0x82, 0xaf, 0x81, 0x89, 0x6e, 0x5d, 0x69, 0x07, 0x58, 0x9f, 0x3c, 0x61, 0x49,
	0x5c, 0x9d, 0xea, 0xed, 0x00, 0x1b, 0x9d, 0x2a, 0xc4, 0x77, 0xf0, 0x15, 0xa0, 0x6a, 0xa5, 0xc9,
	0x68, 0x4b, 0x56, 0xc7, 0x3c, 0x0f, 0x84, 0x95, 0x74, 0xf7, 0x97, 0x13, 0x92, 0xa2, 0x46, 0x5b,
	0xa2, 0x58, 0x2e, 0x81, 0x51, 0x79, 0x47, 0xd3, 0xa7, 0x84, 0xd3, 0x93, 0x71, 0xb6, 0x2e, 0x10,
	0xdd, 0xe8, 0x56, 0x94, 0xbc, 0xde, 0x07, 0x07, 0x6d, 0xe6, 0x58, 0x7c, 0x46, 0xe1, 0xdd, 0x10,
	0xca, 0x7a, 0x1f, 0x03, 0x45, 0x0b, 0xbc, 0xd1, 0xad, 0xb0, 0xd3, 0xa2, 0x28, 0x5c, 0x1a, 0x90,
	0x39, 0x03, 0x6b, 0xab, 0x0e, 0xc6, 0x5a, 0x98, 0x32, 0x9e, 0x3e, 0x33, 0x72, 0x3a, 0x53, 0x5b,
	0xb8, 0x06, 0x46, 0x2d, 0x51, 0x93, 0xf5, 0x59, 0xa1, 0xec, 0xf9, 0x53, 0x8b, 0xf6, 0xc0, 0x28,
	0x91, 0xbc, 0xf0, 0x2d, 0x90, 0xa1, 0x98, 0xf1, 0xb2, 0x6d, 0x7a, 0x28, 0xd0, 0xe7, 0x84, 0x76,
	0xc5, 0x41, 0xda, 0x19, 0x98, 0xd5, 0x51, 0x73, 0x1b, 0x05, 0x42, 0xc1, 0x95, 0x14, 0x97, 0x69,
	0xa4, 0x69, 0x0c, 0x85, 0x6b, 0x20, 0x83, 0x2c, 0x0b, 0x33, 0x26, 0x87, 0x9e, 0x79, 0x21, 0xe9,
	0xd9, 0x41, 0x92, 0xca, 0x82, 0x2c, 0x31, 0xe9, 0xa0, 0x0e, 0xe0, 0x09, 0x8a, 0x77, 0xe1, 0x6d,
	0x90, 0xeb, 0xd5, 0x71, 0x00, 0x77, 0x29, 0xc9, 0xdd, 0xeb, 0x33, 0xc9, 0x5b, 0xe7, 0x37, 0xee,
	0x4d, 0xdc, 0x4e, 0x0a, 0xbe, 0x09, 0x26, 0xfb, 0x54, 0x3e, 0x53, 0x4d, 0x7e, 0xa8, 0xf1, 0xbb,
	0xee, 0x3f, 0xbf, 0xd0, 0xb5, 0xef, 0x1c, 0xe9, 0xda, 0x8f, 0x8f, 0x74, 0xed, 0xc3, 0x23, 0x5d,
	0xfb, 0xe4, 0x48, 0xd7, 0x1e, 0x1c, 0xe9, 0xda, 0xa7, 0xfc, 0x68, 0x8e, 0xf5, 0x1f, 0x6a, 0x5b,
	0xaa, 0xe2, 0x2d, 0xbe, 0x45, 0xa8, 0x73, 0x8f, 0x8f, 0x51, 0x6e, 0xd9, 0xb2, 0x22, 0x8a, 0xac,
	0xf6, 0x42, 0x07, 0x77, 0x9b, 0x0f, 0x1e, 0xd6, 0x20, 0xcc, 0x2a, 0x89, 0x28, 0xc3, 0xdd, 0x7d,
	0x2d, 0xc0, 0xd8, 0xee, 0x6e, 0x79, 0x81, 0x62, 0x21, 0xf2, 0x82, 0x85, 0x6e, 0xa9, 0x5a, 0x90,
	0x85, 0x64, 0x41, 0x46, 0xc9, 0x42, 0x35, 0x99, 0x0b, 0x67, 0xec, 0x23, 0xc5, 0x3f, 0x6a, 0x20,
	0x23, 0x53, 0x64, 0x9b, 0x57, 0xf4, 0x33, 0xb7, 0xcd, 0x4b, 0x20, 0x23, 0x13, 0x2a, 0x39, 0x84,
	0x03, 0x09, 0x12, 0x29, 0xf4, 0x12, 0x98, 0x42, 0x2d, 0xe4, 0xb8, 0x68, 0xdf, 0x71, 0x9d, 0xb0,
	0x2d, 0xef, 0x94, 0x72, 0xdc, 0xc9, 0x27, 0x11, 0xfc, 0x72, 0xb9, 0x5c, 0xb9, 0x7f, 0xac, 0x97,
	0xe3, 0x09, 0xf6, 0x31, 0x4d, 0x58, 0x90, 0x3f, 0xbb, 0xb9, 0xde, 0xf9, 0x67, 0xf1, 0x7d, 0x0d,
	0x00, 0xb9, 0xe5, 0xc5, 0xb6, 0xf3, 0x8e, 0xa1, 0x75, 0xdf, 0x31, 0xc4, 0xb1, 0x5b, 0x41, 0xc4,
	0xc4, 0xb1, 0xa7, 0x0c, 0xb9, 0xe1, 0xe1, 0x41, 0x91, 0x27, 0xac, 0x48, 0x19, 0x7c, 0xc9, 0x79,
	0x6d, 0x87, 0xc9, 0xfb, 0x42, 0xca, 0x10, 0x6b, 0xf8, 0x1c, 0x00, 0x7d, 0xa3, 0x67, 0x5a, 0xa5,
	0x55, 0x02, 0x5e, 0x7c, 0x15, 0x8c, 0xed, 0xd4, 0xca, 0xe2, 0xce, 0x3c, 0x48, 0x81, 0xb9, 0x4e,
	0xa3, 0x90, 0x81, 0xa7, 0x76, 0x45, 0xca, 0xd9, 0xc4, 0x10, 0x3e, 0x90, 0x0d, 0x82, 0x54, 0x88,
	0x9a, 0x31, 0x93, 0x58, 0xc3, 0x8b, 0x3d, 0xfa, 0xa8, 0x23, 0xe8, 0x42, 0xf8, 0x19, 0x71, 0xbd,
	0x4d, 0x5e, 0x59, 0x50, 0xa8, 0x9c, 0x0f, 0x38, 0x68, 0x5d, 0x40, 0x8a, 0xdf, 0x1d, 0x01, 0xd9,
	0xc4, 0x3d, 0x83, 0x7c, 0x69, 0x53, 0xc4, 0x62, 0xdc, 0xcb, 0x86, 0x45, 0x07, 0xd0, 0x07, 0x70,
	0x88, 0x66, 0x16, 0x77, 0xaf, 0x0b, 0x20, 0xad, 0x6a, 0xbf, 0x63, 0xab, 0xf7, 0x94, 0x71, 0x09,
	0xd8, 0xb0, 0xb9, 0x99, 0xfc, 0x1a, 0x43, 0x89, 0xeb, 0x76, 0xde, 0x0c, 0x12, 0x10, 0xf8, 0x14,
	0x00, 0xfc, 0x92, 0x87, 0x0e, 0x4d, 0x7e, 0x86, 0xa3, 0xe2, 0xc0, 0xc6, 0x09, 0xdb, 0x46, 0x87,
	0x06, 0xf2, 0xd4, 0xed, 0x92, 0x63, 0x5b, 0x16, 0xa1, 0x58, 0x4e, 0x17, 0x29, 0x7e, 0xbb, 0xdc,
	0x46, 0x87, 0xb7, 0x05, 0x08, 0x3e, 0xd3, 0xa5, 0x21, 0xae, 0xd9, 0xdc, 0x17, 0xd3, 0x45, 0xca,
	0x00, 0x92, 0x86, 0xb8, 0xb7, 0xf6, 0xb9, 0x67, 0xd4, 0x18, 0x90, 0x96, 0x9e, 0x51, 0x7d, 0xbf,
	0x04, 0xc6, 0x64, 0x1c, 0xca, 0xf9, 0xa0, 0xb7, 0xf1, 0x77, 0x63, 0xd1, 0x88, 0xa9, 0xe0, 0xf5,
	0xc7, 0x1b, 0x14, 0x52, 0x3d, 0xb3, 0x41, 0xa2, 0xab, 0x64, 0x7b, 0xbb, 0x4a, 0x19, 0xc0, 0x13,
	0x69, 0xc6, 0xf4, 0x09, 0xa1, 0x0a, 0x4c, 0x4e, 0x3e, 0x32, 0x24, 0x8d, 0xa9, 0xfe, 0xdc, 0xe3,
	0x26, 0xa4, 0xe3, 0xfb, 0x37, 0xd3, 0x73, 0x03, 0x38, 0x45, 0x54, 0x72, 0x97, 0x8a, 0x05, 0x5b,
	0xde, 0xec, 0xaf, 0x8f, 0x1f, 0xa9, 0xba, 0xf8, 0xd9, 0x91, 0x78, 0x1f, 0x3c, 0x53, 0x21, 0x7a,
	0x16, 0x4c, 0xc6, 0x21, 0xb1, 0x8d, 0x43, 0xea, 0x58, 0x22, 0x1b, 0x1b, 0x84, 0x88, 0x93, 0x4e,
	0x19, 0x7c, 0x79, 0xf5, 0x37, 0x1a, 0xc8, 0x26, 0x47, 0x07, 0x38, 0x07, 0xe0, 0xee, 0x56, 0xb9,
	0xbe, 0xbe, 0x63, 0x6c, 0x9b, 0xf5, 0x77, 0x76, 0x2b, 0xe6, 0x7a, 0x79, 0xb3, 0x92, 0x3f, 0x77,
	0x12, 0xbe, 0xb6, 0x51, 0x5d, 0xcb, 0x6b, 0xf0, 0x02, 0x98, 0xef, 0x85, 0xef, 0xec, 0x56, 0xaa,
	0xb5, 0x7a, 0x79, 0x75, 0x33, 0x3f, 0x04, 0xe7, 0xc1, 0x74, 0x2f, 0xb2, 0xfc, 0xee, 0x9e, 0x51,
	0xc9, 0x0f, 0xc3, 0x59, 0x30, 0xd5, 0x8b, 0xb8, 0xb5, 0xba, 0x9b, 0x4f, 0xc1, 0xf3, 0x60, 0xb6,
	0x17, 0x5c, 0x59, 0xbb, 0x55, 0x59, 0xd9, 0xf9, 0x56, 0x7e, 0xe4, 0xe4, 0x7f, 0xb8, 0x5e, 0x1b,
	0xd5, 0x75, 0xa3, 0x9c, 0x1f, 0xbd, 0xfa, 0x07, 0x0d, 0x4c, 0xf4, 0x84, 0x3f, 0x2c, 0x80, 0xb9,
	0xd5, 0xad, 0x9d, 0xbd, 0xb5, 0xad, 0x4a, 0xdd, 0xac, 0xd5, 0xcb, 0xf5, 0x8a, 0xb9, 0x57, 0xdd,
	0xac, 0xee, 0xbc, 0x5d, 0xcd, 0x9f, 0xe3, 0x7f, 0xe9, 0xc3, 0x55, 0x0c, 0x63, 0xc7, 0xa8, 0xe5,
	0x35, 0xa8, 0x83, 0x99, 0x3e, 0x94, 0x51, 0x29, 0xaf, 0xbd, 0x93, 0x1f, 0x1a, 0x20, 0x70, 0x67,
	0x7d, 0x7d, 0x6b, 0xa3, 0xca, 0xad, 0xb9, 0x08, 0x0a, 0x7d, 0xb8, 0xea, 0x4e, 0xdd, 0xdc, 0x35,
	0x2a, 0xb5, 0x4a, 0xb5, 0x9e, 0x4f, 0x71, 0x37, 0xf4, 0xe1, 0x37, 0xaa, 0x1b, 0xf5, 0xfc, 0xc8,
	0x20, 0x2d, 0x77, 0x6f, 0x19, 0xe5, 0xb5, 0x4a, 0x7e, 0x74, 0xe9, 0x2f, 0xe3, 0xdd, 0xc7, 0xe7,
	0x72, 0xe0, 0xc0, 0xdf, 0xf2, 0x1b, 0x99, 0x7a, 0xc2, 0x55, 0x57, 0x93, 0xe9, 0x01, 0xd9, 0x5f,
	0x98, 0xea, 0xed, 0xe4, 0x91, 0x1b, 0x16, 0xbf, 0xaf, 0x7d, 0x7e, 0xa4, 0x5f, 0x37, 0xd4, 0xbb,
	0x59, 0x4c, 0xc9, 0x16, 0xca, 0x16, 0xef, 0x88, 0xdb, 0xc8, 0x47, 0x4d, 0xbc, 0x30, 0x28, 0x86,
	0x3e, 0x3e, 0xd6, 0xb5, 0x87, 0xc7, 0xfa, 0x52, 0x35, 0x79, 0x19, 0xe8, 0xb6, 0xd2, 0x2d, 0x14,
	0x3a, 0x61, 0x64, 0x27, 0x7a, 0xed, 0x16, 0xf1, 0x9b, 0x02, 0xf4, 0xfe, 0x9f, 0xfe, 0xfe, 0xd3,
	0xa1, 0xd9, 0x62, 0xbe, 0x24, 0x1f, 0x6f, 0x4b, 0x71, 0x0b, 0x5a, 0xd6, 0xae, 0xbe, 0xac, 0xc1,
	0x9f, 0x68, 0x20, 0xb7, 0xa6, 0x1e, 0x84, 0xcf, 0x68, 0xcb, 0xde, 0x13, 0x98, 0x22, 0x94, 0x9a,
	0x29, 0x4e, 0x96, 0xe4, 0x1b, 0xaf, 0x54, 0x2a, 0xd6, 0xe9, 0x03, 0x0d, 0xe4, 0xf6, 0xd4, 0x1b,
	0xf7, 0x19, 0x75, 0xba, 0xfd, 0xa4, 0x3a, 0x71, 0x47, 0xc9, 0xe7, 0xea, 0x3e, 0x47, 0xdd, 0x03,
	0xd9, 0xda, 0x01, 0xb9, 0xfb, 0x68, 0x8d, 0x06, 0x01, 0x8b, 0xaf, 0x7f, 0x7e, 0xa4, 0x3f, 0x7d,
	0x9a, 0x4e, 0xb7, 0x1d, 0x7c, 0x77, 0xe1, 0xd3, 0xf8, 0xef, 0xd3, 0xc5, 0x5c, 0x89, 0x1d, 0x90,
	0xbb, 0x7d, 0xff, 0xfe, 0x99, 0x06, 0x66, 0xcb, 0xb6, 0xdd, 0x7b, 0x53, 0xe7, 0xf7, 0x63, 0x78,
	0xfe, 0xd4, 0x8b, 0xfc, 0x97, 0xe9, 0x1d, 0xa1, 0xdb, 0xf9, 0xe2, 0x4c, 0x09, 0xd9, 0xb6, 0x7a,
	0x11, 0x48, 0x6a, 0x08, 0x7f, 0xae, 0x01, 0xdd, 0xc0, 0x1e, 0x69, 0xe1, 0x27, 0x56, 0x71, 0xef,
	0x49, 0x54, 0xd4, 0x8b, 0xd3, 0x25, 0xea, 0x0d, 0xd2, 0xf0, 0x43, 0x0d, 0x4c, 0xae, 0x3b, 0xbe,
	0x9d, 0x1c, 0x07, 0xe7, 0x4e, 0x74, 0x31, 0x01, 0x2f, 0x9c, 0x02, 0x17, 0xaa, 0xbd, 0xf2, 0xc8,
	0x73, 0x3c, 0x55, 0xb1, 0x42, 0x71, 0xb6, 0xd4, 0x70, 0xfc, 0x41, 0xce, 0x5b, 0xfa, 0xe5, 0x50,
	0xb7, 0x3b, 0xf0, 0xb6, 0xc8, 0x2b, 0xcc, 0x7d, 0x0d, 0xe4, 0x93, 0xd1, 0x26, 0x06, 0x97, 0xf9,
	0x01, 0x8e, 0xe4, 0x88, 0xc2, 0x69, 0x88, 0xa2, 0xf1, 0xff, 0x6b, 0x3c, 0x5f, 0x84, 0xbd, 0x91,
	0xe8, 0xf8, 0x0d, 0x22, 0xa3, 0x71, 0x05, 0xc0, 0x0d, 0xff, 0x3d, 0x6c, 0x85, 0x8f, 0xa7, 0xdd,
	0x80, 0x43, 0x3e, 0x07, 0xcb, 0x60, 0xaa, 0xd2, 0x72, 0x9e, 0x44, 0xc4, 0xd2, 0xf7, 0x34, 0x00,
	0xfb, 0xba, 0x2a, 0x77, 0xdd, 0xb7, 0xc1, 0x74, 0xd2, 0x73, 0x71, 0xbf, 0x2d, 0x0c, 0x90, 0xad,
	0x70, 0x85, 0x47, 0xe0, 0x8a, 0x97, 0x3b, 0xe7, 0xd7, 0xe3, 0x0d, 0x4f, 0xa2, 0x85, 0x43, 0x56,
	0xf2, 0x0f, 0xfe, 0x76, 0xf1, 0xdc, 0x83, 0x87, 0x17, 0xb5, 0x4f, 0x1f, 0x5e, 0xd4, 0x3e, 0x7b,
	0x78, 0x51, 0xdb, 0x1f, 0x15, 0xc2, 0xae, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x78, 0xf9, 0xa6,
	0x9a, 0xd2, 0x1d, 0x00, 0x00,
}
