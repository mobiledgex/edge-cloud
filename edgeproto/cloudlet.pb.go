// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CloudletState is the state of the Cloudlet.
type CloudletState int32

const (
	// Unknown
	CloudletState_CloudletStateUnknown CloudletState = 0
	// Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
	CloudletState_CloudletStateErrors CloudletState = 1
	// Cloudlet is created and ready
	CloudletState_CloudletStateReady CloudletState = 2
	// Cloudlet is offline (unreachable)
	CloudletState_CloudletStateOffline CloudletState = 3
	// Cloudlet is not present
	CloudletState_CloudletStateNotPresent CloudletState = 4
)

var CloudletState_name = map[int32]string{
	0: "CloudletStateUnknown",
	1: "CloudletStateErrors",
	2: "CloudletStateReady",
	3: "CloudletStateOffline",
	4: "CloudletStateNotPresent",
}
var CloudletState_value = map[string]int32{
	"CloudletStateUnknown":    0,
	"CloudletStateErrors":     1,
	"CloudletStateReady":      2,
	"CloudletStateOffline":    3,
	"CloudletStateNotPresent": 4,
}

func (x CloudletState) String() string {
	return proto.EnumName(CloudletState_name, int32(x))
}
func (CloudletState) EnumDescriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{0} }

// CloudletKey uniquely identifies a Cloudlet.
type CloudletKey struct {
	// Operator of the cloudlet site
	OperatorKey OperatorKey `protobuf:"bytes,1,opt,name=operator_key,json=operatorKey" json:"operator_key"`
	// Name of the cloudlet
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletKey) Reset()                    { *m = CloudletKey{} }
func (m *CloudletKey) String() string            { return proto.CompactTextString(m) }
func (*CloudletKey) ProtoMessage()               {}
func (*CloudletKey) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{0} }

// A Cloudlet is a set of compute resources at a particular location, typically an Operator's regional data center, or a cell tower. The Cloudlet is managed by a Cloudlet Resource Manager, which communicates with the Mobiledgex Controller and allows AppInsts (application instances) to be instantiated on the Cloudlet.
// A Cloudlet will be created by either a Mobiledgex admin or an Operator that provides the Cloudlet.
type Cloudlet struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// URI to use to connect to and create and administer the Cloudlet. This is not the URI for applications clients to access their back-end instances.
	AccessUri string `protobuf:"bytes,4,opt,name=access_uri,json=accessUri,proto3" json:"access_uri,omitempty"`
	// Location of the Cloudlet site
	Location distributed_match_engine.Loc `protobuf:"bytes,5,opt,name=location" json:"location"`
	// Type of IP support provided by Cloudlet (see IpSupport)
	IpSupport IpSupport `protobuf:"varint,6,opt,name=ip_support,json=ipSupport,proto3,enum=edgeproto.IpSupport" json:"ip_support,omitempty"`
	// List of static IPs for static IP support
	StaticIps string `protobuf:"bytes,7,opt,name=static_ips,json=staticIps,proto3" json:"static_ips,omitempty"`
	// Number of dynamic IPs available for dynamic IP support
	NumDynamicIps int32 `protobuf:"varint,8,opt,name=num_dynamic_ips,json=numDynamicIps,proto3" json:"num_dynamic_ips,omitempty"`
}

func (m *Cloudlet) Reset()                    { *m = Cloudlet{} }
func (m *Cloudlet) String() string            { return proto.CompactTextString(m) }
func (*Cloudlet) ProtoMessage()               {}
func (*Cloudlet) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{1} }

// CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.
type CloudletInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// State of cloudlet
	State CloudletState `protobuf:"varint,3,opt,name=state,proto3,enum=edgeproto.CloudletState" json:"state,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,4,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Connected controller unique id
	Controller string `protobuf:"bytes,5,opt,name=controller,proto3" json:"controller,omitempty"`
	// Maximum Ram in MB on the Cloudlet
	OsMaxRam uint64 `protobuf:"varint,6,opt,name=os_max_ram,json=osMaxRam,proto3" json:"os_max_ram,omitempty"`
	// Maximum number of VCPU cores on the Cloudlet
	OsMaxVcores uint64 `protobuf:"varint,7,opt,name=os_max_vcores,json=osMaxVcores,proto3" json:"os_max_vcores,omitempty"`
	// Maximum amount of disk in GB on the Cloudlet
	OsMaxVolGb uint64 `protobuf:"varint,8,opt,name=os_max_vol_gb,json=osMaxVolGb,proto3" json:"os_max_vol_gb,omitempty"`
	// Any errors encountered while making changes to the Cloudlet
	Errors []string `protobuf:"bytes,9,rep,name=errors" json:"errors,omitempty"`
}

func (m *CloudletInfo) Reset()                    { *m = CloudletInfo{} }
func (m *CloudletInfo) String() string            { return proto.CompactTextString(m) }
func (*CloudletInfo) ProtoMessage()               {}
func (*CloudletInfo) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{2} }

// (TODO) CloudletMetrics provide metrics collected about the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
type CloudletMetrics struct {
	// what goes here?
	Foo uint64 `protobuf:"varint,5,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (m *CloudletMetrics) Reset()                    { *m = CloudletMetrics{} }
func (m *CloudletMetrics) String() string            { return proto.CompactTextString(m) }
func (*CloudletMetrics) ProtoMessage()               {}
func (*CloudletMetrics) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{3} }

func init() {
	proto.RegisterType((*CloudletKey)(nil), "edgeproto.CloudletKey")
	proto.RegisterType((*Cloudlet)(nil), "edgeproto.Cloudlet")
	proto.RegisterType((*CloudletInfo)(nil), "edgeproto.CloudletInfo")
	proto.RegisterType((*CloudletMetrics)(nil), "edgeproto.CloudletMetrics")
	proto.RegisterEnum("edgeproto.CloudletState", CloudletState_name, CloudletState_value)
}
func (this *CloudletKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.CloudletKey{")
	s = append(s, "OperatorKey: "+strings.Replace(this.OperatorKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudlet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletApi service

type CloudletApiClient interface {
	// Create a Cloudlet
	CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_CreateCloudletClient, error)
	// Delete a Cloudlet
	DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_DeleteCloudletClient, error)
	// Update a Cloudlet
	UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_UpdateCloudletClient, error)
	// Show Cloudlets
	ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error)
}

type cloudletApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletApiClient(cc *grpc.ClientConn) CloudletApiClient {
	return &cloudletApiClient{cc}
}

func (c *cloudletApiClient) CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_CreateCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletApi/CreateCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiCreateCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_CreateCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiCreateCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiCreateCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_DeleteCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[1], c.cc, "/edgeproto.CloudletApi/DeleteCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiDeleteCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_DeleteCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiDeleteCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiDeleteCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_UpdateCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[2], c.cc, "/edgeproto.CloudletApi/UpdateCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiUpdateCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_UpdateCloudletClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cloudletApiUpdateCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiUpdateCloudletClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletApiClient) ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[3], c.cc, "/edgeproto.CloudletApi/ShowCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiShowCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_ShowCloudletClient interface {
	Recv() (*Cloudlet, error)
	grpc.ClientStream
}

type cloudletApiShowCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiShowCloudletClient) Recv() (*Cloudlet, error) {
	m := new(Cloudlet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletApi service

type CloudletApiServer interface {
	// Create a Cloudlet
	CreateCloudlet(*Cloudlet, CloudletApi_CreateCloudletServer) error
	// Delete a Cloudlet
	DeleteCloudlet(*Cloudlet, CloudletApi_DeleteCloudletServer) error
	// Update a Cloudlet
	UpdateCloudlet(*Cloudlet, CloudletApi_UpdateCloudletServer) error
	// Show Cloudlets
	ShowCloudlet(*Cloudlet, CloudletApi_ShowCloudletServer) error
}

func RegisterCloudletApiServer(s *grpc.Server, srv CloudletApiServer) {
	s.RegisterService(&_CloudletApi_serviceDesc, srv)
}

func _CloudletApi_CreateCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).CreateCloudlet(m, &cloudletApiCreateCloudletServer{stream})
}

type CloudletApi_CreateCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiCreateCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiCreateCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_DeleteCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).DeleteCloudlet(m, &cloudletApiDeleteCloudletServer{stream})
}

type CloudletApi_DeleteCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiDeleteCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiDeleteCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_UpdateCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).UpdateCloudlet(m, &cloudletApiUpdateCloudletServer{stream})
}

type CloudletApi_UpdateCloudletServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cloudletApiUpdateCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiUpdateCloudletServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletApi_ShowCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).ShowCloudlet(m, &cloudletApiShowCloudletServer{stream})
}

type CloudletApi_ShowCloudletServer interface {
	Send(*Cloudlet) error
	grpc.ServerStream
}

type cloudletApiShowCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiShowCloudletServer) Send(m *Cloudlet) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletApi",
	HandlerType: (*CloudletApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCloudlet",
			Handler:       _CloudletApi_CreateCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteCloudlet",
			Handler:       _CloudletApi_DeleteCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateCloudlet",
			Handler:       _CloudletApi_UpdateCloudlet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCloudlet",
			Handler:       _CloudletApi_ShowCloudlet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

// Client API for CloudletInfoApi service

type CloudletInfoApiClient interface {
	// Show CloudletInfos
	ShowCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (CloudletInfoApi_ShowCloudletInfoClient, error)
	// Inject (create) a CloudletInfo for regression testing
	InjectCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error)
	// Evict (delete) a CloudletInfo for regression testing
	EvictCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error)
}

type cloudletInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletInfoApiClient(cc *grpc.ClientConn) CloudletInfoApiClient {
	return &cloudletInfoApiClient{cc}
}

func (c *cloudletInfoApiClient) ShowCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (CloudletInfoApi_ShowCloudletInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletInfoApi/ShowCloudletInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletInfoApiShowCloudletInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletInfoApi_ShowCloudletInfoClient interface {
	Recv() (*CloudletInfo, error)
	grpc.ClientStream
}

type cloudletInfoApiShowCloudletInfoClient struct {
	grpc.ClientStream
}

func (x *cloudletInfoApiShowCloudletInfoClient) Recv() (*CloudletInfo, error) {
	m := new(CloudletInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudletInfoApiClient) InjectCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletInfoApi/InjectCloudletInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletInfoApiClient) EvictCloudletInfo(ctx context.Context, in *CloudletInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudletInfoApi/EvictCloudletInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudletInfoApi service

type CloudletInfoApiServer interface {
	// Show CloudletInfos
	ShowCloudletInfo(*CloudletInfo, CloudletInfoApi_ShowCloudletInfoServer) error
	// Inject (create) a CloudletInfo for regression testing
	InjectCloudletInfo(context.Context, *CloudletInfo) (*Result, error)
	// Evict (delete) a CloudletInfo for regression testing
	EvictCloudletInfo(context.Context, *CloudletInfo) (*Result, error)
}

func RegisterCloudletInfoApiServer(s *grpc.Server, srv CloudletInfoApiServer) {
	s.RegisterService(&_CloudletInfoApi_serviceDesc, srv)
}

func _CloudletInfoApi_ShowCloudletInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletInfoApiServer).ShowCloudletInfo(m, &cloudletInfoApiShowCloudletInfoServer{stream})
}

type CloudletInfoApi_ShowCloudletInfoServer interface {
	Send(*CloudletInfo) error
	grpc.ServerStream
}

type cloudletInfoApiShowCloudletInfoServer struct {
	grpc.ServerStream
}

func (x *cloudletInfoApiShowCloudletInfoServer) Send(m *CloudletInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudletInfoApi_InjectCloudletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletInfoApiServer).InjectCloudletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletInfoApi/InjectCloudletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletInfoApiServer).InjectCloudletInfo(ctx, req.(*CloudletInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletInfoApi_EvictCloudletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudletInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletInfoApiServer).EvictCloudletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudletInfoApi/EvictCloudletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletInfoApiServer).EvictCloudletInfo(ctx, req.(*CloudletInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudletInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletInfoApi",
	HandlerType: (*CloudletInfoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectCloudletInfo",
			Handler:    _CloudletInfoApi_InjectCloudletInfo_Handler,
		},
		{
			MethodName: "EvictCloudletInfo",
			Handler:    _CloudletInfoApi_EvictCloudletInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletInfo",
			Handler:       _CloudletInfoApi_ShowCloudletInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

// Client API for CloudletMetricsApi service

type CloudletMetricsApiClient interface {
	// Show Cloudlet metrics
	ShowCloudletMetrics(ctx context.Context, in *CloudletMetrics, opts ...grpc.CallOption) (CloudletMetricsApi_ShowCloudletMetricsClient, error)
}

type cloudletMetricsApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletMetricsApiClient(cc *grpc.ClientConn) CloudletMetricsApiClient {
	return &cloudletMetricsApiClient{cc}
}

func (c *cloudletMetricsApiClient) ShowCloudletMetrics(ctx context.Context, in *CloudletMetrics, opts ...grpc.CallOption) (CloudletMetricsApi_ShowCloudletMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletMetricsApi_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudletMetricsApi/ShowCloudletMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletMetricsApiShowCloudletMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletMetricsApi_ShowCloudletMetricsClient interface {
	Recv() (*CloudletMetrics, error)
	grpc.ClientStream
}

type cloudletMetricsApiShowCloudletMetricsClient struct {
	grpc.ClientStream
}

func (x *cloudletMetricsApiShowCloudletMetricsClient) Recv() (*CloudletMetrics, error) {
	m := new(CloudletMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletMetricsApi service

type CloudletMetricsApiServer interface {
	// Show Cloudlet metrics
	ShowCloudletMetrics(*CloudletMetrics, CloudletMetricsApi_ShowCloudletMetricsServer) error
}

func RegisterCloudletMetricsApiServer(s *grpc.Server, srv CloudletMetricsApiServer) {
	s.RegisterService(&_CloudletMetricsApi_serviceDesc, srv)
}

func _CloudletMetricsApi_ShowCloudletMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudletMetrics)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletMetricsApiServer).ShowCloudletMetrics(m, &cloudletMetricsApiShowCloudletMetricsServer{stream})
}

type CloudletMetricsApi_ShowCloudletMetricsServer interface {
	Send(*CloudletMetrics) error
	grpc.ServerStream
}

type cloudletMetricsApiShowCloudletMetricsServer struct {
	grpc.ServerStream
}

func (x *cloudletMetricsApiShowCloudletMetricsServer) Send(m *CloudletMetrics) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletMetricsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudletMetricsApi",
	HandlerType: (*CloudletMetricsApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudletMetrics",
			Handler:       _CloudletMetricsApi_ShowCloudletMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

func (m *CloudletKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.OperatorKey.Size()))
	n1, err := m.OperatorKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Cloudlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cloudlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.AccessUri) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.AccessUri)))
		i += copy(dAtA[i:], m.AccessUri)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Location.Size()))
	n3, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.IpSupport != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.IpSupport))
	}
	if len(m.StaticIps) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.StaticIps)))
		i += copy(dAtA[i:], m.StaticIps)
	}
	if m.NumDynamicIps != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.NumDynamicIps))
	}
	return i, nil
}

func (m *CloudletInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n4, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.State))
	}
	if m.NotifyId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.Controller) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Controller)))
		i += copy(dAtA[i:], m.Controller)
	}
	if m.OsMaxRam != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxRam))
	}
	if m.OsMaxVcores != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxVcores))
	}
	if m.OsMaxVolGb != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.OsMaxVolGb))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CloudletMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletMetrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(m.Foo))
	}
	return i, nil
}

func encodeVarintCloudlet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletKey) Matches(o *CloudletKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.OperatorKey.Matches(&o.OperatorKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *CloudletKey) CopyInFields(src *CloudletKey) {
	m.OperatorKey.Name = src.OperatorKey.Name
	m.Name = src.Name
}

func (m *CloudletKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal CloudletKey key string", "obj", m)
	}
	return string(key)
}

func CloudletKeyStringParse(str string, key *CloudletKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal CloudletKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *CloudletKey) ValidateEnums() error {
	if err := m.OperatorKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *Cloudlet) Matches(o *Cloudlet, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.AccessUri != "" {
		if o.AccessUri != m.AccessUri {
			return false
		}
	}
	if !opts.Filter || o.IpSupport != 0 {
		if o.IpSupport != m.IpSupport {
			return false
		}
	}
	if !opts.Filter || o.StaticIps != "" {
		if o.StaticIps != m.StaticIps {
			return false
		}
	}
	if !opts.Filter || o.NumDynamicIps != 0 {
		if o.NumDynamicIps != m.NumDynamicIps {
			return false
		}
	}
	return true
}

const CloudletFieldKey = "2"
const CloudletFieldKeyOperatorKey = "2.1"
const CloudletFieldKeyOperatorKeyName = "2.1.1"
const CloudletFieldKeyName = "2.2"
const CloudletFieldAccessUri = "4"
const CloudletFieldLocation = "5"
const CloudletFieldLocationLatitude = "5.1"
const CloudletFieldLocationLongitude = "5.2"
const CloudletFieldLocationHorizontalAccuracy = "5.3"
const CloudletFieldLocationVerticalAccuracy = "5.4"
const CloudletFieldLocationAltitude = "5.5"
const CloudletFieldLocationCourse = "5.6"
const CloudletFieldLocationSpeed = "5.7"
const CloudletFieldLocationTimestamp = "5.8"
const CloudletFieldLocationTimestampSeconds = "5.8.1"
const CloudletFieldLocationTimestampNanos = "5.8.2"
const CloudletFieldIpSupport = "6"
const CloudletFieldStaticIps = "7"
const CloudletFieldNumDynamicIps = "8"

var CloudletAllFields = []string{
	CloudletFieldKeyOperatorKeyName,
	CloudletFieldKeyName,
	CloudletFieldAccessUri,
	CloudletFieldLocationLatitude,
	CloudletFieldLocationLongitude,
	CloudletFieldLocationHorizontalAccuracy,
	CloudletFieldLocationVerticalAccuracy,
	CloudletFieldLocationAltitude,
	CloudletFieldLocationCourse,
	CloudletFieldLocationSpeed,
	CloudletFieldLocationTimestampSeconds,
	CloudletFieldLocationTimestampNanos,
	CloudletFieldIpSupport,
	CloudletFieldStaticIps,
	CloudletFieldNumDynamicIps,
}

var CloudletAllFieldsMap = map[string]struct{}{
	CloudletFieldKeyOperatorKeyName:         struct{}{},
	CloudletFieldKeyName:                    struct{}{},
	CloudletFieldAccessUri:                  struct{}{},
	CloudletFieldLocationLatitude:           struct{}{},
	CloudletFieldLocationLongitude:          struct{}{},
	CloudletFieldLocationHorizontalAccuracy: struct{}{},
	CloudletFieldLocationVerticalAccuracy:   struct{}{},
	CloudletFieldLocationAltitude:           struct{}{},
	CloudletFieldLocationCourse:             struct{}{},
	CloudletFieldLocationSpeed:              struct{}{},
	CloudletFieldLocationTimestampSeconds:   struct{}{},
	CloudletFieldLocationTimestampNanos:     struct{}{},
	CloudletFieldIpSupport:                  struct{}{},
	CloudletFieldStaticIps:                  struct{}{},
	CloudletFieldNumDynamicIps:              struct{}{},
}

func (m *Cloudlet) DiffFields(o *Cloudlet, fields map[string]struct{}) {
	if m.Key.OperatorKey.Name != o.Key.OperatorKey.Name {
		fields[CloudletFieldKeyOperatorKeyName] = struct{}{}
		fields[CloudletFieldKeyOperatorKey] = struct{}{}
		fields[CloudletFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletFieldKeyName] = struct{}{}
		fields[CloudletFieldKey] = struct{}{}
	}
	if m.AccessUri != o.AccessUri {
		fields[CloudletFieldAccessUri] = struct{}{}
	}
	if m.Location.Latitude != o.Location.Latitude {
		fields[CloudletFieldLocationLatitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Longitude != o.Location.Longitude {
		fields[CloudletFieldLocationLongitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.HorizontalAccuracy != o.Location.HorizontalAccuracy {
		fields[CloudletFieldLocationHorizontalAccuracy] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.VerticalAccuracy != o.Location.VerticalAccuracy {
		fields[CloudletFieldLocationVerticalAccuracy] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Altitude != o.Location.Altitude {
		fields[CloudletFieldLocationAltitude] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Course != o.Location.Course {
		fields[CloudletFieldLocationCourse] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Speed != o.Location.Speed {
		fields[CloudletFieldLocationSpeed] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Timestamp.Seconds != o.Location.Timestamp.Seconds {
		fields[CloudletFieldLocationTimestampSeconds] = struct{}{}
		fields[CloudletFieldLocationTimestamp] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.Location.Timestamp.Nanos != o.Location.Timestamp.Nanos {
		fields[CloudletFieldLocationTimestampNanos] = struct{}{}
		fields[CloudletFieldLocationTimestamp] = struct{}{}
		fields[CloudletFieldLocation] = struct{}{}
	}
	if m.IpSupport != o.IpSupport {
		fields[CloudletFieldIpSupport] = struct{}{}
	}
	if m.StaticIps != o.StaticIps {
		fields[CloudletFieldStaticIps] = struct{}{}
	}
	if m.NumDynamicIps != o.NumDynamicIps {
		fields[CloudletFieldNumDynamicIps] = struct{}{}
	}
}

func (m *Cloudlet) CopyInFields(src *Cloudlet) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			m.Key.Name = src.Key.Name
		}
	}
	if _, set := fmap["4"]; set {
		m.AccessUri = src.AccessUri
	}
	if _, set := fmap["5"]; set {
		if _, set := fmap["5.1"]; set {
			m.Location.Latitude = src.Location.Latitude
		}
		if _, set := fmap["5.2"]; set {
			m.Location.Longitude = src.Location.Longitude
		}
		if _, set := fmap["5.3"]; set {
			m.Location.HorizontalAccuracy = src.Location.HorizontalAccuracy
		}
		if _, set := fmap["5.4"]; set {
			m.Location.VerticalAccuracy = src.Location.VerticalAccuracy
		}
		if _, set := fmap["5.5"]; set {
			m.Location.Altitude = src.Location.Altitude
		}
		if _, set := fmap["5.6"]; set {
			m.Location.Course = src.Location.Course
		}
		if _, set := fmap["5.7"]; set {
			m.Location.Speed = src.Location.Speed
		}
		if _, set := fmap["5.8"]; set && src.Location.Timestamp != nil {
			m.Location.Timestamp = &distributed_match_engine.Timestamp{}
			if _, set := fmap["5.8.1"]; set {
				m.Location.Timestamp.Seconds = src.Location.Timestamp.Seconds
			}
			if _, set := fmap["5.8.2"]; set {
				m.Location.Timestamp.Nanos = src.Location.Timestamp.Nanos
			}
		}
	}
	if _, set := fmap["6"]; set {
		m.IpSupport = src.IpSupport
	}
	if _, set := fmap["7"]; set {
		m.StaticIps = src.StaticIps
	}
	if _, set := fmap["8"]; set {
		m.NumDynamicIps = src.NumDynamicIps
	}
}

func (s *Cloudlet) HasFields() bool {
	return true
}

type CloudletStore struct {
	kvstore objstore.KVStore
}

func NewCloudletStore(kvstore objstore.KVStore) CloudletStore {
	return CloudletStore{kvstore: kvstore}
}

func (s *CloudletStore) Create(m *Cloudlet, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Update(m *Cloudlet, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Cloudlet
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Put(m *Cloudlet, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur Cloudlet
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) Delete(m *Cloudlet, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Cloudlet", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletStore) LoadOne(key string) (*Cloudlet, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Cloudlet
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Cloudlet data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *Cloudlet) bool {
	keystr := objstore.DbKeyString("Cloudlet", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletStore) STMPut(stm concurrency.STM, obj *Cloudlet) {
	keystr := objstore.DbKeyString("Cloudlet", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *CloudletStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("Cloudlet", key)
	stm.Del(keystr)
}

type CloudletKeyWatcher struct {
	cb func()
}

// CloudletCache caches Cloudlet objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletCache struct {
	Objs        map[CloudletKey]*Cloudlet
	Mux         util.Mutex
	List        map[CloudletKey]struct{}
	NotifyCb    func(obj *CloudletKey, old *Cloudlet)
	UpdatedCb   func(old *Cloudlet, new *Cloudlet)
	KeyWatchers map[CloudletKey][]*CloudletKeyWatcher
}

func NewCloudletCache() *CloudletCache {
	cache := CloudletCache{}
	InitCloudletCache(&cache)
	return &cache
}

func InitCloudletCache(cache *CloudletCache) {
	cache.Objs = make(map[CloudletKey]*Cloudlet)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletKeyWatcher)
}

func (c *CloudletCache) GetTypeString() string {
	return "Cloudlet"
}

func (c *CloudletCache) Get(key *CloudletKey, valbuf *Cloudlet) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletCache) GetAllKeys(keys map[CloudletKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *CloudletCache) Update(in *Cloudlet, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *Cloudlet) (*Cloudlet, bool) {
		return in, true
	})
}

func (c *CloudletCache) UpdateModFunc(key *CloudletKey, rev int64, modFunc func(old *Cloudlet) (new *Cloudlet, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &Cloudlet{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate Cloudlet", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *CloudletCache) Delete(in *Cloudlet, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete Cloudlet", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *CloudletCache) Prune(validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*Cloudlet)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *CloudletCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *CloudletCache) Show(filter *Cloudlet, cb func(ret *Cloudlet) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Cloudlet", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Cloudlet", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletGenericNotifyCb(fn func(key *CloudletKey, old *Cloudlet)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*Cloudlet))
	}
}

func (c *CloudletCache) SetNotifyCb(fn func(obj *CloudletKey, old *Cloudlet)) {
	c.NotifyCb = fn
}

func (c *CloudletCache) SetUpdatedCb(fn func(old *Cloudlet, new *Cloudlet)) {
	c.UpdatedCb = fn
}

func (c *CloudletCache) WatchKey(key *CloudletKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletKeyWatcher, 0)
	}
	watcher := CloudletKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Cloudlet", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletCache) TriggerKeyWatchers(key *CloudletKey) {
	watchers := make([]*CloudletKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *CloudletCache) SyncUpdate(key, val []byte, rev int64) {
	obj := Cloudlet{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Cloudlet data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletCache) SyncDelete(key []byte, rev int64) {
	obj := Cloudlet{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *CloudletCache) SyncListStart() {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletCache) SyncListEnd() {
	deleted := make(map[CloudletKey]*Cloudlet)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (m *Cloudlet) GetKey() objstore.ObjKey {
	return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Cloudlet) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := IpSupport_name[int32(m.IpSupport)]; !ok {
		return errors.New("invalid IpSupport")
	}
	return nil
}

func (m *CloudletInfo) Matches(o *CloudletInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.State != 0 {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.Controller != "" {
		if o.Controller != m.Controller {
			return false
		}
	}
	if !opts.Filter || o.OsMaxRam != 0 {
		if o.OsMaxRam != m.OsMaxRam {
			return false
		}
	}
	if !opts.Filter || o.OsMaxVcores != 0 {
		if o.OsMaxVcores != m.OsMaxVcores {
			return false
		}
	}
	if !opts.Filter || o.OsMaxVolGb != 0 {
		if o.OsMaxVolGb != m.OsMaxVolGb {
			return false
		}
	}
	if !opts.Filter || o.Errors != nil {
		if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if len(m.Errors) != len(o.Errors) {
				return false
			}
			for i := 0; i < len(m.Errors); i++ {
				if o.Errors[i] != m.Errors[i] {
					return false
				}
			}
		}
	}
	return true
}

const CloudletInfoFieldKey = "2"
const CloudletInfoFieldKeyOperatorKey = "2.1"
const CloudletInfoFieldKeyOperatorKeyName = "2.1.1"
const CloudletInfoFieldKeyName = "2.2"
const CloudletInfoFieldState = "3"
const CloudletInfoFieldNotifyId = "4"
const CloudletInfoFieldController = "5"
const CloudletInfoFieldOsMaxRam = "6"
const CloudletInfoFieldOsMaxVcores = "7"
const CloudletInfoFieldOsMaxVolGb = "8"
const CloudletInfoFieldErrors = "9"

var CloudletInfoAllFields = []string{
	CloudletInfoFieldKeyOperatorKeyName,
	CloudletInfoFieldKeyName,
	CloudletInfoFieldState,
	CloudletInfoFieldNotifyId,
	CloudletInfoFieldController,
	CloudletInfoFieldOsMaxRam,
	CloudletInfoFieldOsMaxVcores,
	CloudletInfoFieldOsMaxVolGb,
	CloudletInfoFieldErrors,
}

var CloudletInfoAllFieldsMap = map[string]struct{}{
	CloudletInfoFieldKeyOperatorKeyName: struct{}{},
	CloudletInfoFieldKeyName:            struct{}{},
	CloudletInfoFieldState:              struct{}{},
	CloudletInfoFieldNotifyId:           struct{}{},
	CloudletInfoFieldController:         struct{}{},
	CloudletInfoFieldOsMaxRam:           struct{}{},
	CloudletInfoFieldOsMaxVcores:        struct{}{},
	CloudletInfoFieldOsMaxVolGb:         struct{}{},
	CloudletInfoFieldErrors:             struct{}{},
}

func (m *CloudletInfo) DiffFields(o *CloudletInfo, fields map[string]struct{}) {
	if m.Key.OperatorKey.Name != o.Key.OperatorKey.Name {
		fields[CloudletInfoFieldKeyOperatorKeyName] = struct{}{}
		fields[CloudletInfoFieldKeyOperatorKey] = struct{}{}
		fields[CloudletInfoFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[CloudletInfoFieldKeyName] = struct{}{}
		fields[CloudletInfoFieldKey] = struct{}{}
	}
	if m.State != o.State {
		fields[CloudletInfoFieldState] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[CloudletInfoFieldNotifyId] = struct{}{}
	}
	if m.Controller != o.Controller {
		fields[CloudletInfoFieldController] = struct{}{}
	}
	if m.OsMaxRam != o.OsMaxRam {
		fields[CloudletInfoFieldOsMaxRam] = struct{}{}
	}
	if m.OsMaxVcores != o.OsMaxVcores {
		fields[CloudletInfoFieldOsMaxVcores] = struct{}{}
	}
	if m.OsMaxVolGb != o.OsMaxVolGb {
		fields[CloudletInfoFieldOsMaxVolGb] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[CloudletInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[CloudletInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
}

func (m *CloudletInfo) CopyInFields(src *CloudletInfo) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.OperatorKey.Name = src.Key.OperatorKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			m.Key.Name = src.Key.Name
		}
	}
	if _, set := fmap["3"]; set {
		m.State = src.State
	}
	if _, set := fmap["4"]; set {
		m.NotifyId = src.NotifyId
	}
	if _, set := fmap["5"]; set {
		m.Controller = src.Controller
	}
	if _, set := fmap["6"]; set {
		m.OsMaxRam = src.OsMaxRam
	}
	if _, set := fmap["7"]; set {
		m.OsMaxVcores = src.OsMaxVcores
	}
	if _, set := fmap["8"]; set {
		m.OsMaxVolGb = src.OsMaxVolGb
	}
	if _, set := fmap["9"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
		}
		copy(m.Errors, src.Errors)
	}
}

func (s *CloudletInfo) HasFields() bool {
	return true
}

type CloudletInfoStore struct {
	kvstore objstore.KVStore
}

func NewCloudletInfoStore(kvstore objstore.KVStore) CloudletInfoStore {
	return CloudletInfoStore{kvstore: kvstore}
}

func (s *CloudletInfoStore) Create(m *CloudletInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(CloudletInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Update(m *CloudletInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur CloudletInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Put(m *CloudletInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur CloudletInfo
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) Delete(m *CloudletInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("CloudletInfo", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *CloudletInfoStore) LoadOne(key string) (*CloudletInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj CloudletInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse CloudletInfo data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *CloudletInfoStore) STMGet(stm concurrency.STM, key *CloudletKey, buf *CloudletInfo) bool {
	keystr := objstore.DbKeyString("CloudletInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *CloudletInfoStore) STMPut(stm concurrency.STM, obj *CloudletInfo) {
	keystr := objstore.DbKeyString("CloudletInfo", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *CloudletInfoStore) STMDel(stm concurrency.STM, key *CloudletKey) {
	keystr := objstore.DbKeyString("CloudletInfo", key)
	stm.Del(keystr)
}

type CloudletInfoKeyWatcher struct {
	cb func()
}

// CloudletInfoCache caches CloudletInfo objects in memory in a hash table
// and keeps them in sync with the database.
type CloudletInfoCache struct {
	Objs        map[CloudletKey]*CloudletInfo
	Mux         util.Mutex
	List        map[CloudletKey]struct{}
	NotifyCb    func(obj *CloudletKey, old *CloudletInfo)
	UpdatedCb   func(old *CloudletInfo, new *CloudletInfo)
	KeyWatchers map[CloudletKey][]*CloudletInfoKeyWatcher
}

func NewCloudletInfoCache() *CloudletInfoCache {
	cache := CloudletInfoCache{}
	InitCloudletInfoCache(&cache)
	return &cache
}

func InitCloudletInfoCache(cache *CloudletInfoCache) {
	cache.Objs = make(map[CloudletKey]*CloudletInfo)
	cache.KeyWatchers = make(map[CloudletKey][]*CloudletInfoKeyWatcher)
}

func (c *CloudletInfoCache) GetTypeString() string {
	return "CloudletInfo"
}

func (c *CloudletInfoCache) Get(key *CloudletKey, valbuf *CloudletInfo) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *CloudletInfoCache) HasKey(key *CloudletKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *CloudletInfoCache) GetAllKeys(keys map[CloudletKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *CloudletInfoCache) Update(in *CloudletInfo, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *CloudletInfo) (*CloudletInfo, bool) {
		return in, true
	})
}

func (c *CloudletInfoCache) UpdateModFunc(key *CloudletKey, rev int64, modFunc func(old *CloudletInfo) (new *CloudletInfo, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &CloudletInfo{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate CloudletInfo", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *CloudletInfoCache) Delete(in *CloudletInfo, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete CloudletInfo", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *CloudletInfoCache) Prune(validKeys map[CloudletKey]struct{}) {
	notify := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *CloudletInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}
func (c *CloudletInfoCache) Flush(notifyId int64) {
	flushed := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if val.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(&key, old)
			}
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (c *CloudletInfoCache) Show(filter *CloudletInfo, cb func(ret *CloudletInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show CloudletInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show CloudletInfo", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func CloudletInfoGenericNotifyCb(fn func(key *CloudletKey, old *CloudletInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*CloudletKey), obj.(*CloudletInfo))
	}
}

func (c *CloudletInfoCache) SetNotifyCb(fn func(obj *CloudletKey, old *CloudletInfo)) {
	c.NotifyCb = fn
}

func (c *CloudletInfoCache) SetUpdatedCb(fn func(old *CloudletInfo, new *CloudletInfo)) {
	c.UpdatedCb = fn
}

func (c *CloudletInfoCache) WatchKey(key *CloudletKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*CloudletInfoKeyWatcher, 0)
	}
	watcher := CloudletInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching CloudletInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *CloudletInfoCache) TriggerKeyWatchers(key *CloudletKey) {
	watchers := make([]*CloudletInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *CloudletInfoCache) SyncUpdate(key, val []byte, rev int64) {
	obj := CloudletInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse CloudletInfo data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *CloudletInfoCache) SyncDelete(key []byte, rev int64) {
	obj := CloudletInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	CloudletKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *CloudletInfoCache) SyncListStart() {
	c.List = make(map[CloudletKey]struct{})
}

func (c *CloudletInfoCache) SyncListEnd() {
	deleted := make(map[CloudletKey]*CloudletInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (m *CloudletInfo) GetKey() objstore.ObjKey {
	return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *CloudletInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := CloudletState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	return nil
}

func (m *CloudletMetrics) CopyInFields(src *CloudletMetrics) {
	m.Foo = src.Foo
}

// Helper method to check that enums have valid values
func (m *CloudletMetrics) ValidateEnums() error {
	return nil
}

var CloudletStateStrings = []string{
	"CloudletStateUnknown",
	"CloudletStateErrors",
	"CloudletStateReady",
	"CloudletStateOffline",
	"CloudletStateNotPresent",
}

const (
	CloudletStateCloudletStateUnknown    uint64 = 1 << 0
	CloudletStateCloudletStateErrors     uint64 = 1 << 1
	CloudletStateCloudletStateReady      uint64 = 1 << 2
	CloudletStateCloudletStateOffline    uint64 = 1 << 3
	CloudletStateCloudletStateNotPresent uint64 = 1 << 4
)

func (e *CloudletState) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudletState_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudletState_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudletState(val)
	return nil
}

func (e CloudletState) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *CloudletKey) Size() (n int) {
	var l int
	_ = l
	l = m.OperatorKey.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *Cloudlet) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.AccessUri)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = m.Location.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if m.IpSupport != 0 {
		n += 1 + sovCloudlet(uint64(m.IpSupport))
	}
	l = len(m.StaticIps)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.NumDynamicIps != 0 {
		n += 1 + sovCloudlet(uint64(m.NumDynamicIps))
	}
	return n
}

func (m *CloudletInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	if m.State != 0 {
		n += 1 + sovCloudlet(uint64(m.State))
	}
	if m.NotifyId != 0 {
		n += 1 + sovCloudlet(uint64(m.NotifyId))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	if m.OsMaxRam != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxRam))
	}
	if m.OsMaxVcores != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxVcores))
	}
	if m.OsMaxVolGb != 0 {
		n += 1 + sovCloudlet(uint64(m.OsMaxVolGb))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovCloudlet(uint64(l))
		}
	}
	return n
}

func (m *CloudletMetrics) Size() (n int) {
	var l int
	_ = l
	if m.Foo != 0 {
		n += 1 + sovCloudlet(uint64(m.Foo))
	}
	return n
}

func sovCloudlet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudlet(x uint64) (n int) {
	return sovCloudlet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cloudlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cloudlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cloudlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpSupport", wireType)
			}
			m.IpSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpSupport |= (IpSupport(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticIps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDynamicIps", wireType)
			}
			m.NumDynamicIps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDynamicIps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (CloudletState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxRam", wireType)
			}
			m.OsMaxRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxRam |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxVcores", wireType)
			}
			m.OsMaxVcores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxVcores |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsMaxVolGb", wireType)
			}
			m.OsMaxVolGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsMaxVolGb |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudletMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			m.Foo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Foo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudlet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudlet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudlet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudlet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudlet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloudlet.proto", fileDescriptorCloudlet) }

var fileDescriptorCloudlet = []byte{
	// 1008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0x4e, 0x88, 0x27, 0x89, 0xe3, 0x4e, 0xd2, 0x64, 0xe2, 0x34, 0xae, 0xd9, 0x4a,
	0x28, 0xaa, 0xb0, 0x17, 0xb9, 0x17, 0x94, 0x4b, 0x95, 0xa4, 0x55, 0xb1, 0xda, 0x52, 0xb4, 0x21,
	0xad, 0xc4, 0x65, 0xb5, 0x9e, 0x1d, 0x6f, 0x86, 0xee, 0xce, 0x2c, 0xb3, 0xb3, 0x4d, 0xcc, 0x05,
	0xc4, 0x05, 0xc4, 0x09, 0xc4, 0xa5, 0xc7, 0xfe, 0x09, 0x55, 0x25, 0xfe, 0x87, 0x1c, 0x91, 0x90,
	0x38, 0x22, 0x88, 0x38, 0x70, 0x44, 0xc4, 0x07, 0x6e, 0xa0, 0x9d, 0xdd, 0xf5, 0x0f, 0x6a, 0x4a,
	0x45, 0xb9, 0x58, 0xef, 0xbd, 0xef, 0xcd, 0xf7, 0x3d, 0x7f, 0x6f, 0x66, 0x61, 0x85, 0xf8, 0x22,
	0x76, 0x7d, 0xaa, 0x5a, 0xa1, 0x14, 0x4a, 0xa0, 0x32, 0x75, 0x3d, 0xaa, 0xc3, 0xda, 0x25, 0x4f,
	0x08, 0xcf, 0xa7, 0xa6, 0x13, 0x32, 0xd3, 0xe1, 0x5c, 0x28, 0x47, 0x31, 0xc1, 0xa3, 0xb4, 0xb1,
	0xf6, 0xb6, 0xc7, 0xd4, 0x51, 0xdc, 0x6d, 0x11, 0x11, 0x98, 0x81, 0xe8, 0x32, 0x3f, 0x39, 0x78,
	0x62, 0x26, 0xbf, 0x4d, 0xcd, 0x69, 0xea, 0x3e, 0x8f, 0xf2, 0x61, 0x90, 0x9d, 0xbc, 0xf5, 0x72,
	0x27, 0x49, 0xd3, 0xa3, 0xbc, 0x49, 0x82, 0x3c, 0x1d, 0x0b, 0x32, 0xa2, 0x8a, 0x08, 0xa9, 0x74,
	0x94, 0x90, 0x59, 0xbe, 0x28, 0x69, 0x14, 0xfb, 0x2a, 0xcf, 0x88, 0x08, 0x02, 0x91, 0x8b, 0xee,
	0xff, 0xab, 0xa8, 0xdb, 0x0c, 0x1c, 0x45, 0x8e, 0x9a, 0x94, 0x7b, 0x8c, 0x53, 0xd3, 0x0d, 0x68,
	0x53, 0x1f, 0x35, 0x7d, 0x41, 0x32, 0x92, 0xe6, 0x18, 0x89, 0x27, 0x3c, 0x91, 0x0e, 0xd4, 0x8d,
	0x7b, 0x3a, 0x4b, 0xbb, 0x93, 0x28, 0x6d, 0x37, 0x42, 0xb8, 0xb0, 0x9f, 0xb9, 0x7b, 0x9b, 0xf6,
	0xd1, 0x75, 0xb8, 0x98, 0x0f, 0x6c, 0x3f, 0xa4, 0x7d, 0x0c, 0x1a, 0x60, 0x7b, 0xa1, 0xbd, 0xd6,
	0x1a, 0x3a, 0xde, 0xba, 0x97, 0xc1, 0xb7, 0x69, 0x7f, 0xaf, 0x74, 0xfa, 0xe3, 0xe5, 0x19, 0x6b,
	0x41, 0x8c, 0x4a, 0x08, 0xc1, 0x12, 0x77, 0x02, 0x8a, 0x0b, 0x0d, 0xb0, 0x5d, 0xb6, 0x74, 0xbc,
	0xb3, 0xf8, 0xeb, 0x39, 0x06, 0x7f, 0x9c, 0x63, 0xf0, 0xf4, 0xc9, 0x65, 0x60, 0x7c, 0x5b, 0x84,
	0xf3, 0xb9, 0x24, 0x5a, 0x83, 0x73, 0x3d, 0x46, 0x7d, 0x37, 0xc2, 0xa0, 0x51, 0xdc, 0x2e, 0x5b,
	0x59, 0x86, 0x5a, 0xb0, 0x98, 0xc8, 0x17, 0x9e, 0x93, 0x1f, 0x1b, 0x36, 0x93, 0x4f, 0x1a, 0xd1,
	0x15, 0x08, 0x1d, 0x42, 0x68, 0x14, 0xd9, 0xb1, 0x64, 0xb8, 0x94, 0x88, 0xef, 0x95, 0xbe, 0x18,
	0x60, 0x60, 0x95, 0xd3, 0xfa, 0xa1, 0x64, 0xe8, 0x3a, 0x9c, 0xf7, 0x05, 0xd1, 0x37, 0x04, 0xcf,
	0x6a, 0xe6, 0xad, 0x96, 0xcb, 0x22, 0x25, 0x59, 0x37, 0x56, 0xd4, 0xb5, 0xb5, 0xb7, 0x76, 0xea,
	0x6d, 0xeb, 0x8e, 0x20, 0x99, 0xc0, 0xf0, 0x10, 0xba, 0x06, 0x21, 0x0b, 0xed, 0x28, 0x0e, 0x43,
	0x21, 0x15, 0x9e, 0x6b, 0x80, 0xed, 0x4a, 0x7b, 0x75, 0x6c, 0xb8, 0x4e, 0x78, 0x90, 0x62, 0x56,
	0x99, 0xe5, 0x21, 0xda, 0x82, 0x30, 0x4a, 0xae, 0x25, 0xb1, 0x59, 0x18, 0xe1, 0xd7, 0xb4, 0x2f,
	0xe5, 0xb4, 0xd2, 0x09, 0x23, 0xf4, 0x06, 0x5c, 0xe6, 0x71, 0x60, 0xbb, 0x7d, 0xee, 0x04, 0x59,
	0xcf, 0x7c, 0x03, 0x6c, 0xcf, 0x5a, 0x4b, 0x3c, 0x0e, 0x6e, 0xa4, 0xd5, 0x4e, 0x18, 0xed, 0x7c,
	0x92, 0x98, 0xf8, 0xdb, 0x39, 0x06, 0x9f, 0x0e, 0x30, 0x78, 0x3c, 0xc0, 0xe0, 0xe9, 0x00, 0x83,
	0x2f, 0x9f, 0x6d, 0x78, 0x77, 0xb2, 0xe9, 0x5a, 0xef, 0x08, 0xc9, 0x3e, 0x16, 0x5c, 0x39, 0xfe,
	0x2e, 0x21, 0xb1, 0x74, 0x48, 0xff, 0xcd, 0x21, 0x76, 0x9f, 0x4a, 0xc5, 0xc8, 0x34, 0x64, 0x5f,
	0xc4, 0x32, 0xa2, 0xa3, 0xfc, 0x20, 0xa4, 0xd4, 0x1d, 0xa5, 0xef, 0xb3, 0x80, 0x46, 0xca, 0x09,
	0x42, 0xe3, 0x87, 0x02, 0x5c, 0xcc, 0xdd, 0xef, 0xf0, 0x9e, 0xf8, 0xdf, 0x76, 0xd7, 0x82, 0xb3,
	0x89, 0x1d, 0x14, 0x17, 0xb5, 0xa1, 0x78, 0xca, 0x89, 0x83, 0x04, 0xb7, 0xd2, 0x36, 0xb4, 0x09,
	0xcb, 0x5c, 0x28, 0xd6, 0xeb, 0xdb, 0xcc, 0xd5, 0xab, 0x2e, 0x5a, 0xf3, 0x69, 0xa1, 0xe3, 0xa2,
	0x3a, 0x84, 0x44, 0x70, 0x25, 0x85, 0xef, 0x53, 0xa9, 0xb7, 0x5c, 0xb6, 0xc6, 0x2a, 0xe8, 0x12,
	0x84, 0x22, 0xb2, 0x03, 0xe7, 0xc4, 0x96, 0x4e, 0xa0, 0x57, 0x58, 0xb2, 0xe6, 0x45, 0x74, 0xd7,
	0x39, 0xb1, 0x9c, 0x00, 0x19, 0x70, 0x29, 0x43, 0x1f, 0x11, 0x21, 0x69, 0xba, 0xae, 0x92, 0xb5,
	0xa0, 0x1b, 0xee, 0xeb, 0x12, 0x7a, 0x7d, 0xd4, 0x23, 0x7c, 0xdb, 0xeb, 0xea, 0x75, 0x95, 0x2c,
	0x98, 0xf6, 0x08, 0xff, 0x56, 0x37, 0x71, 0x86, 0x4a, 0x29, 0x64, 0x84, 0xcb, 0xa9, 0x33, 0x69,
	0xb6, 0xb3, 0x3a, 0xbe, 0xc3, 0xaf, 0x06, 0x18, 0x3c, 0x19, 0x60, 0x60, 0x5c, 0x81, 0xcb, 0xf9,
	0xff, 0xbc, 0x4b, 0x95, 0x64, 0x24, 0x42, 0x55, 0x58, 0xec, 0x09, 0xa1, 0xc7, 0x2f, 0x59, 0x49,
	0x78, 0xf5, 0x6b, 0x00, 0x97, 0x26, 0xdc, 0x40, 0x18, 0xae, 0x4e, 0x14, 0x0e, 0xf9, 0x43, 0x2e,
	0x8e, 0x79, 0x75, 0x06, 0xad, 0xc3, 0x95, 0x09, 0xe4, 0xa6, 0x56, 0xaf, 0x02, 0xb4, 0x06, 0xd1,
	0xa4, 0xa3, 0xd4, 0x71, 0xfb, 0xd5, 0xc2, 0x73, 0x54, 0xf7, 0x7a, 0x3d, 0x9f, 0x71, 0x5a, 0x2d,
	0xa2, 0x4d, 0xb8, 0x3e, 0x81, 0xbc, 0x2b, 0xd4, 0x7b, 0x92, 0x46, 0x94, 0xab, 0x6a, 0xa9, 0xfd,
	0x7b, 0x61, 0xf4, 0xf1, 0xd8, 0x0d, 0x19, 0x7a, 0x00, 0x2b, 0xfb, 0x92, 0x3a, 0x8a, 0x0e, 0x9f,
	0xf7, 0xca, 0x94, 0x5d, 0xd6, 0x2e, 0x8c, 0x15, 0x2d, 0xfd, 0x35, 0x34, 0x36, 0x3f, 0xfb, 0xfe,
	0x97, 0x6f, 0x0a, 0x17, 0x8d, 0xaa, 0x49, 0x34, 0x81, 0x99, 0x7f, 0xf1, 0x77, 0xc0, 0xd5, 0xb7,
	0x00, 0xfa, 0x00, 0x56, 0x6e, 0x50, 0x9f, 0xfe, 0x07, 0xe2, 0xfa, 0xe3, 0x67, 0x1b, 0x40, 0x93,
	0xaf, 0x1a, 0xcb, 0xa6, 0xab, 0x49, 0x52, 0xf2, 0x9c, 0xfb, 0x01, 0xac, 0x1c, 0x86, 0xee, 0xab,
	0x0d, 0x1d, 0x6b, 0x82, 0xbf, 0x0d, 0x7d, 0x08, 0x17, 0x0f, 0x8e, 0xc4, 0xf1, 0x8b, 0x69, 0xa7,
	0x15, 0x8d, 0x0d, 0x4d, 0xbc, 0x62, 0x54, 0xcc, 0xe8, 0x48, 0x1c, 0x4f, 0xd2, 0xb6, 0xff, 0x04,
	0xa3, 0xeb, 0x92, 0x3c, 0xc3, 0xc4, 0x78, 0x0a, 0xab, 0xe3, 0x52, 0xfa, 0x75, 0xae, 0x4f, 0x61,
	0x4e, 0x80, 0xda, 0x3f, 0x01, 0xc6, 0x96, 0x96, 0x5d, 0x37, 0xd0, 0xa4, 0x2c, 0xe3, 0x3d, 0x91,
	0xfe, 0xa3, 0x3d, 0x88, 0x3a, 0xfc, 0x43, 0x4a, 0xd4, 0xcb, 0x09, 0x4d, 0xb1, 0x6c, 0x06, 0xed,
	0xc2, 0x0b, 0x37, 0x1f, 0xb1, 0x57, 0xa1, 0x68, 0x7f, 0x0e, 0x46, 0xd7, 0x38, 0x7b, 0x30, 0x89,
	0x09, 0x1f, 0xc1, 0x95, 0x71, 0x13, 0xf2, 0xa7, 0x54, 0x9b, 0xc2, 0x9d, 0x61, 0xb5, 0x17, 0x60,
	0x46, 0x43, 0xbb, 0x51, 0x33, 0x2e, 0x4e, 0xba, 0x11, 0xa4, 0xb0, 0x36, 0x64, 0xaf, 0x7a, 0xfa,
	0x73, 0x7d, 0xe6, 0xf4, 0xac, 0x0e, 0xbe, 0x3b, 0xab, 0x83, 0x9f, 0xce, 0xea, 0xa0, 0x3b, 0xa7,
	0xc9, 0xae, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x25, 0x7a, 0xbb, 0xe4, 0xb3, 0x08, 0x00, 0x00,
}
