// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mobiledgex/edge-cloud/protogen"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NodeKey uniquely identifies a DME or CRM node
type NodeKey struct {
	// Name or hostname of node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Node type
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Cloudlet on which node is running, or is associated with
	CloudletKey CloudletKey `protobuf:"bytes,3,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
	// Region the node is in
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *NodeKey) Reset()                    { *m = NodeKey{} }
func (m *NodeKey) String() string            { return proto.CompactTextString(m) }
func (*NodeKey) ProtoMessage()               {}
func (*NodeKey) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{0} }

// Node defines a DME (distributed matching engine) or CRM (cloudlet resource manager) instance.
type Node struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key NodeKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Build Master Version
	BuildMaster string `protobuf:"bytes,4,opt,name=build_master,json=buildMaster,proto3" json:"build_master,omitempty"`
	// Build Head Version
	BuildHead string `protobuf:"bytes,5,opt,name=build_head,json=buildHead,proto3" json:"build_head,omitempty"`
	// Build Author
	BuildAuthor string `protobuf:"bytes,6,opt,name=build_author,json=buildAuthor,proto3" json:"build_author,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Docker edge-cloud container version which node instance use
	ContainerVersion string `protobuf:"bytes,8,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	// Internal PKI Config
	InternalPki string `protobuf:"bytes,9,opt,name=internal_pki,json=internalPki,proto3" json:"internal_pki,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{1} }

type NodeData struct {
	Nodes []Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes"`
}

func (m *NodeData) Reset()                    { *m = NodeData{} }
func (m *NodeData) String() string            { return proto.CompactTextString(m) }
func (*NodeData) ProtoMessage()               {}
func (*NodeData) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{2} }

func init() {
	proto.RegisterType((*NodeKey)(nil), "edgeproto.NodeKey")
	proto.RegisterType((*Node)(nil), "edgeproto.Node")
	proto.RegisterType((*NodeData)(nil), "edgeproto.NodeData")
}
func (this *NodeKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&edgeproto.NodeKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeApi service

type NodeApiClient interface {
	// Show all Nodes connected to all Controllers
	ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error)
}

type nodeApiClient struct {
	cc *grpc.ClientConn
}

func NewNodeApiClient(cc *grpc.ClientConn) NodeApiClient {
	return &nodeApiClient{cc}
}

func (c *nodeApiClient) ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeApi_serviceDesc.Streams[0], c.cc, "/edgeproto.NodeApi/ShowNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeApiShowNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeApi_ShowNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeApiShowNodeClient struct {
	grpc.ClientStream
}

func (x *nodeApiShowNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeApi service

type NodeApiServer interface {
	// Show all Nodes connected to all Controllers
	ShowNode(*Node, NodeApi_ShowNodeServer) error
}

func RegisterNodeApiServer(s *grpc.Server, srv NodeApiServer) {
	s.RegisterService(&_NodeApi_serviceDesc, srv)
}

func _NodeApi_ShowNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeApiServer).ShowNode(m, &nodeApiShowNodeServer{stream})
}

type NodeApi_ShowNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeApiShowNodeServer struct {
	grpc.ServerStream
}

func (x *nodeApiShowNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.NodeApi",
	HandlerType: (*NodeApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowNode",
			Handler:       _NodeApi_ShowNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

func (m *NodeKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNode(dAtA, i, uint64(m.CloudletKey.Size()))
	n1, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNode(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.NotifyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.BuildMaster) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildMaster)))
		i += copy(dAtA[i:], m.BuildMaster)
	}
	if len(m.BuildHead) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildHead)))
		i += copy(dAtA[i:], m.BuildHead)
	}
	if len(m.BuildAuthor) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildAuthor)))
		i += copy(dAtA[i:], m.BuildAuthor)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.ContainerVersion) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.ContainerVersion)))
		i += copy(dAtA[i:], m.ContainerVersion)
	}
	if len(m.InternalPki) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.InternalPki)))
		i += copy(dAtA[i:], m.InternalPki)
	}
	return i, nil
}

func (m *NodeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNode(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeKey) Matches(o *NodeKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Type != "" {
		if o.Type != m.Type {
			return false
		}
	}
	if !opts.Filter || o.Region != "" {
		if o.Region != m.Region {
			return false
		}
	}
	return true
}

func (m *NodeKey) CopyInFields(src *NodeKey) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.CloudletKey.Organization != src.CloudletKey.Organization {
		m.CloudletKey.Organization = src.CloudletKey.Organization
		changed++
	}
	if m.CloudletKey.Name != src.CloudletKey.Name {
		m.CloudletKey.Name = src.CloudletKey.Name
		changed++
	}
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.Region != src.Region {
		m.Region = src.Region
		changed++
	}
	return changed
}

func (m *NodeKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal NodeKey key string", "obj", m)
	}
	return string(key)
}

func NodeKeyStringParse(str string, key *NodeKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal NodeKey key string", "str", str)
	}
}

func (m *NodeKey) NotFoundError() error {
	return fmt.Errorf("Node key %s not found", m.GetKeyString())
}

func (m *NodeKey) ExistsError() error {
	return fmt.Errorf("Node key %s already exists", m.GetKeyString())
}

// Helper method to check that enums have valid values
func (m *NodeKey) ValidateEnums() error {
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreNodeKeyFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Name")
	}
	return cmpopts.IgnoreFields(NodeKey{}, names...)
}

func (m *Node) Matches(o *Node, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NotifyId != 0 {
			if o.NotifyId != m.NotifyId {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildMaster != "" {
			if o.BuildMaster != m.BuildMaster {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildHead != "" {
			if o.BuildHead != m.BuildHead {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildAuthor != "" {
			if o.BuildAuthor != m.BuildAuthor {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Hostname != "" {
			if o.Hostname != m.Hostname {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ContainerVersion != "" {
			if o.ContainerVersion != m.ContainerVersion {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.InternalPki != "" {
			if o.InternalPki != m.InternalPki {
				return false
			}
		}
	}
	return true
}

const NodeFieldKey = "2"
const NodeFieldKeyName = "2.1"
const NodeFieldKeyCloudletKey = "2.3"
const NodeFieldKeyCloudletKeyOrganization = "2.3.1"
const NodeFieldKeyCloudletKeyName = "2.3.2"
const NodeFieldKeyType = "2.4"
const NodeFieldKeyRegion = "2.5"
const NodeFieldNotifyId = "3"
const NodeFieldBuildMaster = "4"
const NodeFieldBuildHead = "5"
const NodeFieldBuildAuthor = "6"
const NodeFieldHostname = "7"
const NodeFieldContainerVersion = "8"
const NodeFieldInternalPki = "9"

var NodeAllFields = []string{
	NodeFieldKeyName,
	NodeFieldKeyCloudletKeyOrganization,
	NodeFieldKeyCloudletKeyName,
	NodeFieldKeyType,
	NodeFieldKeyRegion,
	NodeFieldNotifyId,
	NodeFieldBuildMaster,
	NodeFieldBuildHead,
	NodeFieldBuildAuthor,
	NodeFieldHostname,
	NodeFieldContainerVersion,
	NodeFieldInternalPki,
}

var NodeAllFieldsMap = map[string]struct{}{
	NodeFieldKeyName:                    struct{}{},
	NodeFieldKeyCloudletKeyOrganization: struct{}{},
	NodeFieldKeyCloudletKeyName:         struct{}{},
	NodeFieldKeyType:                    struct{}{},
	NodeFieldKeyRegion:                  struct{}{},
	NodeFieldNotifyId:                   struct{}{},
	NodeFieldBuildMaster:                struct{}{},
	NodeFieldBuildHead:                  struct{}{},
	NodeFieldBuildAuthor:                struct{}{},
	NodeFieldHostname:                   struct{}{},
	NodeFieldContainerVersion:           struct{}{},
	NodeFieldInternalPki:                struct{}{},
}

var NodeAllFieldsStringMap = map[string]string{
	NodeFieldKeyName:                    "Key Name",
	NodeFieldKeyCloudletKeyOrganization: "Key Cloudlet Key Organization",
	NodeFieldKeyCloudletKeyName:         "Key Cloudlet Key Name",
	NodeFieldKeyType:                    "Key Type",
	NodeFieldKeyRegion:                  "Key Region",
	NodeFieldNotifyId:                   "Notify Id",
	NodeFieldBuildMaster:                "Build Master",
	NodeFieldBuildHead:                  "Build Head",
	NodeFieldBuildAuthor:                "Build Author",
	NodeFieldHostname:                   "Hostname",
	NodeFieldContainerVersion:           "Container Version",
	NodeFieldInternalPki:                "Internal Pki",
}

func (m *Node) IsKeyField(s string) bool {
	return strings.HasPrefix(s, NodeFieldKey+".")
}

func (m *Node) DiffFields(o *Node, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[NodeFieldKeyName] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Organization != o.Key.CloudletKey.Organization {
		fields[NodeFieldKeyCloudletKeyOrganization] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[NodeFieldKeyCloudletKeyName] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.Type != o.Key.Type {
		fields[NodeFieldKeyType] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.Region != o.Key.Region {
		fields[NodeFieldKeyRegion] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[NodeFieldNotifyId] = struct{}{}
	}
	if m.BuildMaster != o.BuildMaster {
		fields[NodeFieldBuildMaster] = struct{}{}
	}
	if m.BuildHead != o.BuildHead {
		fields[NodeFieldBuildHead] = struct{}{}
	}
	if m.BuildAuthor != o.BuildAuthor {
		fields[NodeFieldBuildAuthor] = struct{}{}
	}
	if m.Hostname != o.Hostname {
		fields[NodeFieldHostname] = struct{}{}
	}
	if m.ContainerVersion != o.ContainerVersion {
		fields[NodeFieldContainerVersion] = struct{}{}
	}
	if m.InternalPki != o.InternalPki {
		fields[NodeFieldInternalPki] = struct{}{}
	}
}

func (m *Node) CopyInFields(src *Node) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if _, set := fmap["2.3.1"]; set {
				if m.Key.CloudletKey.Organization != src.Key.CloudletKey.Organization {
					m.Key.CloudletKey.Organization = src.Key.CloudletKey.Organization
					changed++
				}
			}
			if _, set := fmap["2.3.2"]; set {
				if m.Key.CloudletKey.Name != src.Key.CloudletKey.Name {
					m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
					changed++
				}
			}
		}
		if _, set := fmap["2.4"]; set {
			if m.Key.Type != src.Key.Type {
				m.Key.Type = src.Key.Type
				changed++
			}
		}
		if _, set := fmap["2.5"]; set {
			if m.Key.Region != src.Key.Region {
				m.Key.Region = src.Key.Region
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.BuildMaster != src.BuildMaster {
			m.BuildMaster = src.BuildMaster
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.BuildHead != src.BuildHead {
			m.BuildHead = src.BuildHead
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.BuildAuthor != src.BuildAuthor {
			m.BuildAuthor = src.BuildAuthor
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.Hostname != src.Hostname {
			m.Hostname = src.Hostname
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.ContainerVersion != src.ContainerVersion {
			m.ContainerVersion = src.ContainerVersion
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if m.InternalPki != src.InternalPki {
			m.InternalPki = src.InternalPki
			changed++
		}
	}
	return changed
}

func (s *Node) HasFields() bool {
	return true
}

type NodeStore struct {
	kvstore objstore.KVStore
}

func NewNodeStore(kvstore objstore.KVStore) NodeStore {
	return NodeStore{kvstore: kvstore}
}

func (s *NodeStore) Create(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	err := m.Validate(NodeAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Update(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Node
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Put(ctx context.Context, m *Node, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(NodeAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Delete(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) LoadOne(key string) (*Node, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Node
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Node data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *NodeStore) STMGet(stm concurrency.STM, key *NodeKey, buf *Node) bool {
	keystr := objstore.DbKeyString("Node", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *NodeStore) STMPut(stm concurrency.STM, obj *Node, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Node", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Node json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *NodeStore) STMDel(stm concurrency.STM, key *NodeKey) {
	keystr := objstore.DbKeyString("Node", key)
	stm.Del(keystr)
}

type NodeKeyWatcher struct {
	cb func(ctx context.Context)
}

type NodeCacheData struct {
	Obj    *Node
	ModRev int64
}

// NodeCache caches Node objects in memory in a hash table
// and keeps them in sync with the database.
type NodeCache struct {
	Objs        map[NodeKey]*NodeCacheData
	Mux         util.Mutex
	List        map[NodeKey]struct{}
	FlushAll    bool
	NotifyCb    func(ctx context.Context, obj *NodeKey, old *Node, modRev int64)
	UpdatedCb   func(ctx context.Context, old *Node, new *Node)
	KeyWatchers map[NodeKey][]*NodeKeyWatcher
}

func NewNodeCache() *NodeCache {
	cache := NodeCache{}
	InitNodeCache(&cache)
	return &cache
}

func InitNodeCache(cache *NodeCache) {
	cache.Objs = make(map[NodeKey]*NodeCacheData)
	cache.KeyWatchers = make(map[NodeKey][]*NodeKeyWatcher)
}

func (c *NodeCache) GetTypeString() string {
	return "Node"
}

func (c *NodeCache) Get(key *NodeKey, valbuf *Node) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *NodeCache) GetWithRev(key *NodeKey, valbuf *Node, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst.Obj
		*modRev = inst.ModRev
	}
	return found
}

func (c *NodeCache) HasKey(key *NodeKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *NodeCache) GetAllKeys(ctx context.Context, cb func(key *NodeKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *NodeCache) Update(ctx context.Context, in *Node, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Node) (*Node, bool) {
		return in, true
	})
}

func (c *NodeCache) UpdateModFunc(ctx context.Context, key *NodeKey, modRev int64, modFunc func(old *Node) (new *Node, changed bool)) {
	c.Mux.Lock()
	var old *Node
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &Node{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
		}
	}
	c.Objs[new.GetKeyVal()] = &NodeCacheData{
		Obj:    new,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate Node", "obj", new, "modRev", modRev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *NodeCache) Delete(ctx context.Context, in *Node, modRev int64) {
	c.Mux.Lock()
	var old *Node
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete Node", "key", in.GetKey(), "modRev", modRev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *NodeCache) Prune(ctx context.Context, validKeys map[NodeKey]struct{}) {
	notify := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *NodeCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *NodeCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Node", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Node delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *NodeCache) Show(filter *Node, cb func(ret *Node) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Node", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare Node", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Node", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func NodeGenericNotifyCb(fn func(key *NodeKey, old *Node)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*NodeKey), obj.(*Node))
	}
}

func (c *NodeCache) SetNotifyCb(fn func(ctx context.Context, obj *NodeKey, old *Node, modRev int64)) {
	c.NotifyCb = fn
}

func (c *NodeCache) SetUpdatedCb(fn func(ctx context.Context, old *Node, new *Node)) {
	c.UpdatedCb = fn
}

func (c *NodeCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *NodeCache) WatchKey(key *NodeKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*NodeKeyWatcher, 0)
	}
	watcher := NodeKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Node", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *NodeCache) TriggerKeyWatchers(ctx context.Context, key *NodeKey) {
	watchers := make([]*NodeKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *NodeCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Node{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Node data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *NodeCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Node{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	NodeKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *NodeCache) SyncListStart(ctx context.Context) {
	c.List = make(map[NodeKey]struct{})
}

func (c *NodeCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *NodeCache) UsesOrg(org string) bool {
	return false
}

func (m *Node) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Node) GetKey() *NodeKey {
	return &m.Key
}

func (m *Node) GetKeyVal() NodeKey {
	return m.Key
}

func (m *Node) SetKey(key *NodeKey) {
	m.Key = *key
}

func CmpSortNode(a Node, b Node) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Node) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreNodeFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Key.Name")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildMaster")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildHead")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildAuthor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Hostname")
	}
	return cmpopts.IgnoreFields(Node{}, names...)
}

// Helper method to check that enums have valid values
func (m *NodeData) ValidateEnums() error {
	for _, e := range m.Nodes {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreNodeDataFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.Key.Name")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildMaster")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildHead")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildAuthor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.Hostname")
	}
	return cmpopts.IgnoreFields(NodeData{}, names...)
}

func (m *NodeKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = m.CloudletKey.Size()
	n += 1 + l + sovNode(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovNode(uint64(m.NotifyId))
	}
	l = len(m.BuildMaster)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BuildHead)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BuildAuthor)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.ContainerVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.InternalPki)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *NodeData) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func sovNode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildMaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPki", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPki = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("node.proto", fileDescriptorNode) }

var fileDescriptorNode = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0xcd, 0xb6, 0x4d, 0x26, 0xd1, 0xd6, 0x41, 0xca, 0x18, 0x34, 0x2d, 0xb9, 0x58,
	0x6b, 0x9a, 0xad, 0xf5, 0xa0, 0x04, 0x44, 0x92, 0x7a, 0x50, 0x8a, 0x55, 0xa2, 0xf4, 0x1a, 0x26,
	0xd9, 0xd7, 0xcd, 0xd0, 0xcd, 0xcc, 0xb2, 0xbb, 0xb1, 0xae, 0x27, 0xf1, 0x2f, 0x28, 0x7a, 0x51,
	0x4f, 0x05, 0x2f, 0x82, 0x17, 0xe9, 0x5f, 0xd1, 0xa3, 0xe0, 0x5d, 0x6a, 0xf1, 0x20, 0x9e, 0x84,
	0xc6, 0xe0, 0x51, 0x66, 0x66, 0x93, 0x86, 0xa8, 0x97, 0xf0, 0x7e, 0x7c, 0xde, 0xdb, 0xef, 0xcb,
	0x7b, 0x83, 0xb1, 0x90, 0x0e, 0x94, 0xfd, 0x40, 0x46, 0x92, 0x64, 0xc0, 0x71, 0x41, 0x9b, 0xf9,
	0x8b, 0xae, 0x94, 0xae, 0x07, 0x36, 0xf3, 0xb9, 0xcd, 0x84, 0x90, 0x11, 0x8b, 0xb8, 0x14, 0xa1,
	0x01, 0xf3, 0x67, 0x5b, 0x9e, 0xec, 0x3a, 0x1e, 0x44, 0x89, 0x7f, 0xde, 0x95, 0xae, 0xd4, 0xa6,
	0xad, 0xac, 0x24, 0x7a, 0xd3, 0xe5, 0x51, 0xbb, 0xdb, 0x2c, 0xb7, 0x64, 0xc7, 0xee, 0xc8, 0x26,
	0xf7, 0x54, 0xfb, 0xa7, 0xb6, 0xfa, 0x5d, 0xd1, 0x0d, 0x6c, 0xcd, 0xb9, 0x20, 0x86, 0x86, 0xa9,
	0x2c, 0xbe, 0x43, 0x78, 0x66, 0x53, 0x3a, 0xb0, 0x01, 0x31, 0xb9, 0x84, 0x2d, 0xc1, 0x3a, 0x40,
	0xd1, 0x22, 0x5a, 0xca, 0xd4, 0x32, 0x2f, 0x0f, 0x2e, 0x4c, 0x09, 0xd9, 0xea, 0xf8, 0x75, 0x1d,
	0x26, 0xb7, 0x71, 0x6e, 0x20, 0xa6, 0xb1, 0x03, 0x31, 0x4d, 0x2d, 0xa2, 0xa5, 0xec, 0xda, 0x7c,
	0x79, 0x38, 0x4a, 0x79, 0x3d, 0x49, 0x6f, 0x40, 0x5c, 0xb3, 0x0e, 0xbf, 0x2c, 0x4c, 0xd4, 0xb3,
	0xad, 0xd3, 0x10, 0x21, 0xd8, 0x8a, 0x62, 0x1f, 0xa8, 0xa5, 0xfa, 0xd7, 0xb5, 0x4d, 0xe6, 0xf1,
	0x74, 0x00, 0x2e, 0x97, 0x82, 0x4e, 0xe9, 0x68, 0xe2, 0x55, 0x72, 0xdf, 0x4f, 0x28, 0xfa, 0x7d,
	0x42, 0xd1, 0xc7, 0xfd, 0x05, 0x54, 0xfc, 0x60, 0x61, 0x4b, 0xa9, 0x54, 0xf8, 0x36, 0x07, 0xcf,
	0x09, 0x29, 0x5a, 0x4c, 0x29, 0xdc, 0x78, 0x64, 0x19, 0xa7, 0x94, 0xa4, 0x49, 0x2d, 0x89, 0x8c,
	0x48, 0x4a, 0x66, 0x4b, 0xe4, 0x28, 0x88, 0x2c, 0xe3, 0x8c, 0x90, 0x11, 0xdf, 0x8e, 0x1b, 0xdc,
	0xd1, 0x43, 0xa4, 0x6a, 0x67, 0xde, 0xf7, 0x28, 0x3a, 0x9d, 0x37, 0x6d, 0xf2, 0xf7, 0x1c, 0xb2,
	0x8a, 0x73, 0xcd, 0x2e, 0xf7, 0x9c, 0x46, 0x87, 0x85, 0x11, 0x04, 0x46, 0xfa, 0x38, 0x9e, 0xd5,
	0xc8, 0x7d, 0x4d, 0x90, 0x12, 0xc6, 0xa6, 0xa2, 0x0d, 0xcc, 0x31, 0x43, 0x8d, 0xf3, 0x19, 0x0d,
	0xdc, 0x05, 0x36, 0xd2, 0x9f, 0x75, 0xa3, 0xb6, 0x0c, 0xe8, 0xf4, 0xff, 0xfb, 0x57, 0x35, 0x41,
	0xae, 0xe0, 0x74, 0x5b, 0x86, 0x91, 0x5e, 0xd4, 0xcc, 0xbf, 0xe8, 0x61, 0x9a, 0x5c, 0xc3, 0xe7,
	0x5a, 0x52, 0x44, 0x8c, 0x0b, 0x08, 0x1a, 0x4f, 0x20, 0x08, 0xd5, 0xdf, 0x9c, 0xd6, 0x35, 0x96,
	0xaa, 0xa9, 0xcf, 0x0d, 0xd3, 0x5b, 0x26, 0x4b, 0x2e, 0xe3, 0x1c, 0x17, 0x11, 0x04, 0x82, 0x79,
	0x0d, 0x7f, 0x87, 0xd3, 0xcc, 0x08, 0x9d, 0x1d, 0x64, 0x1e, 0xee, 0xf0, 0xca, 0x1b, 0xa4, 0x16,
	0xf4, 0xf3, 0x84, 0xa2, 0xe7, 0x3d, 0x8a, 0xf6, 0x7a, 0x14, 0xed, 0xf7, 0x28, 0x3a, 0xea, 0x51,
	0xf4, 0xf6, 0x17, 0xed, 0xaa, 0xcf, 0xdf, 0xda, 0x80, 0xb8, 0xbc, 0xc9, 0x3a, 0x50, 0x52, 0x8b,
	0xd6, 0xde, 0xe3, 0xd8, 0x87, 0xd2, 0xe0, 0x22, 0x74, 0x64, 0xe4, 0x62, 0x0c, 0x3b, 0xc8, 0xae,
	0xc8, 0xc0, 0xfd, 0x8b, 0x78, 0x10, 0xb8, 0x4c, 0xf0, 0x67, 0xfa, 0x81, 0x94, 0xcc, 0xa1, 0x68,
	0xa6, 0xae, 0xcd, 0x83, 0x3e, 0xb5, 0x84, 0x14, 0x50, 0xac, 0xe2, 0xb4, 0x5a, 0xfb, 0x1d, 0x16,
	0x31, 0x72, 0x15, 0x4f, 0xa9, 0x67, 0x67, 0xee, 0x25, 0xbb, 0x36, 0x3b, 0x76, 0x1a, 0xc9, 0x5d,
	0x18, 0xa6, 0x92, 0x7e, 0xdd, 0xa7, 0x68, 0xbf, 0x4f, 0x27, 0xd6, 0x02, 0xf3, 0x2a, 0xaa, 0x3e,
	0x27, 0x2e, 0x4e, 0x3f, 0x6a, 0xcb, 0x5d, 0x7d, 0x7e, 0xe3, 0xe5, 0xf9, 0xf1, 0x40, 0xf1, 0xc6,
	0x8f, 0x1e, 0xcd, 0xd7, 0x21, 0x94, 0xdd, 0xa0, 0x05, 0xeb, 0x52, 0x6c, 0x73, 0xb7, 0x54, 0x6d,
	0x29, 0xc1, 0x5b, 0x1c, 0x76, 0x4b, 0x7b, 0x7d, 0x8a, 0x5e, 0x7c, 0xfe, 0xf6, 0x6a, 0x72, 0xb6,
	0x88, 0xed, 0xb0, 0x2d, 0x77, 0x6d, 0xf5, 0xe5, 0x0a, 0x5a, 0x5e, 0x45, 0xb5, 0xb9, 0xc3, 0xaf,
	0x85, 0x89, 0xc3, 0xe3, 0x02, 0xfa, 0x74, 0x5c, 0x40, 0x47, 0xc7, 0x05, 0xd4, 0x9c, 0xd6, 0x8d,
	0xaf, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xcc, 0x08, 0xe3, 0x3a, 0x04, 0x00, 0x00,
}
