// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NodeKey uniquely identifies a DME or CRM node
type NodeKey struct {
	// Name or hostname of node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Node type
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Cloudlet on which node is running, or is associated with
	CloudletKey CloudletKey `protobuf:"bytes,3,opt,name=cloudlet_key,json=cloudletKey,proto3" json:"cloudlet_key"`
	// Region the node is in
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *NodeKey) Reset()         { *m = NodeKey{} }
func (m *NodeKey) String() string { return proto.CompactTextString(m) }
func (*NodeKey) ProtoMessage()    {}
func (*NodeKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *NodeKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeKey.Merge(m, src)
}
func (m *NodeKey) XXX_Size() int {
	return m.Size()
}
func (m *NodeKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeKey.DiscardUnknown(m)
}

var xxx_messageInfo_NodeKey proto.InternalMessageInfo

// Node identifies an Edge Cloud service.
type Node struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key NodeKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Build Master Version
	BuildMaster string `protobuf:"bytes,4,opt,name=build_master,json=buildMaster,proto3" json:"build_master,omitempty"`
	// Build Head Version
	BuildHead string `protobuf:"bytes,5,opt,name=build_head,json=buildHead,proto3" json:"build_head,omitempty"`
	// Build Author
	BuildAuthor string `protobuf:"bytes,6,opt,name=build_author,json=buildAuthor,proto3" json:"build_author,omitempty"`
	// Build Date
	BuildDate string `protobuf:"bytes,10,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Docker edge-cloud container version which node instance use
	ContainerVersion string `protobuf:"bytes,8,opt,name=container_version,json=containerVersion,proto3" json:"container_version,omitempty"`
	// Internal PKI Config
	InternalPki string `protobuf:"bytes,9,opt,name=internal_pki,json=internalPki,proto3" json:"internal_pki,omitempty"`
	// Additional properties
	Properties map[string]string `protobuf:"bytes,11,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type NodeData struct {
	Nodes []Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes"`
}

func (m *NodeData) Reset()         { *m = NodeData{} }
func (m *NodeData) String() string { return proto.CompactTextString(m) }
func (*NodeData) ProtoMessage()    {}
func (*NodeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}
func (m *NodeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeData.Merge(m, src)
}
func (m *NodeData) XXX_Size() int {
	return m.Size()
}
func (m *NodeData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeData.DiscardUnknown(m)
}

var xxx_messageInfo_NodeData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NodeKey)(nil), "edgeproto.NodeKey")
	proto.RegisterType((*Node)(nil), "edgeproto.Node")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.Node.PropertiesEntry")
	proto.RegisterType((*NodeData)(nil), "edgeproto.NodeData")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x8b, 0x23, 0x45,
	0x14, 0xc7, 0x53, 0x93, 0x1f, 0x9b, 0x54, 0xa2, 0xb3, 0x53, 0x2c, 0x4b, 0x19, 0x96, 0x4c, 0x08,
	0xa8, 0x71, 0xcc, 0xa6, 0xd7, 0x78, 0x70, 0x09, 0x2c, 0x4b, 0xb2, 0xab, 0x28, 0x83, 0xeb, 0xd2,
	0xca, 0x5e, 0x43, 0x25, 0xfd, 0xd2, 0x29, 0xd2, 0xa9, 0x6a, 0xba, 0x2b, 0x33, 0xb6, 0x27, 0xf1,
	0x0f, 0x90, 0x41, 0x2f, 0xe2, 0x69, 0x8e, 0x7a, 0x93, 0x39, 0xce, 0x5f, 0x30, 0x5e, 0x64, 0xc0,
	0x8b, 0x27, 0x19, 0x67, 0x3c, 0x88, 0x27, 0x61, 0x62, 0xf0, 0x28, 0x55, 0xdd, 0xc9, 0xc4, 0x38,
	0x73, 0x09, 0xd5, 0xef, 0xfb, 0x79, 0x55, 0xef, 0x67, 0x30, 0x16, 0xd2, 0x81, 0xa6, 0x1f, 0x48,
	0x25, 0x49, 0x01, 0x1c, 0x17, 0xcc, 0xb1, 0x7c, 0xcf, 0x95, 0xd2, 0xf5, 0xc0, 0x62, 0x3e, 0xb7,
	0x98, 0x10, 0x52, 0x31, 0xc5, 0xa5, 0x08, 0x63, 0xb0, 0xbc, 0x35, 0xf0, 0xe4, 0xd4, 0xf1, 0x40,
	0x8d, 0x21, 0x4a, 0x4c, 0x77, 0x5c, 0xe9, 0x4a, 0x73, 0xb4, 0xf4, 0x29, 0xb1, 0x3e, 0x74, 0xb9,
	0x1a, 0x4d, 0xfb, 0xcd, 0x81, 0x9c, 0x58, 0x13, 0xd9, 0xe7, 0x9e, 0x7e, 0xe1, 0x53, 0x4b, 0xff,
	0xde, 0x37, 0x77, 0x58, 0x86, 0x73, 0x41, 0x2c, 0x0f, 0xb1, 0x67, 0xed, 0x47, 0x84, 0x6f, 0x3d,
	0x93, 0x0e, 0xec, 0x42, 0x44, 0x5e, 0xc5, 0x19, 0xc1, 0x26, 0x40, 0x51, 0x15, 0xd5, 0x0b, 0xdd,
	0xad, 0xe3, 0x39, 0xcd, 0xe8, 0xa8, 0xbf, 0x3a, 0x7a, 0x25, 0x2b, 0xe4, 0x60, 0xe2, 0xdb, 0x46,
	0x26, 0x55, 0x9c, 0x51, 0x91, 0x0f, 0x34, 0x63, 0xb0, 0xd2, 0xf1, 0x9c, 0xe6, 0x35, 0xa6, 0x6d,
	0xb6, 0x51, 0xc8, 0x63, 0x5c, 0x5a, 0x44, 0xde, 0x1b, 0x43, 0x44, 0xd3, 0x55, 0x54, 0x2f, 0xb6,
	0xee, 0x36, 0x97, 0x79, 0x37, 0x9f, 0x24, 0xf2, 0x2e, 0x44, 0xdd, 0xcc, 0xc9, 0xaf, 0xdb, 0x29,
	0xbb, 0x38, 0xb8, 0x32, 0x91, 0xd7, 0x70, 0x2e, 0x00, 0x97, 0x4b, 0x41, 0xb3, 0xe6, 0x91, 0x97,
	0x8f, 0xe7, 0xd4, 0x54, 0x30, 0xb6, 0xda, 0x89, 0xda, 0x2e, 0xfd, 0x71, 0x49, 0xd1, 0x3f, 0x97,
	0x14, 0xfd, 0x70, 0xb8, 0x8d, 0x6a, 0x5f, 0xe6, 0x70, 0x46, 0xe7, 0x42, 0xee, 0xe2, 0xdc, 0x90,
	0x83, 0xe7, 0x84, 0x14, 0x55, 0xd3, 0xf5, 0x82, 0x9d, 0x7c, 0x91, 0x1d, 0x9c, 0xd6, 0xe1, 0x6c,
	0x98, 0x70, 0xc8, 0x4a, 0x38, 0x49, 0x05, 0x92, 0x50, 0x34, 0x44, 0x76, 0x70, 0x41, 0x48, 0xc5,
	0x87, 0x51, 0x8f, 0x3b, 0x26, 0x81, 0x74, 0xf7, 0xa5, 0xef, 0x66, 0x14, 0x5d, 0x55, 0x23, 0x1f,
	0xeb, 0x1f, 0x38, 0xe4, 0x01, 0x2e, 0xf5, 0xa7, 0xdc, 0x73, 0x7a, 0x13, 0x16, 0x2a, 0x08, 0x92,
	0xca, 0xac, 0xe1, 0x45, 0x83, 0x7c, 0x68, 0x08, 0xd2, 0xc0, 0x38, 0xf6, 0x18, 0x01, 0x73, 0x92,
	0x24, 0xd7, 0xf8, 0x82, 0x01, 0xde, 0x07, 0xb6, 0x72, 0x3f, 0x9b, 0xaa, 0x91, 0x0c, 0x68, 0xee,
	0xe6, 0xfb, 0x3b, 0x86, 0xb8, 0xba, 0xdf, 0x61, 0x0a, 0x28, 0xbe, 0xf9, 0xfe, 0xa7, 0x4c, 0x01,
	0x79, 0x03, 0xe7, 0x47, 0x32, 0x54, 0xa6, 0xf9, 0xb7, 0xae, 0x63, 0x97, 0x32, 0x79, 0x0b, 0x6f,
	0x0d, 0xa4, 0x50, 0x8c, 0x0b, 0x08, 0x7a, 0x7b, 0x10, 0x84, 0xba, 0x49, 0x79, 0xe3, 0x93, 0xd1,
	0x3e, 0xf6, 0xed, 0xa5, 0xfc, 0x22, 0x56, 0xc9, 0xeb, 0xb8, 0xc4, 0x85, 0x82, 0x40, 0x30, 0xaf,
	0xe7, 0x8f, 0x39, 0x2d, 0xac, 0xd0, 0xc5, 0x85, 0xf2, 0x7c, 0xcc, 0xc9, 0x63, 0x8c, 0xfd, 0x40,
	0xfa, 0x10, 0x28, 0x0e, 0x21, 0x2d, 0x56, 0xd3, 0xf5, 0x62, 0x6b, 0x7b, 0xad, 0x4b, 0xcd, 0xe7,
	0x4b, 0xe2, 0x5d, 0xa1, 0x82, 0xc8, 0x5e, 0x71, 0x29, 0x3f, 0xc2, 0x9b, 0x6b, 0x32, 0xb9, 0x1d,
	0xb7, 0xdc, 0x8c, 0x74, 0xdc, 0xd8, 0x3b, 0x38, 0xbb, 0xc7, 0xbc, 0x29, 0x98, 0x31, 0x28, 0xd8,
	0xf1, 0x47, 0x7b, 0xe3, 0x21, 0x6a, 0xff, 0x84, 0xf4, 0x38, 0xfd, 0x75, 0x49, 0xd1, 0xe7, 0x33,
	0x8a, 0x0e, 0x66, 0x14, 0x1d, 0xce, 0x28, 0x3a, 0x9b, 0x51, 0xf4, 0xed, 0xdf, 0xf4, 0x7b, 0xa4,
	0xf3, 0x7f, 0xb4, 0x0b, 0x51, 0xf3, 0x19, 0x9b, 0x40, 0x43, 0x0f, 0xba, 0xf9, 0xfa, 0x24, 0xf2,
	0xa1, 0xb1, 0x18, 0x5e, 0x63, 0x59, 0x19, 0xee, 0x98, 0x5d, 0xa8, 0xf7, 0x65, 0xe0, 0xfe, 0x8f,
	0xf8, 0x28, 0x70, 0x99, 0xe0, 0x9f, 0x99, 0xc5, 0x6f, 0x0c, 0xc1, 0x81, 0x80, 0x29, 0x70, 0xae,
	0x45, 0xdf, 0x5b, 0xa8, 0xff, 0xf1, 0x89, 0x77, 0xc1, 0xc0, 0xb6, 0x39, 0x1e, 0x99, 0xc5, 0x15,
	0x50, 0xeb, 0xe0, 0xbc, 0xae, 0xd9, 0x53, 0xa6, 0x18, 0x79, 0x13, 0x67, 0xf5, 0x02, 0xc5, 0x2b,
	0x51, 0x6c, 0x6d, 0xae, 0xd5, 0x35, 0x19, 0xfd, 0x98, 0x69, 0xe7, 0xbf, 0x99, 0x53, 0x74, 0x38,
	0xa7, 0xa9, 0x56, 0x10, 0xff, 0x3d, 0x74, 0x7c, 0x4e, 0x5c, 0x9c, 0xff, 0x78, 0x24, 0xf7, 0xcd,
	0x86, 0xad, 0xbb, 0x97, 0xd7, 0x0d, 0xb5, 0x77, 0xfe, 0x9c, 0xd1, 0xb2, 0x0d, 0xa1, 0x9c, 0x06,
	0x03, 0x78, 0x22, 0xc5, 0x90, 0xbb, 0x8d, 0xce, 0x40, 0x07, 0xfc, 0x82, 0xc3, 0x7e, 0xe3, 0x60,
	0x4e, 0xd1, 0x17, 0x3f, 0xff, 0xfe, 0xf5, 0xc6, 0x66, 0x0d, 0x5b, 0xe1, 0x48, 0xee, 0x5b, 0xfa,
	0xe5, 0x36, 0xda, 0x79, 0x80, 0xba, 0xf7, 0x4e, 0x7e, 0xab, 0xa4, 0x4e, 0xce, 0x2b, 0xe8, 0xf4,
	0xbc, 0x82, 0xce, 0xce, 0x2b, 0xe8, 0xe0, 0xa2, 0x92, 0x3a, 0xbd, 0xa8, 0xa4, 0x7e, 0xb9, 0xa8,
	0xa4, 0xfa, 0x39, 0xf3, 0xc8, 0xdb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x30, 0xf4, 0x91, 0x62,
	0x52, 0x05, 0x00, 0x00,
}

func (this *NodeKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&edgeproto.NodeKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeApiClient is the client API for NodeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeApiClient interface {
	// Show all Nodes connected to all Controllers
	ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error)
}

type nodeApiClient struct {
	cc *grpc.ClientConn
}

func NewNodeApiClient(cc *grpc.ClientConn) NodeApiClient {
	return &nodeApiClient{cc}
}

func (c *nodeApiClient) ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeApi_serviceDesc.Streams[0], "/edgeproto.NodeApi/ShowNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeApiShowNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeApi_ShowNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeApiShowNodeClient struct {
	grpc.ClientStream
}

func (x *nodeApiShowNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeApiServer is the server API for NodeApi service.
type NodeApiServer interface {
	// Show all Nodes connected to all Controllers
	ShowNode(*Node, NodeApi_ShowNodeServer) error
}

// UnimplementedNodeApiServer can be embedded to have forward compatible implementations.
type UnimplementedNodeApiServer struct {
}

func (*UnimplementedNodeApiServer) ShowNode(req *Node, srv NodeApi_ShowNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowNode not implemented")
}

func RegisterNodeApiServer(s *grpc.Server, srv NodeApiServer) {
	s.RegisterService(&_NodeApi_serviceDesc, srv)
}

func _NodeApi_ShowNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeApiServer).ShowNode(m, &nodeApiShowNodeServer{stream})
}

type NodeApi_ShowNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeApiShowNodeServer struct {
	grpc.ServerStream
}

func (x *nodeApiShowNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.NodeApi",
	HandlerType: (*NodeApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowNode",
			Handler:       _NodeApi_ShowNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

func (m *NodeKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CloudletKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNode(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNode(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNode(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.BuildDate) > 0 {
		i -= len(m.BuildDate)
		copy(dAtA[i:], m.BuildDate)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildDate)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.InternalPki) > 0 {
		i -= len(m.InternalPki)
		copy(dAtA[i:], m.InternalPki)
		i = encodeVarintNode(dAtA, i, uint64(len(m.InternalPki)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ContainerVersion) > 0 {
		i -= len(m.ContainerVersion)
		copy(dAtA[i:], m.ContainerVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.ContainerVersion)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BuildAuthor) > 0 {
		i -= len(m.BuildAuthor)
		copy(dAtA[i:], m.BuildAuthor)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildAuthor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BuildHead) > 0 {
		i -= len(m.BuildHead)
		copy(dAtA[i:], m.BuildHead)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildHead)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuildMaster) > 0 {
		i -= len(m.BuildMaster)
		copy(dAtA[i:], m.BuildMaster)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BuildMaster)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotifyId != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.NotifyId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNode(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeKey) Matches(o *NodeKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Type != "" {
		if o.Type != m.Type {
			return false
		}
	}
	if !opts.Filter || o.Region != "" {
		if o.Region != m.Region {
			return false
		}
	}
	return true
}

func (m *NodeKey) CopyInFields(src *NodeKey) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.CloudletKey.Organization != src.CloudletKey.Organization {
		m.CloudletKey.Organization = src.CloudletKey.Organization
		changed++
	}
	if m.CloudletKey.Name != src.CloudletKey.Name {
		m.CloudletKey.Name = src.CloudletKey.Name
		changed++
	}
	if m.CloudletKey.FederatedOrganization != src.CloudletKey.FederatedOrganization {
		m.CloudletKey.FederatedOrganization = src.CloudletKey.FederatedOrganization
		changed++
	}
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.Region != src.Region {
		m.Region = src.Region
		changed++
	}
	return changed
}

func (m *NodeKey) DeepCopyIn(src *NodeKey) {
	m.Name = src.Name
	m.CloudletKey.DeepCopyIn(&src.CloudletKey)
	m.Type = src.Type
	m.Region = src.Region
}

func (m *NodeKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal NodeKey key string", "obj", m)
	}
	return string(key)
}

func NodeKeyStringParse(str string, key *NodeKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal NodeKey key string", "str", str)
	}
}

func (m *NodeKey) NotFoundError() error {
	return fmt.Errorf("Node key %s not found", m.GetKeyString())
}

func (m *NodeKey) ExistsError() error {
	return fmt.Errorf("Node key %s already exists", m.GetKeyString())
}

func (m *NodeKey) BeingDeletedError() error {
	return fmt.Errorf("Node %s is being deleted", m.GetKeyString())
}

var NodeKeyTagName = "node"
var NodeKeyTagType = "nodetype"
var NodeKeyTagRegion = "noderegion"

func (m *NodeKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["node"] = m.Name
	tags["cloudletorg"] = m.CloudletKey.Organization
	tags["cloudlet"] = m.CloudletKey.Name
	tags["federatedorg"] = m.CloudletKey.FederatedOrganization
	tags["nodetype"] = m.Type
	tags["noderegion"] = m.Region
	return tags
}

// Helper method to check that enums have valid values
func (m *NodeKey) ValidateEnums() error {
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *NodeKey) ClearTagged(tags map[string]struct{}) {
	if _, found := tags["nocmp"]; found {
		s.Name = ""
	}
	s.CloudletKey.ClearTagged(tags)
}

func (s *NodeKey) ClearRedisOnlyFields() {
	// Clear fields so that they are not stored in DB, as they are cached in Redis
}

func IgnoreNodeKeyFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Name")
	}
	return cmpopts.IgnoreFields(NodeKey{}, names...)
}

func (m *Node) Matches(o *Node, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NotifyId != 0 {
			if o.NotifyId != m.NotifyId {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildMaster != "" {
			if o.BuildMaster != m.BuildMaster {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildHead != "" {
			if o.BuildHead != m.BuildHead {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildAuthor != "" {
			if o.BuildAuthor != m.BuildAuthor {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Hostname != "" {
			if o.Hostname != m.Hostname {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ContainerVersion != "" {
			if o.ContainerVersion != m.ContainerVersion {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.InternalPki != "" {
			if o.InternalPki != m.InternalPki {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildDate != "" {
			if o.BuildDate != m.BuildDate {
				return false
			}
		}
	}
	if !opts.Filter || o.Properties != nil {
		if len(m.Properties) == 0 && len(o.Properties) > 0 || len(m.Properties) > 0 && len(o.Properties) == 0 {
			return false
		} else if m.Properties != nil && o.Properties != nil {
			if !opts.Filter && len(m.Properties) != len(o.Properties) {
				return false
			}
			for k, _ := range o.Properties {
				_, ok := m.Properties[k]
				if !ok {
					return false
				}
				if o.Properties[k] != m.Properties[k] {
					return false
				}
			}
		}
	}
	return true
}

const NodeFieldKey = "2"
const NodeFieldKeyName = "2.1"
const NodeFieldKeyCloudletKey = "2.3"
const NodeFieldKeyCloudletKeyOrganization = "2.3.1"
const NodeFieldKeyCloudletKeyName = "2.3.2"
const NodeFieldKeyCloudletKeyFederatedOrganization = "2.3.3"
const NodeFieldKeyType = "2.4"
const NodeFieldKeyRegion = "2.5"
const NodeFieldNotifyId = "3"
const NodeFieldBuildMaster = "4"
const NodeFieldBuildHead = "5"
const NodeFieldBuildAuthor = "6"
const NodeFieldHostname = "7"
const NodeFieldContainerVersion = "8"
const NodeFieldInternalPki = "9"
const NodeFieldBuildDate = "10"
const NodeFieldProperties = "11"
const NodeFieldPropertiesKey = "11.1"
const NodeFieldPropertiesValue = "11.2"

var NodeAllFields = []string{
	NodeFieldKeyName,
	NodeFieldKeyCloudletKeyOrganization,
	NodeFieldKeyCloudletKeyName,
	NodeFieldKeyCloudletKeyFederatedOrganization,
	NodeFieldKeyType,
	NodeFieldKeyRegion,
	NodeFieldNotifyId,
	NodeFieldBuildMaster,
	NodeFieldBuildHead,
	NodeFieldBuildAuthor,
	NodeFieldHostname,
	NodeFieldContainerVersion,
	NodeFieldInternalPki,
	NodeFieldBuildDate,
	NodeFieldPropertiesKey,
	NodeFieldPropertiesValue,
}

var NodeAllFieldsMap = map[string]struct{}{
	NodeFieldKeyName:                             struct{}{},
	NodeFieldKeyCloudletKeyOrganization:          struct{}{},
	NodeFieldKeyCloudletKeyName:                  struct{}{},
	NodeFieldKeyCloudletKeyFederatedOrganization: struct{}{},
	NodeFieldKeyType:                             struct{}{},
	NodeFieldKeyRegion:                           struct{}{},
	NodeFieldNotifyId:                            struct{}{},
	NodeFieldBuildMaster:                         struct{}{},
	NodeFieldBuildHead:                           struct{}{},
	NodeFieldBuildAuthor:                         struct{}{},
	NodeFieldHostname:                            struct{}{},
	NodeFieldContainerVersion:                    struct{}{},
	NodeFieldInternalPki:                         struct{}{},
	NodeFieldBuildDate:                           struct{}{},
	NodeFieldPropertiesKey:                       struct{}{},
	NodeFieldPropertiesValue:                     struct{}{},
}

var NodeAllFieldsStringMap = map[string]string{
	NodeFieldKeyName:                             "Key Name",
	NodeFieldKeyCloudletKeyOrganization:          "Key Cloudlet Key Organization",
	NodeFieldKeyCloudletKeyName:                  "Key Cloudlet Key Name",
	NodeFieldKeyCloudletKeyFederatedOrganization: "Key Cloudlet Key Federated Organization",
	NodeFieldKeyType:                             "Key Type",
	NodeFieldKeyRegion:                           "Key Region",
	NodeFieldNotifyId:                            "Notify Id",
	NodeFieldBuildMaster:                         "Build Master",
	NodeFieldBuildHead:                           "Build Head",
	NodeFieldBuildAuthor:                         "Build Author",
	NodeFieldHostname:                            "Hostname",
	NodeFieldContainerVersion:                    "Container Version",
	NodeFieldInternalPki:                         "Internal Pki",
	NodeFieldBuildDate:                           "Build Date",
	NodeFieldPropertiesKey:                       "Properties Key",
	NodeFieldPropertiesValue:                     "Properties Value",
}

func (m *Node) IsKeyField(s string) bool {
	return strings.HasPrefix(s, NodeFieldKey+".") || s == NodeFieldKey
}

func (m *Node) DiffFields(o *Node, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[NodeFieldKeyName] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Organization != o.Key.CloudletKey.Organization {
		fields[NodeFieldKeyCloudletKeyOrganization] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[NodeFieldKeyCloudletKeyName] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.FederatedOrganization != o.Key.CloudletKey.FederatedOrganization {
		fields[NodeFieldKeyCloudletKeyFederatedOrganization] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.Type != o.Key.Type {
		fields[NodeFieldKeyType] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.Region != o.Key.Region {
		fields[NodeFieldKeyRegion] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[NodeFieldNotifyId] = struct{}{}
	}
	if m.BuildMaster != o.BuildMaster {
		fields[NodeFieldBuildMaster] = struct{}{}
	}
	if m.BuildHead != o.BuildHead {
		fields[NodeFieldBuildHead] = struct{}{}
	}
	if m.BuildAuthor != o.BuildAuthor {
		fields[NodeFieldBuildAuthor] = struct{}{}
	}
	if m.Hostname != o.Hostname {
		fields[NodeFieldHostname] = struct{}{}
	}
	if m.ContainerVersion != o.ContainerVersion {
		fields[NodeFieldContainerVersion] = struct{}{}
	}
	if m.InternalPki != o.InternalPki {
		fields[NodeFieldInternalPki] = struct{}{}
	}
	if m.BuildDate != o.BuildDate {
		fields[NodeFieldBuildDate] = struct{}{}
	}
	if m.Properties != nil && o.Properties != nil {
		if len(m.Properties) != len(o.Properties) {
			fields[NodeFieldProperties] = struct{}{}
		} else {
			for k0, _ := range m.Properties {
				_, vok0 := o.Properties[k0]
				if !vok0 {
					fields[NodeFieldProperties] = struct{}{}
				} else {
					if m.Properties[k0] != o.Properties[k0] {
						fields[NodeFieldProperties] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.Properties != nil && o.Properties == nil) || (m.Properties == nil && o.Properties != nil) {
		fields[NodeFieldProperties] = struct{}{}
	}
}

func (m *Node) CopyInFields(src *Node) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if _, set := fmap["2.3.1"]; set {
				if m.Key.CloudletKey.Organization != src.Key.CloudletKey.Organization {
					m.Key.CloudletKey.Organization = src.Key.CloudletKey.Organization
					changed++
				}
			}
			if _, set := fmap["2.3.2"]; set {
				if m.Key.CloudletKey.Name != src.Key.CloudletKey.Name {
					m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
					changed++
				}
			}
			if _, set := fmap["2.3.3"]; set {
				if m.Key.CloudletKey.FederatedOrganization != src.Key.CloudletKey.FederatedOrganization {
					m.Key.CloudletKey.FederatedOrganization = src.Key.CloudletKey.FederatedOrganization
					changed++
				}
			}
		}
		if _, set := fmap["2.4"]; set {
			if m.Key.Type != src.Key.Type {
				m.Key.Type = src.Key.Type
				changed++
			}
		}
		if _, set := fmap["2.5"]; set {
			if m.Key.Region != src.Key.Region {
				m.Key.Region = src.Key.Region
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.NotifyId != src.NotifyId {
			m.NotifyId = src.NotifyId
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.BuildMaster != src.BuildMaster {
			m.BuildMaster = src.BuildMaster
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.BuildHead != src.BuildHead {
			m.BuildHead = src.BuildHead
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.BuildAuthor != src.BuildAuthor {
			m.BuildAuthor = src.BuildAuthor
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.Hostname != src.Hostname {
			m.Hostname = src.Hostname
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.ContainerVersion != src.ContainerVersion {
			m.ContainerVersion = src.ContainerVersion
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if m.InternalPki != src.InternalPki {
			m.InternalPki = src.InternalPki
			changed++
		}
	}
	if _, set := fmap["10"]; set {
		if m.BuildDate != src.BuildDate {
			m.BuildDate = src.BuildDate
			changed++
		}
	}
	if _, set := fmap["11"]; set {
		if src.Properties != nil {
			m.Properties = make(map[string]string)
			for k0, _ := range src.Properties {
				m.Properties[k0] = src.Properties[k0]
				changed++
			}
		} else if m.Properties != nil {
			m.Properties = nil
			changed++
		}
	}
	return changed
}

func (m *Node) DeepCopyIn(src *Node) {
	m.Key.DeepCopyIn(&src.Key)
	m.NotifyId = src.NotifyId
	m.BuildMaster = src.BuildMaster
	m.BuildHead = src.BuildHead
	m.BuildAuthor = src.BuildAuthor
	m.Hostname = src.Hostname
	m.ContainerVersion = src.ContainerVersion
	m.InternalPki = src.InternalPki
	m.BuildDate = src.BuildDate
	if src.Properties != nil {
		m.Properties = make(map[string]string)
		for k, v := range src.Properties {
			m.Properties[k] = v
		}
	} else {
		m.Properties = nil
	}
}

func (s *Node) HasFields() bool {
	return true
}

type NodeStore interface {
	Create(ctx context.Context, m *Node, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *Node, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *Node, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *Node, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*Node, int64, error)
	Get(ctx context.Context, key *NodeKey, buf *Node) bool
	STMGet(stm concurrency.STM, key *NodeKey, buf *Node) bool
	STMPut(stm concurrency.STM, obj *Node, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *NodeKey)
}

type NodeStoreImpl struct {
	kvstore objstore.KVStore
}

func NewNodeStore(kvstore objstore.KVStore) *NodeStoreImpl {
	return &NodeStoreImpl{kvstore: kvstore}
}

func (s *NodeStoreImpl) Create(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	err := m.Validate(NodeAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStoreImpl) Update(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Node
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStoreImpl) Put(ctx context.Context, m *Node, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(NodeAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStoreImpl) Delete(ctx context.Context, m *Node, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStoreImpl) LoadOne(key string) (*Node, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Node
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Node data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *NodeStoreImpl) Get(ctx context.Context, key *NodeKey, buf *Node) bool {
	keystr := objstore.DbKeyString("Node", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *NodeStoreImpl) STMGet(stm concurrency.STM, key *NodeKey, buf *Node) bool {
	keystr := objstore.DbKeyString("Node", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *NodeStoreImpl) parseGetData(val []byte, buf *Node) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = Node{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *NodeStoreImpl) STMPut(stm concurrency.STM, obj *Node, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Node", obj.GetKey())

	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Node json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *NodeStoreImpl) STMDel(stm concurrency.STM, key *NodeKey) {
	keystr := objstore.DbKeyString("Node", key)
	stm.Del(keystr)
}

type NodeKeyWatcher struct {
	cb func(ctx context.Context)
}

type NodeCacheData struct {
	Obj    *Node
	ModRev int64
}

// NodeCache caches Node objects in memory in a hash table
// and keeps them in sync with the database.
type NodeCache struct {
	Objs          map[NodeKey]*NodeCacheData
	Mux           util.Mutex
	List          map[NodeKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *NodeKey, old *Node, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *Node, new *Node)
	DeletedCbs    []func(ctx context.Context, old *Node)
	KeyWatchers   map[NodeKey][]*NodeKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *NodeKey)
	DeletedKeyCbs []func(ctx context.Context, key *NodeKey)
}

func NewNodeCache() *NodeCache {
	cache := NodeCache{}
	InitNodeCache(&cache)
	return &cache
}

func InitNodeCache(cache *NodeCache) {
	cache.Objs = make(map[NodeKey]*NodeCacheData)
	cache.KeyWatchers = make(map[NodeKey][]*NodeKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *NodeCache) GetTypeString() string {
	return "Node"
}

func (c *NodeCache) Get(key *NodeKey, valbuf *Node) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *NodeCache) GetWithRev(key *NodeKey, valbuf *Node, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *NodeCache) HasKey(key *NodeKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *NodeCache) GetAllKeys(ctx context.Context, cb func(key *NodeKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *NodeCache) Update(ctx context.Context, in *Node, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Node) (*Node, bool) {
		return in, true
	})
}

func (c *NodeCache) UpdateModFunc(ctx context.Context, key *NodeKey, modRev int64, modFunc func(old *Node) (new *Node, changed bool)) {
	c.Mux.Lock()
	var old *Node
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &Node{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &Node{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &NodeCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *NodeCache) Delete(ctx context.Context, in *Node, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *Node) bool {
		return true
	})
}

func (c *NodeCache) DeleteCondFunc(ctx context.Context, in *Node, modRev int64, condFunc func(old *Node) bool) {
	c.Mux.Lock()
	var old *Node
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *NodeCache) Prune(ctx context.Context, validKeys map[NodeKey]struct{}) {
	notify := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *NodeCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *NodeCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Node", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Node delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			for _, cb := range c.NotifyCbs {
				if cb != nil {
					cb(ctx, &key, old.Obj, old.ModRev)
				}
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *NodeCache) Show(filter *Node, cb func(ret *Node) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func NodeGenericNotifyCb(fn func(key *NodeKey, old *Node)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*NodeKey), obj.(*Node))
	}
}

func (c *NodeCache) SetNotifyCb(fn func(ctx context.Context, obj *NodeKey, old *Node, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *NodeKey, old *Node, modRev int64){fn}
}

func (c *NodeCache) SetUpdatedCb(fn func(ctx context.Context, old *Node, new *Node)) {
	c.UpdatedCbs = []func(ctx context.Context, old *Node, new *Node){fn}
}

func (c *NodeCache) SetDeletedCb(fn func(ctx context.Context, old *Node)) {
	c.DeletedCbs = []func(ctx context.Context, old *Node){fn}
}

func (c *NodeCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *NodeKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *NodeKey){fn}
}

func (c *NodeCache) SetDeletedKeyCb(fn func(ctx context.Context, key *NodeKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *NodeKey){fn}
}

func (c *NodeCache) AddUpdatedCb(fn func(ctx context.Context, old *Node, new *Node)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *NodeCache) AddDeletedCb(fn func(ctx context.Context, old *Node)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *NodeCache) AddNotifyCb(fn func(ctx context.Context, obj *NodeKey, old *Node, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *NodeCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *NodeKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *NodeCache) AddDeletedKeyCb(fn func(ctx context.Context, key *NodeKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *NodeCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *NodeCache) WatchKey(key *NodeKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*NodeKeyWatcher, 0)
	}
	watcher := NodeKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Node", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *NodeCache) TriggerKeyWatchers(ctx context.Context, key *NodeKey) {
	watchers := make([]*NodeKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *NodeCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Node{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Node data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *NodeCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Node{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	NodeKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *NodeCache) SyncListStart(ctx context.Context) {
	c.List = make(map[NodeKey]struct{})
}

func (c *NodeCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[NodeKey]*NodeCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *NodeCache) UsesOrg(org string) bool {
	return false
}

func (m *Node) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Node) GetKey() *NodeKey {
	return &m.Key
}

func (m *Node) GetKeyVal() NodeKey {
	return m.Key
}

func (m *Node) SetKey(key *NodeKey) {
	m.Key = *key
}

func CmpSortNode(a Node, b Node) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Node) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (s *Node) ClearTagged(tags map[string]struct{}) {
	s.Key.ClearTagged(tags)
	if _, found := tags["nocmp"]; found {
		s.NotifyId = 0
	}
	if _, found := tags["nocmp"]; found {
		s.BuildMaster = ""
	}
	if _, found := tags["nocmp"]; found {
		s.BuildHead = ""
	}
	if _, found := tags["nocmp"]; found {
		s.BuildAuthor = ""
	}
	if _, found := tags["nocmp"]; found {
		s.Hostname = ""
	}
	if _, found := tags["nocmp"]; found {
		s.BuildDate = ""
	}
}

func (s *Node) ClearRedisOnlyFields() {
	// Clear fields so that they are not stored in DB, as they are cached in Redis
}

func IgnoreNodeFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Key.Name")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildMaster")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildHead")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildAuthor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Hostname")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildDate")
	}
	return cmpopts.IgnoreFields(Node{}, names...)
}

func (m *NodeData) DeepCopyIn(src *NodeData) {
	if src.Nodes != nil {
		m.Nodes = make([]Node, len(src.Nodes), len(src.Nodes))
		for ii, s := range src.Nodes {
			m.Nodes[ii].DeepCopyIn(&s)
		}
	} else {
		m.Nodes = nil
	}
}

// Helper method to check that enums have valid values
func (m *NodeData) ValidateEnums() error {
	for _, e := range m.Nodes {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *NodeData) ClearTagged(tags map[string]struct{}) {
	if s.Nodes != nil {
		for ii := 0; ii < len(s.Nodes); ii++ {
			s.Nodes[ii].ClearTagged(tags)
		}
	}
}

func (s *NodeData) ClearRedisOnlyFields() {
	// Clear fields so that they are not stored in DB, as they are cached in Redis
}

func IgnoreNodeDataFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.Key.Name")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildMaster")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildHead")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildAuthor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.Hostname")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Nodes.BuildDate")
	}
	return cmpopts.IgnoreFields(NodeData{}, names...)
}

func (m *NodeKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = m.CloudletKey.Size()
	n += 1 + l + sovNode(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovNode(uint64(m.NotifyId))
	}
	l = len(m.BuildMaster)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BuildHead)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BuildAuthor)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.ContainerVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.InternalPki)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BuildDate)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNode(uint64(len(k))) + 1 + len(v) + sovNode(uint64(len(v)))
			n += mapEntrySize + 1 + sovNode(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildMaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPki", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalPki = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNode
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNode(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNode
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
