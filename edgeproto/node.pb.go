// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NodeType defines the type of Node
type NodeType int32

const (
	// Unknown
	NodeType_NodeUnknown NodeType = 0
	// Distributed Matching Engine
	NodeType_NodeDME NodeType = 1
	// Cloudlet Resource Manager
	NodeType_NodeCRM NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "NodeUnknown",
	1: "NodeDME",
	2: "NodeCRM",
}
var NodeType_value = map[string]int32{
	"NodeUnknown": 0,
	"NodeDME":     1,
	"NodeCRM":     2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNode, []int{0} }

// NodeKey uniquely identifies a DME or CRM node
type NodeKey struct {
	// Name or hostname of node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Node type
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=edgeproto.NodeType" json:"node_type,omitempty"`
	// Cloudlet on which node is running, or is associated with
	CloudletKey CloudletKey `protobuf:"bytes,3,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
}

func (m *NodeKey) Reset()                    { *m = NodeKey{} }
func (m *NodeKey) String() string            { return proto.CompactTextString(m) }
func (*NodeKey) ProtoMessage()               {}
func (*NodeKey) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{0} }

// Node defines a DME (distributed matching engine) or CRM (cloudlet resource manager) instance.
type Node struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key NodeKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorNode, []int{1} }

func init() {
	proto.RegisterType((*NodeKey)(nil), "edgeproto.NodeKey")
	proto.RegisterType((*Node)(nil), "edgeproto.Node")
	proto.RegisterEnum("edgeproto.NodeType", NodeType_name, NodeType_value)
}
func (this *NodeKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.NodeKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NodeType: "+fmt.Sprintf("%#v", this.NodeType)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeApi service

type NodeApiClient interface {
	// Show Nodes connected locally only
	ShowNodeLocal(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeLocalClient, error)
	// Show all Nodes connected to all Controllers
	ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error)
}

type nodeApiClient struct {
	cc *grpc.ClientConn
}

func NewNodeApiClient(cc *grpc.ClientConn) NodeApiClient {
	return &nodeApiClient{cc}
}

func (c *nodeApiClient) ShowNodeLocal(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeLocalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeApi_serviceDesc.Streams[0], c.cc, "/edgeproto.NodeApi/ShowNodeLocal", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeApiShowNodeLocalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeApi_ShowNodeLocalClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeApiShowNodeLocalClient struct {
	grpc.ClientStream
}

func (x *nodeApiShowNodeLocalClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeApiClient) ShowNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodeApi_ShowNodeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeApi_serviceDesc.Streams[1], c.cc, "/edgeproto.NodeApi/ShowNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeApiShowNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeApi_ShowNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeApiShowNodeClient struct {
	grpc.ClientStream
}

func (x *nodeApiShowNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeApi service

type NodeApiServer interface {
	// Show Nodes connected locally only
	ShowNodeLocal(*Node, NodeApi_ShowNodeLocalServer) error
	// Show all Nodes connected to all Controllers
	ShowNode(*Node, NodeApi_ShowNodeServer) error
}

func RegisterNodeApiServer(s *grpc.Server, srv NodeApiServer) {
	s.RegisterService(&_NodeApi_serviceDesc, srv)
}

func _NodeApi_ShowNodeLocal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeApiServer).ShowNodeLocal(m, &nodeApiShowNodeLocalServer{stream})
}

type NodeApi_ShowNodeLocalServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeApiShowNodeLocalServer struct {
	grpc.ServerStream
}

func (x *nodeApiShowNodeLocalServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeApi_ShowNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeApiServer).ShowNode(m, &nodeApiShowNodeServer{stream})
}

type NodeApi_ShowNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeApiShowNodeServer struct {
	grpc.ServerStream
}

func (x *nodeApiShowNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.NodeApi",
	HandlerType: (*NodeApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowNodeLocal",
			Handler:       _NodeApi_ShowNodeLocal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowNode",
			Handler:       _NodeApi_ShowNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node.proto",
}

func (m *NodeKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NodeType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NodeType))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNode(dAtA, i, uint64(m.CloudletKey.Size()))
	n1, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNode(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.NotifyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NotifyId))
	}
	return i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeKey) Matches(o *NodeKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.NodeType != 0 {
		if o.NodeType != m.NodeType {
			return false
		}
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	return true
}

func (m *NodeKey) CopyInFields(src *NodeKey) {
	m.Name = src.Name
	m.NodeType = src.NodeType
	m.CloudletKey.OperatorKey.Name = src.CloudletKey.OperatorKey.Name
	m.CloudletKey.Name = src.CloudletKey.Name
}

func (m *NodeKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal NodeKey key string", "obj", m)
	}
	return string(key)
}

func NodeKeyStringParse(str string, key *NodeKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal NodeKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *NodeKey) ValidateEnums() error {
	if _, ok := NodeType_name[int32(m.NodeType)]; !ok {
		return errors.New("invalid NodeType")
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *Node) Matches(o *Node, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NotifyId != 0 {
			if o.NotifyId != m.NotifyId {
				return false
			}
		}
	}
	return true
}

const NodeFieldKey = "2"
const NodeFieldKeyName = "2.1"
const NodeFieldKeyNodeType = "2.2"
const NodeFieldKeyCloudletKey = "2.3"
const NodeFieldKeyCloudletKeyOperatorKey = "2.3.1"
const NodeFieldKeyCloudletKeyOperatorKeyName = "2.3.1.1"
const NodeFieldKeyCloudletKeyName = "2.3.2"
const NodeFieldNotifyId = "3"

var NodeAllFields = []string{
	NodeFieldKeyName,
	NodeFieldKeyNodeType,
	NodeFieldKeyCloudletKeyOperatorKeyName,
	NodeFieldKeyCloudletKeyName,
	NodeFieldNotifyId,
}

var NodeAllFieldsMap = map[string]struct{}{
	NodeFieldKeyName:                       struct{}{},
	NodeFieldKeyNodeType:                   struct{}{},
	NodeFieldKeyCloudletKeyOperatorKeyName: struct{}{},
	NodeFieldKeyCloudletKeyName:            struct{}{},
	NodeFieldNotifyId:                      struct{}{},
}

func (m *Node) DiffFields(o *Node, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[NodeFieldKeyName] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.NodeType != o.Key.NodeType {
		fields[NodeFieldKeyNodeType] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.OperatorKey.Name != o.Key.CloudletKey.OperatorKey.Name {
		fields[NodeFieldKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[NodeFieldKeyCloudletKeyOperatorKey] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[NodeFieldKeyCloudletKeyName] = struct{}{}
		fields[NodeFieldKeyCloudletKey] = struct{}{}
		fields[NodeFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[NodeFieldNotifyId] = struct{}{}
	}
}

func (m *Node) CopyInFields(src *Node) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			m.Key.Name = src.Key.Name
		}
		if _, set := fmap["2.2"]; set {
			m.Key.NodeType = src.Key.NodeType
		}
		if _, set := fmap["2.3"]; set {
			if _, set := fmap["2.3.1"]; set {
				if _, set := fmap["2.3.1.1"]; set {
					m.Key.CloudletKey.OperatorKey.Name = src.Key.CloudletKey.OperatorKey.Name
				}
			}
			if _, set := fmap["2.3.2"]; set {
				m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
			}
		}
	}
	if _, set := fmap["3"]; set {
		m.NotifyId = src.NotifyId
	}
}

func (s *Node) HasFields() bool {
	return true
}

type NodeStore struct {
	kvstore objstore.KVStore
}

func NewNodeStore(kvstore objstore.KVStore) NodeStore {
	return NodeStore{kvstore: kvstore}
}

func (s *NodeStore) Create(m *Node, wait func(int64)) (*Result, error) {
	err := m.Validate(NodeAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Update(m *Node, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Node
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Put(m *Node, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur Node
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) Delete(m *Node, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Node", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *NodeStore) LoadOne(key string) (*Node, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Node
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Node data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *NodeStore) STMGet(stm concurrency.STM, key *NodeKey, buf *Node) bool {
	keystr := objstore.DbKeyString("Node", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *NodeStore) STMPut(stm concurrency.STM, obj *Node) {
	keystr := objstore.DbKeyString("Node", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *NodeStore) STMDel(stm concurrency.STM, key *NodeKey) {
	keystr := objstore.DbKeyString("Node", key)
	stm.Del(keystr)
}

type NodeKeyWatcher struct {
	cb func()
}

// NodeCache caches Node objects in memory in a hash table
// and keeps them in sync with the database.
type NodeCache struct {
	Objs        map[NodeKey]*Node
	Mux         util.Mutex
	List        map[NodeKey]struct{}
	NotifyCb    func(obj *NodeKey, old *Node)
	UpdatedCb   func(old *Node, new *Node)
	KeyWatchers map[NodeKey][]*NodeKeyWatcher
}

func NewNodeCache() *NodeCache {
	cache := NodeCache{}
	InitNodeCache(&cache)
	return &cache
}

func InitNodeCache(cache *NodeCache) {
	cache.Objs = make(map[NodeKey]*Node)
	cache.KeyWatchers = make(map[NodeKey][]*NodeKeyWatcher)
}

func (c *NodeCache) GetTypeString() string {
	return "Node"
}

func (c *NodeCache) Get(key *NodeKey, valbuf *Node) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *NodeCache) HasKey(key *NodeKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *NodeCache) GetAllKeys(keys map[NodeKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *NodeCache) Update(in *Node, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *Node) (*Node, bool) {
		return in, true
	})
}

func (c *NodeCache) UpdateModFunc(key *NodeKey, rev int64, modFunc func(old *Node) (new *Node, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &Node{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate Node", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *NodeCache) Delete(in *Node, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete Node", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *NodeCache) Prune(validKeys map[NodeKey]struct{}) {
	notify := make(map[NodeKey]*Node)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *NodeCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}
func (c *NodeCache) Flush(notifyId int64) {
	flushed := make(map[NodeKey]*Node)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if val.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(&key, old)
			}
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (c *NodeCache) Show(filter *Node, cb func(ret *Node) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Node", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Node", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func NodeGenericNotifyCb(fn func(key *NodeKey, old *Node)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*NodeKey), obj.(*Node))
	}
}

func (c *NodeCache) SetNotifyCb(fn func(obj *NodeKey, old *Node)) {
	c.NotifyCb = fn
}

func (c *NodeCache) SetUpdatedCb(fn func(old *Node, new *Node)) {
	c.UpdatedCb = fn
}

func (c *NodeCache) WatchKey(key *NodeKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*NodeKeyWatcher, 0)
	}
	watcher := NodeKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Node", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *NodeCache) TriggerKeyWatchers(key *NodeKey) {
	watchers := make([]*NodeKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *NodeCache) SyncUpdate(key, val []byte, rev int64) {
	obj := Node{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Node data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *NodeCache) SyncDelete(key []byte, rev int64) {
	obj := Node{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	NodeKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *NodeCache) SyncListStart() {
	c.List = make(map[NodeKey]struct{})
}

func (c *NodeCache) SyncListEnd() {
	deleted := make(map[NodeKey]*Node)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (m *Node) GetKey() objstore.ObjKey {
	return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Node) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

var NodeTypeStrings = []string{
	"NodeUnknown",
	"NodeDME",
	"NodeCRM",
}

const (
	NodeTypeNodeUnknown uint64 = 1 << 0
	NodeTypeNodeDME     uint64 = 1 << 1
	NodeTypeNodeCRM     uint64 = 1 << 2
)

func (e *NodeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := NodeType_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = NodeType_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = NodeType(val)
	return nil
}

func (e NodeType) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *NodeKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.NodeType != 0 {
		n += 1 + sovNode(uint64(m.NodeType))
	}
	l = m.CloudletKey.Size()
	n += 1 + l + sovNode(uint64(l))
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovNode(uint64(m.NotifyId))
	}
	return n
}

func sovNode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			m.NodeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeType |= (NodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("node.proto", fileDescriptorNode) }

var fileDescriptorNode = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xde, 0xd7, 0xd6, 0xb5, 0x9d, 0xee, 0x6e, 0xc3, 0xa8, 0xcb, 0x58, 0xb4, 0x5b, 0x72, 0x2a,
	0x85, 0x36, 0x4b, 0x45, 0x90, 0x5e, 0xc4, 0xae, 0x8b, 0xc8, 0xba, 0x0a, 0x51, 0xcf, 0x25, 0x4d,
	0xa6, 0x69, 0xd8, 0x64, 0x5e, 0xb0, 0x29, 0x35, 0x37, 0xf1, 0xe4, 0x51, 0xf4, 0x0f, 0xe8, 0x4d,
	0x6f, 0xe2, 0xaf, 0xe8, 0x51, 0xf0, 0x2e, 0x5a, 0x3c, 0x78, 0x14, 0xda, 0x83, 0x47, 0x99, 0x49,
	0xb2, 0x2d, 0x3d, 0xed, 0x65, 0xf8, 0xbe, 0x37, 0xef, 0xfb, 0xde, 0x7b, 0x1f, 0x21, 0x02, 0x1d,
	0xde, 0x0e, 0x5f, 0x60, 0x84, 0xb4, 0xc4, 0x1d, 0x97, 0x2b, 0x58, 0xbd, 0xe1, 0x22, 0xba, 0x3e,
	0x37, 0xac, 0xd0, 0x33, 0x2c, 0x21, 0x30, 0xb2, 0x22, 0x0f, 0xc5, 0x38, 0x69, 0xac, 0xee, 0xd9,
	0x3e, 0x4e, 0x1c, 0x9f, 0x47, 0x29, 0x6f, 0xb9, 0x5e, 0x34, 0x9a, 0x0c, 0xda, 0x36, 0x06, 0x86,
	0x8b, 0x2e, 0x1a, 0xaa, 0x3c, 0x98, 0x0c, 0x15, 0x53, 0x44, 0xa1, 0xb4, 0xfd, 0xce, 0x5a, 0x7b,
	0x80, 0x03, 0xcf, 0x97, 0x73, 0x5f, 0x1a, 0xf2, 0x6d, 0x29, 0xe7, 0x44, 0xef, 0x72, 0x71, 0x0e,
	0x52, 0xe5, 0x83, 0x8b, 0x29, 0xed, 0x96, 0xcb, 0x45, 0xcb, 0x0e, 0x32, 0xba, 0x06, 0x12, 0x23,
	0xfd, 0x33, 0x90, 0xcb, 0x8f, 0xd1, 0xe1, 0x27, 0x3c, 0xa6, 0x37, 0x49, 0x41, 0x58, 0x01, 0x67,
	0x50, 0x87, 0x46, 0xa9, 0x57, 0x7a, 0xf7, 0xf5, 0xfa, 0x25, 0x81, 0x76, 0x10, 0x9a, 0xaa, 0x4c,
	0x0f, 0x49, 0x49, 0x66, 0xd4, 0x8f, 0xe2, 0x90, 0xb3, 0x5c, 0x1d, 0x1a, 0x7b, 0x9d, 0x2b, 0xed,
	0xf3, 0xa4, 0xda, 0xd2, 0xe5, 0x59, 0x1c, 0x72, 0xb3, 0x28, 0x52, 0x44, 0xef, 0x92, 0x9d, 0x2c,
	0xa0, 0xfe, 0x19, 0x8f, 0x59, 0xbe, 0x0e, 0x8d, 0x72, 0x67, 0x7f, 0x4d, 0x74, 0x94, 0x7e, 0x9f,
	0xf0, 0xb8, 0x57, 0x98, 0xfd, 0x38, 0xd8, 0x32, 0xcb, 0xf6, 0xaa, 0xd4, 0xdd, 0xf9, 0xb3, 0x60,
	0xf0, 0x6f, 0xc1, 0xe0, 0xcb, 0x87, 0x03, 0xd0, 0xdf, 0x00, 0x29, 0xc8, 0x29, 0x74, 0x9f, 0x6c,
	0x0f, 0x3d, 0xee, 0x3b, 0x63, 0x06, 0xf5, 0x7c, 0xa3, 0x64, 0xa6, 0x8c, 0x36, 0x49, 0x5e, 0x8e,
	0xc9, 0xa9, 0x31, 0x74, 0x63, 0xb7, 0xd5, 0x08, 0xd9, 0x44, 0x9b, 0xf2, 0x9a, 0xc8, 0x1b, 0xc6,
	0x7d, 0xcf, 0x51, 0x8b, 0xe5, 0x7b, 0xbb, 0x9f, 0x96, 0x0c, 0x56, 0x57, 0x17, 0x93, 0xff, 0x87,
	0x4e, 0x57, 0x93, 0x6b, 0xfc, 0x5d, 0x30, 0x78, 0xb5, 0x64, 0xf0, 0x76, 0xc9, 0xa0, 0x79, 0x9b,
	0x14, 0xb3, 0x7b, 0x69, 0x85, 0x94, 0x25, 0x7e, 0x2e, 0xce, 0x04, 0x4e, 0x85, 0xb6, 0x45, 0xcb,
	0x49, 0xa4, 0xf7, 0x4f, 0x8f, 0x35, 0xc8, 0xc8, 0x91, 0x79, 0xaa, 0xe5, 0x3a, 0x1f, 0xd3, 0xb4,
	0xef, 0x85, 0x1e, 0x7d, 0x42, 0x76, 0x9f, 0x8e, 0x70, 0x2a, 0xe9, 0x23, 0xb4, 0x2d, 0x9f, 0x56,
	0x36, 0x16, 0xae, 0x6e, 0x16, 0xf4, 0xea, 0xeb, 0xef, 0xbf, 0xdf, 0xe7, 0xae, 0xea, 0x15, 0x63,
	0x3c, 0xc2, 0xa9, 0x21, 0x73, 0xf6, 0xa5, 0xb4, 0x0b, 0xcd, 0x43, 0xa0, 0xc7, 0xa4, 0x98, 0x19,
	0x5e, 0xc0, 0xeb, 0x9a, 0xf2, 0xaa, 0xe8, 0x64, 0xe5, 0xa5, 0x6c, 0x7a, 0xda, 0xec, 0x57, 0x6d,
	0x6b, 0x36, 0xaf, 0xc1, 0xb7, 0x79, 0x0d, 0x7e, 0xce, 0x6b, 0x30, 0xd8, 0x56, 0xb2, 0x5b, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x5f, 0xa9, 0x2b, 0x23, 0x03, 0x00, 0x00,
}
