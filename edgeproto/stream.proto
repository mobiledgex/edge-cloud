// Stream proto

syntax = "proto3";
package edgeproto;

import "appinst.proto";
import "clusterinst.proto";
import "cloudlet.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Stream State
//
// Indicates if stream has started/ended or in a bad shape
enum StreamState {
  // Stream state is unknown
  STREAM_UNKNOWN = 0;
  // Stream has started
  STREAM_START = 1;
  // Stream has stopped
  STREAM_STOP = 2;
  // Stream is in error state
  STREAM_ERROR = 3;
}

// StreamMsg to display stream message
message StreamMsg {
  // Unique message ID
  uint32 id = 1;
  // Stream message
  string msg = 2;
}

// StreamObj to track running status of stream enabled objects
message StreamObj {
  // AppInst key - Common key for all stream enabled objects
  AppInstKey key = 1 [(gogoproto.nullable) = false];
  // Obj status messages
  repeated StreamMsg msgs = 2;
  // Current state of the obj on the Cloudlet
  StreamState state = 3 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Last ID to track duplicate messages
  uint32 last_id = 4;
  // Lease time
  int64 lease = 5;
  // Stream error message, if any
  string error_msg = 6;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.noconfig) = "Msgs,LastId,Lease,ErrorMsg";
  option (protogen.uses_org) = "none";
  option (protogen.mc2_target_cloudlet) = "Key.ClusterInstKey.CloudletKey";
}

service StreamObjApi {
  // Stream Application Instance current progress
  rpc StreamAppInst(AppInstKey) returns (stream StreamMsg) {
    option (google.api.http) = {
      post: "/stream/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionView,AppKey.Organization";
  }
  // Stream Cluster Instance current progress
  rpc StreamClusterInst(ClusterInstKey) returns (stream StreamMsg) {
    option (google.api.http) = {
      post: "/stream/clusterinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceClusterInsts,ActionView,Organization";
  }
  // Stream Cloudlet current progress
  rpc StreamCloudlet(CloudletKey) returns (stream StreamMsg) {
    option (google.api.http) = {
      post: "/stream/cloudlet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Organization";
  }
  // This is used internally to forward requests to other Controllers
  rpc StreamLocalMsgs(AppInstKey) returns (stream StreamMsg) {}
}

// StreamObjInfo to track running status of stream enabled objects from CRM
message StreamObjInfo {
  // AppInst key - Common key for all stream enabled objects
  AppInstKey key = 1 [(gogoproto.nullable) = false];
  // Obj status messages
  repeated StreamMsg msgs = 2;
  // Last ID to track duplicate messages
  uint32 last_id = 3;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.uses_org) = "none";
  option (protogen.mc2_target_cloudlet) = "Key.ClusterInstKey.CloudletKey";
}

service StreamObjInfoApi {
  // Show stream obj sent by CRM.
  rpc ShowStreamObjInfo(StreamObjInfo) returns (stream StreamObjInfo) {
    option (google.api.http) = {
      post: "/show/streamobjinfo"
      body: "*"
    };
  }
}
