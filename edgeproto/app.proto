// Application proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "cloudletkey.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "flavor.proto";
import "gogoproto/gogo.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;


message RemoteConnection {
  // tcp, udp or icmp
  string protocol = 1;
  // TCP or UDP port
  uint32 port = 2;  
  // remote IP X.X.X.X
  string remote_ip = 4;
}

// It is important that embedded key structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded key structs have nullable false.

// Application unique key
//
// AppKey uniquely identifies an App
message AppKey {
  // App developer organization
  string organization = 1 [(protogen.keytag) = "apporg"];
  // App name
  string name = 2 [(protogen.keytag) = "app"];
  // App version
  string version = 3 [(protogen.keytag) = "appver"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ImageType
//
// ImageType specifies image type of an App
//
// 0: `IMAGE_TYPE_UNKNOWN`
// 1: `IMAGE_TYPE_DOCKER`
// 2: `IMAGE_TYPE_QCOW`
// 3: `IMAGE_TYPE_HELM`
// 4: `IMAGE_TYPE_OVF`

enum ImageType {
  // Unknown image type
  IMAGE_TYPE_UNKNOWN = 0;
  // Docker container image type compatible either with Docker or Kubernetes
  IMAGE_TYPE_DOCKER = 1;
  // QCOW2 virtual machine image type
  IMAGE_TYPE_QCOW = 2;
  // Helm chart is a separate image type
  IMAGE_TYPE_HELM = 3;
    // OVF is for VMWare VCloud Director. A VMDK and optional MF file should also be present
  IMAGE_TYPE_OVF = 4;
}

// VmAppOsType
//
// VmAppOsType specifies the Operating System for VM based Apps
//
// 0: 'VM_APP_OS_UNKNOWN'
// 1: 'VM_APP_OS_LINUX'
// 2: 'VM_APP_OS_WINDOWS_10'
// 3: 'VM_APP_OS_WINDOWS_2012'
// 4: 'VM_APP_OS_WINDOWS_2016'
// 5: 'VM_APP_OS_WINDOWS_2019'

enum VmAppOsType {
  // Unknown OS type
  VM_APP_OS_UNKNOWN = 0;
  // All Linux 64 bit varieties
  VM_APP_OS_LINUX = 1;
  // Windows 10
  VM_APP_OS_WINDOWS_10 = 2;
  // Windows 2012 Server
  VM_APP_OS_WINDOWS_2012 = 3;
  // Windows 2016 Server
  VM_APP_OS_WINDOWS_2016 = 4;
  // Windows 2019 Server
  VM_APP_OS_WINDOWS_2019 = 5;
}
// DeleteType
//
// DeleteType specifies if AppInst can be auto deleted or not
//
// 0: `NO_AUTO_DELETE`
// 1: `AUTO_DELETE`
enum DeleteType {
  // No autodelete
  NO_AUTO_DELETE = 0;
  // Autodelete
  AUTO_DELETE = 1;
}

// AccessType
//
// AccessType indicates how to access the app
//
// 0: `ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT`
// 1: `ACCESS_TYPE_DIRECT`
// 2: `ACCESS_TYPE_LOAD_BALANCER`
enum AccessType {
  // Default load balancer or direct based on deployment
  ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT = 0;
  // Direct access with no load balancer
  ACCESS_TYPE_DIRECT = 1;
    // Access via a load balancer
  ACCESS_TYPE_LOAD_BALANCER = 2;
}

// ConfigFile
message ConfigFile {
  // Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml
  string kind = 1;
  // Config file contents or URI reference
  string config = 2;
}

// Application
//
// App belongs to developer organizations and is used to provide information about their application.
message App {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // required: true
  // Unique identifier key
  AppKey key = 2 [(gogoproto.nullable) = false];
  // URI of where image resides
  string image_path = 4 [(protogen.backend) = true];
  // Image type (see ImageType)
  ImageType image_type = 5;
  // Comma separated list of protocol:port pairs that the App listens on.
  // Numerical values must be decimal format.
  // i.e. tcp:80,udp:10002,http:443
  string access_ports = 7;
  // Default flavor for the App, which may be overridden by the AppInst
  FlavorKey default_flavor = 9 [(gogoproto.nullable) = false];
  // Public key used for authentication
  string auth_public_key = 12;
  // Command that the container runs to start service 
  string command = 13;
  // Annotations is a comma separated map of arbitrary key value pairs,
  // for example: key1=val1,key2=val2,key3="val 3"
  string annotations = 14;
  // Deployment type (kubernetes, docker, or vm)
  string deployment = 15 [(protogen.backend) = true];
  // Deployment manifest is the deployment specific manifest file/config.
  // For docker deployment, this can be a docker-compose or docker run file.
  // For kubernetes deployment, this can be a kubernetes yaml or helm chart file.
  string deployment_manifest = 16 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Deployment generator target to generate a basic deployment manifest
  string deployment_generator = 17 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Android package name used to match the App name from the Android package
  string android_package_name = 18;
  // Override actions to Controller
  DeleteType del_opt = 20 [(protogen.hidetag) = "nocmp"];
  // Customization files passed through to implementing services
  repeated ConfigFile configs = 21;
  // Option to run App on all nodes of the cluster
  bool scale_with_cluster = 22;
  // Should this app have access to outside world?
  bool internal_ports = 23;
  // Revision can be specified or defaults to current timestamp when app is updated
  string revision = 24 [(protogen.hidetag) = "nocmp"];
  // Official FQDN is the FQDN that the app uses to connect by default
  string official_fqdn = 25;
  // MD5Sum of the VM-based app image
  string md5sum = 26;
  // (removed) shared volume size when creating auto cluster
  reserved "default_shared_volume_size";
  reserved 27;
  // (_deprecated_) Auto provisioning policy name
  string auto_prov_policy = 28;
  // Access type
  AccessType access_type = 29; 
  // Preparing to be deleted
  bool delete_prepare = 31 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Auto provisioning policy names, may be specified multiple times
  repeated string auto_prov_policies = 32;
  // Delimiter to be used for template parsing, defaults to "[[ ]]"
  string template_delimiter = 33;
  // Comma separated list of protocol:port pairs that we should not run health check on.
  // Should be configured in case app does not always listen on these ports.
  // "all" can be specified if no health check to be run for this app.
  // Numerical values must be decimal format.
  // i.e. tcp:80,udp:10002,http:443.
  string skip_hc_ports = 34;
  // Created at time
  distributed_match_engine.Timestamp created_at = 35 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Updated at time
  distributed_match_engine.Timestamp updated_at = 36 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Indicates that an instance of this app can be started on a trusted cloudlet
  bool trusted = 37;
  // Connections this app require to determine if the app is compatible with a trust policy
  repeated RemoteConnection required_outbound_connections = 38;
  // App is allowed to deploy as serverless containers
  bool allow_serverless = 39;
  // Configuration when deployed as serverless containers
  ServerlessConfig serverless_config = 40;
  // OS Type for VM Apps
  VmAppOsType vm_app_os_type = 41;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.alias) = "appname=Key.Name,appvers=Key.Version,app-org=Key.Organization,defaultflavor=DefaultFlavor.Name";
  option (protogen.noconfig) = "DeletePrepare,CreatedAt,UpdatedAt,DelOpt,AutoProvPolicy";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.generate_lookup_by_sublist) = "PolicyKey:AutoProvPolicy";
}

message ServerlessConfig {
  // Virtual CPUs allocation per container when serverless, may be fractional in increments of 0.001
  float vcpus = 1;
  // RAM allocation in megabytes per container when serverless
  uint64 ram = 2;
  // Minimum number of replicas when serverless
  uint32 min_replicas = 3;
}

message AppAutoProvPolicy {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false];
  // Auto provisioning policy name
  string auto_prov_policy = 2;
  option (protogen.alias) = "appname=AppKey.Name,appvers=AppKey.Version,app-org=AppKey.Organization";
  option (protogen.also_required) = "AppKey.Name,AppKey.Version,AppKey.Organization,AutoProvPolicy";
}

message DeploymentCloudletRequest {
   // Discover potential App Cloudlets
   App app = 1;
   // Attempt to qualify cloudlet resources for deployment
   bool dry_run_deploy = 2;
   // Optional number of worker VMs in dry run K8s Cluster, default = 2
   uint32 num_workers = 3;
   option (protogen.alias) = "appname=App.Key.Name,appvers=App.Key.Version,app-org=Key.Organization,defaultflavor=DefaultFlavor.Name";
   option (protogen.noconfig) = "App.DeletePrepare,App.CreatedAt,App.UpdatedAt,App.DelOpt,App.AutoProvPolicy";
}

service AppApi {
  // Create Application. Creates a definition for an application instance for Cloudlet deployment.
  rpc CreateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/create/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Delete Application. Deletes a definition of an Application instance. Make sure no other application
  // instances exist with that definition. If they do exist, you must delete those Application instances first.
  rpc DeleteApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/delete/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
  }
  // Update Application. Updates the definition of an Application instance.
  rpc UpdateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/update/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Show Applications. Lists all Application definitions managed from the Edge Controller.
  // Any fields specified will be used to filter results.
  rpc ShowApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionView,Key.Organization";
  }
  // Add an AutoProvPolicy to the App
  rpc AddAppAutoProvPolicy(AppAutoProvPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/add/appautoprovpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Remove an AutoProvPolicy from the App
  rpc RemoveAppAutoProvPolicy(AppAutoProvPolicy) returns (Result) {
    option (google.api.http) = {
      post: "/remove/appautoprovpolicy"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,AppKey.Organization";
    option (protogen.input_required) = true;
  }
  // Discover cloudlets supporting deployments of App.DefaultFlavor
  rpc ShowCloudletsForAppDeployment(DeploymentCloudletRequest) returns (stream CloudletKey) {
   option (google.api.http) =  {
     post: "/showmapping/deploymentcloudlets"
     body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,";
    option (protogen.mc2_custom_authz) = true;
    option (protogen.stream_out_incremental) = true;
  }
}
