// Application proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "developer.proto";
import "flavor.proto";
import "gogoproto/gogo.proto";

// It is important that embedded key structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded key structs have nullable false.

// AppKey uniquely identifies an App
message AppKey {
  // Developer key
  DeveloperKey developer_key = 1 [(gogoproto.nullable) = false];
  // App name
  string name = 2;
  // App version
  string version = 3;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ImageType specifies image type of an App
enum ImageType {
  // Unknown image type
  IMAGE_TYPE_UNKNOWN = 0;
  // Docker container image type compatible either with Docker or Kubernetes
  IMAGE_TYPE_DOCKER = 1;
  // QCOW2 virtual machine image type
  IMAGE_TYPE_QCOW = 2;
}

enum DeleteType {
  // No autodelete
  NO_AUTO_DELETE = 0;
  // Autodelete
  AUTO_DELETE = 1;
}

message ConfigFile {
  // kind (type) of config, i.e. k8s-manifest, helm-values, deploygen-config
  string kind = 1;
  // config file contents or URI reference
  string config = 2;
}

//App belongs to developers and is used to provide information about their application.
 message App {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  AppKey key = 2 [(gogoproto.nullable) = false];
  // URI of where image resides
  string image_path = 4 [(protogen.backend) = true];
  // Image type (see ImageType)
  ImageType image_type = 5;
  // Comma separated list of protocol:port pairs that the App listens on.
  // Numerical values must be decimal format.
  // i.e. tcp:80,udp:10002,http:443
  string access_ports = 7;
  // Default flavor for the App, which may be overridden by the AppInst
  FlavorKey default_flavor = 9 [(gogoproto.nullable) = false];
  // public key used for authentication
  string auth_public_key = 12;
  // Command that the container runs to start service 
  string command = 13;
  // Annotations is a comma separated map of arbitrary key value pairs,
  // for example: key1=val1,key2=val2,key3="val 3"
  string annotations = 14;
  // Deployment type (kubernetes, docker, or vm)
  string deployment = 15 [(protogen.backend) = true];
  // Deployment manifest is the deployment specific manifest file/config
  // For docker deployment, this can be a docker-compose or docker run file
  // For kubernetes deployment, this can be a kubernetes yaml or helm chart file
  string deployment_manifest = 16 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Deployment generator target to generate a basic deployment manifest
  string deployment_generator = 17 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Android package name used to match the App name from the Android package
  string android_package_name = 18;
  // Override actions to Controller
  DeleteType del_opt = 20 [(protogen.hidetag) = "nocmp"];
  // Customization files passed through to implementing services
  repeated ConfigFile configs = 21;
  // Option to run App on all nodes of the cluster
  bool scale_with_cluster = 22;
  // Should this app have access to outside world?
  bool internal_ports = 23;
  // Revision increments each time the App is updated
  int32 revision = 24;
  // Official FQDN is the FQDN that the app uses to connect by default
  string official_fqdn = 25;
  // MD5Sum of the VM-based app image
  string md5sum = 26;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protocmd.alias) = "appname=Key.Name,appvers=Key.Version,developer=Key.DeveloperKey.Name";
  option (protocmd.noconfig) = "Revision";
}

service AppApi {
  // Create an application
  rpc CreateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/create/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.DeveloperKey.Name";
  }
  // Delete an application
  rpc DeleteApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/delete/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.DeveloperKey.Name";
  }
  // Update an application
  rpc UpdateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/update/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionManage,Key.DeveloperKey.Name";
  }
  // Show applications. Any fields specified will be used to filter results.
  rpc ShowApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/app"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceApps,ActionView,Key.DeveloperKey.Name";
  }
}
