// Application proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "developer.proto";
import "flavor.proto";
import "cluster.proto";
import "common.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// It is important that embedded key structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded key structs have nullable false.

// AppKey uniquely identifies an Application.
message AppKey {
  // Developer key
  DeveloperKey developer_key = 1 [(gogoproto.nullable) = false];
  // Application name
  string name = 2;
  // Version of the app
  string version = 3;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ImageType specifies the image type of the application.
enum ImageType {
  // Unknown image type
  ImageTypeUnknown = 0;
  // Docker container image type compatible with Kubernetes
  ImageTypeDocker= 1;
  // QCOW2 virtual machine image type
  ImageTypeQCOW = 2;
}

// Apps are applications that may be instantiated on Cloudlets, providing a back-end service to an application client (using the mobiledgex SDK) running on a user device such as a cell phone, wearable, drone, etc. Applications belong to Developers, and must specify their image and accessibility. Applications are analagous to Pods in Kubernetes, and similarly are tied to a Cluster.
// An application in itself is not tied to a Cloudlet, but provides a definition that can be used to instantiate it on a Cloudlet. AppInsts are applications instantiated on a particular Cloudlet.
message App {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  AppKey key = 2 [(gogoproto.nullable) = false];
  // URI from which to download image
  string image_path = 4 [(protogen.backend) = true];
  // Image type (see ImageType)
  ImageType image_type = 5;
  // IP access type
  IpAccess ip_access = 6;
  // For Layer4 access, the ports the app listens on.
  // This is a comma separated list of protocol:port pairs, i.e.
  // tcp:80,http:443,udp:10002.
  // Only tcp, udp, and http protocols are supported; tcp and udp are assumed
  // to be L4, and http is assumed to be L7 access.
  string access_ports = 7;
  // URI of resource to be used to establish config for App.
  string config = 8;
  // Default flavor for the App, may be overridden by the AppInst
  FlavorKey default_flavor = 9 [(gogoproto.nullable) = false];
  // Cluster on which the App can be instantiated.
  // If not specified during create, a cluster will be automatically created.
  // If specified, it must exist.
  ClusterKey cluster = 10 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Template of kubernetes deployment yaml.
  // Who/What sets this is TDB, but it should not be directly
  // exposed to the user, because we do not want to expose
  // kubernetes to the user. However, because we currently don't have any
  // other way to set it, for flexibility, for now it is exposed to the user.
  string app_template = 11;
  // public key used for authentication
  string auth_public_key = 12;
  // manifest - which cloudlets can this run on?
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
}

service AppApi {
  // Create an application
  rpc CreateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/create/app"
      body: "*"
    };
  }
  // Delete an application
  rpc DeleteApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/delete/app"
      body: "*"
    };
  }
  // Update an application
  rpc UpdateApp(App) returns (Result) {
    option (google.api.http) = {
      post: "/update/app"
      body: "*"
    };
  }
  // Show applications. Any fields specified will be used to filter results.
  rpc ShowApp(App) returns (stream App) {
    option (google.api.http) = {
      post: "/show/app"
      body: "*"
    };
  }
}
