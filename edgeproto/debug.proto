syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";
import "node.proto";

// DebugRequest. Keep everything in one struct to make it easy to send commands without having to change the code.
message DebugRequest {
  // Service node identifier (see NodeShow)
  NodeKey node = 1 [(gogoproto.nullable) = false];
  // Comma separated list of debug level names: etcd,api,notify,dmereq,locapi,infra,metrics,upgrade,info,sampled
  string levels = 2;
  // Debug command
  string cmd = 3;
  // if possible, make output pretty
  bool pretty = 4;
  // Id used internally
  uint64 id = 5 [(protogen.backend) = true];
  // Additional arguments for cmd
  string args = 6;
  // custom timeout (duration, defaults to 10s)
  int64 timeout = 7 [(gogoproto.casttype) = "Duration"];
  option (protogen.alias) = "name=Node.Name,type=Node.Type,cloudlet=Node.CloudletKey.Name,organization=Node.CloudletKey.Organization,region=Node.Region,cmd=Cmd";
  option (protogen.notify_message) = true;
  option (protogen.also_required) = "Cmd";
}

message DebugReply {
  // Service node identifier (see NodeShow)
  NodeKey node = 1 [(gogoproto.nullable) = false];
  // Debug output, if any
  string output = 2;
  // Id used internally
  uint64 id = 3 [(protogen.backend) = true];
  option (protogen.notify_message) = true;
}

service DebugApi {
  rpc EnableDebugLevels(DebugRequest) returns (stream DebugReply) {
    option (google.api.http) = {
      post: "/debug/enablelevels"
      body: "*"
    };
    option (protogen.method_noconfig) = "Cmd,Id";
    option (protogen.method_also_required) = "Levels";
    option (protogen.mc2_api) = "ResourceConfig,ActionManage,";
    option (protogen.mc2_api_notifyroot) = true;
  }
  rpc DisableDebugLevels(DebugRequest) returns (stream DebugReply) {
    option (google.api.http) = {
      post: "/debug/disablelevels"
      body: "*"
    };
    option (protogen.method_noconfig) = "Cmd,Id";
    option (protogen.method_also_required) = "Levels";
    option (protogen.mc2_api) = "ResourceConfig,ActionManage,";
    option (protogen.mc2_api_notifyroot) = true;
  }
  rpc ShowDebugLevels(DebugRequest) returns (stream DebugReply) {
    option (google.api.http) = {
      post: "/debug/showlevels"
      body: "*"
    };
    option (protogen.method_noconfig) = "Levels,Cmd,Id";
    option (protogen.mc2_api) = "ResourceConfig,ActionView,";
    option (protogen.mc2_api_notifyroot) = true;
    option (protogen.non_standard_show) = true;
  }
  rpc RunDebug(DebugRequest) returns (stream DebugReply) {
    option (google.api.http) = {
      post: "/debug/run"
      body: "*"
    };
    option (protogen.method_noconfig) = "Levels,Id";
    option (protogen.mc2_api) = "ResourceConfig,ActionManage,";
    option (protogen.mc2_api_notifyroot) = true;
  }
}

message DebugData {
  repeated DebugRequest requests = 1 [(gogoproto.nullable) = false];
  option (protogen.e2edata) = true;
  option (protogen.generate_copy_in_fields) = false;
}
