// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: useralert.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserAlertKey struct {
	// Name of the organization for the app that this alert can be applied to
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// Alert name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UserAlertKey) Reset()         { *m = UserAlertKey{} }
func (m *UserAlertKey) String() string { return proto.CompactTextString(m) }
func (*UserAlertKey) ProtoMessage()    {}
func (*UserAlertKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0fdf0a21ada7e04, []int{0}
}
func (m *UserAlertKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAlertKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAlertKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAlertKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAlertKey.Merge(m, src)
}
func (m *UserAlertKey) XXX_Size() int {
	return m.Size()
}
func (m *UserAlertKey) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAlertKey.DiscardUnknown(m)
}

var xxx_messageInfo_UserAlertKey proto.InternalMessageInfo

type UserAlert struct {
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key UserAlertKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// container or pod CPU utilization rate(percentage) across all nodes
	CpuUtilizationLimit uint32 `protobuf:"varint,3,opt,name=cpu_utilization_limit,json=cpuUtilizationLimit,proto3" json:"cpu_utilization_limit,omitempty"`
	// container or pod memory utilization rate(percentage) across all nodes
	MemUtilizationLimit uint32 `protobuf:"varint,4,opt,name=mem_utilization_limit,json=memUtilizationLimit,proto3" json:"mem_utilization_limit,omitempty"`
	// container or pod disk utilization rate(percentage) across all nodes
	DiskUtilizationLimit uint32 `protobuf:"varint,5,opt,name=disk_utilization_limit,json=diskUtilizationLimit,proto3" json:"disk_utilization_limit,omitempty"`
	// Active Connections alert threshold
	ActiveConnLimit uint32 `protobuf:"varint,6,opt,name=active_conn_limit,json=activeConnLimit,proto3" json:"active_conn_limit,omitempty"`
	// Alert Severity
	Severity string `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	// Duration for which alert interval is active
	TriggerTime Duration `protobuf:"varint,8,opt,name=trigger_time,json=triggerTime,proto3,casttype=Duration" json:"trigger_time,omitempty"`
	// Additional Labels
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional Annotations for extra information about the alert
	Annotations map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UserAlert) Reset()         { *m = UserAlert{} }
func (m *UserAlert) String() string { return proto.CompactTextString(m) }
func (*UserAlert) ProtoMessage()    {}
func (*UserAlert) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0fdf0a21ada7e04, []int{1}
}
func (m *UserAlert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAlert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAlert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAlert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAlert.Merge(m, src)
}
func (m *UserAlert) XXX_Size() int {
	return m.Size()
}
func (m *UserAlert) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAlert.DiscardUnknown(m)
}

var xxx_messageInfo_UserAlert proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserAlertKey)(nil), "edgeproto.UserAlertKey")
	proto.RegisterType((*UserAlert)(nil), "edgeproto.UserAlert")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.UserAlert.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "edgeproto.UserAlert.LabelsEntry")
}

func init() { proto.RegisterFile("useralert.proto", fileDescriptor_d0fdf0a21ada7e04) }

var fileDescriptor_d0fdf0a21ada7e04 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x8f, 0x22, 0x45,
	0x14, 0xc7, 0xa9, 0x81, 0x41, 0x28, 0xd8, 0xc0, 0xb4, 0x38, 0x56, 0xc8, 0xca, 0x10, 0x12, 0x13,
	0xb2, 0x01, 0x7a, 0xc3, 0x6a, 0x32, 0x92, 0x60, 0x02, 0x83, 0xf1, 0xb0, 0xbb, 0xfe, 0xe8, 0x5d,
	0xbc, 0x92, 0xa6, 0x79, 0xf6, 0x54, 0xe8, 0xee, 0xea, 0x54, 0x77, 0x33, 0xe2, 0xc9, 0xf8, 0x17,
	0x8c, 0xf1, 0x62, 0x3c, 0x79, 0xf1, 0xe2, 0x49, 0x3d, 0xee, 0xc1, 0xf3, 0x1c, 0x27, 0x7a, 0xf1,
	0x34, 0x51, 0xc6, 0x83, 0x99, 0x93, 0xc9, 0x30, 0xc4, 0x98, 0x98, 0x98, 0xae, 0x6e, 0xa1, 0x99,
	0x21, 0x1a, 0xe7, 0xe2, 0x85, 0x54, 0xbf, 0xfa, 0x7e, 0x5f, 0x7d, 0xa8, 0xef, 0xeb, 0xc6, 0x39,
	0xcf, 0x01, 0xae, 0x1a, 0xc0, 0xdd, 0x86, 0xcd, 0x99, 0xcb, 0xa4, 0x34, 0x8c, 0x74, 0x10, 0xcb,
	0xe2, 0x5d, 0x9d, 0x31, 0xdd, 0x00, 0x59, 0xb5, 0xa9, 0xac, 0x5a, 0x16, 0x73, 0x55, 0x97, 0x32,
	0xcb, 0x09, 0x84, 0xc5, 0x2c, 0x07, 0xc7, 0x33, 0x42, 0x5b, 0x71, 0x5f, 0xa7, 0xee, 0xa1, 0x37,
	0x6c, 0x68, 0xcc, 0x94, 0x4d, 0x36, 0xa4, 0x86, 0xdf, 0xe6, 0x03, 0xd9, 0xff, 0xad, 0x6b, 0x06,
	0xf3, 0x46, 0xb2, 0xd0, 0xe9, 0x60, 0x2d, 0x17, 0xa1, 0xb3, 0xa0, 0x33, 0x9d, 0x89, 0xa5, 0xec,
	0xaf, 0x82, 0x6a, 0xc5, 0xc4, 0xd9, 0xbe, 0x03, 0xbc, 0xe3, 0x93, 0x3d, 0x84, 0xa9, 0x74, 0x1f,
	0x67, 0x19, 0xd7, 0x55, 0x8b, 0x7e, 0x28, 0x20, 0x08, 0x2a, 0xa3, 0x6a, 0xba, 0x9b, 0x7d, 0xb6,
	0x20, 0x29, 0x41, 0xcf, 0xb8, 0xae, 0xac, 0x29, 0xa4, 0x97, 0x70, 0xc2, 0x52, 0x4d, 0x20, 0x5b,
	0x42, 0x99, 0x7e, 0xb6, 0x20, 0xdb, 0x42, 0xa9, 0x88, 0x72, 0x2b, 0xfb, 0xeb, 0x25, 0x41, 0xbf,
	0x5f, 0x12, 0xf4, 0xf5, 0x17, 0x7b, 0xa8, 0xf2, 0x5d, 0x12, 0xa7, 0x97, 0xe7, 0x49, 0xbb, 0x38,
	0xf9, 0x3e, 0x05, 0x63, 0xe4, 0x10, 0x54, 0x8e, 0x57, 0xd3, 0x4a, 0xf8, 0x24, 0xc9, 0x38, 0x3e,
	0x86, 0xa9, 0xe8, 0x98, 0x69, 0xbe, 0xd8, 0x58, 0xde, 0x54, 0x23, 0x8a, 0xda, 0x4d, 0x9c, 0x9c,
	0xed, 0xc5, 0x14, 0x5f, 0x29, 0x35, 0xf1, 0x0b, 0x9a, 0xed, 0x0d, 0x3c, 0x97, 0x1a, 0x21, 0xd6,
	0xc0, 0xa0, 0x26, 0x75, 0x49, 0xbc, 0x8c, 0xaa, 0x77, 0x94, 0xe7, 0x35, 0xdb, 0xeb, 0xaf, 0xf6,
	0x1e, 0xf9, 0x5b, 0xbe, 0xc7, 0x04, 0x73, 0x83, 0x27, 0x11, 0x78, 0x4c, 0x30, 0x6f, 0x78, 0x5e,
	0xc1, 0xbb, 0x23, 0xea, 0x8c, 0x37, 0x98, 0xb6, 0x85, 0xa9, 0xe0, 0xef, 0xde, 0x70, 0xdd, 0xc3,
	0x3b, 0xaa, 0xe6, 0xd2, 0x09, 0x0c, 0x34, 0x66, 0xfd, 0x6d, 0x48, 0x0a, 0x43, 0x2e, 0xd8, 0x38,
	0x60, 0x56, 0xa8, 0x2d, 0xe2, 0x94, 0x03, 0x13, 0xe0, 0xd4, 0x9d, 0x92, 0xe7, 0xfc, 0x1b, 0x55,
	0x96, 0xcf, 0x92, 0x8c, 0xb3, 0x2e, 0xa7, 0xba, 0x0e, 0x7c, 0xe0, 0x52, 0x13, 0x48, 0xaa, 0x8c,
	0xaa, 0xf1, 0x6e, 0xf6, 0x8f, 0xb3, 0xbd, 0x54, 0xcf, 0xe3, 0xe2, 0x40, 0x25, 0x13, 0x2a, 0x9e,
	0x52, 0x13, 0xa4, 0x7d, 0x9c, 0x34, 0xd4, 0x21, 0x18, 0x0e, 0x49, 0x97, 0xe3, 0xd5, 0x4c, 0xb3,
	0xbc, 0xe9, 0x2a, 0x1b, 0x8f, 0x84, 0xe4, 0x0d, 0xcb, 0xe5, 0x53, 0x25, 0xd4, 0x4b, 0x6f, 0xe2,
	0x4c, 0x64, 0x12, 0x09, 0x16, 0xf6, 0x97, 0x37, 0xda, 0x3b, 0x2b, 0x5d, 0xd0, 0x23, 0xea, 0x2c,
	0xbe, 0x86, 0x33, 0x91, 0xfe, 0x52, 0x3e, 0x48, 0x56, 0x4c, 0x55, 0x10, 0x5d, 0x01, 0x6f, 0x4f,
	0x54, 0xc3, 0x0b, 0xe7, 0x47, 0x09, 0x1e, 0x5a, 0x5b, 0xfb, 0xa8, 0xf8, 0x3a, 0xce, 0x5f, 0xef,
	0xfd, 0x5f, 0xfc, 0xad, 0xef, 0x91, 0x3f, 0x7a, 0xbf, 0x5d, 0x12, 0xf4, 0xd1, 0x9c, 0xa0, 0xe3,
	0x39, 0x41, 0x9f, 0xcd, 0x09, 0xfa, 0xfc, 0x8a, 0x7c, 0x89, 0xfc, 0xc9, 0x6c, 0x3f, 0x84, 0x69,
	0xe3, 0x2d, 0xd5, 0x84, 0x9a, 0x18, 0xd7, 0x3a, 0xe3, 0xba, 0x28, 0xbd, 0x1d, 0x19, 0xee, 0x9a,
	0x66, 0x7b, 0xf5, 0x48, 0xd8, 0xed, 0x03, 0xdb, 0x13, 0x39, 0xd5, 0x4c, 0x30, 0xeb, 0x9e, 0xa3,
	0xea, 0xd0, 0x7e, 0x0c, 0x66, 0x50, 0xf2, 0xb3, 0x0f, 0x6b, 0x3d, 0xea, 0x8c, 0x83, 0x62, 0x90,
	0x6f, 0xdd, 0x0f, 0x1e, 0x34, 0xf1, 0x47, 0xda, 0x9d, 0xf5, 0xc8, 0x6b, 0x61, 0x62, 0x75, 0x3f,
	0xd3, 0xf6, 0xd3, 0x55, 0x7c, 0xdf, 0x2e, 0x48, 0x7e, 0x0c, 0xd3, 0x76, 0x14, 0xa8, 0xf9, 0x67,
	0x22, 0xf2, 0xc2, 0x76, 0x6c, 0x2a, 0x7d, 0x83, 0x70, 0xee, 0x80, 0x83, 0xea, 0xc2, 0xea, 0xbd,
	0x2a, 0x6c, 0x0a, 0xaa, 0xb8, 0x13, 0xa9, 0x2a, 0xe2, 0x9b, 0x52, 0xf1, 0x2e, 0xe6, 0xe4, 0x55,
	0x05, 0x1c, 0xe6, 0x71, 0x0d, 0x7a, 0x30, 0x01, 0x83, 0xd9, 0xc0, 0xdf, 0x61, 0x06, 0xd5, 0xa6,
	0xb5, 0x8e, 0xe0, 0x7d, 0xac, 0x5a, 0xaa, 0x0e, 0xb5, 0xeb, 0x37, 0x33, 0xbb, 0x22, 0xa9, 0x27,
	0xe1, 0x60, 0x7e, 0xb5, 0x20, 0xf9, 0xeb, 0xfb, 0x1f, 0xff, 0xf0, 0xcb, 0xa7, 0x5b, 0xbb, 0x95,
	0x1d, 0x59, 0x13, 0x6c, 0xf2, 0xf2, 0xf3, 0xd7, 0x42, 0xf7, 0xa4, 0x4f, 0x10, 0xce, 0xf5, 0xc0,
	0x80, 0x5b, 0x31, 0xf7, 0x6f, 0xcd, 0xbc, 0x64, 0x1a, 0x89, 0xb3, 0x6f, 0x32, 0xf5, 0xed, 0x91,
	0xfa, 0x7f, 0x31, 0x79, 0xe2, 0xec, 0x75, 0xa6, 0x63, 0x84, 0xef, 0x3c, 0x39, 0x64, 0x47, 0xff,
	0x46, 0xb4, 0xb1, 0x5a, 0x79, 0xf7, 0x62, 0x4e, 0x1e, 0xfc, 0x33, 0xd4, 0x7b, 0x14, 0x8e, 0x36,
	0x23, 0x15, 0x2a, 0x39, 0xd9, 0x39, 0x64, 0x47, 0x6b, 0x40, 0xf7, 0x51, 0xf7, 0xee, 0xc9, 0xcf,
	0xa5, 0xd8, 0xc9, 0xac, 0x84, 0x4e, 0x67, 0x25, 0xf4, 0xd3, 0xac, 0x84, 0x8e, 0xcf, 0x4b, 0xb1,
	0xd3, 0xf3, 0x52, 0xec, 0xc7, 0xf3, 0x52, 0x6c, 0x98, 0x14, 0x0c, 0x0f, 0xfe, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x51, 0x9c, 0x90, 0xe1, 0xee, 0x06, 0x00, 0x00,
}

func (this *UserAlertKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.UserAlertKey{")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUseralert(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserAlertApiClient is the client API for UserAlertApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAlertApiClient interface {
	// Create a User Defined Alert
	CreateUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error)
	// Delete a User Defined Alert
	DeleteUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error)
	// Update a User Defined Alert
	UpdateUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error)
	// Show User Defined Alerts. Any fields specified will be used to filter results.
	ShowUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (UserAlertApi_ShowUserAlertClient, error)
}

type userAlertApiClient struct {
	cc *grpc.ClientConn
}

func NewUserAlertApiClient(cc *grpc.ClientConn) UserAlertApiClient {
	return &userAlertApiClient{cc}
}

func (c *userAlertApiClient) CreateUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.UserAlertApi/CreateUserAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAlertApiClient) DeleteUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.UserAlertApi/DeleteUserAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAlertApiClient) UpdateUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.UserAlertApi/UpdateUserAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAlertApiClient) ShowUserAlert(ctx context.Context, in *UserAlert, opts ...grpc.CallOption) (UserAlertApi_ShowUserAlertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserAlertApi_serviceDesc.Streams[0], "/edgeproto.UserAlertApi/ShowUserAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &userAlertApiShowUserAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserAlertApi_ShowUserAlertClient interface {
	Recv() (*UserAlert, error)
	grpc.ClientStream
}

type userAlertApiShowUserAlertClient struct {
	grpc.ClientStream
}

func (x *userAlertApiShowUserAlertClient) Recv() (*UserAlert, error) {
	m := new(UserAlert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserAlertApiServer is the server API for UserAlertApi service.
type UserAlertApiServer interface {
	// Create a User Defined Alert
	CreateUserAlert(context.Context, *UserAlert) (*Result, error)
	// Delete a User Defined Alert
	DeleteUserAlert(context.Context, *UserAlert) (*Result, error)
	// Update a User Defined Alert
	UpdateUserAlert(context.Context, *UserAlert) (*Result, error)
	// Show User Defined Alerts. Any fields specified will be used to filter results.
	ShowUserAlert(*UserAlert, UserAlertApi_ShowUserAlertServer) error
}

// UnimplementedUserAlertApiServer can be embedded to have forward compatible implementations.
type UnimplementedUserAlertApiServer struct {
}

func (*UnimplementedUserAlertApiServer) CreateUserAlert(ctx context.Context, req *UserAlert) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAlert not implemented")
}
func (*UnimplementedUserAlertApiServer) DeleteUserAlert(ctx context.Context, req *UserAlert) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAlert not implemented")
}
func (*UnimplementedUserAlertApiServer) UpdateUserAlert(ctx context.Context, req *UserAlert) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAlert not implemented")
}
func (*UnimplementedUserAlertApiServer) ShowUserAlert(req *UserAlert, srv UserAlertApi_ShowUserAlertServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowUserAlert not implemented")
}

func RegisterUserAlertApiServer(s *grpc.Server, srv UserAlertApiServer) {
	s.RegisterService(&_UserAlertApi_serviceDesc, srv)
}

func _UserAlertApi_CreateUserAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAlertApiServer).CreateUserAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.UserAlertApi/CreateUserAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAlertApiServer).CreateUserAlert(ctx, req.(*UserAlert))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAlertApi_DeleteUserAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAlertApiServer).DeleteUserAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.UserAlertApi/DeleteUserAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAlertApiServer).DeleteUserAlert(ctx, req.(*UserAlert))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAlertApi_UpdateUserAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAlert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAlertApiServer).UpdateUserAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.UserAlertApi/UpdateUserAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAlertApiServer).UpdateUserAlert(ctx, req.(*UserAlert))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAlertApi_ShowUserAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserAlert)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserAlertApiServer).ShowUserAlert(m, &userAlertApiShowUserAlertServer{stream})
}

type UserAlertApi_ShowUserAlertServer interface {
	Send(*UserAlert) error
	grpc.ServerStream
}

type userAlertApiShowUserAlertServer struct {
	grpc.ServerStream
}

func (x *userAlertApiShowUserAlertServer) Send(m *UserAlert) error {
	return x.ServerStream.SendMsg(m)
}

var _UserAlertApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.UserAlertApi",
	HandlerType: (*UserAlertApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAlert",
			Handler:    _UserAlertApi_CreateUserAlert_Handler,
		},
		{
			MethodName: "DeleteUserAlert",
			Handler:    _UserAlertApi_DeleteUserAlert_Handler,
		},
		{
			MethodName: "UpdateUserAlert",
			Handler:    _UserAlertApi_UpdateUserAlert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowUserAlert",
			Handler:       _UserAlertApi_ShowUserAlert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "useralert.proto",
}

func (m *UserAlertKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAlertKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAlertKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUseralert(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintUseralert(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserAlert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAlert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAlert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintUseralert(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUseralert(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUseralert(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintUseralert(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUseralert(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUseralert(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TriggerTime != 0 {
		i = encodeVarintUseralert(dAtA, i, uint64(m.TriggerTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Severity) > 0 {
		i -= len(m.Severity)
		copy(dAtA[i:], m.Severity)
		i = encodeVarintUseralert(dAtA, i, uint64(len(m.Severity)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActiveConnLimit != 0 {
		i = encodeVarintUseralert(dAtA, i, uint64(m.ActiveConnLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.DiskUtilizationLimit != 0 {
		i = encodeVarintUseralert(dAtA, i, uint64(m.DiskUtilizationLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.MemUtilizationLimit != 0 {
		i = encodeVarintUseralert(dAtA, i, uint64(m.MemUtilizationLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.CpuUtilizationLimit != 0 {
		i = encodeVarintUseralert(dAtA, i, uint64(m.CpuUtilizationLimit))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUseralert(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintUseralert(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUseralert(dAtA []byte, offset int, v uint64) int {
	offset -= sovUseralert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserAlertKey) Matches(o *UserAlertKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Organization != "" {
		if o.Organization != m.Organization {
			return false
		}
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *UserAlertKey) CopyInFields(src *UserAlertKey) int {
	changed := 0
	if m.Organization != src.Organization {
		m.Organization = src.Organization
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *UserAlertKey) DeepCopyIn(src *UserAlertKey) {
	m.Organization = src.Organization
	m.Name = src.Name
}

func (m *UserAlertKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal UserAlertKey key string", "obj", m)
	}
	return string(key)
}

func UserAlertKeyStringParse(str string, key *UserAlertKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal UserAlertKey key string", "str", str)
	}
}

func (m *UserAlertKey) NotFoundError() error {
	return fmt.Errorf("UserAlert key %s not found", m.GetKeyString())
}

func (m *UserAlertKey) ExistsError() error {
	return fmt.Errorf("UserAlert key %s already exists", m.GetKeyString())
}

var UserAlertKeyTagOrganization = "alertorg"
var UserAlertKeyTagName = "alert"

func (m *UserAlertKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["alertorg"] = m.Organization
	tags["alert"] = m.Name
	return tags
}

// Helper method to check that enums have valid values
func (m *UserAlertKey) ValidateEnums() error {
	return nil
}

func (m *UserAlert) Matches(o *UserAlert, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.CpuUtilizationLimit != 0 {
		if o.CpuUtilizationLimit != m.CpuUtilizationLimit {
			return false
		}
	}
	if !opts.Filter || o.MemUtilizationLimit != 0 {
		if o.MemUtilizationLimit != m.MemUtilizationLimit {
			return false
		}
	}
	if !opts.Filter || o.DiskUtilizationLimit != 0 {
		if o.DiskUtilizationLimit != m.DiskUtilizationLimit {
			return false
		}
	}
	if !opts.Filter || o.ActiveConnLimit != 0 {
		if o.ActiveConnLimit != m.ActiveConnLimit {
			return false
		}
	}
	if !opts.Filter || o.Severity != "" {
		if o.Severity != m.Severity {
			return false
		}
	}
	if !opts.Filter || o.TriggerTime != 0 {
		if o.TriggerTime != m.TriggerTime {
			return false
		}
	}
	if !opts.Filter || o.Labels != nil {
		if len(m.Labels) == 0 && len(o.Labels) > 0 || len(m.Labels) > 0 && len(o.Labels) == 0 {
			return false
		} else if m.Labels != nil && o.Labels != nil {
			if !opts.Filter && len(m.Labels) != len(o.Labels) {
				return false
			}
			for k, _ := range o.Labels {
				_, ok := m.Labels[k]
				if !ok {
					return false
				}
				if o.Labels[k] != m.Labels[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Annotations != nil {
		if len(m.Annotations) == 0 && len(o.Annotations) > 0 || len(m.Annotations) > 0 && len(o.Annotations) == 0 {
			return false
		} else if m.Annotations != nil && o.Annotations != nil {
			if !opts.Filter && len(m.Annotations) != len(o.Annotations) {
				return false
			}
			for k, _ := range o.Annotations {
				_, ok := m.Annotations[k]
				if !ok {
					return false
				}
				if o.Annotations[k] != m.Annotations[k] {
					return false
				}
			}
		}
	}
	return true
}

const UserAlertFieldKey = "2"
const UserAlertFieldKeyOrganization = "2.1"
const UserAlertFieldKeyName = "2.2"
const UserAlertFieldCpuUtilizationLimit = "3"
const UserAlertFieldMemUtilizationLimit = "4"
const UserAlertFieldDiskUtilizationLimit = "5"
const UserAlertFieldActiveConnLimit = "6"
const UserAlertFieldSeverity = "7"
const UserAlertFieldTriggerTime = "8"
const UserAlertFieldLabels = "9"
const UserAlertFieldLabelsKey = "9.1"
const UserAlertFieldLabelsValue = "9.2"
const UserAlertFieldAnnotations = "10"
const UserAlertFieldAnnotationsKey = "10.1"
const UserAlertFieldAnnotationsValue = "10.2"

var UserAlertAllFields = []string{
	UserAlertFieldKeyOrganization,
	UserAlertFieldKeyName,
	UserAlertFieldCpuUtilizationLimit,
	UserAlertFieldMemUtilizationLimit,
	UserAlertFieldDiskUtilizationLimit,
	UserAlertFieldActiveConnLimit,
	UserAlertFieldSeverity,
	UserAlertFieldTriggerTime,
	UserAlertFieldLabelsKey,
	UserAlertFieldLabelsValue,
	UserAlertFieldAnnotationsKey,
	UserAlertFieldAnnotationsValue,
}

var UserAlertAllFieldsMap = map[string]struct{}{
	UserAlertFieldKeyOrganization:      struct{}{},
	UserAlertFieldKeyName:              struct{}{},
	UserAlertFieldCpuUtilizationLimit:  struct{}{},
	UserAlertFieldMemUtilizationLimit:  struct{}{},
	UserAlertFieldDiskUtilizationLimit: struct{}{},
	UserAlertFieldActiveConnLimit:      struct{}{},
	UserAlertFieldSeverity:             struct{}{},
	UserAlertFieldTriggerTime:          struct{}{},
	UserAlertFieldLabelsKey:            struct{}{},
	UserAlertFieldLabelsValue:          struct{}{},
	UserAlertFieldAnnotationsKey:       struct{}{},
	UserAlertFieldAnnotationsValue:     struct{}{},
}

var UserAlertAllFieldsStringMap = map[string]string{
	UserAlertFieldKeyOrganization:      "Key Organization",
	UserAlertFieldKeyName:              "Key Name",
	UserAlertFieldCpuUtilizationLimit:  "Cpu Utilization Limit",
	UserAlertFieldMemUtilizationLimit:  "Mem Utilization Limit",
	UserAlertFieldDiskUtilizationLimit: "Disk Utilization Limit",
	UserAlertFieldActiveConnLimit:      "Active Conn Limit",
	UserAlertFieldSeverity:             "Severity",
	UserAlertFieldTriggerTime:          "Trigger Time",
	UserAlertFieldLabelsKey:            "Labels Key",
	UserAlertFieldLabelsValue:          "Labels Value",
	UserAlertFieldAnnotationsKey:       "Annotations Key",
	UserAlertFieldAnnotationsValue:     "Annotations Value",
}

func (m *UserAlert) IsKeyField(s string) bool {
	return strings.HasPrefix(s, UserAlertFieldKey+".") || s == UserAlertFieldKey
}

func (m *UserAlert) DiffFields(o *UserAlert, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[UserAlertFieldKeyOrganization] = struct{}{}
		fields[UserAlertFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[UserAlertFieldKeyName] = struct{}{}
		fields[UserAlertFieldKey] = struct{}{}
	}
	if m.CpuUtilizationLimit != o.CpuUtilizationLimit {
		fields[UserAlertFieldCpuUtilizationLimit] = struct{}{}
	}
	if m.MemUtilizationLimit != o.MemUtilizationLimit {
		fields[UserAlertFieldMemUtilizationLimit] = struct{}{}
	}
	if m.DiskUtilizationLimit != o.DiskUtilizationLimit {
		fields[UserAlertFieldDiskUtilizationLimit] = struct{}{}
	}
	if m.ActiveConnLimit != o.ActiveConnLimit {
		fields[UserAlertFieldActiveConnLimit] = struct{}{}
	}
	if m.Severity != o.Severity {
		fields[UserAlertFieldSeverity] = struct{}{}
	}
	if m.TriggerTime != o.TriggerTime {
		fields[UserAlertFieldTriggerTime] = struct{}{}
	}
	if m.Labels != nil && o.Labels != nil {
		if len(m.Labels) != len(o.Labels) {
			fields[UserAlertFieldLabels] = struct{}{}
		} else {
			for k0, _ := range m.Labels {
				_, vok0 := o.Labels[k0]
				if !vok0 {
					fields[UserAlertFieldLabels] = struct{}{}
				} else {
					if m.Labels[k0] != o.Labels[k0] {
						fields[UserAlertFieldLabels] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.Labels != nil && o.Labels == nil) || (m.Labels == nil && o.Labels != nil) {
		fields[UserAlertFieldLabels] = struct{}{}
	}
	if m.Annotations != nil && o.Annotations != nil {
		if len(m.Annotations) != len(o.Annotations) {
			fields[UserAlertFieldAnnotations] = struct{}{}
		} else {
			for k0, _ := range m.Annotations {
				_, vok0 := o.Annotations[k0]
				if !vok0 {
					fields[UserAlertFieldAnnotations] = struct{}{}
				} else {
					if m.Annotations[k0] != o.Annotations[k0] {
						fields[UserAlertFieldAnnotations] = struct{}{}
						break
					}
				}
			}
		}
	} else if (m.Annotations != nil && o.Annotations == nil) || (m.Annotations == nil && o.Annotations != nil) {
		fields[UserAlertFieldAnnotations] = struct{}{}
	}
}

var UpdateUserAlertFieldsMap = map[string]struct{}{
	UserAlertFieldCpuUtilizationLimit:  struct{}{},
	UserAlertFieldMemUtilizationLimit:  struct{}{},
	UserAlertFieldDiskUtilizationLimit: struct{}{},
	UserAlertFieldActiveConnLimit:      struct{}{},
	UserAlertFieldSeverity:             struct{}{},
	UserAlertFieldTriggerTime:          struct{}{},
	UserAlertFieldLabels:               struct{}{},
	UserAlertFieldLabelsValue:          struct{}{},
	UserAlertFieldAnnotations:          struct{}{},
	UserAlertFieldAnnotationsValue:     struct{}{},
}

func (m *UserAlert) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateUserAlertFieldsMap[field]; !ok {
			if _, ok := UserAlertAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, UserAlertAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *UserAlert) CopyInFields(src *UserAlert) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.CpuUtilizationLimit != src.CpuUtilizationLimit {
			m.CpuUtilizationLimit = src.CpuUtilizationLimit
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.MemUtilizationLimit != src.MemUtilizationLimit {
			m.MemUtilizationLimit = src.MemUtilizationLimit
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.DiskUtilizationLimit != src.DiskUtilizationLimit {
			m.DiskUtilizationLimit = src.DiskUtilizationLimit
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.ActiveConnLimit != src.ActiveConnLimit {
			m.ActiveConnLimit = src.ActiveConnLimit
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.Severity != src.Severity {
			m.Severity = src.Severity
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.TriggerTime != src.TriggerTime {
			m.TriggerTime = src.TriggerTime
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if src.Labels != nil {
			m.Labels = make(map[string]string)
			for k0, _ := range src.Labels {
				m.Labels[k0] = src.Labels[k0]
				changed++
			}
		} else if m.Labels != nil {
			m.Labels = nil
			changed++
		}
	}
	if _, set := fmap["10"]; set {
		if src.Annotations != nil {
			m.Annotations = make(map[string]string)
			for k0, _ := range src.Annotations {
				m.Annotations[k0] = src.Annotations[k0]
				changed++
			}
		} else if m.Annotations != nil {
			m.Annotations = nil
			changed++
		}
	}
	return changed
}

func (m *UserAlert) DeepCopyIn(src *UserAlert) {
	m.Key.DeepCopyIn(&src.Key)
	m.CpuUtilizationLimit = src.CpuUtilizationLimit
	m.MemUtilizationLimit = src.MemUtilizationLimit
	m.DiskUtilizationLimit = src.DiskUtilizationLimit
	m.ActiveConnLimit = src.ActiveConnLimit
	m.Severity = src.Severity
	m.TriggerTime = src.TriggerTime
	if src.Labels != nil {
		m.Labels = make(map[string]string)
		for k, v := range src.Labels {
			m.Labels[k] = v
		}
	} else {
		m.Labels = nil
	}
	if src.Annotations != nil {
		m.Annotations = make(map[string]string)
		for k, v := range src.Annotations {
			m.Annotations[k] = v
		}
	} else {
		m.Annotations = nil
	}
}

func (s *UserAlert) HasFields() bool {
	return true
}

type UserAlertStore struct {
	kvstore objstore.KVStore
}

func NewUserAlertStore(kvstore objstore.KVStore) UserAlertStore {
	return UserAlertStore{kvstore: kvstore}
}

func (s *UserAlertStore) Create(ctx context.Context, m *UserAlert, wait func(int64)) (*Result, error) {
	err := m.Validate(UserAlertAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("UserAlert", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *UserAlertStore) Update(ctx context.Context, m *UserAlert, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("UserAlert", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur UserAlert
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *UserAlertStore) Put(ctx context.Context, m *UserAlert, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(UserAlertAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("UserAlert", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *UserAlertStore) Delete(ctx context.Context, m *UserAlert, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("UserAlert", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *UserAlertStore) LoadOne(key string) (*UserAlert, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj UserAlert
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse UserAlert data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *UserAlertStore) STMGet(stm concurrency.STM, key *UserAlertKey, buf *UserAlert) bool {
	keystr := objstore.DbKeyString("UserAlert", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *UserAlertStore) STMPut(stm concurrency.STM, obj *UserAlert, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("UserAlert", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("UserAlert json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *UserAlertStore) STMDel(stm concurrency.STM, key *UserAlertKey) {
	keystr := objstore.DbKeyString("UserAlert", key)
	stm.Del(keystr)
}

type UserAlertKeyWatcher struct {
	cb func(ctx context.Context)
}

type UserAlertCacheData struct {
	Obj    *UserAlert
	ModRev int64
}

// UserAlertCache caches UserAlert objects in memory in a hash table
// and keeps them in sync with the database.
type UserAlertCache struct {
	Objs          map[UserAlertKey]*UserAlertCacheData
	Mux           util.Mutex
	List          map[UserAlertKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *UserAlertKey, old *UserAlert, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *UserAlert, new *UserAlert)
	DeletedCbs    []func(ctx context.Context, old *UserAlert)
	KeyWatchers   map[UserAlertKey][]*UserAlertKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *UserAlertKey)
	DeletedKeyCbs []func(ctx context.Context, key *UserAlertKey)
}

func NewUserAlertCache() *UserAlertCache {
	cache := UserAlertCache{}
	InitUserAlertCache(&cache)
	return &cache
}

func InitUserAlertCache(cache *UserAlertCache) {
	cache.Objs = make(map[UserAlertKey]*UserAlertCacheData)
	cache.KeyWatchers = make(map[UserAlertKey][]*UserAlertKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *UserAlertCache) GetTypeString() string {
	return "UserAlert"
}

func (c *UserAlertCache) Get(key *UserAlertKey, valbuf *UserAlert) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *UserAlertCache) GetWithRev(key *UserAlertKey, valbuf *UserAlert, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *UserAlertCache) HasKey(key *UserAlertKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *UserAlertCache) GetAllKeys(ctx context.Context, cb func(key *UserAlertKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *UserAlertCache) Update(ctx context.Context, in *UserAlert, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *UserAlert) (*UserAlert, bool) {
		return in, true
	})
}

func (c *UserAlertCache) UpdateModFunc(ctx context.Context, key *UserAlertKey, modRev int64, modFunc func(old *UserAlert) (new *UserAlert, changed bool)) {
	c.Mux.Lock()
	var old *UserAlert
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &UserAlert{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &UserAlert{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &UserAlertCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *UserAlertCache) Delete(ctx context.Context, in *UserAlert, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *UserAlert) bool {
		return true
	})
}

func (c *UserAlertCache) DeleteCondFunc(ctx context.Context, in *UserAlert, modRev int64, condFunc func(old *UserAlert) bool) {
	c.Mux.Lock()
	var old *UserAlert
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *UserAlertCache) Prune(ctx context.Context, validKeys map[UserAlertKey]struct{}) {
	notify := make(map[UserAlertKey]*UserAlertCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *UserAlertCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *UserAlertCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *UserAlertCache) Show(filter *UserAlert, cb func(ret *UserAlert) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func UserAlertGenericNotifyCb(fn func(key *UserAlertKey, old *UserAlert)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*UserAlertKey), obj.(*UserAlert))
	}
}

func (c *UserAlertCache) SetNotifyCb(fn func(ctx context.Context, obj *UserAlertKey, old *UserAlert, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *UserAlertKey, old *UserAlert, modRev int64){fn}
}

func (c *UserAlertCache) SetUpdatedCb(fn func(ctx context.Context, old *UserAlert, new *UserAlert)) {
	c.UpdatedCbs = []func(ctx context.Context, old *UserAlert, new *UserAlert){fn}
}

func (c *UserAlertCache) SetDeletedCb(fn func(ctx context.Context, old *UserAlert)) {
	c.DeletedCbs = []func(ctx context.Context, old *UserAlert){fn}
}

func (c *UserAlertCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *UserAlertKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *UserAlertKey){fn}
}

func (c *UserAlertCache) SetDeletedKeyCb(fn func(ctx context.Context, key *UserAlertKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *UserAlertKey){fn}
}

func (c *UserAlertCache) AddUpdatedCb(fn func(ctx context.Context, old *UserAlert, new *UserAlert)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *UserAlertCache) AddDeletedCb(fn func(ctx context.Context, old *UserAlert)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *UserAlertCache) AddNotifyCb(fn func(ctx context.Context, obj *UserAlertKey, old *UserAlert, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *UserAlertCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *UserAlertKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *UserAlertCache) AddDeletedKeyCb(fn func(ctx context.Context, key *UserAlertKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *UserAlertCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *UserAlertCache) WatchKey(key *UserAlertKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*UserAlertKeyWatcher, 0)
	}
	watcher := UserAlertKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching UserAlert", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *UserAlertCache) TriggerKeyWatchers(ctx context.Context, key *UserAlertKey) {
	watchers := make([]*UserAlertKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *UserAlertCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := UserAlert{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse UserAlert data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *UserAlertCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := UserAlert{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	UserAlertKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *UserAlertCache) SyncListStart(ctx context.Context) {
	c.List = make(map[UserAlertKey]struct{})
}

func (c *UserAlertCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[UserAlertKey]*UserAlertCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *UserAlertCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *UserAlert) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *UserAlert) GetKey() *UserAlertKey {
	return &m.Key
}

func (m *UserAlert) GetKeyVal() UserAlertKey {
	return m.Key
}

func (m *UserAlert) SetKey(key *UserAlertKey) {
	m.Key = *key
}

func CmpSortUserAlert(a UserAlert, b UserAlert) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *UserAlert) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *UserAlert) IsValidArgsForCreateUserAlert() error {
	return nil
}

func (m *UserAlert) IsValidArgsForDeleteUserAlert() error {
	return nil
}

func (m *UserAlert) IsValidArgsForUpdateUserAlert() error {
	return nil
}

func (m *UserAlertKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovUseralert(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUseralert(uint64(l))
	}
	return n
}

func (m *UserAlert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovUseralert(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovUseralert(uint64(l))
	if m.CpuUtilizationLimit != 0 {
		n += 1 + sovUseralert(uint64(m.CpuUtilizationLimit))
	}
	if m.MemUtilizationLimit != 0 {
		n += 1 + sovUseralert(uint64(m.MemUtilizationLimit))
	}
	if m.DiskUtilizationLimit != 0 {
		n += 1 + sovUseralert(uint64(m.DiskUtilizationLimit))
	}
	if m.ActiveConnLimit != 0 {
		n += 1 + sovUseralert(uint64(m.ActiveConnLimit))
	}
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovUseralert(uint64(l))
	}
	if m.TriggerTime != 0 {
		n += 1 + sovUseralert(uint64(m.TriggerTime))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUseralert(uint64(len(k))) + 1 + len(v) + sovUseralert(uint64(len(v)))
			n += mapEntrySize + 1 + sovUseralert(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUseralert(uint64(len(k))) + 1 + len(v) + sovUseralert(uint64(len(v)))
			n += mapEntrySize + 1 + sovUseralert(uint64(mapEntrySize))
		}
	}
	return n
}

func sovUseralert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUseralert(x uint64) (n int) {
	return sovUseralert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserAlertKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUseralert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAlertKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAlertKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUseralert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUseralert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUseralert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAlert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUseralert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAlert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAlert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUtilizationLimit", wireType)
			}
			m.CpuUtilizationLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuUtilizationLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemUtilizationLimit", wireType)
			}
			m.MemUtilizationLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemUtilizationLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUtilizationLimit", wireType)
			}
			m.DiskUtilizationLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskUtilizationLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveConnLimit", wireType)
			}
			m.ActiveConnLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveConnLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerTime", wireType)
			}
			m.TriggerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerTime |= Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUseralert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUseralert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUseralert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUseralert
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUseralert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthUseralert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthUseralert
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUseralert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUseralert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUseralert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUseralert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUseralert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUseralert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUseralert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUseralert
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUseralert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthUseralert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthUseralert
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUseralert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUseralert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUseralert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUseralert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUseralert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUseralert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUseralert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUseralert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUseralert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUseralert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUseralert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUseralert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUseralert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUseralert = fmt.Errorf("proto: unexpected end of group")
)
