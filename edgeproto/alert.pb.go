// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert.proto

/*
	Package edgeproto is a generated protocol buffer package.

	It is generated from these files:
		alert.proto
		alldata.proto
		app.proto
		appinst.proto
		appinstclient.proto
		autoprovpolicy.proto
		autoscalepolicy.proto
		cloudlet.proto
		cloudletpool.proto
		cluster.proto
		clusterinst.proto
		common.proto
		controller.proto
		debug.proto
		device.proto
		exec.proto
		flavor.proto
		metric.proto
		node.proto
		notice.proto
		operatorcode.proto
		org.proto
		privacypolicy.proto
		refs.proto
		restagtable.proto
		result.proto
		settings.proto
		version.proto
		vmpool.proto

	It has these top-level messages:
		Alert
		AllData
		AppKey
		ConfigFile
		App
		AppAutoProvPolicy
		AppInstKey
		AppInst
		AppInstRuntime
		AppInstInfo
		AppInstMetrics
		AppInstLookup
		AppInstClientKey
		AppInstClient
		AutoProvPolicy
		AutoProvCloudlet
		AutoProvCount
		AutoProvCounts
		AutoProvPolicyCloudlet
		AutoProvInfo
		PolicyKey
		AutoScalePolicy
		CloudletKey
		OperationTimeLimits
		PlatformConfig
		CloudletResMap
		InfraConfig
		Cloudlet
		FlavorMatch
		CloudletManifest
		PropertyInfo
		CloudletProps
		FlavorInfo
		OSAZone
		OSImage
		CloudletInfo
		CloudletMetrics
		CloudletPoolKey
		CloudletPool
		CloudletPoolMember
		ClusterKey
		ClusterInstKey
		ClusterInst
		ClusterInstInfo
		StatusInfo
		ControllerKey
		Controller
		DebugRequest
		DebugReply
		DebugData
		DeviceReport
		DeviceKey
		Device
		DeviceData
		CloudletMgmtNode
		RunCmd
		RunVMConsole
		ShowLog
		ExecRequest
		FlavorKey
		Flavor
		MetricTag
		MetricVal
		Metric
		NodeKey
		Node
		NodeData
		Notice
		OperatorCode
		Organization
		OrganizationData
		OutboundSecurityRule
		PrivacyPolicy
		CloudletRefs
		ClusterRefs
		AppInstRefs
		ResTagTableKey
		ResTagTable
		Result
		Settings
		VMNetInfo
		VM
		VMPoolKey
		VMPool
		VMPoolMember
		VMSpec
		VMPoolInfo
*/
package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"
import reflect "reflect"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Alert struct {
	// Labels uniquely define the alert
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations are extra information about the alert
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// State of the alert
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// When alert became active
	ActiveAt distributed_match_engine.Timestamp `protobuf:"bytes,4,opt,name=active_at,json=activeAt" json:"active_at"`
	// Any value associated with alert
	Value float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,6,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// Connected controller unique id
	Controller string `protobuf:"bytes,7,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (m *Alert) Reset()                    { *m = Alert{} }
func (m *Alert) String() string            { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()               {}
func (*Alert) Descriptor() ([]byte, []int) { return fileDescriptorAlert, []int{0} }

func init() {
	proto.RegisterType((*Alert)(nil), "edgeproto.Alert")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AlertApi service

type AlertApiClient interface {
	// Show alerts
	ShowAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (AlertApi_ShowAlertClient, error)
}

type alertApiClient struct {
	cc *grpc.ClientConn
}

func NewAlertApiClient(cc *grpc.ClientConn) AlertApiClient {
	return &alertApiClient{cc}
}

func (c *alertApiClient) ShowAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (AlertApi_ShowAlertClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AlertApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AlertApi/ShowAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertApiShowAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertApi_ShowAlertClient interface {
	Recv() (*Alert, error)
	grpc.ClientStream
}

type alertApiShowAlertClient struct {
	grpc.ClientStream
}

func (x *alertApiShowAlertClient) Recv() (*Alert, error) {
	m := new(Alert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AlertApi service

type AlertApiServer interface {
	// Show alerts
	ShowAlert(*Alert, AlertApi_ShowAlertServer) error
}

func RegisterAlertApiServer(s *grpc.Server, srv AlertApiServer) {
	s.RegisterService(&_AlertApi_serviceDesc, srv)
}

func _AlertApi_ShowAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Alert)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertApiServer).ShowAlert(m, &alertApiShowAlertServer{stream})
}

type AlertApi_ShowAlertServer interface {
	Send(*Alert) error
	grpc.ServerStream
}

type alertApiShowAlertServer struct {
	grpc.ServerStream
}

func (x *alertApiShowAlertServer) Send(m *Alert) error {
	return x.ServerStream.SendMsg(m)
}

var _AlertApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AlertApi",
	HandlerType: (*AlertApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAlert",
			Handler:       _AlertApi_ShowAlert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alert.proto",
}

func (m *Alert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Alert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0xa
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			i = encodeVarintAlert(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAlert(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAlert(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x12
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			i = encodeVarintAlert(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAlert(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAlert(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAlert(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintAlert(dAtA, i, uint64(m.ActiveAt.Size()))
	n1, err := m.ActiveAt.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Value != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	if m.NotifyId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAlert(dAtA, i, uint64(m.NotifyId))
	}
	if len(m.Controller) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Controller)))
		i += copy(dAtA[i:], m.Controller)
	}
	return i, nil
}

func encodeVarintAlert(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Alert) Matches(o *Alert, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Labels != nil {
		if m.Labels == nil && o.Labels != nil || m.Labels != nil && o.Labels == nil {
			return false
		} else if m.Labels != nil && o.Labels != nil {
			if len(m.Labels) != len(o.Labels) {
				return false
			}
			for k, _ := range m.Labels {
				_, ok := o.Labels[k]
				if !ok {
					return false
				}
				if o.Labels[k] != m.Labels[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Annotations != nil {
		if m.Annotations == nil && o.Annotations != nil || m.Annotations != nil && o.Annotations == nil {
			return false
		} else if m.Annotations != nil && o.Annotations != nil {
			if len(m.Annotations) != len(o.Annotations) {
				return false
			}
			for k, _ := range m.Annotations {
				_, ok := o.Annotations[k]
				if !ok {
					return false
				}
				if o.Annotations[k] != m.Annotations[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.State != "" {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.Value != 0 {
		if o.Value != m.Value {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NotifyId != 0 {
			if o.NotifyId != m.NotifyId {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Controller != "" {
			if o.Controller != m.Controller {
				return false
			}
		}
	}
	return true
}

func (m *Alert) CopyInFields(src *Alert) int {
	changed := 0
	if src.Labels != nil {
		m.Labels = make(map[string]string)
		for k0, _ := range src.Labels {
			m.Labels[k0] = src.Labels[k0]
		}
	} else if m.Labels != nil {
		m.Labels = nil
		changed++
	}
	if src.Annotations != nil {
		m.Annotations = make(map[string]string)
		for k0, _ := range src.Annotations {
			m.Annotations[k0] = src.Annotations[k0]
		}
	} else if m.Annotations != nil {
		m.Annotations = nil
		changed++
	}
	if m.State != src.State {
		m.State = src.State
		changed++
	}
	if m.ActiveAt.Seconds != src.ActiveAt.Seconds {
		m.ActiveAt.Seconds = src.ActiveAt.Seconds
		changed++
	}
	if m.ActiveAt.Nanos != src.ActiveAt.Nanos {
		m.ActiveAt.Nanos = src.ActiveAt.Nanos
		changed++
	}
	if m.Value != src.Value {
		m.Value = src.Value
		changed++
	}
	if m.NotifyId != src.NotifyId {
		m.NotifyId = src.NotifyId
		changed++
	}
	if m.Controller != src.Controller {
		m.Controller = src.Controller
		changed++
	}
	return changed
}

func (m *Alert) DeepCopyIn(src *Alert) {
	if src.Labels != nil {
		m.Labels = make(map[string]string)
		for k, v := range src.Labels {
			m.Labels[k] = v
		}
	} else {
		m.Labels = nil
	}
	if src.Annotations != nil {
		m.Annotations = make(map[string]string)
		for k, v := range src.Annotations {
			m.Annotations[k] = v
		}
	} else {
		m.Annotations = nil
	}
	m.State = src.State
	m.ActiveAt = src.ActiveAt
	m.Value = src.Value
	m.NotifyId = src.NotifyId
	m.Controller = src.Controller
}

func (s *Alert) HasFields() bool {
	return false
}

type AlertStore struct {
	kvstore objstore.KVStore
}

func NewAlertStore(kvstore objstore.KVStore) AlertStore {
	return AlertStore{kvstore: kvstore}
}

func (s *AlertStore) Create(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStore) Update(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStore) Put(ctx context.Context, m *Alert, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStore) Delete(ctx context.Context, m *Alert, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Alert", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AlertStore) LoadOne(key string) (*Alert, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Alert
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Alert data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AlertStore) STMGet(stm concurrency.STM, key *AlertKey, buf *Alert) bool {
	keystr := objstore.DbKeyString("Alert", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AlertStore) STMPut(stm concurrency.STM, obj *Alert, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Alert", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Alert json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AlertStore) STMDel(stm concurrency.STM, key *AlertKey) {
	keystr := objstore.DbKeyString("Alert", key)
	stm.Del(keystr)
}

type AlertKeyWatcher struct {
	cb func(ctx context.Context)
}

type AlertCacheData struct {
	Obj    *Alert
	ModRev int64
}

// AlertCache caches Alert objects in memory in a hash table
// and keeps them in sync with the database.
type AlertCache struct {
	Objs          map[AlertKey]*AlertCacheData
	Mux           util.Mutex
	List          map[AlertKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *AlertKey, old *Alert, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *Alert, new *Alert)
	DeletedCbs    []func(ctx context.Context, old *Alert)
	KeyWatchers   map[AlertKey][]*AlertKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *AlertKey)
	DeletedKeyCbs []func(ctx context.Context, key *AlertKey)
}

func NewAlertCache() *AlertCache {
	cache := AlertCache{}
	InitAlertCache(&cache)
	return &cache
}

func InitAlertCache(cache *AlertCache) {
	cache.Objs = make(map[AlertKey]*AlertCacheData)
	cache.KeyWatchers = make(map[AlertKey][]*AlertKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *AlertCache) GetTypeString() string {
	return "Alert"
}

func (c *AlertCache) Get(key *AlertKey, valbuf *Alert) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AlertCache) GetWithRev(key *AlertKey, valbuf *Alert, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *AlertCache) HasKey(key *AlertKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AlertCache) GetAllKeys(ctx context.Context, cb func(key *AlertKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AlertCache) Update(ctx context.Context, in *Alert, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Alert) (*Alert, bool) {
		return in, true
	})
}

func (c *AlertCache) UpdateModFunc(ctx context.Context, key *AlertKey, modRev int64, modFunc func(old *Alert) (new *Alert, changed bool)) {
	c.Mux.Lock()
	var old *Alert
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &Alert{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &Alert{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &AlertCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AlertCache) Delete(ctx context.Context, in *Alert, modRev int64) {
	c.Mux.Lock()
	var old *Alert
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AlertCache) Prune(ctx context.Context, validKeys map[AlertKey]struct{}) {
	notify := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AlertCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AlertCache) Flush(ctx context.Context, notifyId int64) {
	log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Alert", "notifyId", notifyId, "FlushAll", c.FlushAll)
	flushed := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if !c.FlushAll && val.Obj.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		log.SpanLog(ctx, log.DebugLevelApi, "CacheFlush Alert delete", "key", key)
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			for _, cb := range c.NotifyCbs {
				if cb != nil {
					cb(ctx, &key, old.Obj, old.ModRev)
				}
			}
			for _, cb := range c.DeletedKeyCbs {
				cb(ctx, &key)
			}
			if old.Obj != nil {
				for _, cb := range c.DeletedCbs {
					cb(ctx, old.Obj)
				}
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *AlertCache) Show(filter *Alert, cb func(ret *Alert) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Alert", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare Alert", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Alert", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AlertGenericNotifyCb(fn func(key *AlertKey, old *Alert)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*AlertKey), obj.(*Alert))
	}
}

func (c *AlertCache) SetNotifyCb(fn func(ctx context.Context, obj *AlertKey, old *Alert, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *AlertKey, old *Alert, modRev int64){fn}
}

func (c *AlertCache) SetUpdatedCb(fn func(ctx context.Context, old *Alert, new *Alert)) {
	c.UpdatedCbs = []func(ctx context.Context, old *Alert, new *Alert){fn}
}

func (c *AlertCache) SetDeletedCb(fn func(ctx context.Context, old *Alert)) {
	c.DeletedCbs = []func(ctx context.Context, old *Alert){fn}
}

func (c *AlertCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *AlertKey){fn}
}

func (c *AlertCache) SetDeletedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *AlertKey){fn}
}

func (c *AlertCache) AddUpdatedCb(fn func(ctx context.Context, old *Alert, new *Alert)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *AlertCache) AddDeletedCb(fn func(ctx context.Context, old *Alert)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *AlertCache) AddNotifyCb(fn func(ctx context.Context, obj *AlertKey, old *Alert, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *AlertCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *AlertCache) AddDeletedKeyCb(fn func(ctx context.Context, key *AlertKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *AlertCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AlertCache) WatchKey(key *AlertKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AlertKeyWatcher, 0)
	}
	watcher := AlertKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Alert", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AlertCache) TriggerKeyWatchers(ctx context.Context, key *AlertKey) {
	watchers := make([]*AlertKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AlertCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Alert{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Alert data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AlertCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Alert{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	AlertKeyStringParse(keystr, &obj)
	c.Delete(ctx, &obj, modRev)
}

func (c *AlertCache) SyncListStart(ctx context.Context) {
	c.List = make(map[AlertKey]struct{})
}

func (c *AlertCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[AlertKey]*AlertCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AlertCache) UsesOrg(org string) bool {
	return false
}

// Helper method to check that enums have valid values
func (m *Alert) ValidateEnums() error {
	return nil
}

func IgnoreAlertFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Controller")
	}
	return cmpopts.IgnoreFields(Alert{}, names...)
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	if from.Kind() != reflect.String {
		return data, nil
	}
	switch to {
	case reflect.TypeOf(OptResNames(0)):
		if en, ok := OptResNames_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(Liveness(0)):
		if en, ok := Liveness_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(IpSupport(0)):
		if en, ok := IpSupport_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(IpAccess(0)):
		if en, ok := IpAccess_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(TrackedState(0)):
		if en, ok := TrackedState_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(CRMOverride(0)):
		if en, ok := CRMOverride_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(MaintenanceState(0)):
		if en, ok := MaintenanceState_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(PlatformType(0)):
		if en, ok := PlatformType_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(InfraApiAccess(0)):
		if en, ok := InfraApiAccess_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(CloudletState(0)):
		if en, ok := CloudletState_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(VMState(0)):
		if en, ok := VMState_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(VMAction(0)):
		if en, ok := VMAction_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(ImageType(0)):
		if en, ok := ImageType_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(DeleteType(0)):
		if en, ok := DeleteType_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(AccessType(0)):
		if en, ok := AccessType_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(HealthCheck(0)):
		if en, ok := HealthCheck_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(PowerState(0)):
		if en, ok := PowerState_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(NoticeAction(0)):
		if en, ok := NoticeAction_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	case reflect.TypeOf(VersionHash(0)):
		if en, ok := VersionHash_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	}
	return data, nil
}

var ShowMethodNames = map[string]struct{}{
	"ShowAlert":           struct{}{},
	"ShowSettings":        struct{}{},
	"ShowFlavor":          struct{}{},
	"ShowOperatorCode":    struct{}{},
	"ShowResTagTable":     struct{}{},
	"ShowCloudlet":        struct{}{},
	"ShowCloudletInfo":    struct{}{},
	"ShowCloudletMetrics": struct{}{},
	"ShowCloudletPool":    struct{}{},
	"ShowVMPool":          struct{}{},
	"ShowAutoScalePolicy": struct{}{},
	"ShowApp":             struct{}{},
	"ShowClusterInst":     struct{}{},
	"ShowClusterInstInfo": struct{}{},
	"ShowAutoProvPolicy":  struct{}{},
	"ShowPrivacyPolicy":   struct{}{},
	"ShowAppInst":         struct{}{},
	"ShowAppInstInfo":     struct{}{},
	"ShowAppInstMetrics":  struct{}{},
	"ShowCloudletRefs":    struct{}{},
	"ShowClusterRefs":     struct{}{},
	"ShowAppInstRefs":     struct{}{},
	"ShowController":      struct{}{},
	"ShowNode":            struct{}{},
	"ShowDevice":          struct{}{},
	"ShowDeviceReport":    struct{}{},
}

func IsShow(cmd string) bool {
	_, found := ShowMethodNames[cmd]
	return found
}

func (m *Alert) Size() (n int) {
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlert(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlert(uint64(mapEntrySize))
		}
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = m.ActiveAt.Size()
	n += 1 + l + sovAlert(uint64(l))
	if m.Value != 0 {
		n += 9
	}
	if m.NotifyId != 0 {
		n += 1 + sovAlert(uint64(m.NotifyId))
	}
	l = len(m.Controller)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	return n
}

func sovAlert(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAlert(x uint64) (n int) {
	return sovAlert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Alert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAlert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAlert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAlert
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlert(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlert = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlert   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("alert.proto", fileDescriptorAlert) }

var fileDescriptorAlert = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0x13, 0x4d,
	0x10, 0xc6, 0xb7, 0xf2, 0xef, 0x4d, 0x7a, 0x78, 0x21, 0x0c, 0x7b, 0xe8, 0x0d, 0x4b, 0x8c, 0xf1,
	0x12, 0x96, 0x64, 0x46, 0xa2, 0xe0, 0x9a, 0x83, 0x90, 0x2c, 0x0a, 0xa2, 0xa7, 0x51, 0xbc, 0x86,
	0xc9, 0x4c, 0x39, 0x69, 0x9d, 0xe9, 0x0e, 0x33, 0x9d, 0xc4, 0xdc, 0xc4, 0x4f, 0x20, 0xfa, 0x05,
	0x3c, 0x7a, 0xde, 0x4f, 0x91, 0xe3, 0x82, 0x77, 0x59, 0x83, 0x07, 0xf1, 0x24, 0xee, 0xac, 0x07,
	0x4f, 0x32, 0xdd, 0x61, 0x37, 0x64, 0x0f, 0xe2, 0x25, 0x54, 0x3d, 0xfd, 0xfc, 0x8a, 0x7a, 0xba,
	0x33, 0xc4, 0x70, 0x43, 0x8c, 0xa5, 0x35, 0x89, 0x85, 0x14, 0x66, 0x05, 0xfd, 0x00, 0x55, 0x59,
	0xdb, 0x0f, 0x84, 0x08, 0x42, 0xb4, 0xdd, 0x09, 0xb3, 0x5d, 0xce, 0x85, 0x74, 0x25, 0x13, 0x3c,
	0xd1, 0xc6, 0xda, 0x61, 0xc0, 0xe4, 0x78, 0x3a, 0xb2, 0x3c, 0x11, 0xd9, 0x91, 0x18, 0xb1, 0x30,
	0x03, 0x5f, 0xd9, 0xd9, 0x6f, 0xc7, 0x0b, 0xc5, 0xd4, 0xb7, 0x95, 0x2f, 0x40, 0x7e, 0x51, 0xac,
	0xc9, 0xa3, 0xbf, 0x92, 0x7e, 0x27, 0x72, 0xa5, 0x37, 0xee, 0x20, 0x0f, 0x18, 0x47, 0xdb, 0x8f,
	0xb0, 0xa3, 0x50, 0x3b, 0x14, 0xde, 0x7a, 0xc8, 0x6e, 0x20, 0x02, 0xa1, 0xc5, 0xac, 0xd2, 0x6a,
	0xf3, 0x77, 0x9e, 0x14, 0xfb, 0x59, 0x1a, 0xf3, 0x36, 0x29, 0x85, 0xee, 0x08, 0xc3, 0x84, 0x42,
	0x23, 0xdf, 0x32, 0xba, 0xfb, 0xd6, 0x45, 0x30, 0x4b, 0x39, 0xac, 0xc7, 0xea, 0xf8, 0x3e, 0x97,
	0xf1, 0xc2, 0x59, 0x7b, 0xcd, 0x23, 0x62, 0x6c, 0x24, 0xa5, 0x39, 0x85, 0x5e, 0xbf, 0x82, 0xf6,
	0x2f, 0x3d, 0x9a, 0xdf, 0xa4, 0xcc, 0x5d, 0x52, 0x4c, 0xa4, 0x2b, 0x91, 0xe6, 0x1b, 0xd0, 0xaa,
	0x38, 0xba, 0x31, 0x1f, 0x90, 0x8a, 0xeb, 0x49, 0x36, 0xc3, 0xa1, 0x2b, 0x69, 0xa1, 0x01, 0x2d,
	0xa3, 0x7b, 0xc3, 0xf2, 0x59, 0x22, 0x63, 0x36, 0x9a, 0x4a, 0xf4, 0x87, 0x2a, 0xf2, 0x50, 0x47,
	0xb6, 0x9e, 0xb2, 0x08, 0x13, 0xe9, 0x46, 0x93, 0x41, 0x61, 0xf9, 0xf9, 0xda, 0x8e, 0x53, 0xd6,
	0x6c, 0x5f, 0x66, 0xd3, 0x67, 0x6e, 0x38, 0x45, 0x5a, 0x6c, 0x40, 0x0b, 0x1c, 0xdd, 0x98, 0x07,
	0xa4, 0xc2, 0x85, 0x64, 0xcf, 0x17, 0x43, 0xe6, 0xd3, 0x52, 0x03, 0x5a, 0xf9, 0xc1, 0xff, 0x1f,
	0x53, 0x0a, 0xef, 0x8e, 0xf7, 0x8a, 0x5c, 0x78, 0xd1, 0xc4, 0x29, 0xeb, 0xf3, 0x87, 0xbe, 0xd9,
	0x21, 0xc4, 0x13, 0x5c, 0xc6, 0x22, 0x0c, 0x31, 0xa6, 0xff, 0x65, 0x4b, 0x6e, 0x9b, 0x37, 0x0c,
	0xb5, 0xbb, 0xc4, 0xd8, 0xb8, 0x2a, 0xb3, 0x4a, 0xf2, 0x2f, 0x71, 0x41, 0x41, 0x65, 0xcb, 0xca,
	0xcb, 0x8d, 0x72, 0x3a, 0xaf, 0x6a, 0x7a, 0xb9, 0x43, 0xa8, 0xdd, 0x23, 0xd5, 0xed, 0xab, 0xfa,
	0x17, 0xbe, 0xd7, 0xfe, 0x76, 0x46, 0xe1, 0xc7, 0x19, 0x85, 0xd7, 0x29, 0x85, 0xb7, 0x29, 0x85,
	0x0f, 0x29, 0x85, 0xd3, 0x94, 0xc2, 0xcf, 0x73, 0x5a, 0x56, 0x4f, 0xf1, 0x08, 0x17, 0xc7, 0xbf,
	0x68, 0x81, 0x0b, 0x8e, 0xdd, 0x19, 0xd1, 0x5a, 0x7f, 0xc2, 0xcc, 0x17, 0xa4, 0xf2, 0x64, 0x2c,
	0xe6, 0xfa, 0xbf, 0x50, 0xdd, 0x7e, 0xc0, 0xda, 0x15, 0xa5, 0x79, 0xe7, 0x7b, 0x4a, 0xf7, 0x1c,
	0x4c, 0xc4, 0x34, 0xf6, 0x50, 0x49, 0xed, 0xbe, 0x97, 0xad, 0xfd, 0x8c, 0xe1, 0xbc, 0x7d, 0x72,
	0x4e, 0xe1, 0xcd, 0xa7, 0xaf, 0xef, 0x73, 0xd5, 0xa6, 0x61, 0x27, 0x63, 0x31, 0xb7, 0xd5, 0x37,
	0xd3, 0x83, 0x83, 0x9b, 0x30, 0xa8, 0x2e, 0xbf, 0xd4, 0x77, 0x96, 0xab, 0x3a, 0x9c, 0xac, 0xea,
	0x70, 0xba, 0xaa, 0xc3, 0xa8, 0xa4, 0x26, 0xdf, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x54,
	0xad, 0x27, 0x5a, 0x03, 0x00, 0x00,
}
