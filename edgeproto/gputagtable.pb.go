// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gputagtable.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GpuTagTableKey struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GpuTagTableKey) Reset()                    { *m = GpuTagTableKey{} }
func (m *GpuTagTableKey) String() string            { return proto.CompactTextString(m) }
func (*GpuTagTableKey) ProtoMessage()               {}
func (*GpuTagTableKey) Descriptor() ([]byte, []int) { return fileDescriptorGputagtable, []int{0} }

type GpuTagTable struct {
	Fields []string       `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Key    GpuTagTableKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// one or more string tags
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *GpuTagTable) Reset()                    { *m = GpuTagTable{} }
func (m *GpuTagTable) String() string            { return proto.CompactTextString(m) }
func (*GpuTagTable) ProtoMessage()               {}
func (*GpuTagTable) Descriptor() ([]byte, []int) { return fileDescriptorGputagtable, []int{1} }

func init() {
	proto.RegisterType((*GpuTagTableKey)(nil), "edgeproto.GpuTagTableKey")
	proto.RegisterType((*GpuTagTable)(nil), "edgeproto.GpuTagTable")
}
func (this *GpuTagTableKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&edgeproto.GpuTagTableKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GpuTagTable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.GpuTagTable{")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	s = append(s, "Key: "+strings.Replace(this.Key.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGputagtable(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GpuTagTableApi service

type GpuTagTableApiClient interface {
	// Create TagTable
	CreateGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error)
	// Delete TagTable
	DeleteGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error)
	UpdateGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error)
	// show TagTable
	ShowGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (GpuTagTableApi_ShowGpuTagTableClient, error)
	// add new tag to TagTable
	AddGpuTag(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error)
	// remove existing tag from TagTable
	RemoveGpuTag(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error)
	// fetch TagTable
	GetGpuTagTable(ctx context.Context, in *GpuTagTableKey, opts ...grpc.CallOption) (*GpuTagTable, error)
}

type gpuTagTableApiClient struct {
	cc *grpc.ClientConn
}

func NewGpuTagTableApiClient(cc *grpc.ClientConn) GpuTagTableApiClient {
	return &gpuTagTableApiClient{cc}
}

func (c *gpuTagTableApiClient) CreateGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/CreateGpuTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuTagTableApiClient) DeleteGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/DeleteGpuTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuTagTableApiClient) UpdateGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/UpdateGpuTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuTagTableApiClient) ShowGpuTagTable(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (GpuTagTableApi_ShowGpuTagTableClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GpuTagTableApi_serviceDesc.Streams[0], c.cc, "/edgeproto.GpuTagTableApi/ShowGpuTagTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &gpuTagTableApiShowGpuTagTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GpuTagTableApi_ShowGpuTagTableClient interface {
	Recv() (*GpuTagTable, error)
	grpc.ClientStream
}

type gpuTagTableApiShowGpuTagTableClient struct {
	grpc.ClientStream
}

func (x *gpuTagTableApiShowGpuTagTableClient) Recv() (*GpuTagTable, error) {
	m := new(GpuTagTable)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gpuTagTableApiClient) AddGpuTag(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/AddGpuTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuTagTableApiClient) RemoveGpuTag(ctx context.Context, in *GpuTagTable, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/RemoveGpuTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuTagTableApiClient) GetGpuTagTable(ctx context.Context, in *GpuTagTableKey, opts ...grpc.CallOption) (*GpuTagTable, error) {
	out := new(GpuTagTable)
	err := grpc.Invoke(ctx, "/edgeproto.GpuTagTableApi/GetGpuTagTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GpuTagTableApi service

type GpuTagTableApiServer interface {
	// Create TagTable
	CreateGpuTagTable(context.Context, *GpuTagTable) (*Result, error)
	// Delete TagTable
	DeleteGpuTagTable(context.Context, *GpuTagTable) (*Result, error)
	UpdateGpuTagTable(context.Context, *GpuTagTable) (*Result, error)
	// show TagTable
	ShowGpuTagTable(*GpuTagTable, GpuTagTableApi_ShowGpuTagTableServer) error
	// add new tag to TagTable
	AddGpuTag(context.Context, *GpuTagTable) (*Result, error)
	// remove existing tag from TagTable
	RemoveGpuTag(context.Context, *GpuTagTable) (*Result, error)
	// fetch TagTable
	GetGpuTagTable(context.Context, *GpuTagTableKey) (*GpuTagTable, error)
}

func RegisterGpuTagTableApiServer(s *grpc.Server, srv GpuTagTableApiServer) {
	s.RegisterService(&_GpuTagTableApi_serviceDesc, srv)
}

func _GpuTagTableApi_CreateGpuTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).CreateGpuTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/CreateGpuTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).CreateGpuTagTable(ctx, req.(*GpuTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTagTableApi_DeleteGpuTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).DeleteGpuTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/DeleteGpuTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).DeleteGpuTagTable(ctx, req.(*GpuTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTagTableApi_UpdateGpuTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).UpdateGpuTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/UpdateGpuTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).UpdateGpuTagTable(ctx, req.(*GpuTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTagTableApi_ShowGpuTagTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GpuTagTable)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GpuTagTableApiServer).ShowGpuTagTable(m, &gpuTagTableApiShowGpuTagTableServer{stream})
}

type GpuTagTableApi_ShowGpuTagTableServer interface {
	Send(*GpuTagTable) error
	grpc.ServerStream
}

type gpuTagTableApiShowGpuTagTableServer struct {
	grpc.ServerStream
}

func (x *gpuTagTableApiShowGpuTagTableServer) Send(m *GpuTagTable) error {
	return x.ServerStream.SendMsg(m)
}

func _GpuTagTableApi_AddGpuTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).AddGpuTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/AddGpuTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).AddGpuTag(ctx, req.(*GpuTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTagTableApi_RemoveGpuTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).RemoveGpuTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/RemoveGpuTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).RemoveGpuTag(ctx, req.(*GpuTagTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuTagTableApi_GetGpuTagTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpuTagTableKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuTagTableApiServer).GetGpuTagTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.GpuTagTableApi/GetGpuTagTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuTagTableApiServer).GetGpuTagTable(ctx, req.(*GpuTagTableKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _GpuTagTableApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.GpuTagTableApi",
	HandlerType: (*GpuTagTableApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGpuTagTable",
			Handler:    _GpuTagTableApi_CreateGpuTagTable_Handler,
		},
		{
			MethodName: "DeleteGpuTagTable",
			Handler:    _GpuTagTableApi_DeleteGpuTagTable_Handler,
		},
		{
			MethodName: "UpdateGpuTagTable",
			Handler:    _GpuTagTableApi_UpdateGpuTagTable_Handler,
		},
		{
			MethodName: "AddGpuTag",
			Handler:    _GpuTagTableApi_AddGpuTag_Handler,
		},
		{
			MethodName: "RemoveGpuTag",
			Handler:    _GpuTagTableApi_RemoveGpuTag_Handler,
		},
		{
			MethodName: "GetGpuTagTable",
			Handler:    _GpuTagTableApi_GetGpuTagTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowGpuTagTable",
			Handler:       _GpuTagTableApi_ShowGpuTagTable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gputagtable.proto",
}

func (m *GpuTagTableKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GpuTagTableKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGputagtable(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GpuTagTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GpuTagTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGputagtable(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintGputagtable(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GpuTagTableKey) Matches(o *GpuTagTableKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *GpuTagTableKey) CopyInFields(src *GpuTagTableKey) {
	m.Name = src.Name
}

func (m *GpuTagTableKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal GpuTagTableKey key string", "obj", m)
	}
	return string(key)
}

func GpuTagTableKeyStringParse(str string, key *GpuTagTableKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal GpuTagTableKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *GpuTagTableKey) ValidateEnums() error {
	return nil
}

func (m *GpuTagTable) Matches(o *GpuTagTable, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.Tags != nil {
		if m.Tags == nil && o.Tags != nil || m.Tags != nil && o.Tags == nil {
			return false
		} else if m.Tags != nil && o.Tags != nil {
			if len(m.Tags) != len(o.Tags) {
				return false
			}
			for i := 0; i < len(m.Tags); i++ {
				if o.Tags[i] != m.Tags[i] {
					return false
				}
			}
		}
	}
	return true
}

const GpuTagTableFieldKey = "2"
const GpuTagTableFieldKeyName = "2.1"
const GpuTagTableFieldTags = "3"

var GpuTagTableAllFields = []string{
	GpuTagTableFieldKeyName,
	GpuTagTableFieldTags,
}

var GpuTagTableAllFieldsMap = map[string]struct{}{
	GpuTagTableFieldKeyName: struct{}{},
	GpuTagTableFieldTags:    struct{}{},
}

var GpuTagTableAllFieldsStringMap = map[string]string{
	GpuTagTableFieldKeyName: "Gpu Tag Table Field Key Name",
	GpuTagTableFieldTags:    "Gpu Tag Table Field Tags",
}

func (m *GpuTagTable) IsKeyField(s string) bool {
	return strings.HasPrefix(s, GpuTagTableFieldKey+".")
}

func (m *GpuTagTable) DiffFields(o *GpuTagTable, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[GpuTagTableFieldKeyName] = struct{}{}
		fields[GpuTagTableFieldKey] = struct{}{}
	}
	if len(m.Tags) != len(o.Tags) {
		fields[GpuTagTableFieldTags] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Tags); i0++ {
			if m.Tags[i0] != o.Tags[i0] {
				fields[GpuTagTableFieldTags] = struct{}{}
				break
			}
		}
	}
}

func (m *GpuTagTable) CopyInFields(src *GpuTagTable) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			m.Key.Name = src.Key.Name
		}
	}
	if _, set := fmap["3"]; set {
		if m.Tags == nil || len(m.Tags) != len(src.Tags) {
			m.Tags = make([]string, len(src.Tags))
		}
		copy(m.Tags, src.Tags)
	}
}

func (s *GpuTagTable) HasFields() bool {
	return true
}

type GpuTagTableStore struct {
	kvstore objstore.KVStore
}

func NewGpuTagTableStore(kvstore objstore.KVStore) GpuTagTableStore {
	return GpuTagTableStore{kvstore: kvstore}
}

func (s *GpuTagTableStore) Create(ctx context.Context, m *GpuTagTable, wait func(int64)) (*Result, error) {
	err := m.Validate(GpuTagTableAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("GpuTagTable", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *GpuTagTableStore) Update(ctx context.Context, m *GpuTagTable, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("GpuTagTable", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur GpuTagTable
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *GpuTagTableStore) Put(ctx context.Context, m *GpuTagTable, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(GpuTagTableAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("GpuTagTable", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *GpuTagTableStore) Delete(ctx context.Context, m *GpuTagTable, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("GpuTagTable", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *GpuTagTableStore) LoadOne(key string) (*GpuTagTable, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj GpuTagTable
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse GpuTagTable data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *GpuTagTableStore) STMGet(stm concurrency.STM, key *GpuTagTableKey, buf *GpuTagTable) bool {
	keystr := objstore.DbKeyString("GpuTagTable", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *GpuTagTableStore) STMPut(stm concurrency.STM, obj *GpuTagTable, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("GpuTagTable", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("GpuTagTable json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *GpuTagTableStore) STMDel(stm concurrency.STM, key *GpuTagTableKey) {
	keystr := objstore.DbKeyString("GpuTagTable", key)
	stm.Del(keystr)
}

type GpuTagTableKeyWatcher struct {
	cb func(ctx context.Context)
}

// GpuTagTableCache caches GpuTagTable objects in memory in a hash table
// and keeps them in sync with the database.
type GpuTagTableCache struct {
	Objs        map[GpuTagTableKey]*GpuTagTable
	Mux         util.Mutex
	List        map[GpuTagTableKey]struct{}
	NotifyCb    func(ctx context.Context, obj *GpuTagTableKey, old *GpuTagTable)
	UpdatedCb   func(ctx context.Context, old *GpuTagTable, new *GpuTagTable)
	KeyWatchers map[GpuTagTableKey][]*GpuTagTableKeyWatcher
}

func NewGpuTagTableCache() *GpuTagTableCache {
	cache := GpuTagTableCache{}
	InitGpuTagTableCache(&cache)
	return &cache
}

func InitGpuTagTableCache(cache *GpuTagTableCache) {
	cache.Objs = make(map[GpuTagTableKey]*GpuTagTable)
	cache.KeyWatchers = make(map[GpuTagTableKey][]*GpuTagTableKeyWatcher)
}

func (c *GpuTagTableCache) GetTypeString() string {
	return "GpuTagTable"
}

func (c *GpuTagTableCache) Get(key *GpuTagTableKey, valbuf *GpuTagTable) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *GpuTagTableCache) HasKey(key *GpuTagTableKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *GpuTagTableCache) GetAllKeys(ctx context.Context, keys map[GpuTagTableKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *GpuTagTableCache) Update(ctx context.Context, in *GpuTagTable, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *GpuTagTable) (*GpuTagTable, bool) {
		return in, true
	})
}

func (c *GpuTagTableCache) UpdateModFunc(ctx context.Context, key *GpuTagTableKey, rev int64, modFunc func(old *GpuTagTable) (new *GpuTagTable, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &GpuTagTable{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate GpuTagTable", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *GpuTagTableCache) Delete(ctx context.Context, in *GpuTagTable, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete GpuTagTable", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *GpuTagTableCache) Prune(ctx context.Context, validKeys map[GpuTagTableKey]struct{}) {
	notify := make(map[GpuTagTableKey]*GpuTagTable)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *GpuTagTableCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *GpuTagTableCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *GpuTagTableCache) Show(filter *GpuTagTable, cb func(ret *GpuTagTable) error) error {
	log.DebugLog(log.DebugLevelApi, "Show GpuTagTable", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show GpuTagTable", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func GpuTagTableGenericNotifyCb(fn func(key *GpuTagTableKey, old *GpuTagTable)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*GpuTagTableKey), obj.(*GpuTagTable))
	}
}

func (c *GpuTagTableCache) SetNotifyCb(fn func(ctx context.Context, obj *GpuTagTableKey, old *GpuTagTable)) {
	c.NotifyCb = fn
}

func (c *GpuTagTableCache) SetUpdatedCb(fn func(ctx context.Context, old *GpuTagTable, new *GpuTagTable)) {
	c.UpdatedCb = fn
}

func (c *GpuTagTableCache) WatchKey(key *GpuTagTableKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*GpuTagTableKeyWatcher, 0)
	}
	watcher := GpuTagTableKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching GpuTagTable", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *GpuTagTableCache) TriggerKeyWatchers(ctx context.Context, key *GpuTagTableKey) {
	watchers := make([]*GpuTagTableKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *GpuTagTableCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := GpuTagTable{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse GpuTagTable data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *GpuTagTableCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := GpuTagTable{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	GpuTagTableKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *GpuTagTableCache) SyncListStart(ctx context.Context) {
	c.List = make(map[GpuTagTableKey]struct{})
}

func (c *GpuTagTableCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[GpuTagTableKey]*GpuTagTable)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *GpuTagTable) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *GpuTagTable) GetKey() *GpuTagTableKey {
	return &m.Key
}

func (m *GpuTagTable) GetKeyVal() GpuTagTableKey {
	return m.Key
}

func (m *GpuTagTable) SetKey(key *GpuTagTableKey) {
	m.Key = *key
}

func CmpSortGpuTagTable(a GpuTagTable, b GpuTagTable) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *GpuTagTable) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *GpuTagTableKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGputagtable(uint64(l))
	}
	return n
}

func (m *GpuTagTable) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovGputagtable(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovGputagtable(uint64(l))
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovGputagtable(uint64(l))
		}
	}
	return n
}

func sovGputagtable(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGputagtable(x uint64) (n int) {
	return sovGputagtable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GpuTagTableKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGputagtable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GpuTagTableKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GpuTagTableKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGputagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGputagtable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGputagtable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GpuTagTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGputagtable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GpuTagTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GpuTagTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGputagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGputagtable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGputagtable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGputagtable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGputagtable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGputagtable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGputagtable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGputagtable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGputagtable
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGputagtable
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGputagtable(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGputagtable = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGputagtable   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gputagtable.proto", fileDescriptorGputagtable) }

var fileDescriptorGputagtable = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xb1, 0x8b, 0x13, 0x4d,
	0x14, 0xc0, 0xf3, 0x2e, 0xe1, 0x3e, 0xb2, 0x97, 0xcb, 0x7d, 0x59, 0x8f, 0x63, 0x0c, 0x92, 0xc4,
	0xad, 0x82, 0x9c, 0x19, 0x2f, 0x36, 0x12, 0x38, 0x30, 0x51, 0xb8, 0xe2, 0xd0, 0x62, 0x3d, 0xed,
	0x27, 0xd9, 0xe7, 0x64, 0x71, 0x77, 0x67, 0xc9, 0xce, 0x1a, 0x23, 0x16, 0x7a, 0x60, 0x7f, 0x60,
	0x23, 0x36, 0xda, 0xda, 0xdd, 0x9f, 0x60, 0x99, 0x52, 0xb0, 0x17, 0x0d, 0x16, 0x72, 0x95, 0x90,
	0x0d, 0x58, 0xca, 0x4e, 0xc2, 0x91, 0x45, 0x03, 0x49, 0x73, 0xcd, 0xf2, 0x66, 0x78, 0x6f, 0x7e,
	0xbf, 0xf7, 0x1e, 0xab, 0x15, 0xb8, 0x1f, 0x4a, 0xc6, 0x25, 0x6b, 0x3b, 0x58, 0xf3, 0x7b, 0x42,
	0x0a, 0x3d, 0x8b, 0x16, 0x47, 0x15, 0x16, 0xaf, 0x70, 0x21, 0xb8, 0x83, 0x94, 0xf9, 0x36, 0x65,
	0x9e, 0x27, 0x24, 0x93, 0xb6, 0xf0, 0x82, 0x69, 0x62, 0xf1, 0x16, 0xb7, 0x65, 0x37, 0x6c, 0xd7,
	0x3a, 0xc2, 0xa5, 0xae, 0x68, 0xdb, 0x4e, 0x5c, 0xf8, 0x8c, 0xc6, 0xdf, 0xeb, 0x1d, 0x47, 0x84,
	0x16, 0x55, 0x79, 0x1c, 0xbd, 0xf3, 0x60, 0x56, 0x99, 0xeb, 0x61, 0x10, 0x3a, 0x72, 0x76, 0xda,
	0xe6, 0x82, 0x0b, 0x15, 0xd2, 0x38, 0x9a, 0xde, 0x1a, 0x75, 0x2d, 0x7f, 0xe0, 0x87, 0x47, 0x8c,
	0x1f, 0xc5, 0x6e, 0x87, 0x38, 0xd0, 0x75, 0x2d, 0xe3, 0x31, 0x17, 0x09, 0x54, 0xa0, 0x9a, 0x35,
	0x55, 0xdc, 0xc8, 0xfd, 0x1c, 0x13, 0xf8, 0x3d, 0x26, 0x70, 0xfa, 0xa1, 0x0c, 0xc6, 0x7b, 0xd0,
	0x36, 0xe6, 0x8a, 0xf4, 0x1d, 0x6d, 0xfd, 0xb1, 0x8d, 0x8e, 0x15, 0x10, 0xa8, 0xa4, 0xab, 0x59,
	0x73, 0x76, 0xd2, 0xf7, 0xb4, 0xf4, 0x13, 0x1c, 0x90, 0xb5, 0x0a, 0x54, 0x37, 0xea, 0x97, 0x6b,
	0xe7, 0x0d, 0xd7, 0x92, 0xc4, 0x56, 0x66, 0xf8, 0xb5, 0x9c, 0x32, 0xe3, 0xdc, 0x18, 0x2e, 0x19,
	0x0f, 0x48, 0x5a, 0x3d, 0xa4, 0xe2, 0xc6, 0x5e, 0x0c, 0xff, 0x35, 0x26, 0xf0, 0x32, 0x22, 0x70,
	0x12, 0x11, 0x78, 0x1b, 0x11, 0xf8, 0x14, 0x11, 0x78, 0x37, 0x21, 0x9b, 0xb1, 0xde, 0xfe, 0x21,
	0x0e, 0x6a, 0xf7, 0x99, 0x8b, 0xa7, 0x13, 0x92, 0x8a, 0x0d, 0xeb, 0x1f, 0xff, 0x4b, 0xb4, 0xd5,
	0xf4, 0x6d, 0xfd, 0x15, 0x68, 0x85, 0x3b, 0x3d, 0x64, 0x12, 0x13, 0xea, 0xff, 0xb6, 0x2a, 0x16,
	0xe6, 0xee, 0x4d, 0x35, 0x45, 0xa3, 0x79, 0x16, 0x91, 0xab, 0x26, 0x06, 0x22, 0xec, 0x75, 0xe6,
	0xdf, 0xd8, 0x6d, 0x76, 0xe2, 0x75, 0xdd, 0x63, 0x1e, 0xe3, 0xb8, 0x7b, 0xfc, 0xe5, 0xc7, 0x9b,
	0xb5, 0x1d, 0xa3, 0x40, 0x3b, 0x8a, 0x45, 0x67, 0x8b, 0x6f, 0x3b, 0x0d, 0xb8, 0xa6, 0x1c, 0xee,
	0xa2, 0x83, 0x17, 0xe5, 0x60, 0x29, 0xd6, 0xdf, 0x0e, 0x0f, 0x7d, 0xeb, 0xc2, 0xe6, 0x10, 0x2a,
	0x56, 0xd2, 0xe1, 0x18, 0xb4, 0xad, 0x07, 0x5d, 0xd1, 0x5f, 0xc6, 0x60, 0xc1, 0xbd, 0xb1, 0x7f,
	0x16, 0x91, 0xf2, 0x62, 0x8d, 0x47, 0x36, 0xf6, 0xa7, 0x12, 0xdb, 0xc6, 0x16, 0x0d, 0xba, 0xa2,
	0x9f, 0x50, 0xb8, 0x01, 0xfa, 0x73, 0x2d, 0xdb, 0xb4, 0xac, 0x69, 0xe5, 0x2a, 0xfd, 0xb7, 0x96,
	0xea, 0x7f, 0x38, 0x21, 0xa0, 0xf0, 0x97, 0x8c, 0x3c, 0x65, 0x96, 0x95, 0x1c, 0xc0, 0x0b, 0x2d,
	0x67, 0xa2, 0x2b, 0x9e, 0xe2, 0xea, 0xf8, 0xe6, 0x6a, 0x78, 0xdd, 0xd8, 0xa4, 0x3d, 0x37, 0x49,
	0x7f, 0x0d, 0x5a, 0xfe, 0x00, 0xe5, 0xfc, 0xf4, 0x17, 0xff, 0x9d, 0x0b, 0x17, 0x70, 0x7b, 0x89,
	0x05, 0x24, 0xa6, 0xc0, 0x51, 0x26, 0x3c, 0x8a, 0x99, 0x93, 0x09, 0x49, 0xb5, 0xfe, 0x1f, 0x7e,
	0x2f, 0xa5, 0x86, 0xa3, 0x12, 0x7c, 0x1e, 0x95, 0xe0, 0xdb, 0xa8, 0x04, 0xed, 0x75, 0x05, 0xbb,
	0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x17, 0xe5, 0xd6, 0x36, 0x05, 0x00, 0x00,
}
