// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package edgeproto

import (
	context "context"
	"encoding/json"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ControllerKey uniquely defines a Controller
type ControllerKey struct {
	// external API address
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ControllerKey) Reset()         { *m = ControllerKey{} }
func (m *ControllerKey) String() string { return proto.CompactTextString(m) }
func (*ControllerKey) ProtoMessage()    {}
func (*ControllerKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *ControllerKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControllerKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControllerKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControllerKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerKey.Merge(m, src)
}
func (m *ControllerKey) XXX_Size() int {
	return m.Size()
}
func (m *ControllerKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerKey.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerKey proto.InternalMessageInfo

// A Controller is a service that manages the edge-cloud data and controls other edge-cloud micro-services.
type Controller struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key ControllerKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Build Master Version
	BuildMaster string `protobuf:"bytes,4,opt,name=build_master,json=buildMaster,proto3" json:"build_master,omitempty"`
	// Build Head Version
	BuildHead string `protobuf:"bytes,5,opt,name=build_head,json=buildHead,proto3" json:"build_head,omitempty"`
	// Build Author
	BuildAuthor string `protobuf:"bytes,6,opt,name=build_author,json=buildAuthor,proto3" json:"build_author,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *Controller) Reset()         { *m = Controller{} }
func (m *Controller) String() string { return proto.CompactTextString(m) }
func (*Controller) ProtoMessage()    {}
func (*Controller) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}
func (m *Controller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Controller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Controller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Controller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Controller.Merge(m, src)
}
func (m *Controller) XXX_Size() int {
	return m.Size()
}
func (m *Controller) XXX_DiscardUnknown() {
	xxx_messageInfo_Controller.DiscardUnknown(m)
}

var xxx_messageInfo_Controller proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ControllerKey)(nil), "edgeproto.ControllerKey")
	proto.RegisterType((*Controller)(nil), "edgeproto.Controller")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x33, 0xdb, 0xed, 0xea, 0x4e, 0xff, 0x50, 0x86, 0x56, 0xc6, 0xb5, 0xa4, 0xcb, 0x1e,
	0x64, 0x15, 0xcd, 0x2c, 0xf5, 0x22, 0x7b, 0xeb, 0x8a, 0x20, 0x88, 0x97, 0x78, 0x16, 0x99, 0x64,
	0xc6, 0x24, 0x98, 0xcc, 0x1b, 0x92, 0x09, 0xb5, 0x37, 0xf1, 0x13, 0x88, 0x7e, 0x01, 0x8f, 0x7a,
	0x93, 0x1e, 0xfd, 0x04, 0x7b, 0x2c, 0x78, 0xf1, 0x24, 0xba, 0xeb, 0xc1, 0xa3, 0xb0, 0xa5, 0x78,
	0x94, 0xcc, 0x96, 0xa4, 0x42, 0x7a, 0x09, 0x4f, 0xde, 0xf7, 0xf7, 0x3e, 0x3c, 0x79, 0x82, 0xb7,
	0x7c, 0x50, 0x3a, 0x83, 0x38, 0x96, 0x99, 0x93, 0x66, 0xa0, 0x81, 0x74, 0xa5, 0x08, 0xa4, 0x91,
	0xbd, 0xdd, 0x00, 0x20, 0x88, 0x25, 0xe3, 0x69, 0xc4, 0xb8, 0x52, 0xa0, 0xb9, 0x8e, 0x40, 0xe5,
	0x4b, 0xb0, 0xb7, 0x1d, 0x40, 0x00, 0x46, 0xb2, 0x52, 0x9d, 0x4f, 0xef, 0x07, 0x91, 0x0e, 0x0b,
	0xcf, 0xf1, 0x21, 0x61, 0x09, 0x78, 0x51, 0x5c, 0xda, 0xbd, 0x62, 0xe5, 0xf3, 0xae, 0x1f, 0x43,
	0x21, 0x98, 0xe1, 0x02, 0xa9, 0x2a, 0xb1, 0xbc, 0x1c, 0x3c, 0xc4, 0x1b, 0x0f, 0xaa, 0x30, 0x8f,
	0xe5, 0x11, 0xb9, 0x89, 0xdb, 0x5c, 0x88, 0x8c, 0xa2, 0x3e, 0x1a, 0x76, 0x27, 0xe4, 0xcb, 0x19,
	0xdd, 0xac, 0xd3, 0x96, 0x1b, 0xd7, 0xec, 0xc7, 0xeb, 0xbf, 0x17, 0x14, 0xfd, 0x5d, 0x50, 0xf4,
	0xf9, 0xc3, 0x1e, 0x1a, 0x7c, 0x6a, 0x61, 0x5c, 0xfb, 0x90, 0x6b, 0xb8, 0xf3, 0x22, 0x92, 0xb1,
	0xc8, 0x29, 0xea, 0xaf, 0x0c, 0xbb, 0xee, 0xf9, 0x1b, 0x19, 0xe1, 0x95, 0x97, 0xf2, 0x88, 0xb6,
	0xfa, 0x68, 0xb8, 0xb6, 0x4f, 0x9d, 0xea, 0xa3, 0x9d, 0xff, 0x32, 0x4c, 0xda, 0xd3, 0xef, 0x7b,
	0x96, 0x5b, 0xa2, 0x64, 0x84, 0xd7, 0xbd, 0x22, 0x8a, 0xc5, 0xf3, 0x84, 0xe7, 0x5a, 0x66, 0xb4,
	0x6d, 0x62, 0x6d, 0x7c, 0x3c, 0xa5, 0xe8, 0xdd, 0xf1, 0xf5, 0x55, 0x05, 0x7e, 0x92, 0xba, 0x6b,
	0x06, 0x79, 0x62, 0x08, 0x72, 0x07, 0xe3, 0xe5, 0x45, 0x28, 0xb9, 0xa0, 0xab, 0x4d, 0x7c, 0xd7,
	0x00, 0x8f, 0x24, 0x17, 0xb5, 0x3f, 0x2f, 0x74, 0x08, 0x19, 0xed, 0x5c, 0xee, 0x7f, 0x60, 0x08,
	0x72, 0x0b, 0x5f, 0x0d, 0x21, 0xd7, 0x8a, 0x27, 0x92, 0x5e, 0x69, 0xa2, 0xab, 0xf5, 0x78, 0xbb,
	0xec, 0xe8, 0xcf, 0x82, 0xa2, 0xd7, 0xa7, 0x14, 0x1d, 0x9f, 0xd1, 0xb6, 0x02, 0x25, 0xf7, 0xd5,
	0xc5, 0xca, 0x0f, 0xd2, 0x88, 0x3c, 0xc3, 0x9b, 0x4f, 0x43, 0x38, 0xbc, 0xd0, 0xdf, 0x4e, 0x63,
	0x35, 0xbd, 0xe6, 0xf1, 0xe0, 0xc6, 0x9b, 0xaf, 0xbf, 0xde, 0xb7, 0x76, 0x06, 0x5b, 0x2c, 0x0f,
	0xe1, 0x90, 0xd5, 0xbf, 0x6b, 0x8c, 0x6e, 0x8f, 0xd0, 0x64, 0x77, 0xfa, 0xd3, 0xb6, 0xa6, 0x33,
	0x1b, 0x9d, 0xcc, 0x6c, 0xf4, 0x63, 0x66, 0xa3, 0xb7, 0x73, 0xdb, 0x3a, 0x99, 0xdb, 0xd6, 0xb7,
	0xb9, 0x6d, 0x79, 0x1d, 0x63, 0x77, 0xef, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x8d, 0x12,
	0xc2, 0x94, 0x02, 0x00, 0x00,
}

func (this *ControllerKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&edgeproto.ControllerKey{")
	s = append(s, "Addr: "+fmt.Sprintf("%#v", this.Addr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringController(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerApiClient is the client API for ControllerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerApiClient interface {
	// Show Controllers
	ShowController(ctx context.Context, in *Controller, opts ...grpc.CallOption) (ControllerApi_ShowControllerClient, error)
}

type controllerApiClient struct {
	cc *grpc.ClientConn
}

func NewControllerApiClient(cc *grpc.ClientConn) ControllerApiClient {
	return &controllerApiClient{cc}
}

func (c *controllerApiClient) ShowController(ctx context.Context, in *Controller, opts ...grpc.CallOption) (ControllerApi_ShowControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerApi_serviceDesc.Streams[0], "/edgeproto.ControllerApi/ShowController", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerApiShowControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerApi_ShowControllerClient interface {
	Recv() (*Controller, error)
	grpc.ClientStream
}

type controllerApiShowControllerClient struct {
	grpc.ClientStream
}

func (x *controllerApiShowControllerClient) Recv() (*Controller, error) {
	m := new(Controller)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerApiServer is the server API for ControllerApi service.
type ControllerApiServer interface {
	// Show Controllers
	ShowController(*Controller, ControllerApi_ShowControllerServer) error
}

// UnimplementedControllerApiServer can be embedded to have forward compatible implementations.
type UnimplementedControllerApiServer struct {
}

func (*UnimplementedControllerApiServer) ShowController(req *Controller, srv ControllerApi_ShowControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowController not implemented")
}

func RegisterControllerApiServer(s *grpc.Server, srv ControllerApiServer) {
	s.RegisterService(&_ControllerApi_serviceDesc, srv)
}

func _ControllerApi_ShowController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Controller)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerApiServer).ShowController(m, &controllerApiShowControllerServer{stream})
}

type ControllerApi_ShowControllerServer interface {
	Send(*Controller) error
	grpc.ServerStream
}

type controllerApiShowControllerServer struct {
	grpc.ServerStream
}

func (x *controllerApiShowControllerServer) Send(m *Controller) error {
	return x.ServerStream.SendMsg(m)
}

var _ControllerApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ControllerApi",
	HandlerType: (*ControllerApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowController",
			Handler:       _ControllerApi_ShowController_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

func (m *ControllerKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControllerKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControllerKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintController(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Controller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Controller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Controller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintController(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BuildAuthor) > 0 {
		i -= len(m.BuildAuthor)
		copy(dAtA[i:], m.BuildAuthor)
		i = encodeVarintController(dAtA, i, uint64(len(m.BuildAuthor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BuildHead) > 0 {
		i -= len(m.BuildHead)
		copy(dAtA[i:], m.BuildHead)
		i = encodeVarintController(dAtA, i, uint64(len(m.BuildHead)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuildMaster) > 0 {
		i -= len(m.BuildMaster)
		copy(dAtA[i:], m.BuildMaster)
		i = encodeVarintController(dAtA, i, uint64(len(m.BuildMaster)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintController(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintController(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ControllerKey) Matches(o *ControllerKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Addr != "" {
		if o.Addr != m.Addr {
			return false
		}
	}
	return true
}

func (m *ControllerKey) CopyInFields(src *ControllerKey) int {
	changed := 0
	if m.Addr != src.Addr {
		m.Addr = src.Addr
		changed++
	}
	return changed
}

func (m *ControllerKey) DeepCopyIn(src *ControllerKey) {
	m.Addr = src.Addr
}

func (m *ControllerKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ControllerKey key string", "obj", m)
	}
	return string(key)
}

func ControllerKeyStringParse(str string, key *ControllerKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ControllerKey key string", "str", str)
	}
}

func (m *ControllerKey) NotFoundError() error {
	return fmt.Errorf("Controller key %s not found", m.GetKeyString())
}

func (m *ControllerKey) ExistsError() error {
	return fmt.Errorf("Controller key %s already exists", m.GetKeyString())
}

func (m *ControllerKey) BeingDeletedError() error {
	return fmt.Errorf("Controller %s is being deleted", m.GetKeyString())
}

var ControllerKeyTagAddr = "controlleraddr"

func (m *ControllerKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["controlleraddr"] = m.Addr
	return tags
}

// Helper method to check that enums have valid values
func (m *ControllerKey) ValidateEnums() error {
	return nil
}

func (m *Controller) Matches(o *Controller, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildMaster != "" {
			if o.BuildMaster != m.BuildMaster {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildHead != "" {
			if o.BuildHead != m.BuildHead {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.BuildAuthor != "" {
			if o.BuildAuthor != m.BuildAuthor {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Hostname != "" {
			if o.Hostname != m.Hostname {
				return false
			}
		}
	}
	return true
}

const ControllerFieldKey = "2"
const ControllerFieldKeyAddr = "2.1"
const ControllerFieldBuildMaster = "4"
const ControllerFieldBuildHead = "5"
const ControllerFieldBuildAuthor = "6"
const ControllerFieldHostname = "7"

var ControllerAllFields = []string{
	ControllerFieldKeyAddr,
	ControllerFieldBuildMaster,
	ControllerFieldBuildHead,
	ControllerFieldBuildAuthor,
	ControllerFieldHostname,
}

var ControllerAllFieldsMap = map[string]struct{}{
	ControllerFieldKeyAddr:     struct{}{},
	ControllerFieldBuildMaster: struct{}{},
	ControllerFieldBuildHead:   struct{}{},
	ControllerFieldBuildAuthor: struct{}{},
	ControllerFieldHostname:    struct{}{},
}

var ControllerAllFieldsStringMap = map[string]string{
	ControllerFieldKeyAddr:     "Key Addr",
	ControllerFieldBuildMaster: "Build Master",
	ControllerFieldBuildHead:   "Build Head",
	ControllerFieldBuildAuthor: "Build Author",
	ControllerFieldHostname:    "Hostname",
}

func (m *Controller) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ControllerFieldKey+".") || s == ControllerFieldKey
}

func (m *Controller) DiffFields(o *Controller, fields map[string]struct{}) {
	if m.Key.Addr != o.Key.Addr {
		fields[ControllerFieldKeyAddr] = struct{}{}
		fields[ControllerFieldKey] = struct{}{}
	}
	if m.BuildMaster != o.BuildMaster {
		fields[ControllerFieldBuildMaster] = struct{}{}
	}
	if m.BuildHead != o.BuildHead {
		fields[ControllerFieldBuildHead] = struct{}{}
	}
	if m.BuildAuthor != o.BuildAuthor {
		fields[ControllerFieldBuildAuthor] = struct{}{}
	}
	if m.Hostname != o.Hostname {
		fields[ControllerFieldHostname] = struct{}{}
	}
}

func (m *Controller) CopyInFields(src *Controller) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Addr != src.Key.Addr {
				m.Key.Addr = src.Key.Addr
				changed++
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.BuildMaster != src.BuildMaster {
			m.BuildMaster = src.BuildMaster
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.BuildHead != src.BuildHead {
			m.BuildHead = src.BuildHead
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.BuildAuthor != src.BuildAuthor {
			m.BuildAuthor = src.BuildAuthor
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.Hostname != src.Hostname {
			m.Hostname = src.Hostname
			changed++
		}
	}
	return changed
}

func (m *Controller) DeepCopyIn(src *Controller) {
	m.Key.DeepCopyIn(&src.Key)
	m.BuildMaster = src.BuildMaster
	m.BuildHead = src.BuildHead
	m.BuildAuthor = src.BuildAuthor
	m.Hostname = src.Hostname
}

func (s *Controller) HasFields() bool {
	return true
}

type ControllerStore interface {
	Create(ctx context.Context, m *Controller, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *Controller, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *Controller, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *Controller, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*Controller, int64, error)
	Get(ctx context.Context, key *ControllerKey, buf *Controller) bool
	STMGet(stm concurrency.STM, key *ControllerKey, buf *Controller) bool
	STMPut(stm concurrency.STM, obj *Controller, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *ControllerKey)
}

type ControllerStoreImpl struct {
	kvstore objstore.KVStore
}

func NewControllerStore(kvstore objstore.KVStore) *ControllerStoreImpl {
	return &ControllerStoreImpl{kvstore: kvstore}
}

func (s *ControllerStoreImpl) Create(ctx context.Context, m *Controller, wait func(int64)) (*Result, error) {
	err := m.Validate(ControllerAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Controller", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ControllerStoreImpl) Update(ctx context.Context, m *Controller, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Controller", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Controller
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ControllerStoreImpl) Put(ctx context.Context, m *Controller, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ControllerAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Controller", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ControllerStoreImpl) Delete(ctx context.Context, m *Controller, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Controller", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ControllerStoreImpl) LoadOne(key string) (*Controller, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Controller
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Controller data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ControllerStoreImpl) Get(ctx context.Context, key *ControllerKey, buf *Controller) bool {
	keystr := objstore.DbKeyString("Controller", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *ControllerStoreImpl) STMGet(stm concurrency.STM, key *ControllerKey, buf *Controller) bool {
	keystr := objstore.DbKeyString("Controller", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *ControllerStoreImpl) parseGetData(val []byte, buf *Controller) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = Controller{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ControllerStoreImpl) STMPut(stm concurrency.STM, obj *Controller, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Controller", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Controller json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ControllerStoreImpl) STMDel(stm concurrency.STM, key *ControllerKey) {
	keystr := objstore.DbKeyString("Controller", key)
	stm.Del(keystr)
}

type ControllerKeyWatcher struct {
	cb func(ctx context.Context)
}

type ControllerCacheData struct {
	Obj    *Controller
	ModRev int64
}

// ControllerCache caches Controller objects in memory in a hash table
// and keeps them in sync with the database.
type ControllerCache struct {
	Objs          map[ControllerKey]*ControllerCacheData
	Mux           util.Mutex
	List          map[ControllerKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *ControllerKey, old *Controller, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *Controller, new *Controller)
	DeletedCbs    []func(ctx context.Context, old *Controller)
	KeyWatchers   map[ControllerKey][]*ControllerKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *ControllerKey)
	DeletedKeyCbs []func(ctx context.Context, key *ControllerKey)
}

func NewControllerCache() *ControllerCache {
	cache := ControllerCache{}
	InitControllerCache(&cache)
	return &cache
}

func InitControllerCache(cache *ControllerCache) {
	cache.Objs = make(map[ControllerKey]*ControllerCacheData)
	cache.KeyWatchers = make(map[ControllerKey][]*ControllerKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *ControllerCache) GetTypeString() string {
	return "Controller"
}

func (c *ControllerCache) Get(key *ControllerKey, valbuf *Controller) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *ControllerCache) GetWithRev(key *ControllerKey, valbuf *Controller, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *ControllerCache) HasKey(key *ControllerKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ControllerCache) GetAllKeys(ctx context.Context, cb func(key *ControllerKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *ControllerCache) Update(ctx context.Context, in *Controller, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *Controller) (*Controller, bool) {
		return in, true
	})
}

func (c *ControllerCache) UpdateModFunc(ctx context.Context, key *ControllerKey, modRev int64, modFunc func(old *Controller) (new *Controller, changed bool)) {
	c.Mux.Lock()
	var old *Controller
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &Controller{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &Controller{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &ControllerCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *ControllerCache) Delete(ctx context.Context, in *Controller, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *Controller) bool {
		return true
	})
}

func (c *ControllerCache) DeleteCondFunc(ctx context.Context, in *Controller, modRev int64, condFunc func(old *Controller) bool) {
	c.Mux.Lock()
	var old *Controller
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *ControllerCache) Prune(ctx context.Context, validKeys map[ControllerKey]struct{}) {
	notify := make(map[ControllerKey]*ControllerCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ControllerCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ControllerCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ControllerCache) Show(filter *Controller, cb func(ret *Controller) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ControllerGenericNotifyCb(fn func(key *ControllerKey, old *Controller)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ControllerKey), obj.(*Controller))
	}
}

func (c *ControllerCache) SetNotifyCb(fn func(ctx context.Context, obj *ControllerKey, old *Controller, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *ControllerKey, old *Controller, modRev int64){fn}
}

func (c *ControllerCache) SetUpdatedCb(fn func(ctx context.Context, old *Controller, new *Controller)) {
	c.UpdatedCbs = []func(ctx context.Context, old *Controller, new *Controller){fn}
}

func (c *ControllerCache) SetDeletedCb(fn func(ctx context.Context, old *Controller)) {
	c.DeletedCbs = []func(ctx context.Context, old *Controller){fn}
}

func (c *ControllerCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *ControllerKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *ControllerKey){fn}
}

func (c *ControllerCache) SetDeletedKeyCb(fn func(ctx context.Context, key *ControllerKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *ControllerKey){fn}
}

func (c *ControllerCache) AddUpdatedCb(fn func(ctx context.Context, old *Controller, new *Controller)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *ControllerCache) AddDeletedCb(fn func(ctx context.Context, old *Controller)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *ControllerCache) AddNotifyCb(fn func(ctx context.Context, obj *ControllerKey, old *Controller, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *ControllerCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *ControllerKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *ControllerCache) AddDeletedKeyCb(fn func(ctx context.Context, key *ControllerKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *ControllerCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *ControllerCache) WatchKey(key *ControllerKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ControllerKeyWatcher, 0)
	}
	watcher := ControllerKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Controller", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ControllerCache) TriggerKeyWatchers(ctx context.Context, key *ControllerKey) {
	watchers := make([]*ControllerKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *ControllerCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := Controller{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Controller data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ControllerCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := Controller{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ControllerKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *ControllerCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ControllerKey]struct{})
}

func (c *ControllerCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ControllerKey]*ControllerCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ControllerCache) UsesOrg(org string) bool {
	return false
}

func (m *Controller) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Controller) GetKey() *ControllerKey {
	return &m.Key
}

func (m *Controller) GetKeyVal() ControllerKey {
	return m.Key
}

func (m *Controller) SetKey(key *ControllerKey) {
	m.Key = *key
}

func CmpSortController(a Controller, b Controller) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Controller) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreControllerFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildMaster")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildHead")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "BuildAuthor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Hostname")
	}
	return cmpopts.IgnoreFields(Controller{}, names...)
}

func (m *ControllerKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *Controller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovController(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovController(uint64(l))
	l = len(m.BuildMaster)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.BuildHead)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.BuildAuthor)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ControllerKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControllerKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControllerKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Controller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Controller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Controller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildMaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupController
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthController
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthController        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupController = fmt.Errorf("proto: unexpected end of group")
)
