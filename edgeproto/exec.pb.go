// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package edgeproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CloudletMgmtNode struct {
	// Type of Cloudlet Mgmt Node
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name of Cloudlet Mgmt Node
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletMgmtNode) Reset()         { *m = CloudletMgmtNode{} }
func (m *CloudletMgmtNode) String() string { return proto.CompactTextString(m) }
func (*CloudletMgmtNode) ProtoMessage()    {}
func (*CloudletMgmtNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{0}
}
func (m *CloudletMgmtNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudletMgmtNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudletMgmtNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudletMgmtNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudletMgmtNode.Merge(m, src)
}
func (m *CloudletMgmtNode) XXX_Size() int {
	return m.Size()
}
func (m *CloudletMgmtNode) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudletMgmtNode.DiscardUnknown(m)
}

var xxx_messageInfo_CloudletMgmtNode proto.InternalMessageInfo

type RunCmd struct {
	// Command or Shell
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Cloudlet Mgmt Node
	CloudletMgmtNode *CloudletMgmtNode `protobuf:"bytes,2,opt,name=cloudlet_mgmt_node,json=cloudletMgmtNode,proto3" json:"cloudlet_mgmt_node,omitempty"`
}

func (m *RunCmd) Reset()         { *m = RunCmd{} }
func (m *RunCmd) String() string { return proto.CompactTextString(m) }
func (*RunCmd) ProtoMessage()    {}
func (*RunCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{1}
}
func (m *RunCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunCmd.Merge(m, src)
}
func (m *RunCmd) XXX_Size() int {
	return m.Size()
}
func (m *RunCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RunCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RunCmd proto.InternalMessageInfo

type RunVMConsole struct {
	// VM Console URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *RunVMConsole) Reset()         { *m = RunVMConsole{} }
func (m *RunVMConsole) String() string { return proto.CompactTextString(m) }
func (*RunVMConsole) ProtoMessage()    {}
func (*RunVMConsole) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{2}
}
func (m *RunVMConsole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunVMConsole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunVMConsole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunVMConsole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunVMConsole.Merge(m, src)
}
func (m *RunVMConsole) XXX_Size() int {
	return m.Size()
}
func (m *RunVMConsole) XXX_DiscardUnknown() {
	xxx_messageInfo_RunVMConsole.DiscardUnknown(m)
}

var xxx_messageInfo_RunVMConsole proto.InternalMessageInfo

type ShowLog struct {
	// Show logs since either a duration ago (5s, 2m, 3h) or a timestamp (RFC3339)
	Since string `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	// Show only a recent number of lines
	Tail int32 `protobuf:"varint,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Show timestamps
	Timestamps bool `protobuf:"varint,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Stream data
	Follow bool `protobuf:"varint,4,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (m *ShowLog) Reset()         { *m = ShowLog{} }
func (m *ShowLog) String() string { return proto.CompactTextString(m) }
func (*ShowLog) ProtoMessage()    {}
func (*ShowLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{3}
}
func (m *ShowLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowLog.Merge(m, src)
}
func (m *ShowLog) XXX_Size() int {
	return m.Size()
}
func (m *ShowLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowLog.DiscardUnknown(m)
}

var xxx_messageInfo_ShowLog proto.InternalMessageInfo

// ExecRequest is a common struct for enabling a connection to execute some work on a container
type ExecRequest struct {
	// Target AppInst
	AppInstKey AppInstKey `protobuf:"bytes,1,opt,name=app_inst_key,json=appInstKey,proto3" json:"app_inst_key"`
	// ContainerId is the name or ID of the target container, if applicable
	ContainerId string `protobuf:"bytes,3,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Offer
	Offer string `protobuf:"bytes,4,opt,name=offer,proto3" json:"offer,omitempty"`
	// Answer
	Answer string `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	// Any error message
	Err string `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
	// Command to run (one of)
	Cmd *RunCmd `protobuf:"bytes,9,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// Show log (one of)
	Log *ShowLog `protobuf:"bytes,10,opt,name=log,proto3" json:"log,omitempty"`
	// Console (one of)
	Console *RunVMConsole `protobuf:"bytes,11,opt,name=console,proto3" json:"console,omitempty"`
	// Timeout
	Timeout Duration `protobuf:"varint,12,opt,name=timeout,proto3,casttype=Duration" json:"timeout,omitempty"`
	// Access URL
	AccessUrl string `protobuf:"bytes,14,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	// EdgeTurn Server Address
	EdgeTurnAddr string `protobuf:"bytes,15,opt,name=edge_turn_addr,json=edgeTurnAddr,proto3" json:"edge_turn_addr,omitempty"`
}

func (m *ExecRequest) Reset()         { *m = ExecRequest{} }
func (m *ExecRequest) String() string { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()    {}
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{4}
}
func (m *ExecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecRequest.Merge(m, src)
}
func (m *ExecRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CloudletMgmtNode)(nil), "edgeproto.CloudletMgmtNode")
	proto.RegisterType((*RunCmd)(nil), "edgeproto.RunCmd")
	proto.RegisterType((*RunVMConsole)(nil), "edgeproto.RunVMConsole")
	proto.RegisterType((*ShowLog)(nil), "edgeproto.ShowLog")
	proto.RegisterType((*ExecRequest)(nil), "edgeproto.ExecRequest")
}

func init() { proto.RegisterFile("exec.proto", fileDescriptor_4d737c7315c25422) }

var fileDescriptor_4d737c7315c25422 = []byte{
	// 1079 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xbd, 0x6f, 0x23, 0x45,
	0x14, 0xf7, 0xc6, 0x71, 0x72, 0x9e, 0xf8, 0x42, 0x18, 0x1d, 0x61, 0x08, 0xc8, 0x09, 0x0e, 0xa0,
	0x08, 0x2d, 0x8e, 0x08, 0x0d, 0x4a, 0x48, 0xe1, 0xf8, 0x72, 0x52, 0x74, 0xc9, 0x1d, 0xda, 0xe4,
	0xd2, 0x5a, 0x93, 0xdd, 0xc9, 0xde, 0xea, 0x76, 0x67, 0x96, 0xd9, 0x5d, 0x92, 0x50, 0x51, 0x23,
	0x0a, 0x44, 0x05, 0x54, 0x08, 0x21, 0x74, 0xa2, 0xa0, 0xe0, 0x2f, 0x40, 0xa2, 0x89, 0xa8, 0xae,
	0x03, 0x5d, 0x71, 0x80, 0x53, 0x80, 0xdc, 0x21, 0x79, 0x41, 0xa2, 0x42, 0x33, 0xb3, 0x6b, 0x6f,
	0x7c, 0x76, 0x12, 0x93, 0x83, 0xc6, 0x7e, 0xf3, 0xbe, 0xe7, 0x37, 0xef, 0x63, 0x01, 0x20, 0x87,
	0xc4, 0xac, 0xfa, 0x9c, 0x85, 0x0c, 0x16, 0x89, 0x65, 0x13, 0x49, 0xce, 0xbc, 0x69, 0x3b, 0xe1,
	0xdd, 0x68, 0xaf, 0x6a, 0x32, 0x6f, 0xd1, 0x63, 0x7b, 0x8e, 0x2b, 0x44, 0x87, 0x8b, 0xe2, 0xf7,
	0x35, 0xd3, 0x65, 0x91, 0xb5, 0x28, 0xf5, 0x6c, 0x42, 0x3b, 0x84, 0x72, 0x32, 0x73, 0xcd, 0x66,
	0x36, 0x93, 0xe4, 0xa2, 0xa0, 0x12, 0xee, 0x55, 0xec, 0xfb, 0x0e, 0x0d, 0x42, 0x75, 0xac, 0x2c,
	0x83, 0xa9, 0xba, 0xf0, 0xe2, 0x92, 0x70, 0xcb, 0xf6, 0xc2, 0x5b, 0xcc, 0x22, 0x10, 0x82, 0xd1,
	0xf0, 0xc8, 0x27, 0x48, 0x9b, 0xd3, 0x16, 0x8a, 0x86, 0xa4, 0x05, 0x8f, 0x62, 0x8f, 0xa0, 0x11,
	0xc5, 0x13, 0x74, 0xc5, 0x03, 0x63, 0x46, 0x44, 0xeb, 0x9e, 0x05, 0x11, 0x18, 0x37, 0x99, 0xe7,
	0x61, 0x6a, 0x25, 0x46, 0xe9, 0x11, 0x6e, 0x00, 0x68, 0x26, 0xfe, 0x1b, 0x9e, 0xed, 0x85, 0x0d,
	0xca, 0x2c, 0xe5, 0x65, 0x62, 0xe9, 0xf9, 0x6a, 0xe7, 0x9a, 0xd5, 0xde, 0x24, 0x8c, 0x29, 0xb3,
	0x87, 0x53, 0x59, 0x04, 0x25, 0x23, 0xa2, 0xbb, 0x5b, 0x75, 0x46, 0x03, 0xe6, 0x12, 0x38, 0x0b,
	0xf2, 0x11, 0x77, 0x55, 0xc0, 0xb5, 0xab, 0xf7, 0xdb, 0x48, 0xfb, 0xf8, 0xdb, 0xe7, 0x0a, 0x94,
	0x99, 0x9e, 0x6f, 0x08, 0x49, 0xe5, 0x1e, 0x18, 0xdf, 0xbe, 0xcb, 0x0e, 0x36, 0x99, 0x0d, 0xaf,
	0x81, 0x42, 0xe0, 0x50, 0x33, 0xbd, 0x93, 0x3a, 0xc8, 0x8b, 0x62, 0xc7, 0x95, 0xe9, 0x14, 0x0c,
	0x49, 0xc3, 0x32, 0x00, 0xa1, 0xe3, 0x91, 0x20, 0xc4, 0x9e, 0x1f, 0xa0, 0xfc, 0x9c, 0xb6, 0x70,
	0xc5, 0xc8, 0x70, 0xe0, 0x34, 0x18, 0xdb, 0x67, 0xae, 0xcb, 0x0e, 0xd0, 0xa8, 0x94, 0x25, 0xa7,
	0xca, 0x07, 0x45, 0x30, 0xb1, 0x7e, 0x48, 0x4c, 0x83, 0xbc, 0x13, 0x91, 0x20, 0x84, 0xab, 0xa0,
	0x84, 0x7d, 0xbf, 0x21, 0xa0, 0x6e, 0xdc, 0x23, 0x47, 0x32, 0xf0, 0xc4, 0xd2, 0x33, 0x99, 0x2b,
	0xd7, 0x7c, 0x7f, 0x83, 0x06, 0xe1, 0x4d, 0x72, 0xb4, 0x36, 0x7a, 0xfc, 0x68, 0x36, 0x67, 0x00,
	0xdc, 0xe1, 0xc0, 0x17, 0x41, 0xc9, 0x64, 0x34, 0xc4, 0x0e, 0x25, 0xbc, 0xe1, 0x58, 0x32, 0x91,
	0xa2, 0x31, 0xd1, 0xe1, 0x6d, 0x58, 0x70, 0x1e, 0x14, 0xd8, 0xfe, 0x3e, 0xe1, 0x32, 0x91, 0xc7,
	0x10, 0x50, 0x32, 0xf8, 0x32, 0x18, 0xc3, 0x34, 0x38, 0x20, 0x1c, 0x15, 0xfa, 0x69, 0x25, 0x42,
	0x38, 0x05, 0xf2, 0x84, 0x73, 0x34, 0x26, 0xa3, 0x08, 0x12, 0xce, 0x83, 0xbc, 0xe9, 0x59, 0xa8,
	0x28, 0xd3, 0x7e, 0x3a, 0x93, 0xb6, 0x7a, 0x72, 0x43, 0x48, 0xe1, 0x4b, 0x20, 0xef, 0x32, 0x1b,
	0x01, 0xa9, 0x04, 0x33, 0x4a, 0x09, 0xee, 0x86, 0x10, 0xc3, 0xd7, 0x45, 0x75, 0xc8, 0x37, 0x43,
	0x13, 0x52, 0xf3, 0xd9, 0xd3, 0xee, 0x3a, 0x4f, 0x6a, 0xa4, 0x7a, 0xf0, 0x15, 0x30, 0x2e, 0x30,
	0x67, 0x51, 0x88, 0x4a, 0x73, 0xda, 0x42, 0x7e, 0xad, 0xf4, 0xf7, 0xa3, 0xd9, 0x2b, 0xd7, 0x23,
	0x8e, 0x43, 0x87, 0x51, 0x23, 0x15, 0xc2, 0x79, 0x00, 0xb0, 0x69, 0x92, 0x20, 0x68, 0x88, 0x52,
	0x98, 0x94, 0x57, 0x1c, 0x15, 0x57, 0x34, 0x8a, 0x8a, 0x7f, 0x87, 0xbb, 0xf0, 0x55, 0x30, 0x29,
	0xe2, 0x35, 0xc2, 0x88, 0xd3, 0x06, 0xb6, 0x2c, 0x8e, 0x9e, 0xca, 0x28, 0x96, 0x84, 0x6c, 0x27,
	0xe2, 0xb4, 0x66, 0x59, 0x7c, 0xf9, 0xfb, 0xc2, 0x77, 0x6d, 0xa4, 0x1d, 0x0b, 0x90, 0x62, 0xb4,
	0x72, 0x5b, 0x60, 0xa8, 0xd7, 0x24, 0x46, 0xfa, 0x3a, 0xe7, 0x7a, 0x92, 0x68, 0xf5, 0x0e, 0x77,
	0xf5, 0x1d, 0x95, 0x83, 0x5e, 0x4b, 0x03, 0xe9, 0xeb, 0x19, 0x4f, 0x9f, 0xc5, 0xe8, 0xeb, 0x51,
	0xec, 0xfb, 0xa2, 0x53, 0x56, 0xbb, 0x4f, 0x2d, 0x5e, 0x5d, 0xfc, 0xdd, 0xc2, 0x1e, 0xd1, 0xb1,
	0xef, 0xbf, 0x4b, 0x78, 0xd0, 0x47, 0xbc, 0x4b, 0x78, 0xe0, 0x30, 0x2a, 0x34, 0x18, 0xb7, 0xfb,
	0x28, 0xdc, 0xe6, 0x36, 0xa6, 0xce, 0x7b, 0x12, 0x0e, 0xdd, 0x74, 0xa3, 0x20, 0x24, 0x3c, 0xab,
	0x56, 0x57, 0xac, 0x9e, 0x63, 0x27, 0x72, 0x62, 0xd1, 0xe3, 0xbb, 0xc7, 0xa8, 0x27, 0x86, 0x6a,
	0xc7, 0x33, 0x83, 0x28, 0x95, 0x4c, 0x14, 0xc5, 0x38, 0x3b, 0x4c, 0xd6, 0xec, 0x54, 0xc8, 0x7d,
	0x62, 0x11, 0x8e, 0x43, 0x62, 0x5d, 0xdc, 0xfe, 0x46, 0x6a, 0x72, 0x3a, 0x77, 0x35, 0x8c, 0x56,
	0xeb, 0x9e, 0x55, 0xad, 0x2b, 0x5a, 0x97, 0x13, 0x60, 0x75, 0x93, 0xd9, 0xd5, 0x6d, 0x41, 0xe9,
	0xa2, 0xf9, 0xe5, 0x71, 0x07, 0x3b, 0xae, 0xde, 0x6d, 0x78, 0xc5, 0xeb, 0x1c, 0x75, 0xd5, 0xee,
	0x92, 0x7b, 0x43, 0x92, 0xba, 0x98, 0x68, 0x62, 0x46, 0x2a, 0xf7, 0x3d, 0x53, 0xab, 0xba, 0x73,
	0xe4, 0x13, 0xa9, 0x22, 0x0b, 0xa1, 0xaf, 0x8a, 0xc0, 0xea, 0x8b, 0x18, 0xad, 0x5c, 0xe2, 0x8a,
	0x3f, 0xc4, 0x08, 0x74, 0xcd, 0x97, 0xbe, 0x2a, 0x81, 0x71, 0x31, 0x8c, 0x6a, 0xbe, 0x03, 0x7f,
	0x1c, 0x01, 0x40, 0xf4, 0x6c, 0x32, 0x90, 0xa7, 0x33, 0xbd, 0x97, 0x99, 0x57, 0x33, 0x03, 0xf8,
	0x95, 0x4f, 0x46, 0x5a, 0x6d, 0xf4, 0x96, 0x41, 0x02, 0x16, 0x71, 0x93, 0x24, 0x31, 0x02, 0xbd,
	0x66, 0x8a, 0xb0, 0x5b, 0x98, 0x62, 0x9b, 0xe8, 0x67, 0x97, 0xe7, 0xc3, 0x18, 0xbd, 0xfd, 0x58,
	0x23, 0xa5, 0xcd, 0xb3, 0xc9, 0xec, 0xb4, 0xa9, 0x06, 0x34, 0x92, 0xde, 0x0f, 0xb3, 0x66, 0x8c,
	0xa6, 0xbb, 0x51, 0xf5, 0xcc, 0xc3, 0xb6, 0x62, 0xb4, 0x77, 0xc1, 0x92, 0xbe, 0x04, 0xde, 0xf7,
	0xff, 0x42, 0x1a, 0xfc, 0x39, 0x45, 0x56, 0xcd, 0xac, 0x61, 0x91, 0xfd, 0xfc, 0x49, 0x20, 0x7b,
	0xf3, 0x6c, 0x64, 0x3d, 0xab, 0x83, 0x6e, 0xbd, 0xbb, 0x3a, 0x06, 0x20, 0xdd, 0x8a, 0xd1, 0x87,
	0xda, 0xc5, 0x67, 0xc8, 0x7f, 0x8f, 0x32, 0xfc, 0x72, 0x04, 0x5c, 0x49, 0x56, 0x49, 0x30, 0x34,
	0xbe, 0xbf, 0x69, 0xad, 0x36, 0x5a, 0x1e, 0x80, 0xef, 0xae, 0x43, 0x0e, 0xce, 0x47, 0x77, 0x65,
	0x20, 0xba, 0x59, 0x64, 0x07, 0xa2, 0xf9, 0x3f, 0x14, 0xe2, 0xfb, 0x7f, 0x22, 0x0d, 0xfe, 0x91,
	0x07, 0x93, 0x2a, 0x89, 0x54, 0x7f, 0x68, 0xb0, 0xbe, 0xc9, 0xb7, 0xda, 0x68, 0x36, 0x05, 0x2b,
	0x75, 0xd3, 0x53, 0x8d, 0x0f, 0x63, 0xf4, 0xbb, 0x76, 0xa1, 0x56, 0x3e, 0xbf, 0xd8, 0xf4, 0x01,
	0x3b, 0x71, 0xf0, 0x2e, 0x3c, 0x67, 0x09, 0x3e, 0xe9, 0xc2, 0x6d, 0xc6, 0xe8, 0x53, 0x6d, 0x88,
	0x65, 0xf7, 0x2f, 0x16, 0xdc, 0x65, 0x5a, 0xe3, 0x3a, 0x98, 0xda, 0x26, 0xd4, 0xda, 0x64, 0x26,
	0x76, 0xd3, 0x6f, 0xce, 0x61, 0x1f, 0x3d, 0xb7, 0xf6, 0xc2, 0xf1, 0xaf, 0xe5, 0xdc, 0x71, 0xb3,
	0xac, 0x3d, 0x68, 0x96, 0xb5, 0x5f, 0x9a, 0x65, 0xed, 0xa3, 0x93, 0x72, 0xee, 0xc1, 0x49, 0x39,
	0xf7, 0xd3, 0x49, 0x39, 0xb7, 0x37, 0x26, 0x4d, 0xde, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xad,
	0x59, 0x08, 0xc8, 0x9b, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecApiClient is the client API for ExecApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecApiClient interface {
	// Run a Command or Shell on a container
	RunCommand(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// Run console on a VM
	RunConsole(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// View logs for AppInst
	ShowLogs(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// Access Cloudlet VM
	AccessCloudlet(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// This is used internally to forward requests to other Controllers.e
	SendLocalRequest(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
}

type execApiClient struct {
	cc *grpc.ClientConn
}

func NewExecApiClient(cc *grpc.ClientConn) ExecApiClient {
	return &execApiClient{cc}
}

func (c *execApiClient) RunCommand(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := c.cc.Invoke(ctx, "/edgeproto.ExecApi/RunCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) RunConsole(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := c.cc.Invoke(ctx, "/edgeproto.ExecApi/RunConsole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) ShowLogs(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := c.cc.Invoke(ctx, "/edgeproto.ExecApi/ShowLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) AccessCloudlet(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := c.cc.Invoke(ctx, "/edgeproto.ExecApi/AccessCloudlet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) SendLocalRequest(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := c.cc.Invoke(ctx, "/edgeproto.ExecApi/SendLocalRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecApiServer is the server API for ExecApi service.
type ExecApiServer interface {
	// Run a Command or Shell on a container
	RunCommand(context.Context, *ExecRequest) (*ExecRequest, error)
	// Run console on a VM
	RunConsole(context.Context, *ExecRequest) (*ExecRequest, error)
	// View logs for AppInst
	ShowLogs(context.Context, *ExecRequest) (*ExecRequest, error)
	// Access Cloudlet VM
	AccessCloudlet(context.Context, *ExecRequest) (*ExecRequest, error)
	// This is used internally to forward requests to other Controllers.e
	SendLocalRequest(context.Context, *ExecRequest) (*ExecRequest, error)
}

// UnimplementedExecApiServer can be embedded to have forward compatible implementations.
type UnimplementedExecApiServer struct {
}

func (*UnimplementedExecApiServer) RunCommand(ctx context.Context, req *ExecRequest) (*ExecRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (*UnimplementedExecApiServer) RunConsole(ctx context.Context, req *ExecRequest) (*ExecRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunConsole not implemented")
}
func (*UnimplementedExecApiServer) ShowLogs(ctx context.Context, req *ExecRequest) (*ExecRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLogs not implemented")
}
func (*UnimplementedExecApiServer) AccessCloudlet(ctx context.Context, req *ExecRequest) (*ExecRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessCloudlet not implemented")
}
func (*UnimplementedExecApiServer) SendLocalRequest(ctx context.Context, req *ExecRequest) (*ExecRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocalRequest not implemented")
}

func RegisterExecApiServer(s *grpc.Server, srv ExecApiServer) {
	s.RegisterService(&_ExecApi_serviceDesc, srv)
}

func _ExecApi_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).RunCommand(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_RunConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).RunConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/RunConsole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).RunConsole(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_ShowLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).ShowLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/ShowLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).ShowLogs(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_AccessCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).AccessCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/AccessCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).AccessCloudlet(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_SendLocalRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).SendLocalRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/SendLocalRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).SendLocalRequest(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ExecApi",
	HandlerType: (*ExecApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _ExecApi_RunCommand_Handler,
		},
		{
			MethodName: "RunConsole",
			Handler:    _ExecApi_RunConsole_Handler,
		},
		{
			MethodName: "ShowLogs",
			Handler:    _ExecApi_ShowLogs_Handler,
		},
		{
			MethodName: "AccessCloudlet",
			Handler:    _ExecApi_AccessCloudlet_Handler,
		},
		{
			MethodName: "SendLocalRequest",
			Handler:    _ExecApi_SendLocalRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec.proto",
}

func (m *CloudletMgmtNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletMgmtNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudletMgmtNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudletMgmtNode != nil {
		{
			size, err := m.CloudletMgmtNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunVMConsole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunVMConsole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunVMConsole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Follow {
		i--
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamps {
		i--
		if m.Timestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Tail != 0 {
		i = encodeVarintExec(dAtA, i, uint64(m.Tail))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Since) > 0 {
		i -= len(m.Since)
		copy(dAtA[i:], m.Since)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Since)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EdgeTurnAddr) > 0 {
		i -= len(m.EdgeTurnAddr)
		copy(dAtA[i:], m.EdgeTurnAddr)
		i = encodeVarintExec(dAtA, i, uint64(len(m.EdgeTurnAddr)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AccessUrl) > 0 {
		i -= len(m.AccessUrl)
		copy(dAtA[i:], m.AccessUrl)
		i = encodeVarintExec(dAtA, i, uint64(len(m.AccessUrl)))
		i--
		dAtA[i] = 0x72
	}
	if m.Timeout != 0 {
		i = encodeVarintExec(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x60
	}
	if m.Console != nil {
		{
			size, err := m.Console.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Cmd != nil {
		{
			size, err := m.Cmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Answer) > 0 {
		i -= len(m.Answer)
		copy(dAtA[i:], m.Answer)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Answer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Offer) > 0 {
		i -= len(m.Offer)
		copy(dAtA[i:], m.Offer)
		i = encodeVarintExec(dAtA, i, uint64(len(m.Offer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintExec(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.AppInstKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExec(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintExec(dAtA []byte, offset int, v uint64) int {
	offset -= sovExec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudletMgmtNode) CopyInFields(src *CloudletMgmtNode) int {
	changed := 0
	if m.Type != src.Type {
		m.Type = src.Type
		changed++
	}
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *CloudletMgmtNode) DeepCopyIn(src *CloudletMgmtNode) {
	m.Type = src.Type
	m.Name = src.Name
}

// Helper method to check that enums have valid values
func (m *CloudletMgmtNode) ValidateEnums() error {
	return nil
}

func (s *CloudletMgmtNode) ClearTagged(tags map[string]struct{}) {
}

func (m *RunCmd) CopyInFields(src *RunCmd) int {
	changed := 0
	if m.Command != src.Command {
		m.Command = src.Command
		changed++
	}
	if src.CloudletMgmtNode != nil {
		if m.CloudletMgmtNode == nil {
			m.CloudletMgmtNode = &CloudletMgmtNode{}
		}
		if m.CloudletMgmtNode.Type != src.CloudletMgmtNode.Type {
			m.CloudletMgmtNode.Type = src.CloudletMgmtNode.Type
			changed++
		}
		if m.CloudletMgmtNode.Name != src.CloudletMgmtNode.Name {
			m.CloudletMgmtNode.Name = src.CloudletMgmtNode.Name
			changed++
		}
	} else if m.CloudletMgmtNode != nil {
		m.CloudletMgmtNode = nil
		changed++
	}
	return changed
}

func (m *RunCmd) DeepCopyIn(src *RunCmd) {
	m.Command = src.Command
	if src.CloudletMgmtNode != nil {
		var tmp_CloudletMgmtNode CloudletMgmtNode
		tmp_CloudletMgmtNode.DeepCopyIn(src.CloudletMgmtNode)
		m.CloudletMgmtNode = &tmp_CloudletMgmtNode
	} else {
		m.CloudletMgmtNode = nil
	}
}

// Helper method to check that enums have valid values
func (m *RunCmd) ValidateEnums() error {
	if m.CloudletMgmtNode != nil {
		if err := m.CloudletMgmtNode.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *RunCmd) ClearTagged(tags map[string]struct{}) {
	if s.CloudletMgmtNode != nil {
		s.CloudletMgmtNode.ClearTagged(tags)
	}
}

func (m *RunVMConsole) CopyInFields(src *RunVMConsole) int {
	changed := 0
	if m.Url != src.Url {
		m.Url = src.Url
		changed++
	}
	return changed
}

func (m *RunVMConsole) DeepCopyIn(src *RunVMConsole) {
	m.Url = src.Url
}

// Helper method to check that enums have valid values
func (m *RunVMConsole) ValidateEnums() error {
	return nil
}

func (s *RunVMConsole) ClearTagged(tags map[string]struct{}) {
	if _, found := tags["nocmp"]; found {
		s.Url = ""
	}
}

func IgnoreRunVMConsoleFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Url")
	}
	return cmpopts.IgnoreFields(RunVMConsole{}, names...)
}

func (m *ShowLog) CopyInFields(src *ShowLog) int {
	changed := 0
	if m.Since != src.Since {
		m.Since = src.Since
		changed++
	}
	if m.Tail != src.Tail {
		m.Tail = src.Tail
		changed++
	}
	if m.Timestamps != src.Timestamps {
		m.Timestamps = src.Timestamps
		changed++
	}
	if m.Follow != src.Follow {
		m.Follow = src.Follow
		changed++
	}
	return changed
}

func (m *ShowLog) DeepCopyIn(src *ShowLog) {
	m.Since = src.Since
	m.Tail = src.Tail
	m.Timestamps = src.Timestamps
	m.Follow = src.Follow
}

// Helper method to check that enums have valid values
func (m *ShowLog) ValidateEnums() error {
	return nil
}

func (s *ShowLog) ClearTagged(tags map[string]struct{}) {
}

func (m *ExecRequest) CopyInFields(src *ExecRequest) int {
	changed := 0
	if m.AppInstKey.AppKey.Organization != src.AppInstKey.AppKey.Organization {
		m.AppInstKey.AppKey.Organization = src.AppInstKey.AppKey.Organization
		changed++
	}
	if m.AppInstKey.AppKey.Name != src.AppInstKey.AppKey.Name {
		m.AppInstKey.AppKey.Name = src.AppInstKey.AppKey.Name
		changed++
	}
	if m.AppInstKey.AppKey.Version != src.AppInstKey.AppKey.Version {
		m.AppInstKey.AppKey.Version = src.AppInstKey.AppKey.Version
		changed++
	}
	if m.AppInstKey.ClusterInstKey.ClusterKey.Name != src.AppInstKey.ClusterInstKey.ClusterKey.Name {
		m.AppInstKey.ClusterInstKey.ClusterKey.Name = src.AppInstKey.ClusterInstKey.ClusterKey.Name
		changed++
	}
	if m.AppInstKey.ClusterInstKey.CloudletKey.Organization != src.AppInstKey.ClusterInstKey.CloudletKey.Organization {
		m.AppInstKey.ClusterInstKey.CloudletKey.Organization = src.AppInstKey.ClusterInstKey.CloudletKey.Organization
		changed++
	}
	if m.AppInstKey.ClusterInstKey.CloudletKey.Name != src.AppInstKey.ClusterInstKey.CloudletKey.Name {
		m.AppInstKey.ClusterInstKey.CloudletKey.Name = src.AppInstKey.ClusterInstKey.CloudletKey.Name
		changed++
	}
	if m.AppInstKey.ClusterInstKey.CloudletKey.FederatedOrganization != src.AppInstKey.ClusterInstKey.CloudletKey.FederatedOrganization {
		m.AppInstKey.ClusterInstKey.CloudletKey.FederatedOrganization = src.AppInstKey.ClusterInstKey.CloudletKey.FederatedOrganization
		changed++
	}
	if m.AppInstKey.ClusterInstKey.Organization != src.AppInstKey.ClusterInstKey.Organization {
		m.AppInstKey.ClusterInstKey.Organization = src.AppInstKey.ClusterInstKey.Organization
		changed++
	}
	if m.ContainerId != src.ContainerId {
		m.ContainerId = src.ContainerId
		changed++
	}
	if m.Offer != src.Offer {
		m.Offer = src.Offer
		changed++
	}
	if m.Answer != src.Answer {
		m.Answer = src.Answer
		changed++
	}
	if m.Err != src.Err {
		m.Err = src.Err
		changed++
	}
	if src.Cmd != nil {
		if m.Cmd == nil {
			m.Cmd = &RunCmd{}
		}
		if m.Cmd.Command != src.Cmd.Command {
			m.Cmd.Command = src.Cmd.Command
			changed++
		}
		if src.Cmd.CloudletMgmtNode != nil {
			if m.Cmd.CloudletMgmtNode == nil {
				m.Cmd.CloudletMgmtNode = &CloudletMgmtNode{}
			}
			if m.Cmd.CloudletMgmtNode.Type != src.Cmd.CloudletMgmtNode.Type {
				m.Cmd.CloudletMgmtNode.Type = src.Cmd.CloudletMgmtNode.Type
				changed++
			}
			if m.Cmd.CloudletMgmtNode.Name != src.Cmd.CloudletMgmtNode.Name {
				m.Cmd.CloudletMgmtNode.Name = src.Cmd.CloudletMgmtNode.Name
				changed++
			}
		} else if m.Cmd.CloudletMgmtNode != nil {
			m.Cmd.CloudletMgmtNode = nil
			changed++
		}
	} else if m.Cmd != nil {
		m.Cmd = nil
		changed++
	}
	if src.Log != nil {
		if m.Log == nil {
			m.Log = &ShowLog{}
		}
		if m.Log.Since != src.Log.Since {
			m.Log.Since = src.Log.Since
			changed++
		}
		if m.Log.Tail != src.Log.Tail {
			m.Log.Tail = src.Log.Tail
			changed++
		}
		if m.Log.Timestamps != src.Log.Timestamps {
			m.Log.Timestamps = src.Log.Timestamps
			changed++
		}
		if m.Log.Follow != src.Log.Follow {
			m.Log.Follow = src.Log.Follow
			changed++
		}
	} else if m.Log != nil {
		m.Log = nil
		changed++
	}
	if src.Console != nil {
		if m.Console == nil {
			m.Console = &RunVMConsole{}
		}
		if m.Console.Url != src.Console.Url {
			m.Console.Url = src.Console.Url
			changed++
		}
	} else if m.Console != nil {
		m.Console = nil
		changed++
	}
	if m.Timeout != src.Timeout {
		m.Timeout = src.Timeout
		changed++
	}
	if m.AccessUrl != src.AccessUrl {
		m.AccessUrl = src.AccessUrl
		changed++
	}
	if m.EdgeTurnAddr != src.EdgeTurnAddr {
		m.EdgeTurnAddr = src.EdgeTurnAddr
		changed++
	}
	return changed
}

func (m *ExecRequest) DeepCopyIn(src *ExecRequest) {
	m.AppInstKey.DeepCopyIn(&src.AppInstKey)
	m.ContainerId = src.ContainerId
	m.Offer = src.Offer
	m.Answer = src.Answer
	m.Err = src.Err
	if src.Cmd != nil {
		var tmp_Cmd RunCmd
		tmp_Cmd.DeepCopyIn(src.Cmd)
		m.Cmd = &tmp_Cmd
	} else {
		m.Cmd = nil
	}
	if src.Log != nil {
		var tmp_Log ShowLog
		tmp_Log.DeepCopyIn(src.Log)
		m.Log = &tmp_Log
	} else {
		m.Log = nil
	}
	if src.Console != nil {
		var tmp_Console RunVMConsole
		tmp_Console.DeepCopyIn(src.Console)
		m.Console = &tmp_Console
	} else {
		m.Console = nil
	}
	m.Timeout = src.Timeout
	m.AccessUrl = src.AccessUrl
	m.EdgeTurnAddr = src.EdgeTurnAddr
}

// Helper method to check that enums have valid values
func (m *ExecRequest) ValidateEnums() error {
	if err := m.AppInstKey.ValidateEnums(); err != nil {
		return err
	}
	if m.Cmd != nil {
		if err := m.Cmd.ValidateEnums(); err != nil {
			return err
		}
	}
	if m.Log != nil {
		if err := m.Log.ValidateEnums(); err != nil {
			return err
		}
	}
	if m.Console != nil {
		if err := m.Console.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (s *ExecRequest) ClearTagged(tags map[string]struct{}) {
	s.AppInstKey.ClearTagged(tags)
	if _, found := tags["nocmp"]; found {
		s.Offer = ""
	}
	if _, found := tags["nocmp"]; found {
		s.Answer = ""
	}
	if s.Cmd != nil {
		s.Cmd.ClearTagged(tags)
	}
	if s.Log != nil {
		s.Log.ClearTagged(tags)
	}
	if s.Console != nil {
		s.Console.ClearTagged(tags)
	}
}

func IgnoreExecRequestFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Offer")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Answer")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Console.Url")
	}
	return cmpopts.IgnoreFields(ExecRequest{}, names...)
}

func (m *ExecRequest) IsValidArgsForRunCommand() error {
	if m.Offer != "" {
		return fmt.Errorf("Invalid field specified: Offer, this field is only for internal use")
	}
	if m.Answer != "" {
		return fmt.Errorf("Invalid field specified: Answer, this field is only for internal use")
	}
	if m.Err != "" {
		return fmt.Errorf("Invalid field specified: Err, this field is only for internal use")
	}
	if m.Cmd != nil {
		if m.Cmd.CloudletMgmtNode != nil {
			return fmt.Errorf("Invalid field specified: Cmd.CloudletMgmtNode, this field is only for internal use")
		}
	}
	if m.Log != nil {
		return fmt.Errorf("Invalid field specified: Log, this field is only for internal use")
	}
	if m.Console != nil {
		return fmt.Errorf("Invalid field specified: Console, this field is only for internal use")
	}
	if m.Timeout != 0 {
		return fmt.Errorf("Invalid field specified: Timeout, this field is only for internal use")
	}
	if m.AccessUrl != "" {
		return fmt.Errorf("Invalid field specified: AccessUrl, this field is only for internal use")
	}
	if m.EdgeTurnAddr != "" {
		return fmt.Errorf("Invalid field specified: EdgeTurnAddr, this field is only for internal use")
	}
	return nil
}

func (m *ExecRequest) IsValidArgsForRunConsole() error {
	if m.ContainerId != "" {
		return fmt.Errorf("Invalid field specified: ContainerId, this field is only for internal use")
	}
	if m.Offer != "" {
		return fmt.Errorf("Invalid field specified: Offer, this field is only for internal use")
	}
	if m.Answer != "" {
		return fmt.Errorf("Invalid field specified: Answer, this field is only for internal use")
	}
	if m.Err != "" {
		return fmt.Errorf("Invalid field specified: Err, this field is only for internal use")
	}
	if m.Cmd != nil {
		return fmt.Errorf("Invalid field specified: Cmd, this field is only for internal use")
	}
	if m.Log != nil {
		return fmt.Errorf("Invalid field specified: Log, this field is only for internal use")
	}
	if m.Console != nil {
		return fmt.Errorf("Invalid field specified: Console, this field is only for internal use")
	}
	if m.Timeout != 0 {
		return fmt.Errorf("Invalid field specified: Timeout, this field is only for internal use")
	}
	if m.AccessUrl != "" {
		return fmt.Errorf("Invalid field specified: AccessUrl, this field is only for internal use")
	}
	if m.EdgeTurnAddr != "" {
		return fmt.Errorf("Invalid field specified: EdgeTurnAddr, this field is only for internal use")
	}
	return nil
}

func (m *ExecRequest) IsValidArgsForShowLogs() error {
	if m.Offer != "" {
		return fmt.Errorf("Invalid field specified: Offer, this field is only for internal use")
	}
	if m.Answer != "" {
		return fmt.Errorf("Invalid field specified: Answer, this field is only for internal use")
	}
	if m.Err != "" {
		return fmt.Errorf("Invalid field specified: Err, this field is only for internal use")
	}
	if m.Cmd != nil {
		return fmt.Errorf("Invalid field specified: Cmd, this field is only for internal use")
	}
	if m.Console != nil {
		return fmt.Errorf("Invalid field specified: Console, this field is only for internal use")
	}
	if m.Timeout != 0 {
		return fmt.Errorf("Invalid field specified: Timeout, this field is only for internal use")
	}
	if m.AccessUrl != "" {
		return fmt.Errorf("Invalid field specified: AccessUrl, this field is only for internal use")
	}
	if m.EdgeTurnAddr != "" {
		return fmt.Errorf("Invalid field specified: EdgeTurnAddr, this field is only for internal use")
	}
	return nil
}

func (m *ExecRequest) IsValidArgsForAccessCloudlet() error {
	if m.AppInstKey.AppKey.Organization != "" {
		return fmt.Errorf("Invalid field specified: AppInstKey.AppKey.Organization, this field is only for internal use")
	}
	if m.AppInstKey.AppKey.Name != "" {
		return fmt.Errorf("Invalid field specified: AppInstKey.AppKey.Name, this field is only for internal use")
	}
	if m.AppInstKey.AppKey.Version != "" {
		return fmt.Errorf("Invalid field specified: AppInstKey.AppKey.Version, this field is only for internal use")
	}
	if m.AppInstKey.ClusterInstKey.ClusterKey.Name != "" {
		return fmt.Errorf("Invalid field specified: AppInstKey.ClusterInstKey.ClusterKey.Name, this field is only for internal use")
	}
	if m.AppInstKey.ClusterInstKey.Organization != "" {
		return fmt.Errorf("Invalid field specified: AppInstKey.ClusterInstKey.Organization, this field is only for internal use")
	}
	if m.ContainerId != "" {
		return fmt.Errorf("Invalid field specified: ContainerId, this field is only for internal use")
	}
	if m.Offer != "" {
		return fmt.Errorf("Invalid field specified: Offer, this field is only for internal use")
	}
	if m.Answer != "" {
		return fmt.Errorf("Invalid field specified: Answer, this field is only for internal use")
	}
	if m.Err != "" {
		return fmt.Errorf("Invalid field specified: Err, this field is only for internal use")
	}
	if m.Log != nil {
		return fmt.Errorf("Invalid field specified: Log, this field is only for internal use")
	}
	if m.Console != nil {
		return fmt.Errorf("Invalid field specified: Console, this field is only for internal use")
	}
	if m.Timeout != 0 {
		return fmt.Errorf("Invalid field specified: Timeout, this field is only for internal use")
	}
	if m.AccessUrl != "" {
		return fmt.Errorf("Invalid field specified: AccessUrl, this field is only for internal use")
	}
	if m.EdgeTurnAddr != "" {
		return fmt.Errorf("Invalid field specified: EdgeTurnAddr, this field is only for internal use")
	}
	return nil
}

func (m *ExecRequest) IsValidArgsForSendLocalRequest() error {
	if m.Offer != "" {
		return fmt.Errorf("Invalid field specified: Offer, this field is only for internal use")
	}
	if m.Answer != "" {
		return fmt.Errorf("Invalid field specified: Answer, this field is only for internal use")
	}
	if m.Err != "" {
		return fmt.Errorf("Invalid field specified: Err, this field is only for internal use")
	}
	if m.Console != nil {
	}
	if m.Timeout != 0 {
		return fmt.Errorf("Invalid field specified: Timeout, this field is only for internal use")
	}
	if m.AccessUrl != "" {
		return fmt.Errorf("Invalid field specified: AccessUrl, this field is only for internal use")
	}
	if m.EdgeTurnAddr != "" {
		return fmt.Errorf("Invalid field specified: EdgeTurnAddr, this field is only for internal use")
	}
	return nil
}

func (m *CloudletMgmtNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *RunCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.CloudletMgmtNode != nil {
		l = m.CloudletMgmtNode.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *RunVMConsole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *ShowLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Tail != 0 {
		n += 1 + sovExec(uint64(m.Tail))
	}
	if m.Timestamps {
		n += 2
	}
	if m.Follow {
		n += 2
	}
	return n
}

func (m *ExecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppInstKey.Size()
	n += 1 + l + sovExec(uint64(l))
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Offer)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Cmd != nil {
		l = m.Cmd.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Console != nil {
		l = m.Console.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovExec(uint64(m.Timeout))
	}
	l = len(m.AccessUrl)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.EdgeTurnAddr)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func sovExec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExec(x uint64) (n int) {
	return sovExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletMgmtNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletMgmtNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletMgmtNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletMgmtNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudletMgmtNode == nil {
				m.CloudletMgmtNode = &CloudletMgmtNode{}
			}
			if err := m.CloudletMgmtNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunVMConsole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunVMConsole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunVMConsole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			m.Tail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tail |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamps = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppInstKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cmd == nil {
				m.Cmd = &RunCmd{}
			}
			if err := m.Cmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &ShowLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Console", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Console == nil {
				m.Console = &RunVMConsole{}
			}
			if err := m.Console.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeTurnAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdgeTurnAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExec = fmt.Errorf("proto: unexpected end of group")
)
