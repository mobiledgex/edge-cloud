// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RunCmd struct {
	// Command or Shell
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// VM Console
	Console bool `protobuf:"varint,2,opt,name=console,proto3" json:"console,omitempty"`
	// VM Console URL
	ConsoleUrl string `protobuf:"bytes,3,opt,name=console_url,json=consoleUrl,proto3" json:"console_url,omitempty"`
}

func (m *RunCmd) Reset()                    { *m = RunCmd{} }
func (m *RunCmd) String() string            { return proto.CompactTextString(m) }
func (*RunCmd) ProtoMessage()               {}
func (*RunCmd) Descriptor() ([]byte, []int) { return fileDescriptorExec, []int{0} }

type ViewLog struct {
	// Show logs since either a duration ago (5s, 2m, 3h) or a timestamp (RFC3339)
	Since string `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	// Show only a recent number of lines
	Tail int32 `protobuf:"varint,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Show timestamps
	Timestamps bool `protobuf:"varint,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Stream data
	Follow bool `protobuf:"varint,4,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (m *ViewLog) Reset()                    { *m = ViewLog{} }
func (m *ViewLog) String() string            { return proto.CompactTextString(m) }
func (*ViewLog) ProtoMessage()               {}
func (*ViewLog) Descriptor() ([]byte, []int) { return fileDescriptorExec, []int{1} }

// ExecRequest is a common struct for enabling a webrtc connection do execute some work on a container.
type ExecRequest struct {
	// Target AppInst
	AppInstKey AppInstKey `protobuf:"bytes,1,opt,name=app_inst_key,json=appInstKey" json:"app_inst_key"`
	// ContainerId is the name or ID of the target container, if applicable
	ContainerId string `protobuf:"bytes,3,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// WebRTC Offer
	Offer string `protobuf:"bytes,4,opt,name=offer,proto3" json:"offer,omitempty"`
	// WebRTC Answer
	Answer string `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	// Any error message
	Err string `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
	// Command to run (one of)
	Cmd *RunCmd `protobuf:"bytes,7,opt,name=cmd" json:"cmd,omitempty"`
	// Show log (one of)
	Log *ViewLog `protobuf:"bytes,8,opt,name=log" json:"log,omitempty"`
	// Timeout
	Timeout Duration `protobuf:"varint,9,opt,name=timeout,proto3,casttype=Duration" json:"timeout,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptorExec, []int{2} }

func init() {
	proto.RegisterType((*RunCmd)(nil), "edgeproto.RunCmd")
	proto.RegisterType((*ViewLog)(nil), "edgeproto.ViewLog")
	proto.RegisterType((*ExecRequest)(nil), "edgeproto.ExecRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExecApi service

type ExecApiClient interface {
	// Run a Command or Shell on a container or VM
	RunCommand(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// View logs for AppInst
	ViewLogs(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
	// This is used internally to forward requests to other Controllers.
	SendLocalRequest(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error)
}

type execApiClient struct {
	cc *grpc.ClientConn
}

func NewExecApiClient(cc *grpc.ClientConn) ExecApiClient {
	return &execApiClient{cc}
}

func (c *execApiClient) RunCommand(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := grpc.Invoke(ctx, "/edgeproto.ExecApi/RunCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) ViewLogs(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := grpc.Invoke(ctx, "/edgeproto.ExecApi/ViewLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execApiClient) SendLocalRequest(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecRequest, error) {
	out := new(ExecRequest)
	err := grpc.Invoke(ctx, "/edgeproto.ExecApi/SendLocalRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExecApi service

type ExecApiServer interface {
	// Run a Command or Shell on a container or VM
	RunCommand(context.Context, *ExecRequest) (*ExecRequest, error)
	// View logs for AppInst
	ViewLogs(context.Context, *ExecRequest) (*ExecRequest, error)
	// This is used internally to forward requests to other Controllers.
	SendLocalRequest(context.Context, *ExecRequest) (*ExecRequest, error)
}

func RegisterExecApiServer(s *grpc.Server, srv ExecApiServer) {
	s.RegisterService(&_ExecApi_serviceDesc, srv)
}

func _ExecApi_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).RunCommand(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_ViewLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).ViewLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/ViewLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).ViewLogs(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecApi_SendLocalRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecApiServer).SendLocalRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.ExecApi/SendLocalRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecApiServer).SendLocalRequest(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ExecApi",
	HandlerType: (*ExecApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _ExecApi_RunCommand_Handler,
		},
		{
			MethodName: "ViewLogs",
			Handler:    _ExecApi_ViewLogs_Handler,
		},
		{
			MethodName: "SendLocalRequest",
			Handler:    _ExecApi_SendLocalRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec.proto",
}

func (m *RunCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if m.Console {
		dAtA[i] = 0x10
		i++
		if m.Console {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ConsoleUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.ConsoleUrl)))
		i += copy(dAtA[i:], m.ConsoleUrl)
	}
	return i, nil
}

func (m *ViewLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Since) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Since)))
		i += copy(dAtA[i:], m.Since)
	}
	if m.Tail != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Tail))
	}
	if m.Timestamps {
		dAtA[i] = 0x18
		i++
		if m.Timestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Follow {
		dAtA[i] = 0x20
		i++
		if m.Follow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExec(dAtA, i, uint64(m.AppInstKey.Size()))
	n1, err := m.AppInstKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if len(m.Offer) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Offer)))
		i += copy(dAtA[i:], m.Offer)
	}
	if len(m.Answer) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Answer)))
		i += copy(dAtA[i:], m.Answer)
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	if m.Cmd != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Cmd.Size()))
		n2, err := m.Cmd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Log != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Log.Size()))
		n3, err := m.Log.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Timeout))
	}
	return i, nil
}

func encodeVarintExec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RunCmd) CopyInFields(src *RunCmd) int {
	changed := 0
	if m.Command != src.Command {
		m.Command = src.Command
		changed++
	}
	if m.Console != src.Console {
		m.Console = src.Console
		changed++
	}
	if m.ConsoleUrl != src.ConsoleUrl {
		m.ConsoleUrl = src.ConsoleUrl
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *RunCmd) ValidateEnums() error {
	return nil
}

func IgnoreRunCmdFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ConsoleUrl")
	}
	return cmpopts.IgnoreFields(RunCmd{}, names...)
}

func (m *ViewLog) CopyInFields(src *ViewLog) int {
	changed := 0
	if m.Since != src.Since {
		m.Since = src.Since
		changed++
	}
	if m.Tail != src.Tail {
		m.Tail = src.Tail
		changed++
	}
	if m.Timestamps != src.Timestamps {
		m.Timestamps = src.Timestamps
		changed++
	}
	if m.Follow != src.Follow {
		m.Follow = src.Follow
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *ViewLog) ValidateEnums() error {
	return nil
}

func (m *ExecRequest) CopyInFields(src *ExecRequest) int {
	changed := 0
	if m.AppInstKey.AppKey.DeveloperKey.Name != src.AppInstKey.AppKey.DeveloperKey.Name {
		m.AppInstKey.AppKey.DeveloperKey.Name = src.AppInstKey.AppKey.DeveloperKey.Name
		changed++
	}
	if m.AppInstKey.AppKey.Name != src.AppInstKey.AppKey.Name {
		m.AppInstKey.AppKey.Name = src.AppInstKey.AppKey.Name
		changed++
	}
	if m.AppInstKey.AppKey.Version != src.AppInstKey.AppKey.Version {
		m.AppInstKey.AppKey.Version = src.AppInstKey.AppKey.Version
		changed++
	}
	if m.AppInstKey.ClusterInstKey.ClusterKey.Name != src.AppInstKey.ClusterInstKey.ClusterKey.Name {
		m.AppInstKey.ClusterInstKey.ClusterKey.Name = src.AppInstKey.ClusterInstKey.ClusterKey.Name
		changed++
	}
	if m.AppInstKey.ClusterInstKey.CloudletKey.OperatorKey.Name != src.AppInstKey.ClusterInstKey.CloudletKey.OperatorKey.Name {
		m.AppInstKey.ClusterInstKey.CloudletKey.OperatorKey.Name = src.AppInstKey.ClusterInstKey.CloudletKey.OperatorKey.Name
		changed++
	}
	if m.AppInstKey.ClusterInstKey.CloudletKey.Name != src.AppInstKey.ClusterInstKey.CloudletKey.Name {
		m.AppInstKey.ClusterInstKey.CloudletKey.Name = src.AppInstKey.ClusterInstKey.CloudletKey.Name
		changed++
	}
	if m.AppInstKey.ClusterInstKey.Developer != src.AppInstKey.ClusterInstKey.Developer {
		m.AppInstKey.ClusterInstKey.Developer = src.AppInstKey.ClusterInstKey.Developer
		changed++
	}
	if m.ContainerId != src.ContainerId {
		m.ContainerId = src.ContainerId
		changed++
	}
	if m.Offer != src.Offer {
		m.Offer = src.Offer
		changed++
	}
	if m.Answer != src.Answer {
		m.Answer = src.Answer
		changed++
	}
	if m.Err != src.Err {
		m.Err = src.Err
		changed++
	}
	if src.Cmd != nil {
		m.Cmd = &RunCmd{}
		if m.Cmd.Command != src.Cmd.Command {
			m.Cmd.Command = src.Cmd.Command
			changed++
		}
		if m.Cmd.Console != src.Cmd.Console {
			m.Cmd.Console = src.Cmd.Console
			changed++
		}
		if m.Cmd.ConsoleUrl != src.Cmd.ConsoleUrl {
			m.Cmd.ConsoleUrl = src.Cmd.ConsoleUrl
			changed++
		}
	} else if m.Cmd != nil {
		m.Cmd = nil
		changed++
	}
	if src.Log != nil {
		m.Log = &ViewLog{}
		if m.Log.Since != src.Log.Since {
			m.Log.Since = src.Log.Since
			changed++
		}
		if m.Log.Tail != src.Log.Tail {
			m.Log.Tail = src.Log.Tail
			changed++
		}
		if m.Log.Timestamps != src.Log.Timestamps {
			m.Log.Timestamps = src.Log.Timestamps
			changed++
		}
		if m.Log.Follow != src.Log.Follow {
			m.Log.Follow = src.Log.Follow
			changed++
		}
	} else if m.Log != nil {
		m.Log = nil
		changed++
	}
	if m.Timeout != src.Timeout {
		m.Timeout = src.Timeout
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *ExecRequest) ValidateEnums() error {
	if err := m.AppInstKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Cmd.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Log.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreExecRequestFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Offer")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Answer")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Cmd.ConsoleUrl")
	}
	return cmpopts.IgnoreFields(ExecRequest{}, names...)
}

func (m *RunCmd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Console {
		n += 2
	}
	l = len(m.ConsoleUrl)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *ViewLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Since)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Tail != 0 {
		n += 1 + sovExec(uint64(m.Tail))
	}
	if m.Timestamps {
		n += 2
	}
	if m.Follow {
		n += 2
	}
	return n
}

func (m *ExecRequest) Size() (n int) {
	var l int
	_ = l
	l = m.AppInstKey.Size()
	n += 1 + l + sovExec(uint64(l))
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Offer)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Cmd != nil {
		l = m.Cmd.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovExec(uint64(m.Timeout))
	}
	return n
}

func sovExec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExec(x uint64) (n int) {
	return sovExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Console", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Console = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsoleUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsoleUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			m.Tail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tail |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamps = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppInstKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cmd == nil {
				m.Cmd = &RunCmd{}
			}
			if err := m.Cmd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &ViewLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (Duration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("exec.proto", fileDescriptorExec) }

var fileDescriptorExec = []byte{
	// 762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6f, 0xd3, 0x48,
	0x14, 0xae, 0xd7, 0xcd, 0x8f, 0x4e, 0xba, 0xab, 0xee, 0xa8, 0x5b, 0xcd, 0x56, 0xab, 0xb4, 0x9b,
	0x02, 0xea, 0xc1, 0x24, 0x52, 0x7b, 0x41, 0x48, 0x11, 0x4a, 0xd2, 0x22, 0x55, 0x04, 0x2a, 0xb9,
	0xa5, 0xd7, 0x68, 0x6a, 0x4f, 0x8d, 0xd5, 0xf1, 0x8c, 0x3b, 0x63, 0xf7, 0xc7, 0xbf, 0xc1, 0x91,
	0x7f, 0x00, 0x2e, 0x1c, 0x80, 0x2b, 0x07, 0x8e, 0x11, 0x27, 0xce, 0x1c, 0x2a, 0xe8, 0xb1, 0xe7,
	0xe4, 0x00, 0x27, 0x34, 0x63, 0xc7, 0x09, 0x25, 0x45, 0xe9, 0x25, 0xf9, 0xde, 0x7b, 0xdf, 0xf3,
	0xf7, 0xf9, 0xcd, 0x3c, 0x03, 0x40, 0x4e, 0x89, 0x53, 0x0d, 0x05, 0x8f, 0x38, 0x9c, 0x21, 0xae,
	0x47, 0x34, 0x5c, 0xfc, 0xcf, 0xe3, 0xdc, 0xa3, 0xa4, 0x86, 0x43, 0xbf, 0x86, 0x19, 0xe3, 0x11,
	0x8e, 0x7c, 0xce, 0x64, 0x42, 0x5c, 0xbc, 0xe7, 0xf9, 0xd1, 0xb3, 0x78, 0xbf, 0xea, 0xf0, 0xa0,
	0x16, 0xf0, 0x7d, 0x9f, 0xaa, 0xc6, 0xd3, 0x9a, 0xfa, 0xbd, 0xeb, 0x50, 0x1e, 0xbb, 0x35, 0xcd,
	0xf3, 0x08, 0xcb, 0x40, 0xda, 0x39, 0xef, 0x71, 0x8f, 0x6b, 0x58, 0x53, 0x28, 0xcd, 0xfe, 0x85,
	0xc3, 0xb0, 0xe3, 0x33, 0x19, 0x25, 0x71, 0x85, 0x82, 0xbc, 0x1d, 0xb3, 0x56, 0xe0, 0x42, 0x04,
	0x0a, 0x0e, 0x0f, 0x02, 0xcc, 0x5c, 0x64, 0x2c, 0x1b, 0xab, 0x33, 0xf6, 0x20, 0x4c, 0x2a, 0x4c,
	0x72, 0x4a, 0xd0, 0x1f, 0xcb, 0xc6, 0x6a, 0xd1, 0x1e, 0x84, 0xb0, 0x0a, 0x4a, 0x29, 0xec, 0xc4,
	0x82, 0x22, 0x53, 0xf5, 0x35, 0xff, 0x7c, 0xd5, 0x43, 0xc6, 0xf3, 0xb7, 0xff, 0xe6, 0x18, 0x77,
	0x82, 0xd0, 0x06, 0x29, 0xe3, 0xa9, 0xa0, 0x95, 0x43, 0x50, 0xd8, 0xf3, 0xc9, 0x49, 0x9b, 0x7b,
	0x70, 0x1e, 0xe4, 0xa4, 0xcf, 0x1c, 0x92, 0x8a, 0x25, 0x01, 0x84, 0x60, 0x3a, 0xc2, 0x3e, 0xd5,
	0x3a, 0x39, 0x5b, 0x63, 0x58, 0x06, 0x20, 0xf2, 0x03, 0x22, 0x23, 0x1c, 0x84, 0x52, 0x6b, 0x14,
	0xed, 0x91, 0x0c, 0x5c, 0x00, 0xf9, 0x03, 0x4e, 0x29, 0x3f, 0x41, 0xd3, 0xba, 0x96, 0x46, 0x95,
	0xf7, 0x79, 0x50, 0xda, 0x3c, 0x25, 0x8e, 0x4d, 0x8e, 0x62, 0x22, 0x23, 0x58, 0x07, 0xb3, 0x83,
	0x97, 0xef, 0x1c, 0x92, 0x33, 0x2d, 0x5c, 0x5a, 0xfb, 0xa7, 0x9a, 0x1d, 0x45, 0xb5, 0x11, 0x86,
	0x5b, 0x4c, 0x46, 0x8f, 0xc8, 0x59, 0x73, 0xba, 0x7b, 0xbe, 0x34, 0x65, 0x03, 0x9c, 0x65, 0xe0,
	0xff, 0x60, 0xd6, 0xe1, 0x2c, 0xc2, 0x3e, 0x23, 0xa2, 0xe3, 0xbb, 0xc9, 0xcb, 0xda, 0xa5, 0x2c,
	0xb7, 0xe5, 0xc2, 0x15, 0x90, 0xe3, 0x07, 0x07, 0x44, 0x68, 0x23, 0xbf, 0x0c, 0x22, 0xa9, 0xc1,
	0xdb, 0x20, 0x8f, 0x99, 0x3c, 0x21, 0x02, 0xe5, 0xc6, 0xb1, 0xd2, 0x22, 0x9c, 0x03, 0x26, 0x11,
	0x02, 0xe5, 0xb5, 0x8a, 0x82, 0x70, 0x05, 0x98, 0x4e, 0xe0, 0xa2, 0x82, 0xb6, 0xfd, 0xf7, 0x88,
	0xed, 0xe4, 0x00, 0x6d, 0x55, 0x85, 0xb7, 0x80, 0x49, 0xb9, 0x87, 0x8a, 0x9a, 0x04, 0x47, 0x48,
	0xe9, 0xdc, 0x6d, 0x55, 0x86, 0x77, 0x40, 0x41, 0x0d, 0x90, 0xc7, 0x11, 0x9a, 0x59, 0x36, 0x56,
	0xcd, 0xe6, 0xec, 0xf7, 0xf3, 0xa5, 0xe2, 0x46, 0x2c, 0xf4, 0xdd, 0xb3, 0x07, 0xc5, 0xfb, 0xdf,
	0xcc, 0x0f, 0x3d, 0x64, 0x74, 0x95, 0xc1, 0x3e, 0x5a, 0xdf, 0x56, 0xfe, 0xad, 0x86, 0xf6, 0x67,
	0x6d, 0x0a, 0x61, 0xb5, 0x02, 0xb7, 0xda, 0xca, 0x4e, 0x77, 0x34, 0xb4, 0x76, 0x93, 0x27, 0xbc,
	0xe8, 0xa3, 0x97, 0x26, 0x0e, 0x43, 0x86, 0x03, 0x52, 0x1f, 0x8e, 0x57, 0x4d, 0x5a, 0xfd, 0x3d,
	0xc1, 0x01, 0xb1, 0x70, 0x18, 0x1e, 0x13, 0x21, 0xc7, 0x94, 0xf7, 0x88, 0x90, 0x3e, 0x67, 0x96,
	0x4b, 0x8e, 0x09, 0xe5, 0x21, 0x11, 0x63, 0x38, 0x1b, 0x83, 0x5a, 0xf6, 0x3c, 0x87, 0xc6, 0x32,
	0xfa, 0x99, 0xdb, 0x4a, 0x52, 0x57, 0xc2, 0xab, 0x1d, 0x63, 0x65, 0xae, 0xb4, 0x66, 0x72, 0x96,
	0xde, 0x3e, 0x4a, 0xa2, 0xdf, 0xea, 0x24, 0x94, 0x4c, 0x48, 0x35, 0xe2, 0x88, 0x8b, 0x09, 0x7b,
	0xb6, 0x53, 0xfa, 0xd0, 0x68, 0xb2, 0x91, 0xf5, 0x64, 0xd2, 0x1a, 0x5b, 0x7a, 0x71, 0xea, 0x6d,
	0xee, 0x55, 0x77, 0x14, 0xb2, 0xd4, 0xce, 0xe8, 0x70, 0x17, 0xfb, 0xd4, 0x1a, 0xee, 0x49, 0x92,
	0xcb, 0x42, 0x2b, 0xd9, 0x12, 0x9d, 0x7d, 0xa8, 0xe1, 0xc7, 0x3e, 0x02, 0x43, 0x5f, 0x6b, 0xef,
	0x4c, 0x50, 0x50, 0xeb, 0xd3, 0x08, 0x7d, 0xf8, 0xc6, 0x00, 0x40, 0xdd, 0xb2, 0xf4, 0x83, 0xb0,
	0x30, 0x72, 0xaf, 0x46, 0x36, 0x6c, 0xf1, 0x9a, 0x7c, 0x45, 0x5e, 0xf6, 0x50, 0xc3, 0x26, 0x92,
	0xc7, 0xc2, 0x21, 0xa9, 0x84, 0xb4, 0x1a, 0x8e, 0xba, 0x6c, 0x8f, 0x31, 0xc3, 0x1e, 0xb1, 0x26,
	0x38, 0xd8, 0xcf, 0x7d, 0x64, 0xb6, 0xb9, 0x77, 0xd9, 0x47, 0x2b, 0x13, 0x9c, 0x0f, 0x7c, 0x6d,
	0x80, 0x62, 0x7a, 0xe9, 0xe5, 0x8d, 0x1d, 0x1f, 0x5d, 0xf6, 0xd0, 0x83, 0x6b, 0x1c, 0xab, 0x87,
	0x4e, 0xea, 0xb7, 0x15, 0xb8, 0x93, 0xfa, 0xdd, 0x00, 0x73, 0x3b, 0x84, 0xb9, 0x6d, 0xee, 0x60,
	0x3a, 0xf8, 0x64, 0xdd, 0xd4, 0xf6, 0x54, 0x73, 0xae, 0xfb, 0xb5, 0x3c, 0xd5, 0xbd, 0x28, 0x1b,
	0x9f, 0x2e, 0xca, 0xc6, 0x97, 0x8b, 0xb2, 0xb1, 0x9f, 0xd7, 0xb4, 0xf5, 0x1f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf2, 0x8d, 0x10, 0xe9, 0x7f, 0x06, 0x00, 0x00,
}
