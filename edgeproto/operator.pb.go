// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operator.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OperatorKey uniquely identifies an Operator
type OperatorKey struct {
	// Company or Organization name of the operator
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *OperatorKey) Reset()                    { *m = OperatorKey{} }
func (m *OperatorKey) String() string            { return proto.CompactTextString(m) }
func (*OperatorKey) ProtoMessage()               {}
func (*OperatorKey) Descriptor() ([]byte, []int) { return fileDescriptorOperator, []int{0} }

// An Operator supplies compute resources.
// For example, telecommunications provider such as AT&T is an Operator
type Operator struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key OperatorKey `protobuf:"bytes,2,opt,name=key" json:"key"`
}

func (m *Operator) Reset()                    { *m = Operator{} }
func (m *Operator) String() string            { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()               {}
func (*Operator) Descriptor() ([]byte, []int) { return fileDescriptorOperator, []int{1} }

// OperatorCode maps a carrier code to an Operator name
type OperatorCode struct {
	// MCC plus MNC code, or custom carrier code designation.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// MobiledgeX operator name
	OperatorName string `protobuf:"bytes,2,opt,name=operator_name,json=operatorName,proto3" json:"operator_name,omitempty"`
}

func (m *OperatorCode) Reset()                    { *m = OperatorCode{} }
func (m *OperatorCode) String() string            { return proto.CompactTextString(m) }
func (*OperatorCode) ProtoMessage()               {}
func (*OperatorCode) Descriptor() ([]byte, []int) { return fileDescriptorOperator, []int{2} }

func init() {
	proto.RegisterType((*OperatorKey)(nil), "edgeproto.OperatorKey")
	proto.RegisterType((*Operator)(nil), "edgeproto.Operator")
	proto.RegisterType((*OperatorCode)(nil), "edgeproto.OperatorCode")
}
func (this *OperatorKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&edgeproto.OperatorKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOperator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OperatorApi service

type OperatorApiClient interface {
	// Create an Operator
	CreateOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error)
	// Delete an Operator
	DeleteOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error)
	// Update an Operator
	UpdateOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error)
	// Show Operators
	ShowOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (OperatorApi_ShowOperatorClient, error)
}

type operatorApiClient struct {
	cc *grpc.ClientConn
}

func NewOperatorApiClient(cc *grpc.ClientConn) OperatorApiClient {
	return &operatorApiClient{cc}
}

func (c *operatorApiClient) CreateOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OperatorApi/CreateOperator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorApiClient) DeleteOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OperatorApi/DeleteOperator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorApiClient) UpdateOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OperatorApi/UpdateOperator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorApiClient) ShowOperator(ctx context.Context, in *Operator, opts ...grpc.CallOption) (OperatorApi_ShowOperatorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OperatorApi_serviceDesc.Streams[0], c.cc, "/edgeproto.OperatorApi/ShowOperator", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorApiShowOperatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorApi_ShowOperatorClient interface {
	Recv() (*Operator, error)
	grpc.ClientStream
}

type operatorApiShowOperatorClient struct {
	grpc.ClientStream
}

func (x *operatorApiShowOperatorClient) Recv() (*Operator, error) {
	m := new(Operator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OperatorApi service

type OperatorApiServer interface {
	// Create an Operator
	CreateOperator(context.Context, *Operator) (*Result, error)
	// Delete an Operator
	DeleteOperator(context.Context, *Operator) (*Result, error)
	// Update an Operator
	UpdateOperator(context.Context, *Operator) (*Result, error)
	// Show Operators
	ShowOperator(*Operator, OperatorApi_ShowOperatorServer) error
}

func RegisterOperatorApiServer(s *grpc.Server, srv OperatorApiServer) {
	s.RegisterService(&_OperatorApi_serviceDesc, srv)
}

func _OperatorApi_CreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorApiServer).CreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OperatorApi/CreateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorApiServer).CreateOperator(ctx, req.(*Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorApi_DeleteOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorApiServer).DeleteOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OperatorApi/DeleteOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorApiServer).DeleteOperator(ctx, req.(*Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorApi_UpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorApiServer).UpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OperatorApi/UpdateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorApiServer).UpdateOperator(ctx, req.(*Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorApi_ShowOperator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Operator)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorApiServer).ShowOperator(m, &operatorApiShowOperatorServer{stream})
}

type OperatorApi_ShowOperatorServer interface {
	Send(*Operator) error
	grpc.ServerStream
}

type operatorApiShowOperatorServer struct {
	grpc.ServerStream
}

func (x *operatorApiShowOperatorServer) Send(m *Operator) error {
	return x.ServerStream.SendMsg(m)
}

var _OperatorApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.OperatorApi",
	HandlerType: (*OperatorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperator",
			Handler:    _OperatorApi_CreateOperator_Handler,
		},
		{
			MethodName: "DeleteOperator",
			Handler:    _OperatorApi_DeleteOperator_Handler,
		},
		{
			MethodName: "UpdateOperator",
			Handler:    _OperatorApi_UpdateOperator_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowOperator",
			Handler:       _OperatorApi_ShowOperator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "operator.proto",
}

// Client API for OperatorCodeApi service

type OperatorCodeApiClient interface {
	// Create a code for an Operator.
	CreateOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (*Result, error)
	// Delete a code for an Operator.
	DeleteOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (*Result, error)
	// Show OperatorCodes
	ShowOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (OperatorCodeApi_ShowOperatorCodeClient, error)
}

type operatorCodeApiClient struct {
	cc *grpc.ClientConn
}

func NewOperatorCodeApiClient(cc *grpc.ClientConn) OperatorCodeApiClient {
	return &operatorCodeApiClient{cc}
}

func (c *operatorCodeApiClient) CreateOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OperatorCodeApi/CreateOperatorCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorCodeApiClient) DeleteOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.OperatorCodeApi/DeleteOperatorCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorCodeApiClient) ShowOperatorCode(ctx context.Context, in *OperatorCode, opts ...grpc.CallOption) (OperatorCodeApi_ShowOperatorCodeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OperatorCodeApi_serviceDesc.Streams[0], c.cc, "/edgeproto.OperatorCodeApi/ShowOperatorCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorCodeApiShowOperatorCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorCodeApi_ShowOperatorCodeClient interface {
	Recv() (*OperatorCode, error)
	grpc.ClientStream
}

type operatorCodeApiShowOperatorCodeClient struct {
	grpc.ClientStream
}

func (x *operatorCodeApiShowOperatorCodeClient) Recv() (*OperatorCode, error) {
	m := new(OperatorCode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OperatorCodeApi service

type OperatorCodeApiServer interface {
	// Create a code for an Operator.
	CreateOperatorCode(context.Context, *OperatorCode) (*Result, error)
	// Delete a code for an Operator.
	DeleteOperatorCode(context.Context, *OperatorCode) (*Result, error)
	// Show OperatorCodes
	ShowOperatorCode(*OperatorCode, OperatorCodeApi_ShowOperatorCodeServer) error
}

func RegisterOperatorCodeApiServer(s *grpc.Server, srv OperatorCodeApiServer) {
	s.RegisterService(&_OperatorCodeApi_serviceDesc, srv)
}

func _OperatorCodeApi_CreateOperatorCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorCodeApiServer).CreateOperatorCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OperatorCodeApi/CreateOperatorCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorCodeApiServer).CreateOperatorCode(ctx, req.(*OperatorCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorCodeApi_DeleteOperatorCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorCodeApiServer).DeleteOperatorCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.OperatorCodeApi/DeleteOperatorCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorCodeApiServer).DeleteOperatorCode(ctx, req.(*OperatorCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorCodeApi_ShowOperatorCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperatorCode)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorCodeApiServer).ShowOperatorCode(m, &operatorCodeApiShowOperatorCodeServer{stream})
}

type OperatorCodeApi_ShowOperatorCodeServer interface {
	Send(*OperatorCode) error
	grpc.ServerStream
}

type operatorCodeApiShowOperatorCodeServer struct {
	grpc.ServerStream
}

func (x *operatorCodeApiShowOperatorCodeServer) Send(m *OperatorCode) error {
	return x.ServerStream.SendMsg(m)
}

var _OperatorCodeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.OperatorCodeApi",
	HandlerType: (*OperatorCodeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperatorCode",
			Handler:    _OperatorCodeApi_CreateOperatorCode_Handler,
		},
		{
			MethodName: "DeleteOperatorCode",
			Handler:    _OperatorCodeApi_DeleteOperatorCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowOperatorCode",
			Handler:       _OperatorCodeApi_ShowOperatorCode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "operator.proto",
}

func (m *OperatorKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperator(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperator(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *OperatorCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperator(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.OperatorName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperator(dAtA, i, uint64(len(m.OperatorName)))
		i += copy(dAtA[i:], m.OperatorName)
	}
	return i, nil
}

func encodeVarintOperator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperatorKey) Matches(o *OperatorKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	return true
}

func (m *OperatorKey) CopyInFields(src *OperatorKey) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

func (m *OperatorKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal OperatorKey key string", "obj", m)
	}
	return string(key)
}

func OperatorKeyStringParse(str string, key *OperatorKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal OperatorKey key string", "str", str)
	}
}

func (m *OperatorKey) NotFoundError() error {
	return fmt.Errorf("Operator key %s not found", m.GetKeyString())
}

func (m *OperatorKey) ExistsError() error {
	return fmt.Errorf("Operator key %s already exists", m.GetKeyString())
}

// Helper method to check that enums have valid values
func (m *OperatorKey) ValidateEnums() error {
	return nil
}

func (m *Operator) Matches(o *Operator, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	return true
}

const OperatorFieldKey = "2"
const OperatorFieldKeyName = "2.1"

var OperatorAllFields = []string{
	OperatorFieldKeyName,
}

var OperatorAllFieldsMap = map[string]struct{}{
	OperatorFieldKeyName: struct{}{},
}

var OperatorAllFieldsStringMap = map[string]string{
	OperatorFieldKeyName: "Operator Field Key Name",
}

func (m *Operator) IsKeyField(s string) bool {
	return strings.HasPrefix(s, OperatorFieldKey+".")
}

func (m *Operator) DiffFields(o *Operator, fields map[string]struct{}) {
	if m.Key.Name != o.Key.Name {
		fields[OperatorFieldKeyName] = struct{}{}
		fields[OperatorFieldKey] = struct{}{}
	}
}

func (m *Operator) CopyInFields(src *Operator) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	return changed
}

func (s *Operator) HasFields() bool {
	return true
}

type OperatorStore struct {
	kvstore objstore.KVStore
}

func NewOperatorStore(kvstore objstore.KVStore) OperatorStore {
	return OperatorStore{kvstore: kvstore}
}

func (s *OperatorStore) Create(ctx context.Context, m *Operator, wait func(int64)) (*Result, error) {
	err := m.Validate(OperatorAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Operator", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorStore) Update(ctx context.Context, m *Operator, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Operator", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Operator
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorStore) Put(ctx context.Context, m *Operator, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(OperatorAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Operator", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorStore) Delete(ctx context.Context, m *Operator, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("Operator", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorStore) LoadOne(key string) (*Operator, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj Operator
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse Operator data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *OperatorStore) STMGet(stm concurrency.STM, key *OperatorKey, buf *Operator) bool {
	keystr := objstore.DbKeyString("Operator", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *OperatorStore) STMPut(stm concurrency.STM, obj *Operator, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("Operator", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("Operator json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *OperatorStore) STMDel(stm concurrency.STM, key *OperatorKey) {
	keystr := objstore.DbKeyString("Operator", key)
	stm.Del(keystr)
}

type OperatorKeyWatcher struct {
	cb func(ctx context.Context)
}

// OperatorCache caches Operator objects in memory in a hash table
// and keeps them in sync with the database.
type OperatorCache struct {
	Objs        map[OperatorKey]*Operator
	Mux         util.Mutex
	List        map[OperatorKey]struct{}
	NotifyCb    func(ctx context.Context, obj *OperatorKey, old *Operator)
	UpdatedCb   func(ctx context.Context, old *Operator, new *Operator)
	KeyWatchers map[OperatorKey][]*OperatorKeyWatcher
}

func NewOperatorCache() *OperatorCache {
	cache := OperatorCache{}
	InitOperatorCache(&cache)
	return &cache
}

func InitOperatorCache(cache *OperatorCache) {
	cache.Objs = make(map[OperatorKey]*Operator)
	cache.KeyWatchers = make(map[OperatorKey][]*OperatorKeyWatcher)
}

func (c *OperatorCache) GetTypeString() string {
	return "Operator"
}

func (c *OperatorCache) Get(key *OperatorKey, valbuf *Operator) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *OperatorCache) HasKey(key *OperatorKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *OperatorCache) GetAllKeys(ctx context.Context, keys map[OperatorKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *OperatorCache) Update(ctx context.Context, in *Operator, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *Operator) (*Operator, bool) {
		return in, true
	})
}

func (c *OperatorCache) UpdateModFunc(ctx context.Context, key *OperatorKey, rev int64, modFunc func(old *Operator) (new *Operator, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &Operator{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate Operator", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *OperatorCache) Delete(ctx context.Context, in *Operator, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete Operator", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *OperatorCache) Prune(ctx context.Context, validKeys map[OperatorKey]struct{}) {
	notify := make(map[OperatorKey]*Operator)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *OperatorCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *OperatorCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *OperatorCache) Show(filter *Operator, cb func(ret *Operator) error) error {
	log.DebugLog(log.DebugLevelApi, "Show Operator", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare Operator", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show Operator", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func OperatorGenericNotifyCb(fn func(key *OperatorKey, old *Operator)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*OperatorKey), obj.(*Operator))
	}
}

func (c *OperatorCache) SetNotifyCb(fn func(ctx context.Context, obj *OperatorKey, old *Operator)) {
	c.NotifyCb = fn
}

func (c *OperatorCache) SetUpdatedCb(fn func(ctx context.Context, old *Operator, new *Operator)) {
	c.UpdatedCb = fn
}

func (c *OperatorCache) WatchKey(key *OperatorKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*OperatorKeyWatcher, 0)
	}
	watcher := OperatorKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching Operator", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *OperatorCache) TriggerKeyWatchers(ctx context.Context, key *OperatorKey) {
	watchers := make([]*OperatorKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *OperatorCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := Operator{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse Operator data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *OperatorCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := Operator{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	OperatorKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, rev)
}

func (c *OperatorCache) SyncListStart(ctx context.Context) {
	c.List = make(map[OperatorKey]struct{})
}

func (c *OperatorCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[OperatorKey]*Operator)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *Operator) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *Operator) GetKey() *OperatorKey {
	return &m.Key
}

func (m *Operator) GetKeyVal() OperatorKey {
	return m.Key
}

func (m *Operator) SetKey(key *OperatorKey) {
	m.Key = *key
}

func CmpSortOperator(a Operator, b Operator) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *Operator) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *OperatorCode) Matches(o *OperatorCode, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Code != "" {
		if o.Code != m.Code {
			return false
		}
	}
	if !opts.Filter || o.OperatorName != "" {
		if o.OperatorName != m.OperatorName {
			return false
		}
	}
	return true
}

func (m *OperatorCode) CopyInFields(src *OperatorCode) int {
	changed := 0
	if m.Code != src.Code {
		m.Code = src.Code
		changed++
	}
	if m.OperatorName != src.OperatorName {
		m.OperatorName = src.OperatorName
		changed++
	}
	return changed
}

func (s *OperatorCode) HasFields() bool {
	return false
}

type OperatorCodeStore struct {
	kvstore objstore.KVStore
}

func NewOperatorCodeStore(kvstore objstore.KVStore) OperatorCodeStore {
	return OperatorCodeStore{kvstore: kvstore}
}

func (s *OperatorCodeStore) Create(ctx context.Context, m *OperatorCode, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("OperatorCode", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorCodeStore) Update(ctx context.Context, m *OperatorCode, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("OperatorCode", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorCodeStore) Put(ctx context.Context, m *OperatorCode, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("OperatorCode", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorCodeStore) Delete(ctx context.Context, m *OperatorCode, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("OperatorCode", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *OperatorCodeStore) LoadOne(key string) (*OperatorCode, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj OperatorCode
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse OperatorCode data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *OperatorCodeStore) STMGet(stm concurrency.STM, key *OperatorCodeKey, buf *OperatorCode) bool {
	keystr := objstore.DbKeyString("OperatorCode", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *OperatorCodeStore) STMPut(stm concurrency.STM, obj *OperatorCode, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("OperatorCode", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("OperatorCode json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *OperatorCodeStore) STMDel(stm concurrency.STM, key *OperatorCodeKey) {
	keystr := objstore.DbKeyString("OperatorCode", key)
	stm.Del(keystr)
}

type OperatorCodeKeyWatcher struct {
	cb func(ctx context.Context)
}

// OperatorCodeCache caches OperatorCode objects in memory in a hash table
// and keeps them in sync with the database.
type OperatorCodeCache struct {
	Objs        map[OperatorCodeKey]*OperatorCode
	Mux         util.Mutex
	List        map[OperatorCodeKey]struct{}
	NotifyCb    func(ctx context.Context, obj *OperatorCodeKey, old *OperatorCode)
	UpdatedCb   func(ctx context.Context, old *OperatorCode, new *OperatorCode)
	KeyWatchers map[OperatorCodeKey][]*OperatorCodeKeyWatcher
}

func NewOperatorCodeCache() *OperatorCodeCache {
	cache := OperatorCodeCache{}
	InitOperatorCodeCache(&cache)
	return &cache
}

func InitOperatorCodeCache(cache *OperatorCodeCache) {
	cache.Objs = make(map[OperatorCodeKey]*OperatorCode)
	cache.KeyWatchers = make(map[OperatorCodeKey][]*OperatorCodeKeyWatcher)
}

func (c *OperatorCodeCache) GetTypeString() string {
	return "OperatorCode"
}

func (c *OperatorCodeCache) Get(key *OperatorCodeKey, valbuf *OperatorCode) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *OperatorCodeCache) HasKey(key *OperatorCodeKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *OperatorCodeCache) GetAllKeys(ctx context.Context, keys map[OperatorCodeKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *OperatorCodeCache) Update(ctx context.Context, in *OperatorCode, rev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), rev, func(old *OperatorCode) (*OperatorCode, bool) {
		return in, true
	})
}

func (c *OperatorCodeCache) UpdateModFunc(ctx context.Context, key *OperatorCodeKey, rev int64, modFunc func(old *OperatorCode) (new *OperatorCode, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &OperatorCode{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.GetKey(), old)
		}
	}
	c.Objs[new.GetKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate OperatorCode", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *OperatorCodeCache) Delete(ctx context.Context, in *OperatorCode, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.GetKeyVal()]
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete OperatorCode", "key", in.GetKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *OperatorCodeCache) Prune(ctx context.Context, validKeys map[OperatorCodeKey]struct{}) {
	notify := make(map[OperatorCodeKey]*OperatorCode)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *OperatorCodeCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *OperatorCodeCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *OperatorCodeCache) Show(filter *OperatorCode, cb func(ret *OperatorCode) error) error {
	log.DebugLog(log.DebugLevelApi, "Show OperatorCode", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare OperatorCode", "filter", filter, "obj", obj)
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show OperatorCode", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func OperatorCodeGenericNotifyCb(fn func(key *OperatorCodeKey, old *OperatorCode)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*OperatorCodeKey), obj.(*OperatorCode))
	}
}

func (c *OperatorCodeCache) SetNotifyCb(fn func(ctx context.Context, obj *OperatorCodeKey, old *OperatorCode)) {
	c.NotifyCb = fn
}

func (c *OperatorCodeCache) SetUpdatedCb(fn func(ctx context.Context, old *OperatorCode, new *OperatorCode)) {
	c.UpdatedCb = fn
}

func (c *OperatorCodeCache) WatchKey(key *OperatorCodeKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*OperatorCodeKeyWatcher, 0)
	}
	watcher := OperatorCodeKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching OperatorCode", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *OperatorCodeCache) TriggerKeyWatchers(ctx context.Context, key *OperatorCodeKey) {
	watchers := make([]*OperatorCodeKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *OperatorCodeCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := OperatorCode{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse OperatorCode data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *OperatorCodeCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := OperatorCode{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	OperatorCodeKeyStringParse(keystr, &obj)
	c.Delete(ctx, &obj, rev)
}

func (c *OperatorCodeCache) SyncListStart(ctx context.Context) {
	c.List = make(map[OperatorCodeKey]struct{})
}

func (c *OperatorCodeCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[OperatorCodeKey]*OperatorCode)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

// Helper method to check that enums have valid values
func (m *OperatorCode) ValidateEnums() error {
	return nil
}

func (m *OperatorKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	return n
}

func (m *Operator) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovOperator(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovOperator(uint64(l))
	return n
}

func (m *OperatorCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	l = len(m.OperatorName)
	if l > 0 {
		n += 1 + l + sovOperator(uint64(l))
	}
	return n
}

func sovOperator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperator(x uint64) (n int) {
	return sovOperator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("operator.proto", fileDescriptorOperator) }

var fileDescriptorOperator = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x25, 0x55, 0x45, 0xae, 0x69, 0x08, 0x6e, 0x69, 0xaf, 0x01, 0xa5, 0xa9, 0xbb, 0x44,
	0x50, 0xec, 0x2a, 0x2c, 0x28, 0x12, 0x43, 0x13, 0xc4, 0x12, 0xf1, 0x43, 0x41, 0x65, 0x45, 0x8e,
	0xfd, 0x70, 0x2c, 0x1c, 0xbf, 0xc8, 0x3f, 0x14, 0xb2, 0x21, 0x26, 0xc4, 0x84, 0xc4, 0x82, 0x98,
	0xf8, 0x13, 0x3a, 0xf0, 0x47, 0x64, 0x44, 0x62, 0x47, 0x10, 0x31, 0x40, 0x27, 0x44, 0x12, 0x89,
	0x11, 0xdd, 0xc5, 0x0e, 0x4e, 0x14, 0xb2, 0x54, 0x5d, 0xac, 0x77, 0xef, 0xde, 0xfb, 0xbe, 0xef,
	0xbd, 0xcf, 0x47, 0xb3, 0xd8, 0x01, 0x57, 0xf3, 0xd1, 0x55, 0x3a, 0x2e, 0xfa, 0x28, 0xa5, 0xc1,
	0x30, 0x41, 0x84, 0xf9, 0xab, 0x26, 0xa2, 0x69, 0x83, 0xaa, 0x75, 0x2c, 0x55, 0x73, 0x1c, 0xf4,
	0x35, 0xdf, 0x42, 0xc7, 0x9b, 0x14, 0xe6, 0x6f, 0x99, 0x96, 0xdf, 0x0a, 0x9a, 0x8a, 0x8e, 0x6d,
	0xb5, 0x8d, 0x4d, 0xcb, 0xe6, 0x8d, 0xcf, 0x55, 0xfe, 0xbd, 0xa1, 0xdb, 0x18, 0x18, 0xaa, 0xa8,
	0x33, 0xc1, 0x99, 0x06, 0x61, 0x67, 0xc6, 0x05, 0x2f, 0xb0, 0xfd, 0xf0, 0xb4, 0x69, 0xa2, 0x89,
	0x22, 0x54, 0x79, 0x34, 0xc9, 0xca, 0x2a, 0x5d, 0x7b, 0x10, 0x0a, 0xab, 0x43, 0x4f, 0x92, 0xe8,
	0x8a, 0xa3, 0xb5, 0x81, 0x91, 0x22, 0x29, 0xa5, 0x1b, 0x22, 0xae, 0x64, 0x7e, 0x0c, 0x19, 0xf9,
	0x33, 0x64, 0xe4, 0xe4, 0xc3, 0x2e, 0x91, 0x03, 0x7a, 0x21, 0x6a, 0x90, 0xb6, 0xe8, 0xea, 0x53,
	0x0b, 0x6c, 0xc3, 0x63, 0xa4, 0x98, 0x2a, 0xa5, 0x1b, 0xe1, 0x49, 0x52, 0x68, 0xea, 0x19, 0xf4,
	0x58, 0xb2, 0x48, 0x4a, 0x6b, 0xe5, 0x2d, 0x65, 0x3a, 0xa9, 0x12, 0xa3, 0xaa, 0xae, 0xf4, 0xbf,
	0xec, 0x26, 0x1a, 0xbc, 0xb0, 0xb2, 0xc7, 0x19, 0x7e, 0x0d, 0x19, 0x79, 0x31, 0x62, 0xe4, 0xdd,
	0x88, 0x91, 0xf7, 0x63, 0xb6, 0xce, 0xb9, 0x6f, 0xd7, 0xa1, 0xa7, 0xdc, 0xd7, 0xda, 0x20, 0xfb,
	0x34, 0x13, 0x35, 0xd7, 0xd0, 0x00, 0x2e, 0x54, 0x47, 0x63, 0x2a, 0x94, 0xc7, 0xd2, 0x3e, 0x5d,
	0x8f, 0x96, 0xfc, 0x44, 0x4c, 0x91, 0x14, 0x97, 0x99, 0x28, 0xc9, 0x81, 0x2a, 0xd7, 0xe3, 0x5c,
	0x6f, 0x42, 0xbe, 0x93, 0x31, 0x4b, 0xfc, 0x1e, 0xb3, 0x8b, 0x71, 0x8a, 0x3a, 0xf4, 0xca, 0x3f,
	0x93, 0xff, 0xd6, 0x73, 0xd4, 0xb1, 0xa4, 0x63, 0x9a, 0xad, 0xb9, 0xa0, 0xf9, 0x30, 0x5d, 0xc1,
	0xc6, 0x82, 0xe9, 0xf2, 0x97, 0x62, 0xc9, 0x86, 0xf0, 0x40, 0xbe, 0xf2, 0xf2, 0xf3, 0xf7, 0xb7,
	0xc9, 0xcb, 0x72, 0x4e, 0xd5, 0x05, 0x80, 0x1a, 0x89, 0xaa, 0x90, 0x6b, 0x1c, 0xf6, 0x0e, 0xd8,
	0x70, 0x26, 0x58, 0x43, 0x00, 0xcc, 0xc3, 0x1e, 0x77, 0x8c, 0xb3, 0xa9, 0x0d, 0x04, 0xc0, 0x1c,
	0x6c, 0xe6, 0x51, 0x0b, 0xbb, 0xcb, 0x41, 0x17, 0x25, 0xe5, 0x1d, 0x01, 0xbb, 0x21, 0x67, 0x55,
	0xaf, 0x85, 0xdd, 0x38, 0xe8, 0x21, 0x29, 0x7f, 0x4c, 0xd1, 0x99, 0xfd, 0xf3, 0x7d, 0xbf, 0x22,
	0x54, 0x9a, 0x5d, 0xb8, 0x30, 0x7f, 0x7b, 0x01, 0x38, 0xbf, 0x58, 0x34, 0xca, 0xdd, 0xd3, 0x11,
	0xdb, 0x6f, 0x80, 0x87, 0x81, 0xab, 0x43, 0x8d, 0xbf, 0x17, 0x1b, 0xfc, 0x87, 0x88, 0xb6, 0x77,
	0x70, 0xa4, 0xf3, 0x77, 0x76, 0x4f, 0x73, 0x34, 0x13, 0x0e, 0x84, 0xb4, 0x1d, 0x79, 0x73, 0xde,
	0x1f, 0xfe, 0x67, 0xf1, 0xa9, 0xb9, 0x94, 0x59, 0x93, 0xce, 0x5f, 0xca, 0x9c, 0xa7, 0x91, 0x94,
	0xd7, 0x84, 0xe6, 0xe2, 0x0e, 0x2c, 0x17, 0xf2, 0xbf, 0x0b, 0xb9, 0x7a, 0x3a, 0x62, 0x7b, 0xcb,
	0xe4, 0x3c, 0xb6, 0xa0, 0x3b, 0x11, 0xb3, 0x2d, 0x4b, 0xb3, 0x96, 0x85, 0x52, 0x0e, 0x49, 0x35,
	0xd7, 0xff, 0x56, 0x48, 0xf4, 0x07, 0x05, 0xf2, 0x69, 0x50, 0x20, 0x5f, 0x07, 0x05, 0xd2, 0x5c,
	0x15, 0x5c, 0x37, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x22, 0xb8, 0x9d, 0xa2, 0xf2, 0x04, 0x00,
	0x00,
}
