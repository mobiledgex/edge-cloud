// Application instance on a Cloudlet

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "app.proto";
import "flavor.proto";
import "clusterinst.proto";
import "common.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/appcommon.proto";
import "gogoproto/gogo.proto";

// App Instance Unique Key
//
// AppInstKey uniquely identifies an Application Instance (AppInst) or Application Instance state (AppInstInfo).
message AppInstKey {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false];
  // Cluster instance on which this is instantiated
  ClusterInstKey cluster_inst_key = 4 [(gogoproto.nullable) = false, (protogen.backend) = true];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Health check status
//
// Health check status gets set by external, or rootLB health check
enum HealthCheck {
  // Health Check is ok
  HEALTH_CHECK_OK = 0;
  // Health Check failure due to RootLB being offline
  HEALTH_CHECK_FAIL_ROOTLB_OFFLINE = 1;
  // Health Check failure due to Backend server being unavailable
  HEALTH_CHECK_FAIL_SERVER_FAIL = 2;
}

// Application Instance
//
// AppInst is an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. 
// Many of the fields here are inherited from the App definition. 
message AppInst {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // required: true
  // Unique identifier key
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // Cached location of the cloudlet
  distributed_match_engine.Loc cloudlet_loc = 3 [(gogoproto.nullable) = false];
  // Base FQDN (not really URI) for the App. See Service FQDN for endpoint access.
  string uri = 4 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Liveness of instance (see Liveness)
  Liveness liveness = 6 [(protogen.backend) = true];
  // For instances accessible via a shared load balancer, defines the external
  // ports on the shared load balancer that map to the internal ports
  // External ports should be appended to the Uri for L4 access.
  repeated distributed_match_engine.AppPort mapped_ports = 9 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Flavor defining resource requirements
  FlavorKey flavor = 12 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Current state of the AppInst on the Cloudlet
  TrackedState state = 14 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Any errors trying to create, update, or delete the AppInst on the Cloudlet
  repeated string errors = 15 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Override actions to CRM
  CRMOverride crm_override = 16 [(protogen.hidetag) = "nocmp"];
  // AppInst runtime information
  AppInstRuntime runtime_info = 17 [(gogoproto.nullable) = false];
  // Created at time
  distributed_match_engine.Timestamp created_at = 21 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // IpAccess for auto-clusters. Ignored otherwise.
  IpAccess auto_cluster_ip_access = 22 [(protogen.backend) = true];
  // status is used to reflect progress of creation or other events
  StatusInfo status = 23 [(protogen.backend) = true, (gogoproto.nullable) = false];
  // Revision increments each time the App is updated.  Updating the App Instance will sync the revision with that of the App
  int32 revision = 24;
  // Force Appinst refresh even if revision number matches App revision number.
  bool force_update = 25 [(protogen.hidetag) = "nocmp"];
  // Allow multiple instances to be updated at once
  bool update_multiple = 26 [(protogen.hidetag) = "nocmp"];
  // Customization files passed through to implementing services
  repeated ConfigFile configs = 27;
  // shared volume size when creating auto cluster
  uint64 shared_volume_size = 28;
  // Health Check status
  HealthCheck health_check = 29;  
  // Optional privacy policy name
  string privacy_policy = 30;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_wait_for_state) = "TrackedState";
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_filter_cloudlet_key) = true;
  option (protogen.noconfig) = "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Status,Revision,Errors,RuntimeInfo";
  option (protogen.alias) = "appname=Key.AppKey.Name,appvers=Key.AppKey.Version,developer=Key.AppKey.DeveloperKey.Name,cluster=Key.ClusterInstKey.ClusterKey.Name,clusterdeveloper=Key.ClusterInstKey.Developer,cloudlet=Key.ClusterInstKey.CloudletKey.Name,operator=Key.ClusterInstKey.CloudletKey.OperatorKey.Name,flavor=Flavor.Name";
  option (protogen.not_required) = "Key.ClusterInstKey.Developer";
  option (protogen.mc2_target_cloudlet) = "Key.ClusterInstKey.CloudletKey";
}

// AppInst Runtime Info
//
// Runtime information of active AppInsts
message AppInstRuntime {
  // List of container names
  repeated string container_ids = 1 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
}

service AppInstApi {
  // Create Application Instance. Creates an instance of an App on a Cloudlet where it is
  // defined by an App plus a ClusterInst key. Many of the fields here are inherited from
  // the App definition.
  rpc CreateAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.AppKey.DeveloperKey.Name";
    option (protogen.mc2_custom_authz) = true;
    // add in UpdateMultiple for noconfig
    option (protogen.method_noconfig) = "CloudletLoc,Uri,MappedPorts,Liveness,CreatedAt,Status,Revision,Errors,RuntimeInfo,UpdateMultiple,ForceUpdate";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Delete Application Instance. Deletes an instance of the App from the Cloudlet.
  rpc DeleteAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.AppKey.DeveloperKey.Name";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Refresh Application Instance. Restarts an App instance with new App settings or image.
  rpc RefreshAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/refresh/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.AppKey.DeveloperKey.Name";
    option (protogen.method_not_required) = "Key.ClusterInstKey";
    option (protogen.method_noconfig) = "CloudletLoc,Uri,MappedPorts,Liveness,Flavor,State,RuntimeInfo,AutoClusterIpAccess,Errors,CreatedAt,Status,Revision,Configs";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Update Application Instance. Updates an Application instance and then refreshes it.
  rpc UpdateAppInst(AppInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/appinst"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceAppInsts,ActionManage,Key.AppKey.DeveloperKey.Name";
    option (protogen.method_noconfig) = "CloudletLoc,Uri,MappedPorts,Liveness,Flavor,State,RuntimeInfo,AutoClusterIpAccess,Errors,CreatedAt,Status,Revision,UpdateMultiple,ForceUpdate";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Show Application Instances. Lists all the Application instances managed by the Edge Controller.
  // Any fields specified will be used to filter results.
  rpc ShowAppInst(AppInst) returns (stream AppInst) {
    option (google.api.http) = {
      post: "/show/appinst"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceAppInsts,ActionView,Key.AppKey.DeveloperKey.Name";
  }
}

// AppInstInfo provides information from the Cloudlet Resource Manager about the state of the AppInst on the Cloudlet. Whereas the AppInst defines the intent of instantiating an App on a Cloudlet, the AppInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
message AppInstInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 3 [(protogen.hidetag) = "nocmp"];
  // Current state of the AppInst on the Cloudlet
  TrackedState state = 4;
  // Any errors trying to create, update, or delete the AppInst on the Cloudlet
  repeated string errors = 5;
  // AppInst runtime information
  AppInstRuntime runtime_info = 6 [(gogoproto.nullable) = false];
// status is used to reflect progress of creation or other events
  StatusInfo status = 7 [(protogen.backend) = true, (gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
}

service AppInstInfoApi {
  // Show application instances state.
  rpc ShowAppInstInfo(AppInstInfo) returns (stream AppInstInfo) {
    option (google.api.http) = {
      post: "/show/appinstinfo"
      body: "*"
    };
  }
}

// (TODO) AppInstMetrics provide metrics collected about the application instance on the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
message AppInstMetrics {
  // what goes here?
  // Note that metrics for grpc calls can be done by a prometheus
  // interceptor in grpc, so adding call metrics here may be
  // redundant unless they're needed for billing.
  uint64 something = 5;
}

service AppInstMetricsApi {
  // Show application instance metrics.
  rpc ShowAppInstMetrics(AppInstMetrics) returns (stream AppInstMetrics) {
    option (google.api.http) = {
      post: "/show/appinstmetrics"
      body: "*"
    };
  }
}
