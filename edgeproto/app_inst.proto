// Application instance on a Cloudlet

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "app.proto";
import "cloudlet.proto";
import "flavor.proto";
import "clusterinst.proto";
import "common.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message AppInstKey {
  // App key
  AppKey app_key = 1 [(gogoproto.nullable) = false];
  // Cloudlet it's on
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false];
  // inst id
  fixed64 id = 3;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// AppInsts are instances of an application instantiated
// on a cloudlet, like a docker or VM instance.
message AppInst {
  repeated string fields = 1;
  // Unique identifier key
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // Cache the location of the cloudlet
  distributed_match_engine.Loc cloudlet_loc = 3 [(gogoproto.nullable) = false];
  // URI to connect to this instance
  string uri = 4 [(protogen.backend) = true];
  // cluster instance on which this is instatiated
  ClusterInstKey cluster_inst_key = 5 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // type of instance
  Liveness liveness = 6 [(protogen.backend) = true];
  // cache data from app
  // image path
  string image_path = 7 [(protogen.backend) = true];
  // image type
  ImageType image_type = 8 [(protogen.backend) = true];
  // mapped ports that are publicly accessible; correspond to
  // ports on App. Only valid for L4 access types.
  string mapped_ports = 9 [(protogen.backend) = true];
  // mapped path to append to hostname for public access.
  // Only valid for L7 access types.
  string mapped_path = 10 [(protogen.backend) = true];
  // initial config passed to docker
  string config_map = 11 [(protogen.backend) = true];
  // flavor defining resource requirements
  FlavorKey flavor = 12 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Access layer(s)
  AccessLayer access_layer = 13;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protocmd.noconfig) = "CloudletLoc,ImagePath,ImageType,MappedPorts,MappedPath,ConfigMap,Flavor,Uri,Liveness,ClusterInstKey.CloudletKey";
}

// This API is for manual configuration of static app instances.
// The long term goal is that most app instance creation/deletion
// will be dynamic based on load.
service AppInstApi {
  rpc CreateAppInst(AppInst) returns (Result) {
    option (google.api.http) = {
      post: "/create/appinst"
      body: "*"
    };
  }
  rpc DeleteAppInst(AppInst) returns (Result) {
   option (google.api.http) = {
      post: "/delete/appinst"
      body: "*"
    };
  }
  rpc UpdateAppInst(AppInst) returns (Result) {
   option (google.api.http) = {
      post: "/update/appinst"
      body: "*"
    };
  }
  rpc ShowAppInst(AppInst) returns (stream AppInst) {
   option (google.api.http) = {
      post: "/show/appinst"
      body: "*"
    };
  }
}

enum AppState {
  AppStateUnknown = 0;
  AppStateBuilding = 1;
  AppStateReady = 2;
  AppStateErrors = 3;
  AppStateDeleting = 4;
  AppStateDeleted = 5;
}

// AppInstInfo contains static data collected by the CRM to be sent
// to the connected controller. It is put into etcd or equivalent.
message AppInstInfo {
  repeated string fields = 1;
  // Unique identifier key
  AppInstKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server
  int64 notify_id = 3;
  // state
  AppState state = 4;
  // errors
  repeated string errors = 5;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
}

service AppInstInfoApi {
  rpc ShowAppInstInfo(AppInstInfo) returns (stream AppInstInfo) {
    option (google.api.http) = {
      post: "/show/appinstinfo"
      body: "*"
    };
  }
}

// AppInstMetrics are metrics produced by the DME to pass up to
// an analytics or storage node (not the controller). These are not
// stored in etcd, but probably logged as time series to disk (TBD)
message AppInstMetrics {
  // what goes here?
  // Note that metrics for grpc calls can be done by a prometheus
  // interceptor in grpc, so adding call metrics here may be
  // redundant unless they're needed for billing.
  uint64 something = 5;
}

service AppInstMetricsApi {
  rpc ShowAppInstMetrics(AppInstMetrics) returns (stream AppInstMetrics) {
    option (google.api.http) = {
      post: "/show/appinstmetrics"
      body: "*"
    };
  }
}
