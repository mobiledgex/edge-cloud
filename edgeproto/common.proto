// common definitions

syntax = "proto3";
package edgeproto;

import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Liveness Options
//
// Liveness indicates if an object was created statically via an external API call, or dynamically via an internal algorithm.
//
// 0: `LIVENESS_UNKNOWN`
// 1: `LIVENESS_STATIC`
// 2: `LIVENESS_DYNAMIC`
// 3: `LIVENESS_AUTOPROV`
enum Liveness {
  // Unknown liveness
  LIVENESS_UNKNOWN = 0;
  // Object managed by external entity
  LIVENESS_STATIC = 1;
  // Object managed internally
  LIVENESS_DYNAMIC = 2;
  // Object created by Auto Provisioning, treated like Static except when deleting App
  LIVENESS_AUTOPROV = 3;
}

// Type of public IP support
//
// Static IP support indicates a set of static public IPs are available for use, and managed by the Controller. Dynamic indicates the Cloudlet uses a DHCP server to provide public IP addresses, and the controller has no control over which IPs are assigned.
//
// 0: `IP_SUPPORT_UNKNOWN`
// 1: `IP_SUPPORT_STATIC`
// 2: `IP_SUPPORT_DYNAMIC`
enum IpSupport {
  // Unknown IP support
  IP_SUPPORT_UNKNOWN = 0;
  // Static IP addresses are provided to and managed by Controller
  IP_SUPPORT_STATIC = 1;
  // IP addresses are dynamically provided by an Operator's DHCP server
  IP_SUPPORT_DYNAMIC = 2;
}

// IpAccess Options
//
// IpAccess indicates the type of RootLB that Developer requires for their App
//
// 0: `IP_ACCESS_UNKNOWN`
// 1: `IP_ACCESS_DEDICATED`
// 3: `IP_ACCESS_SHARED`
enum IpAccess {
  // Unknown IP access
  IP_ACCESS_UNKNOWN = 0;
  // Dedicated RootLB
  IP_ACCESS_DEDICATED = 1;
  // Shared RootLB
  IP_ACCESS_SHARED = 3;
}

// Tracked States
//
// TrackedState is used to track the state of an object on a remote node,
// i.e. track the state of a ClusterInst object on the CRM (Cloudlet).
//
// 0: `TRACKED_STATE_UNKNOWN`
// 1: `NOT_PRESENT`
// 2: `CREATE_REQUESTED`
// 3: `CREATING`
// 4: `CREATE_ERROR`
// 5: `READY`
// 6: `UPDATE_REQUESTED`
// 7: `UPDATING`
// 8: `UPDATE_ERROR`
// 9: `DELETE_REQUESTED`
// 10: `DELETING`
// 11: `DELETE_ERROR`
// 12: `DELETE_PREPARE`
// 13: `CRM_INITOK`
// 14: `CREATING_DEPENDENCIES`
// 15: `DELETE_DONE`
enum TrackedState {
  // Unknown state
  TRACKED_STATE_UNKNOWN = 0;
  // Not present (does not exist)
  NOT_PRESENT = 1;
  // Create requested
  CREATE_REQUESTED = 2;
  // Creating
  CREATING = 3;
  // Create error
  CREATE_ERROR = 4;
  // Ready
  READY = 5;
  // Update requested
  UPDATE_REQUESTED = 6;
  // Updating
  UPDATING = 7;
  // Update error
  UPDATE_ERROR = 8;
  // Delete requested
  DELETE_REQUESTED = 9;
  // Deleting
  DELETING = 10;
  // Delete error
  DELETE_ERROR = 11;
  // Delete prepare (extra state used by controller to block other changes)
  DELETE_PREPARE = 12;
  // CRM INIT OK
  CRM_INITOK = 13;
  // Creating dependencies (state used to tracked dependent object change progress)
  CREATING_DEPENDENCIES = 14;
  // Delete Done
  DELETE_DONE = 15;
}

// Overrides default CRM behaviour
//
// CRMOverride can be applied to commands that issue requests to the CRM.
// It should only be used by administrators when bugs have caused the
// Controller and CRM to get out of sync. It allows commands from the
// Controller to ignore errors from the CRM, or ignore the CRM completely
// (messages will not be sent to CRM).
//
// 0: `NO_OVERRIDE`
// 1: `IGNORE_CRM_ERRORS`
// 2: `IGNORE_CRM`
// 3: `IGNORE_TRANSIENT_STATE`
// 4: `IGNORE_CRM_AND_TRANSIENT_STATE`
enum CRMOverride {
  // No override
  NO_OVERRIDE = 0;
  // Ignore errors from CRM
  IGNORE_CRM_ERRORS = 1;
  // Ignore CRM completely (does not inform CRM of operation)
  IGNORE_CRM = 2;
  // Ignore Transient State (only admin should use if CRM crashed)
  IGNORE_TRANSIENT_STATE = 3;
  // Ignore CRM and Transient State
  IGNORE_CRM_AND_TRANSIENT_STATE = 4;
}

// Cloudlet Maintenance States
//
// Maintenance allows for planned downtimes of Cloudlets.
// These states involve message exchanges between the Controller,
// the AutoProv service, and the CRM. Certain states are only set
// by certain actors.
//
// 0: `NORMAL_OPERATION`
// 1: `MAINTENANCE_START`
// 2: `FAILOVER_REQUESTED`
// 3: `FAILOVER_DONE`
// 4: `FAILOVER_ERROR`
// 5: `MAINTENANCE_START_NO_FAILOVER`
// 6: `CRM_REQUESTED`
// 7: `CRM_UNDER_MAINTENANCE`
// 8: `CRM_ERROR`
// 9: `NORMAL_OPERATION_INIT`
// 31: `UNDER_MAINTENANCE`
enum MaintenanceState {
  // Normal operational state
  NORMAL_OPERATION = 0;
  // Request start of maintenance
  MAINTENANCE_START = 1;
  // Trigger failover for any HA AppInsts
  FAILOVER_REQUESTED = 2 [(protogen.enum_backend) = true];
  // Failover done
  FAILOVER_DONE = 3 [(protogen.enum_backend) = true];
  // Some errors encountered during maintenance failover
  FAILOVER_ERROR = 4 [(protogen.enum_backend) = true];
  // Request start of maintenance without AutoProv failover
  MAINTENANCE_START_NO_FAILOVER = 5;
  // Request CRM to transition to maintenance
  CRM_REQUESTED = 6 [(protogen.enum_backend) = true];
  // CRM request done and under maintenance
  CRM_UNDER_MAINTENANCE = 7 [(protogen.enum_backend) = true];
  // CRM failed to go into maintenance
  CRM_ERROR = 8 [(protogen.enum_backend) = true];
  // Request CRM to transition to normal operation
  NORMAL_OPERATION_INIT = 9 [(protogen.enum_backend) = true];
  // Under maintenance
  UNDER_MAINTENANCE = 31 [(protogen.enum_backend) = true];
}

// Status Information
//
// Used to track status of create/delete/update for resources that are being modified 
// by the controller via the CRM.  Tasks are the high level jobs that are to be completed.
// Steps are work items within a task. Within the clusterinst and appinst objects this
// is converted to a string
message StatusInfo{
  uint32 task_number = 1;
  uint32 max_tasks = 2;
  string task_name = 3;
  string step_name = 4;
  uint32 msg_count = 5;
  repeated string msgs = 6;
}
