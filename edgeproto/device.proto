// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Device identification messages

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/edgexr/edge-cloud/protogen/protogen.proto";
import "gogoproto/gogo.proto";
import "result.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// DeviceReport is a reporting message. It takes a begining and end time
// for the report
message DeviceReport {
  // Device Key
  DeviceKey key = 1 [(gogoproto.nullable) = false];
  // Timestamp of the beginning of the report
  google.protobuf.Timestamp begin = 2;
  // Timestamp of the beginning of the report
  google.protobuf.Timestamp end = 3;

  option (protogen.generate_cud) = true;
}

// DeviceKey is an identifier for a given device on the MobiledgeX platform
// It is defined by a unique id and unique id type
// And example of such a device is a MEL device that hosts several applications
message DeviceKey {
  // Type of unique ID provided by the client
  string unique_id_type = 1 [(protogen.keytag) = "deviceidtype"];
  // Unique identification of the client device or user. May be overridden by the server.
  string unique_id = 2 [(protogen.keytag) = "deviceid"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Device represents a device on the MobiledgeX platform
// We record when this device first showed up on our platform
message Device {
  repeated string fields = 1;
  // Key 
  DeviceKey key = 2 [(gogoproto.nullable) = false];
  // Timestamp when the device was registered
  google.protobuf.Timestamp first_seen = 3[(protogen.hidetag) = "nocmp"];
  // Timestamp when the device was last seen(Future use)
  google.protobuf.Timestamp last_seen = 4[(protogen.hidetag) = "nocmp"];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 5 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.uses_org) = "none";
  option (protogen.notify_flush) = true;
}

service DeviceApi {
  // Inject a device
  rpc InjectDevice(Device) returns (Result) {
    option (google.api.http) = {
      post: "/create/device"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceConfig,ActionManage,";
  }
  // Show devices
  rpc ShowDevice(Device) returns (stream Device) {
    option (google.api.http) = {
      post: "/show/device"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceConfig,ActionView,";
  }
  // Evict a device
  rpc EvictDevice(Device) returns (Result) {
    option (google.api.http) = {
      post: "/evict/device"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceConfig,ActionManage,";
  }
  // Device Reports API.
  rpc ShowDeviceReport(DeviceReport) returns (stream Device) {
      option (google.api.http) = {
      post: "/show/devicereport"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceConfig,ActionView,";
  }
}

message DeviceData {
  repeated Device devices = 1 [(gogoproto.nullable) = false];
  option (protogen.e2edata) = true;
  option (protogen.generate_copy_in_fields) = false;
}
