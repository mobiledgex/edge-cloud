// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud-resource-manager.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CloudResourceCategory int32

const (
	CloudResourceCategory_AllCloudResources CloudResourceCategory = 0
	CloudResourceCategory_Kubernetes        CloudResourceCategory = 200
	CloudResourceCategory_k8s               CloudResourceCategory = 200
	CloudResourceCategory_Mesos             CloudResourceCategory = 201
	CloudResourceCategory_AWS               CloudResourceCategory = 202
	CloudResourceCategory_GCP               CloudResourceCategory = 203
	CloudResourceCategory_Azure             CloudResourceCategory = 204
	CloudResourceCategory_DigitalOcean      CloudResourceCategory = 205
	CloudResourceCategory_PacketNet         CloudResourceCategory = 206
	CloudResourceCategory_OpenStack         CloudResourceCategory = 300
	CloudResourceCategory_Docker            CloudResourceCategory = 301
	CloudResourceCategory_EKS               CloudResourceCategory = 400
	CloudResourceCategory_AKS               CloudResourceCategory = 402
	CloudResourceCategory_GKS               CloudResourceCategory = 403
)

var CloudResourceCategory_name = map[int32]string{
	0:   "AllCloudResources",
	200: "Kubernetes",
	// Duplicate value: 200: "k8s",
	201: "Mesos",
	202: "AWS",
	203: "GCP",
	204: "Azure",
	205: "DigitalOcean",
	206: "PacketNet",
	300: "OpenStack",
	301: "Docker",
	400: "EKS",
	402: "AKS",
	403: "GKS",
}
var CloudResourceCategory_value = map[string]int32{
	"AllCloudResources": 0,
	"Kubernetes":        200,
	"k8s":               200,
	"Mesos":             201,
	"AWS":               202,
	"GCP":               203,
	"Azure":             204,
	"DigitalOcean":      205,
	"PacketNet":         206,
	"OpenStack":         300,
	"Docker":            301,
	"EKS":               400,
	"AKS":               402,
	"GKS":               403,
}

func (x CloudResourceCategory) String() string {
	return proto.EnumName(CloudResourceCategory_name, int32(x))
}
func (CloudResourceCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorCloudResourceManager, []int{0}
}

type CloudResource struct {
	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category    CloudResourceCategory `protobuf:"varint,2,opt,name=category,proto3,enum=edgeproto.CloudResourceCategory" json:"category,omitempty"`
	CloudletKey *CloudletKey          `protobuf:"bytes,3,opt,name=cloudletKey" json:"cloudletKey,omitempty"`
	Active      bool                  `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Id          int32                 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// AccessIp should come from the cloudlet, but for testing it
	// is configurable here. This will need to be removed later.
	AccessIp []byte `protobuf:"bytes,100,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`
}

func (m *CloudResource) Reset()         { *m = CloudResource{} }
func (m *CloudResource) String() string { return proto.CompactTextString(m) }
func (*CloudResource) ProtoMessage()    {}
func (*CloudResource) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudResourceManager, []int{0}
}

type EdgeCloudApp struct {
	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repository  string      `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Image       string      `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Cpu         string      `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory      string      `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Limitfactor int32       `protobuf:"varint,7,opt,name=limitfactor,proto3" json:"limitfactor,omitempty"`
	Exposure    string      `protobuf:"bytes,8,opt,name=exposure,proto3" json:"exposure,omitempty"`
	Replicas    int32       `protobuf:"varint,9,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Context     string      `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	Namespace   string      `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Region      string      `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Flavor      string      `protobuf:"bytes,13,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Network     string      `protobuf:"bytes,14,opt,name=network,proto3" json:"network,omitempty"`
	AppInstKey  *AppInstKey `protobuf:"bytes,15,opt,name=appInstKey" json:"appInstKey,omitempty"`
}

func (m *EdgeCloudApp) Reset()                    { *m = EdgeCloudApp{} }
func (m *EdgeCloudApp) String() string            { return proto.CompactTextString(m) }
func (*EdgeCloudApp) ProtoMessage()               {}
func (*EdgeCloudApp) Descriptor() ([]byte, []int) { return fileDescriptorCloudResourceManager, []int{1} }

type EdgeCloudApplication struct {
	Manifest string          `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	Kind     string          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Apps     []*EdgeCloudApp `protobuf:"bytes,3,rep,name=apps" json:"apps,omitempty"`
}

func (m *EdgeCloudApplication) Reset()         { *m = EdgeCloudApplication{} }
func (m *EdgeCloudApplication) String() string { return proto.CompactTextString(m) }
func (*EdgeCloudApplication) ProtoMessage()    {}
func (*EdgeCloudApplication) Descriptor() ([]byte, []int) {
	return fileDescriptorCloudResourceManager, []int{2}
}

func init() {
	proto.RegisterType((*CloudResource)(nil), "edgeproto.CloudResource")
	proto.RegisterType((*EdgeCloudApp)(nil), "edgeproto.EdgeCloudApp")
	proto.RegisterType((*EdgeCloudApplication)(nil), "edgeproto.EdgeCloudApplication")
	proto.RegisterEnum("edgeproto.CloudResourceCategory", CloudResourceCategory_name, CloudResourceCategory_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudResourceManager service

type CloudResourceManagerClient interface {
	ListCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (CloudResourceManager_ListCloudResourceClient, error)
	AddCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (*Result, error)
	DeleteCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (*Result, error)
	DeployApplication(ctx context.Context, in *EdgeCloudApplication, opts ...grpc.CallOption) (*Result, error)
	DeleteApplication(ctx context.Context, in *EdgeCloudApplication, opts ...grpc.CallOption) (*Result, error)
}

type cloudResourceManagerClient struct {
	cc *grpc.ClientConn
}

func NewCloudResourceManagerClient(cc *grpc.ClientConn) CloudResourceManagerClient {
	return &cloudResourceManagerClient{cc}
}

func (c *cloudResourceManagerClient) ListCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (CloudResourceManager_ListCloudResourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudResourceManager_serviceDesc.Streams[0], c.cc, "/edgeproto.CloudResourceManager/ListCloudResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudResourceManagerListCloudResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudResourceManager_ListCloudResourceClient interface {
	Recv() (*CloudResource, error)
	grpc.ClientStream
}

type cloudResourceManagerListCloudResourceClient struct {
	grpc.ClientStream
}

func (x *cloudResourceManagerListCloudResourceClient) Recv() (*CloudResource, error) {
	m := new(CloudResource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudResourceManagerClient) AddCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudResourceManager/AddCloudResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudResourceManagerClient) DeleteCloudResource(ctx context.Context, in *CloudResource, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudResourceManager/DeleteCloudResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudResourceManagerClient) DeployApplication(ctx context.Context, in *EdgeCloudApplication, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudResourceManager/DeployApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudResourceManagerClient) DeleteApplication(ctx context.Context, in *EdgeCloudApplication, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.CloudResourceManager/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudResourceManager service

type CloudResourceManagerServer interface {
	ListCloudResource(*CloudResource, CloudResourceManager_ListCloudResourceServer) error
	AddCloudResource(context.Context, *CloudResource) (*Result, error)
	DeleteCloudResource(context.Context, *CloudResource) (*Result, error)
	DeployApplication(context.Context, *EdgeCloudApplication) (*Result, error)
	DeleteApplication(context.Context, *EdgeCloudApplication) (*Result, error)
}

func RegisterCloudResourceManagerServer(s *grpc.Server, srv CloudResourceManagerServer) {
	s.RegisterService(&_CloudResourceManager_serviceDesc, srv)
}

func _CloudResourceManager_ListCloudResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudResource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudResourceManagerServer).ListCloudResource(m, &cloudResourceManagerListCloudResourceServer{stream})
}

type CloudResourceManager_ListCloudResourceServer interface {
	Send(*CloudResource) error
	grpc.ServerStream
}

type cloudResourceManagerListCloudResourceServer struct {
	grpc.ServerStream
}

func (x *cloudResourceManagerListCloudResourceServer) Send(m *CloudResource) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudResourceManager_AddCloudResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudResourceManagerServer).AddCloudResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudResourceManager/AddCloudResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudResourceManagerServer).AddCloudResource(ctx, req.(*CloudResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudResourceManager_DeleteCloudResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudResourceManagerServer).DeleteCloudResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudResourceManager/DeleteCloudResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudResourceManagerServer).DeleteCloudResource(ctx, req.(*CloudResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudResourceManager_DeployApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeCloudApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudResourceManagerServer).DeployApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudResourceManager/DeployApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudResourceManagerServer).DeployApplication(ctx, req.(*EdgeCloudApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudResourceManager_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeCloudApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudResourceManagerServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.CloudResourceManager/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudResourceManagerServer).DeleteApplication(ctx, req.(*EdgeCloudApplication))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.CloudResourceManager",
	HandlerType: (*CloudResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCloudResource",
			Handler:    _CloudResourceManager_AddCloudResource_Handler,
		},
		{
			MethodName: "DeleteCloudResource",
			Handler:    _CloudResourceManager_DeleteCloudResource_Handler,
		},
		{
			MethodName: "DeployApplication",
			Handler:    _CloudResourceManager_DeployApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _CloudResourceManager_DeleteApplication_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCloudResource",
			Handler:       _CloudResourceManager_ListCloudResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloud-resource-manager.proto",
}

func (m *CloudResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudResource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Category != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.Category))
	}
	if m.CloudletKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.CloudletKey.Size()))
		n1, err := m.CloudletKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Active {
		dAtA[i] = 0x20
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.Id))
	}
	if len(m.AccessIp) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.AccessIp)))
		i += copy(dAtA[i:], m.AccessIp)
	}
	return i, nil
}

func (m *EdgeCloudApp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCloudApp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Repository) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Repository)))
		i += copy(dAtA[i:], m.Repository)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Cpu) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Cpu)))
		i += copy(dAtA[i:], m.Cpu)
	}
	if len(m.Memory) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Memory)))
		i += copy(dAtA[i:], m.Memory)
	}
	if m.Limitfactor != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.Limitfactor))
	}
	if len(m.Exposure) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Exposure)))
		i += copy(dAtA[i:], m.Exposure)
	}
	if m.Replicas != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.Replicas))
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.Flavor) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Flavor)))
		i += copy(dAtA[i:], m.Flavor)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.AppInstKey != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(m.AppInstKey.Size()))
		n2, err := m.AppInstKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EdgeCloudApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeCloudApplication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Manifest)))
		i += copy(dAtA[i:], m.Manifest)
	}
	if len(m.Kind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudResourceManager(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Apps) > 0 {
		for _, msg := range m.Apps {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCloudResourceManager(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCloudResourceManager(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudResource) CopyInFields(src *CloudResource) {
	m.Name = src.Name
	m.Category = src.Category
	if src.CloudletKey != nil {
		m.CloudletKey = &CloudletKey{}
		m.CloudletKey.OperatorKey.Name = src.CloudletKey.OperatorKey.Name
		m.CloudletKey.Name = src.CloudletKey.Name
	}
	m.Active = src.Active
	m.Id = src.Id
	if m.AccessIp == nil || len(m.AccessIp) != len(src.AccessIp) {
		m.AccessIp = make([]byte, len(src.AccessIp))
	}
	copy(m.AccessIp, src.AccessIp)
}

func (m *CloudResource) ValidateEnums() error {
	var ok bool
	_, ok = CloudResourceCategory_name[int32(m.Category)]
	if !ok {
		return errors.New("invalid Category")
	}
	return nil
}

func (m *EdgeCloudApp) CopyInFields(src *EdgeCloudApp) {
	m.Name = src.Name
	m.Repository = src.Repository
	m.Image = src.Image
	m.Cpu = src.Cpu
	m.Memory = src.Memory
	m.Limitfactor = src.Limitfactor
	m.Exposure = src.Exposure
	m.Replicas = src.Replicas
	m.Context = src.Context
	m.Namespace = src.Namespace
	m.Region = src.Region
	m.Flavor = src.Flavor
	m.Network = src.Network
	if src.AppInstKey != nil {
		m.AppInstKey = &AppInstKey{}
		m.AppInstKey.AppKey.DeveloperKey.Name = src.AppInstKey.AppKey.DeveloperKey.Name
		m.AppInstKey.AppKey.Name = src.AppInstKey.AppKey.Name
		m.AppInstKey.AppKey.Version = src.AppInstKey.AppKey.Version
		m.AppInstKey.CloudletKey.OperatorKey.Name = src.AppInstKey.CloudletKey.OperatorKey.Name
		m.AppInstKey.CloudletKey.Name = src.AppInstKey.CloudletKey.Name
		m.AppInstKey.Id = src.AppInstKey.Id
	}
}

func (m *EdgeCloudApplication) CopyInFields(src *EdgeCloudApplication) {
	m.Manifest = src.Manifest
	m.Kind = src.Kind
	if src.Apps != nil {
		if m.Apps == nil || len(m.Apps) != len(src.Apps) {
			m.Apps = make([]*EdgeCloudApp, len(src.Apps))
		}
		for i0 := 0; i0 < len(src.Apps); i0++ {
			m.Apps[i0] = &EdgeCloudApp{}
			m.Apps[i0].Name = src.Apps[i0].Name
			m.Apps[i0].Repository = src.Apps[i0].Repository
			m.Apps[i0].Image = src.Apps[i0].Image
			m.Apps[i0].Cpu = src.Apps[i0].Cpu
			m.Apps[i0].Memory = src.Apps[i0].Memory
			m.Apps[i0].Limitfactor = src.Apps[i0].Limitfactor
			m.Apps[i0].Exposure = src.Apps[i0].Exposure
			m.Apps[i0].Replicas = src.Apps[i0].Replicas
			m.Apps[i0].Context = src.Apps[i0].Context
			m.Apps[i0].Namespace = src.Apps[i0].Namespace
			m.Apps[i0].Region = src.Apps[i0].Region
			m.Apps[i0].Flavor = src.Apps[i0].Flavor
			m.Apps[i0].Network = src.Apps[i0].Network
			if src.Apps[i0].AppInstKey != nil {
				m.Apps[i0].AppInstKey = &AppInstKey{}
				m.Apps[i0].AppInstKey.AppKey.DeveloperKey.Name = src.Apps[i0].AppInstKey.AppKey.DeveloperKey.Name
				m.Apps[i0].AppInstKey.AppKey.Name = src.Apps[i0].AppInstKey.AppKey.Name
				m.Apps[i0].AppInstKey.AppKey.Version = src.Apps[i0].AppInstKey.AppKey.Version
				m.Apps[i0].AppInstKey.CloudletKey.OperatorKey.Name = src.Apps[i0].AppInstKey.CloudletKey.OperatorKey.Name
				m.Apps[i0].AppInstKey.CloudletKey.Name = src.Apps[i0].AppInstKey.CloudletKey.Name
				m.Apps[i0].AppInstKey.Id = src.Apps[i0].AppInstKey.Id
			}
		}
	}
}

var CloudResourceCategoryStrings = []string{
	"AllCloudResources",
	"Kubernetes",
	"k8s",
	"Mesos",
	"AWS",
	"GCP",
	"Azure",
	"DigitalOcean",
	"PacketNet",
	"OpenStack",
	"Docker",
	"EKS",
	"AKS",
	"GKS",
}

const (
	CloudResourceCategoryAllCloudResources uint64 = 1 << 0
	CloudResourceCategoryKubernetes        uint64 = 1 << 1
	CloudResourceCategoryK8S               uint64 = 1 << 2
	CloudResourceCategoryMesos             uint64 = 1 << 3
	CloudResourceCategoryAWS               uint64 = 1 << 4
	CloudResourceCategoryGCP               uint64 = 1 << 5
	CloudResourceCategoryAzure             uint64 = 1 << 6
	CloudResourceCategoryDigitalOcean      uint64 = 1 << 7
	CloudResourceCategoryPacketNet         uint64 = 1 << 8
	CloudResourceCategoryOpenStack         uint64 = 1 << 9
	CloudResourceCategoryDocker            uint64 = 1 << 10
	CloudResourceCategoryEKS               uint64 = 1 << 11
	CloudResourceCategoryAKS               uint64 = 1 << 12
	CloudResourceCategoryGKS               uint64 = 1 << 13
)

func (e *CloudResourceCategory) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := CloudResourceCategory_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = CloudResourceCategory_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = CloudResourceCategory(val)
	return nil
}

func (e CloudResourceCategory) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *CloudResource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovCloudResourceManager(uint64(m.Category))
	}
	if m.CloudletKey != nil {
		l = m.CloudletKey.Size()
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovCloudResourceManager(uint64(m.Id))
	}
	l = len(m.AccessIp)
	if l > 0 {
		n += 2 + l + sovCloudResourceManager(uint64(l))
	}
	return n
}

func (m *EdgeCloudApp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Repository)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Memory)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if m.Limitfactor != 0 {
		n += 1 + sovCloudResourceManager(uint64(m.Limitfactor))
	}
	l = len(m.Exposure)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if m.Replicas != 0 {
		n += 1 + sovCloudResourceManager(uint64(m.Replicas))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Flavor)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if m.AppInstKey != nil {
		l = m.AppInstKey.Size()
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	return n
}

func (m *EdgeCloudApplication) Size() (n int) {
	var l int
	_ = l
	l = len(m.Manifest)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovCloudResourceManager(uint64(l))
	}
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovCloudResourceManager(uint64(l))
		}
	}
	return n
}

func sovCloudResourceManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudResourceManager(x uint64) (n int) {
	return sovCloudResourceManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudResourceManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= (CloudResourceCategory(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudletKey == nil {
				m.CloudletKey = &CloudletKey{}
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessIp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessIp = append(m.AccessIp[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessIp == nil {
				m.AccessIp = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudResourceManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCloudApp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudResourceManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCloudApp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCloudApp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limitfactor", wireType)
			}
			m.Limitfactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limitfactor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exposure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exposure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInstKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppInstKey == nil {
				m.AppInstKey = &AppInstKey{}
			}
			if err := m.AppInstKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudResourceManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeCloudApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudResourceManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeCloudApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeCloudApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &EdgeCloudApp{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudResourceManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudResourceManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudResourceManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudResourceManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudResourceManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudResourceManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudResourceManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudResourceManager(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudResourceManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudResourceManager   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cloud-resource-manager.proto", fileDescriptorCloudResourceManager) }

var fileDescriptorCloudResourceManager = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x76, 0x7b, 0x62, 0xaf, 0xa7, 0xec, 0xf5, 0xb6, 0x9b, 0x64, 0x69, 0x99, 0x95, 0x19, 0xf9,
	0x64, 0x81, 0x36, 0x42, 0x46, 0x48, 0x7b, 0xe0, 0x62, 0xe2, 0xd5, 0x2a, 0x32, 0xcb, 0x46, 0xe3,
	0x03, 0xc7, 0xa8, 0x33, 0x53, 0xb1, 0x5a, 0x1e, 0xcf, 0xb4, 0xba, 0xdb, 0x21, 0xe1, 0xc8, 0x13,
	0x20, 0x10, 0x6f, 0x01, 0xef, 0x11, 0x7e, 0xc5, 0x8d, 0x6b, 0xc8, 0x93, 0xa0, 0xe9, 0x19, 0x9b,
	0x31, 0x4a, 0xd0, 0x4a, 0xb9, 0xd5, 0x57, 0x5f, 0xd5, 0x57, 0x5f, 0xa9, 0x66, 0x1a, 0x9e, 0x45,
	0x49, 0xb6, 0x8e, 0x9f, 0x6b, 0x34, 0xd9, 0x5a, 0x47, 0xf8, 0x7c, 0x25, 0x52, 0xb1, 0x40, 0x7d,
	0xa8, 0x74, 0x66, 0x33, 0xe6, 0x63, 0xbc, 0x40, 0x17, 0xf6, 0xbb, 0xae, 0x30, 0x41, 0x5b, 0x50,
	0xfd, 0x8e, 0x46, 0xb3, 0x4e, 0x36, 0xa8, 0x2b, 0x94, 0x3a, 0x95, 0xa9, 0x29, 0xf1, 0xf0, 0x86,
	0xc0, 0xe3, 0xa3, 0xbc, 0x21, 0x2c, 0x85, 0x19, 0x83, 0xbd, 0x54, 0xac, 0x90, 0x93, 0x80, 0x8c,
	0xfc, 0xd0, 0xc5, 0xec, 0x53, 0x68, 0x45, 0xc2, 0xe2, 0x22, 0xd3, 0x57, 0xbc, 0x1e, 0x90, 0x51,
	0x77, 0x1c, 0x1c, 0x6e, 0x27, 0x1e, 0xee, 0xf4, 0x1f, 0x95, 0x75, 0xe1, 0xb6, 0x83, 0xbd, 0x80,
	0xf6, 0xc6, 0xd3, 0x0c, 0xaf, 0xb8, 0x17, 0x90, 0x51, 0x7b, 0xfc, 0xf4, 0xbf, 0x02, 0x05, 0x1b,
	0x56, 0x4b, 0xd9, 0x53, 0x68, 0x8a, 0xc8, 0xca, 0x0b, 0xe4, 0x7b, 0x01, 0x19, 0xb5, 0xc2, 0x12,
	0xb1, 0x2e, 0xd4, 0x65, 0xcc, 0x1b, 0x01, 0x19, 0x35, 0xc2, 0xba, 0x8c, 0xd9, 0x7b, 0xe0, 0x8b,
	0x28, 0x42, 0x63, 0x4e, 0xa5, 0xe2, 0x71, 0x40, 0x46, 0x9d, 0xb0, 0x55, 0x24, 0x8e, 0xd5, 0xf0,
	0x07, 0x0f, 0x3a, 0x2f, 0xe3, 0x05, 0xba, 0x29, 0x13, 0xa5, 0xee, 0xdc, 0x70, 0x00, 0xa0, 0x51,
	0x65, 0x46, 0xda, 0xcd, 0x8e, 0x7e, 0x58, 0xc9, 0xb0, 0x7d, 0x68, 0xc8, 0x95, 0x58, 0xa0, 0x73,
	0xef, 0x87, 0x05, 0x60, 0x14, 0xbc, 0x48, 0xad, 0x9d, 0x11, 0x3f, 0xcc, 0xc3, 0xdc, 0xf1, 0x0a,
	0x57, 0xb9, 0x46, 0xd3, 0x25, 0x4b, 0xc4, 0x02, 0x68, 0x27, 0x72, 0x25, 0xed, 0xb9, 0x88, 0x6c,
	0xa6, 0xf9, 0x23, 0x67, 0xbd, 0x9a, 0x62, 0x7d, 0x68, 0xe1, 0xa5, 0xca, 0xcc, 0x5a, 0x23, 0x6f,
	0xb9, 0xde, 0x2d, 0xce, 0x39, 0x8d, 0x2a, 0x91, 0x91, 0x30, 0xdc, 0x77, 0xad, 0x5b, 0xcc, 0x38,
	0x3c, 0x8a, 0xb2, 0xd4, 0xe2, 0xa5, 0xe5, 0xe0, 0xda, 0x36, 0x90, 0x3d, 0x03, 0x3f, 0xdf, 0xcd,
	0x28, 0x11, 0x21, 0x6f, 0x3b, 0xee, 0xdf, 0x44, 0xee, 0x54, 0xe3, 0x42, 0x66, 0x29, 0xef, 0x14,
	0x4e, 0x0b, 0x94, 0xe7, 0xcf, 0x13, 0x71, 0x91, 0x69, 0xfe, 0xb8, 0xc8, 0x17, 0x28, 0x9f, 0x93,
	0xa2, 0xfd, 0x2a, 0xd3, 0x4b, 0xde, 0x2d, 0xe6, 0x94, 0x90, 0x7d, 0x02, 0x20, 0x94, 0x3a, 0x4e,
	0x8d, 0x3b, 0xef, 0x13, 0x77, 0xde, 0x83, 0xca, 0x79, 0x27, 0x5b, 0x32, 0xac, 0x14, 0x0e, 0x0d,
	0xec, 0x57, 0xcf, 0x92, 0x6f, 0x63, 0x73, 0x03, 0x7d, 0x68, 0xad, 0x44, 0x2a, 0xcf, 0xd1, 0xd8,
	0xf2, 0x44, 0x5b, 0x9c, 0x9f, 0x6e, 0x29, 0xd3, 0xb8, 0x3c, 0x90, 0x8b, 0xd9, 0x87, 0xb0, 0x27,
	0x94, 0x32, 0xdc, 0x0b, 0xbc, 0x51, 0x7b, 0xfc, 0x6e, 0x65, 0x70, 0x55, 0x3e, 0x74, 0x45, 0x1f,
	0xfc, 0x45, 0xe0, 0xe0, 0xce, 0xef, 0x95, 0x1d, 0x40, 0x6f, 0x92, 0x24, 0x3b, 0x9c, 0xa1, 0x35,
	0xf6, 0x04, 0x60, 0xb6, 0x3e, 0x43, 0x9d, 0xa2, 0x45, 0x43, 0xaf, 0x09, 0x6b, 0x81, 0xb7, 0x7c,
	0xe1, 0x22, 0x80, 0xc6, 0x6b, 0x34, 0x99, 0xa1, 0x3f, 0xbb, 0xec, 0xe4, 0xcb, 0x39, 0xfd, 0xc5,
	0x45, 0xaf, 0x8e, 0x4e, 0xe8, 0xaf, 0x8e, 0x9f, 0x7c, 0xbd, 0xd6, 0x48, 0x7f, 0x23, 0xac, 0x07,
	0x9d, 0xa9, 0x5c, 0x48, 0x2b, 0x92, 0x37, 0x11, 0x8a, 0x94, 0xfe, 0x4e, 0x58, 0x17, 0xfc, 0x13,
	0x11, 0x2d, 0xd1, 0x7e, 0x81, 0x96, 0xfe, 0xe1, 0xf0, 0x1b, 0x85, 0xe9, 0xdc, 0x8a, 0x68, 0x49,
	0x7f, 0xac, 0xb3, 0x36, 0x34, 0xa7, 0x59, 0xb4, 0x44, 0x4d, 0x7f, 0xaa, 0xe7, 0xaa, 0x2f, 0x67,
	0x73, 0xfa, 0xad, 0xe7, 0x26, 0xcd, 0xe6, 0xf4, 0x3b, 0x17, 0xbd, 0x9a, 0xcd, 0xe9, 0xf7, 0x5e,
	0xbf, 0x4e, 0xc9, 0xf8, 0x1b, 0x0f, 0xf6, 0x77, 0xdc, 0xbf, 0x2e, 0x5e, 0x08, 0x36, 0x83, 0xde,
	0xe7, 0xd2, 0xd8, 0xdd, 0xbf, 0x9c, 0xdf, 0xf7, 0xff, 0xf6, 0xef, 0x65, 0x86, 0xb5, 0x8f, 0x08,
	0x9b, 0x00, 0x9d, 0xc4, 0xf1, 0xdb, 0x6a, 0xf5, 0x2a, 0x4c, 0xe8, 0x9e, 0xa1, 0x61, 0x8d, 0x4d,
	0xe1, 0x9d, 0x29, 0x26, 0x68, 0xf1, 0x41, 0x2a, 0xc7, 0xd0, 0x9b, 0xa2, 0x4a, 0xb2, 0xab, 0xea,
	0xa7, 0xf3, 0xfe, 0x3d, 0xc7, 0xdf, 0x14, 0xfc, 0x8f, 0x54, 0x6e, 0xe8, 0xc1, 0x52, 0x9f, 0xd1,
	0xeb, 0xbf, 0x07, 0xb5, 0xeb, 0xdb, 0x01, 0xf9, 0xf3, 0x76, 0x40, 0x6e, 0x6e, 0x07, 0xe4, 0xac,
	0xe9, 0x2a, 0x3e, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xf6, 0x57, 0x8b, 0xc0, 0x05, 0x00,
	0x00,
}
