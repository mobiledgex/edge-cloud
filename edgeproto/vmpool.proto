// VM Pool proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "result.proto";
import "cloudlet.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

message VMNetInfo {
  // External IP
  string external_ip = 1;
  // Internal IP
  string internal_ip = 2;
}

// VM State
//
// VMState is the state of the VM
enum VMState {
	// VM is free to use
	VM_FREE = 0;
	// VM is in use
	VM_IN_USE = 1;
	// VM is in error state
	VM_ERROR = 2;
}

message VM {
  // VM Name
  string name = 1;
  // VM IP
  VMNetInfo net_info = 2 [(gogoproto.nullable) = false];
  // VM Group Name
  string group_name = 3;
  // VM State
  VMState state = 4;
  // Last updated time
  google.protobuf.Timestamp updated_at = 5 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // VM Internal Name
  string internal_name = 6;
}

// VMPool defines a pool of VMs to be part of a Cloudlet
message VMPool {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Cloudlet key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // list of VMs to be part of Cloudlet
  repeated VM vms = 3 [(gogoproto.nullable) = false];
  // Action performed on VM Pool
  VMAction action = 4 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Errors if any
  string error = 5;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.noconfig) = "Vms:#.GroupName,Vms:#.InternalName,Vms:#.State,Vms:#.UpdatedAt.Seconds,Vms:#.UpdatedAt.Nanos,Action,Error";
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
}

// VMPoolMember is used to add and remove VM from VM Pool
message VMPoolMember {
  // Cloudlet key
  CloudletKey key = 1 [(gogoproto.nullable) = false];
  // VM part of VM Pool
  VM vm = 2 [(gogoproto.nullable) = false];
  option (protogen.noconfig) = "Vm.GroupName,Vm.State,Vm.UpdatedAt.Seconds,Vm.UpdatedAt.Nanos";
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
}

service VMPoolApi {
  // Create VMPool. Creates VM pool which will have
  // VMs defined.
  rpc CreateVMPool(VMPool) returns (Result) {
    option (google.api.http) = {
      post: "/create/vmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete VMPool. Deletes VM pool given that none
  // of VMs part of this pool is used.
  rpc DeleteVMPool(VMPool) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cloudetvmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Update VMPool. Updates a VM pool's VMs.
  rpc UpdateVMPool(VMPool) returns (Result) {
    option (google.api.http) = {
      post: "/update/vmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Show VMPools. Lists all the VMs part of the VM pool.
  rpc ShowVMPool(VMPool) returns (stream VMPool) {
    option (google.api.http) = {
      post: "/show/vmpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
  }
  // Add VMPoolMember. Adds a VM to existing VM Pool.
  rpc AddVMPoolMember(VMPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/add/vmpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "Vm.Name";
  }
  // Remove VMPoolMember. Removes a VM from existing VM Pool.
  rpc RemoveVMPoolMember(VMPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/rm/vmpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "Vm.Name";
  }
}

// VMSpec defines the specification of VM required by CRM
message VMSpec {
  // VM internal name
  string internal_name = 1;
  // VM has external network defined or not
  bool external_network  = 2;
  // VM has internal network defined or not
  bool internal_network  = 3;
}

// VM Action
//
// VMAction is the action to be performed on VM Pool
enum VMAction {
  // Done performing action
  VM_ACTION_DONE = 0;
  // Allocate VMs from VM Pool
  VM_ACTION_ALLOCATE = 1;
  // Release VMs from VM Pool
  VM_ACTION_RELEASE = 2;
}

// VMPoolInfo is used to manage VMPool from CRM
message VMPoolInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // Action performed on VM Pool
  VMAction action = 3;
  // Id of client assigned by server (internal use only)
  int64 notify_id = 4 [(protogen.hidetag) = "nocmp"];
  // VM Group Name 
  string group_name = 5;
  // Specs of VMs requested by the caller
  repeated VMSpec vm_specs = 6 [(gogoproto.nullable) = false];
  // list of VMs allocated
  repeated VM vms = 7 [(gogoproto.nullable) = false];
  // Errors if any
  string error = 8;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "none";
}

service VMPoolInfoApi {
  // Show VMPoolInfos
  rpc ShowVMPoolInfo(VMPoolInfo) returns (stream VMPoolInfo) {
    option (google.api.http) = {
      post: "/show/vmpoolinfo"
      body: "*"
    };
  }
}
