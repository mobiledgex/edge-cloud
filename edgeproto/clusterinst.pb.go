// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "time"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ClusterInstKey uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).
type ClusterInstKey struct {
	// Name of Cluster
	ClusterKey ClusterKey `protobuf:"bytes,1,opt,name=cluster_key,json=clusterKey" json:"cluster_key"`
	// Name of Cloudlet on which the Cluster is instantiated
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
	// Name of Developer that this cluster belongs to
	Developer string `protobuf:"bytes,3,opt,name=developer,proto3" json:"developer,omitempty"`
}

func (m *ClusterInstKey) Reset()                    { *m = ClusterInstKey{} }
func (m *ClusterInstKey) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstKey) ProtoMessage()               {}
func (*ClusterInstKey) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{0} }

// ClusterInst is an instance of a Cluster on a Cloudlet.
// It is defined by a Cluster, Cloudlet, and Developer key.
type ClusterInst struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique key
	Key ClusterInstKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Flavor of the k8s node
	Flavor FlavorKey `protobuf:"bytes,3,opt,name=flavor" json:"flavor"`
	// Liveness of instance (see Liveness)
	Liveness Liveness `protobuf:"varint,9,opt,name=liveness,proto3,enum=edgeproto.Liveness" json:"liveness,omitempty"`
	// Auto is set to true when automatically created by back-end (internal use only)
	Auto bool `protobuf:"varint,10,opt,name=auto,proto3" json:"auto,omitempty"`
	// State of the cluster instance
	State TrackedState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
	Errors []string `protobuf:"bytes,5,rep,name=errors" json:"errors,omitempty"`
	// Override actions to CRM
	CrmOverride CRMOverride `protobuf:"varint,6,opt,name=crm_override,json=crmOverride,proto3,enum=edgeproto.CRMOverride" json:"crm_override,omitempty"`
	// IP access type (RootLB Type)
	IpAccess IpAccess `protobuf:"varint,7,opt,name=ip_access,json=ipAccess,proto3,enum=edgeproto.IpAccess" json:"ip_access,omitempty"`
	// Allocated IP for dedicated access
	AllocatedIp string `protobuf:"bytes,8,opt,name=allocated_ip,json=allocatedIp,proto3" json:"allocated_ip,omitempty"`
	// Cloudlet specific node flavor
	NodeFlavor string `protobuf:"bytes,11,opt,name=node_flavor,json=nodeFlavor,proto3" json:"node_flavor,omitempty"`
	// Deployment type (kubernetes or docker)
	Deployment string `protobuf:"bytes,15,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Number of k8s masters (In case of docker deployment, this field is not required)
	NumMasters uint32 `protobuf:"varint,13,opt,name=num_masters,json=numMasters,proto3" json:"num_masters,omitempty"`
	// Number of k8s nodes (In case of docker deployment, this field is not required)
	NumNodes uint32 `protobuf:"varint,14,opt,name=num_nodes,json=numNodes,proto3" json:"num_nodes,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,16,opt,name=status" json:"status"`
	// Size of external volume to be attached to nodes
	ExternalVolumeSize uint64 `protobuf:"varint,17,opt,name=external_volume_size,json=externalVolumeSize,proto3" json:"external_volume_size,omitempty"`
}

func (m *ClusterInst) Reset()                    { *m = ClusterInst{} }
func (m *ClusterInst) String() string            { return proto.CompactTextString(m) }
func (*ClusterInst) ProtoMessage()               {}
func (*ClusterInst) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{1} }

// ClusterInstInfo provides information from the Cloudlet Resource Manager about the state of the ClusterInst on the Cloudlet. Whereas the ClusterInst defines the intent of instantiating a Cluster on a Cloudlet, the ClusterInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
type ClusterInstInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key ClusterInstKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// State of the cluster instance
	State TrackedState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
	Errors []string `protobuf:"bytes,5,rep,name=errors" json:"errors,omitempty"`
	// status is used to reflect progress of creation or other events
	Status StatusInfo `protobuf:"bytes,6,opt,name=status" json:"status"`
}

func (m *ClusterInstInfo) Reset()                    { *m = ClusterInstInfo{} }
func (m *ClusterInstInfo) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstInfo) ProtoMessage()               {}
func (*ClusterInstInfo) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{2} }

func init() {
	proto.RegisterType((*ClusterInstKey)(nil), "edgeproto.ClusterInstKey")
	proto.RegisterType((*ClusterInst)(nil), "edgeproto.ClusterInst")
	proto.RegisterType((*ClusterInstInfo)(nil), "edgeproto.ClusterInstInfo")
}
func (this *ClusterInstKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.ClusterInstKey{")
	s = append(s, "ClusterKey: "+strings.Replace(this.ClusterKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Developer: "+fmt.Sprintf("%#v", this.Developer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClusterinst(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterInstApi service

type ClusterInstApiClient interface {
	// Create a Cluster instance
	CreateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_CreateClusterInstClient, error)
	// Delete a Cluster instance
	DeleteClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_DeleteClusterInstClient, error)
	// Update a Cluster instance
	UpdateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_UpdateClusterInstClient, error)
	// Show Cluster instances
	ShowClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_ShowClusterInstClient, error)
}

type clusterInstApiClient struct {
	cc *grpc.ClientConn
}

func NewClusterInstApiClient(cc *grpc.ClientConn) ClusterInstApiClient {
	return &clusterInstApiClient{cc}
}

func (c *clusterInstApiClient) CreateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_CreateClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ClusterInstApi/CreateClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiCreateClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_CreateClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiCreateClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiCreateClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) DeleteClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_DeleteClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[1], c.cc, "/edgeproto.ClusterInstApi/DeleteClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiDeleteClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_DeleteClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiDeleteClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiDeleteClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) UpdateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_UpdateClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[2], c.cc, "/edgeproto.ClusterInstApi/UpdateClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiUpdateClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_UpdateClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiUpdateClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiUpdateClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) ShowClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_ShowClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[3], c.cc, "/edgeproto.ClusterInstApi/ShowClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiShowClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_ShowClusterInstClient interface {
	Recv() (*ClusterInst, error)
	grpc.ClientStream
}

type clusterInstApiShowClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiShowClusterInstClient) Recv() (*ClusterInst, error) {
	m := new(ClusterInst)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterInstApi service

type ClusterInstApiServer interface {
	// Create a Cluster instance
	CreateClusterInst(*ClusterInst, ClusterInstApi_CreateClusterInstServer) error
	// Delete a Cluster instance
	DeleteClusterInst(*ClusterInst, ClusterInstApi_DeleteClusterInstServer) error
	// Update a Cluster instance
	UpdateClusterInst(*ClusterInst, ClusterInstApi_UpdateClusterInstServer) error
	// Show Cluster instances
	ShowClusterInst(*ClusterInst, ClusterInstApi_ShowClusterInstServer) error
}

func RegisterClusterInstApiServer(s *grpc.Server, srv ClusterInstApiServer) {
	s.RegisterService(&_ClusterInstApi_serviceDesc, srv)
}

func _ClusterInstApi_CreateClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).CreateClusterInst(m, &clusterInstApiCreateClusterInstServer{stream})
}

type ClusterInstApi_CreateClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiCreateClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiCreateClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_DeleteClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).DeleteClusterInst(m, &clusterInstApiDeleteClusterInstServer{stream})
}

type ClusterInstApi_DeleteClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiDeleteClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiDeleteClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_UpdateClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).UpdateClusterInst(m, &clusterInstApiUpdateClusterInstServer{stream})
}

type ClusterInstApi_UpdateClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiUpdateClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiUpdateClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_ShowClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).ShowClusterInst(m, &clusterInstApiShowClusterInstServer{stream})
}

type ClusterInstApi_ShowClusterInstServer interface {
	Send(*ClusterInst) error
	grpc.ServerStream
}

type clusterInstApiShowClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiShowClusterInstServer) Send(m *ClusterInst) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterInstApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ClusterInstApi",
	HandlerType: (*ClusterInstApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateClusterInst",
			Handler:       _ClusterInstApi_CreateClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteClusterInst",
			Handler:       _ClusterInstApi_DeleteClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateClusterInst",
			Handler:       _ClusterInstApi_UpdateClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowClusterInst",
			Handler:       _ClusterInstApi_ShowClusterInst_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clusterinst.proto",
}

// Client API for ClusterInstInfoApi service

type ClusterInstInfoApiClient interface {
	// Show Cluster instances state.
	ShowClusterInstInfo(ctx context.Context, in *ClusterInstInfo, opts ...grpc.CallOption) (ClusterInstInfoApi_ShowClusterInstInfoClient, error)
}

type clusterInstInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewClusterInstInfoApiClient(cc *grpc.ClientConn) ClusterInstInfoApiClient {
	return &clusterInstInfoApiClient{cc}
}

func (c *clusterInstInfoApiClient) ShowClusterInstInfo(ctx context.Context, in *ClusterInstInfo, opts ...grpc.CallOption) (ClusterInstInfoApi_ShowClusterInstInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ClusterInstInfoApi/ShowClusterInstInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstInfoApiShowClusterInstInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstInfoApi_ShowClusterInstInfoClient interface {
	Recv() (*ClusterInstInfo, error)
	grpc.ClientStream
}

type clusterInstInfoApiShowClusterInstInfoClient struct {
	grpc.ClientStream
}

func (x *clusterInstInfoApiShowClusterInstInfoClient) Recv() (*ClusterInstInfo, error) {
	m := new(ClusterInstInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterInstInfoApi service

type ClusterInstInfoApiServer interface {
	// Show Cluster instances state.
	ShowClusterInstInfo(*ClusterInstInfo, ClusterInstInfoApi_ShowClusterInstInfoServer) error
}

func RegisterClusterInstInfoApiServer(s *grpc.Server, srv ClusterInstInfoApiServer) {
	s.RegisterService(&_ClusterInstInfoApi_serviceDesc, srv)
}

func _ClusterInstInfoApi_ShowClusterInstInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInstInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstInfoApiServer).ShowClusterInstInfo(m, &clusterInstInfoApiShowClusterInstInfoServer{stream})
}

type ClusterInstInfoApi_ShowClusterInstInfoServer interface {
	Send(*ClusterInstInfo) error
	grpc.ServerStream
}

type clusterInstInfoApiShowClusterInstInfoServer struct {
	grpc.ServerStream
}

func (x *clusterInstInfoApiShowClusterInstInfoServer) Send(m *ClusterInstInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterInstInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ClusterInstInfoApi",
	HandlerType: (*ClusterInstInfoApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowClusterInstInfo",
			Handler:       _ClusterInstInfoApi_ShowClusterInstInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clusterinst.proto",
}

func (m *ClusterInstKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInstKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.ClusterKey.Size()))
	n1, err := m.ClusterKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.CloudletKey.Size()))
	n2, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Developer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(len(m.Developer)))
		i += copy(dAtA[i:], m.Developer)
	}
	return i, nil
}

func (m *ClusterInst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Key.Size()))
	n3, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Flavor.Size()))
	n4, err := m.Flavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CrmOverride != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.CrmOverride))
	}
	if m.IpAccess != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.IpAccess))
	}
	if len(m.AllocatedIp) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(len(m.AllocatedIp)))
		i += copy(dAtA[i:], m.AllocatedIp)
	}
	if m.Liveness != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.Liveness))
	}
	if m.Auto {
		dAtA[i] = 0x50
		i++
		if m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NodeFlavor) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(len(m.NodeFlavor)))
		i += copy(dAtA[i:], m.NodeFlavor)
	}
	if m.NumMasters != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.NumMasters))
	}
	if m.NumNodes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.NumNodes))
	}
	if len(m.Deployment) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(len(m.Deployment)))
		i += copy(dAtA[i:], m.Deployment)
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.ExternalVolumeSize != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.ExternalVolumeSize))
	}
	return i, nil
}

func (m *ClusterInstInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInstInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Key.Size()))
	n6, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.NotifyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.NotifyId))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintClusterinst(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterInstKey) Matches(o *ClusterInstKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.ClusterKey.Matches(&o.ClusterKey, fopts...) {
		return false
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	if !opts.Filter || o.Developer != "" {
		if o.Developer != m.Developer {
			return false
		}
	}
	return true
}

func (m *ClusterInstKey) CopyInFields(src *ClusterInstKey) {
	m.ClusterKey.Name = src.ClusterKey.Name
	m.CloudletKey.OperatorKey.Name = src.CloudletKey.OperatorKey.Name
	m.CloudletKey.Name = src.CloudletKey.Name
	m.Developer = src.Developer
}

func (m *ClusterInstKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ClusterInstKey key string", "obj", m)
	}
	return string(key)
}

func ClusterInstKeyStringParse(str string, key *ClusterInstKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ClusterInstKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *ClusterInstKey) ValidateEnums() error {
	if err := m.ClusterKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *ClusterInst) Matches(o *ClusterInst, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !m.Flavor.Matches(&o.Flavor, fopts...) {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.State != 0 {
			if o.State != m.State {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Errors != nil {
			if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
				return false
			} else if m.Errors != nil && o.Errors != nil {
				if len(m.Errors) != len(o.Errors) {
					return false
				}
				for i := 0; i < len(m.Errors); i++ {
					if o.Errors[i] != m.Errors[i] {
						return false
					}
				}
			}
		}
	}
	if !opts.Filter || o.CrmOverride != 0 {
		if o.CrmOverride != m.CrmOverride {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.IpAccess != 0 {
			if o.IpAccess != m.IpAccess {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.AllocatedIp != "" {
			if o.AllocatedIp != m.AllocatedIp {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Liveness != 0 {
			if o.Liveness != m.Liveness {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Auto != false {
			if o.Auto != m.Auto {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.NodeFlavor != "" {
			if o.NodeFlavor != m.NodeFlavor {
				return false
			}
		}
	}
	if !opts.Filter || o.NumMasters != 0 {
		if o.NumMasters != m.NumMasters {
			return false
		}
	}
	if !opts.Filter || o.NumNodes != 0 {
		if o.NumNodes != m.NumNodes {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Deployment != "" {
			if o.Deployment != m.Deployment {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.ExternalVolumeSize != 0 {
			if o.ExternalVolumeSize != m.ExternalVolumeSize {
				return false
			}
		}
	}
	return true
}

const ClusterInstFieldKey = "2"
const ClusterInstFieldKeyClusterKey = "2.1"
const ClusterInstFieldKeyClusterKeyName = "2.1.1"
const ClusterInstFieldKeyCloudletKey = "2.2"
const ClusterInstFieldKeyCloudletKeyOperatorKey = "2.2.1"
const ClusterInstFieldKeyCloudletKeyOperatorKeyName = "2.2.1.1"
const ClusterInstFieldKeyCloudletKeyName = "2.2.2"
const ClusterInstFieldKeyDeveloper = "2.3"
const ClusterInstFieldFlavor = "3"
const ClusterInstFieldFlavorName = "3.1"
const ClusterInstFieldState = "4"
const ClusterInstFieldErrors = "5"
const ClusterInstFieldCrmOverride = "6"
const ClusterInstFieldIpAccess = "7"
const ClusterInstFieldAllocatedIp = "8"
const ClusterInstFieldLiveness = "9"
const ClusterInstFieldAuto = "10"
const ClusterInstFieldNodeFlavor = "11"
const ClusterInstFieldNumMasters = "13"
const ClusterInstFieldNumNodes = "14"
const ClusterInstFieldDeployment = "15"
const ClusterInstFieldStatus = "16"
const ClusterInstFieldStatusTaskNumber = "16.1"
const ClusterInstFieldStatusMaxTasks = "16.2"
const ClusterInstFieldStatusTaskName = "16.3"
const ClusterInstFieldStatusStepName = "16.4"
const ClusterInstFieldExternalVolumeSize = "17"

var ClusterInstAllFields = []string{
	ClusterInstFieldKeyClusterKeyName,
	ClusterInstFieldKeyCloudletKeyOperatorKeyName,
	ClusterInstFieldKeyCloudletKeyName,
	ClusterInstFieldKeyDeveloper,
	ClusterInstFieldFlavorName,
	ClusterInstFieldState,
	ClusterInstFieldErrors,
	ClusterInstFieldCrmOverride,
	ClusterInstFieldIpAccess,
	ClusterInstFieldAllocatedIp,
	ClusterInstFieldLiveness,
	ClusterInstFieldAuto,
	ClusterInstFieldNodeFlavor,
	ClusterInstFieldNumMasters,
	ClusterInstFieldNumNodes,
	ClusterInstFieldDeployment,
	ClusterInstFieldStatusTaskNumber,
	ClusterInstFieldStatusMaxTasks,
	ClusterInstFieldStatusTaskName,
	ClusterInstFieldStatusStepName,
	ClusterInstFieldExternalVolumeSize,
}

var ClusterInstAllFieldsMap = map[string]struct{}{
	ClusterInstFieldKeyClusterKeyName:             struct{}{},
	ClusterInstFieldKeyCloudletKeyOperatorKeyName: struct{}{},
	ClusterInstFieldKeyCloudletKeyName:            struct{}{},
	ClusterInstFieldKeyDeveloper:                  struct{}{},
	ClusterInstFieldFlavorName:                    struct{}{},
	ClusterInstFieldState:                         struct{}{},
	ClusterInstFieldErrors:                        struct{}{},
	ClusterInstFieldCrmOverride:                   struct{}{},
	ClusterInstFieldIpAccess:                      struct{}{},
	ClusterInstFieldAllocatedIp:                   struct{}{},
	ClusterInstFieldLiveness:                      struct{}{},
	ClusterInstFieldAuto:                          struct{}{},
	ClusterInstFieldNodeFlavor:                    struct{}{},
	ClusterInstFieldNumMasters:                    struct{}{},
	ClusterInstFieldNumNodes:                      struct{}{},
	ClusterInstFieldDeployment:                    struct{}{},
	ClusterInstFieldStatusTaskNumber:              struct{}{},
	ClusterInstFieldStatusMaxTasks:                struct{}{},
	ClusterInstFieldStatusTaskName:                struct{}{},
	ClusterInstFieldStatusStepName:                struct{}{},
	ClusterInstFieldExternalVolumeSize:            struct{}{},
}

var ClusterInstAllFieldsStringMap = map[string]string{
	ClusterInstFieldKeyClusterKeyName:             "Cluster Inst Field Key Cluster Key Name",
	ClusterInstFieldKeyCloudletKeyOperatorKeyName: "Cluster Inst Field Key Cloudlet Key Operator Key Name",
	ClusterInstFieldKeyCloudletKeyName:            "Cluster Inst Field Key Cloudlet Key Name",
	ClusterInstFieldKeyDeveloper:                  "Cluster Inst Field Key Developer",
	ClusterInstFieldFlavorName:                    "Cluster Inst Field Flavor Name",
	ClusterInstFieldState:                         "Cluster Inst Field State",
	ClusterInstFieldErrors:                        "Cluster Inst Field Errors",
	ClusterInstFieldCrmOverride:                   "Cluster Inst Field Crm Override",
	ClusterInstFieldIpAccess:                      "Cluster Inst Field Ip Access",
	ClusterInstFieldAllocatedIp:                   "Cluster Inst Field Allocated Ip",
	ClusterInstFieldLiveness:                      "Cluster Inst Field Liveness",
	ClusterInstFieldAuto:                          "Cluster Inst Field Auto",
	ClusterInstFieldNodeFlavor:                    "Cluster Inst Field Node Flavor",
	ClusterInstFieldNumMasters:                    "Cluster Inst Field Num Masters",
	ClusterInstFieldNumNodes:                      "Cluster Inst Field Num Nodes",
	ClusterInstFieldDeployment:                    "Cluster Inst Field Deployment",
	ClusterInstFieldStatusTaskNumber:              "Cluster Inst Field Status Task Number",
	ClusterInstFieldStatusMaxTasks:                "Cluster Inst Field Status Max Tasks",
	ClusterInstFieldStatusTaskName:                "Cluster Inst Field Status Task Name",
	ClusterInstFieldStatusStepName:                "Cluster Inst Field Status Step Name",
	ClusterInstFieldExternalVolumeSize:            "Cluster Inst Field External Volume Size",
}

func (m *ClusterInst) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ClusterInstFieldKey+".")
}

func (m *ClusterInst) DiffFields(o *ClusterInst, fields map[string]struct{}) {
	if m.Key.ClusterKey.Name != o.Key.ClusterKey.Name {
		fields[ClusterInstFieldKeyClusterKeyName] = struct{}{}
		fields[ClusterInstFieldKeyClusterKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.OperatorKey.Name != o.Key.CloudletKey.OperatorKey.Name {
		fields[ClusterInstFieldKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKeyOperatorKey] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[ClusterInstFieldKeyCloudletKeyName] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Key.Developer != o.Key.Developer {
		fields[ClusterInstFieldKeyDeveloper] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Flavor.Name != o.Flavor.Name {
		fields[ClusterInstFieldFlavorName] = struct{}{}
		fields[ClusterInstFieldFlavor] = struct{}{}
	}
	if m.State != o.State {
		fields[ClusterInstFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[ClusterInstFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[ClusterInstFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.CrmOverride != o.CrmOverride {
		fields[ClusterInstFieldCrmOverride] = struct{}{}
	}
	if m.IpAccess != o.IpAccess {
		fields[ClusterInstFieldIpAccess] = struct{}{}
	}
	if m.AllocatedIp != o.AllocatedIp {
		fields[ClusterInstFieldAllocatedIp] = struct{}{}
	}
	if m.Liveness != o.Liveness {
		fields[ClusterInstFieldLiveness] = struct{}{}
	}
	if m.Auto != o.Auto {
		fields[ClusterInstFieldAuto] = struct{}{}
	}
	if m.NodeFlavor != o.NodeFlavor {
		fields[ClusterInstFieldNodeFlavor] = struct{}{}
	}
	if m.NumMasters != o.NumMasters {
		fields[ClusterInstFieldNumMasters] = struct{}{}
	}
	if m.NumNodes != o.NumNodes {
		fields[ClusterInstFieldNumNodes] = struct{}{}
	}
	if m.Deployment != o.Deployment {
		fields[ClusterInstFieldDeployment] = struct{}{}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[ClusterInstFieldStatusTaskNumber] = struct{}{}
		fields[ClusterInstFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[ClusterInstFieldStatusMaxTasks] = struct{}{}
		fields[ClusterInstFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[ClusterInstFieldStatusTaskName] = struct{}{}
		fields[ClusterInstFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[ClusterInstFieldStatusStepName] = struct{}{}
		fields[ClusterInstFieldStatus] = struct{}{}
	}
	if m.ExternalVolumeSize != o.ExternalVolumeSize {
		fields[ClusterInstFieldExternalVolumeSize] = struct{}{}
	}
}

func (m *ClusterInst) CopyInFields(src *ClusterInst) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.ClusterKey.Name = src.Key.ClusterKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if _, set := fmap["2.2.1.1"]; set {
					m.Key.CloudletKey.OperatorKey.Name = src.Key.CloudletKey.OperatorKey.Name
				}
			}
			if _, set := fmap["2.2.2"]; set {
				m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
			}
		}
		if _, set := fmap["2.3"]; set {
			m.Key.Developer = src.Key.Developer
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			m.Flavor.Name = src.Flavor.Name
		}
	}
	if _, set := fmap["4"]; set {
		m.State = src.State
	}
	if _, set := fmap["5"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
		}
		copy(m.Errors, src.Errors)
	}
	if _, set := fmap["6"]; set {
		m.CrmOverride = src.CrmOverride
	}
	if _, set := fmap["7"]; set {
		m.IpAccess = src.IpAccess
	}
	if _, set := fmap["8"]; set {
		m.AllocatedIp = src.AllocatedIp
	}
	if _, set := fmap["9"]; set {
		m.Liveness = src.Liveness
	}
	if _, set := fmap["10"]; set {
		m.Auto = src.Auto
	}
	if _, set := fmap["11"]; set {
		m.NodeFlavor = src.NodeFlavor
	}
	if _, set := fmap["13"]; set {
		m.NumMasters = src.NumMasters
	}
	if _, set := fmap["14"]; set {
		m.NumNodes = src.NumNodes
	}
	if _, set := fmap["15"]; set {
		m.Deployment = src.Deployment
	}
	if _, set := fmap["16"]; set {
		if _, set := fmap["16.1"]; set {
			m.Status.TaskNumber = src.Status.TaskNumber
		}
		if _, set := fmap["16.2"]; set {
			m.Status.MaxTasks = src.Status.MaxTasks
		}
		if _, set := fmap["16.3"]; set {
			m.Status.TaskName = src.Status.TaskName
		}
		if _, set := fmap["16.4"]; set {
			m.Status.StepName = src.Status.StepName
		}
	}
	if _, set := fmap["17"]; set {
		m.ExternalVolumeSize = src.ExternalVolumeSize
	}
}

func (s *ClusterInst) HasFields() bool {
	return true
}

type ClusterInstStore struct {
	kvstore objstore.KVStore
}

func NewClusterInstStore(kvstore objstore.KVStore) ClusterInstStore {
	return ClusterInstStore{kvstore: kvstore}
}

func (s *ClusterInstStore) Create(ctx context.Context, m *ClusterInst, wait func(int64)) (*Result, error) {
	err := m.Validate(ClusterInstAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Update(ctx context.Context, m *ClusterInst, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ClusterInst
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Put(ctx context.Context, m *ClusterInst, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ClusterInstAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Delete(ctx context.Context, m *ClusterInst, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) LoadOne(key string) (*ClusterInst, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ClusterInst
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ClusterInst data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ClusterInstStore) STMGet(stm concurrency.STM, key *ClusterInstKey, buf *ClusterInst) bool {
	keystr := objstore.DbKeyString("ClusterInst", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ClusterInstStore) STMPut(stm concurrency.STM, obj *ClusterInst, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("ClusterInst", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("ClusterInst json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ClusterInstStore) STMDel(stm concurrency.STM, key *ClusterInstKey) {
	keystr := objstore.DbKeyString("ClusterInst", key)
	stm.Del(keystr)
}

func (m *ClusterInst) getKey() *ClusterInstKey {
	return &m.Key
}

func (m *ClusterInst) getKeyVal() ClusterInstKey {
	return m.Key
}

type ClusterInstKeyWatcher struct {
	cb func(ctx context.Context)
}

// ClusterInstCache caches ClusterInst objects in memory in a hash table
// and keeps them in sync with the database.
type ClusterInstCache struct {
	Objs        map[ClusterInstKey]*ClusterInst
	Mux         util.Mutex
	List        map[ClusterInstKey]struct{}
	NotifyCb    func(ctx context.Context, obj *ClusterInstKey, old *ClusterInst)
	UpdatedCb   func(ctx context.Context, old *ClusterInst, new *ClusterInst)
	KeyWatchers map[ClusterInstKey][]*ClusterInstKeyWatcher
}

func NewClusterInstCache() *ClusterInstCache {
	cache := ClusterInstCache{}
	InitClusterInstCache(&cache)
	return &cache
}

func InitClusterInstCache(cache *ClusterInstCache) {
	cache.Objs = make(map[ClusterInstKey]*ClusterInst)
	cache.KeyWatchers = make(map[ClusterInstKey][]*ClusterInstKeyWatcher)
}

func (c *ClusterInstCache) GetTypeString() string {
	return "ClusterInst"
}

func (c *ClusterInstCache) Get(key *ClusterInstKey, valbuf *ClusterInst) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ClusterInstCache) HasKey(key *ClusterInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ClusterInstCache) GetAllKeys(ctx context.Context, keys map[ClusterInstKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *ClusterInstCache) Update(ctx context.Context, in *ClusterInst, rev int64) {
	c.UpdateModFunc(ctx, in.getKey(), rev, func(old *ClusterInst) (*ClusterInst, bool) {
		return in, true
	})
}

func (c *ClusterInstCache) UpdateModFunc(ctx context.Context, key *ClusterInstKey, rev int64, modFunc func(old *ClusterInst) (new *ClusterInst, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ClusterInst{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.getKey(), old)
		}
	}
	c.Objs[new.getKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ClusterInst", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.getKey())
}

func (c *ClusterInstCache) Delete(ctx context.Context, in *ClusterInst, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.getKeyVal()]
	delete(c.Objs, in.getKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete ClusterInst", "key", in.getKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.getKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.getKey())
}

func (c *ClusterInstCache) Prune(ctx context.Context, validKeys map[ClusterInstKey]struct{}) {
	notify := make(map[ClusterInstKey]*ClusterInst)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ClusterInstCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ClusterInstCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *ClusterInstCache) Show(filter *ClusterInst, cb func(ret *ClusterInst) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ClusterInst", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ClusterInst", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ClusterInstGenericNotifyCb(fn func(key *ClusterInstKey, old *ClusterInst)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ClusterInstKey), obj.(*ClusterInst))
	}
}

func (c *ClusterInstCache) SetNotifyCb(fn func(ctx context.Context, obj *ClusterInstKey, old *ClusterInst)) {
	c.NotifyCb = fn
}

func (c *ClusterInstCache) SetUpdatedCb(fn func(ctx context.Context, old *ClusterInst, new *ClusterInst)) {
	c.UpdatedCb = fn
}

func (c *ClusterInstCache) WatchKey(key *ClusterInstKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ClusterInstKeyWatcher, 0)
	}
	watcher := ClusterInstKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ClusterInst", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ClusterInstCache) TriggerKeyWatchers(ctx context.Context, key *ClusterInstKey) {
	watchers := make([]*ClusterInstKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *ClusterInstCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := ClusterInst{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ClusterInst data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.getKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ClusterInstCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := ClusterInst{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ClusterInstKeyStringParse(keystr, obj.getKey())
	c.Delete(ctx, &obj, rev)
}

func (c *ClusterInstCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ClusterInstKey]struct{})
}

func (c *ClusterInstCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ClusterInstKey]*ClusterInst)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *ClusterInstCache) WaitForState(ctx context.Context, key *ClusterInstKey, targetState TrackedState, transitionStates map[TrackedState]struct{}, errorState TrackedState, timeout time.Duration, successMsg string, send func(*Result) error) error {
	curState := TrackedState_TRACKED_STATE_UNKNOWN
	done := make(chan bool, 1)
	failed := make(chan bool, 1)
	var err error

	cancel := c.WatchKey(key, func(ctx context.Context) {
		info := ClusterInst{}
		if c.Get(key, &info) {
			curState = info.State
		} else {
			curState = TrackedState_NOT_PRESENT
		}
		if send != nil {
			statusString := info.Status.ToString()
			var msg string
			if statusString != "" {
				msg = statusString
			} else {
				msg = TrackedState_CamelName[int32(curState)]
			}
			send(&Result{Message: msg})
		}
		log.SpanLog(ctx, log.DebugLevelApi, "watch event for ClusterInst")
		log.DebugLog(log.DebugLevelApi, "Watch event for ClusterInst", "key", key, "state", TrackedState_CamelName[int32(curState)], "status", info.Status)
		if curState == errorState {
			failed <- true
		} else if curState == targetState {
			done <- true
		}
	})
	// After setting up watch, check current state,
	// as it may have already changed to target state
	info := ClusterInst{}
	if c.Get(key, &info) {
		curState = info.State
	} else {
		curState = TrackedState_NOT_PRESENT
	}
	if curState == targetState {
		done <- true
	}

	select {
	case <-done:
		err = nil
		if successMsg != "" {
			send(&Result{Message: successMsg})
		}
	case <-failed:
		if c.Get(key, &info) {
			errs := strings.Join(info.Errors, ", ")
			err = fmt.Errorf("Encountered failures: %s", errs)
		} else {
			// this shouldn't happen, since only way to get here
			// is if info state is set to Error
			err = errors.New("Unknown failure")
		}
	case <-time.After(timeout):
		hasInfo := c.Get(key, &info)
		if hasInfo && info.State == errorState {
			// error may have been sent back before watch started
			errs := strings.Join(info.Errors, ", ")
			err = fmt.Errorf("Encountered failures: %s", errs)
		} else if _, found := transitionStates[info.State]; hasInfo && found {
			// no success response, but state is a valid transition
			// state. That means work is still in progress.
			// Notify user that this is not an error.
			// Do not undo since CRM is still busy.
			msg := fmt.Sprintf("Timed out while work still in progress state %s. Please use ShowClusterInst to check current status", TrackedState_CamelName[int32(info.State)])
			send(&Result{Message: msg})
			err = nil
		} else {
			err = fmt.Errorf("Timed out; expected state %s but is %s",
				TrackedState_CamelName[int32(targetState)],
				TrackedState_CamelName[int32(curState)])
		}
	}
	cancel()
	// note: do not close done/failed, garbage collector will deal with it.
	return err
}

func (m *ClusterInst) GetKey() objstore.ObjKey {
	return &m.Key
}

func CmpSortClusterInst(a ClusterInst, b ClusterInst) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ClusterInst) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Flavor.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if _, ok := CRMOverride_name[int32(m.CrmOverride)]; !ok {
		return errors.New("invalid CrmOverride")
	}
	if _, ok := IpAccess_name[int32(m.IpAccess)]; !ok {
		return errors.New("invalid IpAccess")
	}
	if _, ok := Liveness_name[int32(m.Liveness)]; !ok {
		return errors.New("invalid Liveness")
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreClusterInstFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "State")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Errors")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "CrmOverride")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "AllocatedIp")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NodeFlavor")
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "ExternalVolumeSize")
	}
	return cmpopts.IgnoreFields(ClusterInst{}, names...)
}

func (m *ClusterInstInfo) Matches(o *ClusterInstInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.State != 0 {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.Errors != nil {
		if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if len(m.Errors) != len(o.Errors) {
				return false
			}
			for i := 0; i < len(m.Errors); i++ {
				if o.Errors[i] != m.Errors[i] {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
	}
	return true
}

const ClusterInstInfoFieldKey = "2"
const ClusterInstInfoFieldKeyClusterKey = "2.1"
const ClusterInstInfoFieldKeyClusterKeyName = "2.1.1"
const ClusterInstInfoFieldKeyCloudletKey = "2.2"
const ClusterInstInfoFieldKeyCloudletKeyOperatorKey = "2.2.1"
const ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName = "2.2.1.1"
const ClusterInstInfoFieldKeyCloudletKeyName = "2.2.2"
const ClusterInstInfoFieldKeyDeveloper = "2.3"
const ClusterInstInfoFieldNotifyId = "3"
const ClusterInstInfoFieldState = "4"
const ClusterInstInfoFieldErrors = "5"
const ClusterInstInfoFieldStatus = "6"
const ClusterInstInfoFieldStatusTaskNumber = "6.1"
const ClusterInstInfoFieldStatusMaxTasks = "6.2"
const ClusterInstInfoFieldStatusTaskName = "6.3"
const ClusterInstInfoFieldStatusStepName = "6.4"

var ClusterInstInfoAllFields = []string{
	ClusterInstInfoFieldKeyClusterKeyName,
	ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName,
	ClusterInstInfoFieldKeyCloudletKeyName,
	ClusterInstInfoFieldKeyDeveloper,
	ClusterInstInfoFieldNotifyId,
	ClusterInstInfoFieldState,
	ClusterInstInfoFieldErrors,
	ClusterInstInfoFieldStatusTaskNumber,
	ClusterInstInfoFieldStatusMaxTasks,
	ClusterInstInfoFieldStatusTaskName,
	ClusterInstInfoFieldStatusStepName,
}

var ClusterInstInfoAllFieldsMap = map[string]struct{}{
	ClusterInstInfoFieldKeyClusterKeyName:             struct{}{},
	ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName: struct{}{},
	ClusterInstInfoFieldKeyCloudletKeyName:            struct{}{},
	ClusterInstInfoFieldKeyDeveloper:                  struct{}{},
	ClusterInstInfoFieldNotifyId:                      struct{}{},
	ClusterInstInfoFieldState:                         struct{}{},
	ClusterInstInfoFieldErrors:                        struct{}{},
	ClusterInstInfoFieldStatusTaskNumber:              struct{}{},
	ClusterInstInfoFieldStatusMaxTasks:                struct{}{},
	ClusterInstInfoFieldStatusTaskName:                struct{}{},
	ClusterInstInfoFieldStatusStepName:                struct{}{},
}

var ClusterInstInfoAllFieldsStringMap = map[string]string{
	ClusterInstInfoFieldKeyClusterKeyName:             "Cluster Inst Info Field Key Cluster Key Name",
	ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName: "Cluster Inst Info Field Key Cloudlet Key Operator Key Name",
	ClusterInstInfoFieldKeyCloudletKeyName:            "Cluster Inst Info Field Key Cloudlet Key Name",
	ClusterInstInfoFieldKeyDeveloper:                  "Cluster Inst Info Field Key Developer",
	ClusterInstInfoFieldNotifyId:                      "Cluster Inst Info Field Notify Id",
	ClusterInstInfoFieldState:                         "Cluster Inst Info Field State",
	ClusterInstInfoFieldErrors:                        "Cluster Inst Info Field Errors",
	ClusterInstInfoFieldStatusTaskNumber:              "Cluster Inst Info Field Status Task Number",
	ClusterInstInfoFieldStatusMaxTasks:                "Cluster Inst Info Field Status Max Tasks",
	ClusterInstInfoFieldStatusTaskName:                "Cluster Inst Info Field Status Task Name",
	ClusterInstInfoFieldStatusStepName:                "Cluster Inst Info Field Status Step Name",
}

func (m *ClusterInstInfo) IsKeyField(s string) bool {
	return strings.HasPrefix(s, ClusterInstInfoFieldKey+".")
}

func (m *ClusterInstInfo) DiffFields(o *ClusterInstInfo, fields map[string]struct{}) {
	if m.Key.ClusterKey.Name != o.Key.ClusterKey.Name {
		fields[ClusterInstInfoFieldKeyClusterKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyClusterKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.OperatorKey.Name != o.Key.CloudletKey.OperatorKey.Name {
		fields[ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKeyOperatorKey] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[ClusterInstInfoFieldKeyCloudletKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.Key.Developer != o.Key.Developer {
		fields[ClusterInstInfoFieldKeyDeveloper] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[ClusterInstInfoFieldNotifyId] = struct{}{}
	}
	if m.State != o.State {
		fields[ClusterInstInfoFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[ClusterInstInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[ClusterInstInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.Status.TaskNumber != o.Status.TaskNumber {
		fields[ClusterInstInfoFieldStatusTaskNumber] = struct{}{}
		fields[ClusterInstInfoFieldStatus] = struct{}{}
	}
	if m.Status.MaxTasks != o.Status.MaxTasks {
		fields[ClusterInstInfoFieldStatusMaxTasks] = struct{}{}
		fields[ClusterInstInfoFieldStatus] = struct{}{}
	}
	if m.Status.TaskName != o.Status.TaskName {
		fields[ClusterInstInfoFieldStatusTaskName] = struct{}{}
		fields[ClusterInstInfoFieldStatus] = struct{}{}
	}
	if m.Status.StepName != o.Status.StepName {
		fields[ClusterInstInfoFieldStatusStepName] = struct{}{}
		fields[ClusterInstInfoFieldStatus] = struct{}{}
	}
}

func (m *ClusterInstInfo) CopyInFields(src *ClusterInstInfo) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.ClusterKey.Name = src.Key.ClusterKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if _, set := fmap["2.2.1.1"]; set {
					m.Key.CloudletKey.OperatorKey.Name = src.Key.CloudletKey.OperatorKey.Name
				}
			}
			if _, set := fmap["2.2.2"]; set {
				m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
			}
		}
		if _, set := fmap["2.3"]; set {
			m.Key.Developer = src.Key.Developer
		}
	}
	if _, set := fmap["3"]; set {
		m.NotifyId = src.NotifyId
	}
	if _, set := fmap["4"]; set {
		m.State = src.State
	}
	if _, set := fmap["5"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
		}
		copy(m.Errors, src.Errors)
	}
	if _, set := fmap["6"]; set {
		if _, set := fmap["6.1"]; set {
			m.Status.TaskNumber = src.Status.TaskNumber
		}
		if _, set := fmap["6.2"]; set {
			m.Status.MaxTasks = src.Status.MaxTasks
		}
		if _, set := fmap["6.3"]; set {
			m.Status.TaskName = src.Status.TaskName
		}
		if _, set := fmap["6.4"]; set {
			m.Status.StepName = src.Status.StepName
		}
	}
}

func (s *ClusterInstInfo) HasFields() bool {
	return true
}

type ClusterInstInfoStore struct {
	kvstore objstore.KVStore
}

func NewClusterInstInfoStore(kvstore objstore.KVStore) ClusterInstInfoStore {
	return ClusterInstInfoStore{kvstore: kvstore}
}

func (s *ClusterInstInfoStore) Create(ctx context.Context, m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(ClusterInstInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Update(ctx context.Context, m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ClusterInstInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Put(ctx context.Context, m *ClusterInstInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(ClusterInstInfoAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Delete(ctx context.Context, m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) LoadOne(key string) (*ClusterInstInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ClusterInstInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ClusterInstInfo data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ClusterInstInfoStore) STMGet(stm concurrency.STM, key *ClusterInstKey, buf *ClusterInstInfo) bool {
	keystr := objstore.DbKeyString("ClusterInstInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ClusterInstInfoStore) STMPut(stm concurrency.STM, obj *ClusterInstInfo, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("ClusterInstInfo", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("ClusterInstInfo json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *ClusterInstInfoStore) STMDel(stm concurrency.STM, key *ClusterInstKey) {
	keystr := objstore.DbKeyString("ClusterInstInfo", key)
	stm.Del(keystr)
}

func (m *ClusterInstInfo) getKey() *ClusterInstKey {
	return &m.Key
}

func (m *ClusterInstInfo) getKeyVal() ClusterInstKey {
	return m.Key
}

type ClusterInstInfoKeyWatcher struct {
	cb func(ctx context.Context)
}

// ClusterInstInfoCache caches ClusterInstInfo objects in memory in a hash table
// and keeps them in sync with the database.
type ClusterInstInfoCache struct {
	Objs        map[ClusterInstKey]*ClusterInstInfo
	Mux         util.Mutex
	List        map[ClusterInstKey]struct{}
	NotifyCb    func(ctx context.Context, obj *ClusterInstKey, old *ClusterInstInfo)
	UpdatedCb   func(ctx context.Context, old *ClusterInstInfo, new *ClusterInstInfo)
	KeyWatchers map[ClusterInstKey][]*ClusterInstInfoKeyWatcher
}

func NewClusterInstInfoCache() *ClusterInstInfoCache {
	cache := ClusterInstInfoCache{}
	InitClusterInstInfoCache(&cache)
	return &cache
}

func InitClusterInstInfoCache(cache *ClusterInstInfoCache) {
	cache.Objs = make(map[ClusterInstKey]*ClusterInstInfo)
	cache.KeyWatchers = make(map[ClusterInstKey][]*ClusterInstInfoKeyWatcher)
}

func (c *ClusterInstInfoCache) GetTypeString() string {
	return "ClusterInstInfo"
}

func (c *ClusterInstInfoCache) Get(key *ClusterInstKey, valbuf *ClusterInstInfo) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ClusterInstInfoCache) HasKey(key *ClusterInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ClusterInstInfoCache) GetAllKeys(ctx context.Context, keys map[ClusterInstKey]context.Context) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = ctx
	}
}

func (c *ClusterInstInfoCache) Update(ctx context.Context, in *ClusterInstInfo, rev int64) {
	c.UpdateModFunc(ctx, in.getKey(), rev, func(old *ClusterInstInfo) (*ClusterInstInfo, bool) {
		return in, true
	})
}

func (c *ClusterInstInfoCache) UpdateModFunc(ctx context.Context, key *ClusterInstKey, rev int64, modFunc func(old *ClusterInstInfo) (new *ClusterInstInfo, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ClusterInstInfo{}
			*newCopy = *new
			defer c.UpdatedCb(ctx, old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(ctx, new.getKey(), old)
		}
	}
	c.Objs[new.getKeyVal()] = new
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ClusterInstInfo", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.getKey())
}

func (c *ClusterInstInfoCache) Delete(ctx context.Context, in *ClusterInstInfo, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.getKeyVal()]
	delete(c.Objs, in.getKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete ClusterInstInfo", "key", in.getKey(), "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.getKey(), old)
	}
	c.TriggerKeyWatchers(ctx, in.getKey())
}

func (c *ClusterInstInfoCache) Prune(ctx context.Context, validKeys map[ClusterInstKey]struct{}) {
	notify := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *ClusterInstInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ClusterInstInfoCache) Flush(ctx context.Context, notifyId int64) {
	flushed := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if val.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(ctx, &key, old)
			}
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (c *ClusterInstInfoCache) Show(filter *ClusterInstInfo, cb func(ret *ClusterInstInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ClusterInstInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ClusterInstInfo", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ClusterInstInfoGenericNotifyCb(fn func(key *ClusterInstKey, old *ClusterInstInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ClusterInstKey), obj.(*ClusterInstInfo))
	}
}

func (c *ClusterInstInfoCache) SetNotifyCb(fn func(ctx context.Context, obj *ClusterInstKey, old *ClusterInstInfo)) {
	c.NotifyCb = fn
}

func (c *ClusterInstInfoCache) SetUpdatedCb(fn func(ctx context.Context, old *ClusterInstInfo, new *ClusterInstInfo)) {
	c.UpdatedCb = fn
}

func (c *ClusterInstInfoCache) WatchKey(key *ClusterInstKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ClusterInstInfoKeyWatcher, 0)
	}
	watcher := ClusterInstInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ClusterInstInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ClusterInstInfoCache) TriggerKeyWatchers(ctx context.Context, key *ClusterInstKey) {
	watchers := make([]*ClusterInstInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}
func (c *ClusterInstInfoCache) SyncUpdate(ctx context.Context, key, val []byte, rev int64) {
	obj := ClusterInstInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ClusterInstInfo data", "val", string(val))
		return
	}
	c.Update(ctx, &obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.getKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ClusterInstInfoCache) SyncDelete(ctx context.Context, key []byte, rev int64) {
	obj := ClusterInstInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ClusterInstKeyStringParse(keystr, obj.getKey())
	c.Delete(ctx, &obj, rev)
}

func (c *ClusterInstInfoCache) SyncListStart(ctx context.Context) {
	c.List = make(map[ClusterInstKey]struct{})
}

func (c *ClusterInstInfoCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(ctx, &key, val)
			c.TriggerKeyWatchers(ctx, &key)
		}
	}
}

func (m *ClusterInstInfo) GetKey() objstore.ObjKey {
	return &m.Key
}

func CmpSortClusterInstInfo(a ClusterInstInfo, b ClusterInstInfo) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ClusterInstInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if err := m.Status.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func IgnoreClusterInstInfoFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "NotifyId")
	}
	return cmpopts.IgnoreFields(ClusterInstInfo{}, names...)
}

func (m *ClusterInstKey) Size() (n int) {
	var l int
	_ = l
	l = m.ClusterKey.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovClusterinst(uint64(l))
	}
	return n
}

func (m *ClusterInst) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	l = m.Flavor.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	if m.State != 0 {
		n += 1 + sovClusterinst(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	if m.CrmOverride != 0 {
		n += 1 + sovClusterinst(uint64(m.CrmOverride))
	}
	if m.IpAccess != 0 {
		n += 1 + sovClusterinst(uint64(m.IpAccess))
	}
	l = len(m.AllocatedIp)
	if l > 0 {
		n += 1 + l + sovClusterinst(uint64(l))
	}
	if m.Liveness != 0 {
		n += 1 + sovClusterinst(uint64(m.Liveness))
	}
	if m.Auto {
		n += 2
	}
	l = len(m.NodeFlavor)
	if l > 0 {
		n += 1 + l + sovClusterinst(uint64(l))
	}
	if m.NumMasters != 0 {
		n += 1 + sovClusterinst(uint64(m.NumMasters))
	}
	if m.NumNodes != 0 {
		n += 1 + sovClusterinst(uint64(m.NumNodes))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovClusterinst(uint64(l))
	}
	l = m.Status.Size()
	n += 2 + l + sovClusterinst(uint64(l))
	if m.ExternalVolumeSize != 0 {
		n += 2 + sovClusterinst(uint64(m.ExternalVolumeSize))
	}
	return n
}

func (m *ClusterInstInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovClusterinst(uint64(m.NotifyId))
	}
	if m.State != 0 {
		n += 1 + sovClusterinst(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	return n
}

func sovClusterinst(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClusterinst(x uint64) (n int) {
	return sovClusterinst(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterInstKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInstKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInstKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TrackedState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmOverride", wireType)
			}
			m.CrmOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrmOverride |= (CRMOverride(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAccess", wireType)
			}
			m.IpAccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpAccess |= (IpAccess(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveness", wireType)
			}
			m.Liveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liveness |= (Liveness(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auto = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFlavor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeFlavor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMasters", wireType)
			}
			m.NumMasters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumMasters |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalVolumeSize", wireType)
			}
			m.ExternalVolumeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalVolumeSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInstInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInstInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInstInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TrackedState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterinst(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClusterinst
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClusterinst
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClusterinst(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClusterinst = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterinst   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("clusterinst.proto", fileDescriptorClusterinst) }

var fileDescriptorClusterinst = []byte{
	// 1070 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0x24, 0x8e, 0xb1, 0x67, 0x9d, 0xa4, 0x9e, 0xa4, 0x61, 0x6a, 0xaa, 0xc4, 0xb2, 0x00,
	0x59, 0x68, 0xe3, 0x2d, 0x41, 0x14, 0x14, 0xb5, 0xaa, 0x92, 0x06, 0x24, 0x2b, 0x24, 0x95, 0x1c,
	0x5a, 0x89, 0x93, 0xb5, 0xd9, 0x7d, 0x76, 0x56, 0xdd, 0xdd, 0x59, 0xf6, 0x87, 0x53, 0xf7, 0x84,
	0xb8, 0x70, 0x43, 0xa8, 0x1c, 0x40, 0x20, 0xa1, 0x5e, 0x90, 0x7a, 0xe0, 0x50, 0x71, 0x84, 0x7f,
	0x20, 0xc7, 0x4a, 0x5c, 0x10, 0x07, 0x54, 0x22, 0x0e, 0xa8, 0x27, 0xa4, 0xac, 0x05, 0x47, 0x34,
	0xb3, 0x3f, 0xbc, 0xb6, 0x43, 0x55, 0x2a, 0xa4, 0x5e, 0x56, 0x3b, 0xef, 0xfb, 0xde, 0x7b, 0xdf,
	0xcc, 0x9b, 0xf7, 0x06, 0x97, 0x35, 0x33, 0xf0, 0x7c, 0x70, 0x0d, 0xdb, 0xf3, 0x1b, 0x8e, 0xcb,
	0x7c, 0x46, 0x8a, 0xa0, 0x77, 0x41, 0xfc, 0x56, 0x2e, 0x74, 0x19, 0xeb, 0x9a, 0xa0, 0xa8, 0x8e,
	0xa1, 0xa8, 0xb6, 0xcd, 0x7c, 0xd5, 0x37, 0x98, 0xed, 0x45, 0xc4, 0xca, 0xdb, 0x5d, 0xc3, 0x3f,
	0x08, 0xf6, 0x1b, 0x1a, 0xb3, 0x14, 0x8b, 0xed, 0x1b, 0x26, 0x77, 0xbc, 0xad, 0xf0, 0xef, 0xaa,
	0x66, 0xb2, 0x40, 0x57, 0x04, 0xaf, 0x0b, 0x76, 0xfa, 0x13, 0x7b, 0x96, 0x5c, 0xf0, 0x02, 0xd3,
	0x4f, 0x56, 0x1d, 0x53, 0xed, 0x31, 0x37, 0x5e, 0xcd, 0xc6, 0x8a, 0xe2, 0xe5, 0x9c, 0x88, 0x64,
	0x42, 0x4a, 0xd6, 0x98, 0x65, 0xb1, 0x24, 0xd0, 0x62, 0x97, 0x75, 0x99, 0xf8, 0x55, 0xf8, 0x5f,
	0x64, 0xad, 0xfd, 0x88, 0xf0, 0xdc, 0xb5, 0x28, 0x4a, 0xd3, 0xf6, 0xfc, 0x6d, 0xe8, 0x93, 0xcb,
	0x58, 0x8a, 0xe3, 0xb6, 0x6f, 0x41, 0x9f, 0xa2, 0x2a, 0xaa, 0x4b, 0x6b, 0xe7, 0x1a, 0xe9, 0x56,
	0x1b, 0x31, 0x7f, 0x1b, 0xfa, 0x9b, 0xb9, 0xa3, 0x5f, 0x57, 0xce, 0xb4, 0xb0, 0x96, 0x5a, 0xc8,
	0x55, 0x5c, 0x4a, 0x64, 0x08, 0xf7, 0x29, 0xe1, 0xbe, 0x34, 0xe2, 0x1e, 0xc1, 0x43, 0x7f, 0x49,
	0x1b, 0x9a, 0xc8, 0x05, 0x5c, 0xd4, 0xa1, 0x07, 0x26, 0x73, 0xc0, 0xa5, 0xd3, 0x55, 0x54, 0x2f,
	0xb6, 0x86, 0x86, 0xf5, 0xd2, 0x1f, 0x27, 0x14, 0xfd, 0x7d, 0x42, 0xd1, 0x83, 0x7b, 0x2b, 0xa8,
	0xf6, 0x5d, 0x01, 0x4b, 0x19, 0xf5, 0x64, 0x09, 0xe7, 0x3b, 0x06, 0x98, 0xba, 0x47, 0x51, 0x75,
	0xba, 0x5e, 0x6c, 0xc5, 0x2b, 0xf2, 0x3a, 0x9e, 0x1e, 0x6a, 0x39, 0x3f, 0xb9, 0x95, 0x78, 0xeb,
	0xb1, 0x1c, 0xce, 0x25, 0x97, 0x70, 0x3e, 0x3a, 0x6b, 0xa1, 0x41, 0x5a, 0x5b, 0xcc, 0x78, 0xbd,
	0x2b, 0x00, 0xee, 0x50, 0xb8, 0x1f, 0x52, 0x24, 0x9c, 0x62, 0x36, 0xb9, 0x8c, 0x67, 0x3c, 0x5f,
	0xf5, 0x81, 0xe6, 0xaa, 0xa8, 0x3e, 0xb7, 0xf6, 0x62, 0xc6, 0xed, 0x7d, 0x57, 0xd5, 0x6e, 0x81,
	0xbe, 0xc7, 0xe1, 0xcd, 0x59, 0xee, 0x79, 0xf7, 0xfb, 0xf3, 0x33, 0x36, 0xd3, 0x2c, 0xa7, 0x15,
	0x39, 0x91, 0x57, 0x70, 0x1e, 0x5c, 0x97, 0xb9, 0x1e, 0x9d, 0xe1, 0x1b, 0x18, 0x67, 0xc5, 0x20,
	0xd9, 0xc2, 0x25, 0xcd, 0xb5, 0xda, 0xac, 0x07, 0xae, 0x6b, 0xe8, 0x40, 0xf3, 0x22, 0xd7, 0xc8,
	0x21, 0xb7, 0x76, 0xae, 0xc7, 0xe8, 0x66, 0x71, 0x18, 0x40, 0xd2, 0x5c, 0x2b, 0xb1, 0x93, 0x4b,
	0xb8, 0x68, 0x38, 0x6d, 0x55, 0xd3, 0xc0, 0xf3, 0xe8, 0x0b, 0x22, 0xc4, 0x42, 0x26, 0x44, 0xd3,
	0xd9, 0x10, 0xd0, 0x66, 0x8e, 0x8b, 0x68, 0x15, 0x8c, 0x78, 0x4d, 0x2e, 0xe2, 0x92, 0x6a, 0x9a,
	0x4c, 0x53, 0x7d, 0xd0, 0xdb, 0x86, 0x43, 0x0b, 0xbc, 0x48, 0xe3, 0x52, 0xa5, 0x94, 0xd2, 0x74,
	0xc8, 0x9b, 0xb8, 0x60, 0x1a, 0x3d, 0xb0, 0x79, 0xa2, 0xe2, 0x44, 0xa2, 0xf7, 0x62, 0x28, 0x49,
	0x94, 0x50, 0x09, 0xc5, 0x39, 0x35, 0xf0, 0x19, 0xc5, 0x55, 0x54, 0x2f, 0xc4, 0xa8, 0xb0, 0x90,
	0x06, 0x96, 0x6c, 0xa6, 0x43, 0x3b, 0x2e, 0x91, 0x74, 0x9a, 0x02, 0xcc, 0x19, 0x51, 0xa9, 0xc8,
	0x0a, 0x96, 0xec, 0xc0, 0x6a, 0x5b, 0x2a, 0xaf, 0xb6, 0x47, 0x67, 0xab, 0xa8, 0x3e, 0xdb, 0xc2,
	0x76, 0x60, 0xed, 0x44, 0x16, 0xf2, 0x12, 0x2e, 0x72, 0x02, 0x77, 0xf1, 0xe8, 0x9c, 0x80, 0x0b,
	0x76, 0x60, 0xed, 0xf2, 0x35, 0x79, 0x19, 0x63, 0x1d, 0x1c, 0x93, 0xf5, 0x2d, 0xb0, 0x7d, 0x3a,
	0x2f, 0x92, 0x45, 0x6a, 0x32, 0x76, 0xf2, 0x16, 0xce, 0xf3, 0x22, 0x06, 0x1e, 0x3d, 0x3b, 0xd1,
	0x32, 0x7b, 0x02, 0x68, 0xda, 0x1d, 0x96, 0xbd, 0x32, 0x11, 0x9d, 0x5c, 0xc5, 0x8b, 0x70, 0xdb,
	0x07, 0xd7, 0x56, 0xcd, 0x76, 0x8f, 0x99, 0x81, 0x05, 0x6d, 0xcf, 0xb8, 0x03, 0xb4, 0x5c, 0x45,
	0xf5, 0xdc, 0xf8, 0xae, 0x48, 0x42, 0xbd, 0x29, 0x98, 0x7b, 0xc6, 0x1d, 0x58, 0xff, 0x76, 0x8a,
	0x77, 0xc5, 0x9f, 0x27, 0x14, 0x7d, 0x14, 0x52, 0xf4, 0x59, 0x48, 0xd1, 0x97, 0x21, 0x45, 0x0f,
	0x42, 0x8a, 0x7e, 0x08, 0x69, 0x29, 0x7b, 0xed, 0x8e, 0x42, 0x8a, 0x7e, 0xe6, 0xf1, 0x06, 0x74,
	0x3b, 0x39, 0x76, 0x79, 0x23, 0xf0, 0x99, 0x1c, 0x1d, 0x44, 0x74, 0x5c, 0xf2, 0x6e, 0x7a, 0x72,
	0xf2, 0x3b, 0x13, 0xe9, 0xe4, 0x8d, 0x61, 0x65, 0xe5, 0x68, 0x63, 0x5f, 0x0d, 0xe8, 0xa7, 0x28,
	0x1e, 0x02, 0x57, 0xb6, 0xa1, 0x9f, 0x19, 0x11, 0x8d, 0x5d, 0xd5, 0x02, 0x39, 0x69, 0xf0, 0x18,
	0x4c, 0xbb, 0x3d, 0x42, 0x79, 0x67, 0xab, 0x3e, 0x73, 0x27, 0xd0, 0xeb, 0x31, 0x90, 0x32, 0xd3,
	0x41, 0x20, 0xa8, 0x5b, 0xc9, 0x4a, 0x8e, 0xee, 0xc1, 0x95, 0x48, 0xb3, 0xa0, 0xfe, 0x32, 0xa0,
	0xf3, 0x63, 0xe1, 0x6a, 0xdf, 0x4c, 0xe1, 0xf9, 0x4c, 0xc7, 0xf3, 0x72, 0xfc, 0x9f, 0x23, 0xe3,
	0x55, 0x5c, 0xb4, 0x99, 0x6f, 0x74, 0xfa, 0x6d, 0x43, 0x17, 0x53, 0x63, 0x3a, 0xdb, 0x7a, 0x85,
	0x08, 0x6b, 0xea, 0x64, 0xf5, 0xe9, 0x46, 0x44, 0x32, 0x13, 0x96, 0x46, 0x67, 0x42, 0x3a, 0x04,
	0x86, 0xf7, 0x2d, 0xff, 0x9f, 0xee, 0xdb, 0x3a, 0x1d, 0xbf, 0x2d, 0xf7, 0x42, 0x8a, 0x1e, 0x85,
	0x14, 0xad, 0xfd, 0x95, 0x1b, 0x79, 0x0d, 0x36, 0x1c, 0x83, 0x7c, 0x8d, 0x70, 0xf9, 0x9a, 0x0b,
	0xaa, 0x0f, 0x23, 0x83, 0xf6, 0xf4, 0x03, 0xa9, 0x94, 0x33, 0xf6, 0x96, 0x78, 0xb8, 0x6a, 0x1f,
	0x3c, 0x0e, 0xa9, 0xd2, 0x02, 0x8f, 0x05, 0xae, 0x96, 0x8d, 0xe1, 0xc9, 0x1b, 0x1a, 0x7f, 0x22,
	0x77, 0x54, 0x5b, 0xed, 0x82, 0x3c, 0x52, 0xcf, 0xfb, 0x03, 0x8a, 0x1e, 0x0e, 0x28, 0xfa, 0xf8,
	0xa7, 0xdf, 0x3f, 0x9f, 0xa2, 0xb5, 0x05, 0x45, 0x13, 0x0a, 0x94, 0xcc, 0x0b, 0xbc, 0x8e, 0x5e,
	0xbb, 0x88, 0xc8, 0x17, 0x08, 0x97, 0xb7, 0xc0, 0x84, 0x67, 0x56, 0x77, 0xe3, 0x19, 0xd5, 0xa5,
	0xca, 0x74, 0x91, 0xfd, 0x74, 0x65, 0x37, 0x1c, 0x5d, 0x7d, 0x7e, 0xca, 0x02, 0x91, 0x7d, 0x52,
	0xd9, 0x5d, 0x84, 0xe7, 0xf7, 0x0e, 0xd8, 0xe1, 0xd3, 0xe8, 0xfa, 0x17, 0x7b, 0x6d, 0xe7, 0x71,
	0x48, 0x57, 0x9f, 0x20, 0xee, 0xa6, 0x01, 0x87, 0xa3, 0xd2, 0x84, 0xac, 0xa5, 0x5a, 0x59, 0xf1,
	0x0e, 0xd8, 0xe1, 0x84, 0xa8, 0xb5, 0x4f, 0x10, 0x26, 0x63, 0xad, 0xc9, 0x6f, 0xdf, 0x87, 0x78,
	0x61, 0x4c, 0xaa, 0x68, 0xda, 0xca, 0xe9, 0xb2, 0x38, 0x56, 0x79, 0x02, 0x56, 0xab, 0x0a, 0x15,
	0x95, 0xda, 0xb9, 0x09, 0x15, 0x86, 0xdd, 0x61, 0x42, 0xc9, 0xe6, 0xd9, 0xa3, 0xdf, 0x96, 0xcf,
	0x1c, 0x1d, 0x2f, 0xa3, 0x87, 0xc7, 0xcb, 0xe8, 0xd1, 0xf1, 0x32, 0xda, 0xcf, 0x8b, 0x60, 0x6f,
	0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x76, 0xa0, 0x43, 0xbb, 0x01, 0x0a, 0x00, 0x00,
}
