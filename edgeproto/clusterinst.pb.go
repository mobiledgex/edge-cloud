// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import "errors"
import "time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ClusterInstKey uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).
type ClusterInstKey struct {
	// Cluster key
	ClusterKey ClusterKey `protobuf:"bytes,1,opt,name=cluster_key,json=clusterKey" json:"cluster_key"`
	// Cloudlet on which the Cluster is instantiated
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
}

func (m *ClusterInstKey) Reset()                    { *m = ClusterInstKey{} }
func (m *ClusterInstKey) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstKey) ProtoMessage()               {}
func (*ClusterInstKey) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{0} }

// ClusterInst is an instance of a Cluster on a Cloudlet. It is defined by a Cluster plus a Cloudlet key. This separation of the definition of the Cluster versus its instance is unique to Mobiledgex, and allows the Developer to provide the Cluster definition, while either the Developer may statically define the instances, or the Mobiledgex platform may dynamically create and destroy instances in response to demand.
// When a Cluster is instantiated on a Cloudlet, the user may override the default ClusterFlavor of the Cluster. This allows for an instance in one location to be provided more resources than an instance in other locations, in expectation of different demands in different locations.
type ClusterInst struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique key
	Key ClusterInstKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// ClusterFlavor of the Cluster
	Flavor ClusterFlavorKey `protobuf:"bytes,3,opt,name=flavor" json:"flavor"`
	// Liveness of instance (see Liveness)
	Liveness Liveness `protobuf:"varint,9,opt,name=liveness,proto3,enum=edgeproto.Liveness" json:"liveness,omitempty"`
	// Auto is set to true when automatically created by back-end (internal use only)
	Auto bool `protobuf:"varint,10,opt,name=auto,proto3" json:"auto,omitempty"`
	// State of the cluster instance
	State TrackedState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
	Errors []string `protobuf:"bytes,5,rep,name=errors" json:"errors,omitempty"`
	// Override actions to CRM
	CrmOverride CRMOverride `protobuf:"varint,6,opt,name=crm_override,json=crmOverride,proto3,enum=edgeproto.CRMOverride" json:"crm_override,omitempty"`
}

func (m *ClusterInst) Reset()                    { *m = ClusterInst{} }
func (m *ClusterInst) String() string            { return proto.CompactTextString(m) }
func (*ClusterInst) ProtoMessage()               {}
func (*ClusterInst) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{1} }

// ClusterInstInfo provides information from the Cloudlet Resource Manager about the state of the ClusterInst on the Cloudlet. Whereas the ClusterInst defines the intent of instantiating a Cluster on a Cloudlet, the ClusterInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
type ClusterInstInfo struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key ClusterInstKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Id of client assigned by server (internal use only)
	NotifyId int64 `protobuf:"varint,3,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	// State of the cluster instance
	State TrackedState `protobuf:"varint,4,opt,name=state,proto3,enum=edgeproto.TrackedState" json:"state,omitempty"`
	// Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
	Errors []string `protobuf:"bytes,5,rep,name=errors" json:"errors,omitempty"`
}

func (m *ClusterInstInfo) Reset()                    { *m = ClusterInstInfo{} }
func (m *ClusterInstInfo) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstInfo) ProtoMessage()               {}
func (*ClusterInstInfo) Descriptor() ([]byte, []int) { return fileDescriptorClusterinst, []int{2} }

func init() {
	proto.RegisterType((*ClusterInstKey)(nil), "edgeproto.ClusterInstKey")
	proto.RegisterType((*ClusterInst)(nil), "edgeproto.ClusterInst")
	proto.RegisterType((*ClusterInstInfo)(nil), "edgeproto.ClusterInstInfo")
}
func (this *ClusterInstKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.ClusterInstKey{")
	s = append(s, "ClusterKey: "+strings.Replace(this.ClusterKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClusterinst(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterInstApi service

type ClusterInstApiClient interface {
	// Create a Cluster instance
	CreateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_CreateClusterInstClient, error)
	// Delete a Cluster instance
	DeleteClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_DeleteClusterInstClient, error)
	// Update a Cluster instance
	UpdateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_UpdateClusterInstClient, error)
	// Show Cluster instances
	ShowClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_ShowClusterInstClient, error)
}

type clusterInstApiClient struct {
	cc *grpc.ClientConn
}

func NewClusterInstApiClient(cc *grpc.ClientConn) ClusterInstApiClient {
	return &clusterInstApiClient{cc}
}

func (c *clusterInstApiClient) CreateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_CreateClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ClusterInstApi/CreateClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiCreateClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_CreateClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiCreateClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiCreateClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) DeleteClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_DeleteClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[1], c.cc, "/edgeproto.ClusterInstApi/DeleteClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiDeleteClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_DeleteClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiDeleteClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiDeleteClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) UpdateClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_UpdateClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[2], c.cc, "/edgeproto.ClusterInstApi/UpdateClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiUpdateClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_UpdateClusterInstClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type clusterInstApiUpdateClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiUpdateClusterInstClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterInstApiClient) ShowClusterInst(ctx context.Context, in *ClusterInst, opts ...grpc.CallOption) (ClusterInstApi_ShowClusterInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstApi_serviceDesc.Streams[3], c.cc, "/edgeproto.ClusterInstApi/ShowClusterInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstApiShowClusterInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstApi_ShowClusterInstClient interface {
	Recv() (*ClusterInst, error)
	grpc.ClientStream
}

type clusterInstApiShowClusterInstClient struct {
	grpc.ClientStream
}

func (x *clusterInstApiShowClusterInstClient) Recv() (*ClusterInst, error) {
	m := new(ClusterInst)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterInstApi service

type ClusterInstApiServer interface {
	// Create a Cluster instance
	CreateClusterInst(*ClusterInst, ClusterInstApi_CreateClusterInstServer) error
	// Delete a Cluster instance
	DeleteClusterInst(*ClusterInst, ClusterInstApi_DeleteClusterInstServer) error
	// Update a Cluster instance
	UpdateClusterInst(*ClusterInst, ClusterInstApi_UpdateClusterInstServer) error
	// Show Cluster instances
	ShowClusterInst(*ClusterInst, ClusterInstApi_ShowClusterInstServer) error
}

func RegisterClusterInstApiServer(s *grpc.Server, srv ClusterInstApiServer) {
	s.RegisterService(&_ClusterInstApi_serviceDesc, srv)
}

func _ClusterInstApi_CreateClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).CreateClusterInst(m, &clusterInstApiCreateClusterInstServer{stream})
}

type ClusterInstApi_CreateClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiCreateClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiCreateClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_DeleteClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).DeleteClusterInst(m, &clusterInstApiDeleteClusterInstServer{stream})
}

type ClusterInstApi_DeleteClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiDeleteClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiDeleteClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_UpdateClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).UpdateClusterInst(m, &clusterInstApiUpdateClusterInstServer{stream})
}

type ClusterInstApi_UpdateClusterInstServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type clusterInstApiUpdateClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiUpdateClusterInstServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterInstApi_ShowClusterInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstApiServer).ShowClusterInst(m, &clusterInstApiShowClusterInstServer{stream})
}

type ClusterInstApi_ShowClusterInstServer interface {
	Send(*ClusterInst) error
	grpc.ServerStream
}

type clusterInstApiShowClusterInstServer struct {
	grpc.ServerStream
}

func (x *clusterInstApiShowClusterInstServer) Send(m *ClusterInst) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterInstApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ClusterInstApi",
	HandlerType: (*ClusterInstApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateClusterInst",
			Handler:       _ClusterInstApi_CreateClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteClusterInst",
			Handler:       _ClusterInstApi_DeleteClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateClusterInst",
			Handler:       _ClusterInstApi_UpdateClusterInst_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowClusterInst",
			Handler:       _ClusterInstApi_ShowClusterInst_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clusterinst.proto",
}

// Client API for ClusterInstInfoApi service

type ClusterInstInfoApiClient interface {
	// Show Cluster instances state.
	ShowClusterInstInfo(ctx context.Context, in *ClusterInstInfo, opts ...grpc.CallOption) (ClusterInstInfoApi_ShowClusterInstInfoClient, error)
}

type clusterInstInfoApiClient struct {
	cc *grpc.ClientConn
}

func NewClusterInstInfoApiClient(cc *grpc.ClientConn) ClusterInstInfoApiClient {
	return &clusterInstInfoApiClient{cc}
}

func (c *clusterInstInfoApiClient) ShowClusterInstInfo(ctx context.Context, in *ClusterInstInfo, opts ...grpc.CallOption) (ClusterInstInfoApi_ShowClusterInstInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterInstInfoApi_serviceDesc.Streams[0], c.cc, "/edgeproto.ClusterInstInfoApi/ShowClusterInstInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterInstInfoApiShowClusterInstInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterInstInfoApi_ShowClusterInstInfoClient interface {
	Recv() (*ClusterInstInfo, error)
	grpc.ClientStream
}

type clusterInstInfoApiShowClusterInstInfoClient struct {
	grpc.ClientStream
}

func (x *clusterInstInfoApiShowClusterInstInfoClient) Recv() (*ClusterInstInfo, error) {
	m := new(ClusterInstInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterInstInfoApi service

type ClusterInstInfoApiServer interface {
	// Show Cluster instances state.
	ShowClusterInstInfo(*ClusterInstInfo, ClusterInstInfoApi_ShowClusterInstInfoServer) error
}

func RegisterClusterInstInfoApiServer(s *grpc.Server, srv ClusterInstInfoApiServer) {
	s.RegisterService(&_ClusterInstInfoApi_serviceDesc, srv)
}

func _ClusterInstInfoApi_ShowClusterInstInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterInstInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterInstInfoApiServer).ShowClusterInstInfo(m, &clusterInstInfoApiShowClusterInstInfoServer{stream})
}

type ClusterInstInfoApi_ShowClusterInstInfoServer interface {
	Send(*ClusterInstInfo) error
	grpc.ServerStream
}

type clusterInstInfoApiShowClusterInstInfoServer struct {
	grpc.ServerStream
}

func (x *clusterInstInfoApiShowClusterInstInfoServer) Send(m *ClusterInstInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterInstInfoApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.ClusterInstInfoApi",
	HandlerType: (*ClusterInstInfoApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowClusterInstInfo",
			Handler:       _ClusterInstInfoApi_ShowClusterInstInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clusterinst.proto",
}

func (m *ClusterInstKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInstKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.ClusterKey.Size()))
	n1, err := m.ClusterKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.CloudletKey.Size()))
	n2, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *ClusterInst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Key.Size()))
	n3, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Flavor.Size()))
	n4, err := m.Flavor.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CrmOverride != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.CrmOverride))
	}
	if m.Liveness != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.Liveness))
	}
	if m.Auto {
		dAtA[i] = 0x50
		i++
		if m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ClusterInstInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInstInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterinst(dAtA, i, uint64(m.Key.Size()))
	n5, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.NotifyId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.NotifyId))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterinst(dAtA, i, uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintClusterinst(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterInstKey) Matches(o *ClusterInstKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.ClusterKey.Matches(&o.ClusterKey, fopts...) {
		return false
	}
	if !m.CloudletKey.Matches(&o.CloudletKey, fopts...) {
		return false
	}
	return true
}

func (m *ClusterInstKey) CopyInFields(src *ClusterInstKey) {
	m.ClusterKey.Name = src.ClusterKey.Name
	m.CloudletKey.OperatorKey.Name = src.CloudletKey.OperatorKey.Name
	m.CloudletKey.Name = src.CloudletKey.Name
}

func (m *ClusterInstKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal ClusterInstKey key string", "obj", m)
	}
	return string(key)
}

func ClusterInstKeyStringParse(str string, key *ClusterInstKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal ClusterInstKey key string", "str", str)
	}
}

// Helper method to check that enums have valid values
func (m *ClusterInstKey) ValidateEnums() error {
	if err := m.ClusterKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *ClusterInst) Matches(o *ClusterInst, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.IgnoreBackend {
		if !m.Flavor.Matches(&o.Flavor, fopts...) {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.State != 0 {
			if o.State != m.State {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Errors != nil {
			if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
				return false
			} else if m.Errors != nil && o.Errors != nil {
				if len(m.Errors) != len(o.Errors) {
					return false
				}
				for i := 0; i < len(m.Errors); i++ {
					if o.Errors[i] != m.Errors[i] {
						return false
					}
				}
			}
		}
	}
	if !opts.Filter || o.CrmOverride != 0 {
		if o.CrmOverride != m.CrmOverride {
			return false
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Liveness != 0 {
			if o.Liveness != m.Liveness {
				return false
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Auto != false {
			if o.Auto != m.Auto {
				return false
			}
		}
	}
	return true
}

const ClusterInstFieldKey = "2"
const ClusterInstFieldKeyClusterKey = "2.1"
const ClusterInstFieldKeyClusterKeyName = "2.1.1"
const ClusterInstFieldKeyCloudletKey = "2.2"
const ClusterInstFieldKeyCloudletKeyOperatorKey = "2.2.1"
const ClusterInstFieldKeyCloudletKeyOperatorKeyName = "2.2.1.1"
const ClusterInstFieldKeyCloudletKeyName = "2.2.2"
const ClusterInstFieldFlavor = "3"
const ClusterInstFieldFlavorName = "3.1"
const ClusterInstFieldState = "4"
const ClusterInstFieldErrors = "5"
const ClusterInstFieldCrmOverride = "6"
const ClusterInstFieldLiveness = "9"
const ClusterInstFieldAuto = "10"

var ClusterInstAllFields = []string{
	ClusterInstFieldKeyClusterKeyName,
	ClusterInstFieldKeyCloudletKeyOperatorKeyName,
	ClusterInstFieldKeyCloudletKeyName,
	ClusterInstFieldFlavorName,
	ClusterInstFieldState,
	ClusterInstFieldErrors,
	ClusterInstFieldCrmOverride,
	ClusterInstFieldLiveness,
	ClusterInstFieldAuto,
}

var ClusterInstAllFieldsMap = map[string]struct{}{
	ClusterInstFieldKeyClusterKeyName:             struct{}{},
	ClusterInstFieldKeyCloudletKeyOperatorKeyName: struct{}{},
	ClusterInstFieldKeyCloudletKeyName:            struct{}{},
	ClusterInstFieldFlavorName:                    struct{}{},
	ClusterInstFieldState:                         struct{}{},
	ClusterInstFieldErrors:                        struct{}{},
	ClusterInstFieldCrmOverride:                   struct{}{},
	ClusterInstFieldLiveness:                      struct{}{},
	ClusterInstFieldAuto:                          struct{}{},
}

func (m *ClusterInst) DiffFields(o *ClusterInst, fields map[string]struct{}) {
	if m.Key.ClusterKey.Name != o.Key.ClusterKey.Name {
		fields[ClusterInstFieldKeyClusterKeyName] = struct{}{}
		fields[ClusterInstFieldKeyClusterKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.OperatorKey.Name != o.Key.CloudletKey.OperatorKey.Name {
		fields[ClusterInstFieldKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKeyOperatorKey] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[ClusterInstFieldKeyCloudletKeyName] = struct{}{}
		fields[ClusterInstFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstFieldKey] = struct{}{}
	}
	if m.Flavor.Name != o.Flavor.Name {
		fields[ClusterInstFieldFlavorName] = struct{}{}
		fields[ClusterInstFieldFlavor] = struct{}{}
	}
	if m.State != o.State {
		fields[ClusterInstFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[ClusterInstFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[ClusterInstFieldErrors] = struct{}{}
				break
			}
		}
	}
	if m.CrmOverride != o.CrmOverride {
		fields[ClusterInstFieldCrmOverride] = struct{}{}
	}
	if m.Liveness != o.Liveness {
		fields[ClusterInstFieldLiveness] = struct{}{}
	}
	if m.Auto != o.Auto {
		fields[ClusterInstFieldAuto] = struct{}{}
	}
}

func (m *ClusterInst) CopyInFields(src *ClusterInst) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.ClusterKey.Name = src.Key.ClusterKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if _, set := fmap["2.2.1.1"]; set {
					m.Key.CloudletKey.OperatorKey.Name = src.Key.CloudletKey.OperatorKey.Name
				}
			}
			if _, set := fmap["2.2.2"]; set {
				m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
			}
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			m.Flavor.Name = src.Flavor.Name
		}
	}
	if _, set := fmap["4"]; set {
		m.State = src.State
	}
	if _, set := fmap["5"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
		}
		copy(m.Errors, src.Errors)
	}
	if _, set := fmap["6"]; set {
		m.CrmOverride = src.CrmOverride
	}
	if _, set := fmap["9"]; set {
		m.Liveness = src.Liveness
	}
	if _, set := fmap["10"]; set {
		m.Auto = src.Auto
	}
}

func (s *ClusterInst) HasFields() bool {
	return true
}

type ClusterInstStore struct {
	kvstore objstore.KVStore
}

func NewClusterInstStore(kvstore objstore.KVStore) ClusterInstStore {
	return ClusterInstStore{kvstore: kvstore}
}

func (s *ClusterInstStore) Create(m *ClusterInst, wait func(int64)) (*Result, error) {
	err := m.Validate(ClusterInstAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Update(m *ClusterInst, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ClusterInst
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Put(m *ClusterInst, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur ClusterInst
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) Delete(m *ClusterInst, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInst", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstStore) LoadOne(key string) (*ClusterInst, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ClusterInst
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ClusterInst data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ClusterInstStore) STMGet(stm concurrency.STM, key *ClusterInstKey, buf *ClusterInst) bool {
	keystr := objstore.DbKeyString("ClusterInst", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ClusterInstStore) STMPut(stm concurrency.STM, obj *ClusterInst) {
	keystr := objstore.DbKeyString("ClusterInst", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *ClusterInstStore) STMDel(stm concurrency.STM, key *ClusterInstKey) {
	keystr := objstore.DbKeyString("ClusterInst", key)
	stm.Del(keystr)
}

type ClusterInstKeyWatcher struct {
	cb func()
}

// ClusterInstCache caches ClusterInst objects in memory in a hash table
// and keeps them in sync with the database.
type ClusterInstCache struct {
	Objs        map[ClusterInstKey]*ClusterInst
	Mux         util.Mutex
	List        map[ClusterInstKey]struct{}
	NotifyCb    func(obj *ClusterInstKey, old *ClusterInst)
	UpdatedCb   func(old *ClusterInst, new *ClusterInst)
	KeyWatchers map[ClusterInstKey][]*ClusterInstKeyWatcher
}

func NewClusterInstCache() *ClusterInstCache {
	cache := ClusterInstCache{}
	InitClusterInstCache(&cache)
	return &cache
}

func InitClusterInstCache(cache *ClusterInstCache) {
	cache.Objs = make(map[ClusterInstKey]*ClusterInst)
	cache.KeyWatchers = make(map[ClusterInstKey][]*ClusterInstKeyWatcher)
}

func (c *ClusterInstCache) GetTypeString() string {
	return "ClusterInst"
}

func (c *ClusterInstCache) Get(key *ClusterInstKey, valbuf *ClusterInst) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ClusterInstCache) HasKey(key *ClusterInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ClusterInstCache) GetAllKeys(keys map[ClusterInstKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *ClusterInstCache) Update(in *ClusterInst, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *ClusterInst) (*ClusterInst, bool) {
		return in, true
	})
}

func (c *ClusterInstCache) UpdateModFunc(key *ClusterInstKey, rev int64, modFunc func(old *ClusterInst) (new *ClusterInst, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ClusterInst{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ClusterInst", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *ClusterInstCache) Delete(in *ClusterInst, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete ClusterInst", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *ClusterInstCache) Prune(validKeys map[ClusterInstKey]struct{}) {
	notify := make(map[ClusterInstKey]*ClusterInst)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *ClusterInstCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ClusterInstCache) Flush(notifyId int64) {
}

func (c *ClusterInstCache) Show(filter *ClusterInst, cb func(ret *ClusterInst) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ClusterInst", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ClusterInst", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ClusterInstGenericNotifyCb(fn func(key *ClusterInstKey, old *ClusterInst)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ClusterInstKey), obj.(*ClusterInst))
	}
}

func (c *ClusterInstCache) SetNotifyCb(fn func(obj *ClusterInstKey, old *ClusterInst)) {
	c.NotifyCb = fn
}

func (c *ClusterInstCache) SetUpdatedCb(fn func(old *ClusterInst, new *ClusterInst)) {
	c.UpdatedCb = fn
}

func (c *ClusterInstCache) WatchKey(key *ClusterInstKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ClusterInstKeyWatcher, 0)
	}
	watcher := ClusterInstKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ClusterInst", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ClusterInstCache) TriggerKeyWatchers(key *ClusterInstKey) {
	watchers := make([]*ClusterInstKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *ClusterInstCache) SyncUpdate(key, val []byte, rev int64) {
	obj := ClusterInst{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ClusterInst data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ClusterInstCache) SyncDelete(key []byte, rev int64) {
	obj := ClusterInst{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ClusterInstKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *ClusterInstCache) SyncListStart() {
	c.List = make(map[ClusterInstKey]struct{})
}

func (c *ClusterInstCache) SyncListEnd() {
	deleted := make(map[ClusterInstKey]*ClusterInst)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (c *ClusterInstCache) WaitForState(ctx context.Context, key *ClusterInstKey, targetState TrackedState, transitionStates map[TrackedState]struct{}, errorState TrackedState, timeout time.Duration, successMsg string, send func(*Result) error) error {
	curState := TrackedState_TrackedStateUnknown
	done := make(chan bool, 1)
	failed := make(chan bool, 1)
	var err error

	cancel := c.WatchKey(key, func() {
		info := ClusterInst{}
		if c.Get(key, &info) {
			curState = info.State
		} else {
			curState = TrackedState_NotPresent
		}
		if send != nil {
			msg := TrackedState_name[int32(curState)]
			send(&Result{Message: msg})
		}
		log.DebugLog(log.DebugLevelApi, "Watch event for ClusterInst", "key", key, "state", TrackedState_name[int32(curState)])
		if curState == errorState {
			failed <- true
		} else if curState == targetState {
			done <- true
		}
	})
	// After setting up watch, check current state,
	// as it may have already changed to target state
	info := ClusterInst{}
	if c.Get(key, &info) {
		curState = info.State
	} else {
		curState = TrackedState_NotPresent
	}
	if curState == targetState {
		done <- true
	}

	select {
	case <-done:
		err = nil
		if successMsg != "" {
			send(&Result{Message: successMsg})
		}
	case <-failed:
		if c.Get(key, &info) {
			err = fmt.Errorf("Encountered failures: %v", info.Errors)
		} else {
			// this shouldn't happen, since only way to get here
			// is if info state is set to Error
			err = errors.New("Unknown failure")
		}
	case <-time.After(timeout):
		hasInfo := c.Get(key, &info)
		if hasInfo && info.State == errorState {
			// error may have been sent back before watch started
			err = fmt.Errorf("Encountered failures: %v", info.Errors)
		} else if _, found := transitionStates[info.State]; hasInfo && found {
			// no success response, but state is a valid transition
			// state. That means work is still in progress.
			// Notify user that this is not an error.
			// Do not undo since CRM is still busy.
			msg := fmt.Sprintf("Timed out while work still in progress state %s. Please use ShowClusterInst to check current status", TrackedState_name[int32(info.State)])
			send(&Result{Message: msg})
			err = nil
		} else {
			err = fmt.Errorf("Timed out; expected state %s but is %s",
				TrackedState_name[int32(targetState)],
				TrackedState_name[int32(curState)])
		}
	}
	cancel()
	// note: do not close done/failed, garbage collector will deal with it.
	return err
}

func (m *ClusterInst) GetKey() objstore.ObjKey {
	return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ClusterInst) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Flavor.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	if _, ok := CRMOverride_name[int32(m.CrmOverride)]; !ok {
		return errors.New("invalid CrmOverride")
	}
	if _, ok := Liveness_name[int32(m.Liveness)]; !ok {
		return errors.New("invalid Liveness")
	}
	return nil
}

func (m *ClusterInstInfo) Matches(o *ClusterInstInfo, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.NotifyId != 0 {
		if o.NotifyId != m.NotifyId {
			return false
		}
	}
	if !opts.Filter || o.State != 0 {
		if o.State != m.State {
			return false
		}
	}
	if !opts.Filter || o.Errors != nil {
		if m.Errors == nil && o.Errors != nil || m.Errors != nil && o.Errors == nil {
			return false
		} else if m.Errors != nil && o.Errors != nil {
			if len(m.Errors) != len(o.Errors) {
				return false
			}
			for i := 0; i < len(m.Errors); i++ {
				if o.Errors[i] != m.Errors[i] {
					return false
				}
			}
		}
	}
	return true
}

const ClusterInstInfoFieldKey = "2"
const ClusterInstInfoFieldKeyClusterKey = "2.1"
const ClusterInstInfoFieldKeyClusterKeyName = "2.1.1"
const ClusterInstInfoFieldKeyCloudletKey = "2.2"
const ClusterInstInfoFieldKeyCloudletKeyOperatorKey = "2.2.1"
const ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName = "2.2.1.1"
const ClusterInstInfoFieldKeyCloudletKeyName = "2.2.2"
const ClusterInstInfoFieldNotifyId = "3"
const ClusterInstInfoFieldState = "4"
const ClusterInstInfoFieldErrors = "5"

var ClusterInstInfoAllFields = []string{
	ClusterInstInfoFieldKeyClusterKeyName,
	ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName,
	ClusterInstInfoFieldKeyCloudletKeyName,
	ClusterInstInfoFieldNotifyId,
	ClusterInstInfoFieldState,
	ClusterInstInfoFieldErrors,
}

var ClusterInstInfoAllFieldsMap = map[string]struct{}{
	ClusterInstInfoFieldKeyClusterKeyName:             struct{}{},
	ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName: struct{}{},
	ClusterInstInfoFieldKeyCloudletKeyName:            struct{}{},
	ClusterInstInfoFieldNotifyId:                      struct{}{},
	ClusterInstInfoFieldState:                         struct{}{},
	ClusterInstInfoFieldErrors:                        struct{}{},
}

func (m *ClusterInstInfo) DiffFields(o *ClusterInstInfo, fields map[string]struct{}) {
	if m.Key.ClusterKey.Name != o.Key.ClusterKey.Name {
		fields[ClusterInstInfoFieldKeyClusterKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyClusterKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.OperatorKey.Name != o.Key.CloudletKey.OperatorKey.Name {
		fields[ClusterInstInfoFieldKeyCloudletKeyOperatorKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKeyOperatorKey] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.Key.CloudletKey.Name != o.Key.CloudletKey.Name {
		fields[ClusterInstInfoFieldKeyCloudletKeyName] = struct{}{}
		fields[ClusterInstInfoFieldKeyCloudletKey] = struct{}{}
		fields[ClusterInstInfoFieldKey] = struct{}{}
	}
	if m.NotifyId != o.NotifyId {
		fields[ClusterInstInfoFieldNotifyId] = struct{}{}
	}
	if m.State != o.State {
		fields[ClusterInstInfoFieldState] = struct{}{}
	}
	if len(m.Errors) != len(o.Errors) {
		fields[ClusterInstInfoFieldErrors] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Errors); i0++ {
			if m.Errors[i0] != o.Errors[i0] {
				fields[ClusterInstInfoFieldErrors] = struct{}{}
				break
			}
		}
	}
}

func (m *ClusterInstInfo) CopyInFields(src *ClusterInstInfo) {
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if _, set := fmap["2.1.1"]; set {
				m.Key.ClusterKey.Name = src.Key.ClusterKey.Name
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if _, set := fmap["2.2.1.1"]; set {
					m.Key.CloudletKey.OperatorKey.Name = src.Key.CloudletKey.OperatorKey.Name
				}
			}
			if _, set := fmap["2.2.2"]; set {
				m.Key.CloudletKey.Name = src.Key.CloudletKey.Name
			}
		}
	}
	if _, set := fmap["3"]; set {
		m.NotifyId = src.NotifyId
	}
	if _, set := fmap["4"]; set {
		m.State = src.State
	}
	if _, set := fmap["5"]; set {
		if m.Errors == nil || len(m.Errors) != len(src.Errors) {
			m.Errors = make([]string, len(src.Errors))
		}
		copy(m.Errors, src.Errors)
	}
}

func (s *ClusterInstInfo) HasFields() bool {
	return true
}

type ClusterInstInfoStore struct {
	kvstore objstore.KVStore
}

func NewClusterInstInfoStore(kvstore objstore.KVStore) ClusterInstInfoStore {
	return ClusterInstInfoStore{kvstore: kvstore}
}

func (s *ClusterInstInfoStore) Create(m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	err := m.Validate(ClusterInstInfoAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Update(m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur ClusterInstInfo
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Put(m *ClusterInstInfo, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	var val []byte
	curBytes, _, _, err := s.kvstore.Get(key)
	if err == nil {
		var cur ClusterInstInfo
		err = json.Unmarshal(curBytes, &cur)
		if err != nil {
			return nil, err
		}
		cur.CopyInFields(m)
		// never save fields
		cur.Fields = nil
		val, err = json.Marshal(cur)
	} else {
		m.Fields = nil
		val, err = json.Marshal(m)
	}
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) Delete(m *ClusterInstInfo, wait func(int64)) (*Result, error) {
	err := m.GetKey().Validate()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("ClusterInstInfo", m.GetKey())
	rev, err := s.kvstore.Delete(key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *ClusterInstInfoStore) LoadOne(key string) (*ClusterInstInfo, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj ClusterInstInfo
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse ClusterInstInfo data", "val", string(val))
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *ClusterInstInfoStore) STMGet(stm concurrency.STM, key *ClusterInstKey, buf *ClusterInstInfo) bool {
	keystr := objstore.DbKeyString("ClusterInstInfo", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *ClusterInstInfoStore) STMPut(stm concurrency.STM, obj *ClusterInstInfo) {
	keystr := objstore.DbKeyString("ClusterInstInfo", obj.GetKey())
	val, _ := json.Marshal(obj)
	stm.Put(keystr, string(val))
}

func (s *ClusterInstInfoStore) STMDel(stm concurrency.STM, key *ClusterInstKey) {
	keystr := objstore.DbKeyString("ClusterInstInfo", key)
	stm.Del(keystr)
}

type ClusterInstInfoKeyWatcher struct {
	cb func()
}

// ClusterInstInfoCache caches ClusterInstInfo objects in memory in a hash table
// and keeps them in sync with the database.
type ClusterInstInfoCache struct {
	Objs        map[ClusterInstKey]*ClusterInstInfo
	Mux         util.Mutex
	List        map[ClusterInstKey]struct{}
	NotifyCb    func(obj *ClusterInstKey, old *ClusterInstInfo)
	UpdatedCb   func(old *ClusterInstInfo, new *ClusterInstInfo)
	KeyWatchers map[ClusterInstKey][]*ClusterInstInfoKeyWatcher
}

func NewClusterInstInfoCache() *ClusterInstInfoCache {
	cache := ClusterInstInfoCache{}
	InitClusterInstInfoCache(&cache)
	return &cache
}

func InitClusterInstInfoCache(cache *ClusterInstInfoCache) {
	cache.Objs = make(map[ClusterInstKey]*ClusterInstInfo)
	cache.KeyWatchers = make(map[ClusterInstKey][]*ClusterInstInfoKeyWatcher)
}

func (c *ClusterInstInfoCache) GetTypeString() string {
	return "ClusterInstInfo"
}

func (c *ClusterInstInfoCache) Get(key *ClusterInstKey, valbuf *ClusterInstInfo) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst
	}
	return found
}

func (c *ClusterInstInfoCache) HasKey(key *ClusterInstKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *ClusterInstInfoCache) GetAllKeys(keys map[ClusterInstKey]struct{}) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		keys[key] = struct{}{}
	}
}

func (c *ClusterInstInfoCache) Update(in *ClusterInstInfo, rev int64) {
	c.UpdateModFunc(&in.Key, rev, func(old *ClusterInstInfo) (*ClusterInstInfo, bool) {
		return in, true
	})
}

func (c *ClusterInstInfoCache) UpdateModFunc(key *ClusterInstKey, rev int64, modFunc func(old *ClusterInstInfo) (new *ClusterInstInfo, changed bool)) {
	c.Mux.Lock()
	old := c.Objs[*key]
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil || c.NotifyCb != nil {
		if c.UpdatedCb != nil {
			newCopy := &ClusterInstInfo{}
			*newCopy = *new
			defer c.UpdatedCb(old, newCopy)
		}
		if c.NotifyCb != nil {
			defer c.NotifyCb(&new.Key, old)
		}
	}
	c.Objs[new.Key] = new
	log.DebugLog(log.DebugLevelApi, "SyncUpdate ClusterInstInfo", "obj", new, "rev", rev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(&new.Key)
}

func (c *ClusterInstInfoCache) Delete(in *ClusterInstInfo, rev int64) {
	c.Mux.Lock()
	old := c.Objs[in.Key]
	delete(c.Objs, in.Key)
	log.DebugLog(log.DebugLevelApi, "SyncDelete ClusterInstInfo", "key", in.Key, "rev", rev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(&in.Key, old)
	}
	c.TriggerKeyWatchers(&in.Key)
}

func (c *ClusterInstInfoCache) Prune(validKeys map[ClusterInstKey]struct{}) {
	notify := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(&key, old)
		}
		c.TriggerKeyWatchers(&key)
	}
}

func (c *ClusterInstInfoCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *ClusterInstInfoCache) Flush(notifyId int64) {
	flushed := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if val.NotifyId != notifyId {
			continue
		}
		flushed[key] = c.Objs[key]
		delete(c.Objs, key)
	}
	c.Mux.Unlock()
	if len(flushed) > 0 {
		for key, old := range flushed {
			if c.NotifyCb != nil {
				c.NotifyCb(&key, old)
			}
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (c *ClusterInstInfoCache) Show(filter *ClusterInstInfo, cb func(ret *ClusterInstInfo) error) error {
	log.DebugLog(log.DebugLevelApi, "Show ClusterInstInfo", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, obj := range c.Objs {
		if !obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show ClusterInstInfo", "obj", obj)
		err := cb(obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func ClusterInstInfoGenericNotifyCb(fn func(key *ClusterInstKey, old *ClusterInstInfo)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*ClusterInstKey), obj.(*ClusterInstInfo))
	}
}

func (c *ClusterInstInfoCache) SetNotifyCb(fn func(obj *ClusterInstKey, old *ClusterInstInfo)) {
	c.NotifyCb = fn
}

func (c *ClusterInstInfoCache) SetUpdatedCb(fn func(old *ClusterInstInfo, new *ClusterInstInfo)) {
	c.UpdatedCb = fn
}

func (c *ClusterInstInfoCache) WatchKey(key *ClusterInstKey, cb func()) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*ClusterInstInfoKeyWatcher, 0)
	}
	watcher := ClusterInstInfoKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching ClusterInstInfo", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *ClusterInstInfoCache) TriggerKeyWatchers(key *ClusterInstKey) {
	watchers := make([]*ClusterInstInfoKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb()
	}
}
func (c *ClusterInstInfoCache) SyncUpdate(key, val []byte, rev int64) {
	obj := ClusterInstInfo{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse ClusterInstInfo data", "val", string(val))
		return
	}
	c.Update(&obj, rev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.Key] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *ClusterInstInfoCache) SyncDelete(key []byte, rev int64) {
	obj := ClusterInstInfo{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	ClusterInstKeyStringParse(keystr, &obj.Key)
	c.Delete(&obj, rev)
}

func (c *ClusterInstInfoCache) SyncListStart() {
	c.List = make(map[ClusterInstKey]struct{})
}

func (c *ClusterInstInfoCache) SyncListEnd() {
	deleted := make(map[ClusterInstKey]*ClusterInstInfo)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		for key, val := range deleted {
			c.NotifyCb(&key, val)
			c.TriggerKeyWatchers(&key)
		}
	}
}

func (m *ClusterInstInfo) GetKey() objstore.ObjKey {
	return &m.Key
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *ClusterInstInfo) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := TrackedState_name[int32(m.State)]; !ok {
		return errors.New("invalid State")
	}
	return nil
}

func (m *ClusterInstKey) Size() (n int) {
	var l int
	_ = l
	l = m.ClusterKey.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	return n
}

func (m *ClusterInst) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	l = m.Flavor.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	if m.State != 0 {
		n += 1 + sovClusterinst(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	if m.CrmOverride != 0 {
		n += 1 + sovClusterinst(uint64(m.CrmOverride))
	}
	if m.Liveness != 0 {
		n += 1 + sovClusterinst(uint64(m.Liveness))
	}
	if m.Auto {
		n += 2
	}
	return n
}

func (m *ClusterInstInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovClusterinst(uint64(l))
	if m.NotifyId != 0 {
		n += 1 + sovClusterinst(uint64(m.NotifyId))
	}
	if m.State != 0 {
		n += 1 + sovClusterinst(uint64(m.State))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovClusterinst(uint64(l))
		}
	}
	return n
}

func sovClusterinst(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClusterinst(x uint64) (n int) {
	return sovClusterinst(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterInstKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInstKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInstKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flavor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TrackedState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrmOverride", wireType)
			}
			m.CrmOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrmOverride |= (CRMOverride(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveness", wireType)
			}
			m.Liveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liveness |= (Liveness(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auto = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInstInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInstInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInstInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyId", wireType)
			}
			m.NotifyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TrackedState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterinst
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterinst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterinst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterinst(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterinst
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterinst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClusterinst
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClusterinst
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClusterinst(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClusterinst = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterinst   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("clusterinst.proto", fileDescriptorClusterinst) }

var fileDescriptorClusterinst = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6b, 0x1b, 0x47,
	0x14, 0xc7, 0x3d, 0x96, 0x2c, 0xa4, 0x91, 0x6c, 0x57, 0x2b, 0xac, 0x8e, 0xd4, 0x22, 0x8b, 0x85,
	0x16, 0xd1, 0x4a, 0xda, 0x56, 0xa5, 0x50, 0x84, 0x4b, 0xb1, 0x6c, 0x6a, 0x8c, 0xeb, 0x16, 0xe4,
	0xb6, 0x57, 0xb3, 0x9a, 0x1d, 0xad, 0x17, 0xef, 0xee, 0xa8, 0xfb, 0xc3, 0xae, 0x6e, 0xa5, 0x97,
	0x42, 0x4f, 0xa6, 0x25, 0xe0, 0x4b, 0xc0, 0xc7, 0x1c, 0x8d, 0x8f, 0xf9, 0x0b, 0x74, 0x0c, 0xe4,
	0x92, 0x43, 0x08, 0x8e, 0x49, 0x20, 0x38, 0x97, 0x80, 0xf7, 0x90, 0x63, 0xd8, 0xd9, 0x59, 0x69,
	0x25, 0x39, 0xc6, 0x87, 0x80, 0x2f, 0xcb, 0xcc, 0x7b, 0xef, 0xfb, 0xde, 0x67, 0xde, 0xdb, 0x19,
	0x98, 0xc5, 0xba, 0x6b, 0x3b, 0xc4, 0xd2, 0x4c, 0xdb, 0xa9, 0xf7, 0x2c, 0xea, 0x50, 0x21, 0x45,
	0x14, 0x95, 0xb0, 0x65, 0xf1, 0x53, 0x95, 0x52, 0x55, 0x27, 0x92, 0xdc, 0xd3, 0x24, 0xd9, 0x34,
	0xa9, 0x23, 0x3b, 0x1a, 0x35, 0xed, 0x20, 0xb0, 0xf8, 0x9d, 0xaa, 0x39, 0x7b, 0x6e, 0xa7, 0x8e,
	0xa9, 0x21, 0x19, 0xb4, 0xa3, 0xe9, 0xbe, 0xf0, 0x4f, 0xc9, 0xff, 0xd6, 0xb0, 0x4e, 0x5d, 0x45,
	0x62, 0x71, 0x2a, 0x31, 0x87, 0x0b, 0xae, 0xdc, 0xb8, 0x9d, 0x12, 0xd7, 0x54, 0x62, 0xd6, 0xb0,
	0x11, 0x6e, 0x23, 0x0b, 0x9e, 0x28, 0x63, 0x11, 0xdb, 0xd5, 0x39, 0x79, 0x31, 0xc7, 0x0f, 0xd3,
	0xd5, 0xe5, 0x03, 0x6a, 0x71, 0xe3, 0x3c, 0x37, 0xf2, 0xed, 0x02, 0xcb, 0xaf, 0x93, 0x50, 0x93,
	0xc1, 0xd4, 0x30, 0x68, 0x08, 0x56, 0x8b, 0x80, 0xa9, 0x54, 0xa5, 0x41, 0xbd, 0x8e, 0xdb, 0x65,
	0x3b, 0xb6, 0x61, 0xab, 0x20, 0x5c, 0xbc, 0x0f, 0xe0, 0xc2, 0x5a, 0x90, 0x7e, 0xd3, 0xb4, 0x9d,
	0x2d, 0xd2, 0x17, 0x56, 0x60, 0x9a, 0x17, 0xdc, 0xdd, 0x27, 0x7d, 0x04, 0xca, 0xa0, 0x92, 0x6e,
	0x2c, 0xd5, 0x87, 0x3d, 0xad, 0xf3, 0xf8, 0x2d, 0xd2, 0x6f, 0xc5, 0x07, 0xcf, 0x96, 0x67, 0xda,
	0x10, 0x0f, 0x2d, 0xc2, 0x0f, 0x30, 0x13, 0xf2, 0x31, 0xf9, 0x2c, 0x93, 0xe7, 0xc7, 0xe4, 0x81,
	0x7b, 0xa4, 0x4f, 0xe3, 0x91, 0xa9, 0x99, 0x79, 0x75, 0x85, 0xc0, 0xdb, 0x2b, 0x04, 0x4e, 0x4f,
	0x96, 0x81, 0xf8, 0x34, 0x06, 0xd3, 0x11, 0x3e, 0x21, 0x0f, 0x13, 0x5d, 0x8d, 0xe8, 0x8a, 0x8d,
	0x40, 0x39, 0x56, 0x49, 0xb5, 0xf9, 0x4e, 0xf8, 0x1a, 0xc6, 0x46, 0xd5, 0x0a, 0xd3, 0xb0, 0xfc,
	0x70, 0xbc, 0xa0, 0x1f, 0x2b, 0x7c, 0x0f, 0x13, 0x41, 0x9b, 0x51, 0x8c, 0xa9, 0x3e, 0x99, 0x56,
	0xfd, 0xc8, 0xfc, 0xbe, 0x2e, 0xf9, 0xc0, 0x43, 0x80, 0x69, 0xb9, 0x48, 0x58, 0x81, 0x73, 0xb6,
	0x23, 0x3b, 0x04, 0xc5, 0xcb, 0xa0, 0xb2, 0xd0, 0xf8, 0x38, 0xa2, 0xfe, 0xd5, 0x92, 0xf1, 0x3e,
	0x51, 0x76, 0x7c, 0x77, 0x6b, 0xde, 0x57, 0xfe, 0x77, 0x56, 0x98, 0x33, 0x29, 0x36, 0x7a, 0xed,
	0x40, 0x24, 0x7c, 0x06, 0x13, 0xc4, 0xb2, 0xa8, 0x65, 0xa3, 0x39, 0xff, 0x1c, 0x93, 0x51, 0xdc,
	0x29, 0xac, 0xc3, 0x0c, 0xb6, 0x8c, 0x5d, 0x7a, 0x40, 0x2c, 0x4b, 0x53, 0x08, 0x4a, 0xb0, 0x5a,
	0x63, 0xdd, 0x6c, 0x6f, 0xff, 0xc2, 0xbd, 0xad, 0xd4, 0x28, 0x41, 0x1a, 0x5b, 0x46, 0x68, 0x17,
	0xbe, 0x85, 0x49, 0x5d, 0x3b, 0x20, 0x26, 0xb1, 0x6d, 0x94, 0x62, 0x19, 0x72, 0x91, 0x0c, 0x3f,
	0x71, 0x57, 0x2b, 0xee, 0x33, 0xb4, 0x87, 0xa1, 0x02, 0x82, 0x71, 0xd9, 0x75, 0x28, 0x82, 0x65,
	0x50, 0x49, 0x72, 0x2f, 0xb3, 0x34, 0x37, 0xfc, 0x19, 0xbd, 0xb9, 0x42, 0xe0, 0x2f, 0x0f, 0x81,
	0x23, 0x0f, 0x81, 0x63, 0x0f, 0x81, 0x53, 0x0f, 0x81, 0x87, 0x1e, 0xca, 0x44, 0x4f, 0x3f, 0xf0,
	0x10, 0x78, 0xe2, 0x21, 0xf0, 0xef, 0x59, 0x21, 0xf7, 0x33, 0x55, 0x88, 0x5d, 0x0d, 0xab, 0x55,
	0x57, 0x5d, 0x87, 0x8a, 0x2f, 0x01, 0x5c, 0x8c, 0x4c, 0x68, 0xd3, 0xec, 0xd2, 0x0f, 0x39, 0xe2,
	0xcf, 0x61, 0xca, 0xa4, 0x8e, 0xd6, 0xed, 0xef, 0x6a, 0x0a, 0x9b, 0x72, 0x2c, 0xda, 0xa3, 0x64,
	0xe0, 0xdb, 0x54, 0x84, 0xda, 0xed, 0x66, 0x19, 0x0e, 0x2f, 0x3f, 0x3e, 0xbc, 0x70, 0x5a, 0x4d,
	0x34, 0xd9, 0x96, 0x13, 0x0f, 0x81, 0x73, 0x0f, 0x81, 0xc6, 0xeb, 0xf8, 0xd8, 0x35, 0x5b, 0xed,
	0x69, 0xc2, 0x3d, 0x00, 0xb3, 0x6b, 0x16, 0x91, 0x1d, 0x32, 0xf6, 0x7f, 0x5f, 0x7f, 0xae, 0x62,
	0x36, 0x62, 0x6f, 0xb3, 0x17, 0x43, 0xdc, 0xb9, 0xf4, 0x50, 0xad, 0x4d, 0x6c, 0xea, 0x5a, 0x38,
	0x9a, 0xc3, 0xae, 0xae, 0x62, 0xff, 0x91, 0xdb, 0x96, 0x4d, 0x59, 0x25, 0x55, 0x7b, 0x5f, 0xeb,
	0x11, 0xb3, 0x4b, 0x2d, 0x4c, 0x8e, 0xcf, 0x0a, 0xe0, 0xef, 0xc7, 0x2f, 0xfe, 0x9f, 0x45, 0x62,
	0x4e, 0xc2, 0xac, 0xb6, 0x14, 0x79, 0x3d, 0x9b, 0xe0, 0x8b, 0xaf, 0x00, 0xe3, 0x5a, 0x27, 0x3a,
	0xb9, 0x2b, 0x2e, 0x85, 0xd5, 0xbe, 0x9e, 0xeb, 0xb7, 0x9e, 0x72, 0x67, 0xfd, 0x72, 0x59, 0xed,
	0x69, 0xae, 0x23, 0x00, 0x17, 0x77, 0xf6, 0xe8, 0xe1, 0x6d, 0xa8, 0xde, 0x63, 0x17, 0xb7, 0x2e,
	0x3d, 0xf4, 0xe5, 0x0d, 0x68, 0xbf, 0x6b, 0xe4, 0x30, 0x0a, 0xc6, 0xa0, 0xf2, 0x62, 0x56, 0xb2,
	0xf7, 0xe8, 0xe1, 0x14, 0x52, 0xe3, 0x1f, 0x00, 0x85, 0x89, 0x5b, 0xe5, 0xff, 0x71, 0x7f, 0xc0,
	0xdc, 0x04, 0x28, 0xbb, 0x6f, 0xc5, 0xeb, 0xa1, 0x7c, 0x5f, 0xf1, 0x06, 0x9f, 0x58, 0x66, 0x14,
	0x45, 0x71, 0x69, 0x8a, 0x42, 0x33, 0xbb, 0x94, 0x91, 0xb4, 0x3e, 0x1a, 0x3c, 0x2f, 0xcd, 0x0c,
	0x2e, 0x4a, 0xe0, 0xd1, 0x45, 0x09, 0x9c, 0x5f, 0x94, 0x40, 0x27, 0xc1, 0x92, 0x7d, 0xf3, 0x2e,
	0x00, 0x00, 0xff, 0xff, 0x6a, 0x34, 0x76, 0x0d, 0xb7, 0x07, 0x00, 0x00,
}
