// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "flavor.proto";
import "result.proto";
import "restagtable.proto";
import "common.proto";
import "infraresources.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// Cloudlet unique key
//
// CloudletKey uniquely identifies a Cloudlet.
message CloudletKey {
  // Organization of the cloudlet site
  string organization = 1 [(protogen.keytag) = "cloudletorg"];
  // Name of the cloudlet
  string name = 2 [(protogen.keytag) = "cloudlet"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Operation time limits
//
// Time limits for cloudlet create, update and delete operations
message OperationTimeLimits{
    // override default max time to create a cluster instance (duration)
    int64 create_cluster_inst_timeout = 1 [(gogoproto.casttype) = "Duration"];
    // override default max time to update a cluster instance (duration)
    int64 update_cluster_inst_timeout = 2 [(gogoproto.casttype) = "Duration"];
    // override default max time to delete a cluster instance (duration)
    int64 delete_cluster_inst_timeout = 3 [(gogoproto.casttype) = "Duration"];
    // override default max time to create an app instance (duration)
    int64 create_app_inst_timeout = 4 [(gogoproto.casttype) = "Duration"];
    // override default max time to update an app instance (duration)
    int64 update_app_inst_timeout = 5 [(gogoproto.casttype) = "Duration"];
    // override default max time to delete an app instance (duration)
    int64 delete_app_inst_timeout = 6 [(gogoproto.casttype) = "Duration"];
}

//
// Platform specific configuration required for Cloudlet management
message PlatformConfig {
  // Path to Docker registry holding edge-cloud image
  string container_registry_path = 1;
  // Path to platform base image
  string cloudlet_vm_image_path = 2;
  // Address of controller notify port (can be multiple of these)
  string notify_ctrl_addrs = 3;
  // Vault address (4) deprecated, platform no longer has direct access to vault.

  // TLS cert file
  string tls_cert_file = 5;
  // TLS key file
  string tls_key_file = 20;
  // TLS ca file
  string tls_ca_file = 21;
  // Environment variables
  map<string, string> env_var = 6;
  // Tag of edge-cloud image
  string platform_tag = 8;
  // Internal Test flag
  bool test_mode = 9;
  // Span string
  string span = 10;
  // Internal cleanup flag
  bool cleanup_mode = 11;
  // Region
  string region = 12;
  // Get certs from vault or generate your own for the root load balancer
  bool commercial_certs = 13;
  // Use Vault certs for internal TLS communication
  bool use_vault_certs = 14;
  // Use Vault CAs to authenticate TLS communication
  bool use_vault_cas = 15;
  // App domain name root
  string app_dns_root = 16;
  // Path to Chef Server
  string chef_server_path = 17;
  // Chef client interval
  int32 chef_client_interval = 18  [(gogoproto.casttype) = "Duration"];
  // Deployment Tag
  string deployment_tag = 19;
  // crm access private key
  string crm_access_private_key = 22;
  // controller access API address
  string access_api_addr = 23;
}

// Platform Type
//
// PlatformType is the supported list of cloudlet types
//
// 0: `PLATFORM_TYPE_FAKE`
// 1: `PLATFORM_TYPE_DIND`
// 2: `PLATFORM_TYPE_OPENSTACK`
// 3: `PLATFORM_TYPE_AZURE`
// 4: `PLATFORM_TYPE_GCP`
// 5: `PLATFORM_TYPE_EDGEBOX`
// 6: `PLATFORM_TYPE_FAKEINFRA`
// 7: `PLATFORM_TYPE_VSPHERE`
// 8: `PLATFORM_TYPE_AWS_EKS`
// 9: `PLATFORM_TYPE_VM_POOL`
// 10: `PLATFORM_TYPE_AWS_EC2`
enum PlatformType {
  // Fake Cloudlet
  PLATFORM_TYPE_FAKE = 0;
  // DIND Cloudlet
  PLATFORM_TYPE_DIND = 1;
  // Openstack Cloudlet
  PLATFORM_TYPE_OPENSTACK = 2;
  // Azure Cloudlet
  PLATFORM_TYPE_AZURE = 3;
  // GCP Cloudlet
  PLATFORM_TYPE_GCP = 4;
  // Edgebox Cloudlet
  PLATFORM_TYPE_EDGEBOX = 5;
  // Fake Infra Cloudlet
  PLATFORM_TYPE_FAKEINFRA = 6;
   // VMWare VSphere (ESXi)
  PLATFORM_TYPE_VSPHERE = 7;
  // AWS EKS Cloudlet
  PLATFORM_TYPE_AWS_EKS = 8;
  // VM Pool Cloudlet
  PLATFORM_TYPE_VM_POOL = 9;
    // AWS EC2 VM Cloudlet
  PLATFORM_TYPE_AWS_EC2 = 10;
}

// optional resource input consists of a resource specifier and clouldkey name
message CloudletResMap {
  // Resource cloudlet key
  CloudletKey key = 1[(gogoproto.nullable) = false];
  // Resource mapping info
  map<string, string> mapping = 2;
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.also_required) = "Mapping";
}

// Infra API Access
//
// InfraApiAccess is the type of access available to Infra API endpoint
//
// 0: `DIRECT_ACCESS`
// 1: `RESTRICTED_ACCESS`
enum InfraApiAccess {
	// Infra API endpoint is accessible from public network
	DIRECT_ACCESS = 0;
	// Infra API endpoint is not accessible from public network
	RESTRICTED_ACCESS = 1;
}

// Infra specific configuration used for Cloudlet deployments
message InfraConfig {
  // Infra specific external network name
  string external_network_name = 1;
  // Infra specific flavor name
  string flavor_name = 2;
}

// Cloudlet
//
// A Cloudlet is a set of compute resources at a particular location, provided by an Operator. 
message Cloudlet {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // required: true
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // Location of the Cloudlet site
  distributed_match_engine.Loc location = 5 [(gogoproto.nullable) = false];
  // Type of IP support provided by Cloudlet (see IpSupport)
  IpSupport ip_support = 6;
  // List of static IPs for static IP support
  string static_ips = 7;
  // Number of dynamic IPs available for dynamic IP support
  int32 num_dynamic_ips = 8;
  // time limits which override global settings if non-zero
  OperationTimeLimits time_limits = 9 [(gogoproto.nullable) = false];
  // Any errors trying to create, update, or delete the Cloudlet.
  repeated string errors = 10 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // status is used to reflect progress of creation or other events
  StatusInfo status = 11 [(protogen.backend) = true, (gogoproto.nullable) = false, (protogen.hidetag) = "nocmp"];
  // Current state of the cloudlet
  TrackedState state = 12 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Override actions to CRM
  CRMOverride crm_override = 13 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Deploy cloudlet services locally
  bool deployment_local = 14 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Platform type
  PlatformType platform_type = 15;
  // Address for the CRM notify listener to run on
  string notify_srv_addr = 16 [(protogen.hidetag) = "nocmp"];
  // Min system resource requirements for platform
  FlavorKey flavor = 17 [(gogoproto.nullable) = false];
  // Physical infrastructure cloudlet name
  string physical_name = 18;
  // Single Key-Value pair of env var to be passed to CRM
  map<string, string> env_var = 19;
  // Cloudlet container version 
  string container_version = 20;
  // Platform Config Info
  PlatformConfig config = 21 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Optional resource to restagtbl key map key values = [gpu, nas, nic]
  map<string, edgeproto.ResTagTableKey> res_tag_map = 22 [(protogen.backend) = true];
  // Variables required to access cloudlet
  map<string, string> access_vars = 23;
  // MobiledgeX baseimage version where CRM services reside
  string vm_image_version = 24;
  // Deployment type to bring up CRM services (docker, kubernetes)
  string deployment = 26 [(protogen.hidetag) = "nocmp"];
  // Infra Access Type is the type of access available to Infra API Endpoint
  InfraApiAccess infra_api_access = 27;
  // Infra specific config
  InfraConfig infra_config = 28 [(gogoproto.nullable) = false];
  // Chef client key
  map<string, string> chef_client_key = 29 [(protogen.backend) = true];
  // State for maintenance
  MaintenanceState maintenance_state = 30;
  // Override container version from policy file
  bool override_policy_container_version = 31;
  // VM Pool
  string vm_pool = 32;
  // CRM access public key
  string crm_access_public_key = 33 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // CRM access key upgrade required
  bool crm_access_key_upgrade_required = 34 [(protogen.backend) = true];
    // Created at time
  distributed_match_engine.Timestamp created_at = 35 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  // Updated at time
  distributed_match_engine.Timestamp updated_at = 36 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_recv_hook) = true;
  option (protogen.noconfig) = "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr,ChefClientKey,State,Errors,CrmAccessPublicKey,CrmAccessKeyUpgradeRequired,CreatedAt,UpdatedAt";
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
}

message FlavorMatch {
  // Cloudlet ctx
  CloudletKey key = 1 [(gogoproto.nullable) = false];
  string flavor_name = 3;
  string availability_zone = 4;
 option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization,flavor=FlavorName";
}

message CloudletManifest {
  // Manifest to bringup cloudlet VM and services.
  string manifest = 2;
}

message PropertyInfo {
  // Name of the property
  string name = 1;
  // Description of the property
  string description = 2;
  // Default value of the property
  string value = 3;
  // Is the property a secret value, will be hidden
  bool secret = 4;
  // Is the property mandatory
  bool mandatory = 5;
  // Is the property internal, not to be set by Operator
  bool internal = 6;
}

message CloudletProps {
  // Platform type
  PlatformType platform_type = 1;
  // Single Key-Value pair of env var to be passed to CRM
  map<string, PropertyInfo> properties = 2;
}

service CloudletApi {
  // Create Cloudlet. Sets up Cloudlet services on the Operator's compute resources,
  // and integrated as part of MobiledgeX edge resource portfolio.
  // These resources are managed from the Edge Controller.
  rpc CreateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/cloudlet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_also_required) = "NumDynamicIps,Location.Latitude,Location.Longitude";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
  }
  // Delete Cloudlet. Removes the Cloudlet services where they are no longer managed
  // from the Edge Controller.
  rpc DeleteCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/cloudet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Update Cloudlet. Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.
  rpc UpdateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/cloudlet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
    option (protogen.method_noconfig) = "PlatformType,DeploymentLocal,Flavor,PhysicalName,ContainerVersion,ResTagMap,VmImageVersion,Deployment,InfraApiAccess,InfraConfig,OverridePolicyContainerVersion,VmPool";
  }
  // Show Cloudlets. Lists all the cloudlets managed from Edge Controller.
  rpc ShowCloudlet(Cloudlet) returns (stream Cloudlet) {
    option (google.api.http) = {
      post: "/show/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,";
    option (protogen.mc2_custom_authz) = true;
  }
  // Get Cloudlet Manifest. Shows deployment manifest required to setup cloudlet
  rpc GetCloudletManifest(Cloudlet) returns (CloudletManifest) {
    option (google.api.http) = {
      post: "/get/cloudlet/manifest"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Get Cloudlet Properties. Shows all the infra properties used to setup cloudlet
  rpc GetCloudletProps(CloudletProps) returns (CloudletProps) {
    option (google.api.http) = {
      post: "/get/cloudlet/props"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,";
    option (protogen.method_noconfig) = "Properties";
    option (protogen.method_also_required) = "PlatformType";
  }

  // Add Optional Resource tag table
  rpc AddCloudletResMapping(CloudletResMap) returns (Result) {
    option (google.api.http) = {
    post: "/addmapping/cloudlet"
    body: "*"
  };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Add Optional Resource tag table
  rpc RemoveCloudletResMapping(CloudletResMap) returns (Result) {
    option (google.api.http) = {
      post: "/rmmapping/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }

  // Discover if flavor produces a matching platform flavor
  rpc FindFlavorMatch(FlavorMatch) returns (FlavorMatch) {
    option (google.api.http) = {
    post: "/findmapping/cloudlet"
    body: "*"
  };
  option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.Organization";
  }

  // Revoke crm access key
  rpc RevokeAccessKey(CloudletKey) returns (Result) {
    option (google.api.http) = {
      post: "/revoke/cloudletaccesskey"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Organization";
  }
  // Generate new crm access key
  rpc GenerateAccessKey(CloudletKey) returns (Result) {
    option (google.api.http) = {
      post: "/generate/cloudletaccesskey"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Organization";
  }
}

// CloudletState
//
// CloudletState is the state of the Cloudlet.
//
//  0: `CLOUDLET_STATE_UNKNOWN`
//  1: `CLOUDLET_STATE_ERRORS`
//  2: `CLOUDLET_STATE_READY`
//  3: `CLOUDLET_STATE_OFFLINE`
//  4: `CLOUDLET_STATE_NOT_PRESENT`
//  5: `CLOUDLET_STATE_INIT`
//  6: `CLOUDLET_STATE_UPGRADE`
//  7: `CLOUDLET_STATE_NEED_SYNC`
enum CloudletState {
  // Unknown
  CLOUDLET_STATE_UNKNOWN = 0;
  // Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
  CLOUDLET_STATE_ERRORS = 1;
  // Cloudlet is created and ready
  CLOUDLET_STATE_READY = 2;
  // Cloudlet is offline (unreachable)
  CLOUDLET_STATE_OFFLINE = 3;
  // Cloudlet is not present
  CLOUDLET_STATE_NOT_PRESENT = 4;
  // Cloudlet is initializing
  CLOUDLET_STATE_INIT = 5;
  // Cloudlet is upgrading
  CLOUDLET_STATE_UPGRADE = 6;
  // Cloudlet needs data to synchronize
  CLOUDLET_STATE_NEED_SYNC = 7;  
}

// Flavor details from the Cloudlet
message FlavorInfo {
  // Name of the flavor on the Cloudlet
  string name = 1;
  // Number of VCPU cores on the Cloudlet
  uint64 vcpus = 2;
  // Ram in MB on the Cloudlet
  uint64 ram = 3;
  // Amount of disk in GB on the Cloudlet
  uint64 disk = 4;
  // OS Flavor Properties, if any
  map<string,string> prop_map = 5 [(protogen.backend) = true];
}
message OSAZone {
  string name   = 1;
  string status = 2;
}

message OSImage {
  // image name
  string name = 1;
  // optional tags present on image
  string tags = 2;
  // image properties/metadata
  string properties = 3;
  // format qcow2, img, etc
  string disk_format = 4;
}

// CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.
message CloudletInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // State of cloudlet
  CloudletState state = 3;
  // Id of client assigned by server (internal use only)
  int64 notify_id = 4 [(protogen.hidetag) = "nocmp"];
  // Connected controller unique id
  string controller = 5 [(protogen.hidetag) = "nocmp"];
  // Maximum Ram in MB on the Cloudlet
  uint64 os_max_ram = 6;
  // Maximum number of VCPU cores on the Cloudlet
  uint64 os_max_vcores = 7;
  // Maximum amount of disk in GB on the Cloudlet
  uint64 os_max_vol_gb = 8;
  // Any errors encountered while making changes to the Cloudlet
  repeated string errors = 9;
  // Supported flavors by the Cloudlet
  repeated FlavorInfo flavors = 10;
  // status is used to reflect progress of creation or other events
  StatusInfo status = 11 [(gogoproto.nullable) = false, (protogen.hidetag) = "nocmp"];
  // Cloudlet container version
  string container_version = 12;
  // Availability Zones if any
  repeated OSAZone availability_zones = 13;
  // Local Images availble to cloudlet
  repeated OSImage os_images = 14;
  // Indicates all controller data has been sent to CRM
  bool controller_cache_received = 15;
  // State for maintenance
  MaintenanceState maintenance_state = 16;
   // Resources used by cloudlet
  InfraResources resources = 17 [(protogen.backend) = true, (gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.notify_recv_hook) = true;
  option (protogen.alias) = "cloudlet=Key.Name,cloudlet-org=Key.Organization";
  option (protogen.uses_org) = "none";
  option (protogen.noconfig) = "Resources";
}

service CloudletInfoApi {
  // Show CloudletInfos
  rpc ShowCloudletInfo(CloudletInfo) returns (stream CloudletInfo) {
    option (google.api.http) = {
      post: "/show/cloudletinfo"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletAnalytics,ActionView,Key.Organization";
  }
  // Inject (create) a CloudletInfo for regression testing
  rpc InjectCloudletInfo(CloudletInfo) returns (Result) {
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
  // Evict (delete) a CloudletInfo for regression testing
  rpc EvictCloudletInfo(CloudletInfo) returns (Result) {
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.Organization";
  }
}

// (TODO) CloudletMetrics provide metrics collected about the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
message CloudletMetrics {
  // what goes here?
  uint64 foo = 5;
}

service CloudletMetricsApi {
  // Show Cloudlet metrics
  rpc ShowCloudletMetrics(CloudletMetrics) returns (stream CloudletMetrics) {
    option (google.api.http) = {
      post: "/show/cloudletmetrics"
      body: "*"
    };
  }
}
