// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "operator.proto";
import "result.proto";
import "common.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "gogoproto/gogo.proto";

// CloudletKey uniquely identifies a Cloudlet.
message CloudletKey {
  // Operator of the cloudlet site
  OperatorKey operator_key = 1 [(gogoproto.nullable) = false];
  // Name of the cloudlet
  string name = 2;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// time limits for cloudlet create, update and delete operations
message OperationTimeLimits{
    // max time to create a cluster instance
    int64 create_cluster_inst_timeout = 1;
    // max time to update a cluster instance
    int64 update_cluster_inst_timeout = 2;
    // max time to delete a cluster instance
    int64 delete_cluster_inst_timeout = 3;
    // max time to create an app instance
    int64 create_app_inst_timeout = 4;
    // max time to update an app instance
    int64 update_app_inst_timeout = 5;
    // max time to delete an app instance
    int64 delete_app_inst_timeout = 6;
}

// properites common to all cloudlets
message CloudletInfraCommon{
    // the mex docker registry, e.g.  registry.mobiledgex.net:5000. 
    string docker_registry = 1;
    // DNS Zone
    string dns_zone = 2;
    // registry file server contains files which get pulled on instantiation such as certs and images
    string registry_file_server = 3;
    // Cloudflare key
    string cf_key = 4; //MEX_CF_KEY
    // Cloudflare key
    string cf_user = 5; //MEX_CF_KEY
    // Docker registry password
    string docker_reg_pass = 6; //MEX_DOCKER_REG_PASS
    // network scheme
    string network_scheme = 7;
    // the name of the docker registry secret, e.g. mexgitlabsecret
    string docker_registry_secret = 8;
}

message AzureProperties{
  // azure region e.g. uswest2
  string location = 1;
  // azure resource group
  string resource_group = 2;
  // azure username
  string user_name = 3;
  // azure password
  string password = 4;
}

message GcpProperties{
  // gcp project for billing
  string project = 1;
  // availability zone
  string zone = 2;
  // service account to login with
  string service_account = 3;
  // vault credentials link
  string gcp_auth_key_url = 4;
}

message OpenStackProperties{
  // name of the external network, e.g. external-network-shared
  string os_external_network_name = 1; 
  //openstack image , e.g. mobiledgex
  string os_image_name = 2;
  // openstack router
  string os_external_router_name = 3;
  // openstack internal network
  string os_mex_network = 4;
  // openrc env vars 
  map<string, string> open_rc_vars = 5;
}

message CloudletInfraProperties{
    // what kind of infrastructure: Azure, GCP, Openstack
    string cloudlet_kind = 1;
    //name and version of the docker image container image that mexos runs in
    string mexos_container_image_name = 2;
    // openstack
    OpenStackProperties openstack_properties = 3;
    // azure
    AzureProperties azure_properties = 4;
    // gcp
    GcpProperties gcp_properties = 5;
}

// A Cloudlet is a set of compute resources at a particular location, typically an Operator's regional data center, or a cell tower. The Cloudlet is managed by a Cloudlet Resource Manager, which communicates with the Mobiledgex Controller and allows AppInsts (application instances) to be instantiated on the Cloudlet.
// A Cloudlet will be created by either a Mobiledgex admin or an Operator that provides the Cloudlet.
message Cloudlet {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // Placeholder for cloudlet access credentials, i.e. openstack keys, passwords, etc
  string access_credentials = 4 [(protogen.test_update) = true];
  // Location of the Cloudlet site
  distributed_match_engine.Loc location = 5 [(gogoproto.nullable) = false];
  // Type of IP support provided by Cloudlet (see IpSupport)
  IpSupport ip_support = 6;
  // List of static IPs for static IP support
  string static_ips = 7;
  // Number of dynamic IPs available for dynamic IP support
  int32 num_dynamic_ips = 8;
  // time limits
  OperationTimeLimits time_limits = 9 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "nocmp"];

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_recv_hook) = true;
  option (protocmd.noconfig) = "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,TimeLimits";
  option (protocmd.alias) = "name=Key.Name,operator=Key.OperatorKey.Name";
}

service CloudletApi {
  // Create a Cloudlet
  rpc CreateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
  }
  // Delete a Cloudlet
  rpc DeleteCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/cloudet"
      body: "*"
    };
    option (protocmd.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
  }
  // Update a Cloudlet
  rpc UpdateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
  }
  // Show Cloudlets
  rpc ShowCloudlet(Cloudlet) returns (stream Cloudlet) {
    option (google.api.http) = {
      post: "/show/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,skipenforce";
  }
}

// CloudletState is the state of the Cloudlet.
enum CloudletState {
  // Unknown
  CLOUDLET_STATE_UNKNOWN = 0;
  // Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
  CLOUDLET_STATE_ERRORS = 1;
  // Cloudlet is created and ready
  CLOUDLET_STATE_READY = 2;
  // Cloudlet is offline (unreachable)
  CLOUDLET_STATE_OFFLINE = 3;
  // Cloudlet is not present
  CLOUDLET_STATE_NOT_PRESENT = 4;
}

// Flavor details from the Cloudlet
message FlavorInfo {
  // Name of the flavor on the Cloudlet
  string name = 1;
  // Number of VCPU cores on the Cloudlet
  uint64 vcpus = 2;
  // Ram in MB on the Cloudlet
  uint64 ram = 3;
  // Amount of disk in GB on the Cloudlet
  uint64 disk = 4;
}

// CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.
message CloudletInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // State of cloudlet
  CloudletState state = 3;
  // Id of client assigned by server (internal use only)
  int64 notify_id = 4;
  // Connected controller unique id
  string controller = 5;
  // Maximum Ram in MB on the Cloudlet
  uint64 os_max_ram = 6;
  // Maximum number of VCPU cores on the Cloudlet
  uint64 os_max_vcores = 7;
  // Maximum amount of disk in GB on the Cloudlet
  uint64 os_max_vol_gb = 8;
  // Any errors encountered while making changes to the Cloudlet
  repeated string errors = 9;
  // Supported flavors by the Cloudlet
  repeated FlavorInfo flavors = 10;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.notify_recv_hook) = true;
  option (protocmd.alias) = "name=Key.Name,operator=Key.OperatorKey.Name";
}

service CloudletInfoApi {
  // Show CloudletInfos
  rpc ShowCloudletInfo(CloudletInfo) returns (stream CloudletInfo) {
    option (google.api.http) = {
      post: "/show/cloudletinfo"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.OperatorKey.Name";
  }
  // Inject (create) a CloudletInfo for regression testing
  rpc InjectCloudletInfo(CloudletInfo) returns (Result) {}
  // Evict (delete) a CloudletInfo for regression testing
  rpc EvictCloudletInfo(CloudletInfo) returns (Result) {}
}

// (TODO) CloudletMetrics provide metrics collected about the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
message CloudletMetrics {
  // what goes here?
  uint64 foo = 5;
}

service CloudletMetricsApi {
  // Show Cloudlet metrics
  rpc ShowCloudletMetrics(CloudletMetrics) returns (stream CloudletMetrics) {
    option (google.api.http) = {
      post: "/show/cloudletmetrics"
      body: "*"
    };
  }
}
