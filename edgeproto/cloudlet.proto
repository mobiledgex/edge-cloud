// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "operator.proto";
import "result.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message CloudletKey {
  // Operator of the cloudlet site
  OperatorKey operator_key = 1 [(gogoproto.nullable) = false];
  // Name of the cloudlet
  string name = 2;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// Cloudlet Sites are created and uploaded by Operators
// This information is used to connect to and manage Cloudlets
message Cloudlet {
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // URI to use to connect to and control cloudlet site
  string access_uri = 4 [(protogen.test_update) = true];
  // Location of the cloudlet site (lat, long?)
  distributed_match_engine.Loc location = 5 [(gogoproto.nullable) = false];
  // Certs for accessing cloudlet site
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cache) = true;
  option (protocmd.noconfig) = "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp";
}

service CloudletApi {
  rpc CreateCloudlet(Cloudlet) returns (Result) {
    option (google.api.http) = {
      post: "/create/cloudlet"
      body: "*"
    };
  }
  rpc DeleteCloudlet(Cloudlet) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cloudet"
      body: "*"
    };
  }
  rpc UpdateCloudlet(Cloudlet) returns (Result) {
    option (google.api.http) = {
      post: "/update/cloudlet"
      body: "*"
    };
  }
  rpc ShowCloudlet(Cloudlet) returns (stream Cloudlet) {
    option (google.api.http) = {
      post: "/show/cloudlet"
      body: "*"
    };
  }
}

enum CloudletState {
  Unknown = 0;
  ConfiguringOpenstack = 1;
  ConfiguringKubernetes = 2;
  Ready = 3;
  Offline = 4;
}

// CloudletInfo is the static information CRM passes up to the controller
// about the Cloudlets it is managing. It is put into etcd or equivalent.
message CloudletInfo {
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // State of cloudlet
  CloudletState state = 3;
  // Id of client assigned by server
  int64 notify_id = 4;
  // cloudlet resources
  // Ram in MB
  uint64 os_max_ram = 6;
  // VCPU cores
  uint64 os_max_vcores = 7;
  // disk in GB
  uint64 os_max_vol_gb = 8;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
}

service CloudletInfoApi {
  rpc ShowCloudletInfo(CloudletInfo) returns (stream CloudletInfo) {
    option (google.api.http) = {
      post: "/show/cloudletinfo"
      body: "*"
    };
  }
}

// CloudletMetrics are metrics produced by the CRM to pass up to
// an analytics or storage node (not the controller). These are not
// stored in etcd, but probably logged as time series to disk (TBD)
message CloudletMetrics {
  // what goes here?
  uint64 foo = 5;
}

service CloudletMetricsApi {
  rpc ShowCloudletMetrics(CloudletMetrics) returns (stream CloudletMetrics) {
    option (google.api.http) = {
      post: "/show/cloudletmetrics"
      body: "*"
    };
  }
}
