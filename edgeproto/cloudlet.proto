// Cloudlet proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "flavor.proto";
import "operator.proto";
import "result.proto";
import "restagtable.proto";
import "common.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";
import "gogoproto/gogo.proto";

// Cloudlet unique key
//
// CloudletKey uniquely identifies a Cloudlet.
message CloudletKey {
  // Operator of the cloudlet site
  OperatorKey operator_key = 1 [(gogoproto.nullable) = false];
  // Name of the cloudlet
  string name = 2;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
  option (protogen.alias) = "operator=OperatorKey.Name";
}

// Operation time limits
//
// Time limits for cloudlet create, update and delete operations
message OperationTimeLimits{
    // override default max time to create a cluster instance (duration)
    int64 create_cluster_inst_timeout = 1 [(gogoproto.casttype) = "Duration"];
    // override default max time to update a cluster instance (duration)
    int64 update_cluster_inst_timeout = 2 [(gogoproto.casttype) = "Duration"];
    // override default max time to delete a cluster instance (duration)
    int64 delete_cluster_inst_timeout = 3 [(gogoproto.casttype) = "Duration"];
    // override default max time to create an app instance (duration)
    int64 create_app_inst_timeout = 4 [(gogoproto.casttype) = "Duration"];
    // override default max time to update an app instance (duration)
    int64 update_app_inst_timeout = 5 [(gogoproto.casttype) = "Duration"];
    // override default max time to delete an app instance (duration)
    int64 delete_app_inst_timeout = 6 [(gogoproto.casttype) = "Duration"];
}

// properites common to all cloudlets
message CloudletInfraCommon{
    // the mex docker registry, e.g.  registry.mobiledgex.net:5000. 
    string docker_registry = 1;
    // DNS Zone
    string dns_zone = 2;
    // registry file server contains files which get pulled on instantiation such as certs and images
    string registry_file_server = 3;
    // Cloudflare key
    string cf_key = 4; //MEX_CF_KEY
    // Cloudflare key
    string cf_user = 5; //MEX_CF_KEY
    // Docker registry password
    string docker_reg_pass = 6; //MEX_DOCKER_REG_PASS
    // network scheme
    string network_scheme = 7;
    // the name of the docker registry secret, e.g. mexgitlabsecret
    string docker_registry_secret = 8;
}

message AzureProperties{
  // azure region e.g. uswest2
  string location = 1;
  // azure resource group
  string resource_group = 2;
  // azure username
  string user_name = 3;
  // azure password
  string password = 4;
}

message GcpProperties{
  // gcp project for billing
  string project = 1;
  // availability zone
  string zone = 2;
  // service account to login with
  string service_account = 3;
  // vault credentials link
  string gcp_auth_key_url = 4;
}

message OpenStackProperties{
  // name of the external network, e.g. external-network-shared
  string os_external_network_name = 1; 
  //openstack image , e.g. mobiledgex
  string os_image_name = 2;
  // openstack router
  string os_external_router_name = 3;
  // openstack internal network
  string os_mex_network = 4;
  // openrc env vars 
  map<string, string> open_rc_vars = 5;
}

message CloudletInfraProperties{
    // what kind of infrastructure: Azure, GCP, Openstack
    string cloudlet_kind = 1;
    //name and version of the docker image container image that mexos runs in
    string mexos_container_image_name = 2;
    // openstack
    OpenStackProperties openstack_properties = 3;
    // azure
    AzureProperties azure_properties = 4;
    // gcp
    GcpProperties gcp_properties = 5;
}

// Platform Configuration
//
// Platform specific configuration required for Cloudlet management
message PlatformConfig {
  // Path to Docker registry holding edge-cloud image
  string container_registry_path = 1;
  // Path to platform base image
  string cloudlet_vm_image_path = 2;
  // Address of controller notify port (can be multiple of these)
  string notify_ctrl_addrs = 3;
  // Vault address
  string vault_addr  = 4;
  // TLS cert file
  string tls_cert_file = 5;
  // Environment variables
  map<string, string> env_var = 6;
  // Tag of edge-cloud image
  string platform_tag = 8;
  // Internal Test flag
  bool test_mode = 9;
  // Span string
  string span = 10;
  // Internal cleanup flag
  bool cleanup_mode = 11;
  // Region
  string region = 12;
}

// Platform Type
//
// PlatformType is the supported list of cloudlet types
enum PlatformType {
  // Fake Cloudlet
  PLATFORM_TYPE_FAKE = 0;
  // DIND Cloudlet
  PLATFORM_TYPE_DIND = 1;
  // Openstack Cloudlet
  PLATFORM_TYPE_OPENSTACK = 2;
  // Azure Cloudlet
  PLATFORM_TYPE_AZURE = 3;
  // GCP Cloudlet
  PLATFORM_TYPE_GCP = 4;
  // Edgebox Cloudlet
  PLATFORM_TYPE_EDGEBOX = 5;
  // Fake Infra Cloudlet
  PLATFORM_TYPE_FAKEINFRA = 6;
}

// optional resource input consists of a resource specifier and clouldkey name
message CloudletResMap {
  // Resource cloudlet key
  CloudletKey key = 1[(gogoproto.nullable) = false];
  // Resource mapping info
  map<string, string> mapping = 2;
  option (protogen.alias) = "name=Key.Name,operator=Key.OperatorKey.Name";
  option (protogen.also_required) = "Mapping";
}

// Cloudlet Action
//
// CloudletAction specifies state cloudlet action taken
enum CloudletAction {
	// No action taken
	ACTION_NONE = 0;
	// Action done
	ACTION_DONE = 1;
	// Action is in progress
	ACTION_IN_PROGRESS = 2;
}

// Cloudlet
//
// A Cloudlet is a set of compute resources at a particular location, provided by an Operator. 
message Cloudlet {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // required: true
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // Location of the Cloudlet site
  distributed_match_engine.Loc location = 5 [(gogoproto.nullable) = false];
  // Type of IP support provided by Cloudlet (see IpSupport)
  IpSupport ip_support = 6;
  // List of static IPs for static IP support
  string static_ips = 7;
  // Number of dynamic IPs available for dynamic IP support
  int32 num_dynamic_ips = 8;
  // time limits which override global settings if non-zero
  OperationTimeLimits time_limits = 9 [(gogoproto.nullable) = false];
  // Any errors trying to create, update, or delete the Cloudlet.
  repeated string errors = 10 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // status is used to reflect progress of creation or other events
  StatusInfo status = 11 [(protogen.backend) = true, (gogoproto.nullable) = false, (protogen.hidetag) = "nocmp"];
  // Current state of the cloudlet
  TrackedState state = 12 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Override actions to CRM
  CRMOverride crm_override = 13 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Deploy cloudlet services locally
  bool deployment_local = 14 [(protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Platform type
  PlatformType platform_type = 15;
  // Address for the CRM notify listener to run on
  string notify_srv_addr = 16 [(protogen.hidetag) = "nocmp"];
  // Min system resource requirements for platform
  FlavorKey flavor = 17 [(gogoproto.nullable) = false];
  // Physical infrastructure cloudlet name
  string physical_name = 18;
  // Single Key-Value pair of env var to be passed to CRM
  map<string, string> env_var = 19;
  // Cloudlet container version 
  string container_version = 20;
  // Platform Config Info
  PlatformConfig config = 21 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "nocmp"];
  // Optional resource to restagtbl key map key values = [gpu, nas, nic]
  map<string, edgeproto.ResTagTableKey> res_tag_map = 22 [(protogen.backend) = true];
  // Variables required to access cloudlet
  map<string, string> access_vars = 23;
  // MobiledgeX baseimage version where CRM services reside
  string vm_image_version = 24;
  // MobiledgeX OS package version on baseimage where CRM services reside
  string package_version = 25;

  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_custom_update) = true;
  option (protogen.notify_recv_hook) = true;
  option (protogen.noconfig) = "Location.HorizontalAccuracy,Location.VerticalAccuracy,Location.Course,Location.Speed,Location.Timestamp,Status,Config,NotifySrvAddr";
  option (protogen.alias) = "name=Key.Name,operator=Key.OperatorKey.Name";
}

message FlavorMatch {
  // Cloudlet ctx
  CloudletKey key = 1 [(gogoproto.nullable) = false];
  string flavor_name = 3;
  string availability_zone = 4;
 option (protogen.alias) = "cloudlet=Key.Name,operator=Key.OperatorKey.Name,flavor=FlavorName";
}

service CloudletApi {
  // Create Cloudlet. Sets up Cloudlet services on the Operator's compute resources,
  // and integrated as part of MobiledgeX edge resource portfolio.
  // These resources are managed from the Edge Controller.
  rpc CreateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/cloudlet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
    option (protogen.method_also_required) = "NumDynamicIps,Location.Latitude,Location.Longitude";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Delete Cloudlet. Removes the Cloudlet services where they are no longer managed
  // from the Edge Controller.
  rpc DeleteCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/cloudet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Update Cloudlet. Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.
  rpc UpdateCloudlet(Cloudlet) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/cloudlet"
      body: "*"
    };
    option (protogen.stream_out_incremental) = true;
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
    option (protogen.mc2_streamer_cache) = true;
  }
  // Show Cloudlets. Lists all the cloudlets managed from Edge Controller.
  rpc ShowCloudlet(Cloudlet) returns (stream Cloudlet) {
    option (google.api.http) = {
      post: "/show/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionView,";
    option (protogen.mc2_custom_authz) = true;
  }

  // Add Optional Resource tag table
  rpc AddCloudletResMapping(CloudletResMap) returns (Result) {
    option (google.api.http) = {
    post: "/addmapping/cloudlet"
    body: "*"
  };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
  }
  // Add Optional Resource tag table
  rpc RemoveCloudletResMapping(CloudletResMap) returns (Result) {
    option (google.api.http) = {
      post: "/rmmapping/cloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudlets,ActionManage,Key.OperatorKey.Name";
  }

  // Discover if flavor produces a matching platform flavor
  rpc FindFlavorMatch(FlavorMatch) returns (FlavorMatch) {
    option (google.api.http) = {
    post: "/findmapping/cloudlet"
    body: "*"
  };
  option (protogen.mc2_api) = "ResourceCloudlets,ActionView,Key.OperatorKey.Name";
  }
}

// CloudletState is the state of the Cloudlet.
enum CloudletState {
  // Unknown
  CLOUDLET_STATE_UNKNOWN = 0;
  // Create/Delete/Update encountered errors (see Errors field of CloudletInfo)
  CLOUDLET_STATE_ERRORS = 1;
  // Cloudlet is created and ready
  CLOUDLET_STATE_READY = 2;
  // Cloudlet is offline (unreachable)
  CLOUDLET_STATE_OFFLINE = 3;
  // Cloudlet is not present
  CLOUDLET_STATE_NOT_PRESENT = 4;
  // Cloudlet is initializing
  CLOUDLET_STATE_INIT = 5;
  // Cloudlet is upgrading
  CLOUDLET_STATE_UPGRADE = 6;
}

// Flavor details from the Cloudlet
message FlavorInfo {
  // Name of the flavor on the Cloudlet
  string name = 1;
  // Number of VCPU cores on the Cloudlet
  uint64 vcpus = 2;
  // Ram in MB on the Cloudlet
  uint64 ram = 3;
  // Amount of disk in GB on the Cloudlet
  uint64 disk = 4;
  // OS Flavor Properties, if any
  map<string,string> prop_map = 5 [(protogen.backend) = true];
}
message OSAZone {
  string name   = 1;
  string status = 2;
}

message OSImage {
  // image name
  string name = 1;
  // optional tags present on image
  string tags = 2;
  // image properties/metadata
  string properties = 3;
  // format qcow2, img, etc
  string disk_format = 4;
}

// CloudletInfo provides information from the Cloudlet Resource Manager about the state of the Cloudlet.
message CloudletInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  CloudletKey key = 2 [(gogoproto.nullable) = false];
  // State of cloudlet
  CloudletState state = 3;
  // Id of client assigned by server (internal use only)
  int64 notify_id = 4 [(protogen.hidetag) = "nocmp"];
  // Connected controller unique id
  string controller = 5 [(protogen.hidetag) = "nocmp"];
  // Maximum Ram in MB on the Cloudlet
  uint64 os_max_ram = 6;
  // Maximum number of VCPU cores on the Cloudlet
  uint64 os_max_vcores = 7;
  // Maximum amount of disk in GB on the Cloudlet
  uint64 os_max_vol_gb = 8;
  // Any errors encountered while making changes to the Cloudlet
  repeated string errors = 9;
  // Supported flavors by the Cloudlet
  repeated FlavorInfo flavors = 10;
  // status is used to reflect progress of creation or other events
  StatusInfo status = 11 [(gogoproto.nullable) = false];
  // Cloudlet container version
  string container_version = 12;
  // Availability Zones if any
  repeated OSAZone availability_zones = 13;
  // Local Images availble to cloudlet
  repeated OSImage os_images = 14;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
  option (protogen.notify_flush) = true;
  option (protogen.notify_recv_hook) = true;
  option (protogen.alias) = "name=Key.Name,operator=Key.OperatorKey.Name";
}

service CloudletInfoApi {
  // Show CloudletInfos
  rpc ShowCloudletInfo(CloudletInfo) returns (stream CloudletInfo) {
    option (google.api.http) = {
      post: "/show/cloudletinfo"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletAnalytics,ActionView,Key.OperatorKey.Name";
  }
  // Inject (create) a CloudletInfo for regression testing
  rpc InjectCloudletInfo(CloudletInfo) returns (Result) {}
  // Evict (delete) a CloudletInfo for regression testing
  rpc EvictCloudletInfo(CloudletInfo) returns (Result) {}
}

// (TODO) CloudletMetrics provide metrics collected about the Cloudlet. They are sent to a metrics collector for analytics. They are not stored in the persistent distributed database, but are stored as a time series in some other database or files.
message CloudletMetrics {
  // what goes here?
  uint64 foo = 5;
}

service CloudletMetricsApi {
  // Show Cloudlet metrics
  rpc ShowCloudletMetrics(CloudletMetrics) returns (stream CloudletMetrics) {
    option (google.api.http) = {
      post: "/show/cloudletmetrics"
      body: "*"
    };
  }
}
