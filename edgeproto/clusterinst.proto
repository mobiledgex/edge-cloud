// A ClusterInst defines a cluster on a particular Cloudlet

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd/protocmd.proto";
import "result.proto";
import "clusterflavor.proto";
import "cluster.proto";
import "cloudlet.proto";
import "common.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// ClusterInstKey uniquely identifies a Cluster Instance (ClusterInst) or Cluster Instance state (ClusterInstInfo).
message ClusterInstKey {
  // Cluster key
  ClusterKey cluster_key = 1 [(gogoproto.nullable) = false];
  // Cloudlet on which the Cluster is instantiated
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// ClusterInst is an instance of a Cluster on a Cloudlet. It is defined by a Cluster plus a Cloudlet key. This separation of the definition of the Cluster versus its instance is unique to Mobiledgex, and allows the Developer to provide the Cluster definition, while either the Developer may statically define the instances, or the Mobiledgex platform may dynamically create and destroy instances in response to demand.
// When a Cluster is instantiated on a Cloudlet, the user may override the default ClusterFlavor of the Cluster. This allows for an instance in one location to be provided more resources than an instance in other locations, in expectation of different demands in different locations.
message ClusterInst {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique key
  ClusterInstKey key = 2 [(gogoproto.nullable) = false];
  // ClusterFlavor of the Cluster
  ClusterFlavorKey flavor = 3 [(gogoproto.nullable) = false, (protogen.backend) = true];
  // Liveness of instance (see Liveness)
  Liveness liveness = 9 [(protogen.backend) = true];
  // Auto is set to true when automatically created by back-end (internal use only)
  bool auto = 10 [(protogen.backend) = true];
  // State of the cluster instance
  TrackedState state = 4 [(protogen.backend) = true, (protocmd.hidetag) = "nocmp"];
  // Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
  repeated string errors = 5 [(protogen.backend) = true, (protocmd.hidetag) = "nocmp"];
  // Override actions to CRM
  CRMOverride crm_override = 6 [(protocmd.hidetag) = "nocmp"];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_streamout) = true;
  option (protogen.generate_cache) = true;
  option (protocmd.noconfig) = "Nodes,Liveness,Auto";
  option (protogen.generate_wait_for_state) = "TrackedState";
}

service ClusterInstApi {
  // Create a Cluster instance
  rpc CreateClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/create/clusterinst"
      body: "*"
    };
    option (protocmd.stream_out_incremental) = true;
  }
  // Delete a Cluster instance
  rpc DeleteClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/delete/clusterinst"
      body: "*"
    };
    option (protocmd.stream_out_incremental) = true;
  }
  // Update a Cluster instance
  rpc UpdateClusterInst(ClusterInst) returns (stream Result) {
    option (google.api.http) = {
      post: "/update/clusterinst"
      body: "*"
    };
    option (protocmd.stream_out_incremental) = true;
  }
  // Show Cluster instances
  rpc ShowClusterInst(ClusterInst) returns (stream ClusterInst) {
    option (google.api.http) = {
      post: "/show/clusterinst"
      body: "*"
    };
  }
}

// ClusterInstInfo provides information from the Cloudlet Resource Manager about the state of the ClusterInst on the Cloudlet. Whereas the ClusterInst defines the intent of instantiating a Cluster on a Cloudlet, the ClusterInstInfo defines the current state of trying to apply that intent on the physical resources of the Cloudlet.
message ClusterInstInfo {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // Unique identifier key
  ClusterInstKey key = 2 [(gogoproto.nullable) = false];
  // Id of client assigned by server (internal use only)
  int64 notify_id = 3 [(protocmd.hidetag) = "nocmp"];
  // State of the cluster instance
  TrackedState state = 4;
  // Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.
  repeated string errors = 5;
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cache) = true;
  option (protogen.generate_show_test) = true;
  option (protogen.notify_cache) = true;
}

service ClusterInstInfoApi {
  // Show Cluster instances state.
  rpc ShowClusterInstInfo(ClusterInstInfo) returns (stream ClusterInstInfo) {
    option (google.api.http) = {
      post: "/show/clusterinstinfo"
      body: "*"
    };
  }
}
