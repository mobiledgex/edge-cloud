// CloudletPool proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "result.proto";
import "gogoproto/gogo.proto";
import "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto/loc.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// CloudletPool unique key
//
// CloudletPoolKey uniquely identifies a CloudletPool.
message CloudletPoolKey {
  // Name of the organization this pool belongs to
  string organization = 1 [(protogen.keytag) = "cloudletpoolorg"];
  // CloudletPool Name
  string name = 2 [(protogen.keytag) = "cloudletpool"];
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

// CloudletPool defines a pool of Cloudlets that have restricted access.
message CloudletPool {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // CloudletPool key
  CloudletPoolKey key = 2 [(gogoproto.nullable) = false];
  // Cloudlets part of the pool
  repeated string cloudlets = 3;
    // Created at time
  distributed_match_engine.Timestamp created_at = 4 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
    // Updated at time
  distributed_match_engine.Timestamp updated_at = 5 [(gogoproto.nullable) = false, (protogen.backend) = true, (protogen.hidetag) = "timestamp"];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.noconfig) = "Members,CreatedAt,UpdatedAt";
  option (protogen.alias) = "name=Key.Name,org=Key.Organization";
  option (protogen.uses_org) = "key=Organization";
  option (protogen.notify_cache) = true;
  option (protogen.generate_lookup_by_sublist) = "CloudletKey";  
}

// CloudletPoolMember is used to add and remove a Cloudlet from a CloudletPool
message CloudletPoolMember {
  // CloudletPool key
  CloudletPoolKey key = 1 [(gogoproto.nullable) = false];
  // Cloudlet key
  string cloudlet_name = 2;
  option (protogen.alias) = "pool=Key.Name,cloudlet=CloudletName,org=Key.Organization";
  //  option (protogen.uses_org) = "none";
}

service CloudletPoolApi {
  // Create a CloudletPool
  rpc CreateCloudletPool(CloudletPool) returns (Result) {
    option (google.api.http) = {
      post: "/create/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,Key.Organization";
    option (protogen.mc2_api_requires_org) = "Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Delete a CloudletPool
  rpc DeleteCloudletPool(CloudletPool) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Update a CloudletPool
  rpc UpdateCloudletPool(CloudletPool) returns (Result) {
    option (google.api.http) = {
      post: "/update/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Show CloudletPools
  rpc ShowCloudletPool(CloudletPool) returns (stream CloudletPool) {
    option (google.api.http) = {
      post: "/show/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,Key.Organization";
  }
  // Add a Cloudlet to a CloudletPool
  rpc AddCloudletPoolMember(CloudletPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/add/cloudletpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,Key.Organization";
    option (protogen.mc2_custom_authz) = true;
  }
  // Remove a Cloudlet from a CloudletPool
  rpc RemoveCloudletPoolMember(CloudletPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/remove/cloudletpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,Key.Organization";
  }
}
