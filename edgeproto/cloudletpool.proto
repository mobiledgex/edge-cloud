// CloudletPool proto

syntax = "proto3";
package edgeproto;

import "google/api/annotations.proto";
import "github.com/mobiledgex/edge-cloud/protogen/protogen.proto";
import "cloudlet.proto";
import "result.proto";
import "gogoproto/gogo.proto";

message CloudletPoolKey {
  // CloudletPool Name
  string name = 1;
  option (protogen.generate_matches) = true;
  option (protogen.obj_key) = true;
  option (gogoproto.gostring) = true;
}

message CloudletPool {
  // Fields are used for the Update API to specify which fields to apply
  repeated string fields = 1;
  // CloudletPool key
  CloudletPoolKey key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.noconfig) = "Members";
  option (protogen.alias) = "name=Key.Name";
}

message CloudletPoolMember {
  // CloudletPool key
  CloudletPoolKey pool_key = 1 [(gogoproto.nullable) = false];
  // Cloudlet key
  CloudletKey cloudlet_key = 2 [(gogoproto.nullable) = false];
  option (protogen.generate_matches) = true;
  option (protogen.obj_and_key) = true;
  option (gogoproto.gostring) = true;
  option (protogen.generate_cud) = true;
  option (protogen.generate_cud_test) = true;
  option (protogen.generate_cud_test_update) = false;
  option (protogen.generate_cache) = true;
  option (protogen.alias) = "pool=PoolKey.Name,cloudlet=CloudletKey.Name,operator=CloudletKey.OperatorKey.Name";
}

service CloudletPoolApi {
  // Create a CloudletPool
  rpc CreateCloudletPool(CloudletPool) returns (Result) {
    option (google.api.http) = {
      post: "/create/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
  }
  // Delete a CloudletPool
  rpc DeleteCloudletPool(CloudletPool) returns (Result) {
    option (google.api.http) = {
      post: "/delete/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
    option (protogen.mc2_custom_authz) = true;
 }
  // Show CloudletPools
  rpc ShowCloudletPool(CloudletPool) returns (stream CloudletPool) {
    option (google.api.http) = {
      post: "/show/cloudletpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,";
  }
}

service CloudletPoolMemberApi {
  // Add a Cloudlet to a CloudletPool
  rpc CreateCloudletPoolMember(CloudletPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/add/cloudletpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
  }
  // Remove a Cloudlet from a CloudletPool
  rpc DeleteCloudletPoolMember(CloudletPoolMember) returns (Result) {
    option (google.api.http) = {
      post: "/remove/cloudletpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionManage,";
  }
  // Show the Cloudlet to CloudletPool relationships
  rpc ShowCloudletPoolMember(CloudletPoolMember) returns (stream CloudletPoolMember) {
    option (google.api.http) = {
      post: "/show/cloudletpoolmember"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,";
  }
}

service CloudletPoolShowApi {
  option (protogen.dummy_server) = false;
  // Show CloudletPools that have Cloudlet as a member
  rpc ShowPoolsForCloudlet(CloudletKey) returns (stream CloudletPool) {
    option (google.api.http) = {
      post: "/show/poolsforcloudlet"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,";
    option (protogen.input_required) = true;
  }
  // Show Cloudlets that belong to the Pool
  rpc ShowCloudletsForPool(CloudletPoolKey) returns (stream Cloudlet) {
    option (google.api.http) = {
      post: "/show/cloudletsforpool"
      body: "*"
    };
    option (protogen.mc2_api) = "ResourceCloudletPools,ActionView,";
    option (protogen.input_required) = true;
  }
}
