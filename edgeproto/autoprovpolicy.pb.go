// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: autoprovpolicy.proto

package edgeproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import google_protobuf1 "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/objstore"
import "github.com/coreos/etcd/clientv3/concurrency"
import "github.com/mobiledgex/edge-cloud/util"
import "github.com/mobiledgex/edge-cloud/log"
import strings "strings"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoProvPolicy defines the automated provisioning policy
type AutoProvPolicy struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// Unique identifier key
	Key PolicyKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Minimum number of clients within the auto deploy interval to trigger deployment
	DeployClientCount uint32 `protobuf:"varint,3,opt,name=deploy_client_count,json=deployClientCount,proto3" json:"deploy_client_count,omitempty"`
	// Number of intervals to check before triggering deployment
	DeployIntervalCount uint32 `protobuf:"varint,4,opt,name=deploy_interval_count,json=deployIntervalCount,proto3" json:"deploy_interval_count,omitempty"`
	// Allowed deployment locations
	Cloudlets []*AutoProvCloudlet `protobuf:"bytes,5,rep,name=cloudlets" json:"cloudlets,omitempty"`
	// Minimum number of active instances for High-Availability
	MinActiveInstances uint32 `protobuf:"varint,6,opt,name=min_active_instances,json=minActiveInstances,proto3" json:"min_active_instances,omitempty"`
	// Maximum number of instances (active or not)
	MaxInstances uint32 `protobuf:"varint,7,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
}

func (m *AutoProvPolicy) Reset()                    { *m = AutoProvPolicy{} }
func (m *AutoProvPolicy) String() string            { return proto.CompactTextString(m) }
func (*AutoProvPolicy) ProtoMessage()               {}
func (*AutoProvPolicy) Descriptor() ([]byte, []int) { return fileDescriptorAutoprovpolicy, []int{0} }

// AutoProvCloudlet stores the potential cloudlet and location for DME lookup
type AutoProvCloudlet struct {
	// Cloudlet key
	Key CloudletKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Cloudlet location
	Loc distributed_match_engine.Loc `protobuf:"bytes,2,opt,name=loc" json:"loc"`
}

func (m *AutoProvCloudlet) Reset()                    { *m = AutoProvCloudlet{} }
func (m *AutoProvCloudlet) String() string            { return proto.CompactTextString(m) }
func (*AutoProvCloudlet) ProtoMessage()               {}
func (*AutoProvCloudlet) Descriptor() ([]byte, []int) { return fileDescriptorAutoprovpolicy, []int{1} }

// AutoProvCount is used to send potential cloudlet and location counts from DME to Controller
type AutoProvCount struct {
	// Target app
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey" json:"app_key"`
	// Target cloudlet
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
	// FindCloudlet client count
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	// Process count immediately
	ProcessNow bool `protobuf:"varint,4,opt,name=process_now,json=processNow,proto3" json:"process_now,omitempty"`
	// Immediately deploy to clusterinst
	DeployNowKey ClusterInstKey `protobuf:"bytes,5,opt,name=deploy_now_key,json=deployNowKey" json:"deploy_now_key"`
}

func (m *AutoProvCount) Reset()                    { *m = AutoProvCount{} }
func (m *AutoProvCount) String() string            { return proto.CompactTextString(m) }
func (*AutoProvCount) ProtoMessage()               {}
func (*AutoProvCount) Descriptor() ([]byte, []int) { return fileDescriptorAutoprovpolicy, []int{2} }

// AutoProvCounts is used to send potential cloudlet and location counts from DME to Controller
type AutoProvCounts struct {
	// DME node name
	DmeNodeName string `protobuf:"bytes,1,opt,name=dme_node_name,json=dmeNodeName,proto3" json:"dme_node_name,omitempty"`
	// Timestamp when the metric was captured
	Timestamp google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	// List of DmeCount from DME
	Counts []*AutoProvCount `protobuf:"bytes,3,rep,name=counts" json:"counts,omitempty"`
}

func (m *AutoProvCounts) Reset()                    { *m = AutoProvCounts{} }
func (m *AutoProvCounts) String() string            { return proto.CompactTextString(m) }
func (*AutoProvCounts) ProtoMessage()               {}
func (*AutoProvCounts) Descriptor() ([]byte, []int) { return fileDescriptorAutoprovpolicy, []int{3} }

// AutoProvPolicyCloudlet is used to add and remove Cloudlets from the Auto Provisioning Policy
type AutoProvPolicyCloudlet struct {
	// Unique policy identifier key
	Key PolicyKey `protobuf:"bytes,1,opt,name=key" json:"key"`
	// Cloudlet identifier key
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
}

func (m *AutoProvPolicyCloudlet) Reset()         { *m = AutoProvPolicyCloudlet{} }
func (m *AutoProvPolicyCloudlet) String() string { return proto.CompactTextString(m) }
func (*AutoProvPolicyCloudlet) ProtoMessage()    {}
func (*AutoProvPolicyCloudlet) Descriptor() ([]byte, []int) {
	return fileDescriptorAutoprovpolicy, []int{4}
}

func init() {
	proto.RegisterType((*AutoProvPolicy)(nil), "edgeproto.AutoProvPolicy")
	proto.RegisterType((*AutoProvCloudlet)(nil), "edgeproto.AutoProvCloudlet")
	proto.RegisterType((*AutoProvCount)(nil), "edgeproto.AutoProvCount")
	proto.RegisterType((*AutoProvCounts)(nil), "edgeproto.AutoProvCounts")
	proto.RegisterType((*AutoProvPolicyCloudlet)(nil), "edgeproto.AutoProvPolicyCloudlet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AutoProvPolicyApi service

type AutoProvPolicyApiClient interface {
	// Create an Auto Provisioning Policy
	CreateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Delete an Auto Provisioning Policy
	DeleteAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Update an Auto Provisioning Policy
	UpdateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error)
	// Show Auto Provisioning Policies. Any fields specified will be used to filter results.
	ShowAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (AutoProvPolicyApi_ShowAutoProvPolicyClient, error)
	// Add a Cloudlet to the Auto Provisioning Policy
	AddAutoProvPolicyCloudlet(ctx context.Context, in *AutoProvPolicyCloudlet, opts ...grpc.CallOption) (*Result, error)
	// Remove a Cloudlet from the Auto Provisioning Policy
	RemoveAutoProvPolicyCloudlet(ctx context.Context, in *AutoProvPolicyCloudlet, opts ...grpc.CallOption) (*Result, error)
}

type autoProvPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewAutoProvPolicyApiClient(cc *grpc.ClientConn) AutoProvPolicyApiClient {
	return &autoProvPolicyApiClient{cc}
}

func (c *autoProvPolicyApiClient) CreateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/CreateAutoProvPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) DeleteAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/DeleteAutoProvPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) UpdateAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/UpdateAutoProvPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) ShowAutoProvPolicy(ctx context.Context, in *AutoProvPolicy, opts ...grpc.CallOption) (AutoProvPolicyApi_ShowAutoProvPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AutoProvPolicyApi_serviceDesc.Streams[0], c.cc, "/edgeproto.AutoProvPolicyApi/ShowAutoProvPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &autoProvPolicyApiShowAutoProvPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutoProvPolicyApi_ShowAutoProvPolicyClient interface {
	Recv() (*AutoProvPolicy, error)
	grpc.ClientStream
}

type autoProvPolicyApiShowAutoProvPolicyClient struct {
	grpc.ClientStream
}

func (x *autoProvPolicyApiShowAutoProvPolicyClient) Recv() (*AutoProvPolicy, error) {
	m := new(AutoProvPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *autoProvPolicyApiClient) AddAutoProvPolicyCloudlet(ctx context.Context, in *AutoProvPolicyCloudlet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/AddAutoProvPolicyCloudlet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autoProvPolicyApiClient) RemoveAutoProvPolicyCloudlet(ctx context.Context, in *AutoProvPolicyCloudlet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/edgeproto.AutoProvPolicyApi/RemoveAutoProvPolicyCloudlet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AutoProvPolicyApi service

type AutoProvPolicyApiServer interface {
	// Create an Auto Provisioning Policy
	CreateAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Delete an Auto Provisioning Policy
	DeleteAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Update an Auto Provisioning Policy
	UpdateAutoProvPolicy(context.Context, *AutoProvPolicy) (*Result, error)
	// Show Auto Provisioning Policies. Any fields specified will be used to filter results.
	ShowAutoProvPolicy(*AutoProvPolicy, AutoProvPolicyApi_ShowAutoProvPolicyServer) error
	// Add a Cloudlet to the Auto Provisioning Policy
	AddAutoProvPolicyCloudlet(context.Context, *AutoProvPolicyCloudlet) (*Result, error)
	// Remove a Cloudlet from the Auto Provisioning Policy
	RemoveAutoProvPolicyCloudlet(context.Context, *AutoProvPolicyCloudlet) (*Result, error)
}

func RegisterAutoProvPolicyApiServer(s *grpc.Server, srv AutoProvPolicyApiServer) {
	s.RegisterService(&_AutoProvPolicyApi_serviceDesc, srv)
}

func _AutoProvPolicyApi_CreateAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).CreateAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/CreateAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).CreateAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_DeleteAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).DeleteAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/DeleteAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).DeleteAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_UpdateAutoProvPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).UpdateAutoProvPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/UpdateAutoProvPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).UpdateAutoProvPolicy(ctx, req.(*AutoProvPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_ShowAutoProvPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AutoProvPolicy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutoProvPolicyApiServer).ShowAutoProvPolicy(m, &autoProvPolicyApiShowAutoProvPolicyServer{stream})
}

type AutoProvPolicyApi_ShowAutoProvPolicyServer interface {
	Send(*AutoProvPolicy) error
	grpc.ServerStream
}

type autoProvPolicyApiShowAutoProvPolicyServer struct {
	grpc.ServerStream
}

func (x *autoProvPolicyApiShowAutoProvPolicyServer) Send(m *AutoProvPolicy) error {
	return x.ServerStream.SendMsg(m)
}

func _AutoProvPolicyApi_AddAutoProvPolicyCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicyCloudlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).AddAutoProvPolicyCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/AddAutoProvPolicyCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).AddAutoProvPolicyCloudlet(ctx, req.(*AutoProvPolicyCloudlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutoProvPolicyApi_RemoveAutoProvPolicyCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoProvPolicyCloudlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoProvPolicyApiServer).RemoveAutoProvPolicyCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.AutoProvPolicyApi/RemoveAutoProvPolicyCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoProvPolicyApiServer).RemoveAutoProvPolicyCloudlet(ctx, req.(*AutoProvPolicyCloudlet))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutoProvPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.AutoProvPolicyApi",
	HandlerType: (*AutoProvPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_CreateAutoProvPolicy_Handler,
		},
		{
			MethodName: "DeleteAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_DeleteAutoProvPolicy_Handler,
		},
		{
			MethodName: "UpdateAutoProvPolicy",
			Handler:    _AutoProvPolicyApi_UpdateAutoProvPolicy_Handler,
		},
		{
			MethodName: "AddAutoProvPolicyCloudlet",
			Handler:    _AutoProvPolicyApi_AddAutoProvPolicyCloudlet_Handler,
		},
		{
			MethodName: "RemoveAutoProvPolicyCloudlet",
			Handler:    _AutoProvPolicyApi_RemoveAutoProvPolicyCloudlet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAutoProvPolicy",
			Handler:       _AutoProvPolicyApi_ShowAutoProvPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "autoprovpolicy.proto",
}

func (m *AutoProvPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.DeployClientCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.DeployClientCount))
	}
	if m.DeployIntervalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.DeployIntervalCount))
	}
	if len(m.Cloudlets) > 0 {
		for _, msg := range m.Cloudlets {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MinActiveInstances != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.MinActiveInstances))
	}
	if m.MaxInstances != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.MaxInstances))
	}
	return i, nil
}

func (m *AutoProvCloudlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvCloudlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Loc.Size()))
	n3, err := m.Loc.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *AutoProvCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.AppKey.Size()))
	n4, err := m.AppKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.CloudletKey.Size()))
	n5, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Count))
	}
	if m.ProcessNow {
		dAtA[i] = 0x20
		i++
		if m.ProcessNow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.DeployNowKey.Size()))
	n6, err := m.DeployNowKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *AutoProvCounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvCounts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DmeNodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAutoprovpolicy(dAtA, i, uint64(len(m.DmeNodeName)))
		i += copy(dAtA[i:], m.DmeNodeName)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Timestamp.Size()))
	n7, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Counts) > 0 {
		for _, msg := range m.Counts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAutoprovpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoProvPolicyCloudlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoProvPolicyCloudlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.Key.Size()))
	n8, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintAutoprovpolicy(dAtA, i, uint64(m.CloudletKey.Size()))
	n9, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func encodeVarintAutoprovpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoProvPolicy) Matches(o *AutoProvPolicy, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.DeployClientCount != 0 {
		if o.DeployClientCount != m.DeployClientCount {
			return false
		}
	}
	if !opts.Filter || o.DeployIntervalCount != 0 {
		if o.DeployIntervalCount != m.DeployIntervalCount {
			return false
		}
	}
	if !opts.Filter || o.Cloudlets != nil {
		if m.Cloudlets == nil && o.Cloudlets != nil || m.Cloudlets != nil && o.Cloudlets == nil {
			return false
		} else if m.Cloudlets != nil && o.Cloudlets != nil {
			if len(m.Cloudlets) != len(o.Cloudlets) {
				return false
			}
			for i := 0; i < len(m.Cloudlets); i++ {
			}
		}
	}
	if !opts.Filter || o.MinActiveInstances != 0 {
		if o.MinActiveInstances != m.MinActiveInstances {
			return false
		}
	}
	if !opts.Filter || o.MaxInstances != 0 {
		if o.MaxInstances != m.MaxInstances {
			return false
		}
	}
	return true
}

const AutoProvPolicyFieldKey = "2"
const AutoProvPolicyFieldKeyOrganization = "2.1"
const AutoProvPolicyFieldKeyName = "2.2"
const AutoProvPolicyFieldDeployClientCount = "3"
const AutoProvPolicyFieldDeployIntervalCount = "4"
const AutoProvPolicyFieldCloudlets = "5"
const AutoProvPolicyFieldCloudletsKey = "5.1"
const AutoProvPolicyFieldCloudletsKeyOrganization = "5.1.1"
const AutoProvPolicyFieldCloudletsKeyName = "5.1.2"
const AutoProvPolicyFieldCloudletsLoc = "5.2"
const AutoProvPolicyFieldCloudletsLocLatitude = "5.2.1"
const AutoProvPolicyFieldCloudletsLocLongitude = "5.2.2"
const AutoProvPolicyFieldCloudletsLocHorizontalAccuracy = "5.2.3"
const AutoProvPolicyFieldCloudletsLocVerticalAccuracy = "5.2.4"
const AutoProvPolicyFieldCloudletsLocAltitude = "5.2.5"
const AutoProvPolicyFieldCloudletsLocCourse = "5.2.6"
const AutoProvPolicyFieldCloudletsLocSpeed = "5.2.7"
const AutoProvPolicyFieldCloudletsLocTimestamp = "5.2.8"
const AutoProvPolicyFieldCloudletsLocTimestampSeconds = "5.2.8.1"
const AutoProvPolicyFieldCloudletsLocTimestampNanos = "5.2.8.2"
const AutoProvPolicyFieldMinActiveInstances = "6"
const AutoProvPolicyFieldMaxInstances = "7"

var AutoProvPolicyAllFields = []string{
	AutoProvPolicyFieldKeyOrganization,
	AutoProvPolicyFieldKeyName,
	AutoProvPolicyFieldDeployClientCount,
	AutoProvPolicyFieldDeployIntervalCount,
	AutoProvPolicyFieldCloudletsKeyOrganization,
	AutoProvPolicyFieldCloudletsKeyName,
	AutoProvPolicyFieldCloudletsLocLatitude,
	AutoProvPolicyFieldCloudletsLocLongitude,
	AutoProvPolicyFieldCloudletsLocHorizontalAccuracy,
	AutoProvPolicyFieldCloudletsLocVerticalAccuracy,
	AutoProvPolicyFieldCloudletsLocAltitude,
	AutoProvPolicyFieldCloudletsLocCourse,
	AutoProvPolicyFieldCloudletsLocSpeed,
	AutoProvPolicyFieldCloudletsLocTimestampSeconds,
	AutoProvPolicyFieldCloudletsLocTimestampNanos,
	AutoProvPolicyFieldMinActiveInstances,
	AutoProvPolicyFieldMaxInstances,
}

var AutoProvPolicyAllFieldsMap = map[string]struct{}{
	AutoProvPolicyFieldKeyOrganization:                struct{}{},
	AutoProvPolicyFieldKeyName:                        struct{}{},
	AutoProvPolicyFieldDeployClientCount:              struct{}{},
	AutoProvPolicyFieldDeployIntervalCount:            struct{}{},
	AutoProvPolicyFieldCloudletsKeyOrganization:       struct{}{},
	AutoProvPolicyFieldCloudletsKeyName:               struct{}{},
	AutoProvPolicyFieldCloudletsLocLatitude:           struct{}{},
	AutoProvPolicyFieldCloudletsLocLongitude:          struct{}{},
	AutoProvPolicyFieldCloudletsLocHorizontalAccuracy: struct{}{},
	AutoProvPolicyFieldCloudletsLocVerticalAccuracy:   struct{}{},
	AutoProvPolicyFieldCloudletsLocAltitude:           struct{}{},
	AutoProvPolicyFieldCloudletsLocCourse:             struct{}{},
	AutoProvPolicyFieldCloudletsLocSpeed:              struct{}{},
	AutoProvPolicyFieldCloudletsLocTimestampSeconds:   struct{}{},
	AutoProvPolicyFieldCloudletsLocTimestampNanos:     struct{}{},
	AutoProvPolicyFieldMinActiveInstances:             struct{}{},
	AutoProvPolicyFieldMaxInstances:                   struct{}{},
}

var AutoProvPolicyAllFieldsStringMap = map[string]string{
	AutoProvPolicyFieldKeyOrganization:                "Key Organization",
	AutoProvPolicyFieldKeyName:                        "Key Name",
	AutoProvPolicyFieldDeployClientCount:              "Deploy Client Count",
	AutoProvPolicyFieldDeployIntervalCount:            "Deploy Interval Count",
	AutoProvPolicyFieldCloudletsKeyOrganization:       "Cloudlets Key Organization",
	AutoProvPolicyFieldCloudletsKeyName:               "Cloudlets Key Name",
	AutoProvPolicyFieldCloudletsLocLatitude:           "Cloudlets Loc Latitude",
	AutoProvPolicyFieldCloudletsLocLongitude:          "Cloudlets Loc Longitude",
	AutoProvPolicyFieldCloudletsLocHorizontalAccuracy: "Cloudlets Loc Horizontal Accuracy",
	AutoProvPolicyFieldCloudletsLocVerticalAccuracy:   "Cloudlets Loc Vertical Accuracy",
	AutoProvPolicyFieldCloudletsLocAltitude:           "Cloudlets Loc Altitude",
	AutoProvPolicyFieldCloudletsLocCourse:             "Cloudlets Loc Course",
	AutoProvPolicyFieldCloudletsLocSpeed:              "Cloudlets Loc Speed",
	AutoProvPolicyFieldCloudletsLocTimestampSeconds:   "Cloudlets Loc Timestamp Seconds",
	AutoProvPolicyFieldCloudletsLocTimestampNanos:     "Cloudlets Loc Timestamp Nanos",
	AutoProvPolicyFieldMinActiveInstances:             "Min Active Instances",
	AutoProvPolicyFieldMaxInstances:                   "Max Instances",
}

func (m *AutoProvPolicy) IsKeyField(s string) bool {
	return strings.HasPrefix(s, AutoProvPolicyFieldKey+".")
}

func (m *AutoProvPolicy) DiffFields(o *AutoProvPolicy, fields map[string]struct{}) {
	if m.Key.Organization != o.Key.Organization {
		fields[AutoProvPolicyFieldKeyOrganization] = struct{}{}
		fields[AutoProvPolicyFieldKey] = struct{}{}
	}
	if m.Key.Name != o.Key.Name {
		fields[AutoProvPolicyFieldKeyName] = struct{}{}
		fields[AutoProvPolicyFieldKey] = struct{}{}
	}
	if m.DeployClientCount != o.DeployClientCount {
		fields[AutoProvPolicyFieldDeployClientCount] = struct{}{}
	}
	if m.DeployIntervalCount != o.DeployIntervalCount {
		fields[AutoProvPolicyFieldDeployIntervalCount] = struct{}{}
	}
	if m.Cloudlets != nil && o.Cloudlets != nil {
		if len(m.Cloudlets) != len(o.Cloudlets) {
			fields[AutoProvPolicyFieldCloudlets] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.Cloudlets); i0++ {
				if m.Cloudlets[i0].Key.Organization != o.Cloudlets[i0].Key.Organization {
					fields[AutoProvPolicyFieldCloudletsKeyOrganization] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsKey] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Key.Name != o.Cloudlets[i0].Key.Name {
					fields[AutoProvPolicyFieldCloudletsKeyName] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsKey] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Latitude != o.Cloudlets[i0].Loc.Latitude {
					fields[AutoProvPolicyFieldCloudletsLocLatitude] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Longitude != o.Cloudlets[i0].Loc.Longitude {
					fields[AutoProvPolicyFieldCloudletsLocLongitude] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.HorizontalAccuracy != o.Cloudlets[i0].Loc.HorizontalAccuracy {
					fields[AutoProvPolicyFieldCloudletsLocHorizontalAccuracy] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.VerticalAccuracy != o.Cloudlets[i0].Loc.VerticalAccuracy {
					fields[AutoProvPolicyFieldCloudletsLocVerticalAccuracy] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Altitude != o.Cloudlets[i0].Loc.Altitude {
					fields[AutoProvPolicyFieldCloudletsLocAltitude] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Course != o.Cloudlets[i0].Loc.Course {
					fields[AutoProvPolicyFieldCloudletsLocCourse] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Speed != o.Cloudlets[i0].Loc.Speed {
					fields[AutoProvPolicyFieldCloudletsLocSpeed] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
				if m.Cloudlets[i0].Loc.Timestamp != nil && o.Cloudlets[i0].Loc.Timestamp != nil {
					if m.Cloudlets[i0].Loc.Timestamp.Seconds != o.Cloudlets[i0].Loc.Timestamp.Seconds {
						fields[AutoProvPolicyFieldCloudletsLocTimestampSeconds] = struct{}{}
						fields[AutoProvPolicyFieldCloudletsLocTimestamp] = struct{}{}
						fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
						fields[AutoProvPolicyFieldCloudlets] = struct{}{}
					}
					if m.Cloudlets[i0].Loc.Timestamp.Nanos != o.Cloudlets[i0].Loc.Timestamp.Nanos {
						fields[AutoProvPolicyFieldCloudletsLocTimestampNanos] = struct{}{}
						fields[AutoProvPolicyFieldCloudletsLocTimestamp] = struct{}{}
						fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
						fields[AutoProvPolicyFieldCloudlets] = struct{}{}
					}
				} else if (m.Cloudlets[i0].Loc.Timestamp != nil && o.Cloudlets[i0].Loc.Timestamp == nil) || (m.Cloudlets[i0].Loc.Timestamp == nil && o.Cloudlets[i0].Loc.Timestamp != nil) {
					fields[AutoProvPolicyFieldCloudletsLocTimestamp] = struct{}{}
					fields[AutoProvPolicyFieldCloudletsLoc] = struct{}{}
					fields[AutoProvPolicyFieldCloudlets] = struct{}{}
				}
			}
		}
	} else if (m.Cloudlets != nil && o.Cloudlets == nil) || (m.Cloudlets == nil && o.Cloudlets != nil) {
		fields[AutoProvPolicyFieldCloudlets] = struct{}{}
	}
	if m.MinActiveInstances != o.MinActiveInstances {
		fields[AutoProvPolicyFieldMinActiveInstances] = struct{}{}
	}
	if m.MaxInstances != o.MaxInstances {
		fields[AutoProvPolicyFieldMaxInstances] = struct{}{}
	}
}

func (m *AutoProvPolicy) CopyInFields(src *AutoProvPolicy) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.Organization != src.Key.Organization {
				m.Key.Organization = src.Key.Organization
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.Name != src.Key.Name {
				m.Key.Name = src.Key.Name
				changed++
			}
		}
	}
	if _, set := fmap["3"]; set {
		if m.DeployClientCount != src.DeployClientCount {
			m.DeployClientCount = src.DeployClientCount
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.DeployIntervalCount != src.DeployIntervalCount {
			m.DeployIntervalCount = src.DeployIntervalCount
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if src.Cloudlets != nil {
			if m.Cloudlets == nil || len(m.Cloudlets) != len(src.Cloudlets) {
				m.Cloudlets = make([]*AutoProvCloudlet, len(src.Cloudlets))
				changed++
			}
			for i0 := 0; i0 < len(src.Cloudlets); i0++ {
				m.Cloudlets[i0] = &AutoProvCloudlet{}
				if _, set := fmap["5.1"]; set {
					if _, set := fmap["5.1.1"]; set {
						if m.Cloudlets[i0].Key.Organization != src.Cloudlets[i0].Key.Organization {
							m.Cloudlets[i0].Key.Organization = src.Cloudlets[i0].Key.Organization
							changed++
						}
					}
					if _, set := fmap["5.1.2"]; set {
						if m.Cloudlets[i0].Key.Name != src.Cloudlets[i0].Key.Name {
							m.Cloudlets[i0].Key.Name = src.Cloudlets[i0].Key.Name
							changed++
						}
					}
				}
				if _, set := fmap["5.2"]; set {
					if _, set := fmap["5.2.1"]; set {
						if m.Cloudlets[i0].Loc.Latitude != src.Cloudlets[i0].Loc.Latitude {
							m.Cloudlets[i0].Loc.Latitude = src.Cloudlets[i0].Loc.Latitude
							changed++
						}
					}
					if _, set := fmap["5.2.2"]; set {
						if m.Cloudlets[i0].Loc.Longitude != src.Cloudlets[i0].Loc.Longitude {
							m.Cloudlets[i0].Loc.Longitude = src.Cloudlets[i0].Loc.Longitude
							changed++
						}
					}
					if _, set := fmap["5.2.3"]; set {
						if m.Cloudlets[i0].Loc.HorizontalAccuracy != src.Cloudlets[i0].Loc.HorizontalAccuracy {
							m.Cloudlets[i0].Loc.HorizontalAccuracy = src.Cloudlets[i0].Loc.HorizontalAccuracy
							changed++
						}
					}
					if _, set := fmap["5.2.4"]; set {
						if m.Cloudlets[i0].Loc.VerticalAccuracy != src.Cloudlets[i0].Loc.VerticalAccuracy {
							m.Cloudlets[i0].Loc.VerticalAccuracy = src.Cloudlets[i0].Loc.VerticalAccuracy
							changed++
						}
					}
					if _, set := fmap["5.2.5"]; set {
						if m.Cloudlets[i0].Loc.Altitude != src.Cloudlets[i0].Loc.Altitude {
							m.Cloudlets[i0].Loc.Altitude = src.Cloudlets[i0].Loc.Altitude
							changed++
						}
					}
					if _, set := fmap["5.2.6"]; set {
						if m.Cloudlets[i0].Loc.Course != src.Cloudlets[i0].Loc.Course {
							m.Cloudlets[i0].Loc.Course = src.Cloudlets[i0].Loc.Course
							changed++
						}
					}
					if _, set := fmap["5.2.7"]; set {
						if m.Cloudlets[i0].Loc.Speed != src.Cloudlets[i0].Loc.Speed {
							m.Cloudlets[i0].Loc.Speed = src.Cloudlets[i0].Loc.Speed
							changed++
						}
					}
					if _, set := fmap["5.2.8"]; set {
						if src.Cloudlets[i0].Loc.Timestamp != nil {
							m.Cloudlets[i0].Loc.Timestamp = &distributed_match_engine.Timestamp{}
							if _, set := fmap["5.2.8.1"]; set {
								if m.Cloudlets[i0].Loc.Timestamp.Seconds != src.Cloudlets[i0].Loc.Timestamp.Seconds {
									m.Cloudlets[i0].Loc.Timestamp.Seconds = src.Cloudlets[i0].Loc.Timestamp.Seconds
									changed++
								}
							}
							if _, set := fmap["5.2.8.2"]; set {
								if m.Cloudlets[i0].Loc.Timestamp.Nanos != src.Cloudlets[i0].Loc.Timestamp.Nanos {
									m.Cloudlets[i0].Loc.Timestamp.Nanos = src.Cloudlets[i0].Loc.Timestamp.Nanos
									changed++
								}
							}
						} else if m.Cloudlets[i0].Loc.Timestamp != nil {
							m.Cloudlets[i0].Loc.Timestamp = nil
							changed++
						}
					}
				}
			}
		} else if m.Cloudlets != nil {
			m.Cloudlets = nil
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.MinActiveInstances != src.MinActiveInstances {
			m.MinActiveInstances = src.MinActiveInstances
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.MaxInstances != src.MaxInstances {
			m.MaxInstances = src.MaxInstances
			changed++
		}
	}
	return changed
}

func (s *AutoProvPolicy) HasFields() bool {
	return true
}

type AutoProvPolicyStore struct {
	kvstore objstore.KVStore
}

func NewAutoProvPolicyStore(kvstore objstore.KVStore) AutoProvPolicyStore {
	return AutoProvPolicyStore{kvstore: kvstore}
}

func (s *AutoProvPolicyStore) Create(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	err := m.Validate(AutoProvPolicyAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStore) Update(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AutoProvPolicy
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStore) Put(ctx context.Context, m *AutoProvPolicy, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(AutoProvPolicyAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStore) Delete(ctx context.Context, m *AutoProvPolicy, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("AutoProvPolicy", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *AutoProvPolicyStore) LoadOne(key string) (*AutoProvPolicy, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj AutoProvPolicy
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse AutoProvPolicy data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *AutoProvPolicyStore) STMGet(stm concurrency.STM, key *PolicyKey, buf *AutoProvPolicy) bool {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *AutoProvPolicyStore) STMPut(stm concurrency.STM, obj *AutoProvPolicy, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("AutoProvPolicy", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("AutoProvPolicy json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *AutoProvPolicyStore) STMDel(stm concurrency.STM, key *PolicyKey) {
	keystr := objstore.DbKeyString("AutoProvPolicy", key)
	stm.Del(keystr)
}

type AutoProvPolicyKeyWatcher struct {
	cb func(ctx context.Context)
}

type AutoProvPolicyCacheData struct {
	Obj    *AutoProvPolicy
	ModRev int64
}

// AutoProvPolicyCache caches AutoProvPolicy objects in memory in a hash table
// and keeps them in sync with the database.
type AutoProvPolicyCache struct {
	Objs         map[PolicyKey]*AutoProvPolicyCacheData
	Mux          util.Mutex
	List         map[PolicyKey]struct{}
	FlushAll     bool
	NotifyCb     func(ctx context.Context, obj *PolicyKey, old *AutoProvPolicy, modRev int64)
	UpdatedCb    func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy)
	KeyWatchers  map[PolicyKey][]*AutoProvPolicyKeyWatcher
	UpdatedKeyCb func(ctx context.Context, key *PolicyKey)
	DeletedKeyCb func(ctx context.Context, key *PolicyKey)
}

func NewAutoProvPolicyCache() *AutoProvPolicyCache {
	cache := AutoProvPolicyCache{}
	InitAutoProvPolicyCache(&cache)
	return &cache
}

func InitAutoProvPolicyCache(cache *AutoProvPolicyCache) {
	cache.Objs = make(map[PolicyKey]*AutoProvPolicyCacheData)
	cache.KeyWatchers = make(map[PolicyKey][]*AutoProvPolicyKeyWatcher)
}

func (c *AutoProvPolicyCache) GetTypeString() string {
	return "AutoProvPolicy"
}

func (c *AutoProvPolicyCache) Get(key *PolicyKey, valbuf *AutoProvPolicy) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *AutoProvPolicyCache) GetWithRev(key *PolicyKey, valbuf *AutoProvPolicy, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		*valbuf = *inst.Obj
		*modRev = inst.ModRev
	}
	return found
}

func (c *AutoProvPolicyCache) HasKey(key *PolicyKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *AutoProvPolicyCache) GetAllKeys(ctx context.Context, cb func(key *PolicyKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *AutoProvPolicyCache) Update(ctx context.Context, in *AutoProvPolicy, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *AutoProvPolicy) (*AutoProvPolicy, bool) {
		return in, true
	})
}

func (c *AutoProvPolicyCache) UpdateModFunc(ctx context.Context, key *PolicyKey, modRev int64, modFunc func(old *AutoProvPolicy) (new *AutoProvPolicy, changed bool)) {
	c.Mux.Lock()
	var old *AutoProvPolicy
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	if c.UpdatedCb != nil {
		newCopy := &AutoProvPolicy{}
		*newCopy = *new
		defer c.UpdatedCb(ctx, old, newCopy)
	}
	if c.NotifyCb != nil {
		defer c.NotifyCb(ctx, new.GetKey(), old, modRev)
	}
	if c.UpdatedKeyCb != nil {
		defer c.UpdatedKeyCb(ctx, key)
	}
	c.Objs[new.GetKeyVal()] = &AutoProvPolicyCacheData{
		Obj:    new,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", new)
	log.DebugLog(log.DebugLevelApi, "SyncUpdate AutoProvPolicy", "obj", new, "modRev", modRev)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *AutoProvPolicyCache) Delete(ctx context.Context, in *AutoProvPolicy, modRev int64) {
	c.Mux.Lock()
	var old *AutoProvPolicy
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	log.DebugLog(log.DebugLevelApi, "SyncDelete AutoProvPolicy", "key", in.GetKey(), "modRev", modRev)
	c.Mux.Unlock()
	if c.NotifyCb != nil {
		c.NotifyCb(ctx, in.GetKey(), old, modRev)
	}
	if c.DeletedKeyCb != nil {
		c.DeletedKeyCb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *AutoProvPolicyCache) Prune(ctx context.Context, validKeys map[PolicyKey]struct{}) {
	notify := make(map[PolicyKey]*AutoProvPolicyCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if c.NotifyCb != nil || c.DeletedKeyCb != nil {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, old.Obj, old.ModRev)
		}
		if c.DeletedKeyCb != nil {
			c.DeletedKeyCb(ctx, &key)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoProvPolicyCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *AutoProvPolicyCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *AutoProvPolicyCache) Show(filter *AutoProvPolicy, cb func(ret *AutoProvPolicy) error) error {
	log.DebugLog(log.DebugLevelApi, "Show AutoProvPolicy", "count", len(c.Objs))
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		log.DebugLog(log.DebugLevelApi, "Compare AutoProvPolicy", "filter", filter, "data", data)
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		log.DebugLog(log.DebugLevelApi, "Show AutoProvPolicy", "obj", data.Obj)
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func AutoProvPolicyGenericNotifyCb(fn func(key *PolicyKey, old *AutoProvPolicy)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*PolicyKey), obj.(*AutoProvPolicy))
	}
}

func (c *AutoProvPolicyCache) SetNotifyCb(fn func(ctx context.Context, obj *PolicyKey, old *AutoProvPolicy, modRev int64)) {
	c.NotifyCb = fn
}

func (c *AutoProvPolicyCache) SetUpdatedCb(fn func(ctx context.Context, old *AutoProvPolicy, new *AutoProvPolicy)) {
	c.UpdatedCb = fn
}

func (c *AutoProvPolicyCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.UpdatedKeyCb = fn
}

func (c *AutoProvPolicyCache) SetDeletedKeyCb(fn func(ctx context.Context, key *PolicyKey)) {
	c.DeletedKeyCb = fn
}

func (c *AutoProvPolicyCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *AutoProvPolicyCache) WatchKey(key *PolicyKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*AutoProvPolicyKeyWatcher, 0)
	}
	watcher := AutoProvPolicyKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching AutoProvPolicy", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *AutoProvPolicyCache) TriggerKeyWatchers(ctx context.Context, key *PolicyKey) {
	watchers := make([]*AutoProvPolicyKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *AutoProvPolicyCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := AutoProvPolicy{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse AutoProvPolicy data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *AutoProvPolicyCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := AutoProvPolicy{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	PolicyKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *AutoProvPolicyCache) SyncListStart(ctx context.Context) {
	c.List = make(map[PolicyKey]struct{})
}

func (c *AutoProvPolicyCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[PolicyKey]*AutoProvPolicyCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		if c.NotifyCb != nil {
			c.NotifyCb(ctx, &key, val.Obj, val.ModRev)
		}
		if c.DeletedKeyCb != nil {
			c.DeletedKeyCb(ctx, &key)
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *AutoProvPolicyCache) UsesOrg(org string) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, _ := range c.Objs {
		if key.Organization == org {
			return true
		}
	}
	return false
}

func (m *AutoProvPolicy) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvPolicy) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoProvPolicy) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoProvPolicy) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoProvPolicy(a AutoProvPolicy, b AutoProvPolicy) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *AutoProvPolicy) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.Cloudlets {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *AutoProvCloudlet) CopyInFields(src *AutoProvCloudlet) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.Loc.Latitude != src.Loc.Latitude {
		m.Loc.Latitude = src.Loc.Latitude
		changed++
	}
	if m.Loc.Longitude != src.Loc.Longitude {
		m.Loc.Longitude = src.Loc.Longitude
		changed++
	}
	if m.Loc.HorizontalAccuracy != src.Loc.HorizontalAccuracy {
		m.Loc.HorizontalAccuracy = src.Loc.HorizontalAccuracy
		changed++
	}
	if m.Loc.VerticalAccuracy != src.Loc.VerticalAccuracy {
		m.Loc.VerticalAccuracy = src.Loc.VerticalAccuracy
		changed++
	}
	if m.Loc.Altitude != src.Loc.Altitude {
		m.Loc.Altitude = src.Loc.Altitude
		changed++
	}
	if m.Loc.Course != src.Loc.Course {
		m.Loc.Course = src.Loc.Course
		changed++
	}
	if m.Loc.Speed != src.Loc.Speed {
		m.Loc.Speed = src.Loc.Speed
		changed++
	}
	if src.Loc.Timestamp != nil {
		m.Loc.Timestamp = &distributed_match_engine.Timestamp{}
		if m.Loc.Timestamp.Seconds != src.Loc.Timestamp.Seconds {
			m.Loc.Timestamp.Seconds = src.Loc.Timestamp.Seconds
			changed++
		}
		if m.Loc.Timestamp.Nanos != src.Loc.Timestamp.Nanos {
			m.Loc.Timestamp.Nanos = src.Loc.Timestamp.Nanos
			changed++
		}
	} else if m.Loc.Timestamp != nil {
		m.Loc.Timestamp = nil
		changed++
	}
	return changed
}

func (m *AutoProvCloudlet) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvCloudlet) GetKey() *CloudletKey {
	return &m.Key
}

func (m *AutoProvCloudlet) GetKeyVal() CloudletKey {
	return m.Key
}

func (m *AutoProvCloudlet) SetKey(key *CloudletKey) {
	m.Key = *key
}

func CmpSortAutoProvCloudlet(a AutoProvCloudlet, b AutoProvCloudlet) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *AutoProvCloudlet) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AutoProvCount) CopyInFields(src *AutoProvCount) int {
	changed := 0
	if m.AppKey.Organization != src.AppKey.Organization {
		m.AppKey.Organization = src.AppKey.Organization
		changed++
	}
	if m.AppKey.Name != src.AppKey.Name {
		m.AppKey.Name = src.AppKey.Name
		changed++
	}
	if m.AppKey.Version != src.AppKey.Version {
		m.AppKey.Version = src.AppKey.Version
		changed++
	}
	if m.CloudletKey.Organization != src.CloudletKey.Organization {
		m.CloudletKey.Organization = src.CloudletKey.Organization
		changed++
	}
	if m.CloudletKey.Name != src.CloudletKey.Name {
		m.CloudletKey.Name = src.CloudletKey.Name
		changed++
	}
	if m.Count != src.Count {
		m.Count = src.Count
		changed++
	}
	if m.ProcessNow != src.ProcessNow {
		m.ProcessNow = src.ProcessNow
		changed++
	}
	if m.DeployNowKey.ClusterKey.Name != src.DeployNowKey.ClusterKey.Name {
		m.DeployNowKey.ClusterKey.Name = src.DeployNowKey.ClusterKey.Name
		changed++
	}
	if m.DeployNowKey.CloudletKey.Organization != src.DeployNowKey.CloudletKey.Organization {
		m.DeployNowKey.CloudletKey.Organization = src.DeployNowKey.CloudletKey.Organization
		changed++
	}
	if m.DeployNowKey.CloudletKey.Name != src.DeployNowKey.CloudletKey.Name {
		m.DeployNowKey.CloudletKey.Name = src.DeployNowKey.CloudletKey.Name
		changed++
	}
	if m.DeployNowKey.Organization != src.DeployNowKey.Organization {
		m.DeployNowKey.Organization = src.DeployNowKey.Organization
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *AutoProvCount) ValidateEnums() error {
	if err := m.AppKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	if err := m.DeployNowKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AutoProvCounts) CopyInFields(src *AutoProvCounts) int {
	changed := 0
	if m.DmeNodeName != src.DmeNodeName {
		m.DmeNodeName = src.DmeNodeName
		changed++
	}
	if m.Timestamp.Seconds != src.Timestamp.Seconds {
		m.Timestamp.Seconds = src.Timestamp.Seconds
		changed++
	}
	if m.Timestamp.Nanos != src.Timestamp.Nanos {
		m.Timestamp.Nanos = src.Timestamp.Nanos
		changed++
	}
	if src.Counts != nil {
		if m.Counts == nil || len(m.Counts) != len(src.Counts) {
			m.Counts = make([]*AutoProvCount, len(src.Counts))
			changed++
		}
		for i0 := 0; i0 < len(src.Counts); i0++ {
			m.Counts[i0] = &AutoProvCount{}
			if m.Counts[i0].AppKey.Organization != src.Counts[i0].AppKey.Organization {
				m.Counts[i0].AppKey.Organization = src.Counts[i0].AppKey.Organization
				changed++
			}
			if m.Counts[i0].AppKey.Name != src.Counts[i0].AppKey.Name {
				m.Counts[i0].AppKey.Name = src.Counts[i0].AppKey.Name
				changed++
			}
			if m.Counts[i0].AppKey.Version != src.Counts[i0].AppKey.Version {
				m.Counts[i0].AppKey.Version = src.Counts[i0].AppKey.Version
				changed++
			}
			if m.Counts[i0].CloudletKey.Organization != src.Counts[i0].CloudletKey.Organization {
				m.Counts[i0].CloudletKey.Organization = src.Counts[i0].CloudletKey.Organization
				changed++
			}
			if m.Counts[i0].CloudletKey.Name != src.Counts[i0].CloudletKey.Name {
				m.Counts[i0].CloudletKey.Name = src.Counts[i0].CloudletKey.Name
				changed++
			}
			if m.Counts[i0].Count != src.Counts[i0].Count {
				m.Counts[i0].Count = src.Counts[i0].Count
				changed++
			}
			if m.Counts[i0].ProcessNow != src.Counts[i0].ProcessNow {
				m.Counts[i0].ProcessNow = src.Counts[i0].ProcessNow
				changed++
			}
			if m.Counts[i0].DeployNowKey.ClusterKey.Name != src.Counts[i0].DeployNowKey.ClusterKey.Name {
				m.Counts[i0].DeployNowKey.ClusterKey.Name = src.Counts[i0].DeployNowKey.ClusterKey.Name
				changed++
			}
			if m.Counts[i0].DeployNowKey.CloudletKey.Organization != src.Counts[i0].DeployNowKey.CloudletKey.Organization {
				m.Counts[i0].DeployNowKey.CloudletKey.Organization = src.Counts[i0].DeployNowKey.CloudletKey.Organization
				changed++
			}
			if m.Counts[i0].DeployNowKey.CloudletKey.Name != src.Counts[i0].DeployNowKey.CloudletKey.Name {
				m.Counts[i0].DeployNowKey.CloudletKey.Name = src.Counts[i0].DeployNowKey.CloudletKey.Name
				changed++
			}
			if m.Counts[i0].DeployNowKey.Organization != src.Counts[i0].DeployNowKey.Organization {
				m.Counts[i0].DeployNowKey.Organization = src.Counts[i0].DeployNowKey.Organization
				changed++
			}
		}
	} else if m.Counts != nil {
		m.Counts = nil
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *AutoProvCounts) ValidateEnums() error {
	for _, e := range m.Counts {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *AutoProvPolicyCloudlet) CopyInFields(src *AutoProvPolicyCloudlet) int {
	changed := 0
	if m.Key.Organization != src.Key.Organization {
		m.Key.Organization = src.Key.Organization
		changed++
	}
	if m.Key.Name != src.Key.Name {
		m.Key.Name = src.Key.Name
		changed++
	}
	if m.CloudletKey.Organization != src.CloudletKey.Organization {
		m.CloudletKey.Organization = src.CloudletKey.Organization
		changed++
	}
	if m.CloudletKey.Name != src.CloudletKey.Name {
		m.CloudletKey.Name = src.CloudletKey.Name
		changed++
	}
	return changed
}

func (m *AutoProvPolicyCloudlet) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *AutoProvPolicyCloudlet) GetKey() *PolicyKey {
	return &m.Key
}

func (m *AutoProvPolicyCloudlet) GetKeyVal() PolicyKey {
	return m.Key
}

func (m *AutoProvPolicyCloudlet) SetKey(key *PolicyKey) {
	m.Key = *key
}

func CmpSortAutoProvPolicyCloudlet(a AutoProvPolicyCloudlet, b AutoProvPolicyCloudlet) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *AutoProvPolicyCloudlet) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.CloudletKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *AutoProvPolicy) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if m.DeployClientCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.DeployClientCount))
	}
	if m.DeployIntervalCount != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.DeployIntervalCount))
	}
	if len(m.Cloudlets) > 0 {
		for _, e := range m.Cloudlets {
			l = e.Size()
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	if m.MinActiveInstances != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.MinActiveInstances))
	}
	if m.MaxInstances != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.MaxInstances))
	}
	return n
}

func (m *AutoProvCloudlet) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	l = m.Loc.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	return n
}

func (m *AutoProvCount) Size() (n int) {
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if m.Count != 0 {
		n += 1 + sovAutoprovpolicy(uint64(m.Count))
	}
	if m.ProcessNow {
		n += 2
	}
	l = m.DeployNowKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	return n
}

func (m *AutoProvCounts) Size() (n int) {
	var l int
	_ = l
	l = len(m.DmeNodeName)
	if l > 0 {
		n += 1 + l + sovAutoprovpolicy(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovAutoprovpolicy(uint64(l))
		}
	}
	return n
}

func (m *AutoProvPolicyCloudlet) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovAutoprovpolicy(uint64(l))
	return n
}

func sovAutoprovpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAutoprovpolicy(x uint64) (n int) {
	return sovAutoprovpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoProvPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployClientCount", wireType)
			}
			m.DeployClientCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeployClientCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployIntervalCount", wireType)
			}
			m.DeployIntervalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeployIntervalCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloudlets = append(m.Cloudlets, &AutoProvCloudlet{})
			if err := m.Cloudlets[len(m.Cloudlets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinActiveInstances", wireType)
			}
			m.MinActiveInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinActiveInstances |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstances", wireType)
			}
			m.MaxInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInstances |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvCloudlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvCloudlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvCloudlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessNow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessNow = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployNowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeployNowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvCounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvCounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvCounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmeNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DmeNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &AutoProvCount{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoProvPolicyCloudlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoProvPolicyCloudlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoProvPolicyCloudlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAutoprovpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAutoprovpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAutoprovpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAutoprovpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAutoprovpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAutoprovpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAutoprovpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAutoprovpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAutoprovpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAutoprovpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("autoprovpolicy.proto", fileDescriptorAutoprovpolicy) }

var fileDescriptorAutoprovpolicy = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x3d, 0x6c, 0x1c, 0x45,
	0x14, 0xc7, 0x3d, 0x3e, 0xdb, 0xf1, 0x8d, 0x3f, 0x64, 0x2f, 0x17, 0x6b, 0x7c, 0x0e, 0xb6, 0x59,
	0x24, 0x64, 0xa1, 0xf3, 0xae, 0xe5, 0x28, 0x52, 0xb0, 0x64, 0x90, 0xed, 0x50, 0x44, 0xc6, 0x26,
	0x5a, 0x20, 0x05, 0xcd, 0x6a, 0x6e, 0xf7, 0x79, 0x3d, 0x64, 0x77, 0x66, 0xb5, 0x1f, 0x77, 0x3e,
	0xaa, 0x08, 0x1a, 0x4a, 0x04, 0x0d, 0x4a, 0x45, 0x41, 0x45, 0x85, 0x40, 0x42, 0x94, 0xd0, 0x59,
	0x54, 0x48, 0xf4, 0x08, 0x2c, 0x0a, 0x94, 0x2a, 0x92, 0xef, 0x52, 0xa3, 0x9d, 0xdd, 0xbd, 0x5b,
	0x1f, 0x77, 0x49, 0x14, 0x23, 0xa5, 0x39, 0xcd, 0xcc, 0xfb, 0xbf, 0x79, 0xbf, 0x79, 0x1f, 0xb7,
	0xb8, 0x42, 0xe3, 0x48, 0xf8, 0x81, 0x68, 0xf8, 0xc2, 0x65, 0x56, 0x4b, 0xf3, 0x03, 0x11, 0x09,
	0xa5, 0x0c, 0xb6, 0x03, 0x72, 0x59, 0xbd, 0xe6, 0x08, 0xe1, 0xb8, 0xa0, 0x53, 0x9f, 0xe9, 0x94,
	0x73, 0x11, 0xd1, 0x88, 0x09, 0x1e, 0xa6, 0xc2, 0xea, 0x74, 0x00, 0x61, 0xec, 0x46, 0xd9, 0xee,
	0xa6, 0xc3, 0xa2, 0xe3, 0xb8, 0xae, 0x59, 0xc2, 0xd3, 0x3d, 0x51, 0x67, 0x6e, 0x72, 0xcd, 0x89,
	0x9e, 0xfc, 0xae, 0x5b, 0xae, 0x88, 0x6d, 0x5d, 0xea, 0x1c, 0xe0, 0xdd, 0x45, 0xe6, 0x59, 0x71,
	0x84, 0x23, 0xe4, 0x52, 0x4f, 0x56, 0xd9, 0xe9, 0xd5, 0x04, 0x2e, 0xb4, 0xa8, 0x0b, 0x45, 0xba,
	0xea, 0xac, 0xbc, 0xcb, 0x85, 0x3c, 0x6c, 0x99, 0xfa, 0x7e, 0xb6, 0x9c, 0xb7, 0xdc, 0x38, 0x8c,
	0x20, 0x60, 0x3c, 0xcc, 0xad, 0x7b, 0x4f, 0x85, 0xb2, 0xd7, 0x3d, 0x1a, 0x59, 0xc7, 0xeb, 0xc0,
	0x1d, 0xc6, 0x41, 0xb7, 0x3d, 0x58, 0x4f, 0x51, 0x5c, 0x61, 0x65, 0x97, 0xac, 0x64, 0x59, 0x90,
	0xbb, 0x7a, 0x7c, 0xa4, 0x47, 0xcc, 0x83, 0x30, 0xa2, 0x5e, 0x16, 0x58, 0xfd, 0xa1, 0x84, 0x67,
	0x77, 0xe2, 0x48, 0xdc, 0x09, 0x44, 0xe3, 0x8e, 0x84, 0x55, 0x16, 0xf0, 0xc4, 0x11, 0x03, 0xd7,
	0x0e, 0x09, 0x5a, 0x2d, 0xad, 0x95, 0x8d, 0x6c, 0xa7, 0xd4, 0x70, 0xe9, 0x1e, 0xb4, 0xc8, 0xe8,
	0x2a, 0x5a, 0x9b, 0xda, 0xac, 0x68, 0xdd, 0x54, 0x6b, 0xa9, 0xdf, 0x3e, 0xb4, 0x76, 0xc7, 0x4e,
	0xff, 0x58, 0x19, 0x31, 0x12, 0x99, 0xa2, 0xe1, 0x97, 0x6c, 0xf0, 0x5d, 0xd1, 0x32, 0x2d, 0x97,
	0x01, 0x8f, 0x4c, 0x4b, 0xc4, 0x3c, 0x22, 0xa5, 0x55, 0xb4, 0x36, 0x63, 0xcc, 0xa7, 0xa6, 0x3d,
	0x69, 0xd9, 0x4b, 0x0c, 0xca, 0x4d, 0x7c, 0x35, 0xd3, 0x33, 0x1e, 0x41, 0xd0, 0xa0, 0x6e, 0xe6,
	0x31, 0x96, 0x78, 0xec, 0x8e, 0x7d, 0xd6, 0x26, 0xc8, 0xc8, 0xae, 0xbc, 0x9d, 0x29, 0x52, 0xcf,
	0x37, 0x70, 0x39, 0x4f, 0x6c, 0x48, 0xc6, 0x57, 0x4b, 0x6b, 0x53, 0x9b, 0x4b, 0x05, 0xba, 0xfc,
	0x75, 0x7b, 0x99, 0xc6, 0xe8, 0xa9, 0x95, 0x0d, 0x5c, 0xf1, 0x18, 0x37, 0xa9, 0x15, 0xb1, 0x06,
	0x98, 0x49, 0xf2, 0x29, 0xb7, 0x20, 0x24, 0x13, 0x92, 0x52, 0xf1, 0x18, 0xdf, 0x91, 0xa6, 0xdb,
	0xb9, 0x45, 0x79, 0x15, 0xcf, 0x78, 0xf4, 0xa4, 0x20, 0xbd, 0x22, 0xa5, 0xd3, 0x1e, 0x3d, 0xe9,
	0x8a, 0xb6, 0xcc, 0x7f, 0xce, 0x09, 0x7a, 0x74, 0x4e, 0xd0, 0xfd, 0x36, 0x41, 0x9f, 0xb7, 0x09,
	0xfa, 0xaa, 0x4d, 0xd0, 0x17, 0x1d, 0x52, 0xce, 0x19, 0xc2, 0x07, 0x1d, 0xf2, 0x1a, 0xa7, 0x1e,
	0x6c, 0xef, 0x43, 0x4b, 0x3b, 0xa4, 0x1e, 0xd4, 0xa8, 0xef, 0xaf, 0x8b, 0xc0, 0x91, 0x07, 0xef,
	0x06, 0x0e, 0xe5, 0xec, 0x63, 0xd9, 0xb1, 0xdf, 0x3f, 0x26, 0x73, 0xf7, 0xa0, 0xb5, 0x5d, 0x3c,
	0x53, 0x5b, 0x78, 0xae, 0xff, 0x59, 0x8a, 0x96, 0x96, 0x07, 0xc9, 0xf2, 0x2c, 0x14, 0x12, 0x90,
	0x2b, 0xfa, 0x0a, 0x74, 0x03, 0x97, 0x5c, 0x61, 0x65, 0xe5, 0x7c, 0x59, 0xb3, 0x59, 0x18, 0x05,
	0xac, 0x1e, 0x47, 0x60, 0x9b, 0xb2, 0xad, 0xcc, 0xb4, 0xad, 0xb4, 0x77, 0x84, 0x95, 0xbb, 0xb9,
	0xc2, 0x52, 0xef, 0x8f, 0xe2, 0x99, 0x6e, 0x6c, 0x99, 0xff, 0x0d, 0x7c, 0x85, 0xfa, 0xbe, 0xd9,
	0x0b, 0x3e, 0x5f, 0xcc, 0xbe, 0xef, 0xf7, 0xe2, 0x4e, 0x50, 0xb9, 0x53, 0xde, 0xc2, 0xd3, 0x79,
	0x0d, 0xcc, 0x5e, 0x4b, 0x3d, 0x99, 0x79, 0xca, 0xea, 0x1d, 0x29, 0x15, 0x3c, 0xde, 0x6b, 0xa7,
	0x31, 0x23, 0xdd, 0x28, 0x2b, 0x78, 0xca, 0x0f, 0x84, 0x05, 0x61, 0x68, 0x72, 0xd1, 0x94, 0x8d,
	0x33, 0x69, 0xe0, 0xec, 0xe8, 0x50, 0x34, 0x95, 0xb7, 0xf1, 0x6c, 0xd6, 0x63, 0x5c, 0x34, 0x65,
	0xe4, 0x71, 0x19, 0x79, 0xf1, 0x42, 0x64, 0x39, 0x88, 0x49, 0x31, 0x7b, 0xc1, 0xa7, 0x53, 0xb7,
	0x43, 0xd1, 0xdc, 0x87, 0x96, 0xfa, 0x1d, 0xea, 0xcd, 0x8c, 0x4c, 0x41, 0xa8, 0xa8, 0x78, 0xc6,
	0xf6, 0xc0, 0xe4, 0xc2, 0x06, 0x33, 0xa9, 0xab, 0xcc, 0x44, 0xd9, 0x98, 0xb2, 0x3d, 0x38, 0x14,
	0x36, 0x24, 0x15, 0x56, 0xde, 0xc4, 0xe5, 0xee, 0xf4, 0x65, 0x4f, 0xae, 0x6a, 0xe9, 0x7c, 0x6a,
	0xf9, 0x7c, 0x6a, 0xef, 0xe7, 0x8a, 0x2c, 0x72, 0xcf, 0x45, 0xd9, 0xc0, 0x13, 0xf2, 0x9d, 0x21,
	0x29, 0xc9, 0x26, 0x27, 0x83, 0x9a, 0x3c, 0x11, 0x18, 0x99, 0x6e, 0x6b, 0xf2, 0xe7, 0x36, 0x41,
	0x8f, 0xda, 0x64, 0x44, 0x3d, 0x47, 0x78, 0xe1, 0xe2, 0x98, 0x77, 0xfb, 0xa6, 0x56, 0xec, 0x9b,
	0xa7, 0x8e, 0xf5, 0x65, 0x4b, 0xb7, 0xf5, 0xd1, 0x83, 0x0e, 0x39, 0x7a, 0xb6, 0xd6, 0xaf, 0xe5,
	0x7e, 0xdb, 0x85, 0x3b, 0x53, 0x97, 0xdc, 0x22, 0xfd, 0x8a, 0xd6, 0xa2, 0xff, 0xe6, 0x2f, 0x93,
	0x78, 0xfe, 0xe2, 0xab, 0x77, 0x7c, 0xa6, 0xfc, 0x8a, 0x70, 0x65, 0x2f, 0x00, 0x1a, 0x41, 0xdf,
	0x1f, 0xdf, 0xe2, 0x80, 0x84, 0xa6, 0xa6, 0x6a, 0xb1, 0xa5, 0x0d, 0xf9, 0xe9, 0x50, 0x3f, 0x45,
	0x0f, 0xdb, 0xe4, 0x86, 0x01, 0xa1, 0x88, 0x03, 0x0b, 0x6e, 0x41, 0x03, 0x5c, 0xe1, 0x43, 0x90,
	0x3a, 0xd4, 0x92, 0xff, 0x0d, 0xc1, 0x0f, 0x28, 0xa7, 0x0e, 0xd4, 0xfa, 0xc1, 0xce, 0x3a, 0x64,
	0xfe, 0x80, 0xf1, 0xa4, 0x33, 0xc2, 0xda, 0x01, 0x3d, 0x91, 0x8b, 0x6f, 0x1f, 0x93, 0xb9, 0x7e,
	0xe1, 0x27, 0xbf, 0xff, 0xfd, 0xe5, 0xe8, 0x92, 0xba, 0xa0, 0x5b, 0x92, 0x57, 0xbf, 0xf8, 0xd1,
	0xdb, 0x42, 0xaf, 0x2b, 0x5f, 0x23, 0x5c, 0xb9, 0x05, 0x2e, 0x5c, 0xf2, 0x31, 0x1f, 0x3e, 0xf7,
	0x5b, 0xba, 0x88, 0xb6, 0xa4, 0x18, 0x82, 0xf8, 0x81, 0x6f, 0xd3, 0x17, 0x8f, 0x18, 0x4b, 0x8a,
	0x01, 0x88, 0xdf, 0x20, 0xac, 0xbc, 0x77, 0x2c, 0x9a, 0xcf, 0x0e, 0x38, 0xdc, 0xa4, 0xde, 0x7d,
	0xd8, 0x26, 0xd7, 0x9f, 0x0c, 0x7a, 0x97, 0x41, 0x73, 0x30, 0xe6, 0xa2, 0x5a, 0xd1, 0xc3, 0x63,
	0xd1, 0xfc, 0x2f, 0xe4, 0x06, 0x52, 0x7e, 0x44, 0x78, 0x71, 0xc7, 0xb6, 0x87, 0x0c, 0xf2, 0x2b,
	0x43, 0x91, 0x72, 0xc9, 0xa0, 0xb4, 0x5a, 0xcf, 0x9d, 0xd6, 0xd3, 0x0e, 0x41, 0x92, 0x79, 0x55,
	0x5d, 0xd2, 0xa9, 0x6d, 0xf7, 0x21, 0xe7, 0x23, 0x9a, 0xe4, 0xf7, 0x27, 0x84, 0xaf, 0x19, 0xe0,
	0x89, 0x06, 0xfc, 0xaf, 0xec, 0xf5, 0xcb, 0xb3, 0xaf, 0xa8, 0x55, 0x3d, 0xf0, 0x86, 0xa3, 0xef,
	0xce, 0x9d, 0xfe, 0xb5, 0x3c, 0x72, 0x7a, 0xb6, 0x8c, 0x7e, 0x3b, 0x5b, 0x46, 0x7f, 0x9e, 0x2d,
	0xa3, 0xfa, 0x84, 0x64, 0xb8, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x2a, 0x2b, 0xdd,
	0x83, 0x0a, 0x00, 0x00,
}
