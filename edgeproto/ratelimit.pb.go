// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package edgeproto

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApiEndpointType int32

const (
	ApiEndpointType_UNKNOWN_API_ENDPOINT_TYPE ApiEndpointType = 0
	ApiEndpointType_CONTROLLER                ApiEndpointType = 1
	ApiEndpointType_DME                       ApiEndpointType = 2
)

var ApiEndpointType_name = map[int32]string{
	0: "UNKNOWN_API_ENDPOINT_TYPE",
	1: "CONTROLLER",
	2: "DME",
}

var ApiEndpointType_value = map[string]int32{
	"UNKNOWN_API_ENDPOINT_TYPE": 0,
	"CONTROLLER":                1,
	"DME":                       2,
}

func (x ApiEndpointType) String() string {
	return proto.EnumName(ApiEndpointType_name, int32(x))
}

func (ApiEndpointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}

type RateLimitTarget int32

const (
	RateLimitTarget_UNKNOWN_TARGET RateLimitTarget = 0
	RateLimitTarget_ALL_REQUESTS   RateLimitTarget = 1
	RateLimitTarget_PER_IP         RateLimitTarget = 2
	RateLimitTarget_PER_USER       RateLimitTarget = 3
)

var RateLimitTarget_name = map[int32]string{
	0: "UNKNOWN_TARGET",
	1: "ALL_REQUESTS",
	2: "PER_IP",
	3: "PER_USER",
}

var RateLimitTarget_value = map[string]int32{
	"UNKNOWN_TARGET": 0,
	"ALL_REQUESTS":   1,
	"PER_IP":         2,
	"PER_USER":       3,
}

func (x RateLimitTarget) String() string {
	return proto.EnumName(RateLimitTarget_name, int32(x))
}

func (RateLimitTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}

type FlowRateLimitAlgorithm int32

const (
	FlowRateLimitAlgorithm_UNKNOWN_FLOW_ALGORITHM FlowRateLimitAlgorithm = 0
	FlowRateLimitAlgorithm_TOKEN_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 1
	FlowRateLimitAlgorithm_LEAKY_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 2
)

var FlowRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_FLOW_ALGORITHM",
	1: "TOKEN_BUCKET_ALGORITHM",
	2: "LEAKY_BUCKET_ALGORITHM",
}

var FlowRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_FLOW_ALGORITHM": 0,
	"TOKEN_BUCKET_ALGORITHM": 1,
	"LEAKY_BUCKET_ALGORITHM": 2,
}

func (x FlowRateLimitAlgorithm) String() string {
	return proto.EnumName(FlowRateLimitAlgorithm_name, int32(x))
}

func (FlowRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}

type MaxReqsRateLimitAlgorithm int32

const (
	MaxReqsRateLimitAlgorithm_UNKNOWN_MAX_REQS_ALGORITHM MaxReqsRateLimitAlgorithm = 0
	MaxReqsRateLimitAlgorithm_FIXED_WINDOW_ALGORITHM     MaxReqsRateLimitAlgorithm = 1
)

var MaxReqsRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_MAX_REQS_ALGORITHM",
	1: "FIXED_WINDOW_ALGORITHM",
}

var MaxReqsRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_MAX_REQS_ALGORITHM": 0,
	"FIXED_WINDOW_ALGORITHM":     1,
}

func (x MaxReqsRateLimitAlgorithm) String() string {
	return proto.EnumName(MaxReqsRateLimitAlgorithm_name, int32(x))
}

func (MaxReqsRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{3}
}

type RateLimitSettingsKey struct {
	// Name of API (eg. CreateApp or RegisterClient) (Use "Global" if not a specific API)
	ApiName string `protobuf:"bytes,1,opt,name=api_name,json=apiName,proto3" json:"api_name,omitempty"`
	// API Endpoint type
	ApiEndpointType ApiEndpointType `protobuf:"varint,2,opt,name=api_endpoint_type,json=apiEndpointType,proto3,enum=edgeproto.ApiEndpointType" json:"api_endpoint_type,omitempty"`
	// Target to rate limit
	RateLimitTarget RateLimitTarget `protobuf:"varint,3,opt,name=rate_limit_target,json=rateLimitTarget,proto3,enum=edgeproto.RateLimitTarget" json:"rate_limit_target,omitempty"`
}

func (m *RateLimitSettingsKey) Reset()         { *m = RateLimitSettingsKey{} }
func (m *RateLimitSettingsKey) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsKey) ProtoMessage()    {}
func (*RateLimitSettingsKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}
func (m *RateLimitSettingsKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsKey.Merge(m, src)
}
func (m *RateLimitSettingsKey) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsKey.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsKey proto.InternalMessageInfo

type FlowSettings struct {
	// Flow Rate Limit algorithm
	FlowAlgorithm FlowRateLimitAlgorithm `protobuf:"varint,1,opt,name=flow_algorithm,json=flowAlgorithm,proto3,enum=edgeproto.FlowRateLimitAlgorithm" json:"flow_algorithm,omitempty"`
	// requests per second for flow rate limiting
	ReqsPerSecond float64 `protobuf:"fixed64,2,opt,name=reqsPerSecond,proto3" json:"reqsPerSecond,omitempty"`
	// burst size for flow rate limiting
	BurstSize int64 `protobuf:"varint,3,opt,name=burstSize,proto3" json:"burstSize,omitempty"`
}

func (m *FlowSettings) Reset()         { *m = FlowSettings{} }
func (m *FlowSettings) String() string { return proto.CompactTextString(m) }
func (*FlowSettings) ProtoMessage()    {}
func (*FlowSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}
func (m *FlowSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowSettings.Merge(m, src)
}
func (m *FlowSettings) XXX_Size() int {
	return m.Size()
}
func (m *FlowSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowSettings.DiscardUnknown(m)
}

var xxx_messageInfo_FlowSettings proto.InternalMessageInfo

type MaxReqsSettings struct {
	// MaxReqs Rate Limit Algorithm
	MaxReqsAlgorithm MaxReqsRateLimitAlgorithm `protobuf:"varint,1,opt,name=max_reqs_algorithm,json=maxReqsAlgorithm,proto3,enum=edgeproto.MaxReqsRateLimitAlgorithm" json:"max_reqs_algorithm,omitempty"`
	// Maximum number of requests for the given Interval
	MaxRequests int64 `protobuf:"varint,2,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	// Time interval
	Interval Duration `protobuf:"varint,3,opt,name=interval,proto3,casttype=Duration" json:"interval,omitempty"`
}

func (m *MaxReqsSettings) Reset()         { *m = MaxReqsSettings{} }
func (m *MaxReqsSettings) String() string { return proto.CompactTextString(m) }
func (*MaxReqsSettings) ProtoMessage()    {}
func (*MaxReqsSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}
func (m *MaxReqsSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxReqsSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxReqsSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxReqsSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxReqsSettings.Merge(m, src)
}
func (m *MaxReqsSettings) XXX_Size() int {
	return m.Size()
}
func (m *MaxReqsSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxReqsSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MaxReqsSettings proto.InternalMessageInfo

type RateLimitSettings struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key RateLimitSettingsKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// List of FlowSettings
	FlowSettings []*FlowSettings `protobuf:"bytes,7,rep,name=flow_settings,json=flowSettings,proto3" json:"flow_settings,omitempty"`
	// List of MaxReqsSettings
	MaxReqsSettings []*MaxReqsSettings `protobuf:"bytes,8,rep,name=max_reqs_settings,json=maxReqsSettings,proto3" json:"max_reqs_settings,omitempty"`
}

func (m *RateLimitSettings) Reset()         { *m = RateLimitSettings{} }
func (m *RateLimitSettings) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettings) ProtoMessage()    {}
func (*RateLimitSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{3}
}
func (m *RateLimitSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettings.Merge(m, src)
}
func (m *RateLimitSettings) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettings proto.InternalMessageInfo

type RateLimitSettingsData struct {
	Settings []RateLimitSettings `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings"`
}

func (m *RateLimitSettingsData) Reset()         { *m = RateLimitSettingsData{} }
func (m *RateLimitSettingsData) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsData) ProtoMessage()    {}
func (*RateLimitSettingsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{4}
}
func (m *RateLimitSettingsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsData.Merge(m, src)
}
func (m *RateLimitSettingsData) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsData) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsData.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("edgeproto.ApiEndpointType", ApiEndpointType_name, ApiEndpointType_value)
	proto.RegisterEnum("edgeproto.RateLimitTarget", RateLimitTarget_name, RateLimitTarget_value)
	proto.RegisterEnum("edgeproto.FlowRateLimitAlgorithm", FlowRateLimitAlgorithm_name, FlowRateLimitAlgorithm_value)
	proto.RegisterEnum("edgeproto.MaxReqsRateLimitAlgorithm", MaxReqsRateLimitAlgorithm_name, MaxReqsRateLimitAlgorithm_value)
	proto.RegisterType((*RateLimitSettingsKey)(nil), "edgeproto.RateLimitSettingsKey")
	proto.RegisterType((*FlowSettings)(nil), "edgeproto.FlowSettings")
	proto.RegisterType((*MaxReqsSettings)(nil), "edgeproto.MaxReqsSettings")
	proto.RegisterType((*RateLimitSettings)(nil), "edgeproto.RateLimitSettings")
	proto.RegisterType((*RateLimitSettingsData)(nil), "edgeproto.RateLimitSettingsData")
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptor_9c81fd649b00920f) }

var fileDescriptor_9c81fd649b00920f = []byte{
	// 1024 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0xd8, 0x08, 0xcc, 0xe0, 0xe0, 0x65, 0x9a, 0xc0, 0x62, 0xb9, 0x86, 0x58, 0x51, 0x85,
	0x10, 0xc5, 0x15, 0x3d, 0xb4, 0x42, 0x6d, 0xd5, 0x35, 0x5e, 0x12, 0xcb, 0xc6, 0x76, 0xc6, 0x4b,
	0x49, 0x94, 0xc3, 0x6a, 0xb0, 0x87, 0x65, 0xd5, 0xf5, 0xce, 0x66, 0x77, 0x5d, 0xa0, 0xbd, 0x54,
	0x3d, 0xf4, 0x8c, 0xd4, 0x43, 0xab, 0xaa, 0x87, 0xfc, 0x09, 0x51, 0x8e, 0xf9, 0x0b, 0x38, 0x46,
	0xea, 0xa5, 0xa7, 0xa8, 0x85, 0x4a, 0x6d, 0x73, 0xaa, 0x04, 0xb5, 0xaa, 0x9e, 0xaa, 0x19, 0xaf,
	0x37, 0xc6, 0x76, 0x50, 0x4e, 0xb9, 0xa0, 0xb7, 0xef, 0xc7, 0xf7, 0xbe, 0xf7, 0xcd, 0x7b, 0x18,
	0x26, 0x5d, 0xe2, 0x53, 0xcb, 0x6c, 0x99, 0xfe, 0xaa, 0xe3, 0x32, 0x9f, 0xa1, 0x49, 0xda, 0x34,
	0xa8, 0x30, 0x53, 0x09, 0x97, 0x7a, 0x6d, 0x2b, 0x08, 0xa4, 0xd2, 0x06, 0x63, 0x86, 0x45, 0x73,
	0xc4, 0x31, 0x73, 0xc4, 0xb6, 0x99, 0x4f, 0x7c, 0x93, 0xd9, 0x5e, 0x10, 0xfd, 0xd0, 0x30, 0xfd,
	0xfd, 0xf6, 0xee, 0x6a, 0x83, 0xb5, 0x72, 0x2d, 0xb6, 0x6b, 0x5a, 0x1c, 0xe6, 0x30, 0xc7, 0xff,
	0xbe, 0xdb, 0xb0, 0x58, 0xbb, 0x99, 0x13, 0x79, 0x06, 0xb5, 0x43, 0x23, 0xa8, 0xbc, 0x6e, 0x30,
	0x83, 0x09, 0x33, 0xc7, 0xad, 0xae, 0x37, 0xfb, 0x6d, 0x14, 0x5e, 0xc7, 0xc4, 0xa7, 0x65, 0x4e,
	0xad, 0x4e, 0x7d, 0xdf, 0xb4, 0x0d, 0xaf, 0x44, 0x8f, 0xd0, 0x3b, 0x30, 0x4e, 0x1c, 0x53, 0xb7,
	0x49, 0x8b, 0xca, 0x60, 0x11, 0x2c, 0x4d, 0xe6, 0xa7, 0x9e, 0x76, 0xe4, 0x09, 0xe2, 0x98, 0xdc,
	0x85, 0xb9, 0x51, 0x21, 0x2d, 0x8a, 0x1e, 0xc0, 0x19, 0x9e, 0x47, 0xed, 0xa6, 0xc3, 0x4c, 0xdb,
	0xd7, 0xfd, 0x23, 0x87, 0xca, 0xd1, 0x45, 0xb0, 0x34, 0xbd, 0x96, 0x5a, 0x0d, 0x67, 0x5c, 0x55,
	0x1c, 0x53, 0x0d, 0x52, 0xb4, 0x23, 0x87, 0xe6, 0xdf, 0x7a, 0xda, 0x91, 0x93, 0xc4, 0x31, 0x7b,
	0x75, 0xbc, 0x0c, 0x73, 0x47, 0x7f, 0x16, 0x07, 0xe7, 0xba, 0xe9, 0x42, 0x38, 0xdd, 0x27, 0xae,
	0x41, 0x7d, 0x39, 0x36, 0x04, 0x1e, 0x0e, 0xa0, 0x89, 0x8c, 0x2e, 0x78, 0x28, 0x78, 0xb7, 0x0c,
	0x0b, 0x47, 0x5f, 0xd6, 0x7a, 0xe2, 0xcf, 0x73, 0x19, 0xfc, 0x7b, 0x2e, 0x83, 0xc7, 0x8f, 0x16,
	0x40, 0xf6, 0x27, 0x00, 0x13, 0x9b, 0x16, 0x3b, 0xe8, 0x69, 0x80, 0xee, 0xc0, 0xe9, 0x3d, 0x8b,
	0x1d, 0xe8, 0xc4, 0x32, 0x98, 0x6b, 0xfa, 0xfb, 0x2d, 0x21, 0xc3, 0xf4, 0xda, 0xcd, 0xbe, 0xc6,
	0xbc, 0x20, 0x6c, 0xae, 0xf4, 0x12, 0xf1, 0x35, 0x5e, 0x18, 0x7e, 0xa2, 0x5b, 0xf0, 0x9a, 0x4b,
	0x1f, 0x7a, 0x35, 0xea, 0xd6, 0x69, 0x83, 0xd9, 0x4d, 0x21, 0x0f, 0xc0, 0x97, 0x9d, 0x28, 0x0d,
	0x27, 0x77, 0xdb, 0xae, 0xe7, 0xd7, 0xcd, 0x2f, 0xa9, 0x98, 0x31, 0x86, 0x5f, 0x3a, 0xb2, 0x4f,
	0x00, 0x4c, 0x6e, 0x91, 0x43, 0x4c, 0x1f, 0x7a, 0x21, 0x43, 0x0c, 0x51, 0x8b, 0x1c, 0xea, 0x1c,
	0x66, 0x88, 0xe5, 0xad, 0x3e, 0x96, 0x41, 0xdd, 0x08, 0xa2, 0x52, 0xab, 0x1b, 0x7a, 0xc9, 0xf5,
	0x26, 0x4c, 0x04, 0x98, 0x6d, 0xea, 0xf9, 0x9e, 0xa0, 0x1a, 0xc3, 0x53, 0xdd, 0x3c, 0xe1, 0x42,
	0x4b, 0x30, 0x6e, 0xda, 0x3e, 0x75, 0xbf, 0x20, 0x56, 0x97, 0x67, 0x3e, 0xf1, 0xdf, 0xf3, 0x85,
	0x78, 0xa1, 0xed, 0x8a, 0x4d, 0xc5, 0x61, 0x34, 0xfb, 0x47, 0x14, 0xce, 0x0c, 0x2d, 0x17, 0x9a,
	0x85, 0xe3, 0x7b, 0x26, 0xb5, 0x9a, 0x9e, 0x0c, 0x16, 0x63, 0x4b, 0x93, 0x38, 0xf8, 0x42, 0x1f,
	0xc0, 0xd8, 0xe7, 0xf4, 0x48, 0x74, 0x9c, 0x5a, 0x5b, 0x18, 0xf5, 0xbc, 0x7d, 0xfb, 0x99, 0x1f,
	0x3b, 0x79, 0xbe, 0x10, 0xc1, 0xbc, 0x02, 0x7d, 0x04, 0x85, 0xe0, 0xba, 0x17, 0x84, 0xe5, 0x89,
	0xc5, 0xd8, 0xd2, 0xd4, 0xda, 0xdc, 0xc0, 0x43, 0xf5, 0xaa, 0x71, 0x62, 0xaf, 0xff, 0x9d, 0x37,
	0xe1, 0x4c, 0xa8, 0x62, 0x88, 0x10, 0x17, 0x08, 0xa9, 0x61, 0x11, 0x43, 0x90, 0x64, 0xeb, 0xb2,
	0x63, 0xfd, 0x2b, 0xbe, 0x4e, 0x7f, 0x9f, 0xcb, 0xe0, 0xeb, 0x0b, 0x19, 0x1c, 0x5f, 0xc8, 0xe0,
	0xf1, 0x85, 0x0c, 0x7e, 0xfc, 0x47, 0x7e, 0x30, 0xb0, 0xe5, 0x1f, 0x97, 0xe8, 0xd1, 0xe0, 0x39,
	0xac, 0x0c, 0x2c, 0xab, 0xc8, 0x19, 0xd8, 0xea, 0x95, 0xe0, 0xf4, 0x7a, 0xf5, 0xfc, 0xfa, 0x9e,
	0x74, 0xe4, 0x31, 0x9b, 0xd9, 0x34, 0x4b, 0xe0, 0x8d, 0x21, 0x95, 0x0a, 0xc4, 0x27, 0xe8, 0x13,
	0x18, 0x0f, 0x87, 0x02, 0x62, 0xa8, 0xf4, 0x55, 0xca, 0x06, 0xb2, 0x86, 0x35, 0xeb, 0xf1, 0x1f,
	0x3a, 0x32, 0x78, 0xd4, 0x91, 0x23, 0xcb, 0x45, 0x98, 0x1c, 0x60, 0x8d, 0xde, 0x86, 0xf3, 0xdb,
	0x95, 0x52, 0xa5, 0xba, 0x53, 0xd1, 0x95, 0x5a, 0x51, 0x57, 0x2b, 0x85, 0x5a, 0xb5, 0x58, 0xd1,
	0x74, 0xed, 0x7e, 0x4d, 0x95, 0x22, 0x68, 0x1a, 0xc2, 0x8d, 0x6a, 0x45, 0xc3, 0xd5, 0x72, 0x59,
	0xc5, 0x12, 0x40, 0x13, 0x30, 0x56, 0xd8, 0x52, 0xa5, 0xe8, 0xf2, 0x5d, 0x98, 0x1c, 0x18, 0x0e,
	0x21, 0x38, 0xdd, 0x83, 0xd2, 0x14, 0x7c, 0x5b, 0xd5, 0xa4, 0x08, 0x92, 0x60, 0x42, 0x29, 0x97,
	0x75, 0xac, 0xde, 0xdd, 0x56, 0xeb, 0x5a, 0x5d, 0x02, 0x08, 0xc2, 0xf1, 0x9a, 0x8a, 0xf5, 0x62,
	0x4d, 0x8a, 0xa2, 0x04, 0x8c, 0x73, 0x7b, 0xbb, 0xae, 0x62, 0x29, 0xb6, 0x6c, 0xc1, 0xd9, 0xd1,
	0xc7, 0x88, 0x52, 0x70, 0xb6, 0x87, 0xbc, 0x59, 0xae, 0xee, 0xe8, 0x4a, 0xf9, 0x76, 0x15, 0x17,
	0xb5, 0x3b, 0x5b, 0x52, 0x84, 0xc7, 0xb4, 0x6a, 0x49, 0xad, 0xe8, 0xf9, 0xed, 0x8d, 0x92, 0xaa,
	0xf5, 0xc5, 0x00, 0x8f, 0x95, 0x55, 0xa5, 0x74, 0x7f, 0x38, 0x16, 0x5d, 0xde, 0x81, 0xf3, 0xaf,
	0x3c, 0x2a, 0x94, 0x81, 0xa9, 0x5e, 0xc3, 0x2d, 0xe5, 0x1e, 0xa7, 0x5f, 0x1f, 0x6c, 0xba, 0x59,
	0xbc, 0xa7, 0x16, 0xf4, 0x9d, 0x62, 0xa5, 0x70, 0x89, 0x10, 0x58, 0xfb, 0x6b, 0x6c, 0xc4, 0xbf,
	0x63, 0xc5, 0x31, 0xd1, 0x31, 0x80, 0x73, 0x1b, 0x2e, 0x25, 0x3e, 0x1d, 0x3e, 0xa8, 0x2b, 0x5f,
	0x34, 0x35, 0xd3, 0x1f, 0x15, 0x3f, 0x34, 0xd9, 0xc2, 0x8b, 0x0b, 0x39, 0x8d, 0xa9, 0xc7, 0xda,
	0x6e, 0x83, 0x6e, 0x30, 0x7b, 0xcf, 0x34, 0x56, 0x94, 0x06, 0x3f, 0xde, 0x2d, 0x62, 0x13, 0x83,
	0xae, 0x7c, 0xf3, 0xf3, 0xef, 0xdf, 0x45, 0x33, 0xd9, 0xf9, 0x5c, 0x43, 0xb4, 0xcc, 0x85, 0xeb,
	0x19, 0xee, 0x05, 0x58, 0x16, 0x94, 0xb6, 0x9d, 0xe6, 0x9b, 0xa6, 0xd4, 0x16, 0x2d, 0x5f, 0x4d,
	0xa9, 0x40, 0x2d, 0xfa, 0x86, 0x29, 0x35, 0x45, 0xcb, 0xd1, 0x94, 0xbe, 0x07, 0xf0, 0x46, 0x7d,
	0xbf, 0x6f, 0x33, 0x5f, 0x93, 0xd0, 0x95, 0xd1, 0xec, 0xa7, 0x2f, 0x2e, 0xe4, 0xd4, 0x48, 0x6e,
	0x9f, 0x99, 0xf4, 0xa0, 0xcb, 0x2c, 0x9d, 0x9d, 0xcb, 0x79, 0xfb, 0xec, 0x60, 0x24, 0xaf, 0xf7,
	0x40, 0x3e, 0x7d, 0xf2, 0x5b, 0x26, 0x72, 0x72, 0x9a, 0x01, 0xcf, 0x4e, 0x33, 0xe0, 0xd7, 0xd3,
	0x0c, 0x38, 0x3e, 0xcb, 0x44, 0x9e, 0x9d, 0x65, 0x22, 0xbf, 0x9c, 0x65, 0x22, 0xbb, 0xe3, 0xa2,
	0xf5, 0xfb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x68, 0x20, 0x8f, 0xb9, 0x08, 0x00, 0x00,
}

func (this *RateLimitSettingsKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.RateLimitSettingsKey{")
	s = append(s, "ApiName: "+fmt.Sprintf("%#v", this.ApiName)+",\n")
	s = append(s, "ApiEndpointType: "+fmt.Sprintf("%#v", this.ApiEndpointType)+",\n")
	s = append(s, "RateLimitTarget: "+fmt.Sprintf("%#v", this.RateLimitTarget)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRatelimit(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RateLimitSettingsApiClient is the client API for RateLimitSettingsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitSettingsApiClient interface {
	// Create RateLimitSettings for an API endpoint
	CreateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Update RateLimit settings for an API endpoint
	UpdateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Delete RateLimit settings for an API endpoint (ie. no rate limiting)
	DeleteRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Show RateLimit settings for an API endpoint
	ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error)
}

type rateLimitSettingsApiClient struct {
	cc *grpc.ClientConn
}

func NewRateLimitSettingsApiClient(cc *grpc.ClientConn) RateLimitSettingsApiClient {
	return &rateLimitSettingsApiClient{cc}
}

func (c *rateLimitSettingsApiClient) CreateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/CreateRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) UpdateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/UpdateRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) DeleteRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/DeleteRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitSettingsApi_serviceDesc.Streams[0], "/edgeproto.RateLimitSettingsApi/ShowRateLimitSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitSettingsApiShowRateLimitSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimitSettingsApi_ShowRateLimitSettingsClient interface {
	Recv() (*RateLimitSettings, error)
	grpc.ClientStream
}

type rateLimitSettingsApiShowRateLimitSettingsClient struct {
	grpc.ClientStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsClient) Recv() (*RateLimitSettings, error) {
	m := new(RateLimitSettings)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RateLimitSettingsApiServer is the server API for RateLimitSettingsApi service.
type RateLimitSettingsApiServer interface {
	// Create RateLimitSettings for an API endpoint
	CreateRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Update RateLimit settings for an API endpoint
	UpdateRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Delete RateLimit settings for an API endpoint (ie. no rate limiting)
	DeleteRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Show RateLimit settings for an API endpoint
	ShowRateLimitSettings(*RateLimitSettings, RateLimitSettingsApi_ShowRateLimitSettingsServer) error
}

// UnimplementedRateLimitSettingsApiServer can be embedded to have forward compatible implementations.
type UnimplementedRateLimitSettingsApiServer struct {
}

func (*UnimplementedRateLimitSettingsApiServer) CreateRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) UpdateRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) DeleteRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) ShowRateLimitSettings(req *RateLimitSettings, srv RateLimitSettingsApi_ShowRateLimitSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowRateLimitSettings not implemented")
}

func RegisterRateLimitSettingsApiServer(s *grpc.Server, srv RateLimitSettingsApiServer) {
	s.RegisterService(&_RateLimitSettingsApi_serviceDesc, srv)
}

func _RateLimitSettingsApi_CreateRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).CreateRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/CreateRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).CreateRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_UpdateRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).UpdateRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/UpdateRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).UpdateRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_DeleteRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).DeleteRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/DeleteRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).DeleteRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_ShowRateLimitSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RateLimitSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimitSettingsApiServer).ShowRateLimitSettings(m, &rateLimitSettingsApiShowRateLimitSettingsServer{stream})
}

type RateLimitSettingsApi_ShowRateLimitSettingsServer interface {
	Send(*RateLimitSettings) error
	grpc.ServerStream
}

type rateLimitSettingsApiShowRateLimitSettingsServer struct {
	grpc.ServerStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsServer) Send(m *RateLimitSettings) error {
	return x.ServerStream.SendMsg(m)
}

var _RateLimitSettingsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.RateLimitSettingsApi",
	HandlerType: (*RateLimitSettingsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRateLimitSettings",
			Handler:    _RateLimitSettingsApi_CreateRateLimitSettings_Handler,
		},
		{
			MethodName: "UpdateRateLimitSettings",
			Handler:    _RateLimitSettingsApi_UpdateRateLimitSettings_Handler,
		},
		{
			MethodName: "DeleteRateLimitSettings",
			Handler:    _RateLimitSettingsApi_DeleteRateLimitSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowRateLimitSettings",
			Handler:       _RateLimitSettingsApi_ShowRateLimitSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ratelimit.proto",
}

func (m *RateLimitSettingsKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitTarget != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.RateLimitTarget))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiEndpointType != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.ApiEndpointType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiName) > 0 {
		i -= len(m.ApiName)
		copy(dAtA[i:], m.ApiName)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.ApiName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurstSize != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.BurstSize))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqsPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReqsPerSecond))))
		i--
		dAtA[i] = 0x11
	}
	if m.FlowAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.FlowAlgorithm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxReqsSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxReqsSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxReqsSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxRequests != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxRequests))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxReqsAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxReqsAlgorithm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxReqsSettings) > 0 {
		for iNdEx := len(m.MaxReqsSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxReqsSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatelimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FlowSettings) > 0 {
		for iNdEx := len(m.FlowSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatelimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettingsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatelimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatelimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatelimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimitSettingsKey) Matches(o *RateLimitSettingsKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.ApiName != "" {
		if o.ApiName != m.ApiName {
			return false
		}
	}
	if !opts.Filter || o.ApiEndpointType != 0 {
		if o.ApiEndpointType != m.ApiEndpointType {
			return false
		}
	}
	if !opts.Filter || o.RateLimitTarget != 0 {
		if o.RateLimitTarget != m.RateLimitTarget {
			return false
		}
	}
	return true
}

func (m *RateLimitSettingsKey) CopyInFields(src *RateLimitSettingsKey) int {
	changed := 0
	if m.ApiName != src.ApiName {
		m.ApiName = src.ApiName
		changed++
	}
	if m.ApiEndpointType != src.ApiEndpointType {
		m.ApiEndpointType = src.ApiEndpointType
		changed++
	}
	if m.RateLimitTarget != src.RateLimitTarget {
		m.RateLimitTarget = src.RateLimitTarget
		changed++
	}
	return changed
}

func (m *RateLimitSettingsKey) DeepCopyIn(src *RateLimitSettingsKey) {
	m.ApiName = src.ApiName
	m.ApiEndpointType = src.ApiEndpointType
	m.RateLimitTarget = src.RateLimitTarget
}

func (m *RateLimitSettingsKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal RateLimitSettingsKey key string", "obj", m)
	}
	return string(key)
}

func RateLimitSettingsKeyStringParse(str string, key *RateLimitSettingsKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal RateLimitSettingsKey key string", "str", str)
	}
}

func (m *RateLimitSettingsKey) NotFoundError() error {
	return fmt.Errorf("RateLimitSettings key %s not found", m.GetKeyString())
}

func (m *RateLimitSettingsKey) ExistsError() error {
	return fmt.Errorf("RateLimitSettings key %s already exists", m.GetKeyString())
}

var RateLimitSettingsKeyTagApiName = "apiname"
var RateLimitSettingsKeyTagApiEndpointType = "apiendpointtype"
var RateLimitSettingsKeyTagRateLimitTarget = "ratelimittarget"

func (m *RateLimitSettingsKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apiname"] = m.ApiName
	tags["apiendpointtype"] = ApiEndpointType_name[int32(m.ApiEndpointType)]
	tags["ratelimittarget"] = RateLimitTarget_name[int32(m.RateLimitTarget)]
	return tags
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsKey) ValidateEnums() error {
	if _, ok := ApiEndpointType_name[int32(m.ApiEndpointType)]; !ok {
		return errors.New("invalid ApiEndpointType")
	}
	if _, ok := RateLimitTarget_name[int32(m.RateLimitTarget)]; !ok {
		return errors.New("invalid RateLimitTarget")
	}
	return nil
}

func (m *FlowSettings) CopyInFields(src *FlowSettings) int {
	changed := 0
	if m.FlowAlgorithm != src.FlowAlgorithm {
		m.FlowAlgorithm = src.FlowAlgorithm
		changed++
	}
	if m.ReqsPerSecond != src.ReqsPerSecond {
		m.ReqsPerSecond = src.ReqsPerSecond
		changed++
	}
	if m.BurstSize != src.BurstSize {
		m.BurstSize = src.BurstSize
		changed++
	}
	return changed
}

func (m *FlowSettings) DeepCopyIn(src *FlowSettings) {
	m.FlowAlgorithm = src.FlowAlgorithm
	m.ReqsPerSecond = src.ReqsPerSecond
	m.BurstSize = src.BurstSize
}

// Helper method to check that enums have valid values
func (m *FlowSettings) ValidateEnums() error {
	if _, ok := FlowRateLimitAlgorithm_name[int32(m.FlowAlgorithm)]; !ok {
		return errors.New("invalid FlowAlgorithm")
	}
	return nil
}

func (m *MaxReqsSettings) CopyInFields(src *MaxReqsSettings) int {
	changed := 0
	if m.MaxReqsAlgorithm != src.MaxReqsAlgorithm {
		m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
		changed++
	}
	if m.MaxRequests != src.MaxRequests {
		m.MaxRequests = src.MaxRequests
		changed++
	}
	if m.Interval != src.Interval {
		m.Interval = src.Interval
		changed++
	}
	return changed
}

func (m *MaxReqsSettings) DeepCopyIn(src *MaxReqsSettings) {
	m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
	m.MaxRequests = src.MaxRequests
	m.Interval = src.Interval
}

// Helper method to check that enums have valid values
func (m *MaxReqsSettings) ValidateEnums() error {
	if _, ok := MaxReqsRateLimitAlgorithm_name[int32(m.MaxReqsAlgorithm)]; !ok {
		return errors.New("invalid MaxReqsAlgorithm")
	}
	return nil
}

func (m *RateLimitSettings) Matches(o *RateLimitSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.FlowSettings != nil {
		if len(m.FlowSettings) == 0 && len(o.FlowSettings) > 0 || len(m.FlowSettings) > 0 && len(o.FlowSettings) == 0 {
			return false
		} else if m.FlowSettings != nil && o.FlowSettings != nil {
			if !opts.Filter && len(m.FlowSettings) != len(o.FlowSettings) {
				return false
			}
		}
	}
	if !opts.Filter || o.MaxReqsSettings != nil {
		if len(m.MaxReqsSettings) == 0 && len(o.MaxReqsSettings) > 0 || len(m.MaxReqsSettings) > 0 && len(o.MaxReqsSettings) == 0 {
			return false
		} else if m.MaxReqsSettings != nil && o.MaxReqsSettings != nil {
			if !opts.Filter && len(m.MaxReqsSettings) != len(o.MaxReqsSettings) {
				return false
			}
		}
	}
	return true
}

const RateLimitSettingsFieldKey = "2"
const RateLimitSettingsFieldKeyApiName = "2.1"
const RateLimitSettingsFieldKeyApiEndpointType = "2.2"
const RateLimitSettingsFieldKeyRateLimitTarget = "2.3"
const RateLimitSettingsFieldFlowSettings = "7"
const RateLimitSettingsFieldFlowSettingsFlowAlgorithm = "7.1"
const RateLimitSettingsFieldFlowSettingsReqsPerSecond = "7.2"
const RateLimitSettingsFieldFlowSettingsBurstSize = "7.3"
const RateLimitSettingsFieldMaxReqsSettings = "8"
const RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm = "8.1"
const RateLimitSettingsFieldMaxReqsSettingsMaxRequests = "8.2"
const RateLimitSettingsFieldMaxReqsSettingsInterval = "8.3"

var RateLimitSettingsAllFields = []string{
	RateLimitSettingsFieldKeyApiName,
	RateLimitSettingsFieldKeyApiEndpointType,
	RateLimitSettingsFieldKeyRateLimitTarget,
	RateLimitSettingsFieldFlowSettingsFlowAlgorithm,
	RateLimitSettingsFieldFlowSettingsReqsPerSecond,
	RateLimitSettingsFieldFlowSettingsBurstSize,
	RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm,
	RateLimitSettingsFieldMaxReqsSettingsMaxRequests,
	RateLimitSettingsFieldMaxReqsSettingsInterval,
}

var RateLimitSettingsAllFieldsMap = map[string]struct{}{
	RateLimitSettingsFieldKeyApiName:                      struct{}{},
	RateLimitSettingsFieldKeyApiEndpointType:              struct{}{},
	RateLimitSettingsFieldKeyRateLimitTarget:              struct{}{},
	RateLimitSettingsFieldFlowSettingsFlowAlgorithm:       struct{}{},
	RateLimitSettingsFieldFlowSettingsReqsPerSecond:       struct{}{},
	RateLimitSettingsFieldFlowSettingsBurstSize:           struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm: struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsMaxRequests:      struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsInterval:         struct{}{},
}

var RateLimitSettingsAllFieldsStringMap = map[string]string{
	RateLimitSettingsFieldKeyApiName:                      "Key Api Name",
	RateLimitSettingsFieldKeyApiEndpointType:              "Key Api Endpoint Type",
	RateLimitSettingsFieldKeyRateLimitTarget:              "Key Rate Limit Target",
	RateLimitSettingsFieldFlowSettingsFlowAlgorithm:       "Flow Settings Flow Algorithm",
	RateLimitSettingsFieldFlowSettingsReqsPerSecond:       "Flow Settings Reqs Per Second",
	RateLimitSettingsFieldFlowSettingsBurstSize:           "Flow Settings Burst Size",
	RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm: "Max Reqs Settings Max Reqs Algorithm",
	RateLimitSettingsFieldMaxReqsSettingsMaxRequests:      "Max Reqs Settings Max Requests",
	RateLimitSettingsFieldMaxReqsSettingsInterval:         "Max Reqs Settings Interval",
}

func (m *RateLimitSettings) IsKeyField(s string) bool {
	return strings.HasPrefix(s, RateLimitSettingsFieldKey+".") || s == RateLimitSettingsFieldKey
}

func (m *RateLimitSettings) DiffFields(o *RateLimitSettings, fields map[string]struct{}) {
	if m.Key.ApiName != o.Key.ApiName {
		fields[RateLimitSettingsFieldKeyApiName] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.ApiEndpointType != o.Key.ApiEndpointType {
		fields[RateLimitSettingsFieldKeyApiEndpointType] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitTarget != o.Key.RateLimitTarget {
		fields[RateLimitSettingsFieldKeyRateLimitTarget] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.FlowSettings != nil && o.FlowSettings != nil {
		if len(m.FlowSettings) != len(o.FlowSettings) {
			fields[RateLimitSettingsFieldFlowSettings] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.FlowSettings); i0++ {
				if m.FlowSettings[i0].FlowAlgorithm != o.FlowSettings[i0].FlowAlgorithm {
					fields[RateLimitSettingsFieldFlowSettingsFlowAlgorithm] = struct{}{}
					fields[RateLimitSettingsFieldFlowSettings] = struct{}{}
				}
				if m.FlowSettings[i0].ReqsPerSecond != o.FlowSettings[i0].ReqsPerSecond {
					fields[RateLimitSettingsFieldFlowSettingsReqsPerSecond] = struct{}{}
					fields[RateLimitSettingsFieldFlowSettings] = struct{}{}
				}
				if m.FlowSettings[i0].BurstSize != o.FlowSettings[i0].BurstSize {
					fields[RateLimitSettingsFieldFlowSettingsBurstSize] = struct{}{}
					fields[RateLimitSettingsFieldFlowSettings] = struct{}{}
				}
			}
		}
	} else if (m.FlowSettings != nil && o.FlowSettings == nil) || (m.FlowSettings == nil && o.FlowSettings != nil) {
		fields[RateLimitSettingsFieldFlowSettings] = struct{}{}
	}
	if m.MaxReqsSettings != nil && o.MaxReqsSettings != nil {
		if len(m.MaxReqsSettings) != len(o.MaxReqsSettings) {
			fields[RateLimitSettingsFieldMaxReqsSettings] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.MaxReqsSettings); i0++ {
				if m.MaxReqsSettings[i0].MaxReqsAlgorithm != o.MaxReqsSettings[i0].MaxReqsAlgorithm {
					fields[RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm] = struct{}{}
					fields[RateLimitSettingsFieldMaxReqsSettings] = struct{}{}
				}
				if m.MaxReqsSettings[i0].MaxRequests != o.MaxReqsSettings[i0].MaxRequests {
					fields[RateLimitSettingsFieldMaxReqsSettingsMaxRequests] = struct{}{}
					fields[RateLimitSettingsFieldMaxReqsSettings] = struct{}{}
				}
				if m.MaxReqsSettings[i0].Interval != o.MaxReqsSettings[i0].Interval {
					fields[RateLimitSettingsFieldMaxReqsSettingsInterval] = struct{}{}
					fields[RateLimitSettingsFieldMaxReqsSettings] = struct{}{}
				}
			}
		}
	} else if (m.MaxReqsSettings != nil && o.MaxReqsSettings == nil) || (m.MaxReqsSettings == nil && o.MaxReqsSettings != nil) {
		fields[RateLimitSettingsFieldMaxReqsSettings] = struct{}{}
	}
}

var UpdateRateLimitSettingsFieldsMap = map[string]struct{}{
	RateLimitSettingsFieldFlowSettings:                    struct{}{},
	RateLimitSettingsFieldFlowSettingsFlowAlgorithm:       struct{}{},
	RateLimitSettingsFieldFlowSettingsReqsPerSecond:       struct{}{},
	RateLimitSettingsFieldFlowSettingsBurstSize:           struct{}{},
	RateLimitSettingsFieldMaxReqsSettings:                 struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsMaxReqsAlgorithm: struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsMaxRequests:      struct{}{},
	RateLimitSettingsFieldMaxReqsSettingsInterval:         struct{}{},
}

func (m *RateLimitSettings) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateRateLimitSettingsFieldsMap[field]; !ok {
			if _, ok := RateLimitSettingsAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, RateLimitSettingsAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *RateLimitSettings) CopyInFields(src *RateLimitSettings) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.ApiName != src.Key.ApiName {
				m.Key.ApiName = src.Key.ApiName
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.ApiEndpointType != src.Key.ApiEndpointType {
				m.Key.ApiEndpointType = src.Key.ApiEndpointType
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if m.Key.RateLimitTarget != src.Key.RateLimitTarget {
				m.Key.RateLimitTarget = src.Key.RateLimitTarget
				changed++
			}
		}
	}
	if _, set := fmap["7"]; set {
		if src.FlowSettings != nil {
			m.FlowSettings = src.FlowSettings
			changed++
		} else if m.FlowSettings != nil {
			m.FlowSettings = nil
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if src.MaxReqsSettings != nil {
			m.MaxReqsSettings = src.MaxReqsSettings
			changed++
		} else if m.MaxReqsSettings != nil {
			m.MaxReqsSettings = nil
			changed++
		}
	}
	return changed
}

func (m *RateLimitSettings) DeepCopyIn(src *RateLimitSettings) {
	m.Key.DeepCopyIn(&src.Key)
	if src.FlowSettings != nil {
		m.FlowSettings = make([]*FlowSettings, len(src.FlowSettings), len(src.FlowSettings))
		for ii, s := range src.FlowSettings {
			var tmp_s FlowSettings
			tmp_s.DeepCopyIn(s)
			m.FlowSettings[ii] = &tmp_s
		}
	} else {
		m.FlowSettings = nil
	}
	if src.MaxReqsSettings != nil {
		m.MaxReqsSettings = make([]*MaxReqsSettings, len(src.MaxReqsSettings), len(src.MaxReqsSettings))
		for ii, s := range src.MaxReqsSettings {
			var tmp_s MaxReqsSettings
			tmp_s.DeepCopyIn(s)
			m.MaxReqsSettings[ii] = &tmp_s
		}
	} else {
		m.MaxReqsSettings = nil
	}
}

func (s *RateLimitSettings) HasFields() bool {
	return true
}

type RateLimitSettingsStore struct {
	kvstore objstore.KVStore
}

func NewRateLimitSettingsStore(kvstore objstore.KVStore) RateLimitSettingsStore {
	return RateLimitSettingsStore{kvstore: kvstore}
}

func (s *RateLimitSettingsStore) Create(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(RateLimitSettingsAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Update(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur RateLimitSettings
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Put(ctx context.Context, m *RateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(RateLimitSettingsAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Delete(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) LoadOne(key string) (*RateLimitSettings, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj RateLimitSettings
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse RateLimitSettings data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *RateLimitSettingsStore) STMGet(stm concurrency.STM, key *RateLimitSettingsKey, buf *RateLimitSettings) bool {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *RateLimitSettingsStore) STMPut(stm concurrency.STM, obj *RateLimitSettings, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("RateLimitSettings", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("RateLimitSettings json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *RateLimitSettingsStore) STMDel(stm concurrency.STM, key *RateLimitSettingsKey) {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	stm.Del(keystr)
}

type RateLimitSettingsKeyWatcher struct {
	cb func(ctx context.Context)
}

type RateLimitSettingsCacheData struct {
	Obj    *RateLimitSettings
	ModRev int64
}

// RateLimitSettingsCache caches RateLimitSettings objects in memory in a hash table
// and keeps them in sync with the database.
type RateLimitSettingsCache struct {
	Objs          map[RateLimitSettingsKey]*RateLimitSettingsCacheData
	Mux           util.Mutex
	List          map[RateLimitSettingsKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)
	DeletedCbs    []func(ctx context.Context, old *RateLimitSettings)
	KeyWatchers   map[RateLimitSettingsKey][]*RateLimitSettingsKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *RateLimitSettingsKey)
	DeletedKeyCbs []func(ctx context.Context, key *RateLimitSettingsKey)
}

func NewRateLimitSettingsCache() *RateLimitSettingsCache {
	cache := RateLimitSettingsCache{}
	InitRateLimitSettingsCache(&cache)
	return &cache
}

func InitRateLimitSettingsCache(cache *RateLimitSettingsCache) {
	cache.Objs = make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	cache.KeyWatchers = make(map[RateLimitSettingsKey][]*RateLimitSettingsKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *RateLimitSettingsCache) GetTypeString() string {
	return "RateLimitSettings"
}

func (c *RateLimitSettingsCache) Get(key *RateLimitSettingsKey, valbuf *RateLimitSettings) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *RateLimitSettingsCache) GetWithRev(key *RateLimitSettingsKey, valbuf *RateLimitSettings, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *RateLimitSettingsCache) HasKey(key *RateLimitSettingsKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *RateLimitSettingsCache) GetAllKeys(ctx context.Context, cb func(key *RateLimitSettingsKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *RateLimitSettingsCache) Update(ctx context.Context, in *RateLimitSettings, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *RateLimitSettings) (*RateLimitSettings, bool) {
		return in, true
	})
}

func (c *RateLimitSettingsCache) UpdateModFunc(ctx context.Context, key *RateLimitSettingsKey, modRev int64, modFunc func(old *RateLimitSettings) (new *RateLimitSettings, changed bool)) {
	c.Mux.Lock()
	var old *RateLimitSettings
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &RateLimitSettings{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &RateLimitSettings{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &RateLimitSettingsCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *RateLimitSettingsCache) Delete(ctx context.Context, in *RateLimitSettings, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *RateLimitSettings) bool {
		return true
	})
}

func (c *RateLimitSettingsCache) DeleteCondFunc(ctx context.Context, in *RateLimitSettings, modRev int64, condFunc func(old *RateLimitSettings) bool) {
	c.Mux.Lock()
	var old *RateLimitSettings
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *RateLimitSettingsCache) Prune(ctx context.Context, validKeys map[RateLimitSettingsKey]struct{}) {
	notify := make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *RateLimitSettingsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *RateLimitSettingsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *RateLimitSettingsCache) Show(filter *RateLimitSettings, cb func(ret *RateLimitSettings) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func RateLimitSettingsGenericNotifyCb(fn func(key *RateLimitSettingsKey, old *RateLimitSettings)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*RateLimitSettingsKey), obj.(*RateLimitSettings))
	}
}

func (c *RateLimitSettingsCache) SetNotifyCb(fn func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64){fn}
}

func (c *RateLimitSettingsCache) SetUpdatedCb(fn func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)) {
	c.UpdatedCbs = []func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings){fn}
}

func (c *RateLimitSettingsCache) SetDeletedCb(fn func(ctx context.Context, old *RateLimitSettings)) {
	c.DeletedCbs = []func(ctx context.Context, old *RateLimitSettings){fn}
}

func (c *RateLimitSettingsCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *RateLimitSettingsKey){fn}
}

func (c *RateLimitSettingsCache) SetDeletedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *RateLimitSettingsKey){fn}
}

func (c *RateLimitSettingsCache) AddUpdatedCb(fn func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *RateLimitSettingsCache) AddDeletedCb(fn func(ctx context.Context, old *RateLimitSettings)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *RateLimitSettingsCache) AddNotifyCb(fn func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *RateLimitSettingsCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *RateLimitSettingsCache) AddDeletedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *RateLimitSettingsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *RateLimitSettingsCache) WatchKey(key *RateLimitSettingsKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*RateLimitSettingsKeyWatcher, 0)
	}
	watcher := RateLimitSettingsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching RateLimitSettings", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *RateLimitSettingsCache) TriggerKeyWatchers(ctx context.Context, key *RateLimitSettingsKey) {
	watchers := make([]*RateLimitSettingsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *RateLimitSettingsCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := RateLimitSettings{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse RateLimitSettings data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *RateLimitSettingsCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := RateLimitSettings{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	RateLimitSettingsKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *RateLimitSettingsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[RateLimitSettingsKey]struct{})
}

func (c *RateLimitSettingsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *RateLimitSettingsCache) UsesOrg(org string) bool {
	return false
}

func (m *RateLimitSettings) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *RateLimitSettings) GetKey() *RateLimitSettingsKey {
	return &m.Key
}

func (m *RateLimitSettings) GetKeyVal() RateLimitSettingsKey {
	return m.Key
}

func (m *RateLimitSettings) SetKey(key *RateLimitSettingsKey) {
	m.Key = *key
}

func CmpSortRateLimitSettings(a RateLimitSettings, b RateLimitSettings) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *RateLimitSettings) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.FlowSettings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.MaxReqsSettings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *RateLimitSettingsData) DeepCopyIn(src *RateLimitSettingsData) {
	if src.Settings != nil {
		m.Settings = make([]RateLimitSettings, len(src.Settings), len(src.Settings))
		for ii, s := range src.Settings {
			m.Settings[ii].DeepCopyIn(&s)
		}
	} else {
		m.Settings = nil
	}
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsData) ValidateEnums() error {
	for _, e := range m.Settings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

var ApiEndpointTypeStrings = []string{
	"UNKNOWN_API_ENDPOINT_TYPE",
	"CONTROLLER",
	"DME",
}

const (
	ApiEndpointTypeUNKNOWN_API_ENDPOINT_TYPE uint64 = 1 << 0
	ApiEndpointTypeCONTROLLER                uint64 = 1 << 1
	ApiEndpointTypeDME                       uint64 = 1 << 2
)

var ApiEndpointType_CamelName = map[int32]string{
	// UNKNOWN_API_ENDPOINT_TYPE -> UnknownApiEndpointType
	0: "UnknownApiEndpointType",
	// CONTROLLER -> Controller
	1: "Controller",
	// DME -> Dme
	2: "Dme",
}
var ApiEndpointType_CamelValue = map[string]int32{
	"UnknownApiEndpointType": 0,
	"Controller":             1,
	"Dme":                    2,
}

func (e *ApiEndpointType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ApiEndpointType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ApiEndpointType(val)
	return nil
}

func (e ApiEndpointType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(ApiEndpointType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *ApiEndpointType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ApiEndpointType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = ApiEndpointType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = ApiEndpointType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var RateLimitTargetStrings = []string{
	"UNKNOWN_TARGET",
	"ALL_REQUESTS",
	"PER_IP",
	"PER_USER",
}

const (
	RateLimitTargetUNKNOWN_TARGET uint64 = 1 << 0
	RateLimitTargetALL_REQUESTS   uint64 = 1 << 1
	RateLimitTargetPER_IP         uint64 = 1 << 2
	RateLimitTargetPER_USER       uint64 = 1 << 3
)

var RateLimitTarget_CamelName = map[int32]string{
	// UNKNOWN_TARGET -> UnknownTarget
	0: "UnknownTarget",
	// ALL_REQUESTS -> AllRequests
	1: "AllRequests",
	// PER_IP -> PerIp
	2: "PerIp",
	// PER_USER -> PerUser
	3: "PerUser",
}
var RateLimitTarget_CamelValue = map[string]int32{
	"UnknownTarget": 0,
	"AllRequests":   1,
	"PerIp":         2,
	"PerUser":       3,
}

func (e *RateLimitTarget) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = RateLimitTarget_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = RateLimitTarget(val)
	return nil
}

func (e RateLimitTarget) MarshalYAML() (interface{}, error) {
	return proto.EnumName(RateLimitTarget_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *RateLimitTarget) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = RateLimitTarget_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = RateLimitTarget(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = RateLimitTarget(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var FlowRateLimitAlgorithmStrings = []string{
	"UNKNOWN_FLOW_ALGORITHM",
	"TOKEN_BUCKET_ALGORITHM",
	"LEAKY_BUCKET_ALGORITHM",
}

const (
	FlowRateLimitAlgorithmUNKNOWN_FLOW_ALGORITHM uint64 = 1 << 0
	FlowRateLimitAlgorithmTOKEN_BUCKET_ALGORITHM uint64 = 1 << 1
	FlowRateLimitAlgorithmLEAKY_BUCKET_ALGORITHM uint64 = 1 << 2
)

var FlowRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_FLOW_ALGORITHM -> UnknownFlowAlgorithm
	0: "UnknownFlowAlgorithm",
	// TOKEN_BUCKET_ALGORITHM -> TokenBucketAlgorithm
	1: "TokenBucketAlgorithm",
	// LEAKY_BUCKET_ALGORITHM -> LeakyBucketAlgorithm
	2: "LeakyBucketAlgorithm",
}
var FlowRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownFlowAlgorithm": 0,
	"TokenBucketAlgorithm": 1,
	"LeakyBucketAlgorithm": 2,
}

func (e *FlowRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = FlowRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = FlowRateLimitAlgorithm(val)
	return nil
}

func (e FlowRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	return proto.EnumName(FlowRateLimitAlgorithm_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *FlowRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = FlowRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var MaxReqsRateLimitAlgorithmStrings = []string{
	"UNKNOWN_MAX_REQS_ALGORITHM",
	"FIXED_WINDOW_ALGORITHM",
}

const (
	MaxReqsRateLimitAlgorithmUNKNOWN_MAX_REQS_ALGORITHM uint64 = 1 << 0
	MaxReqsRateLimitAlgorithmFIXED_WINDOW_ALGORITHM     uint64 = 1 << 1
)

var MaxReqsRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_MAX_REQS_ALGORITHM -> UnknownMaxReqsAlgorithm
	0: "UnknownMaxReqsAlgorithm",
	// FIXED_WINDOW_ALGORITHM -> FixedWindowAlgorithm
	1: "FixedWindowAlgorithm",
}
var MaxReqsRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownMaxReqsAlgorithm": 0,
	"FixedWindowAlgorithm":    1,
}

func (e *MaxReqsRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = MaxReqsRateLimitAlgorithm(val)
	return nil
}

func (e MaxReqsRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	return proto.EnumName(MaxReqsRateLimitAlgorithm_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *MaxReqsRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *RateLimitSettings) IsValidArgsForCreateRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettings) IsValidArgsForUpdateRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettings) IsValidArgsForDeleteRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettingsKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiName)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	if m.ApiEndpointType != 0 {
		n += 1 + sovRatelimit(uint64(m.ApiEndpointType))
	}
	if m.RateLimitTarget != 0 {
		n += 1 + sovRatelimit(uint64(m.RateLimitTarget))
	}
	return n
}

func (m *FlowSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.FlowAlgorithm))
	}
	if m.ReqsPerSecond != 0 {
		n += 9
	}
	if m.BurstSize != 0 {
		n += 1 + sovRatelimit(uint64(m.BurstSize))
	}
	return n
}

func (m *MaxReqsSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxReqsAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxReqsAlgorithm))
	}
	if m.MaxRequests != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxRequests))
	}
	if m.Interval != 0 {
		n += 1 + sovRatelimit(uint64(m.Interval))
	}
	return n
}

func (m *RateLimitSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	if len(m.FlowSettings) > 0 {
		for _, e := range m.FlowSettings {
			l = e.Size()
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	if len(m.MaxReqsSettings) > 0 {
		for _, e := range m.MaxReqsSettings {
			l = e.Size()
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	return n
}

func (m *RateLimitSettingsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	return n
}

func sovRatelimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatelimit(x uint64) (n int) {
	return sovRatelimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimitSettingsKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointType", wireType)
			}
			m.ApiEndpointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiEndpointType |= ApiEndpointType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitTarget", wireType)
			}
			m.RateLimitTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitTarget |= RateLimitTarget(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAlgorithm", wireType)
			}
			m.FlowAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAlgorithm |= FlowRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqsPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReqsPerSecond = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxReqsSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxReqsSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxReqsSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsAlgorithm", wireType)
			}
			m.MaxReqsAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReqsAlgorithm |= MaxReqsRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequests", wireType)
			}
			m.MaxRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowSettings = append(m.FlowSettings, &FlowSettings{})
			if err := m.FlowSettings[len(m.FlowSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReqsSettings = append(m.MaxReqsSettings, &MaxReqsSettings{})
			if err := m.MaxReqsSettings[len(m.MaxReqsSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettingsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, RateLimitSettings{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatelimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatelimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatelimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatelimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatelimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatelimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatelimit = fmt.Errorf("proto: unexpected end of group")
)
