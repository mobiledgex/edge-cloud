// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package edgeproto

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowRateLimitAlgorithm int32

const (
	FlowRateLimitAlgorithm_UNKNOWN_FLOW_ALGORITHM FlowRateLimitAlgorithm = 0
	FlowRateLimitAlgorithm_TOKEN_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 1
	FlowRateLimitAlgorithm_LEAKY_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 2
	FlowRateLimitAlgorithm_NO_FLOW_ALGORITHM      FlowRateLimitAlgorithm = 3
)

var FlowRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_FLOW_ALGORITHM",
	1: "TOKEN_BUCKET_ALGORITHM",
	2: "LEAKY_BUCKET_ALGORITHM",
	3: "NO_FLOW_ALGORITHM",
}

var FlowRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_FLOW_ALGORITHM": 0,
	"TOKEN_BUCKET_ALGORITHM": 1,
	"LEAKY_BUCKET_ALGORITHM": 2,
	"NO_FLOW_ALGORITHM":      3,
}

func (x FlowRateLimitAlgorithm) String() string {
	return proto.EnumName(FlowRateLimitAlgorithm_name, int32(x))
}

func (FlowRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}

type MaxReqsRateLimitAlgorithm int32

const (
	MaxReqsRateLimitAlgorithm_UNKNOWN_MAX_REQS_ALGORITHM MaxReqsRateLimitAlgorithm = 0
	MaxReqsRateLimitAlgorithm_FIXED_WINDOW_ALGORITHM     MaxReqsRateLimitAlgorithm = 1
	MaxReqsRateLimitAlgorithm_ROLLING_WINDOW_ALGORITHM   MaxReqsRateLimitAlgorithm = 2
	MaxReqsRateLimitAlgorithm_NO_MAX_REQS_ALGORITHM      MaxReqsRateLimitAlgorithm = 3
)

var MaxReqsRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_MAX_REQS_ALGORITHM",
	1: "FIXED_WINDOW_ALGORITHM",
	2: "ROLLING_WINDOW_ALGORITHM",
	3: "NO_MAX_REQS_ALGORITHM",
}

var MaxReqsRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_MAX_REQS_ALGORITHM": 0,
	"FIXED_WINDOW_ALGORITHM":     1,
	"ROLLING_WINDOW_ALGORITHM":   2,
	"NO_MAX_REQS_ALGORITHM":      3,
}

func (x MaxReqsRateLimitAlgorithm) String() string {
	return proto.EnumName(MaxReqsRateLimitAlgorithm_name, int32(x))
}

func (MaxReqsRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}

type ApiEndpointType int32

const (
	ApiEndpointType_UNKNOWN_API_ENDPOINT_TYPE ApiEndpointType = 0
	ApiEndpointType_CONTROLLER                ApiEndpointType = 1
	ApiEndpointType_DME                       ApiEndpointType = 2
)

var ApiEndpointType_name = map[int32]string{
	0: "UNKNOWN_API_ENDPOINT_TYPE",
	1: "CONTROLLER",
	2: "DME",
}

var ApiEndpointType_value = map[string]int32{
	"UNKNOWN_API_ENDPOINT_TYPE": 0,
	"CONTROLLER":                1,
	"DME":                       2,
}

func (x ApiEndpointType) String() string {
	return proto.EnumName(ApiEndpointType_name, int32(x))
}

func (ApiEndpointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}

type ApiActionType int32

const (
	ApiActionType_UNKNOWN_ACTION ApiActionType = 0
	ApiActionType_CREATE_ACTION  ApiActionType = 1
	ApiActionType_DELETE_ACTION  ApiActionType = 2
	ApiActionType_UPDATE_ACTION  ApiActionType = 3
	ApiActionType_SHOW_ACTION    ApiActionType = 4
	ApiActionType_DEFAULT_ACTION ApiActionType = 5
)

var ApiActionType_name = map[int32]string{
	0: "UNKNOWN_ACTION",
	1: "CREATE_ACTION",
	2: "DELETE_ACTION",
	3: "UPDATE_ACTION",
	4: "SHOW_ACTION",
	5: "DEFAULT_ACTION",
}

var ApiActionType_value = map[string]int32{
	"UNKNOWN_ACTION": 0,
	"CREATE_ACTION":  1,
	"DELETE_ACTION":  2,
	"UPDATE_ACTION":  3,
	"SHOW_ACTION":    4,
	"DEFAULT_ACTION": 5,
}

func (x ApiActionType) String() string {
	return proto.EnumName(ApiActionType_name, int32(x))
}

func (ApiActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{3}
}

type RateLimitTarget int32

const (
	RateLimitTarget_UNKNOWN_TARGET RateLimitTarget = 0
	RateLimitTarget_ALL_REQUESTS   RateLimitTarget = 1
	RateLimitTarget_PER_IP         RateLimitTarget = 2
	RateLimitTarget_PER_USER       RateLimitTarget = 3
	RateLimitTarget_PER_ORG        RateLimitTarget = 4
)

var RateLimitTarget_name = map[int32]string{
	0: "UNKNOWN_TARGET",
	1: "ALL_REQUESTS",
	2: "PER_IP",
	3: "PER_USER",
	4: "PER_ORG",
}

var RateLimitTarget_value = map[string]int32{
	"UNKNOWN_TARGET": 0,
	"ALL_REQUESTS":   1,
	"PER_IP":         2,
	"PER_USER":       3,
	"PER_ORG":        4,
}

func (x RateLimitTarget) String() string {
	return proto.EnumName(RateLimitTarget_name, int32(x))
}

func (RateLimitTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{4}
}

type RateLimitSettingsKey struct {
	// API Endpoint type
	ApiEndpointType ApiEndpointType `protobuf:"varint,1,opt,name=api_endpoint_type,json=apiEndpointType,proto3,enum=edgeproto.ApiEndpointType" json:"api_endpoint_type,omitempty"`
	// API Action type (All DME apis are Default)
	ApiActionType ApiActionType `protobuf:"varint,2,opt,name=api_action_type,json=apiActionType,proto3,enum=edgeproto.ApiActionType" json:"api_action_type,omitempty"`
	// Target to rate limit
	RateLimitTarget RateLimitTarget `protobuf:"varint,3,opt,name=rate_limit_target,json=rateLimitTarget,proto3,enum=edgeproto.RateLimitTarget" json:"rate_limit_target,omitempty"`
}

func (m *RateLimitSettingsKey) Reset()         { *m = RateLimitSettingsKey{} }
func (m *RateLimitSettingsKey) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsKey) ProtoMessage()    {}
func (*RateLimitSettingsKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}
func (m *RateLimitSettingsKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsKey.Merge(m, src)
}
func (m *RateLimitSettingsKey) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsKey.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsKey proto.InternalMessageInfo

type RateLimitSettings struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key RateLimitSettingsKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// Flow Rate Limit algorithm - includes NoFlowAlgorithm, TokenBucketAlgorithm, or LeakyBucketAlgorithm
	FlowAlgorithm FlowRateLimitAlgorithm `protobuf:"varint,4,opt,name=flow_algorithm,json=flowAlgorithm,proto3,enum=edgeproto.FlowRateLimitAlgorithm" json:"flow_algorithm,omitempty"`
	// requests per second for flow rate limiting. If updating, must provide burstSize as well
	ReqsPerSecond float64 `protobuf:"fixed64,5,opt,name=reqsPerSecond,proto3" json:"reqsPerSecond,omitempty"`
	// burst size for flow rate limiting. If updating, must provide reqsPerSecond as well
	BurstSize int64 `protobuf:"varint,6,opt,name=burstSize,proto3" json:"burstSize,omitempty"`
	// MaxReqs Rate Limit Algorithm - includes NoMaxReqsAlgorithm or FixedWindowAlgorithm
	MaxReqsAlgorithm MaxReqsRateLimitAlgorithm `protobuf:"varint,7,opt,name=max_reqs_algorithm,json=maxReqsAlgorithm,proto3,enum=edgeproto.MaxReqsRateLimitAlgorithm" json:"max_reqs_algorithm,omitempty"`
	// maximum number of requests per second for max reqs rate limiting
	MaxRequestsPerSecond int64 `protobuf:"varint,8,opt,name=max_requests_per_second,json=maxRequestsPerSecond,proto3" json:"max_requests_per_second,omitempty"`
	// maximum number of requests per minute for max reqs rate limiting
	MaxRequestsPerMinute int64 `protobuf:"varint,9,opt,name=max_requests_per_minute,json=maxRequestsPerMinute,proto3" json:"max_requests_per_minute,omitempty"`
	// maximum number of requests per hour for max reqs rate limiting
	MaxRequestsPerHour int64 `protobuf:"varint,10,opt,name=max_requests_per_hour,json=maxRequestsPerHour,proto3" json:"max_requests_per_hour,omitempty"`
}

func (m *RateLimitSettings) Reset()         { *m = RateLimitSettings{} }
func (m *RateLimitSettings) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettings) ProtoMessage()    {}
func (*RateLimitSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}
func (m *RateLimitSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettings.Merge(m, src)
}
func (m *RateLimitSettings) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettings proto.InternalMessageInfo

type RateLimitSettingsData struct {
	Settings []RateLimitSettings `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings"`
}

func (m *RateLimitSettingsData) Reset()         { *m = RateLimitSettingsData{} }
func (m *RateLimitSettingsData) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsData) ProtoMessage()    {}
func (*RateLimitSettingsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}
func (m *RateLimitSettingsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsData.Merge(m, src)
}
func (m *RateLimitSettingsData) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsData) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsData.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("edgeproto.FlowRateLimitAlgorithm", FlowRateLimitAlgorithm_name, FlowRateLimitAlgorithm_value)
	proto.RegisterEnum("edgeproto.MaxReqsRateLimitAlgorithm", MaxReqsRateLimitAlgorithm_name, MaxReqsRateLimitAlgorithm_value)
	proto.RegisterEnum("edgeproto.ApiEndpointType", ApiEndpointType_name, ApiEndpointType_value)
	proto.RegisterEnum("edgeproto.ApiActionType", ApiActionType_name, ApiActionType_value)
	proto.RegisterEnum("edgeproto.RateLimitTarget", RateLimitTarget_name, RateLimitTarget_value)
	proto.RegisterType((*RateLimitSettingsKey)(nil), "edgeproto.RateLimitSettingsKey")
	proto.RegisterType((*RateLimitSettings)(nil), "edgeproto.RateLimitSettings")
	proto.RegisterType((*RateLimitSettingsData)(nil), "edgeproto.RateLimitSettingsData")
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptor_9c81fd649b00920f) }

var fileDescriptor_9c81fd649b00920f = []byte{
	// 1102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0x33, 0x49, 0xb6, 0xdb, 0x4e, 0xdf, 0x9c, 0xa1, 0x2f, 0xd3, 0x28, 0x9b, 0x96, 0x68,
	0x0f, 0x55, 0x54, 0x1a, 0x28, 0x42, 0xa0, 0x4a, 0x20, 0xdc, 0xc4, 0x6d, 0xa3, 0x24, 0x4e, 0x70,
	0x1c, 0xba, 0x2b, 0x24, 0x2c, 0xb7, 0x99, 0xba, 0x16, 0x89, 0xc7, 0x6b, 0x3b, 0x6a, 0xcb, 0x89,
	0x97, 0x03, 0x37, 0x54, 0x89, 0x03, 0x88, 0xd3, 0x7e, 0x84, 0x15, 0xdc, 0xf6, 0x13, 0xf4, 0xb8,
	0x12, 0x17, 0x4e, 0x08, 0x5a, 0x24, 0xd0, 0x9e, 0x40, 0x2d, 0x15, 0x47, 0x34, 0x93, 0x37, 0x27,
	0x31, 0xd5, 0x1e, 0x10, 0x17, 0x6b, 0xe6, 0x79, 0x9e, 0xff, 0x7f, 0x7e, 0x33, 0xf3, 0xd8, 0x86,
	0xb3, 0x8e, 0xee, 0x91, 0x86, 0xd9, 0x34, 0xbd, 0x75, 0xdb, 0xa1, 0x1e, 0x45, 0x13, 0xa4, 0x6e,
	0x10, 0x3e, 0x8c, 0x4f, 0x39, 0xc4, 0x6d, 0x35, 0x3a, 0x89, 0x78, 0xc2, 0xa0, 0xd4, 0x68, 0x90,
	0x8c, 0x6e, 0x9b, 0x19, 0xdd, 0xb2, 0xa8, 0xa7, 0x7b, 0x26, 0xb5, 0xdc, 0x4e, 0xf6, 0x2d, 0xc3,
	0xf4, 0x8e, 0x5a, 0xfb, 0xeb, 0x07, 0xb4, 0x99, 0x69, 0xd2, 0x7d, 0xb3, 0xc1, 0x6c, 0x4e, 0x32,
	0xec, 0xf9, 0xca, 0x41, 0x83, 0xb6, 0xea, 0x19, 0x5e, 0x67, 0x10, 0xab, 0x37, 0xe8, 0x28, 0xe7,
	0x0c, 0x6a, 0x50, 0x3e, 0xcc, 0xb0, 0x51, 0x3b, 0x9a, 0xfa, 0x3e, 0x0c, 0xe7, 0x14, 0xdd, 0x23,
	0x45, 0x86, 0x56, 0x25, 0x9e, 0x67, 0x5a, 0x86, 0x5b, 0x20, 0xa7, 0xe8, 0x03, 0x18, 0xd3, 0x6d,
	0x53, 0x23, 0x56, 0xdd, 0xa6, 0xa6, 0xe5, 0x69, 0xde, 0xa9, 0x4d, 0x30, 0x58, 0x01, 0xab, 0x33,
	0x1b, 0xf1, 0xf5, 0x1e, 0xfb, 0xba, 0x68, 0x9b, 0x52, 0xa7, 0x44, 0x3d, 0xb5, 0xc9, 0xd6, 0x4b,
	0x4f, 0x6f, 0xf0, 0xac, 0x6e, 0x9b, 0x5d, 0x1d, 0x93, 0x29, 0x2c, 0xe0, 0xaf, 0x42, 0x55, 0xc8,
	0x42, 0x9a, 0x7e, 0xc0, 0xb6, 0xd6, 0xb6, 0x0e, 0x73, 0x6b, 0x3c, 0x68, 0x2d, 0xf2, 0x02, 0x6e,
	0x1c, 0x7b, 0x7a, 0x83, 0xa7, 0x75, 0xdb, 0x6c, 0x6b, 0xb8, 0x2d, 0x9b, 0xf6, 0x2b, 0x18, 0x31,
	0x3b, 0x64, 0x8d, 0x9f, 0xb2, 0xe6, 0xe9, 0x8e, 0x41, 0x3c, 0x1c, 0x19, 0x21, 0xee, 0xed, 0x56,
	0xe5, 0x15, 0x6d, 0xe2, 0xde, 0xed, 0xb4, 0x65, 0x0a, 0x0f, 0xf8, 0xaa, 0x36, 0xa7, 0x7e, 0xbf,
	0xc2, 0xe0, 0xef, 0x2b, 0x0c, 0x9e, 0x3c, 0x5e, 0x06, 0xa9, 0x3f, 0xa3, 0x30, 0x36, 0x72, 0x6a,
	0x68, 0x01, 0x8e, 0x1d, 0x9a, 0xa4, 0x51, 0x77, 0x31, 0x58, 0x89, 0xac, 0x4e, 0x28, 0x9d, 0x19,
	0x7a, 0x13, 0x46, 0x3e, 0x22, 0xa7, 0x7c, 0x87, 0x93, 0x1b, 0xcb, 0x41, 0x28, 0xbe, 0x83, 0xdf,
	0x8a, 0x9e, 0xff, 0xb4, 0x1c, 0x52, 0x98, 0x02, 0xed, 0xc2, 0x99, 0xc3, 0x06, 0x3d, 0xd6, 0xf4,
	0x86, 0x41, 0x1d, 0xd3, 0x3b, 0x6a, 0xe2, 0x28, 0xdf, 0xce, 0xcb, 0x3e, 0x8f, 0xed, 0x06, 0x3d,
	0xee, 0xf9, 0x88, 0xdd, 0x42, 0x65, 0x9a, 0x09, 0x7b, 0x53, 0x74, 0x1f, 0x4e, 0x3b, 0xe4, 0x91,
	0x5b, 0x21, 0x4e, 0x95, 0x1c, 0x50, 0xab, 0x8e, 0xef, 0xac, 0x80, 0x55, 0xa0, 0x0c, 0x06, 0x51,
	0x02, 0x4e, 0xec, 0xb7, 0x1c, 0xd7, 0xab, 0x9a, 0x1f, 0x13, 0x3c, 0xb6, 0x02, 0x56, 0x23, 0x4a,
	0x3f, 0x80, 0x14, 0x88, 0x9a, 0xfa, 0x89, 0xc6, 0x24, 0x3e, 0xa2, 0xbb, 0x9c, 0xe8, 0xbe, 0x8f,
	0xa8, 0xa4, 0x9f, 0x28, 0xe4, 0x91, 0x1b, 0x00, 0x25, 0x34, 0xdb, 0xa9, 0x3e, 0xd7, 0x1b, 0x70,
	0xb1, 0xe3, 0xd9, 0x22, 0xae, 0xe7, 0x6a, 0x36, 0x71, 0x34, 0xb7, 0x4d, 0x38, 0xce, 0xd7, 0x9f,
	0x6b, 0x4b, 0x78, 0xb6, 0x0f, 0x1a, 0x24, 0x6b, 0x9a, 0x56, 0xcb, 0x23, 0x78, 0x22, 0x48, 0x56,
	0xe2, 0x39, 0xf4, 0x1a, 0x9c, 0x1f, 0x91, 0x1d, 0xd1, 0x96, 0x83, 0x21, 0x17, 0xa1, 0x41, 0xd1,
	0x2e, 0x6d, 0x39, 0x9b, 0x5f, 0x00, 0x76, 0xf1, 0x7f, 0x5c, 0x61, 0xf0, 0xc9, 0x35, 0x06, 0x67,
	0xd7, 0x18, 0x3c, 0xb9, 0xc6, 0xe0, 0xdb, 0xbf, 0xb0, 0x31, 0xd4, 0xe4, 0x6f, 0x17, 0xc8, 0xe9,
	0xf0, 0xdb, 0xb0, 0x36, 0xd4, 0x56, 0xbc, 0x66, 0xa8, 0xff, 0xd6, 0x06, 0x7a, 0xba, 0xeb, 0xd2,
	0x6f, 0xeb, 0xef, 0x6e, 0x70, 0xd4, 0xa2, 0x16, 0x49, 0xe9, 0x70, 0x7e, 0xa4, 0x5f, 0x72, 0xba,
	0xa7, 0xa3, 0x77, 0xe0, 0xb8, 0xdb, 0x99, 0xf3, 0xc6, 0x9b, 0xdc, 0x48, 0xdc, 0xd6, 0x63, 0x9d,
	0x06, 0xeb, 0x69, 0x36, 0xc7, 0xbf, 0xb9, 0xc1, 0xe0, 0xf1, 0x0d, 0x0e, 0xa5, 0x3f, 0x07, 0x70,
	0x21, 0xb8, 0x9f, 0x50, 0x1c, 0x2e, 0xd4, 0xe4, 0x82, 0x5c, 0xde, 0x93, 0xb5, 0xed, 0x62, 0x79,
	0x4f, 0x13, 0x8b, 0x3b, 0x65, 0x25, 0xaf, 0xee, 0x96, 0x84, 0x10, 0xcb, 0xa9, 0xe5, 0x82, 0x24,
	0x6b, 0x5b, 0xb5, 0x6c, 0x41, 0x52, 0x7d, 0x39, 0xc0, 0x72, 0x45, 0x49, 0x2c, 0x3c, 0x1c, 0xcd,
	0x85, 0xd1, 0x3c, 0x8c, 0xc9, 0xe5, 0x61, 0xbb, 0x48, 0xfa, 0x0c, 0xc0, 0xa5, 0x7f, 0xed, 0x21,
	0x94, 0x84, 0xf1, 0x2e, 0x48, 0x49, 0x7c, 0xa0, 0x29, 0xd2, 0x7b, 0xd5, 0x61, 0x98, 0xed, 0xfc,
	0x03, 0x29, 0xa7, 0xed, 0xe5, 0xe5, 0xdc, 0x80, 0x33, 0x40, 0x09, 0x88, 0x95, 0x72, 0xb1, 0x98,
	0x97, 0x77, 0x46, 0xb3, 0x61, 0xb4, 0x04, 0xe7, 0xe5, 0x72, 0x90, 0x69, 0x24, 0x9d, 0x87, 0xb3,
	0x43, 0x57, 0x8b, 0xee, 0xc1, 0xa5, 0x2e, 0x87, 0x58, 0xc9, 0x6b, 0x92, 0x9c, 0xab, 0x94, 0xf3,
	0xb2, 0xaa, 0xa9, 0x0f, 0x2b, 0x92, 0x10, 0x42, 0x33, 0x10, 0x66, 0xcb, 0xb2, 0xca, 0x96, 0x93,
	0x14, 0x01, 0xa0, 0xbb, 0x30, 0x92, 0x2b, 0x49, 0x42, 0x38, 0xfd, 0x29, 0x80, 0xd3, 0x03, 0x17,
	0x8c, 0x10, 0x9c, 0xe9, 0x39, 0x65, 0xd5, 0x7c, 0x59, 0x16, 0x42, 0x28, 0x06, 0xa7, 0xb3, 0x8a,
	0x24, 0xaa, 0x52, 0x37, 0x04, 0x58, 0x28, 0x27, 0x15, 0xa5, 0x7e, 0x28, 0xcc, 0x42, 0xb5, 0x4a,
	0xce, 0x57, 0x15, 0x41, 0xb3, 0x70, 0xb2, 0xba, 0xcb, 0x36, 0xd6, 0x0e, 0x44, 0x99, 0x7b, 0x4e,
	0xda, 0x16, 0x6b, 0x45, 0xb5, 0x1b, 0xbb, 0x93, 0xfe, 0x10, 0xce, 0x0e, 0x75, 0xa1, 0x1f, 0x42,
	0x15, 0x95, 0x1d, 0x49, 0x15, 0x42, 0x48, 0x80, 0x53, 0x62, 0xb1, 0xc8, 0x4e, 0xa3, 0x26, 0x55,
	0xd5, 0xaa, 0x00, 0x10, 0x84, 0x63, 0x15, 0x49, 0xd1, 0xf2, 0x15, 0x21, 0x8c, 0xa6, 0xe0, 0x38,
	0x1b, 0xd7, 0xaa, 0x92, 0x22, 0x44, 0xd0, 0x24, 0xbc, 0xcb, 0x66, 0x65, 0x65, 0x47, 0x88, 0x6e,
	0xfc, 0x16, 0x0d, 0xf8, 0xa9, 0x88, 0xb6, 0x89, 0xce, 0x00, 0x5c, 0xac, 0xd9, 0x75, 0xdd, 0x23,
	0xa3, 0x5f, 0xcf, 0x5b, 0x9b, 0x36, 0x1e, 0xf3, 0x67, 0xf9, 0xef, 0x32, 0x95, 0x7b, 0x7e, 0x8d,
	0x13, 0x0a, 0x71, 0x69, 0xcb, 0x39, 0x20, 0x59, 0x6a, 0x1d, 0x9a, 0xc6, 0x5a, 0xfb, 0x58, 0x4b,
	0xba, 0xa5, 0x1b, 0x64, 0xed, 0xb3, 0x1f, 0x7e, 0xfd, 0x2a, 0x9c, 0x4c, 0x2d, 0x65, 0x5a, 0x7c,
	0xc9, 0x4c, 0xef, 0x6d, 0xec, 0xb5, 0x3e, 0x48, 0x73, 0xa4, 0x1c, 0x69, 0x90, 0xff, 0x19, 0xa9,
	0xce, 0x97, 0x0c, 0x46, 0xfa, 0x12, 0xc0, 0x05, 0x85, 0xb8, 0xc4, 0xfb, 0x0f, 0x88, 0xb2, 0x2f,
	0x44, 0x74, 0x2f, 0x85, 0x33, 0x0e, 0x5b, 0x31, 0x18, 0xe8, 0x6b, 0x00, 0xe7, 0xab, 0x47, 0xbe,
	0xef, 0xc2, 0x0b, 0xf2, 0xdc, 0x9a, 0x4d, 0xbd, 0xfb, 0xfc, 0x1a, 0xc7, 0x03, 0xd1, 0xde, 0x37,
	0xc9, 0x71, 0x1b, 0x2c, 0x91, 0x5a, 0xcc, 0xb8, 0x47, 0xf4, 0x38, 0x90, 0xeb, 0x55, 0xb0, 0x95,
	0x38, 0xff, 0x25, 0x19, 0x3a, 0xbf, 0x48, 0x82, 0x67, 0x17, 0x49, 0xf0, 0xf3, 0x45, 0x12, 0x9c,
	0x5d, 0x26, 0x43, 0xcf, 0x2e, 0x93, 0xa1, 0x1f, 0x2f, 0x93, 0xa1, 0xfd, 0x31, 0xbe, 0xf4, 0xeb,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x86, 0xc3, 0x7f, 0x3e, 0x7d, 0x09, 0x00, 0x00,
}

func (this *RateLimitSettingsKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.RateLimitSettingsKey{")
	s = append(s, "ApiEndpointType: "+fmt.Sprintf("%#v", this.ApiEndpointType)+",\n")
	s = append(s, "ApiActionType: "+fmt.Sprintf("%#v", this.ApiActionType)+",\n")
	s = append(s, "RateLimitTarget: "+fmt.Sprintf("%#v", this.RateLimitTarget)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRatelimit(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RateLimitSettingsApiClient is the client API for RateLimitSettingsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitSettingsApiClient interface {
	// Update RateLimit settings for an API endpoint type
	UpdateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Delete RateLimit settings for an API endpoint type (ie. no rate limiting)
	DeleteRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Reset RateLimit settings to default for an API endpoint type
	ResetRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Show RateLimit settings for an API endpoint type
	ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error)
}

type rateLimitSettingsApiClient struct {
	cc *grpc.ClientConn
}

func NewRateLimitSettingsApiClient(cc *grpc.ClientConn) RateLimitSettingsApiClient {
	return &rateLimitSettingsApiClient{cc}
}

func (c *rateLimitSettingsApiClient) UpdateRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/UpdateRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) DeleteRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/DeleteRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) ResetRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/ResetRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitSettingsApi_serviceDesc.Streams[0], "/edgeproto.RateLimitSettingsApi/ShowRateLimitSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitSettingsApiShowRateLimitSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimitSettingsApi_ShowRateLimitSettingsClient interface {
	Recv() (*RateLimitSettings, error)
	grpc.ClientStream
}

type rateLimitSettingsApiShowRateLimitSettingsClient struct {
	grpc.ClientStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsClient) Recv() (*RateLimitSettings, error) {
	m := new(RateLimitSettings)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RateLimitSettingsApiServer is the server API for RateLimitSettingsApi service.
type RateLimitSettingsApiServer interface {
	// Update RateLimit settings for an API endpoint type
	UpdateRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Delete RateLimit settings for an API endpoint type (ie. no rate limiting)
	DeleteRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Reset RateLimit settings to default for an API endpoint type
	ResetRateLimitSettings(context.Context, *RateLimitSettings) (*Result, error)
	// Show RateLimit settings for an API endpoint type
	ShowRateLimitSettings(*RateLimitSettings, RateLimitSettingsApi_ShowRateLimitSettingsServer) error
}

// UnimplementedRateLimitSettingsApiServer can be embedded to have forward compatible implementations.
type UnimplementedRateLimitSettingsApiServer struct {
}

func (*UnimplementedRateLimitSettingsApiServer) UpdateRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) DeleteRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) ResetRateLimitSettings(ctx context.Context, req *RateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) ShowRateLimitSettings(req *RateLimitSettings, srv RateLimitSettingsApi_ShowRateLimitSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowRateLimitSettings not implemented")
}

func RegisterRateLimitSettingsApiServer(s *grpc.Server, srv RateLimitSettingsApiServer) {
	s.RegisterService(&_RateLimitSettingsApi_serviceDesc, srv)
}

func _RateLimitSettingsApi_UpdateRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).UpdateRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/UpdateRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).UpdateRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_DeleteRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).DeleteRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/DeleteRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).DeleteRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_ResetRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).ResetRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/ResetRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).ResetRateLimitSettings(ctx, req.(*RateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_ShowRateLimitSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RateLimitSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimitSettingsApiServer).ShowRateLimitSettings(m, &rateLimitSettingsApiShowRateLimitSettingsServer{stream})
}

type RateLimitSettingsApi_ShowRateLimitSettingsServer interface {
	Send(*RateLimitSettings) error
	grpc.ServerStream
}

type rateLimitSettingsApiShowRateLimitSettingsServer struct {
	grpc.ServerStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsServer) Send(m *RateLimitSettings) error {
	return x.ServerStream.SendMsg(m)
}

var _RateLimitSettingsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.RateLimitSettingsApi",
	HandlerType: (*RateLimitSettingsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRateLimitSettings",
			Handler:    _RateLimitSettingsApi_UpdateRateLimitSettings_Handler,
		},
		{
			MethodName: "DeleteRateLimitSettings",
			Handler:    _RateLimitSettingsApi_DeleteRateLimitSettings_Handler,
		},
		{
			MethodName: "ResetRateLimitSettings",
			Handler:    _RateLimitSettingsApi_ResetRateLimitSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowRateLimitSettings",
			Handler:       _RateLimitSettingsApi_ShowRateLimitSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ratelimit.proto",
}

func (m *RateLimitSettingsKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitTarget != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.RateLimitTarget))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiActionType != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.ApiActionType))
		i--
		dAtA[i] = 0x10
	}
	if m.ApiEndpointType != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.ApiEndpointType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRequestsPerHour != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxRequestsPerHour))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxRequestsPerMinute != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxRequestsPerMinute))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxRequestsPerSecond != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxRequestsPerSecond))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxReqsAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxReqsAlgorithm))
		i--
		dAtA[i] = 0x38
	}
	if m.BurstSize != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.BurstSize))
		i--
		dAtA[i] = 0x30
	}
	if m.ReqsPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReqsPerSecond))))
		i--
		dAtA[i] = 0x29
	}
	if m.FlowAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.FlowAlgorithm))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettingsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatelimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatelimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatelimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimitSettingsKey) Matches(o *RateLimitSettingsKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.ApiEndpointType != 0 {
		if o.ApiEndpointType != m.ApiEndpointType {
			return false
		}
	}
	if !opts.Filter || o.ApiActionType != 0 {
		if o.ApiActionType != m.ApiActionType {
			return false
		}
	}
	if !opts.Filter || o.RateLimitTarget != 0 {
		if o.RateLimitTarget != m.RateLimitTarget {
			return false
		}
	}
	return true
}

func (m *RateLimitSettingsKey) CopyInFields(src *RateLimitSettingsKey) int {
	changed := 0
	if m.ApiEndpointType != src.ApiEndpointType {
		m.ApiEndpointType = src.ApiEndpointType
		changed++
	}
	if m.ApiActionType != src.ApiActionType {
		m.ApiActionType = src.ApiActionType
		changed++
	}
	if m.RateLimitTarget != src.RateLimitTarget {
		m.RateLimitTarget = src.RateLimitTarget
		changed++
	}
	return changed
}

func (m *RateLimitSettingsKey) DeepCopyIn(src *RateLimitSettingsKey) {
	m.ApiEndpointType = src.ApiEndpointType
	m.ApiActionType = src.ApiActionType
	m.RateLimitTarget = src.RateLimitTarget
}

func (m *RateLimitSettingsKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal RateLimitSettingsKey key string", "obj", m)
	}
	return string(key)
}

func RateLimitSettingsKeyStringParse(str string, key *RateLimitSettingsKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal RateLimitSettingsKey key string", "str", str)
	}
}

func (m *RateLimitSettingsKey) NotFoundError() error {
	return fmt.Errorf("RateLimitSettings key %s not found", m.GetKeyString())
}

func (m *RateLimitSettingsKey) ExistsError() error {
	return fmt.Errorf("RateLimitSettings key %s already exists", m.GetKeyString())
}

var RateLimitSettingsKeyTagApiEndpointType = "apiendpointtype"
var RateLimitSettingsKeyTagApiActionType = "apiactiontype"
var RateLimitSettingsKeyTagRateLimitTarget = "ratelimittarget"

func (m *RateLimitSettingsKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apiendpointtype"] = ApiEndpointType_name[int32(m.ApiEndpointType)]
	tags["apiactiontype"] = ApiActionType_name[int32(m.ApiActionType)]
	tags["ratelimittarget"] = RateLimitTarget_name[int32(m.RateLimitTarget)]
	return tags
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsKey) ValidateEnums() error {
	if _, ok := ApiEndpointType_name[int32(m.ApiEndpointType)]; !ok {
		return errors.New("invalid ApiEndpointType")
	}
	if _, ok := ApiActionType_name[int32(m.ApiActionType)]; !ok {
		return errors.New("invalid ApiActionType")
	}
	if _, ok := RateLimitTarget_name[int32(m.RateLimitTarget)]; !ok {
		return errors.New("invalid RateLimitTarget")
	}
	return nil
}

func (m *RateLimitSettings) Matches(o *RateLimitSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.FlowAlgorithm != 0 {
		if o.FlowAlgorithm != m.FlowAlgorithm {
			return false
		}
	}
	if !opts.Filter || o.ReqsPerSecond != 0 {
		if o.ReqsPerSecond != m.ReqsPerSecond {
			return false
		}
	}
	if !opts.Filter || o.BurstSize != 0 {
		if o.BurstSize != m.BurstSize {
			return false
		}
	}
	if !opts.Filter || o.MaxReqsAlgorithm != 0 {
		if o.MaxReqsAlgorithm != m.MaxReqsAlgorithm {
			return false
		}
	}
	if !opts.Filter || o.MaxRequestsPerSecond != 0 {
		if o.MaxRequestsPerSecond != m.MaxRequestsPerSecond {
			return false
		}
	}
	if !opts.Filter || o.MaxRequestsPerMinute != 0 {
		if o.MaxRequestsPerMinute != m.MaxRequestsPerMinute {
			return false
		}
	}
	if !opts.Filter || o.MaxRequestsPerHour != 0 {
		if o.MaxRequestsPerHour != m.MaxRequestsPerHour {
			return false
		}
	}
	return true
}

const RateLimitSettingsFieldKey = "2"
const RateLimitSettingsFieldKeyApiEndpointType = "2.1"
const RateLimitSettingsFieldKeyApiActionType = "2.2"
const RateLimitSettingsFieldKeyRateLimitTarget = "2.3"
const RateLimitSettingsFieldFlowAlgorithm = "4"
const RateLimitSettingsFieldReqsPerSecond = "5"
const RateLimitSettingsFieldBurstSize = "6"
const RateLimitSettingsFieldMaxReqsAlgorithm = "7"
const RateLimitSettingsFieldMaxRequestsPerSecond = "8"
const RateLimitSettingsFieldMaxRequestsPerMinute = "9"
const RateLimitSettingsFieldMaxRequestsPerHour = "10"

var RateLimitSettingsAllFields = []string{
	RateLimitSettingsFieldKeyApiEndpointType,
	RateLimitSettingsFieldKeyApiActionType,
	RateLimitSettingsFieldKeyRateLimitTarget,
	RateLimitSettingsFieldFlowAlgorithm,
	RateLimitSettingsFieldReqsPerSecond,
	RateLimitSettingsFieldBurstSize,
	RateLimitSettingsFieldMaxReqsAlgorithm,
	RateLimitSettingsFieldMaxRequestsPerSecond,
	RateLimitSettingsFieldMaxRequestsPerMinute,
	RateLimitSettingsFieldMaxRequestsPerHour,
}

var RateLimitSettingsAllFieldsMap = map[string]struct{}{
	RateLimitSettingsFieldKeyApiEndpointType:   struct{}{},
	RateLimitSettingsFieldKeyApiActionType:     struct{}{},
	RateLimitSettingsFieldKeyRateLimitTarget:   struct{}{},
	RateLimitSettingsFieldFlowAlgorithm:        struct{}{},
	RateLimitSettingsFieldReqsPerSecond:        struct{}{},
	RateLimitSettingsFieldBurstSize:            struct{}{},
	RateLimitSettingsFieldMaxReqsAlgorithm:     struct{}{},
	RateLimitSettingsFieldMaxRequestsPerSecond: struct{}{},
	RateLimitSettingsFieldMaxRequestsPerMinute: struct{}{},
	RateLimitSettingsFieldMaxRequestsPerHour:   struct{}{},
}

var RateLimitSettingsAllFieldsStringMap = map[string]string{
	RateLimitSettingsFieldKeyApiEndpointType:   "Key Api Endpoint Type",
	RateLimitSettingsFieldKeyApiActionType:     "Key Api Action Type",
	RateLimitSettingsFieldKeyRateLimitTarget:   "Key Rate Limit Target",
	RateLimitSettingsFieldFlowAlgorithm:        "Flow Algorithm",
	RateLimitSettingsFieldReqsPerSecond:        "Reqs Per Second",
	RateLimitSettingsFieldBurstSize:            "Burst Size",
	RateLimitSettingsFieldMaxReqsAlgorithm:     "Max Reqs Algorithm",
	RateLimitSettingsFieldMaxRequestsPerSecond: "Max Requests Per Second",
	RateLimitSettingsFieldMaxRequestsPerMinute: "Max Requests Per Minute",
	RateLimitSettingsFieldMaxRequestsPerHour:   "Max Requests Per Hour",
}

func (m *RateLimitSettings) IsKeyField(s string) bool {
	return strings.HasPrefix(s, RateLimitSettingsFieldKey+".") || s == RateLimitSettingsFieldKey
}

func (m *RateLimitSettings) DiffFields(o *RateLimitSettings, fields map[string]struct{}) {
	if m.Key.ApiEndpointType != o.Key.ApiEndpointType {
		fields[RateLimitSettingsFieldKeyApiEndpointType] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.ApiActionType != o.Key.ApiActionType {
		fields[RateLimitSettingsFieldKeyApiActionType] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitTarget != o.Key.RateLimitTarget {
		fields[RateLimitSettingsFieldKeyRateLimitTarget] = struct{}{}
		fields[RateLimitSettingsFieldKey] = struct{}{}
	}
	if m.FlowAlgorithm != o.FlowAlgorithm {
		fields[RateLimitSettingsFieldFlowAlgorithm] = struct{}{}
	}
	if m.ReqsPerSecond != o.ReqsPerSecond {
		fields[RateLimitSettingsFieldReqsPerSecond] = struct{}{}
	}
	if m.BurstSize != o.BurstSize {
		fields[RateLimitSettingsFieldBurstSize] = struct{}{}
	}
	if m.MaxReqsAlgorithm != o.MaxReqsAlgorithm {
		fields[RateLimitSettingsFieldMaxReqsAlgorithm] = struct{}{}
	}
	if m.MaxRequestsPerSecond != o.MaxRequestsPerSecond {
		fields[RateLimitSettingsFieldMaxRequestsPerSecond] = struct{}{}
	}
	if m.MaxRequestsPerMinute != o.MaxRequestsPerMinute {
		fields[RateLimitSettingsFieldMaxRequestsPerMinute] = struct{}{}
	}
	if m.MaxRequestsPerHour != o.MaxRequestsPerHour {
		fields[RateLimitSettingsFieldMaxRequestsPerHour] = struct{}{}
	}
}

var UpdateRateLimitSettingsFieldsMap = map[string]struct{}{
	RateLimitSettingsFieldFlowAlgorithm:        struct{}{},
	RateLimitSettingsFieldReqsPerSecond:        struct{}{},
	RateLimitSettingsFieldBurstSize:            struct{}{},
	RateLimitSettingsFieldMaxReqsAlgorithm:     struct{}{},
	RateLimitSettingsFieldMaxRequestsPerSecond: struct{}{},
	RateLimitSettingsFieldMaxRequestsPerMinute: struct{}{},
	RateLimitSettingsFieldMaxRequestsPerHour:   struct{}{},
}

func (m *RateLimitSettings) ValidateUpdateFields() error {
	if m.Fields == nil {
		return fmt.Errorf("nothing specified to update")
	}
	fmap := MakeFieldMap(m.Fields)
	badFieldStrs := []string{}
	for field, _ := range fmap {
		if m.IsKeyField(field) {
			continue
		}
		if _, ok := UpdateRateLimitSettingsFieldsMap[field]; !ok {
			if _, ok := RateLimitSettingsAllFieldsStringMap[field]; !ok {
				continue
			}
			badFieldStrs = append(badFieldStrs, RateLimitSettingsAllFieldsStringMap[field])
		}
	}
	if len(badFieldStrs) > 0 {
		return fmt.Errorf("specified field(s) %s cannot be modified", strings.Join(badFieldStrs, ","))
	}
	return nil
}

func (m *RateLimitSettings) CopyInFields(src *RateLimitSettings) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.ApiEndpointType != src.Key.ApiEndpointType {
				m.Key.ApiEndpointType = src.Key.ApiEndpointType
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if m.Key.ApiActionType != src.Key.ApiActionType {
				m.Key.ApiActionType = src.Key.ApiActionType
				changed++
			}
		}
		if _, set := fmap["2.3"]; set {
			if m.Key.RateLimitTarget != src.Key.RateLimitTarget {
				m.Key.RateLimitTarget = src.Key.RateLimitTarget
				changed++
			}
		}
	}
	if _, set := fmap["4"]; set {
		if m.FlowAlgorithm != src.FlowAlgorithm {
			m.FlowAlgorithm = src.FlowAlgorithm
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.ReqsPerSecond != src.ReqsPerSecond {
			m.ReqsPerSecond = src.ReqsPerSecond
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.BurstSize != src.BurstSize {
			m.BurstSize = src.BurstSize
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.MaxReqsAlgorithm != src.MaxReqsAlgorithm {
			m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.MaxRequestsPerSecond != src.MaxRequestsPerSecond {
			m.MaxRequestsPerSecond = src.MaxRequestsPerSecond
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if m.MaxRequestsPerMinute != src.MaxRequestsPerMinute {
			m.MaxRequestsPerMinute = src.MaxRequestsPerMinute
			changed++
		}
	}
	if _, set := fmap["10"]; set {
		if m.MaxRequestsPerHour != src.MaxRequestsPerHour {
			m.MaxRequestsPerHour = src.MaxRequestsPerHour
			changed++
		}
	}
	return changed
}

func (m *RateLimitSettings) DeepCopyIn(src *RateLimitSettings) {
	m.Key.DeepCopyIn(&src.Key)
	m.FlowAlgorithm = src.FlowAlgorithm
	m.ReqsPerSecond = src.ReqsPerSecond
	m.BurstSize = src.BurstSize
	m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
	m.MaxRequestsPerSecond = src.MaxRequestsPerSecond
	m.MaxRequestsPerMinute = src.MaxRequestsPerMinute
	m.MaxRequestsPerHour = src.MaxRequestsPerHour
}

func (s *RateLimitSettings) HasFields() bool {
	return true
}

type RateLimitSettingsStore struct {
	kvstore objstore.KVStore
}

func NewRateLimitSettingsStore(kvstore objstore.KVStore) RateLimitSettingsStore {
	return RateLimitSettingsStore{kvstore: kvstore}
}

func (s *RateLimitSettingsStore) Create(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(RateLimitSettingsAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Update(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur RateLimitSettings
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Put(ctx context.Context, m *RateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(RateLimitSettingsAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) Delete(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStore) LoadOne(key string) (*RateLimitSettings, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj RateLimitSettings
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse RateLimitSettings data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *RateLimitSettingsStore) STMGet(stm concurrency.STM, key *RateLimitSettingsKey, buf *RateLimitSettings) bool {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	valstr := stm.Get(keystr)
	if valstr == "" {
		return false
	}
	if buf != nil {
		err := json.Unmarshal([]byte(valstr), buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *RateLimitSettingsStore) STMPut(stm concurrency.STM, obj *RateLimitSettings, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("RateLimitSettings", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("RateLimitSettings json marsahal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *RateLimitSettingsStore) STMDel(stm concurrency.STM, key *RateLimitSettingsKey) {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	stm.Del(keystr)
}

type RateLimitSettingsKeyWatcher struct {
	cb func(ctx context.Context)
}

type RateLimitSettingsCacheData struct {
	Obj    *RateLimitSettings
	ModRev int64
}

// RateLimitSettingsCache caches RateLimitSettings objects in memory in a hash table
// and keeps them in sync with the database.
type RateLimitSettingsCache struct {
	Objs          map[RateLimitSettingsKey]*RateLimitSettingsCacheData
	Mux           util.Mutex
	List          map[RateLimitSettingsKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)
	DeletedCbs    []func(ctx context.Context, old *RateLimitSettings)
	KeyWatchers   map[RateLimitSettingsKey][]*RateLimitSettingsKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *RateLimitSettingsKey)
	DeletedKeyCbs []func(ctx context.Context, key *RateLimitSettingsKey)
}

func NewRateLimitSettingsCache() *RateLimitSettingsCache {
	cache := RateLimitSettingsCache{}
	InitRateLimitSettingsCache(&cache)
	return &cache
}

func InitRateLimitSettingsCache(cache *RateLimitSettingsCache) {
	cache.Objs = make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	cache.KeyWatchers = make(map[RateLimitSettingsKey][]*RateLimitSettingsKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *RateLimitSettingsCache) GetTypeString() string {
	return "RateLimitSettings"
}

func (c *RateLimitSettingsCache) Get(key *RateLimitSettingsKey, valbuf *RateLimitSettings) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *RateLimitSettingsCache) GetWithRev(key *RateLimitSettingsKey, valbuf *RateLimitSettings, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *RateLimitSettingsCache) HasKey(key *RateLimitSettingsKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *RateLimitSettingsCache) GetAllKeys(ctx context.Context, cb func(key *RateLimitSettingsKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *RateLimitSettingsCache) Update(ctx context.Context, in *RateLimitSettings, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *RateLimitSettings) (*RateLimitSettings, bool) {
		return in, true
	})
}

func (c *RateLimitSettingsCache) UpdateModFunc(ctx context.Context, key *RateLimitSettingsKey, modRev int64, modFunc func(old *RateLimitSettings) (new *RateLimitSettings, changed bool)) {
	c.Mux.Lock()
	var old *RateLimitSettings
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &RateLimitSettings{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &RateLimitSettings{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &RateLimitSettingsCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *RateLimitSettingsCache) Delete(ctx context.Context, in *RateLimitSettings, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *RateLimitSettings) bool {
		return true
	})
}

func (c *RateLimitSettingsCache) DeleteCondFunc(ctx context.Context, in *RateLimitSettings, modRev int64, condFunc func(old *RateLimitSettings) bool) {
	c.Mux.Lock()
	var old *RateLimitSettings
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *RateLimitSettingsCache) Prune(ctx context.Context, validKeys map[RateLimitSettingsKey]struct{}) {
	notify := make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *RateLimitSettingsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *RateLimitSettingsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *RateLimitSettingsCache) Show(filter *RateLimitSettings, cb func(ret *RateLimitSettings) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func RateLimitSettingsGenericNotifyCb(fn func(key *RateLimitSettingsKey, old *RateLimitSettings)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*RateLimitSettingsKey), obj.(*RateLimitSettings))
	}
}

func (c *RateLimitSettingsCache) SetNotifyCb(fn func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64){fn}
}

func (c *RateLimitSettingsCache) SetUpdatedCb(fn func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)) {
	c.UpdatedCbs = []func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings){fn}
}

func (c *RateLimitSettingsCache) SetDeletedCb(fn func(ctx context.Context, old *RateLimitSettings)) {
	c.DeletedCbs = []func(ctx context.Context, old *RateLimitSettings){fn}
}

func (c *RateLimitSettingsCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *RateLimitSettingsKey){fn}
}

func (c *RateLimitSettingsCache) SetDeletedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *RateLimitSettingsKey){fn}
}

func (c *RateLimitSettingsCache) AddUpdatedCb(fn func(ctx context.Context, old *RateLimitSettings, new *RateLimitSettings)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *RateLimitSettingsCache) AddDeletedCb(fn func(ctx context.Context, old *RateLimitSettings)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *RateLimitSettingsCache) AddNotifyCb(fn func(ctx context.Context, obj *RateLimitSettingsKey, old *RateLimitSettings, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *RateLimitSettingsCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *RateLimitSettingsCache) AddDeletedKeyCb(fn func(ctx context.Context, key *RateLimitSettingsKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *RateLimitSettingsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *RateLimitSettingsCache) WatchKey(key *RateLimitSettingsKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*RateLimitSettingsKeyWatcher, 0)
	}
	watcher := RateLimitSettingsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching RateLimitSettings", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *RateLimitSettingsCache) TriggerKeyWatchers(ctx context.Context, key *RateLimitSettingsKey) {
	watchers := make([]*RateLimitSettingsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *RateLimitSettingsCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := RateLimitSettings{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse RateLimitSettings data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *RateLimitSettingsCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := RateLimitSettings{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	RateLimitSettingsKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *RateLimitSettingsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[RateLimitSettingsKey]struct{})
}

func (c *RateLimitSettingsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[RateLimitSettingsKey]*RateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *RateLimitSettingsCache) UsesOrg(org string) bool {
	return false
}

func (m *RateLimitSettings) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *RateLimitSettings) GetKey() *RateLimitSettingsKey {
	return &m.Key
}

func (m *RateLimitSettings) GetKeyVal() RateLimitSettingsKey {
	return m.Key
}

func (m *RateLimitSettings) SetKey(key *RateLimitSettingsKey) {
	m.Key = *key
}

func CmpSortRateLimitSettings(a RateLimitSettings, b RateLimitSettings) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *RateLimitSettings) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if _, ok := FlowRateLimitAlgorithm_name[int32(m.FlowAlgorithm)]; !ok {
		return errors.New("invalid FlowAlgorithm")
	}
	if _, ok := MaxReqsRateLimitAlgorithm_name[int32(m.MaxReqsAlgorithm)]; !ok {
		return errors.New("invalid MaxReqsAlgorithm")
	}
	return nil
}

func (m *RateLimitSettingsData) DeepCopyIn(src *RateLimitSettingsData) {
	if src.Settings != nil {
		m.Settings = make([]RateLimitSettings, len(src.Settings), len(src.Settings))
		for ii, s := range src.Settings {
			m.Settings[ii].DeepCopyIn(&s)
		}
	} else {
		m.Settings = nil
	}
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsData) ValidateEnums() error {
	for _, e := range m.Settings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

var FlowRateLimitAlgorithmStrings = []string{
	"UNKNOWN_FLOW_ALGORITHM",
	"TOKEN_BUCKET_ALGORITHM",
	"LEAKY_BUCKET_ALGORITHM",
	"NO_FLOW_ALGORITHM",
}

const (
	FlowRateLimitAlgorithmUNKNOWN_FLOW_ALGORITHM uint64 = 1 << 0
	FlowRateLimitAlgorithmTOKEN_BUCKET_ALGORITHM uint64 = 1 << 1
	FlowRateLimitAlgorithmLEAKY_BUCKET_ALGORITHM uint64 = 1 << 2
	FlowRateLimitAlgorithmNO_FLOW_ALGORITHM      uint64 = 1 << 3
)

var FlowRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_FLOW_ALGORITHM -> UnknownFlowAlgorithm
	0: "UnknownFlowAlgorithm",
	// TOKEN_BUCKET_ALGORITHM -> TokenBucketAlgorithm
	1: "TokenBucketAlgorithm",
	// LEAKY_BUCKET_ALGORITHM -> LeakyBucketAlgorithm
	2: "LeakyBucketAlgorithm",
	// NO_FLOW_ALGORITHM -> NoFlowAlgorithm
	3: "NoFlowAlgorithm",
}
var FlowRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownFlowAlgorithm": 0,
	"TokenBucketAlgorithm": 1,
	"LeakyBucketAlgorithm": 2,
	"NoFlowAlgorithm":      3,
}

func (e *FlowRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = FlowRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = FlowRateLimitAlgorithm(val)
	return nil
}

func (e FlowRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	return proto.EnumName(FlowRateLimitAlgorithm_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *FlowRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = FlowRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var MaxReqsRateLimitAlgorithmStrings = []string{
	"UNKNOWN_MAX_REQS_ALGORITHM",
	"FIXED_WINDOW_ALGORITHM",
	"ROLLING_WINDOW_ALGORITHM",
	"NO_MAX_REQS_ALGORITHM",
}

const (
	MaxReqsRateLimitAlgorithmUNKNOWN_MAX_REQS_ALGORITHM uint64 = 1 << 0
	MaxReqsRateLimitAlgorithmFIXED_WINDOW_ALGORITHM     uint64 = 1 << 1
	MaxReqsRateLimitAlgorithmROLLING_WINDOW_ALGORITHM   uint64 = 1 << 2
	MaxReqsRateLimitAlgorithmNO_MAX_REQS_ALGORITHM      uint64 = 1 << 3
)

var MaxReqsRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_MAX_REQS_ALGORITHM -> UnknownMaxReqsAlgorithm
	0: "UnknownMaxReqsAlgorithm",
	// FIXED_WINDOW_ALGORITHM -> FixedWindowAlgorithm
	1: "FixedWindowAlgorithm",
	// ROLLING_WINDOW_ALGORITHM -> RollingWindowAlgorithm
	2: "RollingWindowAlgorithm",
	// NO_MAX_REQS_ALGORITHM -> NoMaxReqsAlgorithm
	3: "NoMaxReqsAlgorithm",
}
var MaxReqsRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownMaxReqsAlgorithm": 0,
	"FixedWindowAlgorithm":    1,
	"RollingWindowAlgorithm":  2,
	"NoMaxReqsAlgorithm":      3,
}

func (e *MaxReqsRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = MaxReqsRateLimitAlgorithm(val)
	return nil
}

func (e MaxReqsRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	return proto.EnumName(MaxReqsRateLimitAlgorithm_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *MaxReqsRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var ApiEndpointTypeStrings = []string{
	"UNKNOWN_API_ENDPOINT_TYPE",
	"CONTROLLER",
	"DME",
}

const (
	ApiEndpointTypeUNKNOWN_API_ENDPOINT_TYPE uint64 = 1 << 0
	ApiEndpointTypeCONTROLLER                uint64 = 1 << 1
	ApiEndpointTypeDME                       uint64 = 1 << 2
)

var ApiEndpointType_CamelName = map[int32]string{
	// UNKNOWN_API_ENDPOINT_TYPE -> UnknownApiEndpointType
	0: "UnknownApiEndpointType",
	// CONTROLLER -> Controller
	1: "Controller",
	// DME -> Dme
	2: "Dme",
}
var ApiEndpointType_CamelValue = map[string]int32{
	"UnknownApiEndpointType": 0,
	"Controller":             1,
	"Dme":                    2,
}

func (e *ApiEndpointType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ApiEndpointType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ApiEndpointType(val)
	return nil
}

func (e ApiEndpointType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(ApiEndpointType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *ApiEndpointType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ApiEndpointType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = ApiEndpointType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = ApiEndpointType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var ApiActionTypeStrings = []string{
	"UNKNOWN_ACTION",
	"CREATE_ACTION",
	"DELETE_ACTION",
	"UPDATE_ACTION",
	"SHOW_ACTION",
	"DEFAULT_ACTION",
}

const (
	ApiActionTypeUNKNOWN_ACTION uint64 = 1 << 0
	ApiActionTypeCREATE_ACTION  uint64 = 1 << 1
	ApiActionTypeDELETE_ACTION  uint64 = 1 << 2
	ApiActionTypeUPDATE_ACTION  uint64 = 1 << 3
	ApiActionTypeSHOW_ACTION    uint64 = 1 << 4
	ApiActionTypeDEFAULT_ACTION uint64 = 1 << 5
)

var ApiActionType_CamelName = map[int32]string{
	// UNKNOWN_ACTION -> UnknownAction
	0: "UnknownAction",
	// CREATE_ACTION -> CreateAction
	1: "CreateAction",
	// DELETE_ACTION -> DeleteAction
	2: "DeleteAction",
	// UPDATE_ACTION -> UpdateAction
	3: "UpdateAction",
	// SHOW_ACTION -> ShowAction
	4: "ShowAction",
	// DEFAULT_ACTION -> DefaultAction
	5: "DefaultAction",
}
var ApiActionType_CamelValue = map[string]int32{
	"UnknownAction": 0,
	"CreateAction":  1,
	"DeleteAction":  2,
	"UpdateAction":  3,
	"ShowAction":    4,
	"DefaultAction": 5,
}

func (e *ApiActionType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ApiActionType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ApiActionType_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = ApiActionType(val)
	return nil
}

func (e ApiActionType) MarshalYAML() (interface{}, error) {
	return proto.EnumName(ApiActionType_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *ApiActionType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ApiActionType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ApiActionType_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = ApiActionType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = ApiActionType(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var RateLimitTargetStrings = []string{
	"UNKNOWN_TARGET",
	"ALL_REQUESTS",
	"PER_IP",
	"PER_USER",
	"PER_ORG",
}

const (
	RateLimitTargetUNKNOWN_TARGET uint64 = 1 << 0
	RateLimitTargetALL_REQUESTS   uint64 = 1 << 1
	RateLimitTargetPER_IP         uint64 = 1 << 2
	RateLimitTargetPER_USER       uint64 = 1 << 3
	RateLimitTargetPER_ORG        uint64 = 1 << 4
)

var RateLimitTarget_CamelName = map[int32]string{
	// UNKNOWN_TARGET -> UnknownTarget
	0: "UnknownTarget",
	// ALL_REQUESTS -> AllRequests
	1: "AllRequests",
	// PER_IP -> PerIp
	2: "PerIp",
	// PER_USER -> PerUser
	3: "PerUser",
	// PER_ORG -> PerOrg
	4: "PerOrg",
}
var RateLimitTarget_CamelValue = map[string]int32{
	"UnknownTarget": 0,
	"AllRequests":   1,
	"PerIp":         2,
	"PerUser":       3,
	"PerOrg":        4,
}

func (e *RateLimitTarget) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = RateLimitTarget_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = RateLimitTarget(val)
	return nil
}

func (e RateLimitTarget) MarshalYAML() (interface{}, error) {
	return proto.EnumName(RateLimitTarget_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *RateLimitTarget) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = RateLimitTarget_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = RateLimitTarget(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = RateLimitTarget(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *RateLimitSettings) IsValidArgsForUpdateRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettings) IsValidArgsForDeleteRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettings) IsValidArgsForResetRateLimitSettings() error {
	return nil
}

func (m *RateLimitSettingsKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpointType != 0 {
		n += 1 + sovRatelimit(uint64(m.ApiEndpointType))
	}
	if m.ApiActionType != 0 {
		n += 1 + sovRatelimit(uint64(m.ApiActionType))
	}
	if m.RateLimitTarget != 0 {
		n += 1 + sovRatelimit(uint64(m.RateLimitTarget))
	}
	return n
}

func (m *RateLimitSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	if m.FlowAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.FlowAlgorithm))
	}
	if m.ReqsPerSecond != 0 {
		n += 9
	}
	if m.BurstSize != 0 {
		n += 1 + sovRatelimit(uint64(m.BurstSize))
	}
	if m.MaxReqsAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxReqsAlgorithm))
	}
	if m.MaxRequestsPerSecond != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxRequestsPerSecond))
	}
	if m.MaxRequestsPerMinute != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxRequestsPerMinute))
	}
	if m.MaxRequestsPerHour != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxRequestsPerHour))
	}
	return n
}

func (m *RateLimitSettingsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	return n
}

func sovRatelimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatelimit(x uint64) (n int) {
	return sovRatelimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimitSettingsKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointType", wireType)
			}
			m.ApiEndpointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiEndpointType |= ApiEndpointType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiActionType", wireType)
			}
			m.ApiActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiActionType |= ApiActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitTarget", wireType)
			}
			m.RateLimitTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitTarget |= RateLimitTarget(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAlgorithm", wireType)
			}
			m.FlowAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAlgorithm |= FlowRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqsPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReqsPerSecond = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsAlgorithm", wireType)
			}
			m.MaxReqsAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReqsAlgorithm |= MaxReqsRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestsPerSecond", wireType)
			}
			m.MaxRequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestsPerSecond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestsPerMinute", wireType)
			}
			m.MaxRequestsPerMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestsPerMinute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestsPerHour", wireType)
			}
			m.MaxRequestsPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestsPerHour |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettingsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, RateLimitSettings{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatelimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatelimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatelimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatelimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatelimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatelimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatelimit = fmt.Errorf("proto: unexpected end of group")
)
