// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package edgeproto

import (
	context "context"
	encoding_binary "encoding/binary"
	"encoding/json"
	"errors"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/log"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/mobiledgex/edge-cloud/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	"strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApiEndpointType int32

const (
	ApiEndpointType_UNKNOWN_API_ENDPOINT_TYPE ApiEndpointType = 0
	ApiEndpointType_DME                       ApiEndpointType = 1
)

var ApiEndpointType_name = map[int32]string{
	0: "UNKNOWN_API_ENDPOINT_TYPE",
	1: "DME",
}

var ApiEndpointType_value = map[string]int32{
	"UNKNOWN_API_ENDPOINT_TYPE": 0,
	"DME":                       1,
}

func (x ApiEndpointType) String() string {
	return proto.EnumName(ApiEndpointType_name, int32(x))
}

func (ApiEndpointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}

type RateLimitTarget int32

const (
	RateLimitTarget_UNKNOWN_TARGET RateLimitTarget = 0
	RateLimitTarget_ALL_REQUESTS   RateLimitTarget = 1
	RateLimitTarget_PER_IP         RateLimitTarget = 2
	RateLimitTarget_PER_USER       RateLimitTarget = 3
)

var RateLimitTarget_name = map[int32]string{
	0: "UNKNOWN_TARGET",
	1: "ALL_REQUESTS",
	2: "PER_IP",
	3: "PER_USER",
}

var RateLimitTarget_value = map[string]int32{
	"UNKNOWN_TARGET": 0,
	"ALL_REQUESTS":   1,
	"PER_IP":         2,
	"PER_USER":       3,
}

func (x RateLimitTarget) String() string {
	return proto.EnumName(RateLimitTarget_name, int32(x))
}

func (RateLimitTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}

type FlowRateLimitAlgorithm int32

const (
	FlowRateLimitAlgorithm_UNKNOWN_FLOW_ALGORITHM FlowRateLimitAlgorithm = 0
	FlowRateLimitAlgorithm_TOKEN_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 1
	FlowRateLimitAlgorithm_LEAKY_BUCKET_ALGORITHM FlowRateLimitAlgorithm = 2
)

var FlowRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_FLOW_ALGORITHM",
	1: "TOKEN_BUCKET_ALGORITHM",
	2: "LEAKY_BUCKET_ALGORITHM",
}

var FlowRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_FLOW_ALGORITHM": 0,
	"TOKEN_BUCKET_ALGORITHM": 1,
	"LEAKY_BUCKET_ALGORITHM": 2,
}

func (x FlowRateLimitAlgorithm) String() string {
	return proto.EnumName(FlowRateLimitAlgorithm_name, int32(x))
}

func (FlowRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}

type MaxReqsRateLimitAlgorithm int32

const (
	MaxReqsRateLimitAlgorithm_UNKNOWN_MAX_REQS_ALGORITHM MaxReqsRateLimitAlgorithm = 0
	MaxReqsRateLimitAlgorithm_FIXED_WINDOW_ALGORITHM     MaxReqsRateLimitAlgorithm = 1
)

var MaxReqsRateLimitAlgorithm_name = map[int32]string{
	0: "UNKNOWN_MAX_REQS_ALGORITHM",
	1: "FIXED_WINDOW_ALGORITHM",
}

var MaxReqsRateLimitAlgorithm_value = map[string]int32{
	"UNKNOWN_MAX_REQS_ALGORITHM": 0,
	"FIXED_WINDOW_ALGORITHM":     1,
}

func (x MaxReqsRateLimitAlgorithm) String() string {
	return proto.EnumName(MaxReqsRateLimitAlgorithm_name, int32(x))
}

func (MaxReqsRateLimitAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{3}
}

type FlowSettings struct {
	// Flow Rate Limit algorithm
	FlowAlgorithm FlowRateLimitAlgorithm `protobuf:"varint,1,opt,name=flow_algorithm,json=flowAlgorithm,proto3,enum=edgeproto.FlowRateLimitAlgorithm" json:"flow_algorithm,omitempty"`
	// Requests per second for flow rate limiting
	ReqsPerSecond float64 `protobuf:"fixed64,2,opt,name=reqs_per_second,json=reqsPerSecond,proto3" json:"reqs_per_second,omitempty"`
	// Burst size for flow rate limiting (required for TokenBucketAlgorithm)
	BurstSize int64 `protobuf:"varint,3,opt,name=burst_size,json=burstSize,proto3" json:"burst_size,omitempty"`
}

func (m *FlowSettings) Reset()         { *m = FlowSettings{} }
func (m *FlowSettings) String() string { return proto.CompactTextString(m) }
func (*FlowSettings) ProtoMessage()    {}
func (*FlowSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{0}
}
func (m *FlowSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowSettings.Merge(m, src)
}
func (m *FlowSettings) XXX_Size() int {
	return m.Size()
}
func (m *FlowSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowSettings.DiscardUnknown(m)
}

var xxx_messageInfo_FlowSettings proto.InternalMessageInfo

type FlowRateLimitSettingsKey struct {
	// Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)
	FlowSettingsName string `protobuf:"bytes,1,opt,name=flow_settings_name,json=flowSettingsName,proto3" json:"flow_settings_name,omitempty"`
	// Key that identifies api and rate limit target for settings
	RateLimitKey RateLimitSettingsKey `protobuf:"bytes,2,opt,name=rate_limit_key,json=rateLimitKey,proto3" json:"rate_limit_key"`
}

func (m *FlowRateLimitSettingsKey) Reset()         { *m = FlowRateLimitSettingsKey{} }
func (m *FlowRateLimitSettingsKey) String() string { return proto.CompactTextString(m) }
func (*FlowRateLimitSettingsKey) ProtoMessage()    {}
func (*FlowRateLimitSettingsKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{1}
}
func (m *FlowRateLimitSettingsKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRateLimitSettingsKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRateLimitSettingsKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRateLimitSettingsKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRateLimitSettingsKey.Merge(m, src)
}
func (m *FlowRateLimitSettingsKey) XXX_Size() int {
	return m.Size()
}
func (m *FlowRateLimitSettingsKey) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRateLimitSettingsKey.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRateLimitSettingsKey proto.InternalMessageInfo

type FlowRateLimitSettings struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key FlowRateLimitSettingsKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// FlowSettings
	Settings FlowSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings"`
}

func (m *FlowRateLimitSettings) Reset()         { *m = FlowRateLimitSettings{} }
func (m *FlowRateLimitSettings) String() string { return proto.CompactTextString(m) }
func (*FlowRateLimitSettings) ProtoMessage()    {}
func (*FlowRateLimitSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{2}
}
func (m *FlowRateLimitSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRateLimitSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRateLimitSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRateLimitSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRateLimitSettings.Merge(m, src)
}
func (m *FlowRateLimitSettings) XXX_Size() int {
	return m.Size()
}
func (m *FlowRateLimitSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRateLimitSettings.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRateLimitSettings proto.InternalMessageInfo

type MaxReqsSettings struct {
	// MaxReqs Rate Limit Algorithm
	MaxReqsAlgorithm MaxReqsRateLimitAlgorithm `protobuf:"varint,1,opt,name=max_reqs_algorithm,json=maxReqsAlgorithm,proto3,enum=edgeproto.MaxReqsRateLimitAlgorithm" json:"max_reqs_algorithm,omitempty"`
	// Maximum number of requests for the given Interval
	MaxRequests int64 `protobuf:"varint,2,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
	// Time interval
	Interval Duration `protobuf:"varint,3,opt,name=interval,proto3,casttype=Duration" json:"interval,omitempty"`
}

func (m *MaxReqsSettings) Reset()         { *m = MaxReqsSettings{} }
func (m *MaxReqsSettings) String() string { return proto.CompactTextString(m) }
func (*MaxReqsSettings) ProtoMessage()    {}
func (*MaxReqsSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{3}
}
func (m *MaxReqsSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxReqsSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxReqsSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxReqsSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxReqsSettings.Merge(m, src)
}
func (m *MaxReqsSettings) XXX_Size() int {
	return m.Size()
}
func (m *MaxReqsSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxReqsSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MaxReqsSettings proto.InternalMessageInfo

type MaxReqsRateLimitSettingsKey struct {
	// Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)
	MaxReqsSettingsName string `protobuf:"bytes,1,opt,name=max_reqs_settings_name,json=maxReqsSettingsName,proto3" json:"max_reqs_settings_name,omitempty"`
	// Key that identifies api and rate limit target for settings
	RateLimitKey RateLimitSettingsKey `protobuf:"bytes,2,opt,name=rate_limit_key,json=rateLimitKey,proto3" json:"rate_limit_key"`
}

func (m *MaxReqsRateLimitSettingsKey) Reset()         { *m = MaxReqsRateLimitSettingsKey{} }
func (m *MaxReqsRateLimitSettingsKey) String() string { return proto.CompactTextString(m) }
func (*MaxReqsRateLimitSettingsKey) ProtoMessage()    {}
func (*MaxReqsRateLimitSettingsKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{4}
}
func (m *MaxReqsRateLimitSettingsKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxReqsRateLimitSettingsKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxReqsRateLimitSettingsKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxReqsRateLimitSettingsKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxReqsRateLimitSettingsKey.Merge(m, src)
}
func (m *MaxReqsRateLimitSettingsKey) XXX_Size() int {
	return m.Size()
}
func (m *MaxReqsRateLimitSettingsKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxReqsRateLimitSettingsKey.DiscardUnknown(m)
}

var xxx_messageInfo_MaxReqsRateLimitSettingsKey proto.InternalMessageInfo

type MaxReqsRateLimitSettings struct {
	// Fields are used for the Update API to specify which fields to apply
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// required: true
	// Unique identifier key
	Key MaxReqsRateLimitSettingsKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// MaxReqsSettings
	Settings MaxReqsSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings"`
}

func (m *MaxReqsRateLimitSettings) Reset()         { *m = MaxReqsRateLimitSettings{} }
func (m *MaxReqsRateLimitSettings) String() string { return proto.CompactTextString(m) }
func (*MaxReqsRateLimitSettings) ProtoMessage()    {}
func (*MaxReqsRateLimitSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{5}
}
func (m *MaxReqsRateLimitSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxReqsRateLimitSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxReqsRateLimitSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxReqsRateLimitSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxReqsRateLimitSettings.Merge(m, src)
}
func (m *MaxReqsRateLimitSettings) XXX_Size() int {
	return m.Size()
}
func (m *MaxReqsRateLimitSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxReqsRateLimitSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MaxReqsRateLimitSettings proto.InternalMessageInfo

type RateLimitSettingsKey struct {
	// Name of API (eg. CreateApp or RegisterClient) (Use "Global" if not a specific API)
	ApiName string `protobuf:"bytes,1,opt,name=api_name,json=apiName,proto3" json:"api_name,omitempty"`
	// API Endpoint type
	ApiEndpointType ApiEndpointType `protobuf:"varint,2,opt,name=api_endpoint_type,json=apiEndpointType,proto3,enum=edgeproto.ApiEndpointType" json:"api_endpoint_type,omitempty"`
	// Target to rate limit
	RateLimitTarget RateLimitTarget `protobuf:"varint,3,opt,name=rate_limit_target,json=rateLimitTarget,proto3,enum=edgeproto.RateLimitTarget" json:"rate_limit_target,omitempty"`
}

func (m *RateLimitSettingsKey) Reset()         { *m = RateLimitSettingsKey{} }
func (m *RateLimitSettingsKey) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsKey) ProtoMessage()    {}
func (*RateLimitSettingsKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{6}
}
func (m *RateLimitSettingsKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsKey.Merge(m, src)
}
func (m *RateLimitSettingsKey) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsKey.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsKey proto.InternalMessageInfo

type RateLimitSettings struct {
	// Key that identifies api and rate limit target for settings
	Key RateLimitSettingsKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// Map of FlowSettings (key: FlowSettingsName, value: FlowSettings)
	FlowSettings map[string]*FlowSettings `protobuf:"bytes,2,rep,name=flow_settings,json=flowSettings,proto3" json:"flow_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of MaxReqsSettings (key: MaxReqsSettingsName, value: MaxReqsSettings)
	MaxReqsSettings map[string]*MaxReqsSettings `protobuf:"bytes,3,rep,name=max_reqs_settings,json=maxReqsSettings,proto3" json:"max_reqs_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RateLimitSettings) Reset()         { *m = RateLimitSettings{} }
func (m *RateLimitSettings) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettings) ProtoMessage()    {}
func (*RateLimitSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{7}
}
func (m *RateLimitSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettings.Merge(m, src)
}
func (m *RateLimitSettings) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettings.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettings proto.InternalMessageInfo

type RateLimitSettingsData struct {
	Settings []RateLimitSettings `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings"`
}

func (m *RateLimitSettingsData) Reset()         { *m = RateLimitSettingsData{} }
func (m *RateLimitSettingsData) String() string { return proto.CompactTextString(m) }
func (*RateLimitSettingsData) ProtoMessage()    {}
func (*RateLimitSettingsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c81fd649b00920f, []int{8}
}
func (m *RateLimitSettingsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitSettingsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitSettingsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitSettingsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitSettingsData.Merge(m, src)
}
func (m *RateLimitSettingsData) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitSettingsData) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitSettingsData.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitSettingsData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("edgeproto.ApiEndpointType", ApiEndpointType_name, ApiEndpointType_value)
	proto.RegisterEnum("edgeproto.RateLimitTarget", RateLimitTarget_name, RateLimitTarget_value)
	proto.RegisterEnum("edgeproto.FlowRateLimitAlgorithm", FlowRateLimitAlgorithm_name, FlowRateLimitAlgorithm_value)
	proto.RegisterEnum("edgeproto.MaxReqsRateLimitAlgorithm", MaxReqsRateLimitAlgorithm_name, MaxReqsRateLimitAlgorithm_value)
	proto.RegisterType((*FlowSettings)(nil), "edgeproto.FlowSettings")
	proto.RegisterType((*FlowRateLimitSettingsKey)(nil), "edgeproto.FlowRateLimitSettingsKey")
	proto.RegisterType((*FlowRateLimitSettings)(nil), "edgeproto.FlowRateLimitSettings")
	proto.RegisterType((*MaxReqsSettings)(nil), "edgeproto.MaxReqsSettings")
	proto.RegisterType((*MaxReqsRateLimitSettingsKey)(nil), "edgeproto.MaxReqsRateLimitSettingsKey")
	proto.RegisterType((*MaxReqsRateLimitSettings)(nil), "edgeproto.MaxReqsRateLimitSettings")
	proto.RegisterType((*RateLimitSettingsKey)(nil), "edgeproto.RateLimitSettingsKey")
	proto.RegisterType((*RateLimitSettings)(nil), "edgeproto.RateLimitSettings")
	proto.RegisterMapType((map[string]*FlowSettings)(nil), "edgeproto.RateLimitSettings.FlowSettingsEntry")
	proto.RegisterMapType((map[string]*MaxReqsSettings)(nil), "edgeproto.RateLimitSettings.MaxReqsSettingsEntry")
	proto.RegisterType((*RateLimitSettingsData)(nil), "edgeproto.RateLimitSettingsData")
}

func init() { proto.RegisterFile("ratelimit.proto", fileDescriptor_9c81fd649b00920f) }

var fileDescriptor_9c81fd649b00920f = []byte{
	// 1507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0xa1, 0x4d, 0x26, 0x6e, 0xec, 0x4c, 0xd3, 0x74, 0xeb, 0xb8, 0x8e, 0xbb, 0x85,
	0x2a, 0x8a, 0xdc, 0x38, 0x84, 0x03, 0x6d, 0xa0, 0x55, 0xed, 0x7a, 0xdb, 0x5a, 0xfe, 0x91, 0x74,
	0xed, 0x90, 0x56, 0x15, 0xac, 0x36, 0xf1, 0xd4, 0x59, 0x61, 0xef, 0x9a, 0xf5, 0xba, 0x89, 0x7b,
	0x42, 0x1c, 0xb8, 0x70, 0x68, 0x05, 0x42, 0xa0, 0x8a, 0x43, 0x2f, 0x15, 0xd7, 0x0a, 0x24, 0x04,
	0xf9, 0x03, 0x50, 0x2e, 0x48, 0x95, 0xb8, 0x20, 0x90, 0x2a, 0x48, 0x39, 0x40, 0x4f, 0x48, 0x4d,
	0x2c, 0xc4, 0x09, 0xcd, 0xec, 0x8f, 0xac, 0xd7, 0x6b, 0x27, 0x85, 0xa2, 0x72, 0x89, 0xc6, 0xf3,
	0xde, 0xbc, 0xf9, 0xde, 0x7b, 0xdf, 0x37, 0xfb, 0x02, 0x03, 0xaa, 0xa8, 0xe1, 0x8a, 0x54, 0x95,
	0xb4, 0xa9, 0x9a, 0xaa, 0x68, 0x0a, 0x1a, 0xc0, 0xa5, 0x32, 0xa6, 0xcb, 0x90, 0x5f, 0xc5, 0xf5,
	0x46, 0xc5, 0x30, 0x84, 0xc2, 0x65, 0x45, 0x29, 0x57, 0x70, 0x5c, 0xac, 0x49, 0x71, 0x51, 0x96,
	0x15, 0x4d, 0xd4, 0x24, 0x45, 0xae, 0x1b, 0xd6, 0x53, 0x65, 0x49, 0x5b, 0x69, 0x2c, 0x4d, 0x2d,
	0x2b, 0xd5, 0x78, 0x55, 0x59, 0x92, 0x2a, 0x24, 0xcc, 0x5a, 0x9c, 0xfc, 0x3d, 0xb9, 0x5c, 0x51,
	0x1a, 0xa5, 0x38, 0xf5, 0x2b, 0x63, 0xd9, 0x5a, 0x18, 0x27, 0x47, 0xca, 0x4a, 0x59, 0xa1, 0xcb,
	0x38, 0x59, 0xe9, 0xbb, 0xec, 0x3d, 0x00, 0xfd, 0x17, 0x2a, 0xca, 0x6a, 0x01, 0x6b, 0x9a, 0x24,
	0x97, 0xeb, 0xe8, 0x12, 0x1c, 0xba, 0x5e, 0x51, 0x56, 0x05, 0xb1, 0x52, 0x56, 0x54, 0x49, 0x5b,
	0xa9, 0x32, 0x20, 0x0a, 0x26, 0x86, 0x66, 0x8e, 0x4d, 0x59, 0x80, 0xa7, 0xc8, 0x01, 0x5e, 0xd4,
	0x70, 0x96, 0xe4, 0x93, 0x30, 0x1d, 0xf9, 0x03, 0xe4, 0xa0, 0xf5, 0x13, 0x9d, 0x80, 0x01, 0x15,
	0xbf, 0x53, 0x17, 0x6a, 0x58, 0x15, 0xea, 0x78, 0x59, 0x91, 0x4b, 0x8c, 0x37, 0x0a, 0x26, 0x00,
	0x7f, 0x80, 0x6c, 0xcf, 0x63, 0xb5, 0x40, 0x37, 0xd1, 0x51, 0x08, 0x97, 0x1a, 0x6a, 0x5d, 0x13,
	0xea, 0xd2, 0x4d, 0xcc, 0xf8, 0xa2, 0x60, 0xc2, 0xc7, 0x0f, 0xd0, 0x9d, 0x82, 0x74, 0x13, 0xcf,
	0xf6, 0xfd, 0xf6, 0x84, 0x01, 0xec, 0x37, 0x00, 0x32, 0x6d, 0xd7, 0x9a, 0x80, 0x33, 0xb8, 0x89,
	0x92, 0x10, 0x51, 0xcc, 0x75, 0x63, 0x4f, 0x90, 0xc5, 0x2a, 0xa6, 0xb8, 0x07, 0x92, 0x23, 0xeb,
	0x2d, 0x26, 0x48, 0xac, 0xa6, 0x91, 0xd8, 0x78, 0xba, 0x63, 0x86, 0xc8, 0x8b, 0x55, 0x8c, 0x32,
	0x70, 0x88, 0xb4, 0x48, 0xa0, 0x3d, 0x12, 0xde, 0xc6, 0x4d, 0x0a, 0x76, 0x70, 0x66, 0xdc, 0x96,
	0xb7, 0xdb, 0xe5, 0xc9, 0xbe, 0x8d, 0x87, 0xe3, 0x1e, 0xde, 0xaf, 0x9a, 0xb6, 0x0c, 0x6e, 0xce,
	0xfa, 0x09, 0xe6, 0x3f, 0x9f, 0x30, 0xe0, 0xfe, 0xdd, 0x71, 0xc0, 0xfe, 0xe8, 0x83, 0x87, 0x5c,
	0xb1, 0xa3, 0x51, 0xb8, 0xef, 0xba, 0x84, 0x2b, 0xa5, 0x3a, 0x03, 0xa2, 0xbe, 0x89, 0x01, 0xde,
	0xf8, 0x85, 0x5e, 0x83, 0xbe, 0x1d, 0x04, 0xc7, 0xbb, 0x55, 0xbe, 0x13, 0x05, 0x39, 0x85, 0x4e,
	0xc3, 0x7e, 0x33, 0x57, 0x5a, 0xcd, 0xc1, 0x99, 0xc3, 0x8e, 0x08, 0xe6, 0x41, 0xe3, 0x94, 0xe5,
	0x3e, 0x7b, 0xdf, 0x4b, 0x80, 0xff, 0xf1, 0x84, 0x01, 0xef, 0x6e, 0x31, 0xe0, 0xf6, 0x16, 0x03,
	0xee, 0x6f, 0x31, 0xe0, 0xce, 0x36, 0x73, 0xcb, 0xeb, 0x2c, 0xe1, 0x99, 0x0c, 0x6e, 0xb6, 0x05,
	0x23, 0x55, 0x8c, 0x89, 0x35, 0x09, 0xcb, 0xa5, 0x9a, 0x22, 0xc9, 0x9a, 0xd6, 0xac, 0xe9, 0x4e,
	0xbc, 0xad, 0x32, 0x53, 0x89, 0x9a, 0xc4, 0x19, 0x0e, 0xc5, 0x66, 0x0d, 0xc7, 0x2c, 0x59, 0x68,
	0xa2, 0x5a, 0xc6, 0x5a, 0xe7, 0x01, 0xeb, 0x47, 0x91, 0x3a, 0x90, 0x1b, 0xac, 0xeb, 0x9d, 0x91,
	0x29, 0x04, 0x02, 0xd4, 0x22, 0xef, 0x19, 0x13, 0x1d, 0x85, 0x6a, 0x71, 0x33, 0x46, 0x18, 0x58,
	0xc3, 0xaa, 0x4e, 0xcb, 0x1d, 0x27, 0xde, 0x4e, 0xcc, 0x18, 0xe5, 0x20, 0x21, 0xe5, 0x8e, 0x43,
	0xd2, 0xa4, 0xe5, 0x17, 0x2d, 0xa6, 0x4f, 0x56, 0x64, 0xcc, 0x7e, 0x0d, 0x60, 0x20, 0x27, 0xae,
	0x91, 0x93, 0x56, 0x5b, 0x79, 0x88, 0xaa, 0xe2, 0x9a, 0x40, 0xd9, 0xef, 0xd4, 0xd1, 0x8b, 0xb6,
	0x5e, 0x18, 0xe7, 0x5c, 0xa4, 0x14, 0xac, 0xea, 0xa6, 0x1d, 0x35, 0x1d, 0x83, 0x7e, 0x23, 0x66,
	0x03, 0xd7, 0xb5, 0x3a, 0xe5, 0x86, 0x8f, 0x1f, 0xd4, 0xfd, 0xe8, 0x16, 0x9a, 0x80, 0xfd, 0x92,
	0xac, 0x61, 0xf5, 0x86, 0x58, 0xd1, 0x65, 0x94, 0xf4, 0xff, 0xf5, 0x70, 0xbc, 0x3f, 0xd5, 0x50,
	0xe9, 0x13, 0xc2, 0x5b, 0x56, 0x43, 0x53, 0xdf, 0x02, 0x38, 0xe6, 0x84, 0x60, 0x97, 0x55, 0x16,
	0x8e, 0x5a, 0x69, 0xb8, 0x49, 0xeb, 0xf0, 0x7a, 0x8b, 0x39, 0x58, 0x15, 0xd7, 0x88, 0x43, 0x9b,
	0xba, 0x0e, 0x56, 0xdb, 0x0b, 0xf2, 0x5f, 0x0b, 0xec, 0x77, 0x1f, 0x64, 0xba, 0x25, 0xd2, 0x55,
	0x63, 0x67, 0xed, 0x1a, 0x3b, 0xd1, 0xa3, 0x2b, 0x5d, 0x64, 0xf6, 0x7a, 0x87, 0xcc, 0x42, 0x9d,
	0x41, 0xba, 0x2a, 0xed, 0xab, 0x6e, 0x4a, 0xfb, 0xd8, 0xeb, 0x52, 0x51, 0xca, 0xf6, 0x5c, 0x67,
	0x51, 0xff, 0x0f, 0x7a, 0x33, 0xe0, 0xba, 0x48, 0x2e, 0xe7, 0xe0, 0xb0, 0xe1, 0x4a, 0xc9, 0xea,
	0xf4, 0xa2, 0x9b, 0x31, 0x93, 0xa0, 0x3b, 0xd6, 0xb4, 0xb1, 0x63, 0xe9, 0xed, 0x7d, 0x2f, 0x1c,
	0x71, 0x65, 0xeb, 0x09, 0xd8, 0x2f, 0xd6, 0x24, 0x3b, 0x3f, 0x07, 0xd7, 0x5b, 0xcc, 0x7e, 0x03,
	0x3f, 0x4f, 0x16, 0x94, 0x87, 0xd7, 0xe0, 0x30, 0xf1, 0x33, 0xcb, 0x26, 0x90, 0xba, 0x51, 0x16,
	0x0c, 0xb5, 0x35, 0xd0, 0x51, 0xb8, 0xe4, 0xc1, 0xf5, 0x16, 0x13, 0x70, 0x94, 0x9b, 0x27, 0x1b,
	0x76, 0x2f, 0x12, 0xdc, 0x46, 0x72, 0xbd, 0xc6, 0x94, 0x1d, 0xed, 0xc1, 0x1d, 0x45, 0xd6, 0x83,
	0x3b, 0x5a, 0xc3, 0x07, 0xd4, 0x76, 0x2f, 0x07, 0xe9, 0x37, 0xfa, 0xe0, 0x70, 0x27, 0xdb, 0x5f,
	0xd5, 0x59, 0x0d, 0x9e, 0x46, 0x5a, 0x94, 0xce, 0x05, 0x78, 0xa0, 0xed, 0x1b, 0xca, 0x78, 0xa3,
	0xbe, 0x89, 0xc1, 0x99, 0xa9, 0x5e, 0x21, 0xda, 0xde, 0x7f, 0x4e, 0xd6, 0xd4, 0x26, 0xef, 0xb7,
	0x7f, 0x58, 0xd1, 0x9b, 0x70, 0xb8, 0xe3, 0x05, 0x61, 0x7c, 0x34, 0xf0, 0xcb, 0x3d, 0x03, 0x3b,
	0xb8, 0xae, 0xc7, 0x0e, 0x38, 0x9e, 0x95, 0xd0, 0x15, 0x38, 0xdc, 0x81, 0x00, 0x05, 0x77, 0x2a,
	0x30, 0xa0, 0xa7, 0x76, 0x12, 0xbe, 0x70, 0x43, 0xac, 0x34, 0xb0, 0xa1, 0xf5, 0x6e, 0x5f, 0x43,
	0x5e, 0xf7, 0x9a, 0xf5, 0x9e, 0x02, 0xa1, 0xb7, 0xe0, 0x88, 0x1b, 0x04, 0x97, 0xe0, 0xd3, 0xed,
	0xc1, 0x7b, 0xbc, 0x01, 0xb6, 0xf8, 0xb3, 0x1f, 0x00, 0x53, 0xfe, 0x44, 0xf6, 0x1f, 0x6e, 0x33,
	0x61, 0x3b, 0x92, 0x98, 0xe3, 0xe4, 0x9d, 0x6d, 0xe6, 0x9a, 0x9b, 0xd2, 0x9f, 0x4a, 0xdc, 0x2e,
	0x7a, 0x36, 0x24, 0xcc, 0x8a, 0xf0, 0x50, 0x47, 0x0b, 0x52, 0xa2, 0x26, 0xa2, 0xb3, 0xb6, 0x37,
	0x0e, 0xd0, 0xb6, 0x85, 0x7b, 0xb5, 0xad, 0xe3, 0x95, 0xeb, 0xff, 0xb4, 0xc5, 0x80, 0xbb, 0x2d,
	0xc6, 0x33, 0x79, 0x1a, 0x06, 0x1c, 0x68, 0xd1, 0x51, 0x78, 0x64, 0x21, 0x9f, 0xc9, 0xcf, 0x2d,
	0xe6, 0x85, 0xc4, 0x7c, 0x5a, 0xe0, 0xf2, 0xa9, 0xf9, 0xb9, 0x74, 0xbe, 0x28, 0x14, 0xaf, 0xce,
	0x73, 0x41, 0x0f, 0xda, 0x0f, 0x7d, 0xa9, 0x1c, 0x17, 0x04, 0x93, 0x97, 0x61, 0xc0, 0x91, 0x04,
	0x42, 0x70, 0xc8, 0x3c, 0x5a, 0x4c, 0xf0, 0x17, 0xb9, 0x62, 0xd0, 0x83, 0x82, 0xd0, 0x9f, 0xc8,
	0x66, 0x05, 0x9e, 0xbb, 0xbc, 0xc0, 0x15, 0x8a, 0x85, 0x20, 0x40, 0x10, 0xee, 0x9b, 0xe7, 0x78,
	0x21, 0x3d, 0x1f, 0xf4, 0x22, 0x3f, 0xec, 0x27, 0xeb, 0x85, 0x02, 0xc7, 0x07, 0x7d, 0x93, 0x15,
	0x38, 0xea, 0x3e, 0xc3, 0xa2, 0x10, 0x1c, 0x35, 0x23, 0x5f, 0xc8, 0xce, 0x2d, 0x0a, 0x89, 0xec,
	0xc5, 0x39, 0x3e, 0x5d, 0xbc, 0x94, 0x0b, 0x7a, 0x88, 0xad, 0x38, 0x97, 0xe1, 0xf2, 0x42, 0x72,
	0xe1, 0x7c, 0x86, 0x2b, 0xda, 0x6c, 0x80, 0xd8, 0xb2, 0x5c, 0x22, 0x73, 0xb5, 0xd3, 0xe6, 0x9d,
	0x5c, 0x84, 0x47, 0xba, 0x7e, 0xe9, 0x51, 0x04, 0x86, 0xcc, 0x0b, 0x73, 0x89, 0x2b, 0x04, 0x7e,
	0xc1, 0x79, 0xe9, 0x85, 0xf4, 0x15, 0x2e, 0x25, 0x2c, 0xa6, 0xf3, 0xa9, 0x36, 0x40, 0x60, 0xe6,
	0x27, 0xbf, 0xcb, 0x5b, 0x98, 0xa8, 0x49, 0xe8, 0x13, 0x00, 0x0f, 0x15, 0x56, 0xdc, 0x26, 0xce,
	0x9e, 0xfd, 0x0b, 0xf5, 0xb4, 0xb2, 0xe7, 0x1e, 0x6f, 0x31, 0x21, 0x1e, 0xd7, 0x95, 0x86, 0xba,
	0x8c, 0xcf, 0x2b, 0xf2, 0x75, 0xa9, 0x1c, 0x4b, 0x2c, 0x93, 0xd1, 0xe2, 0x0d, 0x09, 0xaf, 0xc6,
	0xde, 0xfb, 0xfe, 0xd7, 0x8f, 0xbc, 0x61, 0xf6, 0x70, 0xbc, 0xbe, 0xa2, 0xac, 0xc6, 0x2d, 0x2e,
	0x5a, 0x64, 0x00, 0x93, 0xd3, 0x00, 0x7d, 0x07, 0xe0, 0xd8, 0x79, 0x15, 0x8b, 0x1a, 0x76, 0x9f,
	0x88, 0xa3, 0xbb, 0x0d, 0xbb, 0xa1, 0x61, 0x3b, 0x46, 0xfa, 0x8f, 0x13, 0xdb, 0x7c, 0xbc, 0xc5,
	0x84, 0x5d, 0x81, 0xe5, 0x44, 0x59, 0x2c, 0xe3, 0xd8, 0xe6, 0x36, 0x73, 0xb2, 0xcb, 0x24, 0xe8,
	0x3e, 0xfb, 0xd1, 0x5c, 0x58, 0xf6, 0x68, 0x7c, 0x99, 0x62, 0x8d, 0x93, 0x57, 0xcd, 0x2d, 0x23,
	0xf4, 0x19, 0x80, 0x63, 0x0b, 0xb5, 0xd2, 0xb3, 0xcd, 0xe7, 0xd2, 0x6e, 0xf9, 0x58, 0xf0, 0x1a,
	0xf4, 0xea, 0xde, 0xf0, 0x52, 0xb8, 0x82, 0x9f, 0x13, 0xbc, 0x12, 0xbd, 0xba, 0x3b, 0xbc, 0xcf,
	0x01, 0x3c, 0x42, 0x78, 0xfa, 0x4f, 0xc1, 0xed, 0xea, 0xc1, 0xa6, 0xf6, 0xc0, 0xd9, 0x28, 0x3b,
	0xa6, 0x73, 0xb6, 0x1b, 0xce, 0x69, 0x80, 0x1e, 0x03, 0x18, 0xd1, 0x79, 0xdb, 0x75, 0xd0, 0x3c,
	0xbe, 0x87, 0x19, 0xd2, 0xad, 0x9c, 0xb7, 0xc0, 0x1e, 0xe8, 0x7b, 0xae, 0xfb, 0x54, 0xe5, 0x3a,
	0x49, 0x75, 0x0c, 0x50, 0x34, 0xd3, 0x97, 0xd8, 0xa8, 0xc9, 0x68, 0x63, 0x6c, 0x73, 0x6d, 0xcb,
	0x3d, 0x00, 0x23, 0x3a, 0xa9, 0x9f, 0x79, 0xb2, 0x99, 0x3d, 0x71, 0x87, 0xe0, 0x34, 0xa8, 0xbd,
	0x1b, 0x4e, 0x9d, 0xdd, 0xcf, 0x11, 0xa7, 0xc1, 0xf1, 0x5e, 0x38, 0xbf, 0x04, 0x30, 0x4c, 0x68,
	0xfe, 0xef, 0x50, 0xee, 0xc5, 0x89, 0xbd, 0xb8, 0x07, 0xbe, 0x1f, 0x67, 0x23, 0x3a, 0xdf, 0x7b,
	0x60, 0x9e, 0x06, 0xc9, 0xf0, 0xc6, 0x2f, 0x11, 0xcf, 0xc6, 0x66, 0x04, 0x3c, 0xd8, 0x8c, 0x80,
	0x9f, 0x37, 0x23, 0xe0, 0xf6, 0xa3, 0x88, 0xe7, 0xc1, 0xa3, 0x88, 0xe7, 0x87, 0x47, 0x11, 0xcf,
	0xd2, 0x3e, 0x0a, 0xe4, 0x95, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x7a, 0x4f, 0x07, 0xd9,
	0x12, 0x00, 0x00,
}

func (this *FlowRateLimitSettingsKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.FlowRateLimitSettingsKey{")
	s = append(s, "FlowSettingsName: "+fmt.Sprintf("%#v", this.FlowSettingsName)+",\n")
	s = append(s, "RateLimitKey: "+strings.Replace(this.RateLimitKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaxReqsRateLimitSettingsKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&edgeproto.MaxReqsRateLimitSettingsKey{")
	s = append(s, "MaxReqsSettingsName: "+fmt.Sprintf("%#v", this.MaxReqsSettingsName)+",\n")
	s = append(s, "RateLimitKey: "+strings.Replace(this.RateLimitKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitSettingsKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&edgeproto.RateLimitSettingsKey{")
	s = append(s, "ApiName: "+fmt.Sprintf("%#v", this.ApiName)+",\n")
	s = append(s, "ApiEndpointType: "+fmt.Sprintf("%#v", this.ApiEndpointType)+",\n")
	s = append(s, "RateLimitTarget: "+fmt.Sprintf("%#v", this.RateLimitTarget)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRatelimit(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RateLimitSettingsApiClient is the client API for RateLimitSettingsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitSettingsApiClient interface {
	// Show RateLimit settings for an API endpoint and target
	ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error)
	// Create Flow RateLimit settings for an API endpoint and target
	CreateFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Update Flow RateLimit settings for an API endpoint and target
	UpdateFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Delete Flow RateLimit settings for an API endpoint and target
	DeleteFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Show Flow RateLimit settings for an API endpoint and target
	ShowFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowFlowRateLimitSettingsClient, error)
	// Create MaxReqs RateLimit settings for an API endpoint and target
	CreateMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Update MaxReqs RateLimit settings for an API endpoint and target
	UpdateMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Delete MaxReqs RateLimit settings for an API endpoint and target
	DeleteMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error)
	// Show MaxReqs RateLimit settings for an API endpoint and target
	ShowMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsClient, error)
}

type rateLimitSettingsApiClient struct {
	cc *grpc.ClientConn
}

func NewRateLimitSettingsApiClient(cc *grpc.ClientConn) RateLimitSettingsApiClient {
	return &rateLimitSettingsApiClient{cc}
}

func (c *rateLimitSettingsApiClient) ShowRateLimitSettings(ctx context.Context, in *RateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowRateLimitSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitSettingsApi_serviceDesc.Streams[0], "/edgeproto.RateLimitSettingsApi/ShowRateLimitSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitSettingsApiShowRateLimitSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimitSettingsApi_ShowRateLimitSettingsClient interface {
	Recv() (*RateLimitSettings, error)
	grpc.ClientStream
}

type rateLimitSettingsApiShowRateLimitSettingsClient struct {
	grpc.ClientStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsClient) Recv() (*RateLimitSettings, error) {
	m := new(RateLimitSettings)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rateLimitSettingsApiClient) CreateFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/CreateFlowRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) UpdateFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/UpdateFlowRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) DeleteFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/DeleteFlowRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) ShowFlowRateLimitSettings(ctx context.Context, in *FlowRateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowFlowRateLimitSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitSettingsApi_serviceDesc.Streams[1], "/edgeproto.RateLimitSettingsApi/ShowFlowRateLimitSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitSettingsApiShowFlowRateLimitSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimitSettingsApi_ShowFlowRateLimitSettingsClient interface {
	Recv() (*FlowRateLimitSettings, error)
	grpc.ClientStream
}

type rateLimitSettingsApiShowFlowRateLimitSettingsClient struct {
	grpc.ClientStream
}

func (x *rateLimitSettingsApiShowFlowRateLimitSettingsClient) Recv() (*FlowRateLimitSettings, error) {
	m := new(FlowRateLimitSettings)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rateLimitSettingsApiClient) CreateMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/CreateMaxReqsRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) UpdateMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/UpdateMaxReqsRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) DeleteMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/edgeproto.RateLimitSettingsApi/DeleteMaxReqsRateLimitSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitSettingsApiClient) ShowMaxReqsRateLimitSettings(ctx context.Context, in *MaxReqsRateLimitSettings, opts ...grpc.CallOption) (RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitSettingsApi_serviceDesc.Streams[2], "/edgeproto.RateLimitSettingsApi/ShowMaxReqsRateLimitSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitSettingsApiShowMaxReqsRateLimitSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsClient interface {
	Recv() (*MaxReqsRateLimitSettings, error)
	grpc.ClientStream
}

type rateLimitSettingsApiShowMaxReqsRateLimitSettingsClient struct {
	grpc.ClientStream
}

func (x *rateLimitSettingsApiShowMaxReqsRateLimitSettingsClient) Recv() (*MaxReqsRateLimitSettings, error) {
	m := new(MaxReqsRateLimitSettings)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RateLimitSettingsApiServer is the server API for RateLimitSettingsApi service.
type RateLimitSettingsApiServer interface {
	// Show RateLimit settings for an API endpoint and target
	ShowRateLimitSettings(*RateLimitSettings, RateLimitSettingsApi_ShowRateLimitSettingsServer) error
	// Create Flow RateLimit settings for an API endpoint and target
	CreateFlowRateLimitSettings(context.Context, *FlowRateLimitSettings) (*Result, error)
	// Update Flow RateLimit settings for an API endpoint and target
	UpdateFlowRateLimitSettings(context.Context, *FlowRateLimitSettings) (*Result, error)
	// Delete Flow RateLimit settings for an API endpoint and target
	DeleteFlowRateLimitSettings(context.Context, *FlowRateLimitSettings) (*Result, error)
	// Show Flow RateLimit settings for an API endpoint and target
	ShowFlowRateLimitSettings(*FlowRateLimitSettings, RateLimitSettingsApi_ShowFlowRateLimitSettingsServer) error
	// Create MaxReqs RateLimit settings for an API endpoint and target
	CreateMaxReqsRateLimitSettings(context.Context, *MaxReqsRateLimitSettings) (*Result, error)
	// Update MaxReqs RateLimit settings for an API endpoint and target
	UpdateMaxReqsRateLimitSettings(context.Context, *MaxReqsRateLimitSettings) (*Result, error)
	// Delete MaxReqs RateLimit settings for an API endpoint and target
	DeleteMaxReqsRateLimitSettings(context.Context, *MaxReqsRateLimitSettings) (*Result, error)
	// Show MaxReqs RateLimit settings for an API endpoint and target
	ShowMaxReqsRateLimitSettings(*MaxReqsRateLimitSettings, RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsServer) error
}

// UnimplementedRateLimitSettingsApiServer can be embedded to have forward compatible implementations.
type UnimplementedRateLimitSettingsApiServer struct {
}

func (*UnimplementedRateLimitSettingsApiServer) ShowRateLimitSettings(req *RateLimitSettings, srv RateLimitSettingsApi_ShowRateLimitSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) CreateFlowRateLimitSettings(ctx context.Context, req *FlowRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlowRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) UpdateFlowRateLimitSettings(ctx context.Context, req *FlowRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) DeleteFlowRateLimitSettings(ctx context.Context, req *FlowRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlowRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) ShowFlowRateLimitSettings(req *FlowRateLimitSettings, srv RateLimitSettingsApi_ShowFlowRateLimitSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowFlowRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) CreateMaxReqsRateLimitSettings(ctx context.Context, req *MaxReqsRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaxReqsRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) UpdateMaxReqsRateLimitSettings(ctx context.Context, req *MaxReqsRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxReqsRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) DeleteMaxReqsRateLimitSettings(ctx context.Context, req *MaxReqsRateLimitSettings) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaxReqsRateLimitSettings not implemented")
}
func (*UnimplementedRateLimitSettingsApiServer) ShowMaxReqsRateLimitSettings(req *MaxReqsRateLimitSettings, srv RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowMaxReqsRateLimitSettings not implemented")
}

func RegisterRateLimitSettingsApiServer(s *grpc.Server, srv RateLimitSettingsApiServer) {
	s.RegisterService(&_RateLimitSettingsApi_serviceDesc, srv)
}

func _RateLimitSettingsApi_ShowRateLimitSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RateLimitSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimitSettingsApiServer).ShowRateLimitSettings(m, &rateLimitSettingsApiShowRateLimitSettingsServer{stream})
}

type RateLimitSettingsApi_ShowRateLimitSettingsServer interface {
	Send(*RateLimitSettings) error
	grpc.ServerStream
}

type rateLimitSettingsApiShowRateLimitSettingsServer struct {
	grpc.ServerStream
}

func (x *rateLimitSettingsApiShowRateLimitSettingsServer) Send(m *RateLimitSettings) error {
	return x.ServerStream.SendMsg(m)
}

func _RateLimitSettingsApi_CreateFlowRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).CreateFlowRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/CreateFlowRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).CreateFlowRateLimitSettings(ctx, req.(*FlowRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_UpdateFlowRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).UpdateFlowRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/UpdateFlowRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).UpdateFlowRateLimitSettings(ctx, req.(*FlowRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_DeleteFlowRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).DeleteFlowRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/DeleteFlowRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).DeleteFlowRateLimitSettings(ctx, req.(*FlowRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_ShowFlowRateLimitSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlowRateLimitSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimitSettingsApiServer).ShowFlowRateLimitSettings(m, &rateLimitSettingsApiShowFlowRateLimitSettingsServer{stream})
}

type RateLimitSettingsApi_ShowFlowRateLimitSettingsServer interface {
	Send(*FlowRateLimitSettings) error
	grpc.ServerStream
}

type rateLimitSettingsApiShowFlowRateLimitSettingsServer struct {
	grpc.ServerStream
}

func (x *rateLimitSettingsApiShowFlowRateLimitSettingsServer) Send(m *FlowRateLimitSettings) error {
	return x.ServerStream.SendMsg(m)
}

func _RateLimitSettingsApi_CreateMaxReqsRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxReqsRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).CreateMaxReqsRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/CreateMaxReqsRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).CreateMaxReqsRateLimitSettings(ctx, req.(*MaxReqsRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_UpdateMaxReqsRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxReqsRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).UpdateMaxReqsRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/UpdateMaxReqsRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).UpdateMaxReqsRateLimitSettings(ctx, req.(*MaxReqsRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_DeleteMaxReqsRateLimitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxReqsRateLimitSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitSettingsApiServer).DeleteMaxReqsRateLimitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgeproto.RateLimitSettingsApi/DeleteMaxReqsRateLimitSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitSettingsApiServer).DeleteMaxReqsRateLimitSettings(ctx, req.(*MaxReqsRateLimitSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitSettingsApi_ShowMaxReqsRateLimitSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MaxReqsRateLimitSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimitSettingsApiServer).ShowMaxReqsRateLimitSettings(m, &rateLimitSettingsApiShowMaxReqsRateLimitSettingsServer{stream})
}

type RateLimitSettingsApi_ShowMaxReqsRateLimitSettingsServer interface {
	Send(*MaxReqsRateLimitSettings) error
	grpc.ServerStream
}

type rateLimitSettingsApiShowMaxReqsRateLimitSettingsServer struct {
	grpc.ServerStream
}

func (x *rateLimitSettingsApiShowMaxReqsRateLimitSettingsServer) Send(m *MaxReqsRateLimitSettings) error {
	return x.ServerStream.SendMsg(m)
}

var _RateLimitSettingsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgeproto.RateLimitSettingsApi",
	HandlerType: (*RateLimitSettingsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlowRateLimitSettings",
			Handler:    _RateLimitSettingsApi_CreateFlowRateLimitSettings_Handler,
		},
		{
			MethodName: "UpdateFlowRateLimitSettings",
			Handler:    _RateLimitSettingsApi_UpdateFlowRateLimitSettings_Handler,
		},
		{
			MethodName: "DeleteFlowRateLimitSettings",
			Handler:    _RateLimitSettingsApi_DeleteFlowRateLimitSettings_Handler,
		},
		{
			MethodName: "CreateMaxReqsRateLimitSettings",
			Handler:    _RateLimitSettingsApi_CreateMaxReqsRateLimitSettings_Handler,
		},
		{
			MethodName: "UpdateMaxReqsRateLimitSettings",
			Handler:    _RateLimitSettingsApi_UpdateMaxReqsRateLimitSettings_Handler,
		},
		{
			MethodName: "DeleteMaxReqsRateLimitSettings",
			Handler:    _RateLimitSettingsApi_DeleteMaxReqsRateLimitSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowRateLimitSettings",
			Handler:       _RateLimitSettingsApi_ShowRateLimitSettings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowFlowRateLimitSettings",
			Handler:       _RateLimitSettingsApi_ShowFlowRateLimitSettings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowMaxReqsRateLimitSettings",
			Handler:       _RateLimitSettingsApi_ShowMaxReqsRateLimitSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ratelimit.proto",
}

func (m *FlowSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurstSize != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.BurstSize))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqsPerSecond != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReqsPerSecond))))
		i--
		dAtA[i] = 0x11
	}
	if m.FlowAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.FlowAlgorithm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowRateLimitSettingsKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRateLimitSettingsKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRateLimitSettingsKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimitKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FlowSettingsName) > 0 {
		i -= len(m.FlowSettingsName)
		copy(dAtA[i:], m.FlowSettingsName)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.FlowSettingsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowRateLimitSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRateLimitSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRateLimitSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaxReqsSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxReqsSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxReqsSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxRequests != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxRequests))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxReqsAlgorithm != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.MaxReqsAlgorithm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxReqsRateLimitSettingsKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxReqsRateLimitSettingsKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxReqsRateLimitSettingsKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RateLimitKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MaxReqsSettingsName) > 0 {
		i -= len(m.MaxReqsSettingsName)
		copy(dAtA[i:], m.MaxReqsSettingsName)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.MaxReqsSettingsName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaxReqsRateLimitSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxReqsRateLimitSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxReqsRateLimitSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintRatelimit(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettingsKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitTarget != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.RateLimitTarget))
		i--
		dAtA[i] = 0x18
	}
	if m.ApiEndpointType != 0 {
		i = encodeVarintRatelimit(dAtA, i, uint64(m.ApiEndpointType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ApiName) > 0 {
		i -= len(m.ApiName)
		copy(dAtA[i:], m.ApiName)
		i = encodeVarintRatelimit(dAtA, i, uint64(len(m.ApiName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxReqsSettings) > 0 {
		for k := range m.MaxReqsSettings {
			v := m.MaxReqsSettings[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRatelimit(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRatelimit(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRatelimit(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FlowSettings) > 0 {
		for k := range m.FlowSettings {
			v := m.FlowSettings[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRatelimit(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRatelimit(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRatelimit(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRatelimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RateLimitSettingsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitSettingsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitSettingsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for iNdEx := len(m.Settings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRatelimit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRatelimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovRatelimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowSettings) Matches(o *FlowSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.FlowAlgorithm != 0 {
		if o.FlowAlgorithm != m.FlowAlgorithm {
			return false
		}
	}
	if !opts.Filter || o.ReqsPerSecond != 0 {
		if o.ReqsPerSecond != m.ReqsPerSecond {
			return false
		}
	}
	if !opts.Filter || o.BurstSize != 0 {
		if o.BurstSize != m.BurstSize {
			return false
		}
	}
	return true
}

func (m *FlowSettings) CopyInFields(src *FlowSettings) int {
	changed := 0
	if m.FlowAlgorithm != src.FlowAlgorithm {
		m.FlowAlgorithm = src.FlowAlgorithm
		changed++
	}
	if m.ReqsPerSecond != src.ReqsPerSecond {
		m.ReqsPerSecond = src.ReqsPerSecond
		changed++
	}
	if m.BurstSize != src.BurstSize {
		m.BurstSize = src.BurstSize
		changed++
	}
	return changed
}

func (m *FlowSettings) DeepCopyIn(src *FlowSettings) {
	m.FlowAlgorithm = src.FlowAlgorithm
	m.ReqsPerSecond = src.ReqsPerSecond
	m.BurstSize = src.BurstSize
}

// Helper method to check that enums have valid values
func (m *FlowSettings) ValidateEnums() error {
	if _, ok := FlowRateLimitAlgorithm_name[int32(m.FlowAlgorithm)]; !ok {
		return errors.New("invalid FlowAlgorithm")
	}
	return nil
}

func (m *FlowRateLimitSettingsKey) Matches(o *FlowRateLimitSettingsKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.FlowSettingsName != "" {
		if o.FlowSettingsName != m.FlowSettingsName {
			return false
		}
	}
	if !m.RateLimitKey.Matches(&o.RateLimitKey, fopts...) {
		return false
	}
	return true
}

func (m *FlowRateLimitSettingsKey) CopyInFields(src *FlowRateLimitSettingsKey) int {
	changed := 0
	if m.FlowSettingsName != src.FlowSettingsName {
		m.FlowSettingsName = src.FlowSettingsName
		changed++
	}
	if m.RateLimitKey.ApiName != src.RateLimitKey.ApiName {
		m.RateLimitKey.ApiName = src.RateLimitKey.ApiName
		changed++
	}
	if m.RateLimitKey.ApiEndpointType != src.RateLimitKey.ApiEndpointType {
		m.RateLimitKey.ApiEndpointType = src.RateLimitKey.ApiEndpointType
		changed++
	}
	if m.RateLimitKey.RateLimitTarget != src.RateLimitKey.RateLimitTarget {
		m.RateLimitKey.RateLimitTarget = src.RateLimitKey.RateLimitTarget
		changed++
	}
	return changed
}

func (m *FlowRateLimitSettingsKey) DeepCopyIn(src *FlowRateLimitSettingsKey) {
	m.FlowSettingsName = src.FlowSettingsName
	m.RateLimitKey.DeepCopyIn(&src.RateLimitKey)
}

func (m *FlowRateLimitSettingsKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal FlowRateLimitSettingsKey key string", "obj", m)
	}
	return string(key)
}

func FlowRateLimitSettingsKeyStringParse(str string, key *FlowRateLimitSettingsKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal FlowRateLimitSettingsKey key string", "str", str)
	}
}

func (m *FlowRateLimitSettingsKey) NotFoundError() error {
	return fmt.Errorf("FlowRateLimitSettings key %s not found", m.GetKeyString())
}

func (m *FlowRateLimitSettingsKey) ExistsError() error {
	return fmt.Errorf("FlowRateLimitSettings key %s already exists", m.GetKeyString())
}

func (m *FlowRateLimitSettingsKey) BeingDeletedError() error {
	return fmt.Errorf("FlowRateLimitSettings %s is being deleted", m.GetKeyString())
}

var FlowRateLimitSettingsKeyTagFlowSettingsName = "flowsettingsname"

func (m *FlowRateLimitSettingsKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["flowsettingsname"] = m.FlowSettingsName
	tags["apiname"] = m.RateLimitKey.ApiName
	tags["apiendpointtype"] = ApiEndpointType_name[int32(m.RateLimitKey.ApiEndpointType)]
	tags["ratelimittarget"] = RateLimitTarget_name[int32(m.RateLimitKey.RateLimitTarget)]
	return tags
}

// Helper method to check that enums have valid values
func (m *FlowRateLimitSettingsKey) ValidateEnums() error {
	if err := m.RateLimitKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *FlowRateLimitSettings) Matches(o *FlowRateLimitSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !m.Settings.Matches(&o.Settings, fopts...) {
		return false
	}
	return true
}

const FlowRateLimitSettingsFieldKey = "2"
const FlowRateLimitSettingsFieldKeyFlowSettingsName = "2.1"
const FlowRateLimitSettingsFieldKeyRateLimitKey = "2.2"
const FlowRateLimitSettingsFieldKeyRateLimitKeyApiName = "2.2.1"
const FlowRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType = "2.2.2"
const FlowRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget = "2.2.3"
const FlowRateLimitSettingsFieldSettings = "3"
const FlowRateLimitSettingsFieldSettingsFlowAlgorithm = "3.1"
const FlowRateLimitSettingsFieldSettingsReqsPerSecond = "3.2"
const FlowRateLimitSettingsFieldSettingsBurstSize = "3.3"

var FlowRateLimitSettingsAllFields = []string{
	FlowRateLimitSettingsFieldKeyFlowSettingsName,
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiName,
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType,
	FlowRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget,
	FlowRateLimitSettingsFieldSettingsFlowAlgorithm,
	FlowRateLimitSettingsFieldSettingsReqsPerSecond,
	FlowRateLimitSettingsFieldSettingsBurstSize,
}

var FlowRateLimitSettingsAllFieldsMap = map[string]struct{}{
	FlowRateLimitSettingsFieldKeyFlowSettingsName:            struct{}{},
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiName:         struct{}{},
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType: struct{}{},
	FlowRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget: struct{}{},
	FlowRateLimitSettingsFieldSettingsFlowAlgorithm:          struct{}{},
	FlowRateLimitSettingsFieldSettingsReqsPerSecond:          struct{}{},
	FlowRateLimitSettingsFieldSettingsBurstSize:              struct{}{},
}

var FlowRateLimitSettingsAllFieldsStringMap = map[string]string{
	FlowRateLimitSettingsFieldKeyFlowSettingsName:            "Key Flow Settings Name",
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiName:         "Key Rate Limit Key Api Name",
	FlowRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType: "Key Rate Limit Key Api Endpoint Type",
	FlowRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget: "Key Rate Limit Key Rate Limit Target",
	FlowRateLimitSettingsFieldSettingsFlowAlgorithm:          "Settings Flow Algorithm",
	FlowRateLimitSettingsFieldSettingsReqsPerSecond:          "Settings Reqs Per Second",
	FlowRateLimitSettingsFieldSettingsBurstSize:              "Settings Burst Size",
}

func (m *FlowRateLimitSettings) IsKeyField(s string) bool {
	return strings.HasPrefix(s, FlowRateLimitSettingsFieldKey+".") || s == FlowRateLimitSettingsFieldKey
}

func (m *FlowRateLimitSettings) DiffFields(o *FlowRateLimitSettings, fields map[string]struct{}) {
	if m.Key.FlowSettingsName != o.Key.FlowSettingsName {
		fields[FlowRateLimitSettingsFieldKeyFlowSettingsName] = struct{}{}
		fields[FlowRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.ApiName != o.Key.RateLimitKey.ApiName {
		fields[FlowRateLimitSettingsFieldKeyRateLimitKeyApiName] = struct{}{}
		fields[FlowRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[FlowRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.ApiEndpointType != o.Key.RateLimitKey.ApiEndpointType {
		fields[FlowRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType] = struct{}{}
		fields[FlowRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[FlowRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.RateLimitTarget != o.Key.RateLimitKey.RateLimitTarget {
		fields[FlowRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget] = struct{}{}
		fields[FlowRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[FlowRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Settings.FlowAlgorithm != o.Settings.FlowAlgorithm {
		fields[FlowRateLimitSettingsFieldSettingsFlowAlgorithm] = struct{}{}
		fields[FlowRateLimitSettingsFieldSettings] = struct{}{}
	}
	if m.Settings.ReqsPerSecond != o.Settings.ReqsPerSecond {
		fields[FlowRateLimitSettingsFieldSettingsReqsPerSecond] = struct{}{}
		fields[FlowRateLimitSettingsFieldSettings] = struct{}{}
	}
	if m.Settings.BurstSize != o.Settings.BurstSize {
		fields[FlowRateLimitSettingsFieldSettingsBurstSize] = struct{}{}
		fields[FlowRateLimitSettingsFieldSettings] = struct{}{}
	}
}

func (m *FlowRateLimitSettings) CopyInFields(src *FlowRateLimitSettings) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.FlowSettingsName != src.Key.FlowSettingsName {
				m.Key.FlowSettingsName = src.Key.FlowSettingsName
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if m.Key.RateLimitKey.ApiName != src.Key.RateLimitKey.ApiName {
					m.Key.RateLimitKey.ApiName = src.Key.RateLimitKey.ApiName
					changed++
				}
			}
			if _, set := fmap["2.2.2"]; set {
				if m.Key.RateLimitKey.ApiEndpointType != src.Key.RateLimitKey.ApiEndpointType {
					m.Key.RateLimitKey.ApiEndpointType = src.Key.RateLimitKey.ApiEndpointType
					changed++
				}
			}
			if _, set := fmap["2.2.3"]; set {
				if m.Key.RateLimitKey.RateLimitTarget != src.Key.RateLimitKey.RateLimitTarget {
					m.Key.RateLimitKey.RateLimitTarget = src.Key.RateLimitKey.RateLimitTarget
					changed++
				}
			}
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			if m.Settings.FlowAlgorithm != src.Settings.FlowAlgorithm {
				m.Settings.FlowAlgorithm = src.Settings.FlowAlgorithm
				changed++
			}
		}
		if _, set := fmap["3.2"]; set {
			if m.Settings.ReqsPerSecond != src.Settings.ReqsPerSecond {
				m.Settings.ReqsPerSecond = src.Settings.ReqsPerSecond
				changed++
			}
		}
		if _, set := fmap["3.3"]; set {
			if m.Settings.BurstSize != src.Settings.BurstSize {
				m.Settings.BurstSize = src.Settings.BurstSize
				changed++
			}
		}
	}
	return changed
}

func (m *FlowRateLimitSettings) DeepCopyIn(src *FlowRateLimitSettings) {
	m.Key.DeepCopyIn(&src.Key)
	m.Settings.DeepCopyIn(&src.Settings)
}

func (s *FlowRateLimitSettings) HasFields() bool {
	return true
}

type FlowRateLimitSettingsStore interface {
	Create(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *FlowRateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*FlowRateLimitSettings, int64, error)
	Get(ctx context.Context, key *FlowRateLimitSettingsKey, buf *FlowRateLimitSettings) bool
	STMGet(stm concurrency.STM, key *FlowRateLimitSettingsKey, buf *FlowRateLimitSettings) bool
	STMPut(stm concurrency.STM, obj *FlowRateLimitSettings, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *FlowRateLimitSettingsKey)
}

type FlowRateLimitSettingsStoreImpl struct {
	kvstore objstore.KVStore
}

func NewFlowRateLimitSettingsStore(kvstore objstore.KVStore) *FlowRateLimitSettingsStoreImpl {
	return &FlowRateLimitSettingsStoreImpl{kvstore: kvstore}
}

func (s *FlowRateLimitSettingsStoreImpl) Create(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(FlowRateLimitSettingsAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("FlowRateLimitSettings", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *FlowRateLimitSettingsStoreImpl) Update(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("FlowRateLimitSettings", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur FlowRateLimitSettings
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *FlowRateLimitSettingsStoreImpl) Put(ctx context.Context, m *FlowRateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(FlowRateLimitSettingsAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("FlowRateLimitSettings", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *FlowRateLimitSettingsStoreImpl) Delete(ctx context.Context, m *FlowRateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("FlowRateLimitSettings", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *FlowRateLimitSettingsStoreImpl) LoadOne(key string) (*FlowRateLimitSettings, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj FlowRateLimitSettings
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse FlowRateLimitSettings data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *FlowRateLimitSettingsStoreImpl) Get(ctx context.Context, key *FlowRateLimitSettingsKey, buf *FlowRateLimitSettings) bool {
	keystr := objstore.DbKeyString("FlowRateLimitSettings", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *FlowRateLimitSettingsStoreImpl) STMGet(stm concurrency.STM, key *FlowRateLimitSettingsKey, buf *FlowRateLimitSettings) bool {
	keystr := objstore.DbKeyString("FlowRateLimitSettings", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *FlowRateLimitSettingsStoreImpl) parseGetData(val []byte, buf *FlowRateLimitSettings) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = FlowRateLimitSettings{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *FlowRateLimitSettingsStoreImpl) STMPut(stm concurrency.STM, obj *FlowRateLimitSettings, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("FlowRateLimitSettings", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("FlowRateLimitSettings json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *FlowRateLimitSettingsStoreImpl) STMDel(stm concurrency.STM, key *FlowRateLimitSettingsKey) {
	keystr := objstore.DbKeyString("FlowRateLimitSettings", key)
	stm.Del(keystr)
}

type FlowRateLimitSettingsKeyWatcher struct {
	cb func(ctx context.Context)
}

type FlowRateLimitSettingsCacheData struct {
	Obj    *FlowRateLimitSettings
	ModRev int64
}

// FlowRateLimitSettingsCache caches FlowRateLimitSettings objects in memory in a hash table
// and keeps them in sync with the database.
type FlowRateLimitSettingsCache struct {
	Objs          map[FlowRateLimitSettingsKey]*FlowRateLimitSettingsCacheData
	Mux           util.Mutex
	List          map[FlowRateLimitSettingsKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *FlowRateLimitSettingsKey, old *FlowRateLimitSettings, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *FlowRateLimitSettings, new *FlowRateLimitSettings)
	DeletedCbs    []func(ctx context.Context, old *FlowRateLimitSettings)
	KeyWatchers   map[FlowRateLimitSettingsKey][]*FlowRateLimitSettingsKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *FlowRateLimitSettingsKey)
	DeletedKeyCbs []func(ctx context.Context, key *FlowRateLimitSettingsKey)
}

func NewFlowRateLimitSettingsCache() *FlowRateLimitSettingsCache {
	cache := FlowRateLimitSettingsCache{}
	InitFlowRateLimitSettingsCache(&cache)
	return &cache
}

func InitFlowRateLimitSettingsCache(cache *FlowRateLimitSettingsCache) {
	cache.Objs = make(map[FlowRateLimitSettingsKey]*FlowRateLimitSettingsCacheData)
	cache.KeyWatchers = make(map[FlowRateLimitSettingsKey][]*FlowRateLimitSettingsKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *FlowRateLimitSettingsCache) GetTypeString() string {
	return "FlowRateLimitSettings"
}

func (c *FlowRateLimitSettingsCache) Get(key *FlowRateLimitSettingsKey, valbuf *FlowRateLimitSettings) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *FlowRateLimitSettingsCache) GetWithRev(key *FlowRateLimitSettingsKey, valbuf *FlowRateLimitSettings, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *FlowRateLimitSettingsCache) HasKey(key *FlowRateLimitSettingsKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *FlowRateLimitSettingsCache) GetAllKeys(ctx context.Context, cb func(key *FlowRateLimitSettingsKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *FlowRateLimitSettingsCache) Update(ctx context.Context, in *FlowRateLimitSettings, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *FlowRateLimitSettings) (*FlowRateLimitSettings, bool) {
		return in, true
	})
}

func (c *FlowRateLimitSettingsCache) UpdateModFunc(ctx context.Context, key *FlowRateLimitSettingsKey, modRev int64, modFunc func(old *FlowRateLimitSettings) (new *FlowRateLimitSettings, changed bool)) {
	c.Mux.Lock()
	var old *FlowRateLimitSettings
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &FlowRateLimitSettings{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &FlowRateLimitSettings{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &FlowRateLimitSettingsCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *FlowRateLimitSettingsCache) Delete(ctx context.Context, in *FlowRateLimitSettings, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *FlowRateLimitSettings) bool {
		return true
	})
}

func (c *FlowRateLimitSettingsCache) DeleteCondFunc(ctx context.Context, in *FlowRateLimitSettings, modRev int64, condFunc func(old *FlowRateLimitSettings) bool) {
	c.Mux.Lock()
	var old *FlowRateLimitSettings
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *FlowRateLimitSettingsCache) Prune(ctx context.Context, validKeys map[FlowRateLimitSettingsKey]struct{}) {
	notify := make(map[FlowRateLimitSettingsKey]*FlowRateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *FlowRateLimitSettingsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *FlowRateLimitSettingsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *FlowRateLimitSettingsCache) Show(filter *FlowRateLimitSettings, cb func(ret *FlowRateLimitSettings) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func FlowRateLimitSettingsGenericNotifyCb(fn func(key *FlowRateLimitSettingsKey, old *FlowRateLimitSettings)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*FlowRateLimitSettingsKey), obj.(*FlowRateLimitSettings))
	}
}

func (c *FlowRateLimitSettingsCache) SetNotifyCb(fn func(ctx context.Context, obj *FlowRateLimitSettingsKey, old *FlowRateLimitSettings, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *FlowRateLimitSettingsKey, old *FlowRateLimitSettings, modRev int64){fn}
}

func (c *FlowRateLimitSettingsCache) SetUpdatedCb(fn func(ctx context.Context, old *FlowRateLimitSettings, new *FlowRateLimitSettings)) {
	c.UpdatedCbs = []func(ctx context.Context, old *FlowRateLimitSettings, new *FlowRateLimitSettings){fn}
}

func (c *FlowRateLimitSettingsCache) SetDeletedCb(fn func(ctx context.Context, old *FlowRateLimitSettings)) {
	c.DeletedCbs = []func(ctx context.Context, old *FlowRateLimitSettings){fn}
}

func (c *FlowRateLimitSettingsCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *FlowRateLimitSettingsKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *FlowRateLimitSettingsKey){fn}
}

func (c *FlowRateLimitSettingsCache) SetDeletedKeyCb(fn func(ctx context.Context, key *FlowRateLimitSettingsKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *FlowRateLimitSettingsKey){fn}
}

func (c *FlowRateLimitSettingsCache) AddUpdatedCb(fn func(ctx context.Context, old *FlowRateLimitSettings, new *FlowRateLimitSettings)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *FlowRateLimitSettingsCache) AddDeletedCb(fn func(ctx context.Context, old *FlowRateLimitSettings)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *FlowRateLimitSettingsCache) AddNotifyCb(fn func(ctx context.Context, obj *FlowRateLimitSettingsKey, old *FlowRateLimitSettings, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *FlowRateLimitSettingsCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *FlowRateLimitSettingsKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *FlowRateLimitSettingsCache) AddDeletedKeyCb(fn func(ctx context.Context, key *FlowRateLimitSettingsKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *FlowRateLimitSettingsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *FlowRateLimitSettingsCache) WatchKey(key *FlowRateLimitSettingsKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*FlowRateLimitSettingsKeyWatcher, 0)
	}
	watcher := FlowRateLimitSettingsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching FlowRateLimitSettings", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *FlowRateLimitSettingsCache) TriggerKeyWatchers(ctx context.Context, key *FlowRateLimitSettingsKey) {
	watchers := make([]*FlowRateLimitSettingsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *FlowRateLimitSettingsCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := FlowRateLimitSettings{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse FlowRateLimitSettings data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *FlowRateLimitSettingsCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := FlowRateLimitSettings{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	FlowRateLimitSettingsKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *FlowRateLimitSettingsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[FlowRateLimitSettingsKey]struct{})
}

func (c *FlowRateLimitSettingsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[FlowRateLimitSettingsKey]*FlowRateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *FlowRateLimitSettingsCache) UsesOrg(org string) bool {
	return false
}

func (m *FlowRateLimitSettings) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *FlowRateLimitSettings) GetKey() *FlowRateLimitSettingsKey {
	return &m.Key
}

func (m *FlowRateLimitSettings) GetKeyVal() FlowRateLimitSettingsKey {
	return m.Key
}

func (m *FlowRateLimitSettings) SetKey(key *FlowRateLimitSettingsKey) {
	m.Key = *key
}

func CmpSortFlowRateLimitSettings(a FlowRateLimitSettings, b FlowRateLimitSettings) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *FlowRateLimitSettings) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Settings.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *MaxReqsSettings) Matches(o *MaxReqsSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.MaxReqsAlgorithm != 0 {
		if o.MaxReqsAlgorithm != m.MaxReqsAlgorithm {
			return false
		}
	}
	if !opts.Filter || o.MaxRequests != 0 {
		if o.MaxRequests != m.MaxRequests {
			return false
		}
	}
	if !opts.Filter || o.Interval != 0 {
		if o.Interval != m.Interval {
			return false
		}
	}
	return true
}

func (m *MaxReqsSettings) CopyInFields(src *MaxReqsSettings) int {
	changed := 0
	if m.MaxReqsAlgorithm != src.MaxReqsAlgorithm {
		m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
		changed++
	}
	if m.MaxRequests != src.MaxRequests {
		m.MaxRequests = src.MaxRequests
		changed++
	}
	if m.Interval != src.Interval {
		m.Interval = src.Interval
		changed++
	}
	return changed
}

func (m *MaxReqsSettings) DeepCopyIn(src *MaxReqsSettings) {
	m.MaxReqsAlgorithm = src.MaxReqsAlgorithm
	m.MaxRequests = src.MaxRequests
	m.Interval = src.Interval
}

// Helper method to check that enums have valid values
func (m *MaxReqsSettings) ValidateEnums() error {
	if _, ok := MaxReqsRateLimitAlgorithm_name[int32(m.MaxReqsAlgorithm)]; !ok {
		return errors.New("invalid MaxReqsAlgorithm")
	}
	return nil
}

func (m *MaxReqsRateLimitSettingsKey) Matches(o *MaxReqsRateLimitSettingsKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.MaxReqsSettingsName != "" {
		if o.MaxReqsSettingsName != m.MaxReqsSettingsName {
			return false
		}
	}
	if !m.RateLimitKey.Matches(&o.RateLimitKey, fopts...) {
		return false
	}
	return true
}

func (m *MaxReqsRateLimitSettingsKey) CopyInFields(src *MaxReqsRateLimitSettingsKey) int {
	changed := 0
	if m.MaxReqsSettingsName != src.MaxReqsSettingsName {
		m.MaxReqsSettingsName = src.MaxReqsSettingsName
		changed++
	}
	if m.RateLimitKey.ApiName != src.RateLimitKey.ApiName {
		m.RateLimitKey.ApiName = src.RateLimitKey.ApiName
		changed++
	}
	if m.RateLimitKey.ApiEndpointType != src.RateLimitKey.ApiEndpointType {
		m.RateLimitKey.ApiEndpointType = src.RateLimitKey.ApiEndpointType
		changed++
	}
	if m.RateLimitKey.RateLimitTarget != src.RateLimitKey.RateLimitTarget {
		m.RateLimitKey.RateLimitTarget = src.RateLimitKey.RateLimitTarget
		changed++
	}
	return changed
}

func (m *MaxReqsRateLimitSettingsKey) DeepCopyIn(src *MaxReqsRateLimitSettingsKey) {
	m.MaxReqsSettingsName = src.MaxReqsSettingsName
	m.RateLimitKey.DeepCopyIn(&src.RateLimitKey)
}

func (m *MaxReqsRateLimitSettingsKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal MaxReqsRateLimitSettingsKey key string", "obj", m)
	}
	return string(key)
}

func MaxReqsRateLimitSettingsKeyStringParse(str string, key *MaxReqsRateLimitSettingsKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal MaxReqsRateLimitSettingsKey key string", "str", str)
	}
}

func (m *MaxReqsRateLimitSettingsKey) NotFoundError() error {
	return fmt.Errorf("MaxReqsRateLimitSettings key %s not found", m.GetKeyString())
}

func (m *MaxReqsRateLimitSettingsKey) ExistsError() error {
	return fmt.Errorf("MaxReqsRateLimitSettings key %s already exists", m.GetKeyString())
}

func (m *MaxReqsRateLimitSettingsKey) BeingDeletedError() error {
	return fmt.Errorf("MaxReqsRateLimitSettings %s is being deleted", m.GetKeyString())
}

var MaxReqsRateLimitSettingsKeyTagMaxReqsSettingsName = "maxreqssettingsname"

func (m *MaxReqsRateLimitSettingsKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["maxreqssettingsname"] = m.MaxReqsSettingsName
	tags["apiname"] = m.RateLimitKey.ApiName
	tags["apiendpointtype"] = ApiEndpointType_name[int32(m.RateLimitKey.ApiEndpointType)]
	tags["ratelimittarget"] = RateLimitTarget_name[int32(m.RateLimitKey.RateLimitTarget)]
	return tags
}

// Helper method to check that enums have valid values
func (m *MaxReqsRateLimitSettingsKey) ValidateEnums() error {
	if err := m.RateLimitKey.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *MaxReqsRateLimitSettings) Matches(o *MaxReqsRateLimitSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !m.Settings.Matches(&o.Settings, fopts...) {
		return false
	}
	return true
}

const MaxReqsRateLimitSettingsFieldKey = "2"
const MaxReqsRateLimitSettingsFieldKeyMaxReqsSettingsName = "2.1"
const MaxReqsRateLimitSettingsFieldKeyRateLimitKey = "2.2"
const MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiName = "2.2.1"
const MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType = "2.2.2"
const MaxReqsRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget = "2.2.3"
const MaxReqsRateLimitSettingsFieldSettings = "3"
const MaxReqsRateLimitSettingsFieldSettingsMaxReqsAlgorithm = "3.1"
const MaxReqsRateLimitSettingsFieldSettingsMaxRequests = "3.2"
const MaxReqsRateLimitSettingsFieldSettingsInterval = "3.3"

var MaxReqsRateLimitSettingsAllFields = []string{
	MaxReqsRateLimitSettingsFieldKeyMaxReqsSettingsName,
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiName,
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType,
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget,
	MaxReqsRateLimitSettingsFieldSettingsMaxReqsAlgorithm,
	MaxReqsRateLimitSettingsFieldSettingsMaxRequests,
	MaxReqsRateLimitSettingsFieldSettingsInterval,
}

var MaxReqsRateLimitSettingsAllFieldsMap = map[string]struct{}{
	MaxReqsRateLimitSettingsFieldKeyMaxReqsSettingsName:         struct{}{},
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiName:         struct{}{},
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType: struct{}{},
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget: struct{}{},
	MaxReqsRateLimitSettingsFieldSettingsMaxReqsAlgorithm:       struct{}{},
	MaxReqsRateLimitSettingsFieldSettingsMaxRequests:            struct{}{},
	MaxReqsRateLimitSettingsFieldSettingsInterval:               struct{}{},
}

var MaxReqsRateLimitSettingsAllFieldsStringMap = map[string]string{
	MaxReqsRateLimitSettingsFieldKeyMaxReqsSettingsName:         "Key Max Reqs Settings Name",
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiName:         "Key Rate Limit Key Api Name",
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType: "Key Rate Limit Key Api Endpoint Type",
	MaxReqsRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget: "Key Rate Limit Key Rate Limit Target",
	MaxReqsRateLimitSettingsFieldSettingsMaxReqsAlgorithm:       "Settings Max Reqs Algorithm",
	MaxReqsRateLimitSettingsFieldSettingsMaxRequests:            "Settings Max Requests",
	MaxReqsRateLimitSettingsFieldSettingsInterval:               "Settings Interval",
}

func (m *MaxReqsRateLimitSettings) IsKeyField(s string) bool {
	return strings.HasPrefix(s, MaxReqsRateLimitSettingsFieldKey+".") || s == MaxReqsRateLimitSettingsFieldKey
}

func (m *MaxReqsRateLimitSettings) DiffFields(o *MaxReqsRateLimitSettings, fields map[string]struct{}) {
	if m.Key.MaxReqsSettingsName != o.Key.MaxReqsSettingsName {
		fields[MaxReqsRateLimitSettingsFieldKeyMaxReqsSettingsName] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.ApiName != o.Key.RateLimitKey.ApiName {
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiName] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.ApiEndpointType != o.Key.RateLimitKey.ApiEndpointType {
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKeyApiEndpointType] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Key.RateLimitKey.RateLimitTarget != o.Key.RateLimitKey.RateLimitTarget {
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKeyRateLimitTarget] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKeyRateLimitKey] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldKey] = struct{}{}
	}
	if m.Settings.MaxReqsAlgorithm != o.Settings.MaxReqsAlgorithm {
		fields[MaxReqsRateLimitSettingsFieldSettingsMaxReqsAlgorithm] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldSettings] = struct{}{}
	}
	if m.Settings.MaxRequests != o.Settings.MaxRequests {
		fields[MaxReqsRateLimitSettingsFieldSettingsMaxRequests] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldSettings] = struct{}{}
	}
	if m.Settings.Interval != o.Settings.Interval {
		fields[MaxReqsRateLimitSettingsFieldSettingsInterval] = struct{}{}
		fields[MaxReqsRateLimitSettingsFieldSettings] = struct{}{}
	}
}

func (m *MaxReqsRateLimitSettings) CopyInFields(src *MaxReqsRateLimitSettings) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if _, set := fmap["2.1"]; set {
			if m.Key.MaxReqsSettingsName != src.Key.MaxReqsSettingsName {
				m.Key.MaxReqsSettingsName = src.Key.MaxReqsSettingsName
				changed++
			}
		}
		if _, set := fmap["2.2"]; set {
			if _, set := fmap["2.2.1"]; set {
				if m.Key.RateLimitKey.ApiName != src.Key.RateLimitKey.ApiName {
					m.Key.RateLimitKey.ApiName = src.Key.RateLimitKey.ApiName
					changed++
				}
			}
			if _, set := fmap["2.2.2"]; set {
				if m.Key.RateLimitKey.ApiEndpointType != src.Key.RateLimitKey.ApiEndpointType {
					m.Key.RateLimitKey.ApiEndpointType = src.Key.RateLimitKey.ApiEndpointType
					changed++
				}
			}
			if _, set := fmap["2.2.3"]; set {
				if m.Key.RateLimitKey.RateLimitTarget != src.Key.RateLimitKey.RateLimitTarget {
					m.Key.RateLimitKey.RateLimitTarget = src.Key.RateLimitKey.RateLimitTarget
					changed++
				}
			}
		}
	}
	if _, set := fmap["3"]; set {
		if _, set := fmap["3.1"]; set {
			if m.Settings.MaxReqsAlgorithm != src.Settings.MaxReqsAlgorithm {
				m.Settings.MaxReqsAlgorithm = src.Settings.MaxReqsAlgorithm
				changed++
			}
		}
		if _, set := fmap["3.2"]; set {
			if m.Settings.MaxRequests != src.Settings.MaxRequests {
				m.Settings.MaxRequests = src.Settings.MaxRequests
				changed++
			}
		}
		if _, set := fmap["3.3"]; set {
			if m.Settings.Interval != src.Settings.Interval {
				m.Settings.Interval = src.Settings.Interval
				changed++
			}
		}
	}
	return changed
}

func (m *MaxReqsRateLimitSettings) DeepCopyIn(src *MaxReqsRateLimitSettings) {
	m.Key.DeepCopyIn(&src.Key)
	m.Settings.DeepCopyIn(&src.Settings)
}

func (s *MaxReqsRateLimitSettings) HasFields() bool {
	return true
}

type MaxReqsRateLimitSettingsStore interface {
	Create(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*MaxReqsRateLimitSettings, int64, error)
	Get(ctx context.Context, key *MaxReqsRateLimitSettingsKey, buf *MaxReqsRateLimitSettings) bool
	STMGet(stm concurrency.STM, key *MaxReqsRateLimitSettingsKey, buf *MaxReqsRateLimitSettings) bool
	STMPut(stm concurrency.STM, obj *MaxReqsRateLimitSettings, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *MaxReqsRateLimitSettingsKey)
}

type MaxReqsRateLimitSettingsStoreImpl struct {
	kvstore objstore.KVStore
}

func NewMaxReqsRateLimitSettingsStore(kvstore objstore.KVStore) *MaxReqsRateLimitSettingsStoreImpl {
	return &MaxReqsRateLimitSettingsStoreImpl{kvstore: kvstore}
}

func (s *MaxReqsRateLimitSettingsStoreImpl) Create(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(MaxReqsRateLimitSettingsAllFieldsMap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("MaxReqsRateLimitSettings", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *MaxReqsRateLimitSettingsStoreImpl) Update(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error) {
	fmap := MakeFieldMap(m.Fields)
	err := m.Validate(fmap)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("MaxReqsRateLimitSettings", m.GetKey())
	var vers int64 = 0
	curBytes, vers, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, err
	}
	var cur MaxReqsRateLimitSettings
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *MaxReqsRateLimitSettingsStoreImpl) Put(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(MaxReqsRateLimitSettingsAllFieldsMap)
	m.Fields = nil
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("MaxReqsRateLimitSettings", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *MaxReqsRateLimitSettingsStoreImpl) Delete(ctx context.Context, m *MaxReqsRateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("MaxReqsRateLimitSettings", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *MaxReqsRateLimitSettingsStoreImpl) LoadOne(key string) (*MaxReqsRateLimitSettings, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj MaxReqsRateLimitSettings
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse MaxReqsRateLimitSettings data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *MaxReqsRateLimitSettingsStoreImpl) Get(ctx context.Context, key *MaxReqsRateLimitSettingsKey, buf *MaxReqsRateLimitSettings) bool {
	keystr := objstore.DbKeyString("MaxReqsRateLimitSettings", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *MaxReqsRateLimitSettingsStoreImpl) STMGet(stm concurrency.STM, key *MaxReqsRateLimitSettingsKey, buf *MaxReqsRateLimitSettings) bool {
	keystr := objstore.DbKeyString("MaxReqsRateLimitSettings", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *MaxReqsRateLimitSettingsStoreImpl) parseGetData(val []byte, buf *MaxReqsRateLimitSettings) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = MaxReqsRateLimitSettings{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *MaxReqsRateLimitSettingsStoreImpl) STMPut(stm concurrency.STM, obj *MaxReqsRateLimitSettings, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("MaxReqsRateLimitSettings", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("MaxReqsRateLimitSettings json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *MaxReqsRateLimitSettingsStoreImpl) STMDel(stm concurrency.STM, key *MaxReqsRateLimitSettingsKey) {
	keystr := objstore.DbKeyString("MaxReqsRateLimitSettings", key)
	stm.Del(keystr)
}

type MaxReqsRateLimitSettingsKeyWatcher struct {
	cb func(ctx context.Context)
}

type MaxReqsRateLimitSettingsCacheData struct {
	Obj    *MaxReqsRateLimitSettings
	ModRev int64
}

// MaxReqsRateLimitSettingsCache caches MaxReqsRateLimitSettings objects in memory in a hash table
// and keeps them in sync with the database.
type MaxReqsRateLimitSettingsCache struct {
	Objs          map[MaxReqsRateLimitSettingsKey]*MaxReqsRateLimitSettingsCacheData
	Mux           util.Mutex
	List          map[MaxReqsRateLimitSettingsKey]struct{}
	FlushAll      bool
	NotifyCbs     []func(ctx context.Context, obj *MaxReqsRateLimitSettingsKey, old *MaxReqsRateLimitSettings, modRev int64)
	UpdatedCbs    []func(ctx context.Context, old *MaxReqsRateLimitSettings, new *MaxReqsRateLimitSettings)
	DeletedCbs    []func(ctx context.Context, old *MaxReqsRateLimitSettings)
	KeyWatchers   map[MaxReqsRateLimitSettingsKey][]*MaxReqsRateLimitSettingsKeyWatcher
	UpdatedKeyCbs []func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)
	DeletedKeyCbs []func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)
}

func NewMaxReqsRateLimitSettingsCache() *MaxReqsRateLimitSettingsCache {
	cache := MaxReqsRateLimitSettingsCache{}
	InitMaxReqsRateLimitSettingsCache(&cache)
	return &cache
}

func InitMaxReqsRateLimitSettingsCache(cache *MaxReqsRateLimitSettingsCache) {
	cache.Objs = make(map[MaxReqsRateLimitSettingsKey]*MaxReqsRateLimitSettingsCacheData)
	cache.KeyWatchers = make(map[MaxReqsRateLimitSettingsKey][]*MaxReqsRateLimitSettingsKeyWatcher)
	cache.NotifyCbs = nil
	cache.UpdatedCbs = nil
	cache.DeletedCbs = nil
	cache.UpdatedKeyCbs = nil
	cache.DeletedKeyCbs = nil
}

func (c *MaxReqsRateLimitSettingsCache) GetTypeString() string {
	return "MaxReqsRateLimitSettings"
}

func (c *MaxReqsRateLimitSettingsCache) Get(key *MaxReqsRateLimitSettingsKey, valbuf *MaxReqsRateLimitSettings) bool {
	var modRev int64
	return c.GetWithRev(key, valbuf, &modRev)
}

func (c *MaxReqsRateLimitSettingsCache) GetWithRev(key *MaxReqsRateLimitSettingsKey, valbuf *MaxReqsRateLimitSettings, modRev *int64) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	inst, found := c.Objs[*key]
	if found {
		valbuf.DeepCopyIn(inst.Obj)
		*modRev = inst.ModRev
	}
	return found
}

func (c *MaxReqsRateLimitSettingsCache) HasKey(key *MaxReqsRateLimitSettingsKey) bool {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	_, found := c.Objs[*key]
	return found
}

func (c *MaxReqsRateLimitSettingsCache) GetAllKeys(ctx context.Context, cb func(key *MaxReqsRateLimitSettingsKey, modRev int64)) {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for key, data := range c.Objs {
		cb(&key, data.ModRev)
	}
}

func (c *MaxReqsRateLimitSettingsCache) Update(ctx context.Context, in *MaxReqsRateLimitSettings, modRev int64) {
	c.UpdateModFunc(ctx, in.GetKey(), modRev, func(old *MaxReqsRateLimitSettings) (*MaxReqsRateLimitSettings, bool) {
		return in, true
	})
}

func (c *MaxReqsRateLimitSettingsCache) UpdateModFunc(ctx context.Context, key *MaxReqsRateLimitSettingsKey, modRev int64, modFunc func(old *MaxReqsRateLimitSettings) (new *MaxReqsRateLimitSettings, changed bool)) {
	c.Mux.Lock()
	var old *MaxReqsRateLimitSettings
	if oldData, found := c.Objs[*key]; found {
		old = oldData.Obj
	}
	new, changed := modFunc(old)
	if !changed {
		c.Mux.Unlock()
		return
	}
	for _, cb := range c.UpdatedCbs {
		newCopy := &MaxReqsRateLimitSettings{}
		newCopy.DeepCopyIn(new)
		defer cb(ctx, old, newCopy)
	}
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			defer cb(ctx, new.GetKey(), old, modRev)
		}
	}
	for _, cb := range c.UpdatedKeyCbs {
		defer cb(ctx, key)
	}
	store := &MaxReqsRateLimitSettings{}
	store.DeepCopyIn(new)
	c.Objs[new.GetKeyVal()] = &MaxReqsRateLimitSettingsCacheData{
		Obj:    store,
		ModRev: modRev,
	}
	log.SpanLog(ctx, log.DebugLevelApi, "cache update", "new", store)
	c.Mux.Unlock()
	c.TriggerKeyWatchers(ctx, new.GetKey())
}

func (c *MaxReqsRateLimitSettingsCache) Delete(ctx context.Context, in *MaxReqsRateLimitSettings, modRev int64) {
	c.DeleteCondFunc(ctx, in, modRev, func(old *MaxReqsRateLimitSettings) bool {
		return true
	})
}

func (c *MaxReqsRateLimitSettingsCache) DeleteCondFunc(ctx context.Context, in *MaxReqsRateLimitSettings, modRev int64, condFunc func(old *MaxReqsRateLimitSettings) bool) {
	c.Mux.Lock()
	var old *MaxReqsRateLimitSettings
	oldData, found := c.Objs[in.GetKeyVal()]
	if found {
		old = oldData.Obj
		if !condFunc(old) {
			c.Mux.Unlock()
			return
		}
	}
	delete(c.Objs, in.GetKeyVal())
	log.SpanLog(ctx, log.DebugLevelApi, "cache delete")
	c.Mux.Unlock()
	for _, cb := range c.NotifyCbs {
		if cb != nil {
			cb(ctx, in.GetKey(), old, modRev)
		}
	}
	if old != nil {
		for _, cb := range c.DeletedCbs {
			cb(ctx, old)
		}
	}
	for _, cb := range c.DeletedKeyCbs {
		cb(ctx, in.GetKey())
	}
	c.TriggerKeyWatchers(ctx, in.GetKey())
}

func (c *MaxReqsRateLimitSettingsCache) Prune(ctx context.Context, validKeys map[MaxReqsRateLimitSettingsKey]struct{}) {
	notify := make(map[MaxReqsRateLimitSettingsKey]*MaxReqsRateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, _ := range c.Objs {
		if _, ok := validKeys[key]; !ok {
			if len(c.NotifyCbs) > 0 || len(c.DeletedKeyCbs) > 0 || len(c.DeletedCbs) > 0 {
				notify[key] = c.Objs[key]
			}
			delete(c.Objs, key)
		}
	}
	c.Mux.Unlock()
	for key, old := range notify {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, old.Obj, old.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if old.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, old.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *MaxReqsRateLimitSettingsCache) GetCount() int {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	return len(c.Objs)
}

func (c *MaxReqsRateLimitSettingsCache) Flush(ctx context.Context, notifyId int64) {
}

func (c *MaxReqsRateLimitSettingsCache) Show(filter *MaxReqsRateLimitSettings, cb func(ret *MaxReqsRateLimitSettings) error) error {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	for _, data := range c.Objs {
		if !data.Obj.Matches(filter, MatchFilter()) {
			continue
		}
		err := cb(data.Obj)
		if err != nil {
			return err
		}
	}
	return nil
}

func MaxReqsRateLimitSettingsGenericNotifyCb(fn func(key *MaxReqsRateLimitSettingsKey, old *MaxReqsRateLimitSettings)) func(objstore.ObjKey, objstore.Obj) {
	return func(objkey objstore.ObjKey, obj objstore.Obj) {
		fn(objkey.(*MaxReqsRateLimitSettingsKey), obj.(*MaxReqsRateLimitSettings))
	}
}

func (c *MaxReqsRateLimitSettingsCache) SetNotifyCb(fn func(ctx context.Context, obj *MaxReqsRateLimitSettingsKey, old *MaxReqsRateLimitSettings, modRev int64)) {
	c.NotifyCbs = []func(ctx context.Context, obj *MaxReqsRateLimitSettingsKey, old *MaxReqsRateLimitSettings, modRev int64){fn}
}

func (c *MaxReqsRateLimitSettingsCache) SetUpdatedCb(fn func(ctx context.Context, old *MaxReqsRateLimitSettings, new *MaxReqsRateLimitSettings)) {
	c.UpdatedCbs = []func(ctx context.Context, old *MaxReqsRateLimitSettings, new *MaxReqsRateLimitSettings){fn}
}

func (c *MaxReqsRateLimitSettingsCache) SetDeletedCb(fn func(ctx context.Context, old *MaxReqsRateLimitSettings)) {
	c.DeletedCbs = []func(ctx context.Context, old *MaxReqsRateLimitSettings){fn}
}

func (c *MaxReqsRateLimitSettingsCache) SetUpdatedKeyCb(fn func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)) {
	c.UpdatedKeyCbs = []func(ctx context.Context, key *MaxReqsRateLimitSettingsKey){fn}
}

func (c *MaxReqsRateLimitSettingsCache) SetDeletedKeyCb(fn func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)) {
	c.DeletedKeyCbs = []func(ctx context.Context, key *MaxReqsRateLimitSettingsKey){fn}
}

func (c *MaxReqsRateLimitSettingsCache) AddUpdatedCb(fn func(ctx context.Context, old *MaxReqsRateLimitSettings, new *MaxReqsRateLimitSettings)) {
	c.UpdatedCbs = append(c.UpdatedCbs, fn)
}

func (c *MaxReqsRateLimitSettingsCache) AddDeletedCb(fn func(ctx context.Context, old *MaxReqsRateLimitSettings)) {
	c.DeletedCbs = append(c.DeletedCbs, fn)
}

func (c *MaxReqsRateLimitSettingsCache) AddNotifyCb(fn func(ctx context.Context, obj *MaxReqsRateLimitSettingsKey, old *MaxReqsRateLimitSettings, modRev int64)) {
	c.NotifyCbs = append(c.NotifyCbs, fn)
}

func (c *MaxReqsRateLimitSettingsCache) AddUpdatedKeyCb(fn func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)) {
	c.UpdatedKeyCbs = append(c.UpdatedKeyCbs, fn)
}

func (c *MaxReqsRateLimitSettingsCache) AddDeletedKeyCb(fn func(ctx context.Context, key *MaxReqsRateLimitSettingsKey)) {
	c.DeletedKeyCbs = append(c.DeletedKeyCbs, fn)
}

func (c *MaxReqsRateLimitSettingsCache) SetFlushAll() {
	c.FlushAll = true
}

func (c *MaxReqsRateLimitSettingsCache) WatchKey(key *MaxReqsRateLimitSettingsKey, cb func(ctx context.Context)) context.CancelFunc {
	c.Mux.Lock()
	defer c.Mux.Unlock()
	list, ok := c.KeyWatchers[*key]
	if !ok {
		list = make([]*MaxReqsRateLimitSettingsKeyWatcher, 0)
	}
	watcher := MaxReqsRateLimitSettingsKeyWatcher{cb: cb}
	c.KeyWatchers[*key] = append(list, &watcher)
	log.DebugLog(log.DebugLevelApi, "Watching MaxReqsRateLimitSettings", "key", key)
	return func() {
		c.Mux.Lock()
		defer c.Mux.Unlock()
		list, ok := c.KeyWatchers[*key]
		if !ok {
			return
		}
		for ii, _ := range list {
			if list[ii] != &watcher {
				continue
			}
			if len(list) == 1 {
				delete(c.KeyWatchers, *key)
				return
			}
			list[ii] = list[len(list)-1]
			list[len(list)-1] = nil
			c.KeyWatchers[*key] = list[:len(list)-1]
			return
		}
	}
}

func (c *MaxReqsRateLimitSettingsCache) TriggerKeyWatchers(ctx context.Context, key *MaxReqsRateLimitSettingsKey) {
	watchers := make([]*MaxReqsRateLimitSettingsKeyWatcher, 0)
	c.Mux.Lock()
	if list, ok := c.KeyWatchers[*key]; ok {
		watchers = append(watchers, list...)
	}
	c.Mux.Unlock()
	for ii, _ := range watchers {
		watchers[ii].cb(ctx)
	}
}

// Note that we explicitly ignore the global revision number, because of the way
// the notify framework sends updates (by hashing keys and doing lookups, instead
// of sequentially through a history buffer), updates may be done out-of-order
// or multiple updates compressed into one update, so the state of the cache at
// any point in time may not by in sync with a particular database revision number.

func (c *MaxReqsRateLimitSettingsCache) SyncUpdate(ctx context.Context, key, val []byte, rev, modRev int64) {
	obj := MaxReqsRateLimitSettings{}
	err := json.Unmarshal(val, &obj)
	if err != nil {
		log.WarnLog("Failed to parse MaxReqsRateLimitSettings data", "val", string(val), "err", err)
		return
	}
	c.Update(ctx, &obj, modRev)
	c.Mux.Lock()
	if c.List != nil {
		c.List[obj.GetKeyVal()] = struct{}{}
	}
	c.Mux.Unlock()
}

func (c *MaxReqsRateLimitSettingsCache) SyncDelete(ctx context.Context, key []byte, rev, modRev int64) {
	obj := MaxReqsRateLimitSettings{}
	keystr := objstore.DbKeyPrefixRemove(string(key))
	MaxReqsRateLimitSettingsKeyStringParse(keystr, obj.GetKey())
	c.Delete(ctx, &obj, modRev)
}

func (c *MaxReqsRateLimitSettingsCache) SyncListStart(ctx context.Context) {
	c.List = make(map[MaxReqsRateLimitSettingsKey]struct{})
}

func (c *MaxReqsRateLimitSettingsCache) SyncListEnd(ctx context.Context) {
	deleted := make(map[MaxReqsRateLimitSettingsKey]*MaxReqsRateLimitSettingsCacheData)
	c.Mux.Lock()
	for key, val := range c.Objs {
		if _, found := c.List[key]; !found {
			deleted[key] = val
			delete(c.Objs, key)
		}
	}
	c.List = nil
	c.Mux.Unlock()
	for key, val := range deleted {
		for _, cb := range c.NotifyCbs {
			if cb != nil {
				cb(ctx, &key, val.Obj, val.ModRev)
			}
		}
		for _, cb := range c.DeletedKeyCbs {
			cb(ctx, &key)
		}
		if val.Obj != nil {
			for _, cb := range c.DeletedCbs {
				cb(ctx, val.Obj)
			}
		}
		c.TriggerKeyWatchers(ctx, &key)
	}
}

func (c *MaxReqsRateLimitSettingsCache) UsesOrg(org string) bool {
	return false
}

func (m *MaxReqsRateLimitSettings) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *MaxReqsRateLimitSettings) GetKey() *MaxReqsRateLimitSettingsKey {
	return &m.Key
}

func (m *MaxReqsRateLimitSettings) GetKeyVal() MaxReqsRateLimitSettingsKey {
	return m.Key
}

func (m *MaxReqsRateLimitSettings) SetKey(key *MaxReqsRateLimitSettingsKey) {
	m.Key = *key
}

func CmpSortMaxReqsRateLimitSettings(a MaxReqsRateLimitSettings, b MaxReqsRateLimitSettings) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *MaxReqsRateLimitSettings) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	if err := m.Settings.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *RateLimitSettingsKey) Matches(o *RateLimitSettingsKey, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.ApiName != "" {
		if o.ApiName != m.ApiName {
			return false
		}
	}
	if !opts.Filter || o.ApiEndpointType != 0 {
		if o.ApiEndpointType != m.ApiEndpointType {
			return false
		}
	}
	if !opts.Filter || o.RateLimitTarget != 0 {
		if o.RateLimitTarget != m.RateLimitTarget {
			return false
		}
	}
	return true
}

func (m *RateLimitSettingsKey) CopyInFields(src *RateLimitSettingsKey) int {
	changed := 0
	if m.ApiName != src.ApiName {
		m.ApiName = src.ApiName
		changed++
	}
	if m.ApiEndpointType != src.ApiEndpointType {
		m.ApiEndpointType = src.ApiEndpointType
		changed++
	}
	if m.RateLimitTarget != src.RateLimitTarget {
		m.RateLimitTarget = src.RateLimitTarget
		changed++
	}
	return changed
}

func (m *RateLimitSettingsKey) DeepCopyIn(src *RateLimitSettingsKey) {
	m.ApiName = src.ApiName
	m.ApiEndpointType = src.ApiEndpointType
	m.RateLimitTarget = src.RateLimitTarget
}

func (m *RateLimitSettingsKey) GetKeyString() string {
	key, err := json.Marshal(m)
	if err != nil {
		log.FatalLog("Failed to marshal RateLimitSettingsKey key string", "obj", m)
	}
	return string(key)
}

func RateLimitSettingsKeyStringParse(str string, key *RateLimitSettingsKey) {
	err := json.Unmarshal([]byte(str), key)
	if err != nil {
		log.FatalLog("Failed to unmarshal RateLimitSettingsKey key string", "str", str)
	}
}

func (m *RateLimitSettingsKey) NotFoundError() error {
	return fmt.Errorf("RateLimitSettings key %s not found", m.GetKeyString())
}

func (m *RateLimitSettingsKey) ExistsError() error {
	return fmt.Errorf("RateLimitSettings key %s already exists", m.GetKeyString())
}

func (m *RateLimitSettingsKey) BeingDeletedError() error {
	return fmt.Errorf("RateLimitSettings %s is being deleted", m.GetKeyString())
}

var RateLimitSettingsKeyTagApiName = "apiname"
var RateLimitSettingsKeyTagApiEndpointType = "apiendpointtype"
var RateLimitSettingsKeyTagRateLimitTarget = "ratelimittarget"

func (m *RateLimitSettingsKey) GetTags() map[string]string {
	tags := make(map[string]string)
	tags["apiname"] = m.ApiName
	tags["apiendpointtype"] = ApiEndpointType_name[int32(m.ApiEndpointType)]
	tags["ratelimittarget"] = RateLimitTarget_name[int32(m.RateLimitTarget)]
	return tags
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsKey) ValidateEnums() error {
	if _, ok := ApiEndpointType_name[int32(m.ApiEndpointType)]; !ok {
		return errors.New("invalid ApiEndpointType")
	}
	if _, ok := RateLimitTarget_name[int32(m.RateLimitTarget)]; !ok {
		return errors.New("invalid RateLimitTarget")
	}
	return nil
}

func (m *RateLimitSettings) Matches(o *RateLimitSettings, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !m.Key.Matches(&o.Key, fopts...) {
		return false
	}
	if !opts.Filter || o.FlowSettings != nil {
		if len(m.FlowSettings) == 0 && len(o.FlowSettings) > 0 || len(m.FlowSettings) > 0 && len(o.FlowSettings) == 0 {
			return false
		} else if m.FlowSettings != nil && o.FlowSettings != nil {
			if !opts.Filter && len(m.FlowSettings) != len(o.FlowSettings) {
				return false
			}
			for k, _ := range o.FlowSettings {
				_, ok := m.FlowSettings[k]
				if !ok {
					return false
				}
				if !m.FlowSettings[k].Matches(o.FlowSettings[k], fopts...) {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.MaxReqsSettings != nil {
		if len(m.MaxReqsSettings) == 0 && len(o.MaxReqsSettings) > 0 || len(m.MaxReqsSettings) > 0 && len(o.MaxReqsSettings) == 0 {
			return false
		} else if m.MaxReqsSettings != nil && o.MaxReqsSettings != nil {
			if !opts.Filter && len(m.MaxReqsSettings) != len(o.MaxReqsSettings) {
				return false
			}
			for k, _ := range o.MaxReqsSettings {
				_, ok := m.MaxReqsSettings[k]
				if !ok {
					return false
				}
				if !m.MaxReqsSettings[k].Matches(o.MaxReqsSettings[k], fopts...) {
					return false
				}
			}
		}
	}
	return true
}

func (m *RateLimitSettings) CopyInFields(src *RateLimitSettings) int {
	changed := 0
	if m.Key.ApiName != src.Key.ApiName {
		m.Key.ApiName = src.Key.ApiName
		changed++
	}
	if m.Key.ApiEndpointType != src.Key.ApiEndpointType {
		m.Key.ApiEndpointType = src.Key.ApiEndpointType
		changed++
	}
	if m.Key.RateLimitTarget != src.Key.RateLimitTarget {
		m.Key.RateLimitTarget = src.Key.RateLimitTarget
		changed++
	}
	if src.FlowSettings != nil {
		m.FlowSettings = make(map[string]*FlowSettings)
		for k0, _ := range src.FlowSettings {
			m.FlowSettings[k0] = &FlowSettings{}
			if m.FlowSettings[k0].FlowAlgorithm != src.FlowSettings[k0].FlowAlgorithm {
				m.FlowSettings[k0].FlowAlgorithm = src.FlowSettings[k0].FlowAlgorithm
				changed++
			}
			if m.FlowSettings[k0].ReqsPerSecond != src.FlowSettings[k0].ReqsPerSecond {
				m.FlowSettings[k0].ReqsPerSecond = src.FlowSettings[k0].ReqsPerSecond
				changed++
			}
			if m.FlowSettings[k0].BurstSize != src.FlowSettings[k0].BurstSize {
				m.FlowSettings[k0].BurstSize = src.FlowSettings[k0].BurstSize
				changed++
			}
		}
	} else if m.FlowSettings != nil {
		m.FlowSettings = nil
		changed++
	}
	if src.MaxReqsSettings != nil {
		m.MaxReqsSettings = make(map[string]*MaxReqsSettings)
		for k0, _ := range src.MaxReqsSettings {
			m.MaxReqsSettings[k0] = &MaxReqsSettings{}
			if m.MaxReqsSettings[k0].MaxReqsAlgorithm != src.MaxReqsSettings[k0].MaxReqsAlgorithm {
				m.MaxReqsSettings[k0].MaxReqsAlgorithm = src.MaxReqsSettings[k0].MaxReqsAlgorithm
				changed++
			}
			if m.MaxReqsSettings[k0].MaxRequests != src.MaxReqsSettings[k0].MaxRequests {
				m.MaxReqsSettings[k0].MaxRequests = src.MaxReqsSettings[k0].MaxRequests
				changed++
			}
			if m.MaxReqsSettings[k0].Interval != src.MaxReqsSettings[k0].Interval {
				m.MaxReqsSettings[k0].Interval = src.MaxReqsSettings[k0].Interval
				changed++
			}
		}
	} else if m.MaxReqsSettings != nil {
		m.MaxReqsSettings = nil
		changed++
	}
	return changed
}

func (m *RateLimitSettings) DeepCopyIn(src *RateLimitSettings) {
	m.Key.DeepCopyIn(&src.Key)
	if src.FlowSettings != nil {
		m.FlowSettings = make(map[string]*FlowSettings)
		for k, v := range src.FlowSettings {
			var tmp_v FlowSettings
			tmp_v.DeepCopyIn(v)
			m.FlowSettings[k] = &tmp_v
		}
	} else {
		m.FlowSettings = nil
	}
	if src.MaxReqsSettings != nil {
		m.MaxReqsSettings = make(map[string]*MaxReqsSettings)
		for k, v := range src.MaxReqsSettings {
			var tmp_v MaxReqsSettings
			tmp_v.DeepCopyIn(v)
			m.MaxReqsSettings[k] = &tmp_v
		}
	} else {
		m.MaxReqsSettings = nil
	}
}

func (s *RateLimitSettings) HasFields() bool {
	return false
}

type RateLimitSettingsStore interface {
	Create(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error)
	Update(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error)
	Delete(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error)
	Put(ctx context.Context, m *RateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error)
	LoadOne(key string) (*RateLimitSettings, int64, error)
	Get(ctx context.Context, key *RateLimitSettingsKey, buf *RateLimitSettings) bool
	STMGet(stm concurrency.STM, key *RateLimitSettingsKey, buf *RateLimitSettings) bool
	STMPut(stm concurrency.STM, obj *RateLimitSettings, ops ...objstore.KVOp)
	STMDel(stm concurrency.STM, key *RateLimitSettingsKey)
}

type RateLimitSettingsStoreImpl struct {
	kvstore objstore.KVStore
}

func NewRateLimitSettingsStore(kvstore objstore.KVStore) *RateLimitSettingsStoreImpl {
	return &RateLimitSettingsStoreImpl{kvstore: kvstore}
}

func (s *RateLimitSettingsStoreImpl) Create(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Create(ctx, key, string(val))
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStoreImpl) Update(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var vers int64 = 0
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Update(ctx, key, string(val), vers)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStoreImpl) Put(ctx context.Context, m *RateLimitSettings, wait func(int64), ops ...objstore.KVOp) (*Result, error) {
	err := m.Validate(nil)
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	var val []byte
	val, err = json.Marshal(m)
	if err != nil {
		return nil, err
	}
	rev, err := s.kvstore.Put(ctx, key, string(val), ops...)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStoreImpl) Delete(ctx context.Context, m *RateLimitSettings, wait func(int64)) (*Result, error) {
	err := m.GetKey().ValidateKey()
	if err != nil {
		return nil, err
	}
	key := objstore.DbKeyString("RateLimitSettings", m.GetKey())
	rev, err := s.kvstore.Delete(ctx, key)
	if err != nil {
		return nil, err
	}
	if wait != nil {
		wait(rev)
	}
	return &Result{}, err
}

func (s *RateLimitSettingsStoreImpl) LoadOne(key string) (*RateLimitSettings, int64, error) {
	val, rev, _, err := s.kvstore.Get(key)
	if err != nil {
		return nil, 0, err
	}
	var obj RateLimitSettings
	err = json.Unmarshal(val, &obj)
	if err != nil {
		log.DebugLog(log.DebugLevelApi, "Failed to parse RateLimitSettings data", "val", string(val), "err", err)
		return nil, 0, err
	}
	return &obj, rev, nil
}

func (s *RateLimitSettingsStoreImpl) Get(ctx context.Context, key *RateLimitSettingsKey, buf *RateLimitSettings) bool {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	val, _, _, err := s.kvstore.Get(keystr)
	if err != nil {
		return false
	}
	return s.parseGetData(val, buf)
}

func (s *RateLimitSettingsStoreImpl) STMGet(stm concurrency.STM, key *RateLimitSettingsKey, buf *RateLimitSettings) bool {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	valstr := stm.Get(keystr)
	return s.parseGetData([]byte(valstr), buf)
}

func (s *RateLimitSettingsStoreImpl) parseGetData(val []byte, buf *RateLimitSettings) bool {
	if len(val) == 0 {
		return false
	}
	if buf != nil {
		// clear buf, because empty values in val won't
		// overwrite non-empty values in buf.
		*buf = RateLimitSettings{}
		err := json.Unmarshal(val, buf)
		if err != nil {
			return false
		}
	}
	return true
}

func (s *RateLimitSettingsStoreImpl) STMPut(stm concurrency.STM, obj *RateLimitSettings, ops ...objstore.KVOp) {
	keystr := objstore.DbKeyString("RateLimitSettings", obj.GetKey())
	val, err := json.Marshal(obj)
	if err != nil {
		log.InfoLog("RateLimitSettings json marshal failed", "obj", obj, "err", err)
	}
	v3opts := GetSTMOpts(ops...)
	stm.Put(keystr, string(val), v3opts...)
}

func (s *RateLimitSettingsStoreImpl) STMDel(stm concurrency.STM, key *RateLimitSettingsKey) {
	keystr := objstore.DbKeyString("RateLimitSettings", key)
	stm.Del(keystr)
}

func (m *RateLimitSettings) GetObjKey() objstore.ObjKey {
	return m.GetKey()
}

func (m *RateLimitSettings) GetKey() *RateLimitSettingsKey {
	return &m.Key
}

func (m *RateLimitSettings) GetKeyVal() RateLimitSettingsKey {
	return m.Key
}

func (m *RateLimitSettings) SetKey(key *RateLimitSettingsKey) {
	m.Key = *key
}

func CmpSortRateLimitSettings(a RateLimitSettings, b RateLimitSettings) bool {
	return a.Key.GetKeyString() < b.Key.GetKeyString()
}

// Helper method to check that enums have valid values
func (m *RateLimitSettings) ValidateEnums() error {
	if err := m.Key.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *RateLimitSettingsData) DeepCopyIn(src *RateLimitSettingsData) {
	if src.Settings != nil {
		m.Settings = make([]RateLimitSettings, len(src.Settings), len(src.Settings))
		for ii, s := range src.Settings {
			m.Settings[ii].DeepCopyIn(&s)
		}
	} else {
		m.Settings = nil
	}
}

// Helper method to check that enums have valid values
func (m *RateLimitSettingsData) ValidateEnums() error {
	for _, e := range m.Settings {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

var ApiEndpointTypeStrings = []string{
	"UNKNOWN_API_ENDPOINT_TYPE",
	"DME",
}

const (
	ApiEndpointTypeUNKNOWN_API_ENDPOINT_TYPE uint64 = 1 << 0
	ApiEndpointTypeDME                       uint64 = 1 << 1
)

var ApiEndpointType_CamelName = map[int32]string{
	// UNKNOWN_API_ENDPOINT_TYPE -> UnknownApiEndpointType
	0: "UnknownApiEndpointType",
	// DME -> Dme
	1: "Dme",
}
var ApiEndpointType_CamelValue = map[string]int32{
	"UnknownApiEndpointType": 0,
	"Dme":                    1,
}

func (e *ApiEndpointType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = ApiEndpointType_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid ApiEndpointType value %q", str)
	}
	*e = ApiEndpointType(val)
	return nil
}

func (e ApiEndpointType) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(ApiEndpointType_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *ApiEndpointType) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := ApiEndpointType_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = ApiEndpointType_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid ApiEndpointType value %q", str)
		}
		*e = ApiEndpointType(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := ApiEndpointType_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid ApiEndpointType value %d", val)
		}
		*e = ApiEndpointType(val)
		return nil
	}
	return fmt.Errorf("Invalid ApiEndpointType value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e ApiEndpointType) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(ApiEndpointType_CamelName, int32(e))
	return json.Marshal(str)
}
*/
var RateLimitTargetStrings = []string{
	"UNKNOWN_TARGET",
	"ALL_REQUESTS",
	"PER_IP",
	"PER_USER",
}

const (
	RateLimitTargetUNKNOWN_TARGET uint64 = 1 << 0
	RateLimitTargetALL_REQUESTS   uint64 = 1 << 1
	RateLimitTargetPER_IP         uint64 = 1 << 2
	RateLimitTargetPER_USER       uint64 = 1 << 3
)

var RateLimitTarget_CamelName = map[int32]string{
	// UNKNOWN_TARGET -> UnknownTarget
	0: "UnknownTarget",
	// ALL_REQUESTS -> AllRequests
	1: "AllRequests",
	// PER_IP -> PerIp
	2: "PerIp",
	// PER_USER -> PerUser
	3: "PerUser",
}
var RateLimitTarget_CamelValue = map[string]int32{
	"UnknownTarget": 0,
	"AllRequests":   1,
	"PerIp":         2,
	"PerUser":       3,
}

func (e *RateLimitTarget) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = RateLimitTarget_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid RateLimitTarget value %q", str)
	}
	*e = RateLimitTarget(val)
	return nil
}

func (e RateLimitTarget) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(RateLimitTarget_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *RateLimitTarget) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := RateLimitTarget_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = RateLimitTarget_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid RateLimitTarget value %q", str)
		}
		*e = RateLimitTarget(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := RateLimitTarget_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid RateLimitTarget value %d", val)
		}
		*e = RateLimitTarget(val)
		return nil
	}
	return fmt.Errorf("Invalid RateLimitTarget value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e RateLimitTarget) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(RateLimitTarget_CamelName, int32(e))
	return json.Marshal(str)
}
*/
var FlowRateLimitAlgorithmStrings = []string{
	"UNKNOWN_FLOW_ALGORITHM",
	"TOKEN_BUCKET_ALGORITHM",
	"LEAKY_BUCKET_ALGORITHM",
}

const (
	FlowRateLimitAlgorithmUNKNOWN_FLOW_ALGORITHM uint64 = 1 << 0
	FlowRateLimitAlgorithmTOKEN_BUCKET_ALGORITHM uint64 = 1 << 1
	FlowRateLimitAlgorithmLEAKY_BUCKET_ALGORITHM uint64 = 1 << 2
)

var FlowRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_FLOW_ALGORITHM -> UnknownFlowAlgorithm
	0: "UnknownFlowAlgorithm",
	// TOKEN_BUCKET_ALGORITHM -> TokenBucketAlgorithm
	1: "TokenBucketAlgorithm",
	// LEAKY_BUCKET_ALGORITHM -> LeakyBucketAlgorithm
	2: "LeakyBucketAlgorithm",
}
var FlowRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownFlowAlgorithm": 0,
	"TokenBucketAlgorithm": 1,
	"LeakyBucketAlgorithm": 2,
}

func (e *FlowRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = FlowRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid FlowRateLimitAlgorithm value %q", str)
	}
	*e = FlowRateLimitAlgorithm(val)
	return nil
}

func (e FlowRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(FlowRateLimitAlgorithm_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *FlowRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := FlowRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = FlowRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid FlowRateLimitAlgorithm value %q", str)
		}
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := FlowRateLimitAlgorithm_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid FlowRateLimitAlgorithm value %d", val)
		}
		*e = FlowRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("Invalid FlowRateLimitAlgorithm value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e FlowRateLimitAlgorithm) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(FlowRateLimitAlgorithm_CamelName, int32(e))
	return json.Marshal(str)
}
*/
var MaxReqsRateLimitAlgorithmStrings = []string{
	"UNKNOWN_MAX_REQS_ALGORITHM",
	"FIXED_WINDOW_ALGORITHM",
}

const (
	MaxReqsRateLimitAlgorithmUNKNOWN_MAX_REQS_ALGORITHM uint64 = 1 << 0
	MaxReqsRateLimitAlgorithmFIXED_WINDOW_ALGORITHM     uint64 = 1 << 1
)

var MaxReqsRateLimitAlgorithm_CamelName = map[int32]string{
	// UNKNOWN_MAX_REQS_ALGORITHM -> UnknownMaxReqsAlgorithm
	0: "UnknownMaxReqsAlgorithm",
	// FIXED_WINDOW_ALGORITHM -> FixedWindowAlgorithm
	1: "FixedWindowAlgorithm",
}
var MaxReqsRateLimitAlgorithm_CamelValue = map[string]int32{
	"UnknownMaxReqsAlgorithm": 0,
	"FixedWindowAlgorithm":    1,
}

func (e *MaxReqsRateLimitAlgorithm) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
		}
	}
	if !ok {
		return fmt.Errorf("Invalid MaxReqsRateLimitAlgorithm value %q", str)
	}
	*e = MaxReqsRateLimitAlgorithm(val)
	return nil
}

func (e MaxReqsRateLimitAlgorithm) MarshalYAML() (interface{}, error) {
	str := proto.EnumName(MaxReqsRateLimitAlgorithm_CamelName, int32(e))
	return str, nil
}

// custom JSON encoding/decoding
func (e *MaxReqsRateLimitAlgorithm) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := MaxReqsRateLimitAlgorithm_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = MaxReqsRateLimitAlgorithm_CamelName[val]
			}
		}
		if !ok {
			return fmt.Errorf("Invalid MaxReqsRateLimitAlgorithm value %q", str)
		}
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		_, ok := MaxReqsRateLimitAlgorithm_CamelName[val]
		if !ok {
			return fmt.Errorf("Invalid MaxReqsRateLimitAlgorithm value %d", val)
		}
		*e = MaxReqsRateLimitAlgorithm(val)
		return nil
	}
	return fmt.Errorf("Invalid MaxReqsRateLimitAlgorithm value %v", b)
}

/*
 * This is removed because we do not have enough time in
 * release 3.0 to update the SDK, UI, and documentation for this
 * change. It should be done in 3.1.
func (e MaxReqsRateLimitAlgorithm) MarshalJSON() ([]byte, error) {
	str := proto.EnumName(MaxReqsRateLimitAlgorithm_CamelName, int32(e))
	return json.Marshal(str)
}
*/
func (m *FlowRateLimitSettings) IsValidArgsForCreateFlowRateLimitSettings() error {
	return nil
}

func (m *FlowRateLimitSettings) IsValidArgsForUpdateFlowRateLimitSettings() error {
	return nil
}

func (m *FlowRateLimitSettings) IsValidArgsForDeleteFlowRateLimitSettings() error {
	return nil
}

func (m *MaxReqsRateLimitSettings) IsValidArgsForCreateMaxReqsRateLimitSettings() error {
	return nil
}

func (m *MaxReqsRateLimitSettings) IsValidArgsForUpdateMaxReqsRateLimitSettings() error {
	return nil
}

func (m *MaxReqsRateLimitSettings) IsValidArgsForDeleteMaxReqsRateLimitSettings() error {
	return nil
}

func (m *FlowSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.FlowAlgorithm))
	}
	if m.ReqsPerSecond != 0 {
		n += 9
	}
	if m.BurstSize != 0 {
		n += 1 + sovRatelimit(uint64(m.BurstSize))
	}
	return n
}

func (m *FlowRateLimitSettingsKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FlowSettingsName)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	l = m.RateLimitKey.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	return n
}

func (m *FlowRateLimitSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	l = m.Settings.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	return n
}

func (m *MaxReqsSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxReqsAlgorithm != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxReqsAlgorithm))
	}
	if m.MaxRequests != 0 {
		n += 1 + sovRatelimit(uint64(m.MaxRequests))
	}
	if m.Interval != 0 {
		n += 1 + sovRatelimit(uint64(m.Interval))
	}
	return n
}

func (m *MaxReqsRateLimitSettingsKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaxReqsSettingsName)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	l = m.RateLimitKey.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	return n
}

func (m *MaxReqsRateLimitSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	l = m.Key.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	l = m.Settings.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	return n
}

func (m *RateLimitSettingsKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiName)
	if l > 0 {
		n += 1 + l + sovRatelimit(uint64(l))
	}
	if m.ApiEndpointType != 0 {
		n += 1 + sovRatelimit(uint64(m.ApiEndpointType))
	}
	if m.RateLimitTarget != 0 {
		n += 1 + sovRatelimit(uint64(m.RateLimitTarget))
	}
	return n
}

func (m *RateLimitSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovRatelimit(uint64(l))
	if len(m.FlowSettings) > 0 {
		for k, v := range m.FlowSettings {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRatelimit(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRatelimit(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRatelimit(uint64(mapEntrySize))
		}
	}
	if len(m.MaxReqsSettings) > 0 {
		for k, v := range m.MaxReqsSettings {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRatelimit(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRatelimit(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRatelimit(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RateLimitSettingsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovRatelimit(uint64(l))
		}
	}
	return n
}

func sovRatelimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRatelimit(x uint64) (n int) {
	return sovRatelimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAlgorithm", wireType)
			}
			m.FlowAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAlgorithm |= FlowRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqsPerSecond", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReqsPerSecond = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRateLimitSettingsKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRateLimitSettingsKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRateLimitSettingsKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowSettingsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowSettingsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimitKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRateLimitSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRateLimitSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRateLimitSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxReqsSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxReqsSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxReqsSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsAlgorithm", wireType)
			}
			m.MaxReqsAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReqsAlgorithm |= MaxReqsRateLimitAlgorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequests", wireType)
			}
			m.MaxRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxReqsRateLimitSettingsKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxReqsRateLimitSettingsKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxReqsRateLimitSettingsKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsSettingsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxReqsSettingsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateLimitKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxReqsRateLimitSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxReqsRateLimitSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxReqsRateLimitSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettingsKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointType", wireType)
			}
			m.ApiEndpointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiEndpointType |= ApiEndpointType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitTarget", wireType)
			}
			m.RateLimitTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitTarget |= RateLimitTarget(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowSettings == nil {
				m.FlowSettings = make(map[string]*FlowSettings)
			}
			var mapkey string
			var mapvalue *FlowSettings
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRatelimit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRatelimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRatelimit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRatelimit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRatelimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRatelimit
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRatelimit
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FlowSettings{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRatelimit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRatelimit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FlowSettings[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReqsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxReqsSettings == nil {
				m.MaxReqsSettings = make(map[string]*MaxReqsSettings)
			}
			var mapkey string
			var mapvalue *MaxReqsSettings
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRatelimit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRatelimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRatelimit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRatelimit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRatelimit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRatelimit
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRatelimit
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MaxReqsSettings{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRatelimit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRatelimit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MaxReqsSettings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitSettingsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitSettingsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitSettingsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRatelimit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRatelimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, RateLimitSettings{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRatelimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRatelimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRatelimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRatelimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRatelimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRatelimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRatelimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRatelimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRatelimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRatelimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRatelimit = fmt.Errorf("proto: unexpected end of group")
)
