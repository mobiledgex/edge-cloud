// Device service APIs

syntax = "proto3";
package distributed_match_engine;

import "loc.proto";
  enum IDTypes {
    ID_UNDEFINED = 0;
	  IMEI = 1;
	  MSISDN = 2;
	  IPADDR = 3;
  }

message Match_Engine_Request {
  uint32 ver = 1;
  // User ID type - IMEI, MSISDN etc
  IDTypes IdType = 2;
  // Actual ID
  string Id = 3;
  // App/OS generated ID
  string Uuid = 4;
  // The carrier ID that user is connected to ("Mobile Country Code")
  uint64 CarrierID = 5;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 6;
  // The tower that user is currently connected to
  uint64 Tower = 7;
  // The GPS location of the user 
  Loc GpsLocation = 8;
  // Edge-cloud assigned application ID
  uint64 AppId = 9;
  // Protocol application uses
  bytes Protocol = 10;
  // The protocol port on the server side
  bytes ServerPort = 11;
  // App Developer Name
  string DevName = 12;
  // App Name
  string AppName = 13;
  // App Version
  string AppVers = 14;
  // DME Session Cookie; Not used for Register
  string SessionCookie = 15;
  // token used for location verification
  string VerifyLocToken = 16;
}

message Match_Engine_Reply {
  uint32 ver = 1;
  // domain name
  string uri = 2;
  // ip of the app service
  bytes service_ip = 3;
  // port of the app service?
  uint32 service_port = 4;
  // location of the cloudlet?
  Loc cloudlet_location = 5;
  enum Find_Status {
    FIND_UNKNOWN = 0;
    FIND_FOUND = 1;
    FIND_NOTFOUND = 2;
  }
  // Status return
  Find_Status Status = 6;
  string SessionCookie = 7;
}

message Match_Engine_Loc_Verify {
  uint32 ver = 1;
  // Status of the reply
  enum Tower_Status {
    TOWER_UNKNOWN = 0;
    CONNECTED_TO_SPECIFIED_TOWER = 1;
    NOT_CONNECTED_TO_SPECIFIED_TOWER = 2;
  }
  Tower_Status tower_status = 2;
  enum GPS_Location_Status {
    LOC_UNKNOWN = 0;
    LOC_VERIFIED = 1;
    LOC_MISMATCH = 2;
    LOC_ERROR_INVALID_TOKEN = 3;
    LOC_ERROR_OTHER = 4;
  }
  GPS_Location_Status gps_location_status = 3;
  // location accuracy, the location is verified to 
  // be within this number of kilometers.  Negative value
  // means no verification was done 
  double GPS_Location_Accuracy_KM = 4;
}

message Match_Engine_Loc {
  uint32 ver = 1;
  // Status of the reply
  enum Loc_Status {
    LOC_UNKNOWN = 0;
    LOC_FOUND = 1;
    // The user does not allow his location to be tracked
    LOC_DENIED = 2;
  }
  Loc_Status Status = 2;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 3;
  // The tower that user is currently connected to
  uint64 Tower = 4;
  // The GPS location of the user 
  Loc NetworkLocation = 5;
  // DME Session Cookie
  string SessionCookie = 6;
}

message Match_Engine_Status {
  uint32 ver = 1;
  // Status of the reply
  enum ME_Status {
    ME_UNDEFINED = 0;
    ME_SUCCESS = 1;
    ME_FAIL = 2;
  }
  ME_Status Status = 2;
  // Error Code based on Failure
  uint32 ErrorCode = 3;
  // DME Session Cookie
  string SessionCookie = 4;
    // Group Cookie for Secure Group Communication
  string GroupCookie = 5;
  // URI for Token Server
  string TokenServerURI = 6;
}

message Appinstance{
  string Appname = 1;
  string Appversion = 2;
  string Uri = 3;
}

message CloudletLocation {
     string CarrierName = 1;
     string CloudletName = 2;
     Loc GpsLocation = 3;
     //distance of cloudlet vs loc in request
     double Distance = 4;
     repeated Appinstance Appinstances = 5;
}

message Match_Engine_Cloudlet_List {
  uint32 ver = 1;
  // Status of the reply
  enum CL_Status {
    CL_UNDEFINED = 0;
    CL_SUCCESS = 1;
    CL_FAIL = 2;
  }
  CL_Status Status = 2;
  repeated CloudletLocation Cloudlets = 3;
}

message DynamicLocGroupAdd {
  uint32 ver = 1;
  // User ID type - IMEI, MSISDN etc
  IDTypes IdType = 2;
  // Actual ID
  string Id = 3;
  // App/OS generated ID
  string Uuid = 4;
  // The carrier ID that user is connected to ("Mobile Country Code")
  uint64 CarrierID = 5;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 6;
  // The tower that user is currently connected to
  uint64 Tower = 7;
  // The GPS location of the user 
  Loc GpsLocation = 8;
  // Dynamic Location Group Id
  uint64 LgId = 9;
  // DME Session Cookie
  string SessionCookie = 10;
  // Use Secure communication or Open with the group
  enum DlgCommType {
    DlgUndefined = 0;
    DlgSecure = 1;
    DlgOpen = 2;
  }
  DlgCommType CommType = 11;
  // Unused
  string UserData = 12;
}

service Match_Engine_Api {
  rpc FindCloudlet(Match_Engine_Request) returns (Match_Engine_Reply) {}
  rpc VerifyLocation(Match_Engine_Request) returns (Match_Engine_Loc_Verify) {}
  rpc GetLocation(Match_Engine_Request) returns (Match_Engine_Loc) {}
  rpc RegisterClient(Match_Engine_Request) returns (Match_Engine_Status) {}
  rpc AddUserToGroup(DynamicLocGroupAdd) returns (Match_Engine_Status) {}
  rpc GetCloudlets(Match_Engine_Request) returns (Match_Engine_Cloudlet_List) {}
}


