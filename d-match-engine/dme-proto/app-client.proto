// Device service APIs

syntax = "proto3";
package distributed_match_engine;

import "loc.proto";

message Match_Engine_Request {
  uint32 ver = 1;
  // User ID type - IMEI, MSISDN etc
  enum IDType {
	  IMEI = 0;
	  MSISDN = 1;
	  IPADDR = 2;
  }
  IDType IdType = 2;
  // Actual ID
  string Id = 3;
  // App/OS generated ID
  string Uuid = 4;
  // The carrier ID that user is connected to ("Mobile Country Code")
  uint64 CarrierID = 5;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 6;
  // The tower that user is currently connected to
  uint64 Tower = 7;
  // The GPS location of the user 
  Loc GpsLocation = 8;
  // Edge-cloud assigned application ID
  uint64 AppId = 9;
  // Protocol application uses
  bytes Protocol = 10;
  // The protocol port on the server side
  bytes ServerPort = 11;
  // App Developer Name
  string DevName = 12;
  // App Name
  string AppName = 13;
  // App Version
  string AppVers = 14;
  // DME Session Cookie
  string CommCookie = 15;
}

message Match_Engine_Reply {
  uint32 ver = 1;
  // domain name
  string uri = 2;
  // ip of the app service
  bytes service_ip = 3;
  // port of the app service?
  uint32 service_port = 4;
  // location of the cloudlet?
  Loc cloudlet_location = 5;
  // Status return
  // enum MrStatus {
  //  MrSUCCESS = 0;
  //  MrFAIL = 1;
  // }
  // MrStatus Status = 6;
  bool Status = 6;
  // Cookie provided by the DME for Session or Subsequent calls
  string CommCookie = 7;
}

message Match_Engine_Loc_Verify {
  uint32 ver = 1;
  // Status of the reply
  enum Tower_Status {
    UNKNOWN = 0;
    CONNECTED_TO_SPECIFIED_TOWER = 1;
    NOT_CONNECTED_TO_SPECIFIED_TOWER = 2;
  }
  Tower_Status tower_status = 2;
  enum GPS_Location_Status {
    LOC_UNKNOWN = 0;
    LOC_WITHIN_2KM = 1;
    LOC_WITHIN_10KM = 2;
    LOC_WITHIN_100KM = 3;
    LOC_MISMATCH = 4;
    LOC_OTHER_COUNTRY = 5;
  }
  GPS_Location_Status gps_location_status = 3;
  // DME Session Cookie
  string CommCookie = 4;
}

message Match_Engine_Loc {
  uint32 ver = 1;
  // Status of the reply
  enum Loc_Status {
    LOC_UNKNOWN = 0;
    LOC_FOUND = 1;
    // The user does not allow his location to be tracked
    LOC_DENIED = 2;
  }
  Loc_Status Status = 2;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 3;
  // The tower that user is currently connected to
  uint64 Tower = 4;
  // The GPS location of the user 
  Loc NetworkLocation = 5;
  // DME Session Cookie
  string CommCookie = 6;
}

message Match_Engine_Status {
  uint32 ver = 1;
  // Status of the reply
  enum ME_Status {
    ME_SUCCESS = 0;
    ME_FAIL = 1;
  }
  ME_Status Status = 2;
  // Error Code based on Failure
  uint32 ErrorCode = 3;
  // DME Session Cookie
  string CommCookie = 4;
    // Group Cookie for Secure Group Communication
  string GroupCookie = 5;
  // Not used
  string UserData = 6;
}

message DynamicLocGroupAdd {
  uint32 ver = 1;
  // User ID type - IMEI, MSISDN etc
  enum IDType {
	  IMEI = 0;
	  MSISDN = 1;
	  IPADDR = 2;
  }
  IDType IdType = 2;
  // Actual ID
  string Id = 3;
  // App/OS generated ID
  string Uuid = 4;
  // The carrier ID that user is connected to ("Mobile Country Code")
  uint64 CarrierID = 5;
  // The carrier name that user is connected to ("Cellular Carrier Name")
  string CarrierName = 6;
  // The tower that user is currently connected to
  uint64 Tower = 7;
  // The GPS location of the user 
  Loc GpsLocation = 8;
  // Dynamic Location Group Id
  uint64 LgId = 9;
  // DME Session Cookie
  string CommCookie = 10;
  // Use Secure communication or Open with the group
  enum DlgCommType {
    DlgSecure = 0;
    DlgOpen = 1;
  }
  DlgCommType CommType = 11;
  // Unused
  string UserData = 12;
}

service Match_Engine_Api {
  rpc FindCloudlet(Match_Engine_Request) returns (Match_Engine_Reply) {}
  rpc VerifyLocation(Match_Engine_Request) returns (Match_Engine_Loc_Verify) {}
  rpc GetLocation(Match_Engine_Request) returns (Match_Engine_Loc) {}
  rpc RegisterClient(Match_Engine_Request) returns (Match_Engine_Status) {}
  rpc AddUserToGroup(DynamicLocGroupAdd) returns (Match_Engine_Status) {}
}


