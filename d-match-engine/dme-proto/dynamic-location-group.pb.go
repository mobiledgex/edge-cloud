// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dynamic-location-group.proto

package distributed_match_engine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "errors"
import "strconv"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Need acknowledgement
type DlgMessage_DlgAck int32

const (
	DlgMessage_DlgAckEachMessage   DlgMessage_DlgAck = 0
	DlgMessage_DlgAsyEveryNMessage DlgMessage_DlgAck = 1
	DlgMessage_DlgNoAck            DlgMessage_DlgAck = 2
)

var DlgMessage_DlgAck_name = map[int32]string{
	0: "DlgAckEachMessage",
	1: "DlgAsyEveryNMessage",
	2: "DlgNoAck",
}
var DlgMessage_DlgAck_value = map[string]int32{
	"DlgAckEachMessage":   0,
	"DlgAsyEveryNMessage": 1,
	"DlgNoAck":            2,
}

func (x DlgMessage_DlgAck) String() string {
	return proto.EnumName(DlgMessage_DlgAck_name, int32(x))
}
func (DlgMessage_DlgAck) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDynamicLocationGroup, []int{0, 0}
}

type DlgMessage struct {
	Ver uint32 `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// Dynamic Location Group Id
	LgId uint64 `protobuf:"varint,2,opt,name=LgId,proto3" json:"LgId,omitempty"`
	// Group Cookie if secure
	GroupCookie string `protobuf:"bytes,3,opt,name=GroupCookie,proto3" json:"GroupCookie,omitempty"`
	// Message ID
	MessageId uint64            `protobuf:"varint,4,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	AckType   DlgMessage_DlgAck `protobuf:"varint,5,opt,name=AckType,proto3,enum=distributed_match_engine.DlgMessage_DlgAck" json:"AckType,omitempty"`
	// Message
	Message string `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *DlgMessage) Reset()                    { *m = DlgMessage{} }
func (m *DlgMessage) String() string            { return proto.CompactTextString(m) }
func (*DlgMessage) ProtoMessage()               {}
func (*DlgMessage) Descriptor() ([]byte, []int) { return fileDescriptorDynamicLocationGroup, []int{0} }

type DlgReply struct {
	Ver uint32 `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// AckId
	AckId uint64 `protobuf:"varint,2,opt,name=AckId,proto3" json:"AckId,omitempty"`
	// Group Cookie for Secure comm
	GroupCookie string `protobuf:"bytes,3,opt,name=GroupCookie,proto3" json:"GroupCookie,omitempty"`
}

func (m *DlgReply) Reset()                    { *m = DlgReply{} }
func (m *DlgReply) String() string            { return proto.CompactTextString(m) }
func (*DlgReply) ProtoMessage()               {}
func (*DlgReply) Descriptor() ([]byte, []int) { return fileDescriptorDynamicLocationGroup, []int{1} }

func init() {
	proto.RegisterType((*DlgMessage)(nil), "distributed_match_engine.DlgMessage")
	proto.RegisterType((*DlgReply)(nil), "distributed_match_engine.DlgReply")
	proto.RegisterEnum("distributed_match_engine.DlgMessage_DlgAck", DlgMessage_DlgAck_name, DlgMessage_DlgAck_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DynamicLocGroupApi service

type DynamicLocGroupApiClient interface {
	SendToGroup(ctx context.Context, in *DlgMessage, opts ...grpc.CallOption) (*DlgReply, error)
}

type dynamicLocGroupApiClient struct {
	cc *grpc.ClientConn
}

func NewDynamicLocGroupApiClient(cc *grpc.ClientConn) DynamicLocGroupApiClient {
	return &dynamicLocGroupApiClient{cc}
}

func (c *dynamicLocGroupApiClient) SendToGroup(ctx context.Context, in *DlgMessage, opts ...grpc.CallOption) (*DlgReply, error) {
	out := new(DlgReply)
	err := grpc.Invoke(ctx, "/distributed_match_engine.DynamicLocGroupApi/SendToGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DynamicLocGroupApi service

type DynamicLocGroupApiServer interface {
	SendToGroup(context.Context, *DlgMessage) (*DlgReply, error)
}

func RegisterDynamicLocGroupApiServer(s *grpc.Server, srv DynamicLocGroupApiServer) {
	s.RegisterService(&_DynamicLocGroupApi_serviceDesc, srv)
}

func _DynamicLocGroupApi_SendToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DlgMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicLocGroupApiServer).SendToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributed_match_engine.DynamicLocGroupApi/SendToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicLocGroupApiServer).SendToGroup(ctx, req.(*DlgMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _DynamicLocGroupApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "distributed_match_engine.DynamicLocGroupApi",
	HandlerType: (*DynamicLocGroupApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToGroup",
			Handler:    _DynamicLocGroupApi_SendToGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic-location-group.proto",
}

func (m *DlgMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DlgMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ver != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.Ver))
	}
	if m.LgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.LgId))
	}
	if len(m.GroupCookie) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(len(m.GroupCookie)))
		i += copy(dAtA[i:], m.GroupCookie)
	}
	if m.MessageId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.MessageId))
	}
	if m.AckType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.AckType))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DlgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DlgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ver != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.Ver))
	}
	if m.AckId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(m.AckId))
	}
	if len(m.GroupCookie) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDynamicLocationGroup(dAtA, i, uint64(len(m.GroupCookie)))
		i += copy(dAtA[i:], m.GroupCookie)
	}
	return i, nil
}

func encodeVarintDynamicLocationGroup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DlgMessage) CopyInFields(src *DlgMessage) {
	m.Ver = src.Ver
	m.LgId = src.LgId
	m.GroupCookie = src.GroupCookie
	m.MessageId = src.MessageId
	m.AckType = src.AckType
	m.Message = src.Message
}

// Helper method to check that enums have valid values
func (m *DlgMessage) ValidateEnums() error {
	if _, ok := DlgMessage_DlgAck_name[int32(m.AckType)]; !ok {
		return errors.New("invalid AckType")
	}
	return nil
}

func (m *DlgReply) CopyInFields(src *DlgReply) {
	m.Ver = src.Ver
	m.AckId = src.AckId
	m.GroupCookie = src.GroupCookie
}

// Helper method to check that enums have valid values
func (m *DlgReply) ValidateEnums() error {
	return nil
}

var DlgAckStrings = []string{
	"DlgAckEachMessage",
	"DlgAsyEveryNMessage",
	"DlgNoAck",
}

const (
	DlgAckDlgAckEachMessage   uint64 = 1 << 0
	DlgAckDlgAsyEveryNMessage uint64 = 1 << 1
	DlgAckDlgNoAck            uint64 = 1 << 2
)

func (e *DlgMessage_DlgAck) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := DlgMessage_DlgAck_value[str]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = DlgMessage_DlgAck_name[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = DlgMessage_DlgAck(val)
	return nil
}

func (e DlgMessage_DlgAck) MarshalYAML() (interface{}, error) {
	return e.String(), nil
}

func (m *DlgMessage) Size() (n int) {
	var l int
	_ = l
	if m.Ver != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.Ver))
	}
	if m.LgId != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.LgId))
	}
	l = len(m.GroupCookie)
	if l > 0 {
		n += 1 + l + sovDynamicLocationGroup(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.MessageId))
	}
	if m.AckType != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.AckType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDynamicLocationGroup(uint64(l))
	}
	return n
}

func (m *DlgReply) Size() (n int) {
	var l int
	_ = l
	if m.Ver != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.Ver))
	}
	if m.AckId != 0 {
		n += 1 + sovDynamicLocationGroup(uint64(m.AckId))
	}
	l = len(m.GroupCookie)
	if l > 0 {
		n += 1 + l + sovDynamicLocationGroup(uint64(l))
	}
	return n
}

func sovDynamicLocationGroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDynamicLocationGroup(x uint64) (n int) {
	return sovDynamicLocationGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DlgMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDynamicLocationGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DlgMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DlgMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LgId", wireType)
			}
			m.LgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LgId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDynamicLocationGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupCookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckType", wireType)
			}
			m.AckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckType |= (DlgMessage_DlgAck(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDynamicLocationGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDynamicLocationGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDynamicLocationGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DlgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDynamicLocationGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DlgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DlgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckId", wireType)
			}
			m.AckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDynamicLocationGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupCookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDynamicLocationGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDynamicLocationGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDynamicLocationGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDynamicLocationGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDynamicLocationGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDynamicLocationGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDynamicLocationGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDynamicLocationGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDynamicLocationGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDynamicLocationGroup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dynamic-location-group.proto", fileDescriptorDynamicLocationGroup) }

var fileDescriptorDynamicLocationGroup = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x4e, 0xc2, 0x40,
	0x14, 0x65, 0x78, 0xca, 0x45, 0x4d, 0xbd, 0x6a, 0x9c, 0x18, 0xd2, 0x34, 0x8d, 0x8b, 0x26, 0x06,
	0x16, 0xf8, 0x05, 0x55, 0xd0, 0x90, 0x20, 0x8b, 0xca, 0xc6, 0x15, 0x29, 0xd3, 0x49, 0x69, 0x5a,
	0x3a, 0x4d, 0x5b, 0x48, 0xfa, 0x2d, 0xfe, 0x10, 0x4b, 0x3f, 0x41, 0xf9, 0x12, 0xd3, 0x29, 0x88,
	0x0b, 0x5f, 0xbb, 0xf3, 0xb8, 0xf7, 0xe6, 0xe4, 0xcc, 0x40, 0xdb, 0xc9, 0x42, 0x7b, 0xe1, 0xb1,
	0x4e, 0x20, 0x98, 0x9d, 0x7a, 0x22, 0xec, 0xb8, 0xb1, 0x58, 0x46, 0xdd, 0x28, 0x16, 0xa9, 0x40,
	0xea, 0x78, 0x49, 0x1a, 0x7b, 0xb3, 0x65, 0xca, 0x9d, 0xe9, 0xc2, 0x4e, 0xd9, 0x7c, 0xca, 0x43,
	0xd7, 0x0b, 0xb9, 0xfe, 0x52, 0x06, 0xe8, 0x07, 0xee, 0x23, 0x4f, 0x12, 0xdb, 0xe5, 0xa8, 0x40,
	0x65, 0xc5, 0x63, 0x4a, 0x34, 0x62, 0x1c, 0x59, 0x39, 0x44, 0x84, 0xea, 0xc8, 0x1d, 0x3a, 0xb4,
	0xac, 0x11, 0xa3, 0x6a, 0x49, 0x8c, 0x1a, 0xb4, 0x1e, 0xf2, 0xeb, 0x77, 0x42, 0xf8, 0x1e, 0xa7,
	0x15, 0x8d, 0x18, 0x4d, 0xeb, 0xab, 0x84, 0x6d, 0x68, 0x6e, 0x4f, 0x0e, 0x1d, 0x5a, 0x95, 0xab,
	0x7b, 0x01, 0x07, 0xd0, 0x30, 0x99, 0x3f, 0xc9, 0x22, 0x4e, 0x6b, 0x1a, 0x31, 0x8e, 0x7b, 0xd7,
	0xdd, 0x9f, 0x02, 0x76, 0xf7, 0xe1, 0x72, 0x68, 0x32, 0xdf, 0xda, 0xed, 0x22, 0x85, 0xc6, 0xd6,
	0xa2, 0x75, 0x19, 0x61, 0x47, 0xf5, 0x7b, 0xa8, 0x17, 0xc3, 0x78, 0x0e, 0x27, 0x05, 0x1a, 0xd8,
	0x6c, 0xbe, 0xb5, 0x95, 0x12, 0x5e, 0xc0, 0x69, 0x2e, 0x27, 0xd9, 0x60, 0xc5, 0xe3, 0x6c, 0xbc,
	0x33, 0x08, 0x1e, 0xc2, 0x41, 0x3f, 0x70, 0xc7, 0xc2, 0x64, 0xbe, 0x52, 0xd6, 0x27, 0x92, 0x59,
	0x3c, 0x0a, 0xb2, 0x6f, 0xaa, 0x39, 0x83, 0x9a, 0xc9, 0xfc, 0xcf, 0x6e, 0x0a, 0xf2, 0x77, 0x39,
	0x3d, 0x01, 0xd8, 0x2f, 0x5e, 0x6b, 0x24, 0x98, 0x34, 0xcc, 0xc8, 0xc3, 0x67, 0x68, 0x3d, 0xf1,
	0xd0, 0x99, 0x08, 0xa9, 0xe0, 0xd5, 0x7f, 0x2a, 0xb9, 0xd4, 0x7f, 0x9d, 0x92, 0xc1, 0xf5, 0xd2,
	0xad, 0xb2, 0x7e, 0x57, 0x4b, 0xeb, 0x8d, 0x4a, 0x5e, 0x37, 0x2a, 0x79, 0xdb, 0xa8, 0x64, 0x56,
	0x97, 0xff, 0xe2, 0xe6, 0x23, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xbc, 0xf4, 0xab, 0x37, 0x02, 0x00,
	0x00,
}
