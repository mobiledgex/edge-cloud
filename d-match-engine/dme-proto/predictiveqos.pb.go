// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: predictiveqos.proto

package distributed_match_engine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import "github.com/mobiledgex/edge-cloud/util"
import "errors"
import "strconv"
import "encoding/json"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPredictiveqos, []int{5, 0}
}

// Represents a request sent by the client, contains the ID of the request
// and the list of the grids in question, together with the timestamp for
// which the KPIs will be predicted
type QoSKPIRequest struct {
	// set by the client (the Unix timestamp when the initial
	// request was in the client, in microseconds) and the
	// server attaches it to each response
	Requestid int64 `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// the list of the position-timestamp pairs requested
	Requests []*PositionKpiRequest `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
}

func (m *QoSKPIRequest) Reset()                    { *m = QoSKPIRequest{} }
func (m *QoSKPIRequest) String() string            { return proto.CompactTextString(m) }
func (*QoSKPIRequest) ProtoMessage()               {}
func (*QoSKPIRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{0} }

// Represents a response object which contains the calculated
// KPIs at the given grid (represented with
// lat/long coordinates) at the given timestamp.
// A QoSKPIResponse contains a list of this result object
type PositionKpiResult struct {
	// as set by the client, must be unique within one QoSKPIRequest
	Positionid int64 `protobuf:"varint,1,opt,name=positionid,proto3" json:"positionid,omitempty"`
	// Types that are valid to be assigned to AOneof1:
	//	*PositionKpiResult_DluserthroughputMin
	AOneof1 isPositionKpiResult_AOneof1 `protobuf_oneof:"a_oneof1"`
	// Types that are valid to be assigned to AOneof2:
	//	*PositionKpiResult_DluserthroughputAvg
	AOneof2 isPositionKpiResult_AOneof2 `protobuf_oneof:"a_oneof2"`
	// Types that are valid to be assigned to AOneof3:
	//	*PositionKpiResult_DluserthroughputMax
	AOneof3 isPositionKpiResult_AOneof3 `protobuf_oneof:"a_oneof3"`
	// Types that are valid to be assigned to AOneof4:
	//	*PositionKpiResult_UluserthroughputMin
	AOneof4 isPositionKpiResult_AOneof4 `protobuf_oneof:"a_oneof4"`
	// Types that are valid to be assigned to AOneof5:
	//	*PositionKpiResult_UluserthroughputAvg
	AOneof5 isPositionKpiResult_AOneof5 `protobuf_oneof:"a_oneof5"`
	// Types that are valid to be assigned to AOneof6:
	//	*PositionKpiResult_UluserthroughputMax
	AOneof6 isPositionKpiResult_AOneof6 `protobuf_oneof:"a_oneof6"`
	// Types that are valid to be assigned to AOneof7:
	//	*PositionKpiResult_LatencyMin
	AOneof7 isPositionKpiResult_AOneof7 `protobuf_oneof:"a_oneof7"`
	// Types that are valid to be assigned to AOneof8:
	//	*PositionKpiResult_LatencyAvg
	AOneof8 isPositionKpiResult_AOneof8 `protobuf_oneof:"a_oneof8"`
	// Types that are valid to be assigned to AOneof9:
	//	*PositionKpiResult_LatencyMax
	AOneof9 isPositionKpiResult_AOneof9 `protobuf_oneof:"a_oneof9"`
}

func (m *PositionKpiResult) Reset()                    { *m = PositionKpiResult{} }
func (m *PositionKpiResult) String() string            { return proto.CompactTextString(m) }
func (*PositionKpiResult) ProtoMessage()               {}
func (*PositionKpiResult) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{1} }

type isPositionKpiResult_AOneof1 interface {
	isPositionKpiResult_AOneof1()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof2 interface {
	isPositionKpiResult_AOneof2()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof3 interface {
	isPositionKpiResult_AOneof3()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof4 interface {
	isPositionKpiResult_AOneof4()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof5 interface {
	isPositionKpiResult_AOneof5()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof6 interface {
	isPositionKpiResult_AOneof6()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof7 interface {
	isPositionKpiResult_AOneof7()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof8 interface {
	isPositionKpiResult_AOneof8()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPositionKpiResult_AOneof9 interface {
	isPositionKpiResult_AOneof9()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PositionKpiResult_DluserthroughputMin struct {
	DluserthroughputMin float32 `protobuf:"fixed32,2,opt,name=dluserthroughput_min,json=dluserthroughputMin,proto3,oneof"`
}
type PositionKpiResult_DluserthroughputAvg struct {
	DluserthroughputAvg float32 `protobuf:"fixed32,3,opt,name=dluserthroughput_avg,json=dluserthroughputAvg,proto3,oneof"`
}
type PositionKpiResult_DluserthroughputMax struct {
	DluserthroughputMax float32 `protobuf:"fixed32,4,opt,name=dluserthroughput_max,json=dluserthroughputMax,proto3,oneof"`
}
type PositionKpiResult_UluserthroughputMin struct {
	UluserthroughputMin float32 `protobuf:"fixed32,5,opt,name=uluserthroughput_min,json=uluserthroughputMin,proto3,oneof"`
}
type PositionKpiResult_UluserthroughputAvg struct {
	UluserthroughputAvg float32 `protobuf:"fixed32,6,opt,name=uluserthroughput_avg,json=uluserthroughputAvg,proto3,oneof"`
}
type PositionKpiResult_UluserthroughputMax struct {
	UluserthroughputMax float32 `protobuf:"fixed32,7,opt,name=uluserthroughput_max,json=uluserthroughputMax,proto3,oneof"`
}
type PositionKpiResult_LatencyMin struct {
	LatencyMin float32 `protobuf:"fixed32,8,opt,name=latency_min,json=latencyMin,proto3,oneof"`
}
type PositionKpiResult_LatencyAvg struct {
	LatencyAvg float32 `protobuf:"fixed32,9,opt,name=latency_avg,json=latencyAvg,proto3,oneof"`
}
type PositionKpiResult_LatencyMax struct {
	LatencyMax float32 `protobuf:"fixed32,10,opt,name=latency_max,json=latencyMax,proto3,oneof"`
}

func (*PositionKpiResult_DluserthroughputMin) isPositionKpiResult_AOneof1() {}
func (*PositionKpiResult_DluserthroughputAvg) isPositionKpiResult_AOneof2() {}
func (*PositionKpiResult_DluserthroughputMax) isPositionKpiResult_AOneof3() {}
func (*PositionKpiResult_UluserthroughputMin) isPositionKpiResult_AOneof4() {}
func (*PositionKpiResult_UluserthroughputAvg) isPositionKpiResult_AOneof5() {}
func (*PositionKpiResult_UluserthroughputMax) isPositionKpiResult_AOneof6() {}
func (*PositionKpiResult_LatencyMin) isPositionKpiResult_AOneof7()          {}
func (*PositionKpiResult_LatencyAvg) isPositionKpiResult_AOneof8()          {}
func (*PositionKpiResult_LatencyMax) isPositionKpiResult_AOneof9()          {}

func (m *PositionKpiResult) GetAOneof1() isPositionKpiResult_AOneof1 {
	if m != nil {
		return m.AOneof1
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof2() isPositionKpiResult_AOneof2 {
	if m != nil {
		return m.AOneof2
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof3() isPositionKpiResult_AOneof3 {
	if m != nil {
		return m.AOneof3
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof4() isPositionKpiResult_AOneof4 {
	if m != nil {
		return m.AOneof4
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof5() isPositionKpiResult_AOneof5 {
	if m != nil {
		return m.AOneof5
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof6() isPositionKpiResult_AOneof6 {
	if m != nil {
		return m.AOneof6
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof7() isPositionKpiResult_AOneof7 {
	if m != nil {
		return m.AOneof7
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof8() isPositionKpiResult_AOneof8 {
	if m != nil {
		return m.AOneof8
	}
	return nil
}
func (m *PositionKpiResult) GetAOneof9() isPositionKpiResult_AOneof9 {
	if m != nil {
		return m.AOneof9
	}
	return nil
}

func (m *PositionKpiResult) GetDluserthroughputMin() float32 {
	if x, ok := m.GetAOneof1().(*PositionKpiResult_DluserthroughputMin); ok {
		return x.DluserthroughputMin
	}
	return 0
}

func (m *PositionKpiResult) GetDluserthroughputAvg() float32 {
	if x, ok := m.GetAOneof2().(*PositionKpiResult_DluserthroughputAvg); ok {
		return x.DluserthroughputAvg
	}
	return 0
}

func (m *PositionKpiResult) GetDluserthroughputMax() float32 {
	if x, ok := m.GetAOneof3().(*PositionKpiResult_DluserthroughputMax); ok {
		return x.DluserthroughputMax
	}
	return 0
}

func (m *PositionKpiResult) GetUluserthroughputMin() float32 {
	if x, ok := m.GetAOneof4().(*PositionKpiResult_UluserthroughputMin); ok {
		return x.UluserthroughputMin
	}
	return 0
}

func (m *PositionKpiResult) GetUluserthroughputAvg() float32 {
	if x, ok := m.GetAOneof5().(*PositionKpiResult_UluserthroughputAvg); ok {
		return x.UluserthroughputAvg
	}
	return 0
}

func (m *PositionKpiResult) GetUluserthroughputMax() float32 {
	if x, ok := m.GetAOneof6().(*PositionKpiResult_UluserthroughputMax); ok {
		return x.UluserthroughputMax
	}
	return 0
}

func (m *PositionKpiResult) GetLatencyMin() float32 {
	if x, ok := m.GetAOneof7().(*PositionKpiResult_LatencyMin); ok {
		return x.LatencyMin
	}
	return 0
}

func (m *PositionKpiResult) GetLatencyAvg() float32 {
	if x, ok := m.GetAOneof8().(*PositionKpiResult_LatencyAvg); ok {
		return x.LatencyAvg
	}
	return 0
}

func (m *PositionKpiResult) GetLatencyMax() float32 {
	if x, ok := m.GetAOneof9().(*PositionKpiResult_LatencyMax); ok {
		return x.LatencyMax
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PositionKpiResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PositionKpiResult_OneofMarshaler, _PositionKpiResult_OneofUnmarshaler, _PositionKpiResult_OneofSizer, []interface{}{
		(*PositionKpiResult_DluserthroughputMin)(nil),
		(*PositionKpiResult_DluserthroughputAvg)(nil),
		(*PositionKpiResult_DluserthroughputMax)(nil),
		(*PositionKpiResult_UluserthroughputMin)(nil),
		(*PositionKpiResult_UluserthroughputAvg)(nil),
		(*PositionKpiResult_UluserthroughputMax)(nil),
		(*PositionKpiResult_LatencyMin)(nil),
		(*PositionKpiResult_LatencyAvg)(nil),
		(*PositionKpiResult_LatencyMax)(nil),
	}
}

func _PositionKpiResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PositionKpiResult)
	// a_oneof1
	switch x := m.AOneof1.(type) {
	case *PositionKpiResult_DluserthroughputMin:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.DluserthroughputMin)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof1 has unexpected type %T", x)
	}
	// a_oneof2
	switch x := m.AOneof2.(type) {
	case *PositionKpiResult_DluserthroughputAvg:
		_ = b.EncodeVarint(3<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.DluserthroughputAvg)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof2 has unexpected type %T", x)
	}
	// a_oneof3
	switch x := m.AOneof3.(type) {
	case *PositionKpiResult_DluserthroughputMax:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.DluserthroughputMax)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof3 has unexpected type %T", x)
	}
	// a_oneof4
	switch x := m.AOneof4.(type) {
	case *PositionKpiResult_UluserthroughputMin:
		_ = b.EncodeVarint(5<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.UluserthroughputMin)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof4 has unexpected type %T", x)
	}
	// a_oneof5
	switch x := m.AOneof5.(type) {
	case *PositionKpiResult_UluserthroughputAvg:
		_ = b.EncodeVarint(6<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.UluserthroughputAvg)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof5 has unexpected type %T", x)
	}
	// a_oneof6
	switch x := m.AOneof6.(type) {
	case *PositionKpiResult_UluserthroughputMax:
		_ = b.EncodeVarint(7<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.UluserthroughputMax)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof6 has unexpected type %T", x)
	}
	// a_oneof7
	switch x := m.AOneof7.(type) {
	case *PositionKpiResult_LatencyMin:
		_ = b.EncodeVarint(8<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.LatencyMin)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof7 has unexpected type %T", x)
	}
	// a_oneof8
	switch x := m.AOneof8.(type) {
	case *PositionKpiResult_LatencyAvg:
		_ = b.EncodeVarint(9<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.LatencyAvg)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof8 has unexpected type %T", x)
	}
	// a_oneof9
	switch x := m.AOneof9.(type) {
	case *PositionKpiResult_LatencyMax:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.LatencyMax)))
	case nil:
	default:
		return fmt.Errorf("PositionKpiResult.AOneof9 has unexpected type %T", x)
	}
	return nil
}

func _PositionKpiResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PositionKpiResult)
	switch tag {
	case 2: // a_oneof1.dluserthroughput_min
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof1 = &PositionKpiResult_DluserthroughputMin{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // a_oneof2.dluserthroughput_avg
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof2 = &PositionKpiResult_DluserthroughputAvg{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // a_oneof3.dluserthroughput_max
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof3 = &PositionKpiResult_DluserthroughputMax{math.Float32frombits(uint32(x))}
		return true, err
	case 5: // a_oneof4.uluserthroughput_min
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof4 = &PositionKpiResult_UluserthroughputMin{math.Float32frombits(uint32(x))}
		return true, err
	case 6: // a_oneof5.uluserthroughput_avg
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof5 = &PositionKpiResult_UluserthroughputAvg{math.Float32frombits(uint32(x))}
		return true, err
	case 7: // a_oneof6.uluserthroughput_max
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof6 = &PositionKpiResult_UluserthroughputMax{math.Float32frombits(uint32(x))}
		return true, err
	case 8: // a_oneof7.latency_min
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof7 = &PositionKpiResult_LatencyMin{math.Float32frombits(uint32(x))}
		return true, err
	case 9: // a_oneof8.latency_avg
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof8 = &PositionKpiResult_LatencyAvg{math.Float32frombits(uint32(x))}
		return true, err
	case 10: // a_oneof9.latency_max
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.AOneof9 = &PositionKpiResult_LatencyMax{math.Float32frombits(uint32(x))}
		return true, err
	default:
		return false, nil
	}
}

func _PositionKpiResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PositionKpiResult)
	// a_oneof1
	switch x := m.AOneof1.(type) {
	case *PositionKpiResult_DluserthroughputMin:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof2
	switch x := m.AOneof2.(type) {
	case *PositionKpiResult_DluserthroughputAvg:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof3
	switch x := m.AOneof3.(type) {
	case *PositionKpiResult_DluserthroughputMax:
		n += proto.SizeVarint(4<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof4
	switch x := m.AOneof4.(type) {
	case *PositionKpiResult_UluserthroughputMin:
		n += proto.SizeVarint(5<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof5
	switch x := m.AOneof5.(type) {
	case *PositionKpiResult_UluserthroughputAvg:
		n += proto.SizeVarint(6<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof6
	switch x := m.AOneof6.(type) {
	case *PositionKpiResult_UluserthroughputMax:
		n += proto.SizeVarint(7<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof7
	switch x := m.AOneof7.(type) {
	case *PositionKpiResult_LatencyMin:
		n += proto.SizeVarint(8<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof8
	switch x := m.AOneof8.(type) {
	case *PositionKpiResult_LatencyAvg:
		n += proto.SizeVarint(9<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// a_oneof9
	switch x := m.AOneof9.(type) {
	case *PositionKpiResult_LatencyMax:
		n += proto.SizeVarint(10<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a request which queries the KPIs at the given grid
// (represented with lat/long coordinates) at the given timestamp.
// The QoSKPIRequest contains a
// list of this objects
type PositionKpiRequest struct {
	Positionid int64 `protobuf:"varint,1,opt,name=positionid,proto3" json:"positionid,omitempty"`
	// as decimal degree, i.e.: 48.1855141 , 11.5613505
	// in wsg84 coordinate system
	// minus number represent south / west coordinate
	Latitude  float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// UNIX timestamp for which the prediction has to be calculated
	// se when the vehicle is due at the given position, in secs
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// in meter, above ground level
	// (ignored in the calculations during the Pilot phase - added here only for completness)
	Altitude float32 `protobuf:"fixed32,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (m *PositionKpiRequest) Reset()                    { *m = PositionKpiRequest{} }
func (m *PositionKpiRequest) String() string            { return proto.CompactTextString(m) }
func (*PositionKpiRequest) ProtoMessage()               {}
func (*PositionKpiRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{2} }

// renewal responses, and when all of the timestamps are passed, the server
// closes the stream for this request
type QoSKPIResponse struct {
	// set by the client (the Unix timestamp when the initial
	// request was in the client, in microseconds) and the
	// server attaches it to each response
	Requestid int64                `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Results   []*PositionKpiResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *QoSKPIResponse) Reset()                    { *m = QoSKPIResponse{} }
func (m *QoSKPIResponse) String() string            { return proto.CompactTextString(m) }
func (*QoSKPIResponse) ProtoMessage()               {}
func (*QoSKPIResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{3} }

// The request sent by the client.
// Optionally it can contain the name of the service the client is interested
// in, currently for this system it can be only QueryQoS
type HealthCheckRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{4} }

// The response to the above message. The NOT_SERVING"
// response represents an internal error condition of the system, when the
// API frontend is up (hence can answer the health request), but cannot
// provide actual results
type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=distributed_match_engine.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	// similar to http status codes, attach it to error reports
	Errorcode int32 `protobuf:"varint,2,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	// prediction model version that is used for calculating the response
	Modelversion string `protobuf:"bytes,3,opt,name=modelversion,proto3" json:"modelversion,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorPredictiveqos, []int{5} }

func init() {
	proto.RegisterType((*QoSKPIRequest)(nil), "distributed_match_engine.QoSKPIRequest")
	proto.RegisterType((*PositionKpiResult)(nil), "distributed_match_engine.PositionKpiResult")
	proto.RegisterType((*PositionKpiRequest)(nil), "distributed_match_engine.PositionKpiRequest")
	proto.RegisterType((*QoSKPIResponse)(nil), "distributed_match_engine.QoSKPIResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "distributed_match_engine.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "distributed_match_engine.HealthCheckResponse")
	proto.RegisterEnum("distributed_match_engine.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QueryQoS service

type QueryQoSClient interface {
	QueryQoSKPI(ctx context.Context, in *QoSKPIRequest, opts ...grpc.CallOption) (QueryQoS_QueryQoSKPIClient, error)
}

type queryQoSClient struct {
	cc *grpc.ClientConn
}

func NewQueryQoSClient(cc *grpc.ClientConn) QueryQoSClient {
	return &queryQoSClient{cc}
}

func (c *queryQoSClient) QueryQoSKPI(ctx context.Context, in *QoSKPIRequest, opts ...grpc.CallOption) (QueryQoS_QueryQoSKPIClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_QueryQoS_serviceDesc.Streams[0], c.cc, "/distributed_match_engine.QueryQoS/QueryQoSKPI", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryQoSQueryQoSKPIClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryQoS_QueryQoSKPIClient interface {
	Recv() (*QoSKPIResponse, error)
	grpc.ClientStream
}

type queryQoSQueryQoSKPIClient struct {
	grpc.ClientStream
}

func (x *queryQoSQueryQoSKPIClient) Recv() (*QoSKPIResponse, error) {
	m := new(QoSKPIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for QueryQoS service

type QueryQoSServer interface {
	QueryQoSKPI(*QoSKPIRequest, QueryQoS_QueryQoSKPIServer) error
}

func RegisterQueryQoSServer(s *grpc.Server, srv QueryQoSServer) {
	s.RegisterService(&_QueryQoS_serviceDesc, srv)
}

func _QueryQoS_QueryQoSKPI_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QoSKPIRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryQoSServer).QueryQoSKPI(m, &queryQoSQueryQoSKPIServer{stream})
}

type QueryQoS_QueryQoSKPIServer interface {
	Send(*QoSKPIResponse) error
	grpc.ServerStream
}

type queryQoSQueryQoSKPIServer struct {
	grpc.ServerStream
}

func (x *queryQoSQueryQoSKPIServer) Send(m *QoSKPIResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _QueryQoS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "distributed_match_engine.QueryQoS",
	HandlerType: (*QueryQoSServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryQoSKPI",
			Handler:       _QueryQoS_QueryQoSKPI_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "predictiveqos.proto",
}

// Client API for Health service

type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/distributed_match_engine.Health/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Health service

type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributed_match_engine.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "distributed_match_engine.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "predictiveqos.proto",
}

func (m *QoSKPIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QoSKPIRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Requestid))
	}
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictiveqos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PositionKpiResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionKpiResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Positionid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Positionid))
	}
	if m.AOneof1 != nil {
		nn1, err := m.AOneof1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.AOneof2 != nil {
		nn2, err := m.AOneof2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.AOneof3 != nil {
		nn3, err := m.AOneof3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.AOneof4 != nil {
		nn4, err := m.AOneof4.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.AOneof5 != nil {
		nn5, err := m.AOneof5.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.AOneof6 != nil {
		nn6, err := m.AOneof6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.AOneof7 != nil {
		nn7, err := m.AOneof7.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.AOneof8 != nil {
		nn8, err := m.AOneof8.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if m.AOneof9 != nil {
		nn9, err := m.AOneof9.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *PositionKpiResult_DluserthroughputMin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DluserthroughputMin))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_DluserthroughputAvg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1d
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DluserthroughputAvg))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_DluserthroughputMax) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x25
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DluserthroughputMax))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_UluserthroughputMin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2d
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UluserthroughputMin))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_UluserthroughputAvg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x35
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UluserthroughputAvg))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_UluserthroughputMax) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3d
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UluserthroughputMax))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_LatencyMin) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x45
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LatencyMin))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_LatencyAvg) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x4d
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LatencyAvg))))
	i += 4
	return i, nil
}
func (m *PositionKpiResult_LatencyMax) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x55
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LatencyMax))))
	i += 4
	return i, nil
}
func (m *PositionKpiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionKpiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Positionid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Positionid))
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i += 4
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i += 4
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Timestamp))
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x35
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Altitude))))
		i += 4
	}
	return i, nil
}

func (m *QoSKPIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QoSKPIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Requestid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Requestid))
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPredictiveqos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Status))
	}
	if m.Errorcode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(m.Errorcode))
	}
	if len(m.Modelversion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPredictiveqos(dAtA, i, uint64(len(m.Modelversion)))
		i += copy(dAtA[i:], m.Modelversion)
	}
	return i, nil
}

func encodeVarintPredictiveqos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QoSKPIRequest) CopyInFields(src *QoSKPIRequest) {
	m.Requestid = src.Requestid
	if src.Requests != nil {
		if m.Requests == nil || len(m.Requests) != len(src.Requests) {
			m.Requests = make([]*PositionKpiRequest, len(src.Requests))
		}
		for i0 := 0; i0 < len(src.Requests); i0++ {
			m.Requests[i0] = &PositionKpiRequest{}
			m.Requests[i0].Positionid = src.Requests[i0].Positionid
			m.Requests[i0].Latitude = src.Requests[i0].Latitude
			m.Requests[i0].Longitude = src.Requests[i0].Longitude
			m.Requests[i0].Timestamp = src.Requests[i0].Timestamp
			m.Requests[i0].Altitude = src.Requests[i0].Altitude
		}
	}
}

// Helper method to check that enums have valid values
func (m *QoSKPIRequest) ValidateEnums() error {
	for _, e := range m.Requests {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *PositionKpiResult) CopyInFields(src *PositionKpiResult) {
	m.Positionid = src.Positionid
}

// Helper method to check that enums have valid values
func (m *PositionKpiResult) ValidateEnums() error {
	return nil
}

func (m *PositionKpiRequest) CopyInFields(src *PositionKpiRequest) {
	m.Positionid = src.Positionid
	m.Latitude = src.Latitude
	m.Longitude = src.Longitude
	m.Timestamp = src.Timestamp
	m.Altitude = src.Altitude
}

// Helper method to check that enums have valid values
func (m *PositionKpiRequest) ValidateEnums() error {
	return nil
}

func (m *QoSKPIResponse) CopyInFields(src *QoSKPIResponse) {
	m.Requestid = src.Requestid
	if src.Results != nil {
		if m.Results == nil || len(m.Results) != len(src.Results) {
			m.Results = make([]*PositionKpiResult, len(src.Results))
		}
		for i0 := 0; i0 < len(src.Results); i0++ {
			m.Results[i0] = &PositionKpiResult{}
			m.Results[i0].Positionid = src.Results[i0].Positionid
		}
	}
}

// Helper method to check that enums have valid values
func (m *QoSKPIResponse) ValidateEnums() error {
	for _, e := range m.Results {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func (m *HealthCheckRequest) CopyInFields(src *HealthCheckRequest) {
	m.Service = src.Service
}

// Helper method to check that enums have valid values
func (m *HealthCheckRequest) ValidateEnums() error {
	return nil
}

func (m *HealthCheckResponse) CopyInFields(src *HealthCheckResponse) {
	m.Status = src.Status
	m.Errorcode = src.Errorcode
	m.Modelversion = src.Modelversion
}

// Helper method to check that enums have valid values
func (m *HealthCheckResponse) ValidateEnums() error {
	if _, ok := HealthCheckResponse_ServingStatus_name[int32(m.Status)]; !ok {
		return errors.New("invalid Status")
	}
	return nil
}

var ServingStatusStrings = []string{
	"UNKNOWN",
	"SERVING",
	"NOT_SERVING",
}

const (
	ServingStatusUNKNOWN     uint64 = 1 << 0
	ServingStatusSERVING     uint64 = 1 << 1
	ServingStatusNOT_SERVING uint64 = 1 << 2
)

var HealthCheckResponse_ServingStatus_CamelName = map[int32]string{
	// UNKNOWN -> Unknown
	0: "Unknown",
	// SERVING -> Serving
	1: "Serving",
	// NOT_SERVING -> NotServing
	2: "NotServing",
}
var HealthCheckResponse_ServingStatus_CamelValue = map[string]int32{
	"Unknown":    0,
	"Serving":    1,
	"NotServing": 2,
}

func (e *HealthCheckResponse_ServingStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := HealthCheckResponse_ServingStatus_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = HealthCheckResponse_ServingStatus_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = HealthCheckResponse_ServingStatus(val)
	return nil
}

func (e HealthCheckResponse_ServingStatus) MarshalYAML() (interface{}, error) {
	return proto.EnumName(HealthCheckResponse_ServingStatus_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *HealthCheckResponse_ServingStatus) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := HealthCheckResponse_ServingStatus_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = HealthCheckResponse_ServingStatus_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = HealthCheckResponse_ServingStatus(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = HealthCheckResponse_ServingStatus(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *QoSKPIRequest) Size() (n int) {
	var l int
	_ = l
	if m.Requestid != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Requestid))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovPredictiveqos(uint64(l))
		}
	}
	return n
}

func (m *PositionKpiResult) Size() (n int) {
	var l int
	_ = l
	if m.Positionid != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Positionid))
	}
	if m.AOneof1 != nil {
		n += m.AOneof1.Size()
	}
	if m.AOneof2 != nil {
		n += m.AOneof2.Size()
	}
	if m.AOneof3 != nil {
		n += m.AOneof3.Size()
	}
	if m.AOneof4 != nil {
		n += m.AOneof4.Size()
	}
	if m.AOneof5 != nil {
		n += m.AOneof5.Size()
	}
	if m.AOneof6 != nil {
		n += m.AOneof6.Size()
	}
	if m.AOneof7 != nil {
		n += m.AOneof7.Size()
	}
	if m.AOneof8 != nil {
		n += m.AOneof8.Size()
	}
	if m.AOneof9 != nil {
		n += m.AOneof9.Size()
	}
	return n
}

func (m *PositionKpiResult_DluserthroughputMin) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_DluserthroughputAvg) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_DluserthroughputMax) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_UluserthroughputMin) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_UluserthroughputAvg) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_UluserthroughputMax) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_LatencyMin) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_LatencyAvg) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiResult_LatencyMax) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PositionKpiRequest) Size() (n int) {
	var l int
	_ = l
	if m.Positionid != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Positionid))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Timestamp != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Timestamp))
	}
	if m.Altitude != 0 {
		n += 5
	}
	return n
}

func (m *QoSKPIResponse) Size() (n int) {
	var l int
	_ = l
	if m.Requestid != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Requestid))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovPredictiveqos(uint64(l))
		}
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovPredictiveqos(uint64(l))
	}
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Status))
	}
	if m.Errorcode != 0 {
		n += 1 + sovPredictiveqos(uint64(m.Errorcode))
	}
	l = len(m.Modelversion)
	if l > 0 {
		n += 1 + l + sovPredictiveqos(uint64(l))
	}
	return n
}

func sovPredictiveqos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPredictiveqos(x uint64) (n int) {
	return sovPredictiveqos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QoSKPIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QoSKPIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QoSKPIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestid", wireType)
			}
			m.Requestid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requestid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &PositionKpiRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionKpiResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionKpiResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionKpiResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positionid", wireType)
			}
			m.Positionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Positionid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DluserthroughputMin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof1 = &PositionKpiResult_DluserthroughputMin{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DluserthroughputAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof2 = &PositionKpiResult_DluserthroughputAvg{float32(math.Float32frombits(v))}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DluserthroughputMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof3 = &PositionKpiResult_DluserthroughputMax{float32(math.Float32frombits(v))}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UluserthroughputMin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof4 = &PositionKpiResult_UluserthroughputMin{float32(math.Float32frombits(v))}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UluserthroughputAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof5 = &PositionKpiResult_UluserthroughputAvg{float32(math.Float32frombits(v))}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UluserthroughputMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof6 = &PositionKpiResult_UluserthroughputMax{float32(math.Float32frombits(v))}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyMin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof7 = &PositionKpiResult_LatencyMin{float32(math.Float32frombits(v))}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyAvg", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof8 = &PositionKpiResult_LatencyAvg{float32(math.Float32frombits(v))}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AOneof9 = &PositionKpiResult_LatencyMax{float32(math.Float32frombits(v))}
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionKpiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionKpiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionKpiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positionid", wireType)
			}
			m.Positionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Positionid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Altitude = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QoSKPIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QoSKPIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QoSKPIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requestid", wireType)
			}
			m.Requestid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requestid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &PositionKpiResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (HealthCheckResponse_ServingStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errorcode", wireType)
			}
			m.Errorcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errorcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modelversion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modelversion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredictiveqos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredictiveqos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredictiveqos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredictiveqos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredictiveqos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPredictiveqos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPredictiveqos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPredictiveqos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPredictiveqos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredictiveqos   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("predictiveqos.proto", fileDescriptorPredictiveqos) }

var fileDescriptorPredictiveqos = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xf3, 0x9f, 0x9b, 0xaf, 0xfd, 0xda, 0x09, 0x0b, 0xab, 0x42, 0x51, 0xf1, 0x86, 0x48,
	0x2d, 0x11, 0xa4, 0xfc, 0xb3, 0xa2, 0xa8, 0xa2, 0x55, 0x44, 0x9a, 0x8c, 0xf9, 0x59, 0x46, 0xd3,
	0x78, 0x48, 0x46, 0x38, 0x1e, 0xd7, 0x33, 0x13, 0xd2, 0x37, 0xe2, 0x49, 0x50, 0x97, 0x3c, 0x02,
	0x74, 0xc5, 0x63, 0x20, 0x8f, 0xed, 0xc4, 0xa1, 0xae, 0x52, 0x76, 0xe7, 0x5e, 0xdf, 0x73, 0xee,
	0xc9, 0x9d, 0xb9, 0x19, 0x68, 0xf8, 0x01, 0x75, 0xd8, 0x48, 0xb2, 0x19, 0x3d, 0xe7, 0xa2, 0xed,
	0x07, 0x5c, 0x72, 0x64, 0x3a, 0x4c, 0xc8, 0x80, 0x9d, 0x29, 0x49, 0x9d, 0xe1, 0x94, 0xc8, 0xd1,
	0x64, 0x48, 0xbd, 0x31, 0xf3, 0xa8, 0xf5, 0x15, 0x36, 0x06, 0xdc, 0xee, 0xf6, 0x4f, 0x30, 0x3d,
	0x57, 0x54, 0x48, 0x74, 0x17, 0x6a, 0x41, 0x04, 0x99, 0x63, 0x1a, 0xbb, 0x46, 0xab, 0x80, 0x97,
	0x09, 0x74, 0x0c, 0xd5, 0x38, 0x10, 0x66, 0x7e, 0xb7, 0xd0, 0xaa, 0x77, 0xf6, 0xdb, 0x37, 0x69,
	0xb7, 0xfb, 0x5c, 0x30, 0xc9, 0xb8, 0xd7, 0xf5, 0x59, 0xac, 0x8e, 0x17, 0x6c, 0xeb, 0x7b, 0x11,
	0xb6, 0x57, 0x0a, 0x84, 0x72, 0x25, 0x6a, 0x02, 0xf8, 0x71, 0x72, 0xd1, 0x3e, 0x95, 0x41, 0x07,
	0x70, 0xc7, 0x71, 0x95, 0xa0, 0x81, 0x9c, 0x04, 0x5c, 0x8d, 0x27, 0xbe, 0x92, 0xc3, 0x29, 0xf3,
	0xcc, 0xfc, 0xae, 0xd1, 0xca, 0x1f, 0xe7, 0x70, 0xe3, 0xef, 0xaf, 0xef, 0x98, 0x97, 0x49, 0x22,
	0xb3, 0xb1, 0x59, 0xd0, 0x24, 0xe3, 0x3a, 0xe9, 0xf5, 0x6c, 0x9c, 0xdd, 0x89, 0xcc, 0xcd, 0xa2,
	0x26, 0xe5, 0x33, 0x3a, 0x91, 0x79, 0x48, 0x52, 0x59, 0xf6, 0x4a, 0x9a, 0x54, 0xc0, 0x0d, 0x95,
	0x6d, 0x4f, 0x65, 0xd9, 0x2b, 0x6b, 0x52, 0xf1, 0x3a, 0x29, 0xb6, 0xa7, 0xb2, 0xec, 0x55, 0x34,
	0xa9, 0x94, 0xd1, 0x89, 0xcc, 0xd1, 0x3d, 0xa8, 0xbb, 0x44, 0x52, 0x6f, 0x74, 0xa1, 0x5d, 0x55,
	0x75, 0x6d, 0x19, 0x43, 0x9c, 0x0c, 0xcd, 0xa4, 0x4a, 0x42, 0x0f, 0x35, 0x5d, 0x52, 0x59, 0x94,
	0x84, 0xad, 0xd3, 0x2a, 0x64, 0x6e, 0x82, 0x2e, 0xa9, 0x2e, 0x55, 0xc8, 0xfc, 0x10, 0xa0, 0x4a,
	0x86, 0xdc, 0xa3, 0xfc, 0xf3, 0xa3, 0x14, 0xee, 0xa4, 0xf0, 0x41, 0x0a, 0x3f, 0x4e, 0xe1, 0x27,
	0x29, 0xfc, 0x34, 0x85, 0x9f, 0xa5, 0xf0, 0xf3, 0x14, 0x7e, 0x61, 0x7d, 0x33, 0x00, 0x5d, 0xbf,
	0x69, 0x6b, 0x6f, 0xd2, 0x0e, 0x54, 0x5d, 0x22, 0x99, 0x54, 0x0e, 0x8d, 0x6e, 0x0f, 0x5e, 0xc4,
	0xe1, 0x0e, 0xb8, 0xdc, 0x1b, 0x47, 0x1f, 0xf5, 0x2d, 0xc1, 0xcb, 0x44, 0xf8, 0x55, 0xb2, 0x29,
	0x15, 0x92, 0x4c, 0x7d, 0x7d, 0xb2, 0x05, 0xbc, 0x4c, 0x84, 0xba, 0xc4, 0x8d, 0x75, 0xcb, 0x91,
	0x6e, 0x12, 0x5b, 0x0a, 0x36, 0x93, 0x65, 0x13, 0x3e, 0xf7, 0x04, 0x5d, 0xb3, 0x6d, 0x47, 0x50,
	0x09, 0xf4, 0x5e, 0x24, 0xcb, 0xb6, 0x77, 0xcb, 0x65, 0x0b, 0x39, 0x38, 0xe1, 0x5a, 0x6d, 0x40,
	0xc7, 0x94, 0xb8, 0x72, 0xf2, 0x66, 0x42, 0x47, 0x5f, 0x92, 0x01, 0x99, 0x50, 0x11, 0x34, 0x98,
	0xb1, 0x11, 0xd5, 0x8d, 0x6b, 0x38, 0x09, 0xad, 0xdf, 0x06, 0x34, 0x56, 0x08, 0xb1, 0x59, 0x1b,
	0xca, 0x42, 0x12, 0xa9, 0x84, 0x26, 0x6c, 0x76, 0x5e, 0xdd, 0xec, 0x26, 0x83, 0xde, 0xb6, 0x43,
	0x79, 0x6f, 0x6c, 0x6b, 0x09, 0x1c, 0x4b, 0x85, 0x13, 0xa0, 0x41, 0xc0, 0x83, 0x11, 0x8f, 0x0f,
	0xa2, 0x84, 0x97, 0x09, 0x64, 0xc1, 0x7f, 0x53, 0xee, 0x50, 0x77, 0x46, 0x03, 0xc1, 0xb8, 0xa7,
	0x0f, 0xa3, 0x86, 0x57, 0x72, 0xd6, 0x4b, 0xd8, 0x58, 0x91, 0x46, 0x75, 0xa8, 0x7c, 0xe8, 0x75,
	0x7b, 0xa7, 0x9f, 0x7a, 0x5b, 0xb9, 0x30, 0xb0, 0x8f, 0xf0, 0xc7, 0x93, 0xde, 0xdb, 0x2d, 0x03,
	0xfd, 0x0f, 0xf5, 0xde, 0xe9, 0xfb, 0x61, 0x92, 0xc8, 0x77, 0x7c, 0xa8, 0x0e, 0x14, 0x0d, 0x2e,
	0x06, 0xdc, 0x46, 0x0e, 0xd4, 0x13, 0xdc, 0xed, 0x9f, 0xa0, 0xfb, 0x37, 0xff, 0xba, 0x95, 0x7f,
	0xcc, 0x9d, 0xd6, 0xfa, 0xc2, 0x68, 0x02, 0x56, 0xee, 0xa1, 0xd1, 0xf1, 0xa0, 0x1c, 0x0d, 0x07,
	0x39, 0x50, 0xd2, 0x03, 0x42, 0xfb, 0xb7, 0x9c, 0x63, 0xd4, 0xee, 0xc1, 0x3f, 0x4d, 0xfd, 0x70,
	0xef, 0xf2, 0x57, 0x33, 0x77, 0x79, 0xd5, 0x34, 0x7e, 0x5c, 0x35, 0x8d, 0x9f, 0x57, 0x4d, 0x03,
	0xb6, 0x1d, 0xd9, 0x8e, 0x9e, 0x86, 0xe4, 0xa1, 0x38, 0x2c, 0x0e, 0x06, 0xdc, 0xee, 0x1b, 0x67,
	0x65, 0xfd, 0x5c, 0x1c, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x51, 0xce, 0x71, 0x01, 0x45, 0x06,
	0x00, 0x00,
}
