// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appcommon.proto

package distributed_match_engine

import (
	encoding_binary "encoding/binary"
	"encoding/json"
	"errors"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/util"
	io "io"
	math "math"
	math_bits "math/bits"
	"strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.
type LProto int32

const (
	// Unknown protocol
	LProto_L_PROTO_UNKNOWN LProto = 0
	// TCP (L4) protocol
	LProto_L_PROTO_TCP LProto = 1
	// UDP (L4) protocol
	LProto_L_PROTO_UDP LProto = 2
)

var LProto_name = map[int32]string{
	0: "L_PROTO_UNKNOWN",
	1: "L_PROTO_TCP",
	2: "L_PROTO_UDP",
}

var LProto_value = map[string]int32{
	"L_PROTO_UNKNOWN": 0,
	"L_PROTO_TCP":     1,
	"L_PROTO_UDP":     2,
}

func (x LProto) String() string {
	return proto.EnumName(LProto_name, int32(x))
}

func (LProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{0}
}

// Application Port
//
// AppPort describes an L4 or L7 public access port/path mapping. This is used to track external to internal mappings for access via a shared load balancer or reverse proxy.
type AppPort struct {
	// TCP (L4) or UDP (L4) protocol
	Proto LProto `protobuf:"varint,1,opt,name=proto,proto3,enum=distributed_match_engine.LProto" json:"proto,omitempty"`
	// Container port
	InternalPort int32 `protobuf:"varint,2,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	// Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)
	PublicPort int32 `protobuf:"varint,3,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	// skip 4 to preserve the numbering. 4 was path_prefix but was removed since we dont need it after removed http
	// FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.
	FqdnPrefix string `protobuf:"bytes,5,opt,name=fqdn_prefix,json=fqdnPrefix,proto3" json:"fqdn_prefix,omitempty"`
	// A non-zero end port indicates a port range from internal port to end port, inclusive.
	EndPort int32 `protobuf:"varint,6,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty"`
	// TLS termination for this port
	Tls bool `protobuf:"varint,7,opt,name=tls,proto3" json:"tls,omitempty"`
	// use nginx proxy for this port if you really need a transparent proxy (udp only)
	Nginx                bool     `protobuf:"varint,8,opt,name=nginx,proto3" json:"nginx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPort) Reset()         { *m = AppPort{} }
func (m *AppPort) String() string { return proto.CompactTextString(m) }
func (*AppPort) ProtoMessage()    {}
func (*AppPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{0}
}
func (m *AppPort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPort.Merge(m, src)
}
func (m *AppPort) XXX_Size() int {
	return m.Size()
}
func (m *AppPort) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPort.DiscardUnknown(m)
}

var xxx_messageInfo_AppPort proto.InternalMessageInfo

// Latency
type Latency struct {
	Avg                  float64  `protobuf:"fixed64,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Min                  float64  `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max                  float64  `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
	StdDev               float64  `protobuf:"fixed64,4,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	NumSamples           uint64   `protobuf:"varint,5,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Latency) Reset()         { *m = Latency{} }
func (m *Latency) String() string { return proto.CompactTextString(m) }
func (*Latency) ProtoMessage()    {}
func (*Latency) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdc58d2114e550de, []int{1}
}
func (m *Latency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Latency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Latency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Latency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Latency.Merge(m, src)
}
func (m *Latency) XXX_Size() int {
	return m.Size()
}
func (m *Latency) XXX_DiscardUnknown() {
	xxx_messageInfo_Latency.DiscardUnknown(m)
}

var xxx_messageInfo_Latency proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("distributed_match_engine.LProto", LProto_name, LProto_value)
	proto.RegisterType((*AppPort)(nil), "distributed_match_engine.AppPort")
	proto.RegisterType((*Latency)(nil), "distributed_match_engine.Latency")
}

func init() { proto.RegisterFile("appcommon.proto", fileDescriptor_fdc58d2114e550de) }

var fileDescriptor_fdc58d2114e550de = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x6f, 0xda, 0x30,
	0x18, 0x86, 0x31, 0x90, 0x84, 0x7d, 0x6c, 0x23, 0xf2, 0x26, 0x2d, 0xbb, 0x64, 0x11, 0xbb, 0x44,
	0x3b, 0x70, 0xd8, 0xa4, 0x5d, 0xa7, 0xb5, 0xdc, 0x8a, 0x20, 0x72, 0x41, 0x3d, 0x5a, 0x26, 0x36,
	0x34, 0x52, 0xe2, 0xb8, 0x89, 0x83, 0xc2, 0x3f, 0xe4, 0xd8, 0x9f, 0xd0, 0x72, 0xed, 0x9f, 0xa8,
	0xec, 0x08, 0xa9, 0x97, 0xde, 0xde, 0x3c, 0x7a, 0xde, 0xe8, 0xf5, 0x07, 0x13, 0xa6, 0x54, 0x5a,
	0x16, 0x45, 0x29, 0x67, 0xaa, 0x2a, 0x75, 0x89, 0x03, 0x9e, 0xd5, 0xba, 0xca, 0xb6, 0x8d, 0x16,
	0x9c, 0x16, 0x4c, 0xa7, 0xf7, 0x54, 0xc8, 0x7d, 0x26, 0xc5, 0xf4, 0x05, 0x81, 0xf7, 0x5f, 0xa9,
	0xa4, 0xac, 0x34, 0xfe, 0x0b, 0x8e, 0xd5, 0x03, 0x14, 0xa1, 0xf8, 0xf3, 0xef, 0x68, 0xf6, 0x5e,
	0x6b, 0xb6, 0x48, 0x8c, 0x47, 0x3a, 0x1d, 0xff, 0x84, 0x4f, 0x99, 0xd4, 0xa2, 0x92, 0x2c, 0xa7,
	0xaa, 0xac, 0x74, 0xd0, 0x8f, 0x50, 0xec, 0x90, 0x8f, 0x17, 0x68, 0x7f, 0xfe, 0x03, 0xc6, 0xaa,
	0xd9, 0xe6, 0x59, 0xda, 0x29, 0x03, 0xab, 0x40, 0x87, 0x2e, 0xc2, 0xee, 0x81, 0x4b, 0xaa, 0x2a,
	0xb1, 0xcb, 0xda, 0xc0, 0x89, 0x50, 0xfc, 0x81, 0x80, 0x41, 0x89, 0x25, 0xf8, 0x3b, 0x8c, 0x84,
	0xe4, 0x5d, 0xdd, 0xb5, 0x75, 0x4f, 0x48, 0x6e, 0xbb, 0x3e, 0x0c, 0x74, 0x5e, 0x07, 0x5e, 0x84,
	0xe2, 0x11, 0x31, 0x11, 0x7f, 0x05, 0xc7, 0x4c, 0x6d, 0x83, 0x91, 0x65, 0xdd, 0xc7, 0xf4, 0x08,
	0xde, 0x82, 0x69, 0x21, 0xd3, 0xa3, 0xa9, 0xb0, 0xc3, 0xde, 0x3e, 0x15, 0x11, 0x13, 0x0d, 0x29,
	0x32, 0x69, 0xc7, 0x23, 0x62, 0xa2, 0x25, 0xac, 0xb5, 0x5b, 0x0d, 0x61, 0x2d, 0xfe, 0x06, 0x5e,
	0xad, 0x39, 0xe5, 0xe2, 0x10, 0x0c, 0x2d, 0x75, 0x6b, 0xcd, 0xe7, 0xe2, 0x60, 0xd6, 0xcb, 0xa6,
	0xa0, 0x35, 0x2b, 0x54, 0x2e, 0x6a, 0xbb, 0x7e, 0x48, 0x40, 0x36, 0xc5, 0x6d, 0x47, 0x7e, 0xfd,
	0x03, 0xb7, 0xbb, 0x1a, 0xfe, 0x02, 0x93, 0x05, 0x4d, 0xc8, 0x6a, 0xbd, 0xa2, 0x9b, 0xe5, 0xcd,
	0x72, 0x75, 0xb7, 0xf4, 0x7b, 0x78, 0x02, 0xe3, 0x0b, 0x5c, 0x5f, 0x27, 0x3e, 0x7a, 0x0b, 0x36,
	0xf3, 0xc4, 0xef, 0x5f, 0xf9, 0xa7, 0xe7, 0xb0, 0x77, 0x3a, 0x87, 0xe8, 0xf1, 0x1c, 0xa2, 0xa7,
	0x73, 0x88, 0xb6, 0xae, 0x3d, 0xff, 0x9f, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xec, 0x4d,
	0x89, 0xef, 0x01, 0x00, 0x00,
}

func (m *AppPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Nginx {
		i--
		if m.Nginx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Tls {
		i--
		if m.Tls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.EndPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.EndPort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FqdnPrefix) > 0 {
		i -= len(m.FqdnPrefix)
		copy(dAtA[i:], m.FqdnPrefix)
		i = encodeVarintAppcommon(dAtA, i, uint64(len(m.FqdnPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PublicPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.PublicPort))
		i--
		dAtA[i] = 0x18
	}
	if m.InternalPort != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.InternalPort))
		i--
		dAtA[i] = 0x10
	}
	if m.Proto != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.Proto))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Latency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Latency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Latency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumSamples != 0 {
		i = encodeVarintAppcommon(dAtA, i, uint64(m.NumSamples))
		i--
		dAtA[i] = 0x28
	}
	if m.StdDev != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StdDev))))
		i--
		dAtA[i] = 0x21
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x19
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x11
	}
	if m.Avg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppcommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppcommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppPort) CopyInFields(src *AppPort) int {
	changed := 0
	if m.Proto != src.Proto {
		m.Proto = src.Proto
		changed++
	}
	if m.InternalPort != src.InternalPort {
		m.InternalPort = src.InternalPort
		changed++
	}
	if m.PublicPort != src.PublicPort {
		m.PublicPort = src.PublicPort
		changed++
	}
	if m.FqdnPrefix != src.FqdnPrefix {
		m.FqdnPrefix = src.FqdnPrefix
		changed++
	}
	if m.EndPort != src.EndPort {
		m.EndPort = src.EndPort
		changed++
	}
	if m.Tls != src.Tls {
		m.Tls = src.Tls
		changed++
	}
	if m.Nginx != src.Nginx {
		m.Nginx = src.Nginx
		changed++
	}
	return changed
}

func (m *AppPort) DeepCopyIn(src *AppPort) {
	m.Proto = src.Proto
	m.InternalPort = src.InternalPort
	m.PublicPort = src.PublicPort
	m.FqdnPrefix = src.FqdnPrefix
	m.EndPort = src.EndPort
	m.Tls = src.Tls
	m.Nginx = src.Nginx
}

// Helper method to check that enums have valid values
func (m *AppPort) ValidateEnums() error {
	if _, ok := LProto_name[int32(m.Proto)]; !ok {
		return errors.New("invalid Proto")
	}
	return nil
}

func (m *Latency) CopyInFields(src *Latency) int {
	changed := 0
	if m.Avg != src.Avg {
		m.Avg = src.Avg
		changed++
	}
	if m.Min != src.Min {
		m.Min = src.Min
		changed++
	}
	if m.Max != src.Max {
		m.Max = src.Max
		changed++
	}
	if m.StdDev != src.StdDev {
		m.StdDev = src.StdDev
		changed++
	}
	if m.NumSamples != src.NumSamples {
		m.NumSamples = src.NumSamples
		changed++
	}
	return changed
}

func (m *Latency) DeepCopyIn(src *Latency) {
	m.Avg = src.Avg
	m.Min = src.Min
	m.Max = src.Max
	m.StdDev = src.StdDev
	m.NumSamples = src.NumSamples
}

// Helper method to check that enums have valid values
func (m *Latency) ValidateEnums() error {
	return nil
}

var LProtoStrings = []string{
	"L_PROTO_UNKNOWN",
	"L_PROTO_TCP",
	"L_PROTO_UDP",
}

const (
	LProtoL_PROTO_UNKNOWN uint64 = 1 << 0
	LProtoL_PROTO_TCP     uint64 = 1 << 1
	LProtoL_PROTO_UDP     uint64 = 1 << 2
)

var LProto_CamelName = map[int32]string{
	// L_PROTO_UNKNOWN -> LProtoUnknown
	0: "LProtoUnknown",
	// L_PROTO_TCP -> LProtoTcp
	1: "LProtoTcp",
	// L_PROTO_UDP -> LProtoUdp
	2: "LProtoUdp",
}
var LProto_CamelValue = map[string]int32{
	"LProtoUnknown": 0,
	"LProtoTcp":     1,
	"LProtoUdp":     2,
}

func (e *LProto) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := LProto_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = LProto_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = LProto(val)
	return nil
}

func (e LProto) MarshalYAML() (interface{}, error) {
	return proto.EnumName(LProto_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *LProto) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := LProto_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = LProto_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = LProto(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = LProto(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}
func (m *AppPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proto != 0 {
		n += 1 + sovAppcommon(uint64(m.Proto))
	}
	if m.InternalPort != 0 {
		n += 1 + sovAppcommon(uint64(m.InternalPort))
	}
	if m.PublicPort != 0 {
		n += 1 + sovAppcommon(uint64(m.PublicPort))
	}
	l = len(m.FqdnPrefix)
	if l > 0 {
		n += 1 + l + sovAppcommon(uint64(l))
	}
	if m.EndPort != 0 {
		n += 1 + sovAppcommon(uint64(m.EndPort))
	}
	if m.Tls {
		n += 2
	}
	if m.Nginx {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Latency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avg != 0 {
		n += 9
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.StdDev != 0 {
		n += 9
	}
	if m.NumSamples != 0 {
		n += 1 + sovAppcommon(uint64(m.NumSamples))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAppcommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppcommon(x uint64) (n int) {
	return sovAppcommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= LProto(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPort", wireType)
			}
			m.InternalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InternalPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicPort", wireType)
			}
			m.PublicPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FqdnPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FqdnPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPort", wireType)
			}
			m.EndPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tls = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nginx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nginx = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAppcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Latency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Latency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Latency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdDev", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StdDev = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSamples", wireType)
			}
			m.NumSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSamples |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAppcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppcommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppcommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppcommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppcommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppcommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppcommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppcommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppcommon = fmt.Errorf("proto: unexpected end of group")
)
