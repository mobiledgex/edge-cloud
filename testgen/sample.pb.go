// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample.proto

/*
	Package testgen is a generated protocol buffer package.

	It is generated from these files:
		sample.proto

	It has these top-level messages:
		NestedMessage
		IncludeMessage
		IncludeFields
		TestGen
*/
package testgen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import strings "strings"
import google_protobuf "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OuterEnum int32

const (
	OuterEnum_OUTER0 OuterEnum = 0
	OuterEnum_OUTER1 OuterEnum = 1
	OuterEnum_OUTER2 OuterEnum = 2
	OuterEnum_OUTER3 OuterEnum = 3
)

var OuterEnum_name = map[int32]string{
	0: "OUTER0",
	1: "OUTER1",
	2: "OUTER2",
	3: "OUTER3",
}
var OuterEnum_value = map[string]int32{
	"OUTER0": 0,
	"OUTER1": 1,
	"OUTER2": 2,
	"OUTER3": 3,
}

func (x OuterEnum) String() string {
	return proto.EnumName(OuterEnum_name, int32(x))
}
func (OuterEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorSample, []int{0} }

type TestGen_InnerEnum int32

const (
	TestGen_INNER0 TestGen_InnerEnum = 0
	TestGen_INNER1 TestGen_InnerEnum = 1
	TestGen_INNER2 TestGen_InnerEnum = 2
	TestGen_INNER3 TestGen_InnerEnum = 3
)

var TestGen_InnerEnum_name = map[int32]string{
	0: "INNER0",
	1: "INNER1",
	2: "INNER2",
	3: "INNER3",
}
var TestGen_InnerEnum_value = map[string]int32{
	"INNER0": 0,
	"INNER1": 1,
	"INNER2": 2,
	"INNER3": 3,
}

func (x TestGen_InnerEnum) String() string {
	return proto.EnumName(TestGen_InnerEnum_name, int32(x))
}
func (TestGen_InnerEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorSample, []int{3, 0} }

type NestedMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NestedMessage) Reset()                    { *m = NestedMessage{} }
func (m *NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*NestedMessage) ProtoMessage()               {}
func (*NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{0} }

type IncludeMessage struct {
	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NestedMsg *NestedMessage `protobuf:"bytes,3,opt,name=nested_msg,json=nestedMsg" json:"nested_msg,omitempty"`
}

func (m *IncludeMessage) Reset()                    { *m = IncludeMessage{} }
func (m *IncludeMessage) String() string            { return proto.CompactTextString(m) }
func (*IncludeMessage) ProtoMessage()               {}
func (*IncludeMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{1} }

type IncludeFields struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *IncludeFields) Reset()                    { *m = IncludeFields{} }
func (m *IncludeFields) String() string            { return proto.CompactTextString(m) }
func (*IncludeFields) ProtoMessage()               {}
func (*IncludeFields) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{2} }

type TestGen struct {
	Fields                  []string                `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Name                    string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Db                      float64                 `protobuf:"fixed64,3,opt,name=db,proto3" json:"db,omitempty"`
	Fl                      float32                 `protobuf:"fixed32,4,opt,name=fl,proto3" json:"fl,omitempty"`
	I32                     int32                   `protobuf:"varint,5,opt,name=i32,proto3" json:"i32,omitempty"`
	I64                     int64                   `protobuf:"varint,6,opt,name=i64,proto3" json:"i64,omitempty"`
	U32                     uint32                  `protobuf:"varint,7,opt,name=u32,proto3" json:"u32,omitempty"`
	U64                     uint64                  `protobuf:"varint,8,opt,name=u64,proto3" json:"u64,omitempty"`
	S32                     int32                   `protobuf:"zigzag32,9,opt,name=s32,proto3" json:"s32,omitempty"`
	S64                     int64                   `protobuf:"zigzag64,10,opt,name=s64,proto3" json:"s64,omitempty"`
	F32                     uint32                  `protobuf:"fixed32,11,opt,name=f32,proto3" json:"f32,omitempty"`
	F64                     uint64                  `protobuf:"fixed64,12,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32                    int32                   `protobuf:"fixed32,13,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64                    int64                   `protobuf:"fixed64,14,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bb                      bool                    `protobuf:"varint,15,opt,name=bb,proto3" json:"bb,omitempty"`
	OuterEn                 OuterEnum               `protobuf:"varint,16,opt,name=outer_en,json=outerEn,proto3,enum=testgen.OuterEnum" json:"outer_en,omitempty"`
	InnerEn                 TestGen_InnerEnum       `protobuf:"varint,17,opt,name=inner_en,json=innerEn,proto3,enum=testgen.TestGen_InnerEnum" json:"inner_en,omitempty"`
	InnerMsg                *TestGen_InnerMessage   `protobuf:"bytes,18,opt,name=inner_msg,json=innerMsg" json:"inner_msg,omitempty"`
	InnerMsgNonnull         TestGen_InnerMessage    `protobuf:"bytes,19,opt,name=inner_msg_nonnull,json=innerMsgNonnull" json:"inner_msg_nonnull"`
	IncludeMsg              *IncludeMessage         `protobuf:"bytes,20,opt,name=include_msg,json=includeMsg" json:"include_msg,omitempty"`
	IncludeMsgNonnull       IncludeMessage          `protobuf:"bytes,21,opt,name=include_msg_nonnull,json=includeMsgNonnull" json:"include_msg_nonnull"`
	IncludeFields           *IncludeFields          `protobuf:"bytes,22,opt,name=include_fields,json=includeFields" json:"include_fields,omitempty"`
	IncludeFieldsNonnull    IncludeFields           `protobuf:"bytes,23,opt,name=include_fields_nonnull,json=includeFieldsNonnull" json:"include_fields_nonnull"`
	Loc                     *edgeproto.Loc          `protobuf:"bytes,24,opt,name=loc" json:"loc,omitempty"`
	LocNonnull              edgeproto.Loc           `protobuf:"bytes,25,opt,name=loc_nonnull,json=locNonnull" json:"loc_nonnull"`
	RepeatedInt             []int64                 `protobuf:"varint,26,rep,packed,name=repeated_int,json=repeatedInt" json:"repeated_int,omitempty"`
	Ip                      []byte                  `protobuf:"bytes,27,opt,name=ip,proto3" json:"ip,omitempty"`
	Names                   []string                `protobuf:"bytes,28,rep,name=names" json:"names,omitempty"`
	RepeatedMsg             []*IncludeMessage       `protobuf:"bytes,29,rep,name=repeated_msg,json=repeatedMsg" json:"repeated_msg,omitempty"`
	RepeatedMsgNonnull      []IncludeMessage        `protobuf:"bytes,30,rep,name=repeated_msg_nonnull,json=repeatedMsgNonnull" json:"repeated_msg_nonnull"`
	RepeatedFields          []*IncludeFields        `protobuf:"bytes,31,rep,name=repeated_fields,json=repeatedFields" json:"repeated_fields,omitempty"`
	RepeatedFieldsNonnull   []IncludeFields         `protobuf:"bytes,32,rep,name=repeated_fields_nonnull,json=repeatedFieldsNonnull" json:"repeated_fields_nonnull"`
	RepeatedInnerMsg        []*TestGen_InnerMessage `protobuf:"bytes,33,rep,name=repeated_inner_msg,json=repeatedInnerMsg" json:"repeated_inner_msg,omitempty"`
	RepeatedInnerMsgNonnull []TestGen_InnerMessage  `protobuf:"bytes,34,rep,name=repeated_inner_msg_nonnull,json=repeatedInnerMsgNonnull" json:"repeated_inner_msg_nonnull"`
	RepeatedLoc             []*edgeproto.Loc        `protobuf:"bytes,35,rep,name=repeated_loc,json=repeatedLoc" json:"repeated_loc,omitempty"`
	RepeatedLocNonnull      []edgeproto.Loc         `protobuf:"bytes,36,rep,name=repeated_loc_nonnull,json=repeatedLocNonnull" json:"repeated_loc_nonnull"`
}

func (m *TestGen) Reset()                    { *m = TestGen{} }
func (m *TestGen) String() string            { return proto.CompactTextString(m) }
func (*TestGen) ProtoMessage()               {}
func (*TestGen) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{3} }

type TestGen_InnerMessage struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id  int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TestGen_InnerMessage) Reset()                    { *m = TestGen_InnerMessage{} }
func (m *TestGen_InnerMessage) String() string            { return proto.CompactTextString(m) }
func (*TestGen_InnerMessage) ProtoMessage()               {}
func (*TestGen_InnerMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{3, 0} }

func init() {
	proto.RegisterType((*NestedMessage)(nil), "testgen.NestedMessage")
	proto.RegisterType((*IncludeMessage)(nil), "testgen.IncludeMessage")
	proto.RegisterType((*IncludeFields)(nil), "testgen.IncludeFields")
	proto.RegisterType((*TestGen)(nil), "testgen.TestGen")
	proto.RegisterType((*TestGen_InnerMessage)(nil), "testgen.TestGen.InnerMessage")
	proto.RegisterEnum("testgen.OuterEnum", OuterEnum_name, OuterEnum_value)
	proto.RegisterEnum("testgen.TestGen_InnerEnum", TestGen_InnerEnum_name, TestGen_InnerEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestApi service

type TestApiClient interface {
	Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error)
}

type testApiClient struct {
	cc *grpc.ClientConn
}

func NewTestApiClient(cc *grpc.ClientConn) TestApiClient {
	return &testApiClient{cc}
}

func (c *testApiClient) Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error) {
	out := new(TestGen)
	err := grpc.Invoke(ctx, "/testgen.TestApi/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestApi service

type TestApiServer interface {
	Request(context.Context, *TestGen) (*TestGen, error)
}

func RegisterTestApiServer(s *grpc.Server, srv TestApiServer) {
	s.RegisterService(&_TestApi_serviceDesc, srv)
}

func _TestApi_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestGen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgen.TestApi/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).Request(ctx, req.(*TestGen))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testgen.TestApi",
	HandlerType: (*TestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _TestApi_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

func (m *NestedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *IncludeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	if m.NestedMsg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.NestedMsg.Size()))
		n1, err := m.NestedMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IncludeFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeFields) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TestGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Db != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Db))))
		i += 8
	}
	if m.Fl != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fl))))
		i += 4
	}
	if m.I32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.I32))
	}
	if m.I64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.I64))
	}
	if m.U32 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.U32))
	}
	if m.U64 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.U64))
	}
	if m.S32 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSample(dAtA, i, uint64((uint32(m.S32)<<1)^uint32((m.S32>>31))))
	}
	if m.S64 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSample(dAtA, i, uint64((uint64(m.S64)<<1)^uint64((m.S64>>63))))
	}
	if m.F32 != 0 {
		dAtA[i] = 0x5d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.F32))
		i += 4
	}
	if m.F64 != 0 {
		dAtA[i] = 0x61
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.F64))
		i += 8
	}
	if m.Sf32 != 0 {
		dAtA[i] = 0x6d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sf32))
		i += 4
	}
	if m.Sf64 != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sf64))
		i += 8
	}
	if m.Bb {
		dAtA[i] = 0x78
		i++
		if m.Bb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OuterEn != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.OuterEn))
	}
	if m.InnerEn != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.InnerEn))
	}
	if m.InnerMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.InnerMsg.Size()))
		n2, err := m.InnerMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.InnerMsgNonnull.Size()))
	n3, err := m.InnerMsgNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.IncludeMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.IncludeMsg.Size()))
		n4, err := m.IncludeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.IncludeMsgNonnull.Size()))
	n5, err := m.IncludeMsgNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.IncludeFields != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.IncludeFields.Size()))
		n6, err := m.IncludeFields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.IncludeFieldsNonnull.Size()))
	n7, err := m.IncludeFieldsNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Loc != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Loc.Size()))
		n8, err := m.Loc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.LocNonnull.Size()))
	n9, err := m.LocNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.RepeatedInt) > 0 {
		dAtA11 := make([]byte, len(m.RepeatedInt)*10)
		var j10 int
		for _, num1 := range m.RepeatedInt {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for _, msg := range m.RepeatedMsg {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for _, msg := range m.RepeatedMsgNonnull {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedFields) > 0 {
		for _, msg := range m.RepeatedFields {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for _, msg := range m.RepeatedFieldsNonnull {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for _, msg := range m.RepeatedInnerMsg {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for _, msg := range m.RepeatedInnerMsgNonnull {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for _, msg := range m.RepeatedLoc {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for _, msg := range m.RepeatedLocNonnull {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestGen_InnerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen_InnerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NestedMessage) CopyInFields(src *NestedMessage) {
	m.Name = src.Name
}

func (m *IncludeMessage) CopyInFields(src *IncludeMessage) {
	m.Name = src.Name
	m.Id = src.Id
	if src.NestedMsg != nil {
		m.NestedMsg = &NestedMessage{}
		m.NestedMsg.Name = src.NestedMsg.Name
	}
}

func (m *IncludeFields) CopyInFields(src *IncludeFields) {
	m.Name = src.Name
}

const TestGenFieldName = "2"
const TestGenFieldDb = "3"
const TestGenFieldFl = "4"
const TestGenFieldI32 = "5"
const TestGenFieldI64 = "6"
const TestGenFieldU32 = "7"
const TestGenFieldU64 = "8"
const TestGenFieldS32 = "9"
const TestGenFieldS64 = "10"
const TestGenFieldF32 = "11"
const TestGenFieldF64 = "12"
const TestGenFieldSf32 = "13"
const TestGenFieldSf64 = "14"
const TestGenFieldBb = "15"
const TestGenFieldOuterEn = "16"
const TestGenFieldInnerEn = "17"
const TestGenFieldInnerMsgUrl = "18.1"
const TestGenFieldInnerMsgId = "18.2"
const TestGenFieldInnerMsgNonnullUrl = "19.1"
const TestGenFieldInnerMsgNonnullId = "19.2"
const TestGenFieldIncludeMsgName = "20.1"
const TestGenFieldIncludeMsgId = "20.2"
const TestGenFieldIncludeMsgNestedMsgName = "20.3.1"
const TestGenFieldIncludeMsgNonnullName = "21.1"
const TestGenFieldIncludeMsgNonnullId = "21.2"
const TestGenFieldIncludeMsgNonnullNestedMsgName = "21.3.1"
const TestGenFieldIncludeFieldsName = "22.2"
const TestGenFieldIncludeFieldsNonnullName = "23.2"
const TestGenFieldLocLat = "24.1"
const TestGenFieldLocLong = "24.2"
const TestGenFieldLocHorizontalAccuracy = "24.3"
const TestGenFieldLocVerticalAccuracy = "24.4"
const TestGenFieldLocAltitude = "24.5"
const TestGenFieldLocCourse = "24.6"
const TestGenFieldLocSpeed = "24.7"
const TestGenFieldLocTimestampSeconds = "24.8.1"
const TestGenFieldLocTimestampNanos = "24.8.2"
const TestGenFieldLocNonnullLat = "25.1"
const TestGenFieldLocNonnullLong = "25.2"
const TestGenFieldLocNonnullHorizontalAccuracy = "25.3"
const TestGenFieldLocNonnullVerticalAccuracy = "25.4"
const TestGenFieldLocNonnullAltitude = "25.5"
const TestGenFieldLocNonnullCourse = "25.6"
const TestGenFieldLocNonnullSpeed = "25.7"
const TestGenFieldLocNonnullTimestampSeconds = "25.8.1"
const TestGenFieldLocNonnullTimestampNanos = "25.8.2"
const TestGenFieldRepeatedInt = "26"
const TestGenFieldIp = "27"
const TestGenFieldNames = "28"
const TestGenFieldRepeatedMsgName = "29.1"
const TestGenFieldRepeatedMsgId = "29.2"
const TestGenFieldRepeatedMsgNestedMsgName = "29.3.1"
const TestGenFieldRepeatedMsgNonnullName = "30.1"
const TestGenFieldRepeatedMsgNonnullId = "30.2"
const TestGenFieldRepeatedMsgNonnullNestedMsgName = "30.3.1"
const TestGenFieldRepeatedFieldsName = "31.2"
const TestGenFieldRepeatedFieldsNonnullName = "32.2"
const TestGenFieldRepeatedInnerMsgUrl = "33.1"
const TestGenFieldRepeatedInnerMsgId = "33.2"
const TestGenFieldRepeatedInnerMsgNonnullUrl = "34.1"
const TestGenFieldRepeatedInnerMsgNonnullId = "34.2"
const TestGenFieldRepeatedLocLat = "35.1"
const TestGenFieldRepeatedLocLong = "35.2"
const TestGenFieldRepeatedLocHorizontalAccuracy = "35.3"
const TestGenFieldRepeatedLocVerticalAccuracy = "35.4"
const TestGenFieldRepeatedLocAltitude = "35.5"
const TestGenFieldRepeatedLocCourse = "35.6"
const TestGenFieldRepeatedLocSpeed = "35.7"
const TestGenFieldRepeatedLocTimestampSeconds = "35.8.1"
const TestGenFieldRepeatedLocTimestampNanos = "35.8.2"
const TestGenFieldRepeatedLocNonnullLat = "36.1"
const TestGenFieldRepeatedLocNonnullLong = "36.2"
const TestGenFieldRepeatedLocNonnullHorizontalAccuracy = "36.3"
const TestGenFieldRepeatedLocNonnullVerticalAccuracy = "36.4"
const TestGenFieldRepeatedLocNonnullAltitude = "36.5"
const TestGenFieldRepeatedLocNonnullCourse = "36.6"
const TestGenFieldRepeatedLocNonnullSpeed = "36.7"
const TestGenFieldRepeatedLocNonnullTimestampSeconds = "36.8.1"
const TestGenFieldRepeatedLocNonnullTimestampNanos = "36.8.2"

var TestGenAllFields = []string{
	TestGenFieldName,
	TestGenFieldDb,
	TestGenFieldFl,
	TestGenFieldI32,
	TestGenFieldI64,
	TestGenFieldU32,
	TestGenFieldU64,
	TestGenFieldS32,
	TestGenFieldS64,
	TestGenFieldF32,
	TestGenFieldF64,
	TestGenFieldSf32,
	TestGenFieldSf64,
	TestGenFieldBb,
	TestGenFieldOuterEn,
	TestGenFieldInnerEn,
	TestGenFieldInnerMsgUrl,
	TestGenFieldInnerMsgId,
	TestGenFieldInnerMsgNonnullUrl,
	TestGenFieldInnerMsgNonnullId,
	TestGenFieldIncludeMsgName,
	TestGenFieldIncludeMsgId,
	TestGenFieldIncludeMsgNestedMsgName,
	TestGenFieldIncludeMsgNonnullName,
	TestGenFieldIncludeMsgNonnullId,
	TestGenFieldIncludeMsgNonnullNestedMsgName,
	TestGenFieldIncludeFieldsName,
	TestGenFieldIncludeFieldsNonnullName,
	TestGenFieldLocLat,
	TestGenFieldLocLong,
	TestGenFieldLocHorizontalAccuracy,
	TestGenFieldLocVerticalAccuracy,
	TestGenFieldLocAltitude,
	TestGenFieldLocCourse,
	TestGenFieldLocSpeed,
	TestGenFieldLocTimestampSeconds,
	TestGenFieldLocTimestampNanos,
	TestGenFieldLocNonnullLat,
	TestGenFieldLocNonnullLong,
	TestGenFieldLocNonnullHorizontalAccuracy,
	TestGenFieldLocNonnullVerticalAccuracy,
	TestGenFieldLocNonnullAltitude,
	TestGenFieldLocNonnullCourse,
	TestGenFieldLocNonnullSpeed,
	TestGenFieldLocNonnullTimestampSeconds,
	TestGenFieldLocNonnullTimestampNanos,
	TestGenFieldRepeatedInt,
	TestGenFieldIp,
	TestGenFieldNames,
	TestGenFieldRepeatedMsgName,
	TestGenFieldRepeatedMsgId,
	TestGenFieldRepeatedMsgNestedMsgName,
	TestGenFieldRepeatedMsgNonnullName,
	TestGenFieldRepeatedMsgNonnullId,
	TestGenFieldRepeatedMsgNonnullNestedMsgName,
	TestGenFieldRepeatedFieldsName,
	TestGenFieldRepeatedFieldsNonnullName,
	TestGenFieldRepeatedInnerMsgUrl,
	TestGenFieldRepeatedInnerMsgId,
	TestGenFieldRepeatedInnerMsgNonnullUrl,
	TestGenFieldRepeatedInnerMsgNonnullId,
	TestGenFieldRepeatedLocLat,
	TestGenFieldRepeatedLocLong,
	TestGenFieldRepeatedLocHorizontalAccuracy,
	TestGenFieldRepeatedLocVerticalAccuracy,
	TestGenFieldRepeatedLocAltitude,
	TestGenFieldRepeatedLocCourse,
	TestGenFieldRepeatedLocSpeed,
	TestGenFieldRepeatedLocTimestampSeconds,
	TestGenFieldRepeatedLocTimestampNanos,
	TestGenFieldRepeatedLocNonnullLat,
	TestGenFieldRepeatedLocNonnullLong,
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy,
	TestGenFieldRepeatedLocNonnullVerticalAccuracy,
	TestGenFieldRepeatedLocNonnullAltitude,
	TestGenFieldRepeatedLocNonnullCourse,
	TestGenFieldRepeatedLocNonnullSpeed,
	TestGenFieldRepeatedLocNonnullTimestampSeconds,
	TestGenFieldRepeatedLocNonnullTimestampNanos,
}

func (m *TestGen) CopyInFields(src *TestGen) {
	fmap := make(map[string]struct{})
	// add specified fields and parent fields
	for _, set := range src.Fields {
		for {
			fmap[set] = struct{}{}
			idx := strings.LastIndex(set, ".")
			if idx == -1 {
				break
			}
			set = set[:idx]
		}
	}
	if _, set := fmap["2"]; set {
		m.Name = src.Name
	}
	if _, set := fmap["3"]; set {
		m.Db = src.Db
	}
	if _, set := fmap["4"]; set {
		m.Fl = src.Fl
	}
	if _, set := fmap["5"]; set {
		m.I32 = src.I32
	}
	if _, set := fmap["6"]; set {
		m.I64 = src.I64
	}
	if _, set := fmap["7"]; set {
		m.U32 = src.U32
	}
	if _, set := fmap["8"]; set {
		m.U64 = src.U64
	}
	if _, set := fmap["9"]; set {
		m.S32 = src.S32
	}
	if _, set := fmap["10"]; set {
		m.S64 = src.S64
	}
	if _, set := fmap["11"]; set {
		m.F32 = src.F32
	}
	if _, set := fmap["12"]; set {
		m.F64 = src.F64
	}
	if _, set := fmap["13"]; set {
		m.Sf32 = src.Sf32
	}
	if _, set := fmap["14"]; set {
		m.Sf64 = src.Sf64
	}
	if _, set := fmap["15"]; set {
		m.Bb = src.Bb
	}
	if _, set := fmap["16"]; set {
		m.OuterEn = src.OuterEn
	}
	if _, set := fmap["17"]; set {
		m.InnerEn = src.InnerEn
	}
	if _, set := fmap["18"]; set && src.InnerMsg != nil {
		m.InnerMsg = &TestGen_InnerMessage{}
		if _, set := fmap["18.1"]; set {
			m.InnerMsg.Url = src.InnerMsg.Url
		}
		if _, set := fmap["18.2"]; set {
			m.InnerMsg.Id = src.InnerMsg.Id
		}
	}
	if _, set := fmap["19"]; set {
		if _, set := fmap["19.1"]; set {
			m.InnerMsgNonnull.Url = src.InnerMsgNonnull.Url
		}
		if _, set := fmap["19.2"]; set {
			m.InnerMsgNonnull.Id = src.InnerMsgNonnull.Id
		}
	}
	if _, set := fmap["20"]; set && src.IncludeMsg != nil {
		m.IncludeMsg = &IncludeMessage{}
		if _, set := fmap["20.1"]; set {
			m.IncludeMsg.Name = src.IncludeMsg.Name
		}
		if _, set := fmap["20.2"]; set {
			m.IncludeMsg.Id = src.IncludeMsg.Id
		}
		if _, set := fmap["20.3"]; set && src.IncludeMsg.NestedMsg != nil {
			m.IncludeMsg.NestedMsg = &NestedMessage{}
			if _, set := fmap["20.3.1"]; set {
				m.IncludeMsg.NestedMsg.Name = src.IncludeMsg.NestedMsg.Name
			}
		}
	}
	if _, set := fmap["21"]; set {
		if _, set := fmap["21.1"]; set {
			m.IncludeMsgNonnull.Name = src.IncludeMsgNonnull.Name
		}
		if _, set := fmap["21.2"]; set {
			m.IncludeMsgNonnull.Id = src.IncludeMsgNonnull.Id
		}
		if _, set := fmap["21.3"]; set && src.IncludeMsgNonnull.NestedMsg != nil {
			m.IncludeMsgNonnull.NestedMsg = &NestedMessage{}
			if _, set := fmap["21.3.1"]; set {
				m.IncludeMsgNonnull.NestedMsg.Name = src.IncludeMsgNonnull.NestedMsg.Name
			}
		}
	}
	if _, set := fmap["22"]; set && src.IncludeFields != nil {
		m.IncludeFields = &IncludeFields{}
		if _, set := fmap["22.2"]; set {
			m.IncludeFields.Name = src.IncludeFields.Name
		}
	}
	if _, set := fmap["23"]; set {
		if _, set := fmap["23.2"]; set {
			m.IncludeFieldsNonnull.Name = src.IncludeFieldsNonnull.Name
		}
	}
	if _, set := fmap["24"]; set && src.Loc != nil {
		m.Loc = &edgeproto.Loc{}
		if _, set := fmap["24.1"]; set {
			m.Loc.Lat = src.Loc.Lat
		}
		if _, set := fmap["24.2"]; set {
			m.Loc.Long = src.Loc.Long
		}
		if _, set := fmap["24.3"]; set {
			m.Loc.HorizontalAccuracy = src.Loc.HorizontalAccuracy
		}
		if _, set := fmap["24.4"]; set {
			m.Loc.VerticalAccuracy = src.Loc.VerticalAccuracy
		}
		if _, set := fmap["24.5"]; set {
			m.Loc.Altitude = src.Loc.Altitude
		}
		if _, set := fmap["24.6"]; set {
			m.Loc.Course = src.Loc.Course
		}
		if _, set := fmap["24.7"]; set {
			m.Loc.Speed = src.Loc.Speed
		}
		if _, set := fmap["24.8"]; set && src.Loc.Timestamp != nil {
			m.Loc.Timestamp = &google_protobuf.Timestamp{}
			if _, set := fmap["24.8.1"]; set {
				m.Loc.Timestamp.Seconds = src.Loc.Timestamp.Seconds
			}
			if _, set := fmap["24.8.2"]; set {
				m.Loc.Timestamp.Nanos = src.Loc.Timestamp.Nanos
			}
		}
	}
	if _, set := fmap["25"]; set {
		if _, set := fmap["25.1"]; set {
			m.LocNonnull.Lat = src.LocNonnull.Lat
		}
		if _, set := fmap["25.2"]; set {
			m.LocNonnull.Long = src.LocNonnull.Long
		}
		if _, set := fmap["25.3"]; set {
			m.LocNonnull.HorizontalAccuracy = src.LocNonnull.HorizontalAccuracy
		}
		if _, set := fmap["25.4"]; set {
			m.LocNonnull.VerticalAccuracy = src.LocNonnull.VerticalAccuracy
		}
		if _, set := fmap["25.5"]; set {
			m.LocNonnull.Altitude = src.LocNonnull.Altitude
		}
		if _, set := fmap["25.6"]; set {
			m.LocNonnull.Course = src.LocNonnull.Course
		}
		if _, set := fmap["25.7"]; set {
			m.LocNonnull.Speed = src.LocNonnull.Speed
		}
		if _, set := fmap["25.8"]; set && src.LocNonnull.Timestamp != nil {
			m.LocNonnull.Timestamp = &google_protobuf.Timestamp{}
			if _, set := fmap["25.8.1"]; set {
				m.LocNonnull.Timestamp.Seconds = src.LocNonnull.Timestamp.Seconds
			}
			if _, set := fmap["25.8.2"]; set {
				m.LocNonnull.Timestamp.Nanos = src.LocNonnull.Timestamp.Nanos
			}
		}
	}
	if _, set := fmap["26"]; set {
		if m.RepeatedInt == nil || len(m.RepeatedInt) < len(src.RepeatedInt) {
			m.RepeatedInt = make([]int64, len(src.RepeatedInt))
		}
		copy(m.RepeatedInt, src.RepeatedInt)
	}
	if _, set := fmap["27"]; set {
		if m.Ip == nil || len(m.Ip) < len(src.Ip) {
			m.Ip = make([]byte, len(src.Ip))
		}
		copy(m.Ip, src.Ip)
	}
	if _, set := fmap["28"]; set {
		if m.Names == nil || len(m.Names) < len(src.Names) {
			m.Names = make([]string, len(src.Names))
		}
		copy(m.Names, src.Names)
	}
	if _, set := fmap["29"]; set && src.RepeatedMsg != nil {
		if m.RepeatedMsg == nil || len(m.RepeatedMsg) < len(src.RepeatedMsg) {
			m.RepeatedMsg = make([]*IncludeMessage, len(src.RepeatedMsg))
		}
		for i0 := 0; i0 < len(src.RepeatedMsg); i0++ {
			m.RepeatedMsg[i0] = &IncludeMessage{}
			if _, set := fmap["29.1"]; set {
				m.RepeatedMsg[i0].Name = src.RepeatedMsg[i0].Name
			}
			if _, set := fmap["29.2"]; set {
				m.RepeatedMsg[i0].Id = src.RepeatedMsg[i0].Id
			}
			if _, set := fmap["29.3"]; set && src.RepeatedMsg[i0].NestedMsg != nil {
				m.RepeatedMsg[i0].NestedMsg = &NestedMessage{}
				if _, set := fmap["29.3.1"]; set {
					m.RepeatedMsg[i0].NestedMsg.Name = src.RepeatedMsg[i0].NestedMsg.Name
				}
			}
		}
	}
	if _, set := fmap["30"]; set {
		if m.RepeatedMsgNonnull == nil || len(m.RepeatedMsgNonnull) < len(src.RepeatedMsgNonnull) {
			m.RepeatedMsgNonnull = make([]IncludeMessage, len(src.RepeatedMsgNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedMsgNonnull); i0++ {
			if _, set := fmap["30.1"]; set {
				m.RepeatedMsgNonnull[i0].Name = src.RepeatedMsgNonnull[i0].Name
			}
			if _, set := fmap["30.2"]; set {
				m.RepeatedMsgNonnull[i0].Id = src.RepeatedMsgNonnull[i0].Id
			}
			if _, set := fmap["30.3"]; set && src.RepeatedMsgNonnull[i0].NestedMsg != nil {
				m.RepeatedMsgNonnull[i0].NestedMsg = &NestedMessage{}
				if _, set := fmap["30.3.1"]; set {
					m.RepeatedMsgNonnull[i0].NestedMsg.Name = src.RepeatedMsgNonnull[i0].NestedMsg.Name
				}
			}
		}
	}
	if _, set := fmap["31"]; set && src.RepeatedFields != nil {
		if m.RepeatedFields == nil || len(m.RepeatedFields) < len(src.RepeatedFields) {
			m.RepeatedFields = make([]*IncludeFields, len(src.RepeatedFields))
		}
		for i0 := 0; i0 < len(src.RepeatedFields); i0++ {
			m.RepeatedFields[i0] = &IncludeFields{}
			if _, set := fmap["31.2"]; set {
				m.RepeatedFields[i0].Name = src.RepeatedFields[i0].Name
			}
		}
	}
	if _, set := fmap["32"]; set {
		if m.RepeatedFieldsNonnull == nil || len(m.RepeatedFieldsNonnull) < len(src.RepeatedFieldsNonnull) {
			m.RepeatedFieldsNonnull = make([]IncludeFields, len(src.RepeatedFieldsNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedFieldsNonnull); i0++ {
			if _, set := fmap["32.2"]; set {
				m.RepeatedFieldsNonnull[i0].Name = src.RepeatedFieldsNonnull[i0].Name
			}
		}
	}
	if _, set := fmap["33"]; set && src.RepeatedInnerMsg != nil {
		if m.RepeatedInnerMsg == nil || len(m.RepeatedInnerMsg) < len(src.RepeatedInnerMsg) {
			m.RepeatedInnerMsg = make([]*TestGen_InnerMessage, len(src.RepeatedInnerMsg))
		}
		for i0 := 0; i0 < len(src.RepeatedInnerMsg); i0++ {
			m.RepeatedInnerMsg[i0] = &TestGen_InnerMessage{}
			if _, set := fmap["33.1"]; set {
				m.RepeatedInnerMsg[i0].Url = src.RepeatedInnerMsg[i0].Url
			}
			if _, set := fmap["33.2"]; set {
				m.RepeatedInnerMsg[i0].Id = src.RepeatedInnerMsg[i0].Id
			}
		}
	}
	if _, set := fmap["34"]; set {
		if m.RepeatedInnerMsgNonnull == nil || len(m.RepeatedInnerMsgNonnull) < len(src.RepeatedInnerMsgNonnull) {
			m.RepeatedInnerMsgNonnull = make([]TestGen_InnerMessage, len(src.RepeatedInnerMsgNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedInnerMsgNonnull); i0++ {
			if _, set := fmap["34.1"]; set {
				m.RepeatedInnerMsgNonnull[i0].Url = src.RepeatedInnerMsgNonnull[i0].Url
			}
			if _, set := fmap["34.2"]; set {
				m.RepeatedInnerMsgNonnull[i0].Id = src.RepeatedInnerMsgNonnull[i0].Id
			}
		}
	}
	if _, set := fmap["35"]; set && src.RepeatedLoc != nil {
		if m.RepeatedLoc == nil || len(m.RepeatedLoc) < len(src.RepeatedLoc) {
			m.RepeatedLoc = make([]*edgeproto.Loc, len(src.RepeatedLoc))
		}
		for i0 := 0; i0 < len(src.RepeatedLoc); i0++ {
			m.RepeatedLoc[i0] = &edgeproto.Loc{}
			if _, set := fmap["35.1"]; set {
				m.RepeatedLoc[i0].Lat = src.RepeatedLoc[i0].Lat
			}
			if _, set := fmap["35.2"]; set {
				m.RepeatedLoc[i0].Long = src.RepeatedLoc[i0].Long
			}
			if _, set := fmap["35.3"]; set {
				m.RepeatedLoc[i0].HorizontalAccuracy = src.RepeatedLoc[i0].HorizontalAccuracy
			}
			if _, set := fmap["35.4"]; set {
				m.RepeatedLoc[i0].VerticalAccuracy = src.RepeatedLoc[i0].VerticalAccuracy
			}
			if _, set := fmap["35.5"]; set {
				m.RepeatedLoc[i0].Altitude = src.RepeatedLoc[i0].Altitude
			}
			if _, set := fmap["35.6"]; set {
				m.RepeatedLoc[i0].Course = src.RepeatedLoc[i0].Course
			}
			if _, set := fmap["35.7"]; set {
				m.RepeatedLoc[i0].Speed = src.RepeatedLoc[i0].Speed
			}
			if _, set := fmap["35.8"]; set && src.RepeatedLoc[i0].Timestamp != nil {
				m.RepeatedLoc[i0].Timestamp = &google_protobuf.Timestamp{}
				if _, set := fmap["35.8.1"]; set {
					m.RepeatedLoc[i0].Timestamp.Seconds = src.RepeatedLoc[i0].Timestamp.Seconds
				}
				if _, set := fmap["35.8.2"]; set {
					m.RepeatedLoc[i0].Timestamp.Nanos = src.RepeatedLoc[i0].Timestamp.Nanos
				}
			}
		}
	}
	if _, set := fmap["36"]; set {
		if m.RepeatedLocNonnull == nil || len(m.RepeatedLocNonnull) < len(src.RepeatedLocNonnull) {
			m.RepeatedLocNonnull = make([]edgeproto.Loc, len(src.RepeatedLocNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedLocNonnull); i0++ {
			if _, set := fmap["36.1"]; set {
				m.RepeatedLocNonnull[i0].Lat = src.RepeatedLocNonnull[i0].Lat
			}
			if _, set := fmap["36.2"]; set {
				m.RepeatedLocNonnull[i0].Long = src.RepeatedLocNonnull[i0].Long
			}
			if _, set := fmap["36.3"]; set {
				m.RepeatedLocNonnull[i0].HorizontalAccuracy = src.RepeatedLocNonnull[i0].HorizontalAccuracy
			}
			if _, set := fmap["36.4"]; set {
				m.RepeatedLocNonnull[i0].VerticalAccuracy = src.RepeatedLocNonnull[i0].VerticalAccuracy
			}
			if _, set := fmap["36.5"]; set {
				m.RepeatedLocNonnull[i0].Altitude = src.RepeatedLocNonnull[i0].Altitude
			}
			if _, set := fmap["36.6"]; set {
				m.RepeatedLocNonnull[i0].Course = src.RepeatedLocNonnull[i0].Course
			}
			if _, set := fmap["36.7"]; set {
				m.RepeatedLocNonnull[i0].Speed = src.RepeatedLocNonnull[i0].Speed
			}
			if _, set := fmap["36.8"]; set && src.RepeatedLocNonnull[i0].Timestamp != nil {
				m.RepeatedLocNonnull[i0].Timestamp = &google_protobuf.Timestamp{}
				if _, set := fmap["36.8.1"]; set {
					m.RepeatedLocNonnull[i0].Timestamp.Seconds = src.RepeatedLocNonnull[i0].Timestamp.Seconds
				}
				if _, set := fmap["36.8.2"]; set {
					m.RepeatedLocNonnull[i0].Timestamp.Nanos = src.RepeatedLocNonnull[i0].Timestamp.Nanos
				}
			}
		}
	}
}

func (m *TestGen_InnerMessage) CopyInFields(src *TestGen_InnerMessage) {
	m.Url = src.Url
	m.Id = src.Id
}

func (m *NestedMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *IncludeMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.NestedMsg != nil {
		l = m.NestedMsg.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *IncludeFields) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *TestGen) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovSample(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Db != 0 {
		n += 9
	}
	if m.Fl != 0 {
		n += 5
	}
	if m.I32 != 0 {
		n += 1 + sovSample(uint64(m.I32))
	}
	if m.I64 != 0 {
		n += 1 + sovSample(uint64(m.I64))
	}
	if m.U32 != 0 {
		n += 1 + sovSample(uint64(m.U32))
	}
	if m.U64 != 0 {
		n += 1 + sovSample(uint64(m.U64))
	}
	if m.S32 != 0 {
		n += 1 + sozSample(uint64(m.S32))
	}
	if m.S64 != 0 {
		n += 1 + sozSample(uint64(m.S64))
	}
	if m.F32 != 0 {
		n += 5
	}
	if m.F64 != 0 {
		n += 9
	}
	if m.Sf32 != 0 {
		n += 5
	}
	if m.Sf64 != 0 {
		n += 9
	}
	if m.Bb {
		n += 2
	}
	if m.OuterEn != 0 {
		n += 2 + sovSample(uint64(m.OuterEn))
	}
	if m.InnerEn != 0 {
		n += 2 + sovSample(uint64(m.InnerEn))
	}
	if m.InnerMsg != nil {
		l = m.InnerMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.InnerMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeMsg != nil {
		l = m.IncludeMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeFields != nil {
		l = m.IncludeFields.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeFieldsNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.LocNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if len(m.RepeatedInt) > 0 {
		l = 0
		for _, e := range m.RepeatedInt {
			l += sovSample(uint64(e))
		}
		n += 2 + sovSample(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 2 + l + sovSample(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for _, e := range m.RepeatedMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for _, e := range m.RepeatedMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFields) > 0 {
		for _, e := range m.RepeatedFields {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for _, e := range m.RepeatedFieldsNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for _, e := range m.RepeatedInnerMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for _, e := range m.RepeatedInnerMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for _, e := range m.RepeatedLoc {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for _, e := range m.RepeatedLocNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	return n
}

func (m *TestGen_InnerMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	return n
}

func sovSample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NestedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NestedMsg == nil {
				m.NestedMsg = &NestedMessage{}
			}
			if err := m.NestedMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Db = float64(math.Float64frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fl = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			m.U32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			m.U64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.S32 = v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.S64 = int64(v)
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
			}
			m.F32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.F32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			m.F64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.F64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf32", wireType)
			}
			m.Sf32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf64", wireType)
			}
			m.Sf64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bb = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterEn", wireType)
			}
			m.OuterEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterEn |= (OuterEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerEn", wireType)
			}
			m.InnerEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerEn |= (TestGen_InnerEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerMsg == nil {
				m.InnerMsg = &TestGen_InnerMessage{}
			}
			if err := m.InnerMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InnerMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeMsg == nil {
				m.IncludeMsg = &IncludeMessage{}
			}
			if err := m.IncludeMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeFields == nil {
				m.IncludeFields = &IncludeFields{}
			}
			if err := m.IncludeFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeFieldsNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &edgeproto.Loc{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedInt = append(m.RepeatedInt, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSample
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedInt = append(m.RepeatedInt, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInt", wireType)
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsg = append(m.RepeatedMsg, &IncludeMessage{})
			if err := m.RepeatedMsg[len(m.RepeatedMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull, IncludeMessage{})
			if err := m.RepeatedMsgNonnull[len(m.RepeatedMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFields = append(m.RepeatedFields, &IncludeFields{})
			if err := m.RepeatedFields[len(m.RepeatedFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull, IncludeFields{})
			if err := m.RepeatedFieldsNonnull[len(m.RepeatedFieldsNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsg = append(m.RepeatedInnerMsg, &TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsg[len(m.RepeatedInnerMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull, TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsgNonnull[len(m.RepeatedInnerMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLoc = append(m.RepeatedLoc, &edgeproto.Loc{})
			if err := m.RepeatedLoc[len(m.RepeatedLoc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLocNonnull = append(m.RepeatedLocNonnull, edgeproto.Loc{})
			if err := m.RepeatedLocNonnull[len(m.RepeatedLocNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen_InnerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sample.proto", fileDescriptorSample) }

var fileDescriptorSample = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x0e, 0xa5, 0xc4, 0x8e, 0x8f, 0x7f, 0xa2, 0xb0, 0x69, 0xc2, 0x79, 0xab, 0xcb, 0xba, 0xbb,
	0x20, 0x06, 0xc4, 0x69, 0x6d, 0xc7, 0x18, 0x12, 0x0c, 0xc3, 0x0a, 0xb4, 0x43, 0xb0, 0xfc, 0x00,
	0x44, 0x76, 0x9d, 0x45, 0x12, 0xad, 0x09, 0x93, 0x25, 0x2f, 0x92, 0x80, 0xbd, 0xc3, 0x5e, 0x2c,
	0x97, 0x7b, 0x82, 0x61, 0xcb, 0x93, 0x0c, 0xa4, 0x28, 0x56, 0x72, 0x33, 0x37, 0x37, 0xc6, 0xc7,
	0xe3, 0xf3, 0x7d, 0xfc, 0xc8, 0x73, 0x0e, 0x05, 0x9d, 0xf4, 0x76, 0xb1, 0x8c, 0xc4, 0x68, 0x79,
	0x97, 0x64, 0x09, 0x6e, 0x66, 0x22, 0xcd, 0x02, 0x11, 0xf7, 0x0f, 0x83, 0x30, 0xfb, 0x35, 0x77,
	0x47, 0x5e, 0xb2, 0x38, 0x0a, 0x92, 0x20, 0x39, 0x52, 0xff, 0xbb, 0xf9, 0x5c, 0xad, 0xd4, 0x42,
	0xa1, 0x82, 0xd7, 0x9f, 0x56, 0xd2, 0x17, 0x89, 0x1b, 0x46, 0xc2, 0x0f, 0xc4, 0x1f, 0x47, 0xf2,
	0xf7, 0xd0, 0x8b, 0x92, 0xdc, 0x57, 0xb0, 0xa0, 0x45, 0x89, 0x57, 0xb0, 0x86, 0xaf, 0xa1, 0x7b,
	0x29, 0xd2, 0x4c, 0xf8, 0x17, 0x22, 0x4d, 0x6f, 0x03, 0x81, 0x31, 0x6c, 0xc6, 0xb7, 0x0b, 0x41,
	0x10, 0x45, 0xac, 0xc5, 0x15, 0x1e, 0xfe, 0x06, 0xbd, 0xb3, 0xd8, 0x8b, 0x72, 0x5f, 0xac, 0xc9,
	0xc2, 0x3d, 0xb0, 0x42, 0x9f, 0x58, 0x14, 0xb1, 0x4d, 0x6e, 0x85, 0x3e, 0x3e, 0x06, 0x88, 0x95,
	0xf4, 0xcd, 0x22, 0x0d, 0x88, 0x4d, 0x11, 0x6b, 0x8f, 0xf7, 0x47, 0xfa, 0x74, 0xa3, 0xda, 0xae,
	0xbc, 0x55, 0x64, 0x5e, 0xa4, 0xc1, 0xf0, 0x14, 0xba, 0x7a, 0xb3, 0x0f, 0xa1, 0x88, 0xfc, 0x14,
	0xef, 0x43, 0x63, 0xae, 0x90, 0xda, 0xad, 0xc3, 0xf5, 0xca, 0x78, 0xb0, 0x2a, 0x4e, 0xff, 0xec,
	0x42, 0xf3, 0x5a, 0xa4, 0xd9, 0x8f, 0x22, 0xae, 0xf1, 0x6c, 0xd6, 0x5a, 0xc7, 0x93, 0xde, 0x7d,
	0x57, 0x79, 0x44, 0xdc, 0xf2, 0x5d, 0xb9, 0x9e, 0x47, 0x64, 0x93, 0x22, 0x66, 0x71, 0x6b, 0x1e,
	0x61, 0x07, 0xec, 0x70, 0x32, 0x26, 0x5b, 0x14, 0xb1, 0x2d, 0x2e, 0xa1, 0x8a, 0xcc, 0xa6, 0xa4,
	0x41, 0x11, 0xb3, 0xb9, 0x84, 0x32, 0x92, 0x4f, 0xc6, 0xa4, 0x49, 0x11, 0xeb, 0x72, 0x09, 0x55,
	0x64, 0x36, 0x25, 0xdb, 0xea, 0x4a, 0x24, 0x94, 0x91, 0x74, 0x32, 0x26, 0x2d, 0x8a, 0xd8, 0x2e,
	0x97, 0x50, 0x45, 0x66, 0x53, 0x02, 0x14, 0x31, 0xcc, 0x25, 0x94, 0x91, 0xf9, 0x64, 0x4c, 0xda,
	0x14, 0xb1, 0x26, 0x97, 0x50, 0x45, 0x66, 0x53, 0xd2, 0xa1, 0x88, 0x35, 0xb8, 0x84, 0xf2, 0x0c,
	0xa9, 0x4c, 0xea, 0x52, 0xc4, 0x76, 0xb8, 0xc2, 0x45, 0x6c, 0x36, 0x25, 0x3d, 0x8a, 0x98, 0xc3,
	0x15, 0x96, 0xe7, 0x70, 0x5d, 0xb2, 0x43, 0x11, 0xdb, 0xe6, 0x96, 0xeb, 0xe2, 0x43, 0xd8, 0x4e,
	0xf2, 0x4c, 0xdc, 0xdd, 0x88, 0x98, 0x38, 0x14, 0xb1, 0xde, 0x18, 0x9b, 0x8a, 0x5c, 0xc9, 0x3f,
	0xde, 0xc7, 0xf9, 0x82, 0x37, 0x93, 0x02, 0xe2, 0x63, 0xd8, 0x0e, 0xe3, 0xb8, 0x48, 0xdf, 0x55,
	0xe9, 0x7d, 0x93, 0xae, 0xaf, 0x79, 0x74, 0x26, 0x13, 0x0a, 0x5a, 0x58, 0x40, 0x7c, 0x02, 0xad,
	0x82, 0x26, 0x0b, 0x8f, 0x55, 0xe1, 0x5f, 0x3c, 0xce, 0x2b, 0xeb, 0x5f, 0x6c, 0x73, 0x91, 0x06,
	0xf8, 0x0a, 0x76, 0x0d, 0xf7, 0x26, 0x4e, 0xe2, 0x38, 0x8f, 0x22, 0xf2, 0xec, 0x09, 0x1a, 0xef,
	0x36, 0xef, 0xff, 0x7e, 0xb9, 0xc1, 0x77, 0x4a, 0xa5, 0xcb, 0x82, 0x8b, 0xbf, 0x85, 0x76, 0x58,
	0xf4, 0x93, 0xb2, 0xb3, 0xa7, 0xa4, 0x0e, 0x8c, 0x54, 0xbd, 0xb1, 0x39, 0xe8, 0x5c, 0x69, 0xe5,
	0x02, 0x9e, 0x55, 0x98, 0xc6, 0xcc, 0xf3, 0xb5, 0x0a, 0xda, 0xc6, 0xee, 0x47, 0x9d, 0xd2, 0xc8,
	0x77, 0xd0, 0x2b, 0xe5, 0x74, 0x5f, 0xee, 0xaf, 0xcc, 0x44, 0xad, 0xef, 0x79, 0x37, 0xac, 0x8d,
	0x01, 0x87, 0xfd, 0x3a, 0xdd, 0x18, 0x3a, 0x58, 0x27, 0xa3, 0xfd, 0xec, 0xd5, 0xc4, 0x4a, 0x4b,
	0x14, 0xec, 0x28, 0xf1, 0x08, 0x51, 0x02, 0xbd, 0x91, 0x79, 0x20, 0x46, 0xe7, 0x89, 0xc7, 0xe5,
	0x5f, 0xf8, 0x18, 0xda, 0x51, 0xe2, 0x99, 0xad, 0xbe, 0x78, 0x2c, 0x53, 0x6f, 0x01, 0x51, 0xe2,
	0x95, 0xc2, 0xaf, 0xa0, 0x73, 0x27, 0x96, 0xe2, 0x56, 0x4e, 0x7f, 0x18, 0x67, 0xa4, 0x4f, 0x6d,
	0x66, 0xf3, 0x76, 0x19, 0x3b, 0x8b, 0x33, 0xf5, 0x5c, 0x2c, 0xc9, 0x97, 0x6a, 0xa4, 0xad, 0x70,
	0x89, 0xf7, 0x60, 0x4b, 0x8e, 0x62, 0x4a, 0xbe, 0x52, 0xd3, 0x5a, 0x2c, 0xf0, 0x49, 0x45, 0x48,
	0x96, 0xef, 0x05, 0xb5, 0xd7, 0x95, 0xcf, 0xec, 0x50, 0xb4, 0xd2, 0x5e, 0x95, 0x6b, 0x0e, 0x31,
	0x58, 0xab, 0xa1, 0x4f, 0x83, 0x2b, 0x4a, 0xe5, 0xa9, 0xbe, 0x87, 0x1d, 0x23, 0xa8, 0x4b, 0xf8,
	0x52, 0x69, 0xfd, 0x5f, 0x09, 0x7b, 0x65, 0xba, 0xae, 0xe1, 0x35, 0x1c, 0xac, 0x08, 0x18, 0x53,
	0x74, 0x9d, 0x90, 0xf6, 0xf4, 0xbc, 0x2e, 0x57, 0xda, 0xfa, 0x09, 0x70, 0xe5, 0xb2, 0xcb, 0xb9,
	0x7b, 0xa5, 0x04, 0x3f, 0x33, 0x77, 0xce, 0xc7, 0x8a, 0xe8, 0xf9, 0xfb, 0x05, 0xfa, 0x9f, 0x8a,
	0x19, 0x97, 0xc3, 0x27, 0x88, 0x6a, 0xb3, 0x07, 0xab, 0xd2, 0xa5, 0xdd, 0xb7, 0x95, 0x92, 0xca,
	0xee, 0x7b, 0xad, 0x34, 0x57, 0xbb, 0xcf, 0x54, 0xf2, 0x3c, 0xf1, 0xf0, 0x87, 0x4a, 0x25, 0xab,
	0xed, 0xf8, 0xf5, 0x63, 0xd4, 0xd5, 0x02, 0x9e, 0x9b, 0xb6, 0xec, 0xbf, 0x81, 0x4e, 0xd5, 0xa9,
	0x7a, 0xa0, 0xef, 0x22, 0xfd, 0x15, 0x93, 0xb0, 0xf2, 0x11, 0xb3, 0xe5, 0x47, 0x6c, 0x78, 0x0a,
	0x2d, 0xf3, 0xc0, 0x61, 0x80, 0xc6, 0xd9, 0xe5, 0xe5, 0x7b, 0xfe, 0xc6, 0xd9, 0x30, 0xf8, 0xad,
	0x83, 0x0c, 0x1e, 0x3b, 0x96, 0xc1, 0x13, 0xc7, 0xfe, 0xe6, 0x14, 0x5a, 0xe6, 0x51, 0x95, 0x7f,
	0x5c, 0xfd, 0x7c, 0x6d, 0xc8, 0x0a, 0x6b, 0xb2, 0xc2, 0x9a, 0xac, 0xf0, 0xc4, 0xb1, 0xc7, 0x27,
	0xc5, 0x97, 0xec, 0x87, 0x65, 0x88, 0x8f, 0xa0, 0xc9, 0xc5, 0xef, 0xb9, 0x48, 0x33, 0xec, 0xac,
	0x5e, 0x7d, 0xff, 0x93, 0xc8, 0x70, 0xe3, 0x9d, 0x73, 0xff, 0xef, 0x60, 0xe3, 0xfe, 0x61, 0x80,
	0xfe, 0x7a, 0x18, 0xa0, 0x7f, 0x1e, 0x06, 0xc8, 0x6d, 0xa8, 0xeb, 0x99, 0xfc, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x38, 0x76, 0xd7, 0x80, 0x6c, 0x08, 0x00, 0x00,
}
