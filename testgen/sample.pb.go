// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample.proto

/*
	Package testgen is a generated protocol buffer package.

	It is generated from these files:
		sample.proto

	It has these top-level messages:
		NestedMessage
		IncludeMessage
		IncludeFields
		TestGen
*/
package testgen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/mobiledgex/edge-cloud/protogen"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import "github.com/mobiledgex/edge-cloud/util"
import strings "strings"
import "errors"
import "strconv"
import "encoding/json"
import reflect "reflect"
import "github.com/google/go-cmp/cmp"
import "github.com/google/go-cmp/cmp/cmpopts"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OuterEnum int32

const (
	OuterEnum_OUTER0 OuterEnum = 0
	OuterEnum_OUTER1 OuterEnum = 1
	OuterEnum_OUTER2 OuterEnum = 2
	OuterEnum_OUTER3 OuterEnum = 3
)

var OuterEnum_name = map[int32]string{
	0: "OUTER0",
	1: "OUTER1",
	2: "OUTER2",
	3: "OUTER3",
}
var OuterEnum_value = map[string]int32{
	"OUTER0": 0,
	"OUTER1": 1,
	"OUTER2": 2,
	"OUTER3": 3,
}

func (x OuterEnum) String() string {
	return proto.EnumName(OuterEnum_name, int32(x))
}
func (OuterEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorSample, []int{0} }

type TestGen_InnerEnum int32

const (
	TestGen_INNER0 TestGen_InnerEnum = 0
	TestGen_INNER1 TestGen_InnerEnum = 1
	TestGen_INNER2 TestGen_InnerEnum = 2
	TestGen_INNER3 TestGen_InnerEnum = 3
)

var TestGen_InnerEnum_name = map[int32]string{
	0: "INNER0",
	1: "INNER1",
	2: "INNER2",
	3: "INNER3",
}
var TestGen_InnerEnum_value = map[string]int32{
	"INNER0": 0,
	"INNER1": 1,
	"INNER2": 2,
	"INNER3": 3,
}

func (x TestGen_InnerEnum) String() string {
	return proto.EnumName(TestGen_InnerEnum_name, int32(x))
}
func (TestGen_InnerEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptorSample, []int{3, 0} }

type NestedMessage struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NestedMessage) Reset()                    { *m = NestedMessage{} }
func (m *NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*NestedMessage) ProtoMessage()               {}
func (*NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{0} }

type IncludeMessage struct {
	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NestedMsg *NestedMessage `protobuf:"bytes,3,opt,name=nested_msg,json=nestedMsg" json:"nested_msg,omitempty"`
}

func (m *IncludeMessage) Reset()                    { *m = IncludeMessage{} }
func (m *IncludeMessage) String() string            { return proto.CompactTextString(m) }
func (*IncludeMessage) ProtoMessage()               {}
func (*IncludeMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{1} }

type IncludeFields struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *IncludeFields) Reset()                    { *m = IncludeFields{} }
func (m *IncludeFields) String() string            { return proto.CompactTextString(m) }
func (*IncludeFields) ProtoMessage()               {}
func (*IncludeFields) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{2} }

type TestGen struct {
	Fields                  []string                        `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Name                    string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Db                      float64                         `protobuf:"fixed64,3,opt,name=db,proto3" json:"db,omitempty"`
	Fl                      float32                         `protobuf:"fixed32,4,opt,name=fl,proto3" json:"fl,omitempty"`
	I32                     int32                           `protobuf:"varint,5,opt,name=i32,proto3" json:"i32,omitempty"`
	I64                     int64                           `protobuf:"varint,6,opt,name=i64,proto3" json:"i64,omitempty"`
	U32                     uint32                          `protobuf:"varint,7,opt,name=u32,proto3" json:"u32,omitempty"`
	U64                     uint64                          `protobuf:"varint,8,opt,name=u64,proto3" json:"u64,omitempty"`
	S32                     int32                           `protobuf:"zigzag32,9,opt,name=s32,proto3" json:"s32,omitempty"`
	S64                     int64                           `protobuf:"zigzag64,10,opt,name=s64,proto3" json:"s64,omitempty"`
	F32                     uint32                          `protobuf:"fixed32,11,opt,name=f32,proto3" json:"f32,omitempty"`
	F64                     uint64                          `protobuf:"fixed64,12,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32                    int32                           `protobuf:"fixed32,13,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64                    int64                           `protobuf:"fixed64,14,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bb                      bool                            `protobuf:"varint,15,opt,name=bb,proto3" json:"bb,omitempty"`
	OuterEn                 OuterEnum                       `protobuf:"varint,16,opt,name=outer_en,json=outerEn,proto3,enum=testgen.OuterEnum" json:"outer_en,omitempty"`
	InnerEn                 TestGen_InnerEnum               `protobuf:"varint,17,opt,name=inner_en,json=innerEn,proto3,enum=testgen.TestGen_InnerEnum" json:"inner_en,omitempty"`
	InnerMsg                *TestGen_InnerMessage           `protobuf:"bytes,18,opt,name=inner_msg,json=innerMsg" json:"inner_msg,omitempty"`
	InnerMsgNonnull         TestGen_InnerMessage            `protobuf:"bytes,19,opt,name=inner_msg_nonnull,json=innerMsgNonnull" json:"inner_msg_nonnull"`
	IncludeMsg              *IncludeMessage                 `protobuf:"bytes,20,opt,name=include_msg,json=includeMsg" json:"include_msg,omitempty"`
	IncludeMsgNonnull       IncludeMessage                  `protobuf:"bytes,21,opt,name=include_msg_nonnull,json=includeMsgNonnull" json:"include_msg_nonnull"`
	IncludeFields           *IncludeFields                  `protobuf:"bytes,22,opt,name=include_fields,json=includeFields" json:"include_fields,omitempty"`
	IncludeFieldsNonnull    IncludeFields                   `protobuf:"bytes,23,opt,name=include_fields_nonnull,json=includeFieldsNonnull" json:"include_fields_nonnull"`
	Loc                     *distributed_match_engine.Loc   `protobuf:"bytes,24,opt,name=loc" json:"loc,omitempty"`
	LocNonnull              distributed_match_engine.Loc    `protobuf:"bytes,25,opt,name=loc_nonnull,json=locNonnull" json:"loc_nonnull"`
	RepeatedInt             []int64                         `protobuf:"varint,26,rep,packed,name=repeated_int,json=repeatedInt" json:"repeated_int,omitempty"`
	Ip                      []byte                          `protobuf:"bytes,27,opt,name=ip,proto3" json:"ip,omitempty"`
	Names                   []string                        `protobuf:"bytes,28,rep,name=names" json:"names,omitempty"`
	RepeatedMsg             []*IncludeMessage               `protobuf:"bytes,29,rep,name=repeated_msg,json=repeatedMsg" json:"repeated_msg,omitempty"`
	RepeatedMsgNonnull      []IncludeMessage                `protobuf:"bytes,30,rep,name=repeated_msg_nonnull,json=repeatedMsgNonnull" json:"repeated_msg_nonnull"`
	RepeatedFields          []*IncludeFields                `protobuf:"bytes,31,rep,name=repeated_fields,json=repeatedFields" json:"repeated_fields,omitempty"`
	RepeatedFieldsNonnull   []IncludeFields                 `protobuf:"bytes,32,rep,name=repeated_fields_nonnull,json=repeatedFieldsNonnull" json:"repeated_fields_nonnull"`
	RepeatedInnerMsg        []*TestGen_InnerMessage         `protobuf:"bytes,33,rep,name=repeated_inner_msg,json=repeatedInnerMsg" json:"repeated_inner_msg,omitempty"`
	RepeatedInnerMsgNonnull []TestGen_InnerMessage          `protobuf:"bytes,34,rep,name=repeated_inner_msg_nonnull,json=repeatedInnerMsgNonnull" json:"repeated_inner_msg_nonnull"`
	RepeatedLoc             []*distributed_match_engine.Loc `protobuf:"bytes,35,rep,name=repeated_loc,json=repeatedLoc" json:"repeated_loc,omitempty"`
	RepeatedLocNonnull      []distributed_match_engine.Loc  `protobuf:"bytes,36,rep,name=repeated_loc_nonnull,json=repeatedLocNonnull" json:"repeated_loc_nonnull"`
	IntMap                  map[int32]int32                 `protobuf:"bytes,37,rep,name=intMap" json:"intMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MsgMap                  map[int32]*NestedMessage        `protobuf:"bytes,38,rep,name=msgMap" json:"msgMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// xxx win import of strings. xxx
	Unused string `protobuf:"bytes,39,opt,name=unused,proto3" json:"unused,omitempty"`
}

func (m *TestGen) Reset()                    { *m = TestGen{} }
func (m *TestGen) String() string            { return proto.CompactTextString(m) }
func (*TestGen) ProtoMessage()               {}
func (*TestGen) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{3} }

type TestGen_InnerMessage struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id  int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TestGen_InnerMessage) Reset()                    { *m = TestGen_InnerMessage{} }
func (m *TestGen_InnerMessage) String() string            { return proto.CompactTextString(m) }
func (*TestGen_InnerMessage) ProtoMessage()               {}
func (*TestGen_InnerMessage) Descriptor() ([]byte, []int) { return fileDescriptorSample, []int{3, 0} }

func init() {
	proto.RegisterType((*NestedMessage)(nil), "testgen.NestedMessage")
	proto.RegisterType((*IncludeMessage)(nil), "testgen.IncludeMessage")
	proto.RegisterType((*IncludeFields)(nil), "testgen.IncludeFields")
	proto.RegisterType((*TestGen)(nil), "testgen.TestGen")
	proto.RegisterType((*TestGen_InnerMessage)(nil), "testgen.TestGen.InnerMessage")
	proto.RegisterEnum("testgen.OuterEnum", OuterEnum_name, OuterEnum_value)
	proto.RegisterEnum("testgen.TestGen_InnerEnum", TestGen_InnerEnum_name, TestGen_InnerEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestApi service

type TestApiClient interface {
	Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error)
}

type testApiClient struct {
	cc *grpc.ClientConn
}

func NewTestApiClient(cc *grpc.ClientConn) TestApiClient {
	return &testApiClient{cc}
}

func (c *testApiClient) Request(ctx context.Context, in *TestGen, opts ...grpc.CallOption) (*TestGen, error) {
	out := new(TestGen)
	err := grpc.Invoke(ctx, "/testgen.TestApi/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestApi service

type TestApiServer interface {
	Request(context.Context, *TestGen) (*TestGen, error)
}

func RegisterTestApiServer(s *grpc.Server, srv TestApiServer) {
	s.RegisterService(&_TestApi_serviceDesc, srv)
}

func _TestApi_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestGen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgen.TestApi/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiServer).Request(ctx, req.(*TestGen))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testgen.TestApi",
	HandlerType: (*TestApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _TestApi_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

func (m *NestedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NestedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *IncludeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	if m.NestedMsg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.NestedMsg.Size()))
		n1, err := m.NestedMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IncludeFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncludeFields) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TestGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Db != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Db))))
		i += 8
	}
	if m.Fl != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fl))))
		i += 4
	}
	if m.I32 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.I32))
	}
	if m.I64 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.I64))
	}
	if m.U32 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.U32))
	}
	if m.U64 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.U64))
	}
	if m.S32 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSample(dAtA, i, uint64((uint32(m.S32)<<1)^uint32((m.S32>>31))))
	}
	if m.S64 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSample(dAtA, i, uint64((uint64(m.S64)<<1)^uint64((m.S64>>63))))
	}
	if m.F32 != 0 {
		dAtA[i] = 0x5d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.F32))
		i += 4
	}
	if m.F64 != 0 {
		dAtA[i] = 0x61
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.F64))
		i += 8
	}
	if m.Sf32 != 0 {
		dAtA[i] = 0x6d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sf32))
		i += 4
	}
	if m.Sf64 != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sf64))
		i += 8
	}
	if m.Bb {
		dAtA[i] = 0x78
		i++
		if m.Bb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OuterEn != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.OuterEn))
	}
	if m.InnerEn != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.InnerEn))
	}
	if m.InnerMsg != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.InnerMsg.Size()))
		n2, err := m.InnerMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.InnerMsgNonnull.Size()))
	n3, err := m.InnerMsgNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.IncludeMsg != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.IncludeMsg.Size()))
		n4, err := m.IncludeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.IncludeMsgNonnull.Size()))
	n5, err := m.IncludeMsgNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.IncludeFields != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.IncludeFields.Size()))
		n6, err := m.IncludeFields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.IncludeFieldsNonnull.Size()))
	n7, err := m.IncludeFieldsNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Loc != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Loc.Size()))
		n8, err := m.Loc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintSample(dAtA, i, uint64(m.LocNonnull.Size()))
	n9, err := m.LocNonnull.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.RepeatedInt) > 0 {
		dAtA11 := make([]byte, len(m.RepeatedInt)*10)
		var j10 int
		for _, num1 := range m.RepeatedInt {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xe2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for _, msg := range m.RepeatedMsg {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for _, msg := range m.RepeatedMsgNonnull {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedFields) > 0 {
		for _, msg := range m.RepeatedFields {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for _, msg := range m.RepeatedFieldsNonnull {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for _, msg := range m.RepeatedInnerMsg {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for _, msg := range m.RepeatedInnerMsgNonnull {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for _, msg := range m.RepeatedLoc {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for _, msg := range m.RepeatedLocNonnull {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintSample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IntMap) > 0 {
		for k, _ := range m.IntMap {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x2
			i++
			v := m.IntMap[k]
			mapSize := 1 + sovSample(uint64(k)) + 1 + sovSample(uint64(v))
			i = encodeVarintSample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSample(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintSample(dAtA, i, uint64(v))
		}
	}
	if len(m.MsgMap) > 0 {
		for k, _ := range m.MsgMap {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x2
			i++
			v := m.MsgMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSample(uint64(msgSize))
			}
			mapSize := 1 + sovSample(uint64(k)) + msgSize
			i = encodeVarintSample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSample(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSample(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	if len(m.Unused) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Unused)))
		i += copy(dAtA[i:], m.Unused)
	}
	return i, nil
}

func (m *TestGen_InnerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestGen_InnerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NestedMessage) CopyInFields(src *NestedMessage) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *NestedMessage) ValidateEnums() error {
	return nil
}

func (m *IncludeMessage) CopyInFields(src *IncludeMessage) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	if m.Id != src.Id {
		m.Id = src.Id
		changed++
	}
	if src.NestedMsg != nil {
		m.NestedMsg = &NestedMessage{}
		if m.NestedMsg.Name != src.NestedMsg.Name {
			m.NestedMsg.Name = src.NestedMsg.Name
			changed++
		}
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *IncludeMessage) ValidateEnums() error {
	if err := m.NestedMsg.ValidateEnums(); err != nil {
		return err
	}
	return nil
}

func (m *IncludeFields) CopyInFields(src *IncludeFields) int {
	changed := 0
	if m.Name != src.Name {
		m.Name = src.Name
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *IncludeFields) ValidateEnums() error {
	return nil
}

func (m *TestGen) Matches(o *TestGen, fopts ...MatchOpt) bool {
	opts := MatchOptions{}
	applyMatchOptions(&opts, fopts...)
	if o == nil {
		if opts.Filter {
			return true
		}
		return false
	}
	if !opts.Filter || o.Name != "" {
		if o.Name != m.Name {
			return false
		}
	}
	if !opts.Filter || o.Db != 0 {
		if o.Db != m.Db {
			return false
		}
	}
	if !opts.Filter || o.Fl != 0 {
		if o.Fl != m.Fl {
			return false
		}
	}
	if !opts.Filter || o.I32 != 0 {
		if o.I32 != m.I32 {
			return false
		}
	}
	if !opts.Filter || o.I64 != 0 {
		if o.I64 != m.I64 {
			return false
		}
	}
	if !opts.Filter || o.U32 != 0 {
		if o.U32 != m.U32 {
			return false
		}
	}
	if !opts.Filter || o.U64 != 0 {
		if o.U64 != m.U64 {
			return false
		}
	}
	if !opts.Filter || o.S32 != 0 {
		if o.S32 != m.S32 {
			return false
		}
	}
	if !opts.Filter || o.S64 != 0 {
		if o.S64 != m.S64 {
			return false
		}
	}
	if !opts.Filter || o.F32 != 0 {
		if o.F32 != m.F32 {
			return false
		}
	}
	if !opts.Filter || o.F64 != 0 {
		if o.F64 != m.F64 {
			return false
		}
	}
	if !opts.Filter || o.Sf32 != 0 {
		if o.Sf32 != m.Sf32 {
			return false
		}
	}
	if !opts.Filter || o.Sf64 != 0 {
		if o.Sf64 != m.Sf64 {
			return false
		}
	}
	if !opts.Filter || o.Bb != false {
		if o.Bb != m.Bb {
			return false
		}
	}
	if !opts.Filter || o.OuterEn != 0 {
		if o.OuterEn != m.OuterEn {
			return false
		}
	}
	if !opts.Filter || o.InnerEn != 0 {
		if o.InnerEn != m.InnerEn {
			return false
		}
	}
	if !opts.Filter || o.InnerMsg != nil {
		if m.InnerMsg == nil && o.InnerMsg != nil || m.InnerMsg != nil && o.InnerMsg == nil {
			return false
		} else if m.InnerMsg != nil && o.InnerMsg != nil {
		}
	}
	if !opts.Filter || o.IncludeMsg != nil {
		if m.IncludeMsg == nil && o.IncludeMsg != nil || m.IncludeMsg != nil && o.IncludeMsg == nil {
			return false
		} else if m.IncludeMsg != nil && o.IncludeMsg != nil {
		}
	}
	if !opts.Filter || o.IncludeFields != nil {
		if m.IncludeFields == nil && o.IncludeFields != nil || m.IncludeFields != nil && o.IncludeFields == nil {
			return false
		} else if m.IncludeFields != nil && o.IncludeFields != nil {
		}
	}
	if !opts.Filter || o.Loc != nil {
		if m.Loc == nil && o.Loc != nil || m.Loc != nil && o.Loc == nil {
			return false
		} else if m.Loc != nil && o.Loc != nil {
		}
	}
	if !opts.Filter || o.RepeatedInt != nil {
		if m.RepeatedInt == nil && o.RepeatedInt != nil || m.RepeatedInt != nil && o.RepeatedInt == nil {
			return false
		} else if m.RepeatedInt != nil && o.RepeatedInt != nil {
			if len(m.RepeatedInt) != len(o.RepeatedInt) {
				return false
			}
			for i := 0; i < len(m.RepeatedInt); i++ {
				if o.RepeatedInt[i] != m.RepeatedInt[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Ip != nil {
		if m.Ip == nil && o.Ip != nil || m.Ip != nil && o.Ip == nil {
			return false
		} else if m.Ip != nil && o.Ip != nil {
			if len(m.Ip) != len(o.Ip) {
				return false
			}
			for i := 0; i < len(m.Ip); i++ {
				if o.Ip[i] != m.Ip[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.Names != nil {
		if m.Names == nil && o.Names != nil || m.Names != nil && o.Names == nil {
			return false
		} else if m.Names != nil && o.Names != nil {
			if len(m.Names) != len(o.Names) {
				return false
			}
			for i := 0; i < len(m.Names); i++ {
				if o.Names[i] != m.Names[i] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.RepeatedMsg != nil {
		if m.RepeatedMsg == nil && o.RepeatedMsg != nil || m.RepeatedMsg != nil && o.RepeatedMsg == nil {
			return false
		} else if m.RepeatedMsg != nil && o.RepeatedMsg != nil {
			if len(m.RepeatedMsg) != len(o.RepeatedMsg) {
				return false
			}
			for i := 0; i < len(m.RepeatedMsg); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedMsgNonnull != nil {
		if m.RepeatedMsgNonnull == nil && o.RepeatedMsgNonnull != nil || m.RepeatedMsgNonnull != nil && o.RepeatedMsgNonnull == nil {
			return false
		} else if m.RepeatedMsgNonnull != nil && o.RepeatedMsgNonnull != nil {
			if len(m.RepeatedMsgNonnull) != len(o.RepeatedMsgNonnull) {
				return false
			}
			for i := 0; i < len(m.RepeatedMsgNonnull); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedFields != nil {
		if m.RepeatedFields == nil && o.RepeatedFields != nil || m.RepeatedFields != nil && o.RepeatedFields == nil {
			return false
		} else if m.RepeatedFields != nil && o.RepeatedFields != nil {
			if len(m.RepeatedFields) != len(o.RepeatedFields) {
				return false
			}
			for i := 0; i < len(m.RepeatedFields); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedFieldsNonnull != nil {
		if m.RepeatedFieldsNonnull == nil && o.RepeatedFieldsNonnull != nil || m.RepeatedFieldsNonnull != nil && o.RepeatedFieldsNonnull == nil {
			return false
		} else if m.RepeatedFieldsNonnull != nil && o.RepeatedFieldsNonnull != nil {
			if len(m.RepeatedFieldsNonnull) != len(o.RepeatedFieldsNonnull) {
				return false
			}
			for i := 0; i < len(m.RepeatedFieldsNonnull); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedInnerMsg != nil {
		if m.RepeatedInnerMsg == nil && o.RepeatedInnerMsg != nil || m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg == nil {
			return false
		} else if m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg != nil {
			if len(m.RepeatedInnerMsg) != len(o.RepeatedInnerMsg) {
				return false
			}
			for i := 0; i < len(m.RepeatedInnerMsg); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedInnerMsgNonnull != nil {
		if m.RepeatedInnerMsgNonnull == nil && o.RepeatedInnerMsgNonnull != nil || m.RepeatedInnerMsgNonnull != nil && o.RepeatedInnerMsgNonnull == nil {
			return false
		} else if m.RepeatedInnerMsgNonnull != nil && o.RepeatedInnerMsgNonnull != nil {
			if len(m.RepeatedInnerMsgNonnull) != len(o.RepeatedInnerMsgNonnull) {
				return false
			}
			for i := 0; i < len(m.RepeatedInnerMsgNonnull); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedLoc != nil {
		if m.RepeatedLoc == nil && o.RepeatedLoc != nil || m.RepeatedLoc != nil && o.RepeatedLoc == nil {
			return false
		} else if m.RepeatedLoc != nil && o.RepeatedLoc != nil {
			if len(m.RepeatedLoc) != len(o.RepeatedLoc) {
				return false
			}
			for i := 0; i < len(m.RepeatedLoc); i++ {
			}
		}
	}
	if !opts.Filter || o.RepeatedLocNonnull != nil {
		if m.RepeatedLocNonnull == nil && o.RepeatedLocNonnull != nil || m.RepeatedLocNonnull != nil && o.RepeatedLocNonnull == nil {
			return false
		} else if m.RepeatedLocNonnull != nil && o.RepeatedLocNonnull != nil {
			if len(m.RepeatedLocNonnull) != len(o.RepeatedLocNonnull) {
				return false
			}
			for i := 0; i < len(m.RepeatedLocNonnull); i++ {
			}
		}
	}
	if !opts.Filter || o.IntMap != nil {
		if m.IntMap == nil && o.IntMap != nil || m.IntMap != nil && o.IntMap == nil {
			return false
		} else if m.IntMap != nil && o.IntMap != nil {
			if len(m.IntMap) != len(o.IntMap) {
				return false
			}
			for k, _ := range m.IntMap {
				_, ok := o.IntMap[k]
				if !ok {
					return false
				}
				if o.IntMap[k] != m.IntMap[k] {
					return false
				}
			}
		}
	}
	if !opts.Filter || o.MsgMap != nil {
		if m.MsgMap == nil && o.MsgMap != nil || m.MsgMap != nil && o.MsgMap == nil {
			return false
		} else if m.MsgMap != nil && o.MsgMap != nil {
			if len(m.MsgMap) != len(o.MsgMap) {
				return false
			}
			for k, _ := range m.MsgMap {
				_, ok := o.MsgMap[k]
				if !ok {
					return false
				}
			}
		}
	}
	if !opts.IgnoreBackend {
		if !opts.Filter || o.Unused != "" {
			if o.Unused != m.Unused {
				return false
			}
		}
	}
	return true
}

const TestGenFieldName = "2"
const TestGenFieldDb = "3"
const TestGenFieldFl = "4"
const TestGenFieldI32 = "5"
const TestGenFieldI64 = "6"
const TestGenFieldU32 = "7"
const TestGenFieldU64 = "8"
const TestGenFieldS32 = "9"
const TestGenFieldS64 = "10"
const TestGenFieldF32 = "11"
const TestGenFieldF64 = "12"
const TestGenFieldSf32 = "13"
const TestGenFieldSf64 = "14"
const TestGenFieldBb = "15"
const TestGenFieldOuterEn = "16"
const TestGenFieldInnerEn = "17"
const TestGenFieldInnerMsg = "18"
const TestGenFieldInnerMsgUrl = "18.1"
const TestGenFieldInnerMsgId = "18.2"
const TestGenFieldInnerMsgNonnull = "19"
const TestGenFieldInnerMsgNonnullUrl = "19.1"
const TestGenFieldInnerMsgNonnullId = "19.2"
const TestGenFieldIncludeMsg = "20"
const TestGenFieldIncludeMsgName = "20.1"
const TestGenFieldIncludeMsgId = "20.2"
const TestGenFieldIncludeMsgNestedMsg = "20.3"
const TestGenFieldIncludeMsgNestedMsgName = "20.3.1"
const TestGenFieldIncludeMsgNonnull = "21"
const TestGenFieldIncludeMsgNonnullName = "21.1"
const TestGenFieldIncludeMsgNonnullId = "21.2"
const TestGenFieldIncludeMsgNonnullNestedMsg = "21.3"
const TestGenFieldIncludeMsgNonnullNestedMsgName = "21.3.1"
const TestGenFieldIncludeFields = "22"
const TestGenFieldIncludeFieldsName = "22.2"
const TestGenFieldIncludeFieldsNonnull = "23"
const TestGenFieldIncludeFieldsNonnullName = "23.2"
const TestGenFieldLoc = "24"
const TestGenFieldLocLatitude = "24.1"
const TestGenFieldLocLongitude = "24.2"
const TestGenFieldLocHorizontalAccuracy = "24.3"
const TestGenFieldLocVerticalAccuracy = "24.4"
const TestGenFieldLocAltitude = "24.5"
const TestGenFieldLocCourse = "24.6"
const TestGenFieldLocSpeed = "24.7"
const TestGenFieldLocTimestamp = "24.8"
const TestGenFieldLocTimestampSeconds = "24.8.1"
const TestGenFieldLocTimestampNanos = "24.8.2"
const TestGenFieldLocNonnull = "25"
const TestGenFieldLocNonnullLatitude = "25.1"
const TestGenFieldLocNonnullLongitude = "25.2"
const TestGenFieldLocNonnullHorizontalAccuracy = "25.3"
const TestGenFieldLocNonnullVerticalAccuracy = "25.4"
const TestGenFieldLocNonnullAltitude = "25.5"
const TestGenFieldLocNonnullCourse = "25.6"
const TestGenFieldLocNonnullSpeed = "25.7"
const TestGenFieldLocNonnullTimestamp = "25.8"
const TestGenFieldLocNonnullTimestampSeconds = "25.8.1"
const TestGenFieldLocNonnullTimestampNanos = "25.8.2"
const TestGenFieldRepeatedInt = "26"
const TestGenFieldIp = "27"
const TestGenFieldNames = "28"
const TestGenFieldRepeatedMsg = "29"
const TestGenFieldRepeatedMsgName = "29.1"
const TestGenFieldRepeatedMsgId = "29.2"
const TestGenFieldRepeatedMsgNestedMsg = "29.3"
const TestGenFieldRepeatedMsgNestedMsgName = "29.3.1"
const TestGenFieldRepeatedMsgNonnull = "30"
const TestGenFieldRepeatedMsgNonnullName = "30.1"
const TestGenFieldRepeatedMsgNonnullId = "30.2"
const TestGenFieldRepeatedMsgNonnullNestedMsg = "30.3"
const TestGenFieldRepeatedMsgNonnullNestedMsgName = "30.3.1"
const TestGenFieldRepeatedFields = "31"
const TestGenFieldRepeatedFieldsName = "31.2"
const TestGenFieldRepeatedFieldsNonnull = "32"
const TestGenFieldRepeatedFieldsNonnullName = "32.2"
const TestGenFieldRepeatedInnerMsg = "33"
const TestGenFieldRepeatedInnerMsgUrl = "33.1"
const TestGenFieldRepeatedInnerMsgId = "33.2"
const TestGenFieldRepeatedInnerMsgNonnull = "34"
const TestGenFieldRepeatedInnerMsgNonnullUrl = "34.1"
const TestGenFieldRepeatedInnerMsgNonnullId = "34.2"
const TestGenFieldRepeatedLoc = "35"
const TestGenFieldRepeatedLocLatitude = "35.1"
const TestGenFieldRepeatedLocLongitude = "35.2"
const TestGenFieldRepeatedLocHorizontalAccuracy = "35.3"
const TestGenFieldRepeatedLocVerticalAccuracy = "35.4"
const TestGenFieldRepeatedLocAltitude = "35.5"
const TestGenFieldRepeatedLocCourse = "35.6"
const TestGenFieldRepeatedLocSpeed = "35.7"
const TestGenFieldRepeatedLocTimestamp = "35.8"
const TestGenFieldRepeatedLocTimestampSeconds = "35.8.1"
const TestGenFieldRepeatedLocTimestampNanos = "35.8.2"
const TestGenFieldRepeatedLocNonnull = "36"
const TestGenFieldRepeatedLocNonnullLatitude = "36.1"
const TestGenFieldRepeatedLocNonnullLongitude = "36.2"
const TestGenFieldRepeatedLocNonnullHorizontalAccuracy = "36.3"
const TestGenFieldRepeatedLocNonnullVerticalAccuracy = "36.4"
const TestGenFieldRepeatedLocNonnullAltitude = "36.5"
const TestGenFieldRepeatedLocNonnullCourse = "36.6"
const TestGenFieldRepeatedLocNonnullSpeed = "36.7"
const TestGenFieldRepeatedLocNonnullTimestamp = "36.8"
const TestGenFieldRepeatedLocNonnullTimestampSeconds = "36.8.1"
const TestGenFieldRepeatedLocNonnullTimestampNanos = "36.8.2"
const TestGenFieldIntMap = "37"
const TestGenFieldIntMapKey = "37.1"
const TestGenFieldIntMapValue = "37.2"
const TestGenFieldMsgMap = "38"
const TestGenFieldMsgMapKey = "38.1"
const TestGenFieldMsgMapValue = "38.2"
const TestGenFieldMsgMapValueName = "38.2.1"
const TestGenFieldUnused = "39"

var TestGenAllFields = []string{
	TestGenFieldName,
	TestGenFieldDb,
	TestGenFieldFl,
	TestGenFieldI32,
	TestGenFieldI64,
	TestGenFieldU32,
	TestGenFieldU64,
	TestGenFieldS32,
	TestGenFieldS64,
	TestGenFieldF32,
	TestGenFieldF64,
	TestGenFieldSf32,
	TestGenFieldSf64,
	TestGenFieldBb,
	TestGenFieldOuterEn,
	TestGenFieldInnerEn,
	TestGenFieldInnerMsgUrl,
	TestGenFieldInnerMsgId,
	TestGenFieldInnerMsgNonnullUrl,
	TestGenFieldInnerMsgNonnullId,
	TestGenFieldIncludeMsgName,
	TestGenFieldIncludeMsgId,
	TestGenFieldIncludeMsgNestedMsgName,
	TestGenFieldIncludeMsgNonnullName,
	TestGenFieldIncludeMsgNonnullId,
	TestGenFieldIncludeMsgNonnullNestedMsgName,
	TestGenFieldIncludeFieldsName,
	TestGenFieldIncludeFieldsNonnullName,
	TestGenFieldLocLatitude,
	TestGenFieldLocLongitude,
	TestGenFieldLocHorizontalAccuracy,
	TestGenFieldLocVerticalAccuracy,
	TestGenFieldLocAltitude,
	TestGenFieldLocCourse,
	TestGenFieldLocSpeed,
	TestGenFieldLocTimestampSeconds,
	TestGenFieldLocTimestampNanos,
	TestGenFieldLocNonnullLatitude,
	TestGenFieldLocNonnullLongitude,
	TestGenFieldLocNonnullHorizontalAccuracy,
	TestGenFieldLocNonnullVerticalAccuracy,
	TestGenFieldLocNonnullAltitude,
	TestGenFieldLocNonnullCourse,
	TestGenFieldLocNonnullSpeed,
	TestGenFieldLocNonnullTimestampSeconds,
	TestGenFieldLocNonnullTimestampNanos,
	TestGenFieldRepeatedInt,
	TestGenFieldIp,
	TestGenFieldNames,
	TestGenFieldRepeatedMsgName,
	TestGenFieldRepeatedMsgId,
	TestGenFieldRepeatedMsgNestedMsgName,
	TestGenFieldRepeatedMsgNonnullName,
	TestGenFieldRepeatedMsgNonnullId,
	TestGenFieldRepeatedMsgNonnullNestedMsgName,
	TestGenFieldRepeatedFieldsName,
	TestGenFieldRepeatedFieldsNonnullName,
	TestGenFieldRepeatedInnerMsgUrl,
	TestGenFieldRepeatedInnerMsgId,
	TestGenFieldRepeatedInnerMsgNonnullUrl,
	TestGenFieldRepeatedInnerMsgNonnullId,
	TestGenFieldRepeatedLocLatitude,
	TestGenFieldRepeatedLocLongitude,
	TestGenFieldRepeatedLocHorizontalAccuracy,
	TestGenFieldRepeatedLocVerticalAccuracy,
	TestGenFieldRepeatedLocAltitude,
	TestGenFieldRepeatedLocCourse,
	TestGenFieldRepeatedLocSpeed,
	TestGenFieldRepeatedLocTimestampSeconds,
	TestGenFieldRepeatedLocTimestampNanos,
	TestGenFieldRepeatedLocNonnullLatitude,
	TestGenFieldRepeatedLocNonnullLongitude,
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy,
	TestGenFieldRepeatedLocNonnullVerticalAccuracy,
	TestGenFieldRepeatedLocNonnullAltitude,
	TestGenFieldRepeatedLocNonnullCourse,
	TestGenFieldRepeatedLocNonnullSpeed,
	TestGenFieldRepeatedLocNonnullTimestampSeconds,
	TestGenFieldRepeatedLocNonnullTimestampNanos,
	TestGenFieldIntMapKey,
	TestGenFieldIntMapValue,
	TestGenFieldMsgMapKey,
	TestGenFieldMsgMapValueName,
	TestGenFieldUnused,
}

var TestGenAllFieldsMap = map[string]struct{}{
	TestGenFieldName:                                 struct{}{},
	TestGenFieldDb:                                   struct{}{},
	TestGenFieldFl:                                   struct{}{},
	TestGenFieldI32:                                  struct{}{},
	TestGenFieldI64:                                  struct{}{},
	TestGenFieldU32:                                  struct{}{},
	TestGenFieldU64:                                  struct{}{},
	TestGenFieldS32:                                  struct{}{},
	TestGenFieldS64:                                  struct{}{},
	TestGenFieldF32:                                  struct{}{},
	TestGenFieldF64:                                  struct{}{},
	TestGenFieldSf32:                                 struct{}{},
	TestGenFieldSf64:                                 struct{}{},
	TestGenFieldBb:                                   struct{}{},
	TestGenFieldOuterEn:                              struct{}{},
	TestGenFieldInnerEn:                              struct{}{},
	TestGenFieldInnerMsgUrl:                          struct{}{},
	TestGenFieldInnerMsgId:                           struct{}{},
	TestGenFieldInnerMsgNonnullUrl:                   struct{}{},
	TestGenFieldInnerMsgNonnullId:                    struct{}{},
	TestGenFieldIncludeMsgName:                       struct{}{},
	TestGenFieldIncludeMsgId:                         struct{}{},
	TestGenFieldIncludeMsgNestedMsgName:              struct{}{},
	TestGenFieldIncludeMsgNonnullName:                struct{}{},
	TestGenFieldIncludeMsgNonnullId:                  struct{}{},
	TestGenFieldIncludeMsgNonnullNestedMsgName:       struct{}{},
	TestGenFieldIncludeFieldsName:                    struct{}{},
	TestGenFieldIncludeFieldsNonnullName:             struct{}{},
	TestGenFieldLocLatitude:                          struct{}{},
	TestGenFieldLocLongitude:                         struct{}{},
	TestGenFieldLocHorizontalAccuracy:                struct{}{},
	TestGenFieldLocVerticalAccuracy:                  struct{}{},
	TestGenFieldLocAltitude:                          struct{}{},
	TestGenFieldLocCourse:                            struct{}{},
	TestGenFieldLocSpeed:                             struct{}{},
	TestGenFieldLocTimestampSeconds:                  struct{}{},
	TestGenFieldLocTimestampNanos:                    struct{}{},
	TestGenFieldLocNonnullLatitude:                   struct{}{},
	TestGenFieldLocNonnullLongitude:                  struct{}{},
	TestGenFieldLocNonnullHorizontalAccuracy:         struct{}{},
	TestGenFieldLocNonnullVerticalAccuracy:           struct{}{},
	TestGenFieldLocNonnullAltitude:                   struct{}{},
	TestGenFieldLocNonnullCourse:                     struct{}{},
	TestGenFieldLocNonnullSpeed:                      struct{}{},
	TestGenFieldLocNonnullTimestampSeconds:           struct{}{},
	TestGenFieldLocNonnullTimestampNanos:             struct{}{},
	TestGenFieldRepeatedInt:                          struct{}{},
	TestGenFieldIp:                                   struct{}{},
	TestGenFieldNames:                                struct{}{},
	TestGenFieldRepeatedMsgName:                      struct{}{},
	TestGenFieldRepeatedMsgId:                        struct{}{},
	TestGenFieldRepeatedMsgNestedMsgName:             struct{}{},
	TestGenFieldRepeatedMsgNonnullName:               struct{}{},
	TestGenFieldRepeatedMsgNonnullId:                 struct{}{},
	TestGenFieldRepeatedMsgNonnullNestedMsgName:      struct{}{},
	TestGenFieldRepeatedFieldsName:                   struct{}{},
	TestGenFieldRepeatedFieldsNonnullName:            struct{}{},
	TestGenFieldRepeatedInnerMsgUrl:                  struct{}{},
	TestGenFieldRepeatedInnerMsgId:                   struct{}{},
	TestGenFieldRepeatedInnerMsgNonnullUrl:           struct{}{},
	TestGenFieldRepeatedInnerMsgNonnullId:            struct{}{},
	TestGenFieldRepeatedLocLatitude:                  struct{}{},
	TestGenFieldRepeatedLocLongitude:                 struct{}{},
	TestGenFieldRepeatedLocHorizontalAccuracy:        struct{}{},
	TestGenFieldRepeatedLocVerticalAccuracy:          struct{}{},
	TestGenFieldRepeatedLocAltitude:                  struct{}{},
	TestGenFieldRepeatedLocCourse:                    struct{}{},
	TestGenFieldRepeatedLocSpeed:                     struct{}{},
	TestGenFieldRepeatedLocTimestampSeconds:          struct{}{},
	TestGenFieldRepeatedLocTimestampNanos:            struct{}{},
	TestGenFieldRepeatedLocNonnullLatitude:           struct{}{},
	TestGenFieldRepeatedLocNonnullLongitude:          struct{}{},
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy: struct{}{},
	TestGenFieldRepeatedLocNonnullVerticalAccuracy:   struct{}{},
	TestGenFieldRepeatedLocNonnullAltitude:           struct{}{},
	TestGenFieldRepeatedLocNonnullCourse:             struct{}{},
	TestGenFieldRepeatedLocNonnullSpeed:              struct{}{},
	TestGenFieldRepeatedLocNonnullTimestampSeconds:   struct{}{},
	TestGenFieldRepeatedLocNonnullTimestampNanos:     struct{}{},
	TestGenFieldIntMapKey:                            struct{}{},
	TestGenFieldIntMapValue:                          struct{}{},
	TestGenFieldMsgMapKey:                            struct{}{},
	TestGenFieldMsgMapValueName:                      struct{}{},
	TestGenFieldUnused:                               struct{}{},
}

var TestGenAllFieldsStringMap = map[string]string{
	TestGenFieldName:                                 "Test Gen Field Name",
	TestGenFieldDb:                                   "Test Gen Field Db",
	TestGenFieldFl:                                   "Test Gen Field Fl",
	TestGenFieldI32:                                  "Test Gen Field I32",
	TestGenFieldI64:                                  "Test Gen Field I64",
	TestGenFieldU32:                                  "Test Gen Field U32",
	TestGenFieldU64:                                  "Test Gen Field U64",
	TestGenFieldS32:                                  "Test Gen Field S32",
	TestGenFieldS64:                                  "Test Gen Field S64",
	TestGenFieldF32:                                  "Test Gen Field F32",
	TestGenFieldF64:                                  "Test Gen Field F64",
	TestGenFieldSf32:                                 "Test Gen Field Sf32",
	TestGenFieldSf64:                                 "Test Gen Field Sf64",
	TestGenFieldBb:                                   "Test Gen Field Bb",
	TestGenFieldOuterEn:                              "Test Gen Field Outer En",
	TestGenFieldInnerEn:                              "Test Gen Field Inner En",
	TestGenFieldInnerMsgUrl:                          "Test Gen Field Inner Msg Url",
	TestGenFieldInnerMsgId:                           "Test Gen Field Inner Msg Id",
	TestGenFieldInnerMsgNonnullUrl:                   "Test Gen Field Inner Msg Nonnull Url",
	TestGenFieldInnerMsgNonnullId:                    "Test Gen Field Inner Msg Nonnull Id",
	TestGenFieldIncludeMsgName:                       "Test Gen Field Include Msg Name",
	TestGenFieldIncludeMsgId:                         "Test Gen Field Include Msg Id",
	TestGenFieldIncludeMsgNestedMsgName:              "Test Gen Field Include Msg Nested Msg Name",
	TestGenFieldIncludeMsgNonnullName:                "Test Gen Field Include Msg Nonnull Name",
	TestGenFieldIncludeMsgNonnullId:                  "Test Gen Field Include Msg Nonnull Id",
	TestGenFieldIncludeMsgNonnullNestedMsgName:       "Test Gen Field Include Msg Nonnull Nested Msg Name",
	TestGenFieldIncludeFieldsName:                    "Test Gen Field Include Fields Name",
	TestGenFieldIncludeFieldsNonnullName:             "Test Gen Field Include Fields Nonnull Name",
	TestGenFieldLocLatitude:                          "Test Gen Field Loc Latitude",
	TestGenFieldLocLongitude:                         "Test Gen Field Loc Longitude",
	TestGenFieldLocHorizontalAccuracy:                "Test Gen Field Loc Horizontal Accuracy",
	TestGenFieldLocVerticalAccuracy:                  "Test Gen Field Loc Vertical Accuracy",
	TestGenFieldLocAltitude:                          "Test Gen Field Loc Altitude",
	TestGenFieldLocCourse:                            "Test Gen Field Loc Course",
	TestGenFieldLocSpeed:                             "Test Gen Field Loc Speed",
	TestGenFieldLocTimestampSeconds:                  "Test Gen Field Loc Timestamp Seconds",
	TestGenFieldLocTimestampNanos:                    "Test Gen Field Loc Timestamp Nanos",
	TestGenFieldLocNonnullLatitude:                   "Test Gen Field Loc Nonnull Latitude",
	TestGenFieldLocNonnullLongitude:                  "Test Gen Field Loc Nonnull Longitude",
	TestGenFieldLocNonnullHorizontalAccuracy:         "Test Gen Field Loc Nonnull Horizontal Accuracy",
	TestGenFieldLocNonnullVerticalAccuracy:           "Test Gen Field Loc Nonnull Vertical Accuracy",
	TestGenFieldLocNonnullAltitude:                   "Test Gen Field Loc Nonnull Altitude",
	TestGenFieldLocNonnullCourse:                     "Test Gen Field Loc Nonnull Course",
	TestGenFieldLocNonnullSpeed:                      "Test Gen Field Loc Nonnull Speed",
	TestGenFieldLocNonnullTimestampSeconds:           "Test Gen Field Loc Nonnull Timestamp Seconds",
	TestGenFieldLocNonnullTimestampNanos:             "Test Gen Field Loc Nonnull Timestamp Nanos",
	TestGenFieldRepeatedInt:                          "Test Gen Field Repeated Int",
	TestGenFieldIp:                                   "Test Gen Field Ip",
	TestGenFieldNames:                                "Test Gen Field Names",
	TestGenFieldRepeatedMsgName:                      "Test Gen Field Repeated Msg Name",
	TestGenFieldRepeatedMsgId:                        "Test Gen Field Repeated Msg Id",
	TestGenFieldRepeatedMsgNestedMsgName:             "Test Gen Field Repeated Msg Nested Msg Name",
	TestGenFieldRepeatedMsgNonnullName:               "Test Gen Field Repeated Msg Nonnull Name",
	TestGenFieldRepeatedMsgNonnullId:                 "Test Gen Field Repeated Msg Nonnull Id",
	TestGenFieldRepeatedMsgNonnullNestedMsgName:      "Test Gen Field Repeated Msg Nonnull Nested Msg Name",
	TestGenFieldRepeatedFieldsName:                   "Test Gen Field Repeated Fields Name",
	TestGenFieldRepeatedFieldsNonnullName:            "Test Gen Field Repeated Fields Nonnull Name",
	TestGenFieldRepeatedInnerMsgUrl:                  "Test Gen Field Repeated Inner Msg Url",
	TestGenFieldRepeatedInnerMsgId:                   "Test Gen Field Repeated Inner Msg Id",
	TestGenFieldRepeatedInnerMsgNonnullUrl:           "Test Gen Field Repeated Inner Msg Nonnull Url",
	TestGenFieldRepeatedInnerMsgNonnullId:            "Test Gen Field Repeated Inner Msg Nonnull Id",
	TestGenFieldRepeatedLocLatitude:                  "Test Gen Field Repeated Loc Latitude",
	TestGenFieldRepeatedLocLongitude:                 "Test Gen Field Repeated Loc Longitude",
	TestGenFieldRepeatedLocHorizontalAccuracy:        "Test Gen Field Repeated Loc Horizontal Accuracy",
	TestGenFieldRepeatedLocVerticalAccuracy:          "Test Gen Field Repeated Loc Vertical Accuracy",
	TestGenFieldRepeatedLocAltitude:                  "Test Gen Field Repeated Loc Altitude",
	TestGenFieldRepeatedLocCourse:                    "Test Gen Field Repeated Loc Course",
	TestGenFieldRepeatedLocSpeed:                     "Test Gen Field Repeated Loc Speed",
	TestGenFieldRepeatedLocTimestampSeconds:          "Test Gen Field Repeated Loc Timestamp Seconds",
	TestGenFieldRepeatedLocTimestampNanos:            "Test Gen Field Repeated Loc Timestamp Nanos",
	TestGenFieldRepeatedLocNonnullLatitude:           "Test Gen Field Repeated Loc Nonnull Latitude",
	TestGenFieldRepeatedLocNonnullLongitude:          "Test Gen Field Repeated Loc Nonnull Longitude",
	TestGenFieldRepeatedLocNonnullHorizontalAccuracy: "Test Gen Field Repeated Loc Nonnull Horizontal Accuracy",
	TestGenFieldRepeatedLocNonnullVerticalAccuracy:   "Test Gen Field Repeated Loc Nonnull Vertical Accuracy",
	TestGenFieldRepeatedLocNonnullAltitude:           "Test Gen Field Repeated Loc Nonnull Altitude",
	TestGenFieldRepeatedLocNonnullCourse:             "Test Gen Field Repeated Loc Nonnull Course",
	TestGenFieldRepeatedLocNonnullSpeed:              "Test Gen Field Repeated Loc Nonnull Speed",
	TestGenFieldRepeatedLocNonnullTimestampSeconds:   "Test Gen Field Repeated Loc Nonnull Timestamp Seconds",
	TestGenFieldRepeatedLocNonnullTimestampNanos:     "Test Gen Field Repeated Loc Nonnull Timestamp Nanos",
	TestGenFieldIntMapKey:                            "Test Gen Field Int Map Key",
	TestGenFieldIntMapValue:                          "Test Gen Field Int Map Value",
	TestGenFieldMsgMapKey:                            "Test Gen Field Msg Map Key",
	TestGenFieldMsgMapValueName:                      "Test Gen Field Msg Map Value Name",
	TestGenFieldUnused:                               "Test Gen Field Unused",
}

func (m *TestGen) IsKeyField(s string) bool {
	return strings.HasPrefix(s, TestGenFieldName+".")
}

func (m *TestGen) DiffFields(o *TestGen, fields map[string]struct{}) {
	if m.Name != o.Name {
		fields[TestGenFieldName] = struct{}{}
	}
	if m.Db != o.Db {
		fields[TestGenFieldDb] = struct{}{}
	}
	if m.Fl != o.Fl {
		fields[TestGenFieldFl] = struct{}{}
	}
	if m.I32 != o.I32 {
		fields[TestGenFieldI32] = struct{}{}
	}
	if m.I64 != o.I64 {
		fields[TestGenFieldI64] = struct{}{}
	}
	if m.U32 != o.U32 {
		fields[TestGenFieldU32] = struct{}{}
	}
	if m.U64 != o.U64 {
		fields[TestGenFieldU64] = struct{}{}
	}
	if m.S32 != o.S32 {
		fields[TestGenFieldS32] = struct{}{}
	}
	if m.S64 != o.S64 {
		fields[TestGenFieldS64] = struct{}{}
	}
	if m.F32 != o.F32 {
		fields[TestGenFieldF32] = struct{}{}
	}
	if m.F64 != o.F64 {
		fields[TestGenFieldF64] = struct{}{}
	}
	if m.Sf32 != o.Sf32 {
		fields[TestGenFieldSf32] = struct{}{}
	}
	if m.Sf64 != o.Sf64 {
		fields[TestGenFieldSf64] = struct{}{}
	}
	if m.Bb != o.Bb {
		fields[TestGenFieldBb] = struct{}{}
	}
	if m.OuterEn != o.OuterEn {
		fields[TestGenFieldOuterEn] = struct{}{}
	}
	if m.InnerEn != o.InnerEn {
		fields[TestGenFieldInnerEn] = struct{}{}
	}
	if m.InnerMsg != nil && o.InnerMsg != nil {
		if m.InnerMsg.Url != o.InnerMsg.Url {
			fields[TestGenFieldInnerMsgUrl] = struct{}{}
			fields[TestGenFieldInnerMsg] = struct{}{}
		}
		if m.InnerMsg.Id != o.InnerMsg.Id {
			fields[TestGenFieldInnerMsgId] = struct{}{}
			fields[TestGenFieldInnerMsg] = struct{}{}
		}
	}
	if m.InnerMsgNonnull.Url != o.InnerMsgNonnull.Url {
		fields[TestGenFieldInnerMsgNonnullUrl] = struct{}{}
		fields[TestGenFieldInnerMsgNonnull] = struct{}{}
	}
	if m.InnerMsgNonnull.Id != o.InnerMsgNonnull.Id {
		fields[TestGenFieldInnerMsgNonnullId] = struct{}{}
		fields[TestGenFieldInnerMsgNonnull] = struct{}{}
	}
	if m.IncludeMsg != nil && o.IncludeMsg != nil {
		if m.IncludeMsg.Name != o.IncludeMsg.Name {
			fields[TestGenFieldIncludeMsgName] = struct{}{}
			fields[TestGenFieldIncludeMsg] = struct{}{}
		}
		if m.IncludeMsg.Id != o.IncludeMsg.Id {
			fields[TestGenFieldIncludeMsgId] = struct{}{}
			fields[TestGenFieldIncludeMsg] = struct{}{}
		}
		if m.IncludeMsg.NestedMsg != nil && o.IncludeMsg.NestedMsg != nil {
			if m.IncludeMsg.NestedMsg.Name != o.IncludeMsg.NestedMsg.Name {
				fields[TestGenFieldIncludeMsgNestedMsgName] = struct{}{}
				fields[TestGenFieldIncludeMsgNestedMsg] = struct{}{}
				fields[TestGenFieldIncludeMsg] = struct{}{}
			}
		}
	}
	if m.IncludeMsgNonnull.Name != o.IncludeMsgNonnull.Name {
		fields[TestGenFieldIncludeMsgNonnullName] = struct{}{}
		fields[TestGenFieldIncludeMsgNonnull] = struct{}{}
	}
	if m.IncludeMsgNonnull.Id != o.IncludeMsgNonnull.Id {
		fields[TestGenFieldIncludeMsgNonnullId] = struct{}{}
		fields[TestGenFieldIncludeMsgNonnull] = struct{}{}
	}
	if m.IncludeMsgNonnull.NestedMsg != nil && o.IncludeMsgNonnull.NestedMsg != nil {
		if m.IncludeMsgNonnull.NestedMsg.Name != o.IncludeMsgNonnull.NestedMsg.Name {
			fields[TestGenFieldIncludeMsgNonnullNestedMsgName] = struct{}{}
			fields[TestGenFieldIncludeMsgNonnullNestedMsg] = struct{}{}
			fields[TestGenFieldIncludeMsgNonnull] = struct{}{}
		}
	}
	if m.IncludeFields != nil && o.IncludeFields != nil {
		if m.IncludeFields.Name != o.IncludeFields.Name {
			fields[TestGenFieldIncludeFieldsName] = struct{}{}
			fields[TestGenFieldIncludeFields] = struct{}{}
		}
	}
	if m.IncludeFieldsNonnull.Name != o.IncludeFieldsNonnull.Name {
		fields[TestGenFieldIncludeFieldsNonnullName] = struct{}{}
		fields[TestGenFieldIncludeFieldsNonnull] = struct{}{}
	}
	if m.Loc != nil && o.Loc != nil {
		if m.Loc.Latitude != o.Loc.Latitude {
			fields[TestGenFieldLocLatitude] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.Longitude != o.Loc.Longitude {
			fields[TestGenFieldLocLongitude] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.HorizontalAccuracy != o.Loc.HorizontalAccuracy {
			fields[TestGenFieldLocHorizontalAccuracy] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.VerticalAccuracy != o.Loc.VerticalAccuracy {
			fields[TestGenFieldLocVerticalAccuracy] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.Altitude != o.Loc.Altitude {
			fields[TestGenFieldLocAltitude] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.Course != o.Loc.Course {
			fields[TestGenFieldLocCourse] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.Speed != o.Loc.Speed {
			fields[TestGenFieldLocSpeed] = struct{}{}
			fields[TestGenFieldLoc] = struct{}{}
		}
		if m.Loc.Timestamp != nil && o.Loc.Timestamp != nil {
			if m.Loc.Timestamp.Seconds != o.Loc.Timestamp.Seconds {
				fields[TestGenFieldLocTimestampSeconds] = struct{}{}
				fields[TestGenFieldLocTimestamp] = struct{}{}
				fields[TestGenFieldLoc] = struct{}{}
			}
			if m.Loc.Timestamp.Nanos != o.Loc.Timestamp.Nanos {
				fields[TestGenFieldLocTimestampNanos] = struct{}{}
				fields[TestGenFieldLocTimestamp] = struct{}{}
				fields[TestGenFieldLoc] = struct{}{}
			}
		}
	}
	if m.LocNonnull.Latitude != o.LocNonnull.Latitude {
		fields[TestGenFieldLocNonnullLatitude] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.Longitude != o.LocNonnull.Longitude {
		fields[TestGenFieldLocNonnullLongitude] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.HorizontalAccuracy != o.LocNonnull.HorizontalAccuracy {
		fields[TestGenFieldLocNonnullHorizontalAccuracy] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.VerticalAccuracy != o.LocNonnull.VerticalAccuracy {
		fields[TestGenFieldLocNonnullVerticalAccuracy] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.Altitude != o.LocNonnull.Altitude {
		fields[TestGenFieldLocNonnullAltitude] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.Course != o.LocNonnull.Course {
		fields[TestGenFieldLocNonnullCourse] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.Speed != o.LocNonnull.Speed {
		fields[TestGenFieldLocNonnullSpeed] = struct{}{}
		fields[TestGenFieldLocNonnull] = struct{}{}
	}
	if m.LocNonnull.Timestamp != nil && o.LocNonnull.Timestamp != nil {
		if m.LocNonnull.Timestamp.Seconds != o.LocNonnull.Timestamp.Seconds {
			fields[TestGenFieldLocNonnullTimestampSeconds] = struct{}{}
			fields[TestGenFieldLocNonnullTimestamp] = struct{}{}
			fields[TestGenFieldLocNonnull] = struct{}{}
		}
		if m.LocNonnull.Timestamp.Nanos != o.LocNonnull.Timestamp.Nanos {
			fields[TestGenFieldLocNonnullTimestampNanos] = struct{}{}
			fields[TestGenFieldLocNonnullTimestamp] = struct{}{}
			fields[TestGenFieldLocNonnull] = struct{}{}
		}
	}
	if len(m.RepeatedInt) != len(o.RepeatedInt) {
		fields[TestGenFieldRepeatedInt] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RepeatedInt); i0++ {
			if m.RepeatedInt[i0] != o.RepeatedInt[i0] {
				fields[TestGenFieldRepeatedInt] = struct{}{}
				break
			}
		}
	}
	if len(m.Ip) != len(o.Ip) {
		fields[TestGenFieldIp] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Ip); i0++ {
			if m.Ip[i0] != o.Ip[i0] {
				fields[TestGenFieldIp] = struct{}{}
				break
			}
		}
	}
	if len(m.Names) != len(o.Names) {
		fields[TestGenFieldNames] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.Names); i0++ {
			if m.Names[i0] != o.Names[i0] {
				fields[TestGenFieldNames] = struct{}{}
				break
			}
		}
	}
	if m.RepeatedMsg != nil && o.RepeatedMsg != nil {
		if len(m.RepeatedMsg) != len(o.RepeatedMsg) {
			fields[TestGenFieldRepeatedMsg] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.RepeatedMsg); i0++ {
				if m.RepeatedMsg[i0].Name != o.RepeatedMsg[i0].Name {
					fields[TestGenFieldRepeatedMsgName] = struct{}{}
					fields[TestGenFieldRepeatedMsg] = struct{}{}
				}
				if m.RepeatedMsg[i0].Id != o.RepeatedMsg[i0].Id {
					fields[TestGenFieldRepeatedMsgId] = struct{}{}
					fields[TestGenFieldRepeatedMsg] = struct{}{}
				}
				if m.RepeatedMsg[i0].NestedMsg != nil && o.RepeatedMsg[i0].NestedMsg != nil {
					if m.RepeatedMsg[i0].NestedMsg.Name != o.RepeatedMsg[i0].NestedMsg.Name {
						fields[TestGenFieldRepeatedMsgNestedMsgName] = struct{}{}
						fields[TestGenFieldRepeatedMsgNestedMsg] = struct{}{}
						fields[TestGenFieldRepeatedMsg] = struct{}{}
					}
				}
			}
		}
	}
	if len(m.RepeatedMsgNonnull) != len(o.RepeatedMsgNonnull) {
		fields[TestGenFieldRepeatedMsgNonnull] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RepeatedMsgNonnull); i0++ {
			if m.RepeatedMsgNonnull[i0].Name != o.RepeatedMsgNonnull[i0].Name {
				fields[TestGenFieldRepeatedMsgNonnullName] = struct{}{}
				fields[TestGenFieldRepeatedMsgNonnull] = struct{}{}
			}
			if m.RepeatedMsgNonnull[i0].Id != o.RepeatedMsgNonnull[i0].Id {
				fields[TestGenFieldRepeatedMsgNonnullId] = struct{}{}
				fields[TestGenFieldRepeatedMsgNonnull] = struct{}{}
			}
			if m.RepeatedMsgNonnull[i0].NestedMsg != nil && o.RepeatedMsgNonnull[i0].NestedMsg != nil {
				if m.RepeatedMsgNonnull[i0].NestedMsg.Name != o.RepeatedMsgNonnull[i0].NestedMsg.Name {
					fields[TestGenFieldRepeatedMsgNonnullNestedMsgName] = struct{}{}
					fields[TestGenFieldRepeatedMsgNonnullNestedMsg] = struct{}{}
					fields[TestGenFieldRepeatedMsgNonnull] = struct{}{}
				}
			}
		}
	}
	if m.RepeatedFields != nil && o.RepeatedFields != nil {
		if len(m.RepeatedFields) != len(o.RepeatedFields) {
			fields[TestGenFieldRepeatedFields] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.RepeatedFields); i0++ {
				if m.RepeatedFields[i0].Name != o.RepeatedFields[i0].Name {
					fields[TestGenFieldRepeatedFieldsName] = struct{}{}
					fields[TestGenFieldRepeatedFields] = struct{}{}
				}
			}
		}
	}
	if len(m.RepeatedFieldsNonnull) != len(o.RepeatedFieldsNonnull) {
		fields[TestGenFieldRepeatedFieldsNonnull] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RepeatedFieldsNonnull); i0++ {
			if m.RepeatedFieldsNonnull[i0].Name != o.RepeatedFieldsNonnull[i0].Name {
				fields[TestGenFieldRepeatedFieldsNonnullName] = struct{}{}
				fields[TestGenFieldRepeatedFieldsNonnull] = struct{}{}
			}
		}
	}
	if m.RepeatedInnerMsg != nil && o.RepeatedInnerMsg != nil {
		if len(m.RepeatedInnerMsg) != len(o.RepeatedInnerMsg) {
			fields[TestGenFieldRepeatedInnerMsg] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.RepeatedInnerMsg); i0++ {
				if m.RepeatedInnerMsg[i0].Url != o.RepeatedInnerMsg[i0].Url {
					fields[TestGenFieldRepeatedInnerMsgUrl] = struct{}{}
					fields[TestGenFieldRepeatedInnerMsg] = struct{}{}
				}
				if m.RepeatedInnerMsg[i0].Id != o.RepeatedInnerMsg[i0].Id {
					fields[TestGenFieldRepeatedInnerMsgId] = struct{}{}
					fields[TestGenFieldRepeatedInnerMsg] = struct{}{}
				}
			}
		}
	}
	if len(m.RepeatedInnerMsgNonnull) != len(o.RepeatedInnerMsgNonnull) {
		fields[TestGenFieldRepeatedInnerMsgNonnull] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RepeatedInnerMsgNonnull); i0++ {
			if m.RepeatedInnerMsgNonnull[i0].Url != o.RepeatedInnerMsgNonnull[i0].Url {
				fields[TestGenFieldRepeatedInnerMsgNonnullUrl] = struct{}{}
				fields[TestGenFieldRepeatedInnerMsgNonnull] = struct{}{}
			}
			if m.RepeatedInnerMsgNonnull[i0].Id != o.RepeatedInnerMsgNonnull[i0].Id {
				fields[TestGenFieldRepeatedInnerMsgNonnullId] = struct{}{}
				fields[TestGenFieldRepeatedInnerMsgNonnull] = struct{}{}
			}
		}
	}
	if m.RepeatedLoc != nil && o.RepeatedLoc != nil {
		if len(m.RepeatedLoc) != len(o.RepeatedLoc) {
			fields[TestGenFieldRepeatedLoc] = struct{}{}
		} else {
			for i0 := 0; i0 < len(m.RepeatedLoc); i0++ {
				if m.RepeatedLoc[i0].Latitude != o.RepeatedLoc[i0].Latitude {
					fields[TestGenFieldRepeatedLocLatitude] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].Longitude != o.RepeatedLoc[i0].Longitude {
					fields[TestGenFieldRepeatedLocLongitude] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].HorizontalAccuracy != o.RepeatedLoc[i0].HorizontalAccuracy {
					fields[TestGenFieldRepeatedLocHorizontalAccuracy] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].VerticalAccuracy != o.RepeatedLoc[i0].VerticalAccuracy {
					fields[TestGenFieldRepeatedLocVerticalAccuracy] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].Altitude != o.RepeatedLoc[i0].Altitude {
					fields[TestGenFieldRepeatedLocAltitude] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].Course != o.RepeatedLoc[i0].Course {
					fields[TestGenFieldRepeatedLocCourse] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].Speed != o.RepeatedLoc[i0].Speed {
					fields[TestGenFieldRepeatedLocSpeed] = struct{}{}
					fields[TestGenFieldRepeatedLoc] = struct{}{}
				}
				if m.RepeatedLoc[i0].Timestamp != nil && o.RepeatedLoc[i0].Timestamp != nil {
					if m.RepeatedLoc[i0].Timestamp.Seconds != o.RepeatedLoc[i0].Timestamp.Seconds {
						fields[TestGenFieldRepeatedLocTimestampSeconds] = struct{}{}
						fields[TestGenFieldRepeatedLocTimestamp] = struct{}{}
						fields[TestGenFieldRepeatedLoc] = struct{}{}
					}
					if m.RepeatedLoc[i0].Timestamp.Nanos != o.RepeatedLoc[i0].Timestamp.Nanos {
						fields[TestGenFieldRepeatedLocTimestampNanos] = struct{}{}
						fields[TestGenFieldRepeatedLocTimestamp] = struct{}{}
						fields[TestGenFieldRepeatedLoc] = struct{}{}
					}
				}
			}
		}
	}
	if len(m.RepeatedLocNonnull) != len(o.RepeatedLocNonnull) {
		fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
	} else {
		for i0 := 0; i0 < len(m.RepeatedLocNonnull); i0++ {
			if m.RepeatedLocNonnull[i0].Latitude != o.RepeatedLocNonnull[i0].Latitude {
				fields[TestGenFieldRepeatedLocNonnullLatitude] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].Longitude != o.RepeatedLocNonnull[i0].Longitude {
				fields[TestGenFieldRepeatedLocNonnullLongitude] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].HorizontalAccuracy != o.RepeatedLocNonnull[i0].HorizontalAccuracy {
				fields[TestGenFieldRepeatedLocNonnullHorizontalAccuracy] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].VerticalAccuracy != o.RepeatedLocNonnull[i0].VerticalAccuracy {
				fields[TestGenFieldRepeatedLocNonnullVerticalAccuracy] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].Altitude != o.RepeatedLocNonnull[i0].Altitude {
				fields[TestGenFieldRepeatedLocNonnullAltitude] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].Course != o.RepeatedLocNonnull[i0].Course {
				fields[TestGenFieldRepeatedLocNonnullCourse] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].Speed != o.RepeatedLocNonnull[i0].Speed {
				fields[TestGenFieldRepeatedLocNonnullSpeed] = struct{}{}
				fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
			}
			if m.RepeatedLocNonnull[i0].Timestamp != nil && o.RepeatedLocNonnull[i0].Timestamp != nil {
				if m.RepeatedLocNonnull[i0].Timestamp.Seconds != o.RepeatedLocNonnull[i0].Timestamp.Seconds {
					fields[TestGenFieldRepeatedLocNonnullTimestampSeconds] = struct{}{}
					fields[TestGenFieldRepeatedLocNonnullTimestamp] = struct{}{}
					fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
				}
				if m.RepeatedLocNonnull[i0].Timestamp.Nanos != o.RepeatedLocNonnull[i0].Timestamp.Nanos {
					fields[TestGenFieldRepeatedLocNonnullTimestampNanos] = struct{}{}
					fields[TestGenFieldRepeatedLocNonnullTimestamp] = struct{}{}
					fields[TestGenFieldRepeatedLocNonnull] = struct{}{}
				}
			}
		}
	}
	if m.IntMap != nil && o.IntMap != nil {
		if len(m.IntMap) != len(o.IntMap) {
			fields[TestGenFieldIntMap] = struct{}{}
		} else {
			for k0, _ := range m.IntMap {
				_, vok0 := o.IntMap[k0]
				if !vok0 {
					fields[TestGenFieldIntMap] = struct{}{}
				} else {
					if m.IntMap[k0] != o.IntMap[k0] {
						fields[TestGenFieldIntMap] = struct{}{}
						break
					}
				}
			}
		}
	}
	if m.MsgMap != nil && o.MsgMap != nil {
		if len(m.MsgMap) != len(o.MsgMap) {
			fields[TestGenFieldMsgMap] = struct{}{}
		} else {
			for k0, _ := range m.MsgMap {
				_, vok0 := o.MsgMap[k0]
				if !vok0 {
					fields[TestGenFieldMsgMap] = struct{}{}
				} else {
					if m.MsgMap[k0].Name != o.MsgMap[k0].Name {
						fields[TestGenFieldMsgMapValueName] = struct{}{}
						fields[TestGenFieldMsgMapValue] = struct{}{}
						fields[TestGenFieldMsgMap] = struct{}{}
					}
				}
			}
		}
	}
	if m.Unused != o.Unused {
		fields[TestGenFieldUnused] = struct{}{}
	}
}

func (m *TestGen) CopyInFields(src *TestGen) int {
	changed := 0
	fmap := MakeFieldMap(src.Fields)
	if _, set := fmap["2"]; set {
		if m.Name != src.Name {
			m.Name = src.Name
			changed++
		}
	}
	if _, set := fmap["3"]; set {
		if m.Db != src.Db {
			m.Db = src.Db
			changed++
		}
	}
	if _, set := fmap["4"]; set {
		if m.Fl != src.Fl {
			m.Fl = src.Fl
			changed++
		}
	}
	if _, set := fmap["5"]; set {
		if m.I32 != src.I32 {
			m.I32 = src.I32
			changed++
		}
	}
	if _, set := fmap["6"]; set {
		if m.I64 != src.I64 {
			m.I64 = src.I64
			changed++
		}
	}
	if _, set := fmap["7"]; set {
		if m.U32 != src.U32 {
			m.U32 = src.U32
			changed++
		}
	}
	if _, set := fmap["8"]; set {
		if m.U64 != src.U64 {
			m.U64 = src.U64
			changed++
		}
	}
	if _, set := fmap["9"]; set {
		if m.S32 != src.S32 {
			m.S32 = src.S32
			changed++
		}
	}
	if _, set := fmap["10"]; set {
		if m.S64 != src.S64 {
			m.S64 = src.S64
			changed++
		}
	}
	if _, set := fmap["11"]; set {
		if m.F32 != src.F32 {
			m.F32 = src.F32
			changed++
		}
	}
	if _, set := fmap["12"]; set {
		if m.F64 != src.F64 {
			m.F64 = src.F64
			changed++
		}
	}
	if _, set := fmap["13"]; set {
		if m.Sf32 != src.Sf32 {
			m.Sf32 = src.Sf32
			changed++
		}
	}
	if _, set := fmap["14"]; set {
		if m.Sf64 != src.Sf64 {
			m.Sf64 = src.Sf64
			changed++
		}
	}
	if _, set := fmap["15"]; set {
		if m.Bb != src.Bb {
			m.Bb = src.Bb
			changed++
		}
	}
	if _, set := fmap["16"]; set {
		if m.OuterEn != src.OuterEn {
			m.OuterEn = src.OuterEn
			changed++
		}
	}
	if _, set := fmap["17"]; set {
		if m.InnerEn != src.InnerEn {
			m.InnerEn = src.InnerEn
			changed++
		}
	}
	if _, set := fmap["18"]; set && src.InnerMsg != nil {
		m.InnerMsg = &TestGen_InnerMessage{}
		if _, set := fmap["18.1"]; set {
			if m.InnerMsg.Url != src.InnerMsg.Url {
				m.InnerMsg.Url = src.InnerMsg.Url
				changed++
			}
		}
		if _, set := fmap["18.2"]; set {
			if m.InnerMsg.Id != src.InnerMsg.Id {
				m.InnerMsg.Id = src.InnerMsg.Id
				changed++
			}
		}
	}
	if _, set := fmap["19"]; set {
		if _, set := fmap["19.1"]; set {
			if m.InnerMsgNonnull.Url != src.InnerMsgNonnull.Url {
				m.InnerMsgNonnull.Url = src.InnerMsgNonnull.Url
				changed++
			}
		}
		if _, set := fmap["19.2"]; set {
			if m.InnerMsgNonnull.Id != src.InnerMsgNonnull.Id {
				m.InnerMsgNonnull.Id = src.InnerMsgNonnull.Id
				changed++
			}
		}
	}
	if _, set := fmap["20"]; set && src.IncludeMsg != nil {
		m.IncludeMsg = &IncludeMessage{}
		if _, set := fmap["20.1"]; set {
			if m.IncludeMsg.Name != src.IncludeMsg.Name {
				m.IncludeMsg.Name = src.IncludeMsg.Name
				changed++
			}
		}
		if _, set := fmap["20.2"]; set {
			if m.IncludeMsg.Id != src.IncludeMsg.Id {
				m.IncludeMsg.Id = src.IncludeMsg.Id
				changed++
			}
		}
		if _, set := fmap["20.3"]; set && src.IncludeMsg.NestedMsg != nil {
			m.IncludeMsg.NestedMsg = &NestedMessage{}
			if _, set := fmap["20.3.1"]; set {
				if m.IncludeMsg.NestedMsg.Name != src.IncludeMsg.NestedMsg.Name {
					m.IncludeMsg.NestedMsg.Name = src.IncludeMsg.NestedMsg.Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["21"]; set {
		if _, set := fmap["21.1"]; set {
			if m.IncludeMsgNonnull.Name != src.IncludeMsgNonnull.Name {
				m.IncludeMsgNonnull.Name = src.IncludeMsgNonnull.Name
				changed++
			}
		}
		if _, set := fmap["21.2"]; set {
			if m.IncludeMsgNonnull.Id != src.IncludeMsgNonnull.Id {
				m.IncludeMsgNonnull.Id = src.IncludeMsgNonnull.Id
				changed++
			}
		}
		if _, set := fmap["21.3"]; set && src.IncludeMsgNonnull.NestedMsg != nil {
			m.IncludeMsgNonnull.NestedMsg = &NestedMessage{}
			if _, set := fmap["21.3.1"]; set {
				if m.IncludeMsgNonnull.NestedMsg.Name != src.IncludeMsgNonnull.NestedMsg.Name {
					m.IncludeMsgNonnull.NestedMsg.Name = src.IncludeMsgNonnull.NestedMsg.Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["22"]; set && src.IncludeFields != nil {
		m.IncludeFields = &IncludeFields{}
		if _, set := fmap["22.2"]; set {
			if m.IncludeFields.Name != src.IncludeFields.Name {
				m.IncludeFields.Name = src.IncludeFields.Name
				changed++
			}
		}
	}
	if _, set := fmap["23"]; set {
		if _, set := fmap["23.2"]; set {
			if m.IncludeFieldsNonnull.Name != src.IncludeFieldsNonnull.Name {
				m.IncludeFieldsNonnull.Name = src.IncludeFieldsNonnull.Name
				changed++
			}
		}
	}
	if _, set := fmap["24"]; set && src.Loc != nil {
		m.Loc = &distributed_match_engine.Loc{}
		if _, set := fmap["24.1"]; set {
			if m.Loc.Latitude != src.Loc.Latitude {
				m.Loc.Latitude = src.Loc.Latitude
				changed++
			}
		}
		if _, set := fmap["24.2"]; set {
			if m.Loc.Longitude != src.Loc.Longitude {
				m.Loc.Longitude = src.Loc.Longitude
				changed++
			}
		}
		if _, set := fmap["24.3"]; set {
			if m.Loc.HorizontalAccuracy != src.Loc.HorizontalAccuracy {
				m.Loc.HorizontalAccuracy = src.Loc.HorizontalAccuracy
				changed++
			}
		}
		if _, set := fmap["24.4"]; set {
			if m.Loc.VerticalAccuracy != src.Loc.VerticalAccuracy {
				m.Loc.VerticalAccuracy = src.Loc.VerticalAccuracy
				changed++
			}
		}
		if _, set := fmap["24.5"]; set {
			if m.Loc.Altitude != src.Loc.Altitude {
				m.Loc.Altitude = src.Loc.Altitude
				changed++
			}
		}
		if _, set := fmap["24.6"]; set {
			if m.Loc.Course != src.Loc.Course {
				m.Loc.Course = src.Loc.Course
				changed++
			}
		}
		if _, set := fmap["24.7"]; set {
			if m.Loc.Speed != src.Loc.Speed {
				m.Loc.Speed = src.Loc.Speed
				changed++
			}
		}
		if _, set := fmap["24.8"]; set && src.Loc.Timestamp != nil {
			m.Loc.Timestamp = &distributed_match_engine.Timestamp{}
			if _, set := fmap["24.8.1"]; set {
				if m.Loc.Timestamp.Seconds != src.Loc.Timestamp.Seconds {
					m.Loc.Timestamp.Seconds = src.Loc.Timestamp.Seconds
					changed++
				}
			}
			if _, set := fmap["24.8.2"]; set {
				if m.Loc.Timestamp.Nanos != src.Loc.Timestamp.Nanos {
					m.Loc.Timestamp.Nanos = src.Loc.Timestamp.Nanos
					changed++
				}
			}
		}
	}
	if _, set := fmap["25"]; set {
		if _, set := fmap["25.1"]; set {
			if m.LocNonnull.Latitude != src.LocNonnull.Latitude {
				m.LocNonnull.Latitude = src.LocNonnull.Latitude
				changed++
			}
		}
		if _, set := fmap["25.2"]; set {
			if m.LocNonnull.Longitude != src.LocNonnull.Longitude {
				m.LocNonnull.Longitude = src.LocNonnull.Longitude
				changed++
			}
		}
		if _, set := fmap["25.3"]; set {
			if m.LocNonnull.HorizontalAccuracy != src.LocNonnull.HorizontalAccuracy {
				m.LocNonnull.HorizontalAccuracy = src.LocNonnull.HorizontalAccuracy
				changed++
			}
		}
		if _, set := fmap["25.4"]; set {
			if m.LocNonnull.VerticalAccuracy != src.LocNonnull.VerticalAccuracy {
				m.LocNonnull.VerticalAccuracy = src.LocNonnull.VerticalAccuracy
				changed++
			}
		}
		if _, set := fmap["25.5"]; set {
			if m.LocNonnull.Altitude != src.LocNonnull.Altitude {
				m.LocNonnull.Altitude = src.LocNonnull.Altitude
				changed++
			}
		}
		if _, set := fmap["25.6"]; set {
			if m.LocNonnull.Course != src.LocNonnull.Course {
				m.LocNonnull.Course = src.LocNonnull.Course
				changed++
			}
		}
		if _, set := fmap["25.7"]; set {
			if m.LocNonnull.Speed != src.LocNonnull.Speed {
				m.LocNonnull.Speed = src.LocNonnull.Speed
				changed++
			}
		}
		if _, set := fmap["25.8"]; set && src.LocNonnull.Timestamp != nil {
			m.LocNonnull.Timestamp = &distributed_match_engine.Timestamp{}
			if _, set := fmap["25.8.1"]; set {
				if m.LocNonnull.Timestamp.Seconds != src.LocNonnull.Timestamp.Seconds {
					m.LocNonnull.Timestamp.Seconds = src.LocNonnull.Timestamp.Seconds
					changed++
				}
			}
			if _, set := fmap["25.8.2"]; set {
				if m.LocNonnull.Timestamp.Nanos != src.LocNonnull.Timestamp.Nanos {
					m.LocNonnull.Timestamp.Nanos = src.LocNonnull.Timestamp.Nanos
					changed++
				}
			}
		}
	}
	if _, set := fmap["26"]; set {
		if m.RepeatedInt == nil || len(m.RepeatedInt) != len(src.RepeatedInt) {
			m.RepeatedInt = make([]int64, len(src.RepeatedInt))
		}
		copy(m.RepeatedInt, src.RepeatedInt)
		changed++
	}
	if _, set := fmap["27"]; set {
		if m.Ip == nil || len(m.Ip) != len(src.Ip) {
			m.Ip = make([]byte, len(src.Ip))
		}
		copy(m.Ip, src.Ip)
		changed++
	}
	if _, set := fmap["28"]; set {
		if m.Names == nil || len(m.Names) != len(src.Names) {
			m.Names = make([]string, len(src.Names))
		}
		copy(m.Names, src.Names)
		changed++
	}
	if _, set := fmap["29"]; set && src.RepeatedMsg != nil {
		if m.RepeatedMsg == nil || len(m.RepeatedMsg) != len(src.RepeatedMsg) {
			m.RepeatedMsg = make([]*IncludeMessage, len(src.RepeatedMsg))
		}
		for i0 := 0; i0 < len(src.RepeatedMsg); i0++ {
			m.RepeatedMsg[i0] = &IncludeMessage{}
			if _, set := fmap["29.1"]; set {
				if m.RepeatedMsg[i0].Name != src.RepeatedMsg[i0].Name {
					m.RepeatedMsg[i0].Name = src.RepeatedMsg[i0].Name
					changed++
				}
			}
			if _, set := fmap["29.2"]; set {
				if m.RepeatedMsg[i0].Id != src.RepeatedMsg[i0].Id {
					m.RepeatedMsg[i0].Id = src.RepeatedMsg[i0].Id
					changed++
				}
			}
			if _, set := fmap["29.3"]; set && src.RepeatedMsg[i0].NestedMsg != nil {
				m.RepeatedMsg[i0].NestedMsg = &NestedMessage{}
				if _, set := fmap["29.3.1"]; set {
					if m.RepeatedMsg[i0].NestedMsg.Name != src.RepeatedMsg[i0].NestedMsg.Name {
						m.RepeatedMsg[i0].NestedMsg.Name = src.RepeatedMsg[i0].NestedMsg.Name
						changed++
					}
				}
			}
		}
	}
	if _, set := fmap["30"]; set {
		if m.RepeatedMsgNonnull == nil || len(m.RepeatedMsgNonnull) != len(src.RepeatedMsgNonnull) {
			m.RepeatedMsgNonnull = make([]IncludeMessage, len(src.RepeatedMsgNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedMsgNonnull); i0++ {
			if _, set := fmap["30.1"]; set {
				if m.RepeatedMsgNonnull[i0].Name != src.RepeatedMsgNonnull[i0].Name {
					m.RepeatedMsgNonnull[i0].Name = src.RepeatedMsgNonnull[i0].Name
					changed++
				}
			}
			if _, set := fmap["30.2"]; set {
				if m.RepeatedMsgNonnull[i0].Id != src.RepeatedMsgNonnull[i0].Id {
					m.RepeatedMsgNonnull[i0].Id = src.RepeatedMsgNonnull[i0].Id
					changed++
				}
			}
			if _, set := fmap["30.3"]; set && src.RepeatedMsgNonnull[i0].NestedMsg != nil {
				m.RepeatedMsgNonnull[i0].NestedMsg = &NestedMessage{}
				if _, set := fmap["30.3.1"]; set {
					if m.RepeatedMsgNonnull[i0].NestedMsg.Name != src.RepeatedMsgNonnull[i0].NestedMsg.Name {
						m.RepeatedMsgNonnull[i0].NestedMsg.Name = src.RepeatedMsgNonnull[i0].NestedMsg.Name
						changed++
					}
				}
			}
		}
	}
	if _, set := fmap["31"]; set && src.RepeatedFields != nil {
		if m.RepeatedFields == nil || len(m.RepeatedFields) != len(src.RepeatedFields) {
			m.RepeatedFields = make([]*IncludeFields, len(src.RepeatedFields))
		}
		for i0 := 0; i0 < len(src.RepeatedFields); i0++ {
			m.RepeatedFields[i0] = &IncludeFields{}
			if _, set := fmap["31.2"]; set {
				if m.RepeatedFields[i0].Name != src.RepeatedFields[i0].Name {
					m.RepeatedFields[i0].Name = src.RepeatedFields[i0].Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["32"]; set {
		if m.RepeatedFieldsNonnull == nil || len(m.RepeatedFieldsNonnull) != len(src.RepeatedFieldsNonnull) {
			m.RepeatedFieldsNonnull = make([]IncludeFields, len(src.RepeatedFieldsNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedFieldsNonnull); i0++ {
			if _, set := fmap["32.2"]; set {
				if m.RepeatedFieldsNonnull[i0].Name != src.RepeatedFieldsNonnull[i0].Name {
					m.RepeatedFieldsNonnull[i0].Name = src.RepeatedFieldsNonnull[i0].Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["33"]; set && src.RepeatedInnerMsg != nil {
		if m.RepeatedInnerMsg == nil || len(m.RepeatedInnerMsg) != len(src.RepeatedInnerMsg) {
			m.RepeatedInnerMsg = make([]*TestGen_InnerMessage, len(src.RepeatedInnerMsg))
		}
		for i0 := 0; i0 < len(src.RepeatedInnerMsg); i0++ {
			m.RepeatedInnerMsg[i0] = &TestGen_InnerMessage{}
			if _, set := fmap["33.1"]; set {
				if m.RepeatedInnerMsg[i0].Url != src.RepeatedInnerMsg[i0].Url {
					m.RepeatedInnerMsg[i0].Url = src.RepeatedInnerMsg[i0].Url
					changed++
				}
			}
			if _, set := fmap["33.2"]; set {
				if m.RepeatedInnerMsg[i0].Id != src.RepeatedInnerMsg[i0].Id {
					m.RepeatedInnerMsg[i0].Id = src.RepeatedInnerMsg[i0].Id
					changed++
				}
			}
		}
	}
	if _, set := fmap["34"]; set {
		if m.RepeatedInnerMsgNonnull == nil || len(m.RepeatedInnerMsgNonnull) != len(src.RepeatedInnerMsgNonnull) {
			m.RepeatedInnerMsgNonnull = make([]TestGen_InnerMessage, len(src.RepeatedInnerMsgNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedInnerMsgNonnull); i0++ {
			if _, set := fmap["34.1"]; set {
				if m.RepeatedInnerMsgNonnull[i0].Url != src.RepeatedInnerMsgNonnull[i0].Url {
					m.RepeatedInnerMsgNonnull[i0].Url = src.RepeatedInnerMsgNonnull[i0].Url
					changed++
				}
			}
			if _, set := fmap["34.2"]; set {
				if m.RepeatedInnerMsgNonnull[i0].Id != src.RepeatedInnerMsgNonnull[i0].Id {
					m.RepeatedInnerMsgNonnull[i0].Id = src.RepeatedInnerMsgNonnull[i0].Id
					changed++
				}
			}
		}
	}
	if _, set := fmap["35"]; set && src.RepeatedLoc != nil {
		if m.RepeatedLoc == nil || len(m.RepeatedLoc) != len(src.RepeatedLoc) {
			m.RepeatedLoc = make([]*distributed_match_engine.Loc, len(src.RepeatedLoc))
		}
		for i0 := 0; i0 < len(src.RepeatedLoc); i0++ {
			m.RepeatedLoc[i0] = &distributed_match_engine.Loc{}
			if _, set := fmap["35.1"]; set {
				if m.RepeatedLoc[i0].Latitude != src.RepeatedLoc[i0].Latitude {
					m.RepeatedLoc[i0].Latitude = src.RepeatedLoc[i0].Latitude
					changed++
				}
			}
			if _, set := fmap["35.2"]; set {
				if m.RepeatedLoc[i0].Longitude != src.RepeatedLoc[i0].Longitude {
					m.RepeatedLoc[i0].Longitude = src.RepeatedLoc[i0].Longitude
					changed++
				}
			}
			if _, set := fmap["35.3"]; set {
				if m.RepeatedLoc[i0].HorizontalAccuracy != src.RepeatedLoc[i0].HorizontalAccuracy {
					m.RepeatedLoc[i0].HorizontalAccuracy = src.RepeatedLoc[i0].HorizontalAccuracy
					changed++
				}
			}
			if _, set := fmap["35.4"]; set {
				if m.RepeatedLoc[i0].VerticalAccuracy != src.RepeatedLoc[i0].VerticalAccuracy {
					m.RepeatedLoc[i0].VerticalAccuracy = src.RepeatedLoc[i0].VerticalAccuracy
					changed++
				}
			}
			if _, set := fmap["35.5"]; set {
				if m.RepeatedLoc[i0].Altitude != src.RepeatedLoc[i0].Altitude {
					m.RepeatedLoc[i0].Altitude = src.RepeatedLoc[i0].Altitude
					changed++
				}
			}
			if _, set := fmap["35.6"]; set {
				if m.RepeatedLoc[i0].Course != src.RepeatedLoc[i0].Course {
					m.RepeatedLoc[i0].Course = src.RepeatedLoc[i0].Course
					changed++
				}
			}
			if _, set := fmap["35.7"]; set {
				if m.RepeatedLoc[i0].Speed != src.RepeatedLoc[i0].Speed {
					m.RepeatedLoc[i0].Speed = src.RepeatedLoc[i0].Speed
					changed++
				}
			}
			if _, set := fmap["35.8"]; set && src.RepeatedLoc[i0].Timestamp != nil {
				m.RepeatedLoc[i0].Timestamp = &distributed_match_engine.Timestamp{}
				if _, set := fmap["35.8.1"]; set {
					if m.RepeatedLoc[i0].Timestamp.Seconds != src.RepeatedLoc[i0].Timestamp.Seconds {
						m.RepeatedLoc[i0].Timestamp.Seconds = src.RepeatedLoc[i0].Timestamp.Seconds
						changed++
					}
				}
				if _, set := fmap["35.8.2"]; set {
					if m.RepeatedLoc[i0].Timestamp.Nanos != src.RepeatedLoc[i0].Timestamp.Nanos {
						m.RepeatedLoc[i0].Timestamp.Nanos = src.RepeatedLoc[i0].Timestamp.Nanos
						changed++
					}
				}
			}
		}
	}
	if _, set := fmap["36"]; set {
		if m.RepeatedLocNonnull == nil || len(m.RepeatedLocNonnull) != len(src.RepeatedLocNonnull) {
			m.RepeatedLocNonnull = make([]distributed_match_engine.Loc, len(src.RepeatedLocNonnull))
		}
		for i0 := 0; i0 < len(src.RepeatedLocNonnull); i0++ {
			if _, set := fmap["36.1"]; set {
				if m.RepeatedLocNonnull[i0].Latitude != src.RepeatedLocNonnull[i0].Latitude {
					m.RepeatedLocNonnull[i0].Latitude = src.RepeatedLocNonnull[i0].Latitude
					changed++
				}
			}
			if _, set := fmap["36.2"]; set {
				if m.RepeatedLocNonnull[i0].Longitude != src.RepeatedLocNonnull[i0].Longitude {
					m.RepeatedLocNonnull[i0].Longitude = src.RepeatedLocNonnull[i0].Longitude
					changed++
				}
			}
			if _, set := fmap["36.3"]; set {
				if m.RepeatedLocNonnull[i0].HorizontalAccuracy != src.RepeatedLocNonnull[i0].HorizontalAccuracy {
					m.RepeatedLocNonnull[i0].HorizontalAccuracy = src.RepeatedLocNonnull[i0].HorizontalAccuracy
					changed++
				}
			}
			if _, set := fmap["36.4"]; set {
				if m.RepeatedLocNonnull[i0].VerticalAccuracy != src.RepeatedLocNonnull[i0].VerticalAccuracy {
					m.RepeatedLocNonnull[i0].VerticalAccuracy = src.RepeatedLocNonnull[i0].VerticalAccuracy
					changed++
				}
			}
			if _, set := fmap["36.5"]; set {
				if m.RepeatedLocNonnull[i0].Altitude != src.RepeatedLocNonnull[i0].Altitude {
					m.RepeatedLocNonnull[i0].Altitude = src.RepeatedLocNonnull[i0].Altitude
					changed++
				}
			}
			if _, set := fmap["36.6"]; set {
				if m.RepeatedLocNonnull[i0].Course != src.RepeatedLocNonnull[i0].Course {
					m.RepeatedLocNonnull[i0].Course = src.RepeatedLocNonnull[i0].Course
					changed++
				}
			}
			if _, set := fmap["36.7"]; set {
				if m.RepeatedLocNonnull[i0].Speed != src.RepeatedLocNonnull[i0].Speed {
					m.RepeatedLocNonnull[i0].Speed = src.RepeatedLocNonnull[i0].Speed
					changed++
				}
			}
			if _, set := fmap["36.8"]; set && src.RepeatedLocNonnull[i0].Timestamp != nil {
				m.RepeatedLocNonnull[i0].Timestamp = &distributed_match_engine.Timestamp{}
				if _, set := fmap["36.8.1"]; set {
					if m.RepeatedLocNonnull[i0].Timestamp.Seconds != src.RepeatedLocNonnull[i0].Timestamp.Seconds {
						m.RepeatedLocNonnull[i0].Timestamp.Seconds = src.RepeatedLocNonnull[i0].Timestamp.Seconds
						changed++
					}
				}
				if _, set := fmap["36.8.2"]; set {
					if m.RepeatedLocNonnull[i0].Timestamp.Nanos != src.RepeatedLocNonnull[i0].Timestamp.Nanos {
						m.RepeatedLocNonnull[i0].Timestamp.Nanos = src.RepeatedLocNonnull[i0].Timestamp.Nanos
						changed++
					}
				}
			}
		}
	}
	if _, set := fmap["37"]; set && src.IntMap != nil {
		m.IntMap = make(map[int32]int32)
		for k0, _ := range src.IntMap {
			m.IntMap[k0] = src.IntMap[k0]
		}
	}
	if _, set := fmap["38"]; set && src.MsgMap != nil {
		m.MsgMap = make(map[int32]*NestedMessage)
		for k0, _ := range src.MsgMap {
			m.MsgMap[k0] = &NestedMessage{}
			if _, set := fmap["38.1"]; set {
				if m.MsgMap[k0].Name != src.MsgMap[k0].Name {
					m.MsgMap[k0].Name = src.MsgMap[k0].Name
					changed++
				}
			}
		}
	}
	if _, set := fmap["39"]; set {
		if m.Unused != src.Unused {
			m.Unused = src.Unused
			changed++
		}
	}
	return changed
}

// Helper method to check that enums have valid values
// NOTE: ValidateEnums checks all Fields even if some are not set
func (m *TestGen) ValidateEnums() error {
	if _, ok := OuterEnum_name[int32(m.OuterEn)]; !ok {
		return errors.New("invalid OuterEn")
	}
	if _, ok := TestGen_InnerEnum_name[int32(m.InnerEn)]; !ok {
		return errors.New("invalid InnerEn")
	}
	if err := m.IncludeMsg.ValidateEnums(); err != nil {
		return err
	}
	if err := m.IncludeMsgNonnull.ValidateEnums(); err != nil {
		return err
	}
	if err := m.IncludeFields.ValidateEnums(); err != nil {
		return err
	}
	if err := m.IncludeFieldsNonnull.ValidateEnums(); err != nil {
		return err
	}
	for _, e := range m.RepeatedMsg {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedMsgNonnull {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedFields {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	for _, e := range m.RepeatedFieldsNonnull {
		if err := e.ValidateEnums(); err != nil {
			return err
		}
	}
	return nil
}

func IgnoreTestGenFields(taglist string) cmp.Option {
	names := []string{}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(taglist, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		names = append(names, "Unused")
	}
	return cmpopts.IgnoreFields(TestGen{}, names...)
}

func (m *TestGen_InnerMessage) CopyInFields(src *TestGen_InnerMessage) int {
	changed := 0
	if m.Url != src.Url {
		m.Url = src.Url
		changed++
	}
	if m.Id != src.Id {
		m.Id = src.Id
		changed++
	}
	return changed
}

// Helper method to check that enums have valid values
func (m *TestGen_InnerMessage) ValidateEnums() error {
	return nil
}

var OuterEnumStrings = []string{
	"OUTER0",
	"OUTER1",
	"OUTER2",
	"OUTER3",
}

const (
	OuterEnumOUTER0 uint64 = 1 << 0
	OuterEnumOUTER1 uint64 = 1 << 1
	OuterEnumOUTER2 uint64 = 1 << 2
	OuterEnumOUTER3 uint64 = 1 << 3
)

var OuterEnum_CamelName = map[int32]string{
	// OUTER0 -> Outer0
	0: "Outer0",
	// OUTER1 -> Outer1
	1: "Outer1",
	// OUTER2 -> Outer2
	2: "Outer2",
	// OUTER3 -> Outer3
	3: "Outer3",
}
var OuterEnum_CamelValue = map[string]int32{
	"Outer0": 0,
	"Outer1": 1,
	"Outer2": 2,
	"Outer3": 3,
}

func (e *OuterEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := OuterEnum_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = OuterEnum_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = OuterEnum(val)
	return nil
}

func (e OuterEnum) MarshalYAML() (interface{}, error) {
	return proto.EnumName(OuterEnum_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *OuterEnum) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := OuterEnum_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = OuterEnum_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = OuterEnum(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = OuterEnum(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

var InnerEnumStrings = []string{
	"INNER0",
	"INNER1",
	"INNER2",
	"INNER3",
}

const (
	InnerEnumINNER0 uint64 = 1 << 0
	InnerEnumINNER1 uint64 = 1 << 1
	InnerEnumINNER2 uint64 = 1 << 2
	InnerEnumINNER3 uint64 = 1 << 3
)

var TestGen_InnerEnum_CamelName = map[int32]string{
	// INNER0 -> Inner0
	0: "Inner0",
	// INNER1 -> Inner1
	1: "Inner1",
	// INNER2 -> Inner2
	2: "Inner2",
	// INNER3 -> Inner3
	3: "Inner3",
}
var TestGen_InnerEnum_CamelValue = map[string]int32{
	"Inner0": 0,
	"Inner1": 1,
	"Inner2": 2,
	"Inner3": 3,
}

func (e *TestGen_InnerEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := TestGen_InnerEnum_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = TestGen_InnerEnum_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = TestGen_InnerEnum(val)
	return nil
}

func (e TestGen_InnerEnum) MarshalYAML() (interface{}, error) {
	return proto.EnumName(TestGen_InnerEnum_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *TestGen_InnerEnum) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := TestGen_InnerEnum_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = TestGen_InnerEnum_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = TestGen_InnerEnum(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = TestGen_InnerEnum(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	if from.Kind() != reflect.String {
		return data, nil
	}
	switch to {
	case reflect.TypeOf(OuterEnum(0)):
		if en, ok := OuterEnum_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	}
	return data, nil
}

func (m *NestedMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *IncludeMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.NestedMsg != nil {
		l = m.NestedMsg.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *IncludeFields) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *TestGen) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovSample(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Db != 0 {
		n += 9
	}
	if m.Fl != 0 {
		n += 5
	}
	if m.I32 != 0 {
		n += 1 + sovSample(uint64(m.I32))
	}
	if m.I64 != 0 {
		n += 1 + sovSample(uint64(m.I64))
	}
	if m.U32 != 0 {
		n += 1 + sovSample(uint64(m.U32))
	}
	if m.U64 != 0 {
		n += 1 + sovSample(uint64(m.U64))
	}
	if m.S32 != 0 {
		n += 1 + sozSample(uint64(m.S32))
	}
	if m.S64 != 0 {
		n += 1 + sozSample(uint64(m.S64))
	}
	if m.F32 != 0 {
		n += 5
	}
	if m.F64 != 0 {
		n += 9
	}
	if m.Sf32 != 0 {
		n += 5
	}
	if m.Sf64 != 0 {
		n += 9
	}
	if m.Bb {
		n += 2
	}
	if m.OuterEn != 0 {
		n += 2 + sovSample(uint64(m.OuterEn))
	}
	if m.InnerEn != 0 {
		n += 2 + sovSample(uint64(m.InnerEn))
	}
	if m.InnerMsg != nil {
		l = m.InnerMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.InnerMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeMsg != nil {
		l = m.IncludeMsg.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeMsgNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.IncludeFields != nil {
		l = m.IncludeFields.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.IncludeFieldsNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	l = m.LocNonnull.Size()
	n += 2 + l + sovSample(uint64(l))
	if len(m.RepeatedInt) > 0 {
		l = 0
		for _, e := range m.RepeatedInt {
			l += sovSample(uint64(e))
		}
		n += 2 + sovSample(uint64(l)) + l
	}
	l = len(m.Ip)
	if l > 0 {
		n += 2 + l + sovSample(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsg) > 0 {
		for _, e := range m.RepeatedMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedMsgNonnull) > 0 {
		for _, e := range m.RepeatedMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFields) > 0 {
		for _, e := range m.RepeatedFields {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedFieldsNonnull) > 0 {
		for _, e := range m.RepeatedFieldsNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsg) > 0 {
		for _, e := range m.RepeatedInnerMsg {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedInnerMsgNonnull) > 0 {
		for _, e := range m.RepeatedInnerMsgNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLoc) > 0 {
		for _, e := range m.RepeatedLoc {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.RepeatedLocNonnull) > 0 {
		for _, e := range m.RepeatedLocNonnull {
			l = e.Size()
			n += 2 + l + sovSample(uint64(l))
		}
	}
	if len(m.IntMap) > 0 {
		for k, v := range m.IntMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSample(uint64(k)) + 1 + sovSample(uint64(v))
			n += mapEntrySize + 2 + sovSample(uint64(mapEntrySize))
		}
	}
	if len(m.MsgMap) > 0 {
		for k, v := range m.MsgMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSample(uint64(l))
			}
			mapEntrySize := 1 + sovSample(uint64(k)) + l
			n += mapEntrySize + 2 + sovSample(uint64(mapEntrySize))
		}
	}
	l = len(m.Unused)
	if l > 0 {
		n += 2 + l + sovSample(uint64(l))
	}
	return n
}

func (m *TestGen_InnerMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	return n
}

func sovSample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NestedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NestedMsg == nil {
				m.NestedMsg = &NestedMessage{}
			}
			if err := m.NestedMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncludeFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncludeFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncludeFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Db = float64(math.Float64frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fl = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			m.U32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			m.U64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.S32 = v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.S64 = int64(v)
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
			}
			m.F32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.F32 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			m.F64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.F64 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf32", wireType)
			}
			m.Sf32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf32 = int32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf64", wireType)
			}
			m.Sf64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf64 = int64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bb = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterEn", wireType)
			}
			m.OuterEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterEn |= (OuterEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerEn", wireType)
			}
			m.InnerEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerEn |= (TestGen_InnerEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerMsg == nil {
				m.InnerMsg = &TestGen_InnerMessage{}
			}
			if err := m.InnerMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InnerMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeMsg == nil {
				m.IncludeMsg = &IncludeMessage{}
			}
			if err := m.IncludeMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeMsgNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncludeFields == nil {
				m.IncludeFields = &IncludeFields{}
			}
			if err := m.IncludeFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncludeFieldsNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &distributed_match_engine.Loc{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocNonnull.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedInt = append(m.RepeatedInt, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSample
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedInt = append(m.RepeatedInt, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInt", wireType)
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsg = append(m.RepeatedMsg, &IncludeMessage{})
			if err := m.RepeatedMsg[len(m.RepeatedMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedMsgNonnull = append(m.RepeatedMsgNonnull, IncludeMessage{})
			if err := m.RepeatedMsgNonnull[len(m.RepeatedMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFields = append(m.RepeatedFields, &IncludeFields{})
			if err := m.RepeatedFields[len(m.RepeatedFields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedFieldsNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedFieldsNonnull = append(m.RepeatedFieldsNonnull, IncludeFields{})
			if err := m.RepeatedFieldsNonnull[len(m.RepeatedFieldsNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsg = append(m.RepeatedInnerMsg, &TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsg[len(m.RepeatedInnerMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInnerMsgNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedInnerMsgNonnull = append(m.RepeatedInnerMsgNonnull, TestGen_InnerMessage{})
			if err := m.RepeatedInnerMsgNonnull[len(m.RepeatedInnerMsgNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLoc = append(m.RepeatedLoc, &distributed_match_engine.Loc{})
			if err := m.RepeatedLoc[len(m.RepeatedLoc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedLocNonnull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedLocNonnull = append(m.RepeatedLocNonnull, distributed_match_engine.Loc{})
			if err := m.RepeatedLocNonnull[len(m.RepeatedLocNonnull)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntMap == nil {
				m.IntMap = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IntMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgMap == nil {
				m.MsgMap = make(map[int32]*NestedMessage)
			}
			var mapkey int32
			var mapvalue *NestedMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSample
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSample
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NestedMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MsgMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unused", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unused = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestGen_InnerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sample.proto", fileDescriptorSample) }

var fileDescriptorSample = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xd1, 0x72, 0xdb, 0x44,
	0x14, 0xcd, 0x4a, 0xb1, 0x1d, 0x5f, 0xc7, 0x8e, 0xb2, 0x4d, 0x93, 0xad, 0x69, 0x53, 0xd5, 0xa5,
	0xa0, 0x61, 0x88, 0x5d, 0x6c, 0x37, 0x13, 0x92, 0x61, 0x80, 0x40, 0x60, 0x32, 0xc4, 0xc9, 0xb0,
	0x93, 0x3e, 0x07, 0x5b, 0xda, 0xa8, 0x9a, 0xca, 0x2b, 0x63, 0x49, 0x0c, 0xfd, 0x0d, 0xbe, 0x82,
	0x67, 0xbe, 0x22, 0x8f, 0x7c, 0x01, 0x03, 0x79, 0xe2, 0x89, 0x17, 0xf8, 0x00, 0x66, 0x57, 0xab,
	0x8d, 0x9c, 0x26, 0x6e, 0x5e, 0x3c, 0x67, 0xef, 0xde, 0x73, 0xf6, 0xec, 0xde, 0xbd, 0x5a, 0xc3,
	0x72, 0x3c, 0x1c, 0x4f, 0x42, 0xd6, 0x9e, 0x4c, 0xa3, 0x24, 0xc2, 0x95, 0x84, 0xc5, 0x89, 0xcf,
	0x78, 0x73, 0xcd, 0x8f, 0xfc, 0x48, 0xc6, 0x3a, 0x02, 0x65, 0xd3, 0xcd, 0xaf, 0xfc, 0x20, 0x79,
	0x95, 0x8e, 0xda, 0x6e, 0x34, 0xee, 0x8c, 0xa3, 0x51, 0x10, 0x32, 0xcf, 0x67, 0x3f, 0x77, 0xc4,
	0xef, 0x96, 0x1b, 0x46, 0xa9, 0xd7, 0xf1, 0xb6, 0xc6, 0xc3, 0xc4, 0x7d, 0xb5, 0xc5, 0xb8, 0x1f,
	0x70, 0xd6, 0xf1, 0xc6, 0x6c, 0x2b, 0x53, 0x09, 0x23, 0x57, 0x89, 0xec, 0xbc, 0x53, 0x44, 0xe6,
	0xf9, 0x8c, 0x6b, 0x90, 0x31, 0x5b, 0x4f, 0xa1, 0x7e, 0xcc, 0xe2, 0x84, 0x79, 0x03, 0x16, 0xc7,
	0x43, 0x9f, 0x61, 0x0c, 0x8b, 0x7c, 0x38, 0x66, 0x04, 0xd9, 0xc8, 0xa9, 0x52, 0x89, 0x5b, 0xaf,
	0xa1, 0x71, 0xc8, 0xdd, 0x30, 0xf5, 0xd8, 0x9c, 0x2c, 0xdc, 0x00, 0x23, 0xf0, 0x88, 0x61, 0x23,
	0x67, 0x91, 0x1a, 0x81, 0x87, 0x5f, 0x00, 0x70, 0x29, 0x7d, 0x36, 0x8e, 0x7d, 0x62, 0xda, 0xc8,
	0xa9, 0x75, 0xd7, 0xdb, 0xea, 0x34, 0xda, 0x33, 0xab, 0xd2, 0x6a, 0x96, 0x39, 0x88, 0xfd, 0xd6,
	0x1e, 0xd4, 0xd5, 0x62, 0xdf, 0x04, 0x2c, 0xf4, 0x62, 0xbc, 0x0e, 0xe5, 0x73, 0x89, 0xe4, 0x6a,
	0xcb, 0x54, 0x8d, 0xb4, 0x07, 0xa3, 0xe0, 0xf4, 0x9f, 0x15, 0xa8, 0x9c, 0xb2, 0x38, 0xf9, 0x96,
	0xf1, 0x19, 0x9e, 0xe9, 0x54, 0xe7, 0xf1, 0x84, 0x77, 0x6f, 0x24, 0x3d, 0x22, 0x6a, 0x78, 0x23,
	0x31, 0x3e, 0x0f, 0xc9, 0xa2, 0x8d, 0x1c, 0x83, 0x1a, 0xe7, 0x21, 0xb6, 0xc0, 0x0c, 0x7a, 0x5d,
	0x52, 0xb2, 0x91, 0x53, 0xa2, 0x02, 0xca, 0xc8, 0x76, 0x9f, 0x94, 0x6d, 0xe4, 0x98, 0x54, 0x40,
	0x11, 0x49, 0x7b, 0x5d, 0x52, 0xb1, 0x91, 0x53, 0xa7, 0x02, 0xca, 0xc8, 0x76, 0x9f, 0x2c, 0xc9,
	0x23, 0x11, 0x50, 0x44, 0xe2, 0x5e, 0x97, 0x54, 0x6d, 0xe4, 0xac, 0x52, 0x01, 0x65, 0x64, 0xbb,
	0x4f, 0xc0, 0x46, 0x0e, 0xa6, 0x02, 0x8a, 0xc8, 0x79, 0xaf, 0x4b, 0x6a, 0x36, 0x72, 0x2a, 0x54,
	0x40, 0x19, 0xd9, 0xee, 0x93, 0x65, 0x1b, 0x39, 0x65, 0x2a, 0xa0, 0xd8, 0x43, 0x2c, 0x92, 0xea,
	0x36, 0x72, 0x56, 0xa8, 0xc4, 0x59, 0x6c, 0xbb, 0x4f, 0x1a, 0x36, 0x72, 0x2c, 0x2a, 0xb1, 0xd8,
	0xc7, 0x68, 0x44, 0x56, 0x6c, 0xe4, 0x2c, 0x51, 0x63, 0x34, 0xc2, 0x5b, 0xb0, 0x14, 0xa5, 0x09,
	0x9b, 0x9e, 0x31, 0x4e, 0x2c, 0x1b, 0x39, 0x8d, 0x2e, 0xd6, 0x15, 0x39, 0x11, 0x13, 0x07, 0x3c,
	0x1d, 0xd3, 0x4a, 0x94, 0x41, 0xfc, 0x02, 0x96, 0x02, 0xce, 0xb3, 0xf4, 0x55, 0x99, 0xde, 0xd4,
	0xe9, 0xea, 0x98, 0xdb, 0x87, 0x22, 0x21, 0xa3, 0x05, 0x19, 0xc4, 0xbb, 0x50, 0xcd, 0x68, 0xa2,
	0xf0, 0x58, 0x16, 0xfe, 0xd1, 0xcd, 0xbc, 0xbc, 0xfe, 0xd9, 0x32, 0x83, 0xd8, 0xc7, 0x27, 0xb0,
	0xaa, 0xb9, 0x67, 0x3c, 0xe2, 0x3c, 0x0d, 0x43, 0x72, 0xef, 0x0e, 0x1a, 0xfb, 0x8b, 0x17, 0x7f,
	0x3c, 0x5e, 0xa0, 0x2b, 0xb9, 0xd2, 0x71, 0xc6, 0xc5, 0x3b, 0x50, 0x0b, 0xb2, 0xfb, 0x24, 0xed,
	0xac, 0x49, 0xa9, 0x0d, 0x2d, 0x35, 0x7b, 0xb1, 0x29, 0xa8, 0x5c, 0x61, 0x65, 0x00, 0xf7, 0x0a,
	0x4c, 0x6d, 0xe6, 0xfe, 0x5c, 0x05, 0x65, 0x63, 0xf5, 0x4a, 0x27, 0x37, 0xf2, 0x19, 0x34, 0x72,
	0x39, 0x75, 0x2f, 0xd7, 0xaf, 0xf5, 0xc4, 0xcc, 0xbd, 0xa7, 0xf5, 0x60, 0xa6, 0x0d, 0x28, 0xac,
	0xcf, 0xd2, 0xb5, 0xa1, 0x8d, 0x79, 0x32, 0xca, 0xcf, 0xda, 0x8c, 0x58, 0x6e, 0xa9, 0x03, 0x66,
	0x18, 0xb9, 0x84, 0xa8, 0xe3, 0xf5, 0x82, 0x38, 0x99, 0x06, 0xa3, 0x54, 0xf6, 0xac, 0xf8, 0xe6,
	0x9c, 0x65, 0xdf, 0x9c, 0xf6, 0x51, 0xe4, 0x52, 0x91, 0x89, 0xbf, 0x86, 0x5a, 0x18, 0xb9, 0x7a,
	0xe5, 0x07, 0x77, 0x20, 0x2a, 0x03, 0x10, 0x46, 0x6e, 0xbe, 0xec, 0x13, 0x58, 0x9e, 0xb2, 0x09,
	0x1b, 0x8a, 0xf4, 0x80, 0x27, 0xa4, 0x69, 0x9b, 0x8e, 0x49, 0x6b, 0x79, 0xec, 0x90, 0x27, 0xf2,
	0x63, 0x32, 0x21, 0xef, 0xc9, 0x86, 0x37, 0x82, 0x09, 0x5e, 0x83, 0x92, 0x68, 0xd4, 0x98, 0x3c,
	0x94, 0xbd, 0x9c, 0x0d, 0xf0, 0x6e, 0x41, 0x48, 0x14, 0xf7, 0x91, 0x6d, 0xce, 0x2b, 0xae, 0x5e,
	0x21, 0xbb, 0x68, 0x6b, 0x45, 0xae, 0xde, 0xd3, 0xe6, 0x5c, 0x0d, 0xb5, 0x1b, 0x5c, 0x50, 0xca,
	0x77, 0xf5, 0x39, 0xac, 0x68, 0x41, 0x55, 0xe0, 0xc7, 0x52, 0xeb, 0xb6, 0x02, 0x37, 0xf2, 0x74,
	0x55, 0xe1, 0x53, 0xd8, 0xb8, 0x26, 0xa0, 0x4d, 0xd9, 0xf3, 0x84, 0x94, 0xa7, 0xfb, 0xb3, 0x72,
	0xb9, 0xad, 0xef, 0x00, 0x17, 0x0e, 0x3b, 0xef, 0xca, 0x27, 0x52, 0xf0, 0x1d, 0x5d, 0x69, 0x5d,
	0x55, 0x44, 0x75, 0xe7, 0x0f, 0xd0, 0x7c, 0x5b, 0x4c, 0xbb, 0x6c, 0xdd, 0x41, 0x54, 0x99, 0xdd,
	0xb8, 0x2e, 0x9d, 0xdb, 0xfd, 0xa2, 0x50, 0x52, 0x71, 0x37, 0x9f, 0x2a, 0xcd, 0xb9, 0x77, 0x53,
	0x17, 0xf6, 0x28, 0x72, 0xf1, 0xcb, 0x42, 0x61, 0x8b, 0x97, 0xf5, 0xfd, 0x3b, 0x28, 0x5d, 0x2f,
	0xef, 0xd1, 0xd5, 0xa5, 0xed, 0x43, 0x39, 0xe0, 0xc9, 0x60, 0x38, 0x21, 0xcf, 0xa4, 0xd0, 0xc3,
	0x1b, 0xb6, 0x29, 0xa6, 0x0f, 0x78, 0x32, 0x7d, 0x43, 0x55, 0xae, 0x60, 0x8d, 0x63, 0x5f, 0xb0,
	0x3e, 0xb8, 0x85, 0x35, 0x90, 0xd3, 0x8a, 0x95, 0xe5, 0xe2, 0x67, 0x50, 0x4e, 0x79, 0x1a, 0x33,
	0x8f, 0x7c, 0x28, 0x1e, 0xa9, 0xfd, 0xfa, 0xaf, 0xff, 0x11, 0xf4, 0xcb, 0x6f, 0x0f, 0x4a, 0x3c,
	0x72, 0xc7, 0x13, 0xaa, 0x26, 0x9b, 0xcf, 0x61, 0xb9, 0x78, 0xb4, 0xf2, 0xbd, 0x99, 0x86, 0xea,
	0x51, 0x16, 0xb0, 0xf0, 0x26, 0x9b, 0xe2, 0x4d, 0x6e, 0x7e, 0x0a, 0xb5, 0x82, 0x4b, 0x41, 0x78,
	0xcd, 0xde, 0x48, 0x42, 0x89, 0x0a, 0x28, 0xfa, 0xec, 0xa7, 0x61, 0x98, 0x66, 0xaf, 0x63, 0x89,
	0x66, 0x83, 0x5d, 0x63, 0x07, 0x35, 0xbf, 0x87, 0x5a, 0xc1, 0xea, 0x0d, 0xd4, 0x8f, 0x8b, 0xd4,
	0xdb, 0x9f, 0xfa, 0x2b, 0xc9, 0xd6, 0x1e, 0x54, 0xf5, 0xeb, 0x81, 0x01, 0xca, 0x87, 0xc7, 0xc7,
	0x07, 0xf4, 0xb9, 0xb5, 0xa0, 0xf1, 0x27, 0x16, 0xd2, 0xb8, 0x6b, 0x19, 0x1a, 0xf7, 0x2c, 0x73,
	0x77, 0xf1, 0xef, 0x7f, 0x09, 0xfa, 0x68, 0x0f, 0xaa, 0xfa, 0xdd, 0x12, 0xd3, 0x27, 0x2f, 0x4f,
	0xb5, 0x84, 0xc4, 0x4a, 0x42, 0x62, 0x25, 0x21, 0x71, 0xcf, 0x32, 0xbb, 0xbb, 0xd9, 0x9f, 0x85,
	0x2f, 0x27, 0x01, 0xee, 0x40, 0x85, 0xb2, 0x1f, 0x53, 0x16, 0x27, 0xd8, 0xba, 0x5e, 0xa2, 0xe6,
	0x5b, 0x91, 0xd6, 0xc2, 0xbe, 0x75, 0xf1, 0xd7, 0xe6, 0xc2, 0xc5, 0xe5, 0x26, 0xfa, 0xfd, 0x72,
	0x13, 0xfd, 0x79, 0xb9, 0x89, 0x46, 0x65, 0xf9, 0x8f, 0xaa, 0xf7, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x07, 0xf5, 0x72, 0x78, 0xff, 0x09, 0x00, 0x00,
}
