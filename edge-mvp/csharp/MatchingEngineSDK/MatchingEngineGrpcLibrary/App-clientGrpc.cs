// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app-client.proto
// </auto-generated>
// Original file comments:
// Device service APIs
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DistributedMatchEngine {
  public static partial class Match_Engine_Api
  {
    static readonly string __ServiceName = "distributed_match_engine.Match_Engine_Api";

    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Request> __Marshaller_distributed_match_engine_Match_Engine_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Reply> __Marshaller_distributed_match_engine_Match_Engine_Reply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Reply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Loc_Verify> __Marshaller_distributed_match_engine_Match_Engine_Loc_Verify = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Loc_Verify.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Loc> __Marshaller_distributed_match_engine_Match_Engine_Loc = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Loc.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Status> __Marshaller_distributed_match_engine_Match_Engine_Status = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Status.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.DynamicLocGroupAdd> __Marshaller_distributed_match_engine_DynamicLocGroupAdd = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.DynamicLocGroupAdd.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DistributedMatchEngine.Match_Engine_Cloudlet_List> __Marshaller_distributed_match_engine_Match_Engine_Cloudlet_List = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DistributedMatchEngine.Match_Engine_Cloudlet_List.Parser.ParseFrom);

    static readonly grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Reply> __Method_FindCloudlet = new grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Reply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindCloudlet",
        __Marshaller_distributed_match_engine_Match_Engine_Request,
        __Marshaller_distributed_match_engine_Match_Engine_Reply);

    static readonly grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Loc_Verify> __Method_VerifyLocation = new grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Loc_Verify>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyLocation",
        __Marshaller_distributed_match_engine_Match_Engine_Request,
        __Marshaller_distributed_match_engine_Match_Engine_Loc_Verify);

    static readonly grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Loc> __Method_GetLocation = new grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Loc>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLocation",
        __Marshaller_distributed_match_engine_Match_Engine_Request,
        __Marshaller_distributed_match_engine_Match_Engine_Loc);

    static readonly grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Status> __Method_RegisterClient = new grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Status>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterClient",
        __Marshaller_distributed_match_engine_Match_Engine_Request,
        __Marshaller_distributed_match_engine_Match_Engine_Status);

    static readonly grpc::Method<global::DistributedMatchEngine.DynamicLocGroupAdd, global::DistributedMatchEngine.Match_Engine_Status> __Method_AddUserToGroup = new grpc::Method<global::DistributedMatchEngine.DynamicLocGroupAdd, global::DistributedMatchEngine.Match_Engine_Status>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddUserToGroup",
        __Marshaller_distributed_match_engine_DynamicLocGroupAdd,
        __Marshaller_distributed_match_engine_Match_Engine_Status);

    static readonly grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Cloudlet_List> __Method_GetCloudlets = new grpc::Method<global::DistributedMatchEngine.Match_Engine_Request, global::DistributedMatchEngine.Match_Engine_Cloudlet_List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCloudlets",
        __Marshaller_distributed_match_engine_Match_Engine_Request,
        __Marshaller_distributed_match_engine_Match_Engine_Cloudlet_List);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Match_Engine_Api</summary>
    public abstract partial class Match_Engine_ApiBase
    {
      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Reply> FindCloudlet(global::DistributedMatchEngine.Match_Engine_Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Loc_Verify> VerifyLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Loc> GetLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Status> RegisterClient(global::DistributedMatchEngine.Match_Engine_Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Status> AddUserToGroup(global::DistributedMatchEngine.DynamicLocGroupAdd request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DistributedMatchEngine.Match_Engine_Cloudlet_List> GetCloudlets(global::DistributedMatchEngine.Match_Engine_Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Match_Engine_Api</summary>
    public partial class Match_Engine_ApiClient : grpc::ClientBase<Match_Engine_ApiClient>
    {
      /// <summary>Creates a new client for Match_Engine_Api</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public Match_Engine_ApiClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Match_Engine_Api that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public Match_Engine_ApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected Match_Engine_ApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected Match_Engine_ApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::DistributedMatchEngine.Match_Engine_Reply FindCloudlet(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindCloudlet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Reply FindCloudlet(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindCloudlet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Reply> FindCloudletAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindCloudletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Reply> FindCloudletAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindCloudlet, null, options, request);
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Loc_Verify VerifyLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Loc_Verify VerifyLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Loc_Verify> VerifyLocationAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Loc_Verify> VerifyLocationAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyLocation, null, options, request);
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Loc GetLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Loc GetLocation(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Loc> GetLocationAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Loc> GetLocationAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLocation, null, options, request);
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Status RegisterClient(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Status RegisterClient(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterClient, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Status> RegisterClientAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Status> RegisterClientAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterClient, null, options, request);
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Status AddUserToGroup(global::DistributedMatchEngine.DynamicLocGroupAdd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUserToGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Status AddUserToGroup(global::DistributedMatchEngine.DynamicLocGroupAdd request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddUserToGroup, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Status> AddUserToGroupAsync(global::DistributedMatchEngine.DynamicLocGroupAdd request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUserToGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Status> AddUserToGroupAsync(global::DistributedMatchEngine.DynamicLocGroupAdd request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddUserToGroup, null, options, request);
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Cloudlet_List GetCloudlets(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCloudlets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.Match_Engine_Cloudlet_List GetCloudlets(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCloudlets, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Cloudlet_List> GetCloudletsAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCloudletsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.Match_Engine_Cloudlet_List> GetCloudletsAsync(global::DistributedMatchEngine.Match_Engine_Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCloudlets, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override Match_Engine_ApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new Match_Engine_ApiClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(Match_Engine_ApiBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_FindCloudlet, serviceImpl.FindCloudlet)
          .AddMethod(__Method_VerifyLocation, serviceImpl.VerifyLocation)
          .AddMethod(__Method_GetLocation, serviceImpl.GetLocation)
          .AddMethod(__Method_RegisterClient, serviceImpl.RegisterClient)
          .AddMethod(__Method_AddUserToGroup, serviceImpl.AddUserToGroup)
          .AddMethod(__Method_GetCloudlets, serviceImpl.GetCloudlets).Build();
    }

  }
}
#endregion
