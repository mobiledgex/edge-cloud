// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

/*
Package log is a generated protocol buffer package.

It is generated from these files:
	debug.proto

It has these top-level messages:
*/
package log

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import "github.com/mobiledgex/edge-cloud/util"
import "errors"
import "strconv"
import "encoding/json"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DebugLevel int32

const (
	DebugLevel_etcd    DebugLevel = 0
	DebugLevel_api     DebugLevel = 1
	DebugLevel_notify  DebugLevel = 2
	DebugLevel_dmedb   DebugLevel = 3
	DebugLevel_dmereq  DebugLevel = 4
	DebugLevel_locapi  DebugLevel = 5
	DebugLevel_mexos   DebugLevel = 6
	DebugLevel_metrics DebugLevel = 7
	DebugLevel_upgrade DebugLevel = 8
	DebugLevel_info    DebugLevel = 9
	DebugLevel_sampled DebugLevel = 10
)

var DebugLevel_name = map[int32]string{
	0:  "etcd",
	1:  "api",
	2:  "notify",
	3:  "dmedb",
	4:  "dmereq",
	5:  "locapi",
	6:  "mexos",
	7:  "metrics",
	8:  "upgrade",
	9:  "info",
	10: "sampled",
}
var DebugLevel_value = map[string]int32{
	"etcd":    0,
	"api":     1,
	"notify":  2,
	"dmedb":   3,
	"dmereq":  4,
	"locapi":  5,
	"mexos":   6,
	"metrics": 7,
	"upgrade": 8,
	"info":    9,
	"sampled": 10,
}

func (x DebugLevel) String() string {
	return proto.EnumName(DebugLevel_name, int32(x))
}
func (DebugLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

func init() {
	proto.RegisterEnum("log.DebugLevel", DebugLevel_name, DebugLevel_value)
}

var DebugLevelStrings = []string{
	"etcd",
	"api",
	"notify",
	"dmedb",
	"dmereq",
	"locapi",
	"mexos",
	"metrics",
	"upgrade",
	"info",
	"sampled",
}

const (
	DebugLevelEtcd    uint64 = 1 << 0
	DebugLevelApi     uint64 = 1 << 1
	DebugLevelNotify  uint64 = 1 << 2
	DebugLevelDmedb   uint64 = 1 << 3
	DebugLevelDmereq  uint64 = 1 << 4
	DebugLevelLocapi  uint64 = 1 << 5
	DebugLevelMexos   uint64 = 1 << 6
	DebugLevelMetrics uint64 = 1 << 7
	DebugLevelUpgrade uint64 = 1 << 8
	DebugLevelInfo    uint64 = 1 << 9
	DebugLevelSampled uint64 = 1 << 10
)

var DebugLevel_CamelName = map[int32]string{
	// etcd -> Etcd
	0: "Etcd",
	// api -> Api
	1: "Api",
	// notify -> Notify
	2: "Notify",
	// dmedb -> Dmedb
	3: "Dmedb",
	// dmereq -> Dmereq
	4: "Dmereq",
	// locapi -> Locapi
	5: "Locapi",
	// mexos -> Mexos
	6: "Mexos",
	// metrics -> Metrics
	7: "Metrics",
	// upgrade -> Upgrade
	8: "Upgrade",
	// info -> Info
	9: "Info",
	// sampled -> Sampled
	10: "Sampled",
}
var DebugLevel_CamelValue = map[string]int32{
	"Etcd":    0,
	"Api":     1,
	"Notify":  2,
	"Dmedb":   3,
	"Dmereq":  4,
	"Locapi":  5,
	"Mexos":   6,
	"Metrics": 7,
	"Upgrade": 8,
	"Info":    9,
	"Sampled": 10,
}

func (e *DebugLevel) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var str string
	err := unmarshal(&str)
	if err != nil {
		return err
	}
	val, ok := DebugLevel_CamelValue[util.CamelCase(str)]
	if !ok {
		// may be enum value instead of string
		ival, err := strconv.Atoi(str)
		val = int32(ival)
		if err == nil {
			_, ok = DebugLevel_CamelName[val]
		}
	}
	if !ok {
		return errors.New(fmt.Sprintf("No enum value for %s", str))
	}
	*e = DebugLevel(val)
	return nil
}

func (e DebugLevel) MarshalYAML() (interface{}, error) {
	return proto.EnumName(DebugLevel_CamelName, int32(e)), nil
}

// custom JSON encoding/decoding
func (e *DebugLevel) UnmarshalJSON(b []byte) error {
	var str string
	err := json.Unmarshal(b, &str)
	if err == nil {
		val, ok := DebugLevel_CamelValue[util.CamelCase(str)]
		if !ok {
			// may be int value instead of enum name
			ival, err := strconv.Atoi(str)
			val = int32(ival)
			if err == nil {
				_, ok = DebugLevel_CamelName[val]
			}
		}
		if !ok {
			return errors.New(fmt.Sprintf("No enum value for %s", str))
		}
		*e = DebugLevel(val)
		return nil
	}
	var val int32
	err = json.Unmarshal(b, &val)
	if err == nil {
		*e = DebugLevel(val)
		return nil
	}
	return fmt.Errorf("No enum value for %v", b)
}

type MatchOptions struct {
	// Filter will ignore 0 or nil fields on the passed in object
	Filter bool
	// IgnoreBackend will ignore fields that were marked backend in .proto
	IgnoreBackend bool
	// Sort repeated (arrays) of Key objects so matching does not
	// fail due to order.
	SortArrayedKeys bool
}

type MatchOpt func(*MatchOptions)

func MatchFilter() MatchOpt {
	return func(opts *MatchOptions) {
		opts.Filter = true
	}
}

func MatchIgnoreBackend() MatchOpt {
	return func(opts *MatchOptions) {
		opts.IgnoreBackend = true
	}
}

func MatchSortArrayedKeys() MatchOpt {
	return func(opts *MatchOptions) {
		opts.SortArrayedKeys = true
	}
}

func applyMatchOptions(opts *MatchOptions, args ...MatchOpt) {
	for _, f := range args {
		f(opts)
	}
}

// DecodeHook for use with the mapstructure package.
// Allows decoding to handle protobuf enums that are
// represented as strings.
func EnumDecodeHook(from, to reflect.Type, data interface{}) (interface{}, error) {
	if from.Kind() != reflect.String {
		return data, nil
	}
	switch to {
	case reflect.TypeOf(DebugLevel(0)):
		if en, ok := DebugLevel_CamelValue[util.CamelCase(data.(string))]; ok {
			return en, nil
		}
	}
	return data, nil
}

func init() { proto.RegisterFile("debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x1c, 0x8e, 0xcd, 0x8d, 0x83, 0x30,
	0x10, 0x85, 0xf1, 0xf2, 0x3f, 0x5c, 0x46, 0x2e, 0xc0, 0x05, 0xec, 0x61, 0x2f, 0xdb, 0xc1, 0x6a,
	0x8f, 0x69, 0x02, 0xf0, 0x80, 0x2c, 0xd9, 0xd8, 0x31, 0x26, 0x4a, 0x5a, 0x48, 0x65, 0x1c, 0x53,
	0x42, 0x42, 0x25, 0xd1, 0xe4, 0xf6, 0xde, 0xa7, 0x4f, 0x7a, 0x0f, 0x3a, 0x4d, 0xc3, 0x36, 0xff,
	0x84, 0xe8, 0x93, 0x97, 0xb9, 0xf5, 0xf3, 0xf7, 0x5d, 0x00, 0xfc, 0x33, 0x3c, 0xd1, 0x85, 0xac,
	0x6c, 0xa0, 0xa0, 0x34, 0x6a, 0xcc, 0x64, 0x0d, 0x79, 0x1f, 0x0c, 0x0a, 0x09, 0x50, 0x2d, 0x3e,
	0x99, 0xe9, 0x86, 0x5f, 0xb2, 0x85, 0x52, 0x3b, 0xd2, 0x03, 0xe6, 0x8c, 0xb5, 0xa3, 0x48, 0x67,
	0x2c, 0x38, 0x5b, 0x3f, 0xb2, 0x5e, 0xb2, 0xe2, 0xe8, 0xea, 0x57, 0xac, 0x64, 0x07, 0xb5, 0xa3,
	0x14, 0xcd, 0xb8, 0x62, 0xcd, 0x65, 0x0b, 0x73, 0xec, 0x35, 0x61, 0xc3, 0x33, 0x66, 0x99, 0x3c,
	0xb6, 0x8c, 0xd7, 0xde, 0x05, 0x4b, 0x1a, 0xe1, 0x0f, 0xf7, 0x97, 0xca, 0xf6, 0x43, 0x89, 0xc7,
	0xa1, 0xc4, 0xf3, 0x50, 0x62, 0xa8, 0x3e, 0x57, 0x7f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0xa9, 0x97, 0x13, 0xb9, 0x00, 0x00, 0x00,
}
