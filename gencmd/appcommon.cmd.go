// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appcommon.proto

package gencmd

import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import "strings"
import "strconv"
import "os"
import "text/tabwriter"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var LProtoStrings = []string{
	"LProtoUnknown",
	"LProtoTCP",
	"LProtoUDP",
	"LProtoHTTP",
}

func AppPortSlicer(in *distributed_match_engine.AppPort) []string {
	s := make([]string, 0, 5)
	s = append(s, distributed_match_engine.LProto_name[int32(in.Proto)])
	s = append(s, strconv.FormatUint(uint64(in.InternalPort), 10))
	s = append(s, strconv.FormatUint(uint64(in.PublicPort), 10))
	s = append(s, in.PublicPath)
	s = append(s, in.FQDNPrefix)
	return s
}

func AppPortHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Proto")
	s = append(s, "InternalPort")
	s = append(s, "PublicPort")
	s = append(s, "PublicPath")
	s = append(s, "FQDNPrefix")
	return s
}

func AppPortWriteOutputArray(objs []*distributed_match_engine.AppPort) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppPortHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppPortSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppPortWriteOutputOne(obj *distributed_match_engine.AppPort) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppPortHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppPortSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func init() {
}
