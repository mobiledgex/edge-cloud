// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud-resource-manager.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "encoding/json"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/yaml"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var CloudResourceManagerCmd edgeproto.CloudResourceManagerClient
var CloudResourceIn edgeproto.CloudResource
var CloudResourceFlagSet = pflag.NewFlagSet("CloudResource", pflag.ExitOnError)
var CloudResourceNoConfigFlagSet = pflag.NewFlagSet("CloudResourceNoConfig", pflag.ExitOnError)
var CloudResourceInCategory string
var EdgeCloudApplicationIn edgeproto.EdgeCloudApplication
var EdgeCloudApplicationFlagSet = pflag.NewFlagSet("EdgeCloudApplication", pflag.ExitOnError)
var EdgeCloudApplicationNoConfigFlagSet = pflag.NewFlagSet("EdgeCloudApplicationNoConfig", pflag.ExitOnError)
var CloudResourceCategoryStrings = []string{
	"AllCloudResources",
	"Kubernetes",
	"k8s",
	"Mesos",
	"AWS",
	"GCP",
	"Azure",
	"DigitalOcean",
	"PacketNet",
	"OpenStack",
	"Docker",
	"EKS",
	"AKS",
	"GKS",
}

func CloudResourceSlicer(in *edgeproto.CloudResource) []string {
	s := make([]string, 0, 6)
	s = append(s, in.Name)
	s = append(s, edgeproto.CloudResourceCategory_name[int32(in.Category)])
	if in.CloudletKey == nil {
		in.CloudletKey = &edgeproto.CloudletKey{}
	}
	s = append(s, in.CloudletKey.OperatorKey.Name)
	s = append(s, in.CloudletKey.Name)
	s = append(s, strconv.FormatBool(in.Active))
	s = append(s, strconv.FormatUint(uint64(in.Id), 10))
	s = append(s, "")
	for i, b := range in.AccessIp {
		s[len(s)-1] += fmt.Sprintf("%v", b)
		if i < 3 {
			s[len(s)-1] += "."
		}
	}
	return s
}

func CloudResourceHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "Name")
	s = append(s, "Category")
	s = append(s, "CloudletKey-OperatorKey-Name")
	s = append(s, "CloudletKey-Name")
	s = append(s, "Active")
	s = append(s, "Id")
	s = append(s, "AccessIp")
	return s
}

func EdgeCloudAppSlicer(in *edgeproto.EdgeCloudApp) []string {
	s := make([]string, 0, 14)
	s = append(s, in.Name)
	s = append(s, in.Repository)
	s = append(s, in.Image)
	s = append(s, in.Cpu)
	s = append(s, in.Memory)
	s = append(s, strconv.FormatUint(uint64(in.Limitfactor), 10))
	s = append(s, in.Exposure)
	s = append(s, strconv.FormatUint(uint64(in.Replicas), 10))
	s = append(s, in.Context)
	s = append(s, in.Namespace)
	s = append(s, in.Region)
	s = append(s, in.Flavor)
	s = append(s, in.Network)
	if in.AppInstKey == nil {
		in.AppInstKey = &edgeproto.AppInstKey{}
	}
	s = append(s, in.AppInstKey.AppKey.DeveloperKey.Name)
	s = append(s, in.AppInstKey.AppKey.Name)
	s = append(s, in.AppInstKey.AppKey.Version)
	s = append(s, in.AppInstKey.CloudletKey.OperatorKey.Name)
	s = append(s, in.AppInstKey.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.AppInstKey.Id), 10))
	return s
}

func EdgeCloudAppHeaderSlicer() []string {
	s := make([]string, 0, 14)
	s = append(s, "Name")
	s = append(s, "Repository")
	s = append(s, "Image")
	s = append(s, "Cpu")
	s = append(s, "Memory")
	s = append(s, "Limitfactor")
	s = append(s, "Exposure")
	s = append(s, "Replicas")
	s = append(s, "Context")
	s = append(s, "Namespace")
	s = append(s, "Region")
	s = append(s, "Flavor")
	s = append(s, "Network")
	s = append(s, "AppInstKey-AppKey-DeveloperKey-Name")
	s = append(s, "AppInstKey-AppKey-Name")
	s = append(s, "AppInstKey-AppKey-Version")
	s = append(s, "AppInstKey-CloudletKey-OperatorKey-Name")
	s = append(s, "AppInstKey-CloudletKey-Name")
	s = append(s, "AppInstKey-Id")
	return s
}

func EdgeCloudApplicationSlicer(in *edgeproto.EdgeCloudApplication) []string {
	s := make([]string, 0, 3)
	s = append(s, in.Manifest)
	s = append(s, in.Kind)
	if in.Apps == nil {
		in.Apps = make([]*edgeproto.EdgeCloudApp, 1)
	}
	if in.Apps[0] == nil {
		in.Apps[0] = &edgeproto.EdgeCloudApp{}
	}
	s = append(s, in.Apps[0].Name)
	s = append(s, in.Apps[0].Repository)
	s = append(s, in.Apps[0].Image)
	s = append(s, in.Apps[0].Cpu)
	s = append(s, in.Apps[0].Memory)
	s = append(s, strconv.FormatUint(uint64(in.Apps[0].Limitfactor), 10))
	s = append(s, in.Apps[0].Exposure)
	s = append(s, strconv.FormatUint(uint64(in.Apps[0].Replicas), 10))
	s = append(s, in.Apps[0].Context)
	s = append(s, in.Apps[0].Namespace)
	s = append(s, in.Apps[0].Region)
	s = append(s, in.Apps[0].Flavor)
	s = append(s, in.Apps[0].Network)
	if in.Apps[0].AppInstKey == nil {
		in.Apps[0].AppInstKey = &edgeproto.AppInstKey{}
	}
	s = append(s, in.Apps[0].AppInstKey.AppKey.DeveloperKey.Name)
	s = append(s, in.Apps[0].AppInstKey.AppKey.Name)
	s = append(s, in.Apps[0].AppInstKey.AppKey.Version)
	s = append(s, in.Apps[0].AppInstKey.CloudletKey.OperatorKey.Name)
	s = append(s, in.Apps[0].AppInstKey.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.Apps[0].AppInstKey.Id), 10))
	return s
}

func EdgeCloudApplicationHeaderSlicer() []string {
	s := make([]string, 0, 3)
	s = append(s, "Manifest")
	s = append(s, "Kind")
	s = append(s, "Apps-Name")
	s = append(s, "Apps-Repository")
	s = append(s, "Apps-Image")
	s = append(s, "Apps-Cpu")
	s = append(s, "Apps-Memory")
	s = append(s, "Apps-Limitfactor")
	s = append(s, "Apps-Exposure")
	s = append(s, "Apps-Replicas")
	s = append(s, "Apps-Context")
	s = append(s, "Apps-Namespace")
	s = append(s, "Apps-Region")
	s = append(s, "Apps-Flavor")
	s = append(s, "Apps-Network")
	s = append(s, "Apps-AppInstKey-AppKey-DeveloperKey-Name")
	s = append(s, "Apps-AppInstKey-AppKey-Name")
	s = append(s, "Apps-AppInstKey-AppKey-Version")
	s = append(s, "Apps-AppInstKey-CloudletKey-OperatorKey-Name")
	s = append(s, "Apps-AppInstKey-CloudletKey-Name")
	s = append(s, "Apps-AppInstKey-Id")
	return s
}

var ListCloudResourceCmd = &cobra.Command{
	Use: "ListCloudResource",
	Run: func(cmd *cobra.Command, args []string) {
		if CloudResourceManagerCmd == nil {
			fmt.Println("CloudResourceManager client not initialized")
			return
		}
		var err error
		err = parseCloudResourceEnums()
		if err != nil {
			fmt.Println("ListCloudResource: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := CloudResourceManagerCmd.ListCloudResource(ctx, &CloudResourceIn)
		if err != nil {
			fmt.Println("ListCloudResource failed: ", err)
			return
		}
		objs := make([]*edgeproto.CloudResource, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ListCloudResource recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(CloudResourceHeaderSlicer(), "\t"))
			for _, obj := range objs {
				fmt.Fprintln(output, strings.Join(CloudResourceSlicer(obj), "\t"))
			}
			output.Flush()
		}
	},
}

var AddCloudResourceCmd = &cobra.Command{
	Use: "AddCloudResource",
	Run: func(cmd *cobra.Command, args []string) {
		if CloudResourceManagerCmd == nil {
			fmt.Println("CloudResourceManager client not initialized")
			return
		}
		var err error
		err = parseCloudResourceEnums()
		if err != nil {
			fmt.Println("AddCloudResource: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := CloudResourceManagerCmd.AddCloudResource(ctx, &CloudResourceIn)
		cancel()
		if err != nil {
			fmt.Println("AddCloudResource failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeleteCloudResourceCmd = &cobra.Command{
	Use: "DeleteCloudResource",
	Run: func(cmd *cobra.Command, args []string) {
		if CloudResourceManagerCmd == nil {
			fmt.Println("CloudResourceManager client not initialized")
			return
		}
		var err error
		err = parseCloudResourceEnums()
		if err != nil {
			fmt.Println("DeleteCloudResource: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := CloudResourceManagerCmd.DeleteCloudResource(ctx, &CloudResourceIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteCloudResource failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeployApplicationCmd = &cobra.Command{
	Use: "DeployApplication",
	Run: func(cmd *cobra.Command, args []string) {
		if CloudResourceManagerCmd == nil {
			fmt.Println("CloudResourceManager client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := CloudResourceManagerCmd.DeployApplication(ctx, &EdgeCloudApplicationIn)
		cancel()
		if err != nil {
			fmt.Println("DeployApplication failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeleteApplicationCmd = &cobra.Command{
	Use: "DeleteApplication",
	Run: func(cmd *cobra.Command, args []string) {
		if CloudResourceManagerCmd == nil {
			fmt.Println("CloudResourceManager client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := CloudResourceManagerCmd.DeleteApplication(ctx, &EdgeCloudApplicationIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteApplication failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var CloudResourceManagerCmds = []*cobra.Command{
	ListCloudResourceCmd,
	AddCloudResourceCmd,
	DeleteCloudResourceCmd,
	DeployApplicationCmd,
	DeleteApplicationCmd,
}

func init() {
	CloudResourceFlagSet.StringVar(&CloudResourceIn.Name, "name", "", "Name")
	CloudResourceFlagSet.StringVar(&CloudResourceInCategory, "category", "", "one of [AllCloudResources Kubernetes k8s Mesos AWS GCP Azure DigitalOcean PacketNet OpenStack Docker EKS AKS GKS]")
	CloudResourceIn.CloudletKey = &edgeproto.CloudletKey{}
	CloudResourceFlagSet.StringVar(&CloudResourceIn.CloudletKey.OperatorKey.Name, "cloudletkey-operatorkey-name", "", "CloudletKey.OperatorKey.Name")
	CloudResourceFlagSet.StringVar(&CloudResourceIn.CloudletKey.Name, "cloudletkey-name", "", "CloudletKey.Name")
	CloudResourceFlagSet.BoolVar(&CloudResourceIn.Active, "active", false, "Active")
	CloudResourceFlagSet.Int32Var(&CloudResourceIn.Id, "id", 0, "Id")
	CloudResourceFlagSet.BytesHexVar(&CloudResourceIn.AccessIp, "accessip", nil, "AccessIp")
	EdgeCloudApplicationFlagSet.StringVar(&EdgeCloudApplicationIn.Manifest, "manifest", "", "Manifest")
	EdgeCloudApplicationFlagSet.StringVar(&EdgeCloudApplicationIn.Kind, "kind", "", "Kind")
	ListCloudResourceCmd.Flags().AddFlagSet(CloudResourceFlagSet)
	AddCloudResourceCmd.Flags().AddFlagSet(CloudResourceFlagSet)
	DeleteCloudResourceCmd.Flags().AddFlagSet(CloudResourceFlagSet)
	DeployApplicationCmd.Flags().AddFlagSet(EdgeCloudApplicationFlagSet)
	DeleteApplicationCmd.Flags().AddFlagSet(EdgeCloudApplicationFlagSet)
}

func CloudResourceManagerAllowNoConfig() {
	ListCloudResourceCmd.Flags().AddFlagSet(CloudResourceNoConfigFlagSet)
	AddCloudResourceCmd.Flags().AddFlagSet(CloudResourceNoConfigFlagSet)
	DeleteCloudResourceCmd.Flags().AddFlagSet(CloudResourceNoConfigFlagSet)
	DeployApplicationCmd.Flags().AddFlagSet(EdgeCloudApplicationNoConfigFlagSet)
	DeleteApplicationCmd.Flags().AddFlagSet(EdgeCloudApplicationNoConfigFlagSet)
}

func parseCloudResourceEnums() error {
	if CloudResourceInCategory != "" {
		switch CloudResourceInCategory {
		case "AllCloudResources":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(0)
		case "Kubernetes":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(200)
		case "k8s":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(200)
		case "Mesos":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(201)
		case "AWS":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(202)
		case "GCP":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(203)
		case "Azure":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(204)
		case "DigitalOcean":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(205)
		case "PacketNet":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(206)
		case "OpenStack":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(300)
		case "Docker":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(301)
		case "EKS":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(400)
		case "AKS":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(402)
		case "GKS":
			CloudResourceIn.Category = edgeproto.CloudResourceCategory(403)
		default:
			return errors.New("Invalid value for CloudResourceInCategory")
		}
	}
	return nil
}
