// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: developer.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var DeveloperApiCmd edgeproto.DeveloperApiClient
var DeveloperIn edgeproto.Developer
var DeveloperFlagSet = pflag.NewFlagSet("Developer", pflag.ExitOnError)

func DeveloperKeySlicer(in *edgeproto.DeveloperKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func DeveloperKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func DeveloperSlicer(in *edgeproto.Developer) []string {
	s := make([]string, 0, 6)
	s = append(s, in.Key.Name)
	s = append(s, in.Username)
	s = append(s, in.Passhash)
	s = append(s, in.Address)
	s = append(s, in.Email)
	return s
}

func DeveloperHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "Key-Name")
	s = append(s, "Username")
	s = append(s, "Passhash")
	s = append(s, "Address")
	s = append(s, "Email")
	return s
}

var CreateDeveloperCmd = &cobra.Command{
	Use: "CreateDeveloper",
	Run: func(cmd *cobra.Command, args []string) {
		if DeveloperApiCmd == nil {
			fmt.Println("DeveloperApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := DeveloperApiCmd.CreateDeveloper(ctx, &DeveloperIn)
		cancel()
		if err != nil {
			fmt.Println("CreateDeveloper failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var DeleteDeveloperCmd = &cobra.Command{
	Use: "DeleteDeveloper",
	Run: func(cmd *cobra.Command, args []string) {
		if DeveloperApiCmd == nil {
			fmt.Println("DeveloperApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := DeveloperApiCmd.DeleteDeveloper(ctx, &DeveloperIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteDeveloper failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var UpdateDeveloperCmd = &cobra.Command{
	Use: "UpdateDeveloper",
	Run: func(cmd *cobra.Command, args []string) {
		if DeveloperApiCmd == nil {
			fmt.Println("DeveloperApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := DeveloperApiCmd.UpdateDeveloper(ctx, &DeveloperIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateDeveloper failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var ShowDeveloperCmd = &cobra.Command{
	Use: "ShowDeveloper",
	Run: func(cmd *cobra.Command, args []string) {
		if DeveloperApiCmd == nil {
			fmt.Println("DeveloperApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		count := 0
		fmt.Fprintln(output, strings.Join(DeveloperHeaderSlicer(), "\t"))
		defer cancel()
		stream, err := DeveloperApiCmd.ShowDeveloper(ctx, &DeveloperIn)
		if err != nil {
			fmt.Println("ShowDeveloper failed: ", err)
			return
		}
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowDeveloper recv failed: ", err)
				break
			}
			fmt.Fprintln(output, strings.Join(DeveloperSlicer(obj), "\t"))
			count++
		}
		if count > 0 {
			output.Flush()
		}
	},
}

func init() {
	DeveloperFlagSet.StringVar(&DeveloperIn.Key.Name, "key-name", "", "Key.Name")
	DeveloperFlagSet.StringVar(&DeveloperIn.Username, "username", "", "Username")
	DeveloperFlagSet.StringVar(&DeveloperIn.Passhash, "passhash", "", "Passhash")
	DeveloperFlagSet.StringVar(&DeveloperIn.Address, "address", "", "Address")
	DeveloperFlagSet.StringVar(&DeveloperIn.Email, "email", "", "Email")
	CreateDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	DeleteDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	UpdateDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	ShowDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
}
