// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: developer.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var DeveloperApiCmd edgeproto.DeveloperApiClient
var DeveloperIn edgeproto.Developer
var DeveloperFlagSet = pflag.NewFlagSet("Developer", pflag.ExitOnError)
var DeveloperNoConfigFlagSet = pflag.NewFlagSet("DeveloperNoConfig", pflag.ExitOnError)

func DeveloperKeySlicer(in *edgeproto.DeveloperKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func DeveloperKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func DeveloperKeyWriteOutputArray(objs []*edgeproto.DeveloperKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(DeveloperKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(DeveloperKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func DeveloperKeyWriteOutputOne(obj *edgeproto.DeveloperKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(DeveloperKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(DeveloperKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func DeveloperSlicer(in *edgeproto.Developer) []string {
	s := make([]string, 0, 6)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Name)
	s = append(s, in.Username)
	s = append(s, in.Passhash)
	s = append(s, in.Address)
	s = append(s, in.Email)
	return s
}

func DeveloperHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "Fields")
	s = append(s, "Key-Name")
	s = append(s, "Username")
	s = append(s, "Passhash")
	s = append(s, "Address")
	s = append(s, "Email")
	return s
}

func DeveloperWriteOutputArray(objs []*edgeproto.Developer) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(DeveloperHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(DeveloperSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func DeveloperWriteOutputOne(obj *edgeproto.Developer) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(DeveloperHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(DeveloperSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}

var CreateDeveloperCmd = &cobra.Command{
	Use: "CreateDeveloper",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return CreateDeveloper(&DeveloperIn)
	},
}

func CreateDeveloper(in *edgeproto.Developer) error {
	if DeveloperApiCmd == nil {
		return fmt.Errorf("DeveloperApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DeveloperApiCmd.CreateDeveloper(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateDeveloper failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func CreateDevelopers(data []edgeproto.Developer, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateDeveloper %v\n", data[ii])
		myerr := CreateDeveloper(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteDeveloperCmd = &cobra.Command{
	Use: "DeleteDeveloper",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return DeleteDeveloper(&DeveloperIn)
	},
}

func DeleteDeveloper(in *edgeproto.Developer) error {
	if DeveloperApiCmd == nil {
		return fmt.Errorf("DeveloperApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DeveloperApiCmd.DeleteDeveloper(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteDeveloper failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func DeleteDevelopers(data []edgeproto.Developer, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteDeveloper %v\n", data[ii])
		myerr := DeleteDeveloper(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateDeveloperCmd = &cobra.Command{
	Use: "UpdateDeveloper",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		DeveloperSetFields()
		return UpdateDeveloper(&DeveloperIn)
	},
}

func UpdateDeveloper(in *edgeproto.Developer) error {
	if DeveloperApiCmd == nil {
		return fmt.Errorf("DeveloperApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DeveloperApiCmd.UpdateDeveloper(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateDeveloper failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func UpdateDevelopers(data []edgeproto.Developer, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateDeveloper %v\n", data[ii])
		myerr := UpdateDeveloper(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowDeveloperCmd = &cobra.Command{
	Use: "ShowDeveloper",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return ShowDeveloper(&DeveloperIn)
	},
}

func ShowDeveloper(in *edgeproto.Developer) error {
	if DeveloperApiCmd == nil {
		return fmt.Errorf("DeveloperApi client not initialized")
	}
	ctx := context.Background()
	stream, err := DeveloperApiCmd.ShowDeveloper(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowDeveloper failed: %s", errstr)
	}
	objs := make([]*edgeproto.Developer, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowDeveloper recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	DeveloperWriteOutputArray(objs)
	return nil
}

func ShowDevelopers(data []edgeproto.Developer, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowDeveloper %v\n", data[ii])
		myerr := ShowDeveloper(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeveloperApiCmds = []*cobra.Command{
	CreateDeveloperCmd,
	DeleteDeveloperCmd,
	UpdateDeveloperCmd,
	ShowDeveloperCmd,
}

func init() {
	DeveloperFlagSet.StringVar(&DeveloperIn.Key.Name, "key-name", "", "Key.Name")
	DeveloperFlagSet.StringVar(&DeveloperIn.Username, "username", "", "Username")
	DeveloperFlagSet.StringVar(&DeveloperIn.Passhash, "passhash", "", "Passhash")
	DeveloperFlagSet.StringVar(&DeveloperIn.Address, "address", "", "Address")
	DeveloperFlagSet.StringVar(&DeveloperIn.Email, "email", "", "Email")
	CreateDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	DeleteDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	UpdateDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
	ShowDeveloperCmd.Flags().AddFlagSet(DeveloperFlagSet)
}

func DeveloperApiAllowNoConfig() {
	CreateDeveloperCmd.Flags().AddFlagSet(DeveloperNoConfigFlagSet)
	DeleteDeveloperCmd.Flags().AddFlagSet(DeveloperNoConfigFlagSet)
	UpdateDeveloperCmd.Flags().AddFlagSet(DeveloperNoConfigFlagSet)
	ShowDeveloperCmd.Flags().AddFlagSet(DeveloperNoConfigFlagSet)
}

func DeveloperSetFields() {
	DeveloperIn.Fields = make([]string, 0)
	if DeveloperFlagSet.Lookup("key-name").Changed {
		DeveloperIn.Fields = append(DeveloperIn.Fields, "2.2")
	}
	if DeveloperFlagSet.Lookup("username").Changed {
		DeveloperIn.Fields = append(DeveloperIn.Fields, "3")
	}
	if DeveloperFlagSet.Lookup("passhash").Changed {
		DeveloperIn.Fields = append(DeveloperIn.Fields, "4")
	}
	if DeveloperFlagSet.Lookup("address").Changed {
		DeveloperIn.Fields = append(DeveloperIn.Fields, "5")
	}
	if DeveloperFlagSet.Lookup("email").Changed {
		DeveloperIn.Fields = append(DeveloperIn.Fields, "6")
	}
}
