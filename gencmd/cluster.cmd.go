// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ClusterApiCmd edgeproto.ClusterApiClient
var ClusterIn edgeproto.Cluster
var ClusterFlagSet = pflag.NewFlagSet("Cluster", pflag.ExitOnError)
var ClusterNoConfigFlagSet = pflag.NewFlagSet("ClusterNoConfig", pflag.ExitOnError)

func ClusterKeySlicer(in *edgeproto.ClusterKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func ClusterKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func ClusterKeyWriteOutputArray(objs []*edgeproto.ClusterKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ClusterKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ClusterKeyWriteOutputOne(obj *edgeproto.ClusterKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ClusterKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ClusterSlicer(in *edgeproto.Cluster) []string {
	s := make([]string, 0, 4)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Name)
	s = append(s, in.DefaultFlavor.Name)
	s = append(s, strconv.FormatBool(in.Auto))
	return s
}

func ClusterHeaderSlicer() []string {
	s := make([]string, 0, 4)
	s = append(s, "Fields")
	s = append(s, "Key-Name")
	s = append(s, "DefaultFlavor-Name")
	s = append(s, "Auto")
	return s
}

func ClusterWriteOutputArray(objs []*edgeproto.Cluster) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ClusterSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ClusterWriteOutputOne(obj *edgeproto.Cluster) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ClusterSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}

var CreateClusterCmd = &cobra.Command{
	Use: "CreateCluster",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterApiCmd == nil {
			fmt.Println("ClusterApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		obj, err := ClusterApiCmd.CreateCluster(ctx, &ClusterIn)
		cancel()
		if err != nil {
			fmt.Println("CreateCluster failed: ", err)
			return
		}
		ResultWriteOutputOne(obj)
	},
}

var DeleteClusterCmd = &cobra.Command{
	Use: "DeleteCluster",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterApiCmd == nil {
			fmt.Println("ClusterApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		obj, err := ClusterApiCmd.DeleteCluster(ctx, &ClusterIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteCluster failed: ", err)
			return
		}
		ResultWriteOutputOne(obj)
	},
}

var UpdateClusterCmd = &cobra.Command{
	Use: "UpdateCluster",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterApiCmd == nil {
			fmt.Println("ClusterApi client not initialized")
			return
		}
		var err error
		ClusterSetFields()
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		obj, err := ClusterApiCmd.UpdateCluster(ctx, &ClusterIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateCluster failed: ", err)
			return
		}
		ResultWriteOutputOne(obj)
	},
}

var ShowClusterCmd = &cobra.Command{
	Use: "ShowCluster",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterApiCmd == nil {
			fmt.Println("ClusterApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := ClusterApiCmd.ShowCluster(ctx, &ClusterIn)
		if err != nil {
			fmt.Println("ShowCluster failed: ", err)
			return
		}
		objs := make([]*edgeproto.Cluster, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowCluster recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		ClusterWriteOutputArray(objs)
	},
}

var ClusterApiCmds = []*cobra.Command{
	CreateClusterCmd,
	DeleteClusterCmd,
	UpdateClusterCmd,
	ShowClusterCmd,
}

func init() {
	ClusterFlagSet.StringVar(&ClusterIn.Key.Name, "key-name", "", "Key.Name")
	ClusterFlagSet.StringVar(&ClusterIn.DefaultFlavor.Name, "defaultflavor-name", "", "DefaultFlavor.Name")
	ClusterNoConfigFlagSet.BoolVar(&ClusterIn.Auto, "auto", false, "Auto")
	CreateClusterCmd.Flags().AddFlagSet(ClusterFlagSet)
	DeleteClusterCmd.Flags().AddFlagSet(ClusterFlagSet)
	UpdateClusterCmd.Flags().AddFlagSet(ClusterFlagSet)
	ShowClusterCmd.Flags().AddFlagSet(ClusterFlagSet)
}

func ClusterApiAllowNoConfig() {
	CreateClusterCmd.Flags().AddFlagSet(ClusterNoConfigFlagSet)
	DeleteClusterCmd.Flags().AddFlagSet(ClusterNoConfigFlagSet)
	UpdateClusterCmd.Flags().AddFlagSet(ClusterNoConfigFlagSet)
	ShowClusterCmd.Flags().AddFlagSet(ClusterNoConfigFlagSet)
}

func ClusterSetFields() {
	ClusterIn.Fields = make([]string, 0)
	if ClusterFlagSet.Lookup("key-name").Changed {
		ClusterIn.Fields = append(ClusterIn.Fields, "2.1")
	}
	if ClusterFlagSet.Lookup("defaultflavor-name").Changed {
		ClusterIn.Fields = append(ClusterIn.Fields, "3.1")
	}
	if ClusterNoConfigFlagSet.Lookup("auto").Changed {
		ClusterIn.Fields = append(ClusterIn.Fields, "5")
	}
}
