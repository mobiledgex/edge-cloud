// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ExecApiCmd edgeproto.ExecApiClient
var ExecRequestIn edgeproto.ExecRequest
var ExecRequestFlagSet = pflag.NewFlagSet("ExecRequest", pflag.ExitOnError)
var ExecRequestNoConfigFlagSet = pflag.NewFlagSet("ExecRequestNoConfig", pflag.ExitOnError)

func ExecRequestSlicer(in *edgeproto.ExecRequest) []string {
	s := make([]string, 0, 6)
	if in.AppInstKey == nil {
		in.AppInstKey = &edgeproto.AppInstKey{}
	}
	s = append(s, in.AppInstKey.AppKey.DeveloperKey.Name)
	s = append(s, in.AppInstKey.AppKey.Name)
	s = append(s, in.AppInstKey.AppKey.Version)
	s = append(s, in.AppInstKey.CloudletKey.OperatorKey.Name)
	s = append(s, in.AppInstKey.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.AppInstKey.Id), 10))
	s = append(s, in.Command)
	s = append(s, in.ContainerId)
	s = append(s, in.Offer)
	s = append(s, in.Answer)
	s = append(s, in.Err)
	return s
}

func ExecRequestHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "AppInstKey-AppKey-DeveloperKey-Name")
	s = append(s, "AppInstKey-AppKey-Name")
	s = append(s, "AppInstKey-AppKey-Version")
	s = append(s, "AppInstKey-CloudletKey-OperatorKey-Name")
	s = append(s, "AppInstKey-CloudletKey-Name")
	s = append(s, "AppInstKey-Id")
	s = append(s, "Command")
	s = append(s, "ContainerId")
	s = append(s, "Offer")
	s = append(s, "Answer")
	s = append(s, "Err")
	return s
}

func ExecRequestWriteOutputArray(objs []*edgeproto.ExecRequest) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ExecRequestHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ExecRequestSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ExecRequestWriteOutputOne(obj *edgeproto.ExecRequest) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ExecRequestHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ExecRequestSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ExecRequestHideTags(in *edgeproto.ExecRequest) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.Offer = ""
	}
	if _, found := tags["nocmp"]; found {
		in.Answer = ""
	}
}

var RunCommandCmd = &cobra.Command{
	Use: "RunCommand",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return RunCommand(&ExecRequestIn)
	},
}

func RunCommand(in *edgeproto.ExecRequest) error {
	if ExecApiCmd == nil {
		return fmt.Errorf("ExecApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ExecApiCmd.RunCommand(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RunCommand failed: %s", errstr)
	}
	ExecRequestHideTags(obj)
	ExecRequestWriteOutputOne(obj)
	return nil
}

func RunCommands(data []edgeproto.ExecRequest, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RunCommand %v\n", data[ii])
		myerr := RunCommand(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var SendLocalRequestCmd = &cobra.Command{
	Use: "SendLocalRequest",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return SendLocalRequest(&ExecRequestIn)
	},
}

func SendLocalRequest(in *edgeproto.ExecRequest) error {
	if ExecApiCmd == nil {
		return fmt.Errorf("ExecApi client not initialized")
	}
	ctx := context.Background()
	obj, err := ExecApiCmd.SendLocalRequest(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("SendLocalRequest failed: %s", errstr)
	}
	ExecRequestHideTags(obj)
	ExecRequestWriteOutputOne(obj)
	return nil
}

func SendLocalRequests(data []edgeproto.ExecRequest, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("SendLocalRequest %v\n", data[ii])
		myerr := SendLocalRequest(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ExecApiCmds = []*cobra.Command{
	RunCommandCmd,
	SendLocalRequestCmd,
}

func init() {
	ExecRequestIn.AppInstKey = &edgeproto.AppInstKey{}
	ExecRequestFlagSet.StringVar(&ExecRequestIn.AppInstKey.AppKey.DeveloperKey.Name, "appinstkey-appkey-developerkey-name", "", "AppInstKey.AppKey.DeveloperKey.Name")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.AppInstKey.AppKey.Name, "appinstkey-appkey-name", "", "AppInstKey.AppKey.Name")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.AppInstKey.AppKey.Version, "appinstkey-appkey-version", "", "AppInstKey.AppKey.Version")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.AppInstKey.CloudletKey.OperatorKey.Name, "appinstkey-cloudletkey-operatorkey-name", "", "AppInstKey.CloudletKey.OperatorKey.Name")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.AppInstKey.CloudletKey.Name, "appinstkey-cloudletkey-name", "", "AppInstKey.CloudletKey.Name")
	ExecRequestFlagSet.Uint64Var(&ExecRequestIn.AppInstKey.Id, "appinstkey-id", 0, "AppInstKey.Id")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.Command, "command", "", "Command")
	ExecRequestFlagSet.StringVar(&ExecRequestIn.ContainerId, "containerid", "", "ContainerId")
	ExecRequestNoConfigFlagSet.StringVar(&ExecRequestIn.Offer, "offer", "", "Offer")
	ExecRequestNoConfigFlagSet.StringVar(&ExecRequestIn.Answer, "answer", "", "Answer")
	ExecRequestNoConfigFlagSet.StringVar(&ExecRequestIn.Err, "err", "", "Err")
	RunCommandCmd.Flags().AddFlagSet(ExecRequestFlagSet)
	SendLocalRequestCmd.Flags().AddFlagSet(ExecRequestFlagSet)
}

func ExecApiAllowNoConfig() {
	RunCommandCmd.Flags().AddFlagSet(ExecRequestNoConfigFlagSet)
	SendLocalRequestCmd.Flags().AddFlagSet(ExecRequestNoConfigFlagSet)
}
