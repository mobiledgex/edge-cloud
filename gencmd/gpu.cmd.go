// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gpu.proto

package gencmd

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var GPUDriverApiCmd edgeproto.GPUDriverApiClient

var CreateGPUDriverCmd = &cli.Command{
	Use:          "CreateGPUDriver",
	RequiredArgs: strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateGPUDriver,
}

func runCreateGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateGPUDriver(c, obj)
}

func CreateGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.CreateGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("CreateGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateGPUDriver %v\n", data[ii])
		myerr := CreateGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteGPUDriverCmd = &cli.Command{
	Use:          "DeleteGPUDriver",
	RequiredArgs: strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteGPUDriver,
}

func runDeleteGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteGPUDriver(c, obj)
}

func DeleteGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.DeleteGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("DeleteGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteGPUDriver %v\n", data[ii])
		myerr := DeleteGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateGPUDriverCmd = &cli.Command{
	Use:          "UpdateGPUDriver",
	RequiredArgs: strings.Join(UpdateGPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(UpdateGPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateGPUDriver,
}

func runUpdateGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData, cli.JsonNamespace)
	return UpdateGPUDriver(c, obj)
}

func UpdateGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.UpdateGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("UpdateGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateGPUDriver %v\n", data[ii])
		myerr := UpdateGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowGPUDriverCmd = &cli.Command{
	Use:          "ShowGPUDriver",
	OptionalArgs: strings.Join(append(GPUDriverRequiredArgs, GPUDriverOptionalArgs...), " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.GPUDriver{},
	Run:          runShowGPUDriver,
}

func runShowGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowGPUDriver(c, obj)
}

func ShowGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.ShowGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.GPUDriver, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowGPUDriver %v\n", data[ii])
		myerr := ShowGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddGPUDriverBuildCmd = &cli.Command{
	Use:          "AddGPUDriverBuild",
	RequiredArgs: strings.Join(AddGPUDriverBuildRequiredArgs, " "),
	OptionalArgs: strings.Join(AddGPUDriverBuildOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddGPUDriverBuild,
}

func runAddGPUDriverBuild(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddGPUDriverBuild(c, obj)
}

func AddGPUDriverBuild(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.AddGPUDriverBuild(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddGPUDriverBuild failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("AddGPUDriverBuild recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddGPUDriverBuilds(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddGPUDriverBuild %v\n", data[ii])
		myerr := AddGPUDriverBuild(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveGPUDriverBuildCmd = &cli.Command{
	Use:          "RemoveGPUDriverBuild",
	RequiredArgs: strings.Join(RemoveGPUDriverBuildRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveGPUDriverBuildOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveGPUDriverBuild,
}

func runRemoveGPUDriverBuild(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveGPUDriverBuild(c, obj)
}

func RemoveGPUDriverBuild(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.RemoveGPUDriverBuild(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveGPUDriverBuild failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("RemoveGPUDriverBuild recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveGPUDriverBuilds(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveGPUDriverBuild %v\n", data[ii])
		myerr := RemoveGPUDriverBuild(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetGPUDriverBuildURLCmd = &cli.Command{
	Use:          "GetGPUDriverBuildURL",
	RequiredArgs: strings.Join(GetGPUDriverBuildURLRequiredArgs, " "),
	OptionalArgs: strings.Join(GetGPUDriverBuildURLOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.GPUDriverBuildURL{},
	Run:          runGetGPUDriverBuildURL,
}

func runGetGPUDriverBuildURL(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetGPUDriverBuildURL(c, obj)
}

func GetGPUDriverBuildURL(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GPUDriverApiCmd.GetGPUDriverBuildURL(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetGPUDriverBuildURL failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetGPUDriverBuildURLs(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetGPUDriverBuildURL %v\n", data[ii])
		myerr := GetGPUDriverBuildURL(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GPUDriverApiCmds = []*cobra.Command{
	CreateGPUDriverCmd.GenCmd(),
	DeleteGPUDriverCmd.GenCmd(),
	UpdateGPUDriverCmd.GenCmd(),
	ShowGPUDriverCmd.GenCmd(),
	AddGPUDriverBuildCmd.GenCmd(),
	RemoveGPUDriverBuildCmd.GenCmd(),
	GetGPUDriverBuildURLCmd.GenCmd(),
}

var GPUDriverKeyRequiredArgs = []string{}
var GPUDriverKeyOptionalArgs = []string{
	"name",
	"organization",
}
var GPUDriverKeyAliasArgs = []string{}
var GPUDriverKeyComments = map[string]string{
	"name":         "Name of the driver",
	"organization": "Organization to which the driver belongs to",
}
var GPUDriverKeySpecialArgs = map[string]string{}
var GPUDriverBuildRequiredArgs = []string{}
var GPUDriverBuildOptionalArgs = []string{
	"name",
	"driverpath",
	"driverpathcreds",
	"operatingsystem",
	"kernelversion",
	"hypervisorinfo",
	"md5sum",
}
var GPUDriverBuildAliasArgs = []string{}
var GPUDriverBuildComments = map[string]string{
	"name":            "Unique identifier key",
	"driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"driverpathcreds": "Optional credentials (username:password) to access driver path",
	"operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"kernelversion":   "Kernel Version supported by GPU driver build",
	"hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"md5sum":          "Driver package md5sum to ensure package is not corrupted",
}
var GPUDriverBuildSpecialArgs = map[string]string{}
var GPUDriverBuildMemberRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
}
var GPUDriverBuildMemberOptionalArgs = []string{
	"build.name",
	"build.driverpath",
	"build.driverpathcreds",
	"build.operatingsystem",
	"build.kernelversion",
	"build.hypervisorinfo",
	"build.md5sum",
	"ignorestate",
}
var GPUDriverBuildMemberAliasArgs = []string{
	"gpudrivername=key.name",
	"gpudriver-org=key.organization",
}
var GPUDriverBuildMemberComments = map[string]string{
	"gpudrivername":         "Name of the driver",
	"gpudriver-org":         "Organization to which the driver belongs to",
	"build.name":            "Unique identifier key",
	"build.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"build.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"build.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"build.kernelversion":   "Kernel Version supported by GPU driver build",
	"build.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"build.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"ignorestate":           "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverBuildMemberSpecialArgs = map[string]string{}
var GPUDriverBuildURLRequiredArgs = []string{}
var GPUDriverBuildURLOptionalArgs = []string{
	"buildurlpath",
	"validity",
}
var GPUDriverBuildURLAliasArgs = []string{}
var GPUDriverBuildURLComments = map[string]string{
	"buildurlpath": "Build URL path",
	"validity":     "Build URL path validity",
}
var GPUDriverBuildURLSpecialArgs = map[string]string{}
var GPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var GPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"type",
	"builds:#.name",
	"builds:#.driverpath",
	"builds:#.driverpathcreds",
	"builds:#.operatingsystem",
	"builds:#.kernelversion",
	"builds:#.hypervisorinfo",
	"builds:#.md5sum",
	"licenseconfig",
	"licenseconfigmd5sum",
	"properties",
	"ignorestate",
}
var GPUDriverAliasArgs = []string{
	"gpudrivername=key.name",
	"gpudriver-org=key.organization",
}
var GPUDriverComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"gpudrivername":            "Name of the driver",
	"gpudriver-org":            "Organization to which the driver belongs to",
	"type":                     "Type of GPU hardware, one of GpuTypeNone, GpuTypePassthrough, GpuTypeVgpu",
	"builds:#.name":            "Unique identifier key",
	"builds:#.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"builds:#.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"builds:#.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"builds:#.kernelversion":   "Kernel Version supported by GPU driver build",
	"builds:#.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"builds:#.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"licenseconfig":            "License config to setup license (will be stored in secure storage)",
	"licenseconfigmd5sum":      "License config md5sum, to ensure integrity of license config",
	"properties":               "Additional properties associated with GPU driver build For example: license server information, driver release date, etc",
	"state":                    "State to figure out if any action on the GPU driver is in-progress",
	"ignorestate":              "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverSpecialArgs = map[string]string{
	"fields":     "StringArray",
	"properties": "StringToString",
}
var GPUConfigRequiredArgs = []string{}
var GPUConfigOptionalArgs = []string{
	"driver.name",
	"driver.organization",
	"gputype",
	"properties",
}
var GPUConfigAliasArgs = []string{}
var GPUConfigComments = map[string]string{
	"driver.name":         "Name of the driver",
	"driver.organization": "Organization to which the driver belongs to",
	"gputype":             "Type of GPU hardware supported by the Cloudlet, one of GpuTypeNone, GpuTypePassthrough, GpuTypeVgpu",
	"properties":          "Properties to identify specifics of GPU",
}
var GPUConfigSpecialArgs = map[string]string{
	"properties": "StringToString",
}
var UpdateGPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var UpdateGPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"type",
	"licenseconfig",
	"licenseconfigmd5sum",
	"properties",
	"ignorestate",
}
var AddGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
	"build.driverpath",
	"build.operatingsystem",
	"build.md5sum",
}
var AddGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.kernelversion",
	"build.hypervisorinfo",
	"ignorestate",
}
var RemoveGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var RemoveGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.md5sum",
	"ignorestate",
}
var GetGPUDriverBuildURLRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var GetGPUDriverBuildURLOptionalArgs = []string{
	"build.driverpathcreds",
	"build.md5sum",
	"ignorestate",
}
