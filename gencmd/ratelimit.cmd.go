// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package gencmd

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var RateLimitSettingsApiCmd edgeproto.RateLimitSettingsApiClient

var CreateRateLimitSettingsCmd = &cli.Command{
	Use:          "CreateRateLimitSettings",
	RequiredArgs: strings.Join(RateLimitSettingsRequiredArgs, " "),
	OptionalArgs: strings.Join(RateLimitSettingsOptionalArgs, " "),
	AliasArgs:    strings.Join(RateLimitSettingsAliasArgs, " "),
	SpecialArgs:  &RateLimitSettingsSpecialArgs,
	Comments:     RateLimitSettingsComments,
	ReqData:      &edgeproto.RateLimitSettings{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateRateLimitSettings,
}

func runCreateRateLimitSettings(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.RateLimitSettings)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateRateLimitSettings(c, obj)
}

func CreateRateLimitSettings(c *cli.Command, in *edgeproto.RateLimitSettings) error {
	if RateLimitSettingsApiCmd == nil {
		return fmt.Errorf("RateLimitSettingsApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RateLimitSettingsApiCmd.CreateRateLimitSettings(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateRateLimitSettings failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateRateLimitSettingss(c *cli.Command, data []edgeproto.RateLimitSettings, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateRateLimitSettings %v\n", data[ii])
		myerr := CreateRateLimitSettings(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateRateLimitSettingsCmd = &cli.Command{
	Use:          "UpdateRateLimitSettings",
	RequiredArgs: strings.Join(RateLimitSettingsRequiredArgs, " "),
	OptionalArgs: strings.Join(RateLimitSettingsOptionalArgs, " "),
	AliasArgs:    strings.Join(RateLimitSettingsAliasArgs, " "),
	SpecialArgs:  &RateLimitSettingsSpecialArgs,
	Comments:     RateLimitSettingsComments,
	ReqData:      &edgeproto.RateLimitSettings{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateRateLimitSettings,
}

func runUpdateRateLimitSettings(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.RateLimitSettings)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData, cli.JsonNamespace)
	return UpdateRateLimitSettings(c, obj)
}

func UpdateRateLimitSettings(c *cli.Command, in *edgeproto.RateLimitSettings) error {
	if RateLimitSettingsApiCmd == nil {
		return fmt.Errorf("RateLimitSettingsApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RateLimitSettingsApiCmd.UpdateRateLimitSettings(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateRateLimitSettings failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateRateLimitSettingss(c *cli.Command, data []edgeproto.RateLimitSettings, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateRateLimitSettings %v\n", data[ii])
		myerr := UpdateRateLimitSettings(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteRateLimitSettingsCmd = &cli.Command{
	Use:          "DeleteRateLimitSettings",
	RequiredArgs: strings.Join(RateLimitSettingsRequiredArgs, " "),
	OptionalArgs: strings.Join(RateLimitSettingsOptionalArgs, " "),
	AliasArgs:    strings.Join(RateLimitSettingsAliasArgs, " "),
	SpecialArgs:  &RateLimitSettingsSpecialArgs,
	Comments:     RateLimitSettingsComments,
	ReqData:      &edgeproto.RateLimitSettings{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteRateLimitSettings,
}

func runDeleteRateLimitSettings(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.RateLimitSettings)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteRateLimitSettings(c, obj)
}

func DeleteRateLimitSettings(c *cli.Command, in *edgeproto.RateLimitSettings) error {
	if RateLimitSettingsApiCmd == nil {
		return fmt.Errorf("RateLimitSettingsApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RateLimitSettingsApiCmd.DeleteRateLimitSettings(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteRateLimitSettings failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteRateLimitSettingss(c *cli.Command, data []edgeproto.RateLimitSettings, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteRateLimitSettings %v\n", data[ii])
		myerr := DeleteRateLimitSettings(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ResetRateLimitSettingsCmd = &cli.Command{
	Use:          "ResetRateLimitSettings",
	RequiredArgs: strings.Join(RateLimitSettingsRequiredArgs, " "),
	OptionalArgs: strings.Join(RateLimitSettingsOptionalArgs, " "),
	AliasArgs:    strings.Join(RateLimitSettingsAliasArgs, " "),
	SpecialArgs:  &RateLimitSettingsSpecialArgs,
	Comments:     RateLimitSettingsComments,
	ReqData:      &edgeproto.RateLimitSettings{},
	ReplyData:    &edgeproto.Result{},
	Run:          runResetRateLimitSettings,
}

func runResetRateLimitSettings(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.RateLimitSettings)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ResetRateLimitSettings(c, obj)
}

func ResetRateLimitSettings(c *cli.Command, in *edgeproto.RateLimitSettings) error {
	if RateLimitSettingsApiCmd == nil {
		return fmt.Errorf("RateLimitSettingsApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RateLimitSettingsApiCmd.ResetRateLimitSettings(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ResetRateLimitSettings failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ResetRateLimitSettingss(c *cli.Command, data []edgeproto.RateLimitSettings, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ResetRateLimitSettings %v\n", data[ii])
		myerr := ResetRateLimitSettings(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowRateLimitSettingsCmd = &cli.Command{
	Use:          "ShowRateLimitSettings",
	OptionalArgs: strings.Join(append(RateLimitSettingsRequiredArgs, RateLimitSettingsOptionalArgs...), " "),
	AliasArgs:    strings.Join(RateLimitSettingsAliasArgs, " "),
	SpecialArgs:  &RateLimitSettingsSpecialArgs,
	Comments:     RateLimitSettingsComments,
	ReqData:      &edgeproto.RateLimitSettings{},
	ReplyData:    &edgeproto.RateLimitSettings{},
	Run:          runShowRateLimitSettings,
}

func runShowRateLimitSettings(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.RateLimitSettings)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowRateLimitSettings(c, obj)
}

func ShowRateLimitSettings(c *cli.Command, in *edgeproto.RateLimitSettings) error {
	if RateLimitSettingsApiCmd == nil {
		return fmt.Errorf("RateLimitSettingsApi client not initialized")
	}
	ctx := context.Background()
	stream, err := RateLimitSettingsApiCmd.ShowRateLimitSettings(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowRateLimitSettings failed: %s", errstr)
	}

	objs := make([]*edgeproto.RateLimitSettings, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowRateLimitSettings recv failed: %s", errstr)
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowRateLimitSettingss(c *cli.Command, data []edgeproto.RateLimitSettings, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowRateLimitSettings %v\n", data[ii])
		myerr := ShowRateLimitSettings(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RateLimitSettingsApiCmds = []*cobra.Command{
	CreateRateLimitSettingsCmd.GenCmd(),
	UpdateRateLimitSettingsCmd.GenCmd(),
	DeleteRateLimitSettingsCmd.GenCmd(),
	ResetRateLimitSettingsCmd.GenCmd(),
	ShowRateLimitSettingsCmd.GenCmd(),
}

var RateLimitSettingsKeyRequiredArgs = []string{}
var RateLimitSettingsKeyOptionalArgs = []string{
	"apiendpointtype",
	"ratelimittarget",
	"apiname",
}
var RateLimitSettingsKeyAliasArgs = []string{}
var RateLimitSettingsKeyComments = map[string]string{
	"apiendpointtype": "API Endpoint type, one of UnknownApiEndpointType, Controller, Dme",
	"ratelimittarget": "Target to rate limit, one of UnknownTarget, AllRequests, PerIp, PerUser",
	"apiname":         "Name of API (eg. CreateApp or RegisterClient) (Leave empty if not a specific API)",
}
var RateLimitSettingsKeySpecialArgs = map[string]string{}
var FlowSettingsRequiredArgs = []string{}
var FlowSettingsOptionalArgs = []string{
	"flowalgorithm",
	"reqspersecond",
	"burstsize",
}
var FlowSettingsAliasArgs = []string{}
var FlowSettingsComments = map[string]string{
	"flowalgorithm": "Flow Rate Limit algorithm, one of UnknownFlowAlgorithm, TokenBucketAlgorithm, LeakyBucketAlgorithm",
	"reqspersecond": "requests per second for flow rate limiting",
	"burstsize":     "burst size for flow rate limiting",
}
var FlowSettingsSpecialArgs = map[string]string{}
var MaxReqsSettingsRequiredArgs = []string{}
var MaxReqsSettingsOptionalArgs = []string{
	"maxreqsalgorithm",
	"maxrequests",
	"interval",
}
var MaxReqsSettingsAliasArgs = []string{}
var MaxReqsSettingsComments = map[string]string{
	"maxreqsalgorithm": "MaxReqs Rate Limit Algorithm, one of UnknownMaxReqsAlgorithm, FixedWindowAlgorithm",
	"maxrequests":      "Maximum number of requests for the given Interval",
	"interval":         "Time interval",
}
var MaxReqsSettingsSpecialArgs = map[string]string{}
var RateLimitSettingsRequiredArgs = []string{
	"apiendpointtype",
	"ratelimittarget",
	"apiname",
}
var RateLimitSettingsOptionalArgs = []string{
	"flowsettings:#.flowalgorithm",
	"flowsettings:#.reqspersecond",
	"flowsettings:#.burstsize",
	"maxreqssettings:#.maxreqsalgorithm",
	"maxreqssettings:#.maxrequests",
	"maxreqssettings:#.interval",
}
var RateLimitSettingsAliasArgs = []string{
	"apiendpointtype=key.apiendpointtype",
	"ratelimittarget=key.ratelimittarget",
	"apiname=key.apiname",
}
var RateLimitSettingsComments = map[string]string{
	"fields":                             "Fields are used for the Update API to specify which fields to apply",
	"apiendpointtype":                    "API Endpoint type, one of UnknownApiEndpointType, Controller, Dme",
	"ratelimittarget":                    "Target to rate limit, one of UnknownTarget, AllRequests, PerIp, PerUser",
	"apiname":                            "Name of API (eg. CreateApp or RegisterClient) (Leave empty if not a specific API)",
	"flowsettings:#.flowalgorithm":       "Flow Rate Limit algorithm, one of UnknownFlowAlgorithm, TokenBucketAlgorithm, LeakyBucketAlgorithm",
	"flowsettings:#.reqspersecond":       "requests per second for flow rate limiting",
	"flowsettings:#.burstsize":           "burst size for flow rate limiting",
	"maxreqssettings:#.maxreqsalgorithm": "MaxReqs Rate Limit Algorithm, one of UnknownMaxReqsAlgorithm, FixedWindowAlgorithm",
	"maxreqssettings:#.maxrequests":      "Maximum number of requests for the given Interval",
	"maxreqssettings:#.interval":         "Time interval",
}
var RateLimitSettingsSpecialArgs = map[string]string{
	"fields": "StringArray",
}
var RateLimitSettingsDataRequiredArgs = []string{}
var RateLimitSettingsDataOptionalArgs = []string{
	"settings:#.fields",
	"settings:#.key.apiendpointtype",
	"settings:#.key.ratelimittarget",
	"settings:#.key.apiname",
	"settings:#.flowsettings:#.flowalgorithm",
	"settings:#.flowsettings:#.reqspersecond",
	"settings:#.flowsettings:#.burstsize",
	"settings:#.maxreqssettings:#.maxreqsalgorithm",
	"settings:#.maxreqssettings:#.maxrequests",
	"settings:#.maxreqssettings:#.interval",
}
var RateLimitSettingsDataAliasArgs = []string{}
var RateLimitSettingsDataComments = map[string]string{
	"settings:#.fields":                             "Fields are used for the Update API to specify which fields to apply",
	"settings:#.key.apiendpointtype":                "API Endpoint type, one of UnknownApiEndpointType, Controller, Dme",
	"settings:#.key.ratelimittarget":                "Target to rate limit, one of UnknownTarget, AllRequests, PerIp, PerUser",
	"settings:#.key.apiname":                        "Name of API (eg. CreateApp or RegisterClient) (Leave empty if not a specific API)",
	"settings:#.flowsettings:#.flowalgorithm":       "Flow Rate Limit algorithm, one of UnknownFlowAlgorithm, TokenBucketAlgorithm, LeakyBucketAlgorithm",
	"settings:#.flowsettings:#.reqspersecond":       "requests per second for flow rate limiting",
	"settings:#.flowsettings:#.burstsize":           "burst size for flow rate limiting",
	"settings:#.maxreqssettings:#.maxreqsalgorithm": "MaxReqs Rate Limit Algorithm, one of UnknownMaxReqsAlgorithm, FixedWindowAlgorithm",
	"settings:#.maxreqssettings:#.maxrequests":      "Maximum number of requests for the given Interval",
	"settings:#.maxreqssettings:#.interval":         "Time interval",
}
var RateLimitSettingsDataSpecialArgs = map[string]string{
	"settings:#.fields": "StringArray",
}
