// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "encoding/json"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/yaml"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ClusterInstApiCmd edgeproto.ClusterInstApiClient
var ClusterInstIn edgeproto.ClusterInst
var ClusterInstFlagSet = pflag.NewFlagSet("ClusterInst", pflag.ExitOnError)
var ClusterInstNoConfigFlagSet = pflag.NewFlagSet("ClusterInstNoConfig", pflag.ExitOnError)
var ClusterInstInLiveness string

func ClusterInstKeySlicer(in *edgeproto.ClusterInstKey) []string {
	s := make([]string, 0, 2)
	s = append(s, in.ClusterKey.Name)
	s = append(s, in.CloudletKey.OperatorKey.Name)
	s = append(s, in.CloudletKey.Name)
	return s
}

func ClusterInstKeyHeaderSlicer() []string {
	s := make([]string, 0, 2)
	s = append(s, "ClusterKey-Name")
	s = append(s, "CloudletKey-OperatorKey-Name")
	s = append(s, "CloudletKey-Name")
	return s
}

func ClusterInstSlicer(in *edgeproto.ClusterInst) []string {
	s := make([]string, 0, 5)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.ClusterKey.Name)
	s = append(s, in.Key.CloudletKey.OperatorKey.Name)
	s = append(s, in.Key.CloudletKey.Name)
	s = append(s, in.Flavor.Name)
	s = append(s, strconv.FormatUint(uint64(in.Nodes), 10))
	s = append(s, edgeproto.Liveness_name[int32(in.Liveness)])
	return s
}

func ClusterInstHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Fields")
	s = append(s, "Key-ClusterKey-Name")
	s = append(s, "Key-CloudletKey-OperatorKey-Name")
	s = append(s, "Key-CloudletKey-Name")
	s = append(s, "Flavor-Name")
	s = append(s, "Nodes")
	s = append(s, "Liveness")
	return s
}

var CreateClusterInstCmd = &cobra.Command{
	Use: "CreateClusterInst",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterInstApiCmd == nil {
			fmt.Println("ClusterInstApi client not initialized")
			return
		}
		var err error
		err = parseClusterInstEnums()
		if err != nil {
			fmt.Println("CreateClusterInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterInstApiCmd.CreateClusterInst(ctx, &ClusterInstIn)
		cancel()
		if err != nil {
			fmt.Println("CreateClusterInst failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeleteClusterInstCmd = &cobra.Command{
	Use: "DeleteClusterInst",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterInstApiCmd == nil {
			fmt.Println("ClusterInstApi client not initialized")
			return
		}
		var err error
		err = parseClusterInstEnums()
		if err != nil {
			fmt.Println("DeleteClusterInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterInstApiCmd.DeleteClusterInst(ctx, &ClusterInstIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteClusterInst failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var UpdateClusterInstCmd = &cobra.Command{
	Use: "UpdateClusterInst",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterInstApiCmd == nil {
			fmt.Println("ClusterInstApi client not initialized")
			return
		}
		var err error
		err = parseClusterInstEnums()
		if err != nil {
			fmt.Println("UpdateClusterInst: ", err)
			return
		}
		ClusterInstSetFields()
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterInstApiCmd.UpdateClusterInst(ctx, &ClusterInstIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateClusterInst failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var ShowClusterInstCmd = &cobra.Command{
	Use: "ShowClusterInst",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterInstApiCmd == nil {
			fmt.Println("ClusterInstApi client not initialized")
			return
		}
		var err error
		err = parseClusterInstEnums()
		if err != nil {
			fmt.Println("ShowClusterInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := ClusterInstApiCmd.ShowClusterInst(ctx, &ClusterInstIn)
		if err != nil {
			fmt.Println("ShowClusterInst failed: ", err)
			return
		}
		objs := make([]*edgeproto.ClusterInst, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowClusterInst recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ClusterInstHeaderSlicer(), "\t"))
			for _, obj := range objs {
				fmt.Fprintln(output, strings.Join(ClusterInstSlicer(obj), "\t"))
			}
			output.Flush()
		}
	},
}

var ClusterInstApiCmds = []*cobra.Command{
	CreateClusterInstCmd,
	DeleteClusterInstCmd,
	UpdateClusterInstCmd,
	ShowClusterInstCmd,
}

func init() {
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.ClusterKey.Name, "key-clusterkey-name", "", "Key.ClusterKey.Name")
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.CloudletKey.OperatorKey.Name, "key-cloudletkey-operatorkey-name", "", "Key.CloudletKey.OperatorKey.Name")
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.CloudletKey.Name, "key-cloudletkey-name", "", "Key.CloudletKey.Name")
	ClusterInstNoConfigFlagSet.StringVar(&ClusterInstIn.Flavor.Name, "flavor-name", "", "Flavor.Name")
	ClusterInstNoConfigFlagSet.Int32Var(&ClusterInstIn.Nodes, "nodes", 0, "Nodes")
	ClusterInstNoConfigFlagSet.StringVar(&ClusterInstInLiveness, "liveness", "", "one of [LivenessUnknown LivenessStatic LivenessDynamic]")
	CreateClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	DeleteClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	UpdateClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	ShowClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
}

func ClusterInstApiAllowNoConfig() {
	CreateClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	DeleteClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	UpdateClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	ShowClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
}

func ClusterInstSetFields() {
	ClusterInstIn.Fields = make([]string, 0)
	if ClusterInstFlagSet.Lookup("key-clusterkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.1.1")
	}
	if ClusterInstFlagSet.Lookup("key-cloudletkey-operatorkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.2.1.1")
	}
	if ClusterInstFlagSet.Lookup("key-cloudletkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.2.2")
	}
	if ClusterInstFlagSet.Lookup("flavor-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "3.1")
	}
	if ClusterInstFlagSet.Lookup("nodes").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "4")
	}
	if ClusterInstFlagSet.Lookup("liveness").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "9")
	}
}

func parseClusterInstEnums() error {
	if ClusterInstInLiveness != "" {
		switch ClusterInstInLiveness {
		case "LivenessUnknown":
			ClusterInstIn.Liveness = edgeproto.Liveness(0)
		case "LivenessStatic":
			ClusterInstIn.Liveness = edgeproto.Liveness(1)
		case "LivenessDynamic":
			ClusterInstIn.Liveness = edgeproto.Liveness(2)
		default:
			return errors.New("Invalid value for ClusterInstInLiveness")
		}
	}
	return nil
}
