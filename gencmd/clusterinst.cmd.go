// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterinst.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ClusterInstApiCmd edgeproto.ClusterInstApiClient
var ClusterInstInfoApiCmd edgeproto.ClusterInstInfoApiClient
var ClusterInstIn edgeproto.ClusterInst
var ClusterInstFlagSet = pflag.NewFlagSet("ClusterInst", pflag.ExitOnError)
var ClusterInstNoConfigFlagSet = pflag.NewFlagSet("ClusterInstNoConfig", pflag.ExitOnError)
var ClusterInstInLiveness string
var ClusterInstInState string
var ClusterInstInCrmOverride string
var ClusterInstInfoIn edgeproto.ClusterInstInfo
var ClusterInstInfoFlagSet = pflag.NewFlagSet("ClusterInstInfo", pflag.ExitOnError)
var ClusterInstInfoNoConfigFlagSet = pflag.NewFlagSet("ClusterInstInfoNoConfig", pflag.ExitOnError)
var ClusterInstInfoInState string

func ClusterInstKeySlicer(in *edgeproto.ClusterInstKey) []string {
	s := make([]string, 0, 2)
	s = append(s, in.ClusterKey.Name)
	s = append(s, in.CloudletKey.OperatorKey.Name)
	s = append(s, in.CloudletKey.Name)
	return s
}

func ClusterInstKeyHeaderSlicer() []string {
	s := make([]string, 0, 2)
	s = append(s, "ClusterKey-Name")
	s = append(s, "CloudletKey-OperatorKey-Name")
	s = append(s, "CloudletKey-Name")
	return s
}

func ClusterInstKeyWriteOutputArray(objs []*edgeproto.ClusterInstKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ClusterInstKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ClusterInstKeyWriteOutputOne(obj *edgeproto.ClusterInstKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ClusterInstKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ClusterInstSlicer(in *edgeproto.ClusterInst) []string {
	s := make([]string, 0, 8)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.ClusterKey.Name)
	s = append(s, in.Key.CloudletKey.OperatorKey.Name)
	s = append(s, in.Key.CloudletKey.Name)
	s = append(s, in.Flavor.Name)
	s = append(s, edgeproto.Liveness_name[int32(in.Liveness)])
	s = append(s, strconv.FormatBool(in.Auto))
	s = append(s, edgeproto.TrackedState_name[int32(in.State)])
	if in.Errors == nil {
		in.Errors = make([]string, 1)
	}
	s = append(s, in.Errors[0])
	s = append(s, edgeproto.CRMOverride_name[int32(in.CrmOverride)])
	return s
}

func ClusterInstHeaderSlicer() []string {
	s := make([]string, 0, 8)
	s = append(s, "Fields")
	s = append(s, "Key-ClusterKey-Name")
	s = append(s, "Key-CloudletKey-OperatorKey-Name")
	s = append(s, "Key-CloudletKey-Name")
	s = append(s, "Flavor-Name")
	s = append(s, "Liveness")
	s = append(s, "Auto")
	s = append(s, "State")
	s = append(s, "Errors")
	s = append(s, "CrmOverride")
	return s
}

func ClusterInstWriteOutputArray(objs []*edgeproto.ClusterInst) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ClusterInstSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ClusterInstWriteOutputOne(obj *edgeproto.ClusterInst) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ClusterInstSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ClusterInstInfoSlicer(in *edgeproto.ClusterInstInfo) []string {
	s := make([]string, 0, 5)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.ClusterKey.Name)
	s = append(s, in.Key.CloudletKey.OperatorKey.Name)
	s = append(s, in.Key.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.NotifyId), 10))
	s = append(s, edgeproto.TrackedState_name[int32(in.State)])
	if in.Errors == nil {
		in.Errors = make([]string, 1)
	}
	s = append(s, in.Errors[0])
	return s
}

func ClusterInstInfoHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Fields")
	s = append(s, "Key-ClusterKey-Name")
	s = append(s, "Key-CloudletKey-OperatorKey-Name")
	s = append(s, "Key-CloudletKey-Name")
	s = append(s, "NotifyId")
	s = append(s, "State")
	s = append(s, "Errors")
	return s
}

func ClusterInstInfoWriteOutputArray(objs []*edgeproto.ClusterInstInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstInfoHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ClusterInstInfoSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ClusterInstInfoWriteOutputOne(obj *edgeproto.ClusterInstInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ClusterInstInfoHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ClusterInstInfoSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ClusterInstHideTags(in *edgeproto.ClusterInst) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.State = 0
	}
	if _, found := tags["nocmp"]; found {
		in.Errors = nil
	}
	if _, found := tags["nocmp"]; found {
		in.CrmOverride = 0
	}
}

func ClusterInstInfoHideTags(in *edgeproto.ClusterInstInfo) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.NotifyId = 0
	}
}

var CreateClusterInstCmd = &cobra.Command{
	Use: "CreateClusterInst",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseClusterInstEnums()
		if err != nil {
			return fmt.Errorf("CreateClusterInst failed: %s", err.Error())
		}
		return CreateClusterInst(&ClusterInstIn)
	},
}

func CreateClusterInst(in *edgeproto.ClusterInst) error {
	if ClusterInstApiCmd == nil {
		return fmt.Errorf("ClusterInstApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ClusterInstApiCmd.CreateClusterInst(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateClusterInst failed: %s", errstr)
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("CreateClusterInst recv failed: %s", err.Error())
		}
		ResultWriteOutputOne(obj)
	}
	return nil
}

func CreateClusterInsts(data []edgeproto.ClusterInst, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateClusterInst %v\n", data[ii])
		myerr := CreateClusterInst(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteClusterInstCmd = &cobra.Command{
	Use: "DeleteClusterInst",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseClusterInstEnums()
		if err != nil {
			return fmt.Errorf("DeleteClusterInst failed: %s", err.Error())
		}
		return DeleteClusterInst(&ClusterInstIn)
	},
}

func DeleteClusterInst(in *edgeproto.ClusterInst) error {
	if ClusterInstApiCmd == nil {
		return fmt.Errorf("ClusterInstApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ClusterInstApiCmd.DeleteClusterInst(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteClusterInst failed: %s", errstr)
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("DeleteClusterInst recv failed: %s", err.Error())
		}
		ResultWriteOutputOne(obj)
	}
	return nil
}

func DeleteClusterInsts(data []edgeproto.ClusterInst, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteClusterInst %v\n", data[ii])
		myerr := DeleteClusterInst(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateClusterInstCmd = &cobra.Command{
	Use: "UpdateClusterInst",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseClusterInstEnums()
		if err != nil {
			return fmt.Errorf("UpdateClusterInst failed: %s", err.Error())
		}
		ClusterInstSetFields()
		return UpdateClusterInst(&ClusterInstIn)
	},
}

func UpdateClusterInst(in *edgeproto.ClusterInst) error {
	if ClusterInstApiCmd == nil {
		return fmt.Errorf("ClusterInstApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ClusterInstApiCmd.UpdateClusterInst(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateClusterInst failed: %s", errstr)
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("UpdateClusterInst recv failed: %s", err.Error())
		}
		ResultWriteOutputOne(obj)
	}
	return nil
}

func UpdateClusterInsts(data []edgeproto.ClusterInst, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateClusterInst %v\n", data[ii])
		myerr := UpdateClusterInst(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowClusterInstCmd = &cobra.Command{
	Use: "ShowClusterInst",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseClusterInstEnums()
		if err != nil {
			return fmt.Errorf("ShowClusterInst failed: %s", err.Error())
		}
		return ShowClusterInst(&ClusterInstIn)
	},
}

func ShowClusterInst(in *edgeproto.ClusterInst) error {
	if ClusterInstApiCmd == nil {
		return fmt.Errorf("ClusterInstApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ClusterInstApiCmd.ShowClusterInst(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowClusterInst failed: %s", errstr)
	}
	objs := make([]*edgeproto.ClusterInst, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowClusterInst recv failed: %s", err.Error())
		}
		ClusterInstHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	ClusterInstWriteOutputArray(objs)
	return nil
}

func ShowClusterInsts(data []edgeproto.ClusterInst, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowClusterInst %v\n", data[ii])
		myerr := ShowClusterInst(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ClusterInstApiCmds = []*cobra.Command{
	CreateClusterInstCmd,
	DeleteClusterInstCmd,
	UpdateClusterInstCmd,
	ShowClusterInstCmd,
}

var ShowClusterInstInfoCmd = &cobra.Command{
	Use: "ShowClusterInstInfo",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseClusterInstInfoEnums()
		if err != nil {
			return fmt.Errorf("ShowClusterInstInfo failed: %s", err.Error())
		}
		return ShowClusterInstInfo(&ClusterInstInfoIn)
	},
}

func ShowClusterInstInfo(in *edgeproto.ClusterInstInfo) error {
	if ClusterInstInfoApiCmd == nil {
		return fmt.Errorf("ClusterInstInfoApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ClusterInstInfoApiCmd.ShowClusterInstInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowClusterInstInfo failed: %s", errstr)
	}
	objs := make([]*edgeproto.ClusterInstInfo, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowClusterInstInfo recv failed: %s", err.Error())
		}
		ClusterInstInfoHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	ClusterInstInfoWriteOutputArray(objs)
	return nil
}

func ShowClusterInstInfos(data []edgeproto.ClusterInstInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowClusterInstInfo %v\n", data[ii])
		myerr := ShowClusterInstInfo(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ClusterInstInfoApiCmds = []*cobra.Command{
	ShowClusterInstInfoCmd,
}

func init() {
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.ClusterKey.Name, "key-clusterkey-name", "", "Key.ClusterKey.Name")
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.CloudletKey.OperatorKey.Name, "key-cloudletkey-operatorkey-name", "", "Key.CloudletKey.OperatorKey.Name")
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Key.CloudletKey.Name, "key-cloudletkey-name", "", "Key.CloudletKey.Name")
	ClusterInstFlagSet.StringVar(&ClusterInstIn.Flavor.Name, "flavor-name", "", "Flavor.Name")
	ClusterInstNoConfigFlagSet.StringVar(&ClusterInstInLiveness, "liveness", "", "one of [LivenessUnknown LivenessStatic LivenessDynamic]")
	ClusterInstNoConfigFlagSet.BoolVar(&ClusterInstIn.Auto, "auto", false, "Auto")
	ClusterInstFlagSet.StringVar(&ClusterInstInState, "state", "", "one of [TrackedStateUnknown NotPresent CreateRequested Creating CreateError Ready UpdateRequested Updating UpdateError DeleteRequested Deleting DeleteError]")
	ClusterInstFlagSet.StringVar(&ClusterInstInCrmOverride, "crmoverride", "", "one of [NoOverride IgnoreCRMErrors IgnoreCRM IgnoreTransientState]")
	ClusterInstInfoFlagSet.StringVar(&ClusterInstInfoIn.Key.ClusterKey.Name, "key-clusterkey-name", "", "Key.ClusterKey.Name")
	ClusterInstInfoFlagSet.StringVar(&ClusterInstInfoIn.Key.CloudletKey.OperatorKey.Name, "key-cloudletkey-operatorkey-name", "", "Key.CloudletKey.OperatorKey.Name")
	ClusterInstInfoFlagSet.StringVar(&ClusterInstInfoIn.Key.CloudletKey.Name, "key-cloudletkey-name", "", "Key.CloudletKey.Name")
	ClusterInstInfoFlagSet.Int64Var(&ClusterInstInfoIn.NotifyId, "notifyid", 0, "NotifyId")
	ClusterInstInfoFlagSet.StringVar(&ClusterInstInfoInState, "state", "", "one of [TrackedStateUnknown NotPresent CreateRequested Creating CreateError Ready UpdateRequested Updating UpdateError DeleteRequested Deleting DeleteError]")
	CreateClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	DeleteClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	UpdateClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	ShowClusterInstCmd.Flags().AddFlagSet(ClusterInstFlagSet)
	ShowClusterInstInfoCmd.Flags().AddFlagSet(ClusterInstInfoFlagSet)
}

func ClusterInstApiAllowNoConfig() {
	CreateClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	DeleteClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	UpdateClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
	ShowClusterInstCmd.Flags().AddFlagSet(ClusterInstNoConfigFlagSet)
}

func ClusterInstInfoApiAllowNoConfig() {
	ShowClusterInstInfoCmd.Flags().AddFlagSet(ClusterInstInfoNoConfigFlagSet)
}

func ClusterInstSetFields() {
	ClusterInstIn.Fields = make([]string, 0)
	if ClusterInstFlagSet.Lookup("key-clusterkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.1.1")
	}
	if ClusterInstFlagSet.Lookup("key-cloudletkey-operatorkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.2.1.1")
	}
	if ClusterInstFlagSet.Lookup("key-cloudletkey-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "2.2.2")
	}
	if ClusterInstFlagSet.Lookup("flavor-name").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "3.1")
	}
	if ClusterInstNoConfigFlagSet.Lookup("liveness").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "9")
	}
	if ClusterInstNoConfigFlagSet.Lookup("auto").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "10")
	}
	if ClusterInstFlagSet.Lookup("state").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "4")
	}
	if ClusterInstFlagSet.Lookup("crmoverride").Changed {
		ClusterInstIn.Fields = append(ClusterInstIn.Fields, "6")
	}
}

func ClusterInstInfoSetFields() {
	ClusterInstInfoIn.Fields = make([]string, 0)
	if ClusterInstInfoFlagSet.Lookup("key-clusterkey-name").Changed {
		ClusterInstInfoIn.Fields = append(ClusterInstInfoIn.Fields, "2.1.1")
	}
	if ClusterInstInfoFlagSet.Lookup("key-cloudletkey-operatorkey-name").Changed {
		ClusterInstInfoIn.Fields = append(ClusterInstInfoIn.Fields, "2.2.1.1")
	}
	if ClusterInstInfoFlagSet.Lookup("key-cloudletkey-name").Changed {
		ClusterInstInfoIn.Fields = append(ClusterInstInfoIn.Fields, "2.2.2")
	}
	if ClusterInstInfoFlagSet.Lookup("notifyid").Changed {
		ClusterInstInfoIn.Fields = append(ClusterInstInfoIn.Fields, "3")
	}
	if ClusterInstInfoFlagSet.Lookup("state").Changed {
		ClusterInstInfoIn.Fields = append(ClusterInstInfoIn.Fields, "4")
	}
}

func parseClusterInstEnums() error {
	if ClusterInstInLiveness != "" {
		switch ClusterInstInLiveness {
		case "LivenessUnknown":
			ClusterInstIn.Liveness = edgeproto.Liveness(0)
		case "LivenessStatic":
			ClusterInstIn.Liveness = edgeproto.Liveness(1)
		case "LivenessDynamic":
			ClusterInstIn.Liveness = edgeproto.Liveness(2)
		default:
			return errors.New("Invalid value for ClusterInstInLiveness")
		}
	}
	if ClusterInstInState != "" {
		switch ClusterInstInState {
		case "TrackedStateUnknown":
			ClusterInstIn.State = edgeproto.TrackedState(0)
		case "NotPresent":
			ClusterInstIn.State = edgeproto.TrackedState(1)
		case "CreateRequested":
			ClusterInstIn.State = edgeproto.TrackedState(2)
		case "Creating":
			ClusterInstIn.State = edgeproto.TrackedState(3)
		case "CreateError":
			ClusterInstIn.State = edgeproto.TrackedState(4)
		case "Ready":
			ClusterInstIn.State = edgeproto.TrackedState(5)
		case "UpdateRequested":
			ClusterInstIn.State = edgeproto.TrackedState(6)
		case "Updating":
			ClusterInstIn.State = edgeproto.TrackedState(7)
		case "UpdateError":
			ClusterInstIn.State = edgeproto.TrackedState(8)
		case "DeleteRequested":
			ClusterInstIn.State = edgeproto.TrackedState(9)
		case "Deleting":
			ClusterInstIn.State = edgeproto.TrackedState(10)
		case "DeleteError":
			ClusterInstIn.State = edgeproto.TrackedState(11)
		default:
			return errors.New("Invalid value for ClusterInstInState")
		}
	}
	if ClusterInstInCrmOverride != "" {
		switch ClusterInstInCrmOverride {
		case "NoOverride":
			ClusterInstIn.CrmOverride = edgeproto.CRMOverride(0)
		case "IgnoreCRMErrors":
			ClusterInstIn.CrmOverride = edgeproto.CRMOverride(1)
		case "IgnoreCRM":
			ClusterInstIn.CrmOverride = edgeproto.CRMOverride(2)
		case "IgnoreTransientState":
			ClusterInstIn.CrmOverride = edgeproto.CRMOverride(3)
		default:
			return errors.New("Invalid value for ClusterInstInCrmOverride")
		}
	}
	return nil
}

func parseClusterInstInfoEnums() error {
	if ClusterInstInfoInState != "" {
		switch ClusterInstInfoInState {
		case "TrackedStateUnknown":
			ClusterInstInfoIn.State = edgeproto.TrackedState(0)
		case "NotPresent":
			ClusterInstInfoIn.State = edgeproto.TrackedState(1)
		case "CreateRequested":
			ClusterInstInfoIn.State = edgeproto.TrackedState(2)
		case "Creating":
			ClusterInstInfoIn.State = edgeproto.TrackedState(3)
		case "CreateError":
			ClusterInstInfoIn.State = edgeproto.TrackedState(4)
		case "Ready":
			ClusterInstInfoIn.State = edgeproto.TrackedState(5)
		case "UpdateRequested":
			ClusterInstInfoIn.State = edgeproto.TrackedState(6)
		case "Updating":
			ClusterInstInfoIn.State = edgeproto.TrackedState(7)
		case "UpdateError":
			ClusterInstInfoIn.State = edgeproto.TrackedState(8)
		case "DeleteRequested":
			ClusterInstInfoIn.State = edgeproto.TrackedState(9)
		case "Deleting":
			ClusterInstInfoIn.State = edgeproto.TrackedState(10)
		case "DeleteError":
			ClusterInstInfoIn.State = edgeproto.TrackedState(11)
		default:
			return errors.New("Invalid value for ClusterInstInfoInState")
		}
	}
	return nil
}
