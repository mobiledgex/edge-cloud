// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app_inst.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import google_protobuf "github.com/gogo/protobuf/types"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var AppInstApiCmd edgeproto.AppInstApiClient
var AppInstInfoApiCmd edgeproto.AppInstInfoApiClient
var AppInstMetricsApiCmd edgeproto.AppInstMetricsApiClient
var AppInstIn edgeproto.AppInst
var AppInstFlagSet = pflag.NewFlagSet("AppInst", pflag.ExitOnError)
var AppInstNoConfigFlagSet = pflag.NewFlagSet("AppInstNoConfig", pflag.ExitOnError)
var AppInstInLiveness string
var AppInstInImageType string
var AppInstInMappedPortsProto string
var AppInstInAccessLayer string
var AppInstInfoIn edgeproto.AppInstInfo
var AppInstInfoFlagSet = pflag.NewFlagSet("AppInstInfo", pflag.ExitOnError)
var AppInstInfoNoConfigFlagSet = pflag.NewFlagSet("AppInstInfoNoConfig", pflag.ExitOnError)
var AppInstInfoInState string
var AppInstMetricsIn edgeproto.AppInstMetrics
var AppInstMetricsFlagSet = pflag.NewFlagSet("AppInstMetrics", pflag.ExitOnError)
var AppInstMetricsNoConfigFlagSet = pflag.NewFlagSet("AppInstMetricsNoConfig", pflag.ExitOnError)
var AppStateStrings = []string{
	"AppStateUnknown",
	"AppStateBuilding",
	"AppStateReady",
	"AppStateErrors",
	"AppStateDeleting",
	"AppStateDeleted",
	"AppStateChanging",
	"AppStateNotPresent",
}

func AppInstKeySlicer(in *edgeproto.AppInstKey) []string {
	s := make([]string, 0, 3)
	s = append(s, in.AppKey.DeveloperKey.Name)
	s = append(s, in.AppKey.Name)
	s = append(s, in.AppKey.Version)
	s = append(s, in.CloudletKey.OperatorKey.Name)
	s = append(s, in.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.Id), 10))
	return s
}

func AppInstKeyHeaderSlicer() []string {
	s := make([]string, 0, 3)
	s = append(s, "AppKey-DeveloperKey-Name")
	s = append(s, "AppKey-Name")
	s = append(s, "AppKey-Version")
	s = append(s, "CloudletKey-OperatorKey-Name")
	s = append(s, "CloudletKey-Name")
	s = append(s, "Id")
	return s
}

func AppInstKeyWriteOutputArray(objs []*edgeproto.AppInstKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppInstKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppInstKeyWriteOutputOne(obj *edgeproto.AppInstKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppInstKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AppPortSlicer(in *edgeproto.AppPort) []string {
	s := make([]string, 0, 3)
	s = append(s, edgeproto.L4Proto_name[int32(in.Proto)])
	s = append(s, strconv.FormatUint(uint64(in.InternalPort), 10))
	s = append(s, strconv.FormatUint(uint64(in.PublicPort), 10))
	return s
}

func AppPortHeaderSlicer() []string {
	s := make([]string, 0, 3)
	s = append(s, "Proto")
	s = append(s, "InternalPort")
	s = append(s, "PublicPort")
	return s
}

func AppPortWriteOutputArray(objs []*edgeproto.AppPort) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppPortHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppPortSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppPortWriteOutputOne(obj *edgeproto.AppPort) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppPortHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppPortSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AppInstSlicer(in *edgeproto.AppInst) []string {
	s := make([]string, 0, 13)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.AppKey.DeveloperKey.Name)
	s = append(s, in.Key.AppKey.Name)
	s = append(s, in.Key.AppKey.Version)
	s = append(s, in.Key.CloudletKey.OperatorKey.Name)
	s = append(s, in.Key.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.Key.Id), 10))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.Lat), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.Long), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.HorizontalAccuracy), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.VerticalAccuracy), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.Altitude), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.Course), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.CloudletLoc.Speed), 'e', -1, 32))
	if in.CloudletLoc.Timestamp == nil {
		in.CloudletLoc.Timestamp = &google_protobuf.Timestamp{}
	}
	_CloudletLoc_TimestampTime := time.Unix(in.CloudletLoc.Timestamp.Seconds, int64(in.CloudletLoc.Timestamp.Nanos))
	s = append(s, _CloudletLoc_TimestampTime.String())
	s = append(s, in.Uri)
	s = append(s, in.ClusterInstKey.ClusterKey.Name)
	s = append(s, in.ClusterInstKey.CloudletKey.OperatorKey.Name)
	s = append(s, in.ClusterInstKey.CloudletKey.Name)
	s = append(s, edgeproto.Liveness_name[int32(in.Liveness)])
	s = append(s, in.ImagePath)
	s = append(s, edgeproto.ImageType_name[int32(in.ImageType)])
	if in.MappedPorts == nil {
		in.MappedPorts = make([]edgeproto.AppPort, 1)
	}
	s = append(s, edgeproto.L4Proto_name[int32(in.MappedPorts[0].Proto)])
	s = append(s, strconv.FormatUint(uint64(in.MappedPorts[0].InternalPort), 10))
	s = append(s, strconv.FormatUint(uint64(in.MappedPorts[0].PublicPort), 10))
	s = append(s, in.MappedPath)
	s = append(s, in.ConfigMap)
	s = append(s, in.Flavor.Name)
	s = append(s, edgeproto.AccessLayer_name[int32(in.AccessLayer)])
	return s
}

func AppInstHeaderSlicer() []string {
	s := make([]string, 0, 13)
	s = append(s, "Fields")
	s = append(s, "Key-AppKey-DeveloperKey-Name")
	s = append(s, "Key-AppKey-Name")
	s = append(s, "Key-AppKey-Version")
	s = append(s, "Key-CloudletKey-OperatorKey-Name")
	s = append(s, "Key-CloudletKey-Name")
	s = append(s, "Key-Id")
	s = append(s, "CloudletLoc-Lat")
	s = append(s, "CloudletLoc-Long")
	s = append(s, "CloudletLoc-HorizontalAccuracy")
	s = append(s, "CloudletLoc-VerticalAccuracy")
	s = append(s, "CloudletLoc-Altitude")
	s = append(s, "CloudletLoc-Course")
	s = append(s, "CloudletLoc-Speed")
	s = append(s, "CloudletLoc-Timestamp")
	s = append(s, "Uri")
	s = append(s, "ClusterInstKey-ClusterKey-Name")
	s = append(s, "ClusterInstKey-CloudletKey-OperatorKey-Name")
	s = append(s, "ClusterInstKey-CloudletKey-Name")
	s = append(s, "Liveness")
	s = append(s, "ImagePath")
	s = append(s, "ImageType")
	s = append(s, "MappedPorts-Proto")
	s = append(s, "MappedPorts-InternalPort")
	s = append(s, "MappedPorts-PublicPort")
	s = append(s, "MappedPath")
	s = append(s, "ConfigMap")
	s = append(s, "Flavor-Name")
	s = append(s, "AccessLayer")
	return s
}

func AppInstWriteOutputArray(objs []*edgeproto.AppInst) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppInstSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppInstWriteOutputOne(obj *edgeproto.AppInst) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppInstSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AppInstInfoSlicer(in *edgeproto.AppInstInfo) []string {
	s := make([]string, 0, 5)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.AppKey.DeveloperKey.Name)
	s = append(s, in.Key.AppKey.Name)
	s = append(s, in.Key.AppKey.Version)
	s = append(s, in.Key.CloudletKey.OperatorKey.Name)
	s = append(s, in.Key.CloudletKey.Name)
	s = append(s, strconv.FormatUint(uint64(in.Key.Id), 10))
	s = append(s, strconv.FormatUint(uint64(in.NotifyId), 10))
	s = append(s, edgeproto.AppState_name[int32(in.State)])
	if in.Errors == nil {
		in.Errors = make([]string, 1)
	}
	s = append(s, in.Errors[0])
	return s
}

func AppInstInfoHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Fields")
	s = append(s, "Key-AppKey-DeveloperKey-Name")
	s = append(s, "Key-AppKey-Name")
	s = append(s, "Key-AppKey-Version")
	s = append(s, "Key-CloudletKey-OperatorKey-Name")
	s = append(s, "Key-CloudletKey-Name")
	s = append(s, "Key-Id")
	s = append(s, "NotifyId")
	s = append(s, "State")
	s = append(s, "Errors")
	return s
}

func AppInstInfoWriteOutputArray(objs []*edgeproto.AppInstInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstInfoHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppInstInfoSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppInstInfoWriteOutputOne(obj *edgeproto.AppInstInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstInfoHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppInstInfoSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AppInstMetricsSlicer(in *edgeproto.AppInstMetrics) []string {
	s := make([]string, 0, 1)
	s = append(s, strconv.FormatUint(uint64(in.Something), 10))
	return s
}

func AppInstMetricsHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Something")
	return s
}

func AppInstMetricsWriteOutputArray(objs []*edgeproto.AppInstMetrics) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstMetricsHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AppInstMetricsSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AppInstMetricsWriteOutputOne(obj *edgeproto.AppInstMetrics) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AppInstMetricsHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AppInstMetricsSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AppInstHideTags(in *edgeproto.AppInst) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.Uri = ""
	}
}

func AppInstInfoHideTags(in *edgeproto.AppInstInfo) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.NotifyId = 0
	}
}

var CreateAppInstCmd = &cobra.Command{
	Use: "CreateAppInst",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstApiCmd == nil {
			fmt.Println("AppInstApi client not initialized")
			return
		}
		var err error
		err = parseAppInstEnums()
		if err != nil {
			fmt.Println("CreateAppInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstApiCmd.CreateAppInst(ctx, &AppInstIn)
		if err != nil {
			fmt.Println("CreateAppInst failed: ", err)
			return
		}
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("CreateAppInst recv failed: ", err)
				break
			}
			ResultWriteOutputOne(obj)
		}
	},
}

var DeleteAppInstCmd = &cobra.Command{
	Use: "DeleteAppInst",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstApiCmd == nil {
			fmt.Println("AppInstApi client not initialized")
			return
		}
		var err error
		err = parseAppInstEnums()
		if err != nil {
			fmt.Println("DeleteAppInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstApiCmd.DeleteAppInst(ctx, &AppInstIn)
		if err != nil {
			fmt.Println("DeleteAppInst failed: ", err)
			return
		}
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("DeleteAppInst recv failed: ", err)
				break
			}
			ResultWriteOutputOne(obj)
		}
	},
}

var UpdateAppInstCmd = &cobra.Command{
	Use: "UpdateAppInst",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstApiCmd == nil {
			fmt.Println("AppInstApi client not initialized")
			return
		}
		var err error
		err = parseAppInstEnums()
		if err != nil {
			fmt.Println("UpdateAppInst: ", err)
			return
		}
		AppInstSetFields()
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstApiCmd.UpdateAppInst(ctx, &AppInstIn)
		if err != nil {
			fmt.Println("UpdateAppInst failed: ", err)
			return
		}
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("UpdateAppInst recv failed: ", err)
				break
			}
			ResultWriteOutputOne(obj)
		}
	},
}

var ShowAppInstCmd = &cobra.Command{
	Use: "ShowAppInst",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstApiCmd == nil {
			fmt.Println("AppInstApi client not initialized")
			return
		}
		var err error
		err = parseAppInstEnums()
		if err != nil {
			fmt.Println("ShowAppInst: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstApiCmd.ShowAppInst(ctx, &AppInstIn)
		if err != nil {
			fmt.Println("ShowAppInst failed: ", err)
			return
		}
		objs := make([]*edgeproto.AppInst, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowAppInst recv failed: ", err)
				break
			}
			AppInstHideTags(obj)
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		AppInstWriteOutputArray(objs)
	},
}

var AppInstApiCmds = []*cobra.Command{
	CreateAppInstCmd,
	DeleteAppInstCmd,
	UpdateAppInstCmd,
	ShowAppInstCmd,
}

var ShowAppInstInfoCmd = &cobra.Command{
	Use: "ShowAppInstInfo",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstInfoApiCmd == nil {
			fmt.Println("AppInstInfoApi client not initialized")
			return
		}
		var err error
		err = parseAppInstInfoEnums()
		if err != nil {
			fmt.Println("ShowAppInstInfo: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstInfoApiCmd.ShowAppInstInfo(ctx, &AppInstInfoIn)
		if err != nil {
			fmt.Println("ShowAppInstInfo failed: ", err)
			return
		}
		objs := make([]*edgeproto.AppInstInfo, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowAppInstInfo recv failed: ", err)
				break
			}
			AppInstInfoHideTags(obj)
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		AppInstInfoWriteOutputArray(objs)
	},
}

var AppInstInfoApiCmds = []*cobra.Command{
	ShowAppInstInfoCmd,
}

var ShowAppInstMetricsCmd = &cobra.Command{
	Use: "ShowAppInstMetrics",
	Run: func(cmd *cobra.Command, args []string) {
		if AppInstMetricsApiCmd == nil {
			fmt.Println("AppInstMetricsApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := AppInstMetricsApiCmd.ShowAppInstMetrics(ctx, &AppInstMetricsIn)
		if err != nil {
			fmt.Println("ShowAppInstMetrics failed: ", err)
			return
		}
		objs := make([]*edgeproto.AppInstMetrics, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowAppInstMetrics recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		AppInstMetricsWriteOutputArray(objs)
	},
}

var AppInstMetricsApiCmds = []*cobra.Command{
	ShowAppInstMetricsCmd,
}

func init() {
	AppInstFlagSet.StringVar(&AppInstIn.Key.AppKey.DeveloperKey.Name, "key-appkey-developerkey-name", "", "Key.AppKey.DeveloperKey.Name")
	AppInstFlagSet.StringVar(&AppInstIn.Key.AppKey.Name, "key-appkey-name", "", "Key.AppKey.Name")
	AppInstFlagSet.StringVar(&AppInstIn.Key.AppKey.Version, "key-appkey-version", "", "Key.AppKey.Version")
	AppInstFlagSet.StringVar(&AppInstIn.Key.CloudletKey.OperatorKey.Name, "key-cloudletkey-operatorkey-name", "", "Key.CloudletKey.OperatorKey.Name")
	AppInstFlagSet.StringVar(&AppInstIn.Key.CloudletKey.Name, "key-cloudletkey-name", "", "Key.CloudletKey.Name")
	AppInstFlagSet.Uint64Var(&AppInstIn.Key.Id, "key-id", 0, "Key.Id")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.Lat, "cloudletloc-lat", 0, "CloudletLoc.Lat")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.Long, "cloudletloc-long", 0, "CloudletLoc.Long")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.HorizontalAccuracy, "cloudletloc-horizontalaccuracy", 0, "CloudletLoc.HorizontalAccuracy")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.VerticalAccuracy, "cloudletloc-verticalaccuracy", 0, "CloudletLoc.VerticalAccuracy")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.Altitude, "cloudletloc-altitude", 0, "CloudletLoc.Altitude")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.Course, "cloudletloc-course", 0, "CloudletLoc.Course")
	AppInstNoConfigFlagSet.Float64Var(&AppInstIn.CloudletLoc.Speed, "cloudletloc-speed", 0, "CloudletLoc.Speed")
	AppInstIn.CloudletLoc.Timestamp = &google_protobuf.Timestamp{}
	AppInstNoConfigFlagSet.Int64Var(&AppInstIn.CloudletLoc.Timestamp.Seconds, "cloudletloc-timestamp-seconds", 0, "CloudletLoc.Timestamp.Seconds")
	AppInstNoConfigFlagSet.Int32Var(&AppInstIn.CloudletLoc.Timestamp.Nanos, "cloudletloc-timestamp-nanos", 0, "CloudletLoc.Timestamp.Nanos")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.Uri, "uri", "", "Uri")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.ClusterInstKey.ClusterKey.Name, "clusterinstkey-clusterkey-name", "", "ClusterInstKey.ClusterKey.Name")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.ClusterInstKey.CloudletKey.OperatorKey.Name, "clusterinstkey-cloudletkey-operatorkey-name", "", "ClusterInstKey.CloudletKey.OperatorKey.Name")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.ClusterInstKey.CloudletKey.Name, "clusterinstkey-cloudletkey-name", "", "ClusterInstKey.CloudletKey.Name")
	AppInstNoConfigFlagSet.StringVar(&AppInstInLiveness, "liveness", "", "one of [LivenessUnknown LivenessStatic LivenessDynamic]")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.ImagePath, "imagepath", "", "ImagePath")
	AppInstNoConfigFlagSet.StringVar(&AppInstInImageType, "imagetype", "", "one of [ImageTypeUnknown ImageTypeDocker ImageTypeQCOW]")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.MappedPath, "mappedpath", "", "MappedPath")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.ConfigMap, "configmap", "", "ConfigMap")
	AppInstNoConfigFlagSet.StringVar(&AppInstIn.Flavor.Name, "flavor-name", "", "Flavor.Name")
	AppInstFlagSet.StringVar(&AppInstInAccessLayer, "accesslayer", "", "one of [AccessLayerUnknown AccessLayerL4 AccessLayerL7 AccessLayerL4L7]")
	AppInstInfoFlagSet.StringVar(&AppInstInfoIn.Key.AppKey.DeveloperKey.Name, "key-appkey-developerkey-name", "", "Key.AppKey.DeveloperKey.Name")
	AppInstInfoFlagSet.StringVar(&AppInstInfoIn.Key.AppKey.Name, "key-appkey-name", "", "Key.AppKey.Name")
	AppInstInfoFlagSet.StringVar(&AppInstInfoIn.Key.AppKey.Version, "key-appkey-version", "", "Key.AppKey.Version")
	AppInstInfoFlagSet.StringVar(&AppInstInfoIn.Key.CloudletKey.OperatorKey.Name, "key-cloudletkey-operatorkey-name", "", "Key.CloudletKey.OperatorKey.Name")
	AppInstInfoFlagSet.StringVar(&AppInstInfoIn.Key.CloudletKey.Name, "key-cloudletkey-name", "", "Key.CloudletKey.Name")
	AppInstInfoFlagSet.Uint64Var(&AppInstInfoIn.Key.Id, "key-id", 0, "Key.Id")
	AppInstInfoFlagSet.Int64Var(&AppInstInfoIn.NotifyId, "notifyid", 0, "NotifyId")
	AppInstInfoFlagSet.StringVar(&AppInstInfoInState, "state", "", "one of [AppStateUnknown AppStateBuilding AppStateReady AppStateErrors AppStateDeleting AppStateDeleted AppStateChanging AppStateNotPresent]")
	AppInstMetricsFlagSet.Uint64Var(&AppInstMetricsIn.Something, "something", 0, "Something")
	CreateAppInstCmd.Flags().AddFlagSet(AppInstFlagSet)
	DeleteAppInstCmd.Flags().AddFlagSet(AppInstFlagSet)
	UpdateAppInstCmd.Flags().AddFlagSet(AppInstFlagSet)
	ShowAppInstCmd.Flags().AddFlagSet(AppInstFlagSet)
	ShowAppInstInfoCmd.Flags().AddFlagSet(AppInstInfoFlagSet)
	ShowAppInstMetricsCmd.Flags().AddFlagSet(AppInstMetricsFlagSet)
}

func AppInstApiAllowNoConfig() {
	CreateAppInstCmd.Flags().AddFlagSet(AppInstNoConfigFlagSet)
	DeleteAppInstCmd.Flags().AddFlagSet(AppInstNoConfigFlagSet)
	UpdateAppInstCmd.Flags().AddFlagSet(AppInstNoConfigFlagSet)
	ShowAppInstCmd.Flags().AddFlagSet(AppInstNoConfigFlagSet)
}

func AppInstInfoApiAllowNoConfig() {
	ShowAppInstInfoCmd.Flags().AddFlagSet(AppInstInfoNoConfigFlagSet)
}

func AppInstMetricsApiAllowNoConfig() {
	ShowAppInstMetricsCmd.Flags().AddFlagSet(AppInstMetricsNoConfigFlagSet)
}

func AppInstSetFields() {
	AppInstIn.Fields = make([]string, 0)
	if AppInstFlagSet.Lookup("key-appkey-developerkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.1.1.2")
	}
	if AppInstFlagSet.Lookup("key-appkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.1.2")
	}
	if AppInstFlagSet.Lookup("key-appkey-version").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.1.3")
	}
	if AppInstFlagSet.Lookup("key-cloudletkey-operatorkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.2.1.1")
	}
	if AppInstFlagSet.Lookup("key-cloudletkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.2.2")
	}
	if AppInstFlagSet.Lookup("key-id").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "2.3")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-lat").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.1")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-long").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.2")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-horizontalaccuracy").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.3")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-verticalaccuracy").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.4")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-altitude").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.5")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-course").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.6")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-speed").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.7")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-timestamp-seconds").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.8.1")
	}
	if AppInstNoConfigFlagSet.Lookup("cloudletloc-timestamp-nanos").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "3.8.2")
	}
	if AppInstNoConfigFlagSet.Lookup("uri").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "4")
	}
	if AppInstNoConfigFlagSet.Lookup("clusterinstkey-clusterkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "5.1.1")
	}
	if AppInstNoConfigFlagSet.Lookup("clusterinstkey-cloudletkey-operatorkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "5.2.1.1")
	}
	if AppInstNoConfigFlagSet.Lookup("clusterinstkey-cloudletkey-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "5.2.2")
	}
	if AppInstNoConfigFlagSet.Lookup("liveness").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "6")
	}
	if AppInstNoConfigFlagSet.Lookup("imagepath").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "7")
	}
	if AppInstNoConfigFlagSet.Lookup("imagetype").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "8")
	}
	if AppInstFlagSet.Lookup("mappedports-proto").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "9.1")
	}
	if AppInstFlagSet.Lookup("mappedports-internalport").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "9.2")
	}
	if AppInstFlagSet.Lookup("mappedports-publicport").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "9.3")
	}
	if AppInstNoConfigFlagSet.Lookup("mappedpath").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "10")
	}
	if AppInstNoConfigFlagSet.Lookup("configmap").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "11")
	}
	if AppInstNoConfigFlagSet.Lookup("flavor-name").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "12.1")
	}
	if AppInstFlagSet.Lookup("accesslayer").Changed {
		AppInstIn.Fields = append(AppInstIn.Fields, "13")
	}
}

func AppInstInfoSetFields() {
	AppInstInfoIn.Fields = make([]string, 0)
	if AppInstInfoFlagSet.Lookup("key-appkey-developerkey-name").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.1.1.2")
	}
	if AppInstInfoFlagSet.Lookup("key-appkey-name").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.1.2")
	}
	if AppInstInfoFlagSet.Lookup("key-appkey-version").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.1.3")
	}
	if AppInstInfoFlagSet.Lookup("key-cloudletkey-operatorkey-name").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.2.1.1")
	}
	if AppInstInfoFlagSet.Lookup("key-cloudletkey-name").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.2.2")
	}
	if AppInstInfoFlagSet.Lookup("key-id").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "2.3")
	}
	if AppInstInfoFlagSet.Lookup("notifyid").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "3")
	}
	if AppInstInfoFlagSet.Lookup("state").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "4")
	}
	if AppInstInfoFlagSet.Lookup("errors").Changed {
		AppInstInfoIn.Fields = append(AppInstInfoIn.Fields, "5")
	}
}

func parseAppInstEnums() error {
	if AppInstInLiveness != "" {
		switch AppInstInLiveness {
		case "LivenessUnknown":
			AppInstIn.Liveness = edgeproto.Liveness(0)
		case "LivenessStatic":
			AppInstIn.Liveness = edgeproto.Liveness(1)
		case "LivenessDynamic":
			AppInstIn.Liveness = edgeproto.Liveness(2)
		default:
			return errors.New("Invalid value for AppInstInLiveness")
		}
	}
	if AppInstInImageType != "" {
		switch AppInstInImageType {
		case "ImageTypeUnknown":
			AppInstIn.ImageType = edgeproto.ImageType(0)
		case "ImageTypeDocker":
			AppInstIn.ImageType = edgeproto.ImageType(1)
		case "ImageTypeQCOW":
			AppInstIn.ImageType = edgeproto.ImageType(2)
		default:
			return errors.New("Invalid value for AppInstInImageType")
		}
	}
	if AppInstInMappedPortsProto != "" {
		switch AppInstInMappedPortsProto {
		case "L4ProtoUnknown":
			AppInstIn.MappedPorts[0].Proto = edgeproto.L4Proto(0)
		case "L4ProtoTCP":
			AppInstIn.MappedPorts[0].Proto = edgeproto.L4Proto(1)
		case "L4ProtoUDP":
			AppInstIn.MappedPorts[0].Proto = edgeproto.L4Proto(2)
		default:
			return errors.New("Invalid value for AppInstInMappedPortsProto")
		}
	}
	if AppInstInAccessLayer != "" {
		switch AppInstInAccessLayer {
		case "AccessLayerUnknown":
			AppInstIn.AccessLayer = edgeproto.AccessLayer(0)
		case "AccessLayerL4":
			AppInstIn.AccessLayer = edgeproto.AccessLayer(1)
		case "AccessLayerL7":
			AppInstIn.AccessLayer = edgeproto.AccessLayer(2)
		case "AccessLayerL4L7":
			AppInstIn.AccessLayer = edgeproto.AccessLayer(3)
		default:
			return errors.New("Invalid value for AppInstInAccessLayer")
		}
	}
	return nil
}

func parseAppInstInfoEnums() error {
	if AppInstInfoInState != "" {
		switch AppInstInfoInState {
		case "AppStateUnknown":
			AppInstInfoIn.State = edgeproto.AppState(0)
		case "AppStateBuilding":
			AppInstInfoIn.State = edgeproto.AppState(1)
		case "AppStateReady":
			AppInstInfoIn.State = edgeproto.AppState(2)
		case "AppStateErrors":
			AppInstInfoIn.State = edgeproto.AppState(3)
		case "AppStateDeleting":
			AppInstInfoIn.State = edgeproto.AppState(4)
		case "AppStateDeleted":
			AppInstInfoIn.State = edgeproto.AppState(5)
		case "AppStateChanging":
			AppInstInfoIn.State = edgeproto.AppState(6)
		case "AppStateNotPresent":
			AppInstInfoIn.State = edgeproto.AppState(7)
		default:
			return errors.New("Invalid value for AppInstInfoInState")
		}
	}
	return nil
}
