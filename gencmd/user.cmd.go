// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var UserApiCmd edgeproto.UserApiClient
var RoleApiCmd edgeproto.RoleApiClient
var RoleIn edgeproto.Role
var RoleFlagSet = pflag.NewFlagSet("Role", pflag.ExitOnError)
var RoleNoConfigFlagSet = pflag.NewFlagSet("RoleNoConfig", pflag.ExitOnError)
var RoleInOrgType string
var RoleInRoleType string
var UserIn edgeproto.User
var UserFlagSet = pflag.NewFlagSet("User", pflag.ExitOnError)
var UserNoConfigFlagSet = pflag.NewFlagSet("UserNoConfig", pflag.ExitOnError)
var OrgTypeStrings = []string{
	"OrgTypeUnknown",
	"OrgTypeAdmin",
	"OrgTypeDeveloper",
	"OrgTypeOperator",
}

var RoleTypeStrings = []string{
	"RoleTypeUnknown",
	"RoleTypeAdmin",
	"RoleTypeReadOnly",
}

func UserKeySlicer(in *edgeproto.UserKey) []string {
	s := make([]string, 0, 1)
	s = append(s, strconv.FormatUint(uint64(in.UserId), 10))
	return s
}

func UserKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "UserId")
	return s
}

func UserKeyWriteOutputArray(objs []*edgeproto.UserKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(UserKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(UserKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func UserKeyWriteOutputOne(obj *edgeproto.UserKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(UserKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(UserKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func UserSlicer(in *edgeproto.User) []string {
	s := make([]string, 0, 11)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, strconv.FormatUint(uint64(in.Key.UserId), 10))
	s = append(s, in.Name)
	s = append(s, in.Nickname)
	s = append(s, in.Email)
	s = append(s, strconv.FormatBool(in.EmailVerified))
	s = append(s, in.Password)
	s = append(s, in.Passhash)
	s = append(s, in.FamilyName)
	s = append(s, in.GivenName)
	s = append(s, in.Picture)
	return s
}

func UserHeaderSlicer() []string {
	s := make([]string, 0, 11)
	s = append(s, "Fields")
	s = append(s, "Key-UserId")
	s = append(s, "Name")
	s = append(s, "Nickname")
	s = append(s, "Email")
	s = append(s, "EmailVerified")
	s = append(s, "Password")
	s = append(s, "Passhash")
	s = append(s, "FamilyName")
	s = append(s, "GivenName")
	s = append(s, "Picture")
	return s
}

func UserWriteOutputArray(objs []*edgeproto.User) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(UserHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(UserSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func UserWriteOutputOne(obj *edgeproto.User) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(UserHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(UserSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func RoleKeySlicer(in *edgeproto.RoleKey) []string {
	s := make([]string, 0, 1)
	s = append(s, strconv.FormatUint(uint64(in.Id), 10))
	return s
}

func RoleKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Id")
	return s
}

func RoleKeyWriteOutputArray(objs []*edgeproto.RoleKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(RoleKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(RoleKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func RoleKeyWriteOutputOne(obj *edgeproto.RoleKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(RoleKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(RoleKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func RoleSlicer(in *edgeproto.Role) []string {
	s := make([]string, 0, 5)
	s = append(s, strconv.FormatUint(uint64(in.Key.Id), 10))
	s = append(s, strconv.FormatUint(uint64(in.UserId), 10))
	s = append(s, edgeproto.OrgType_name[int32(in.OrgType)])
	s = append(s, in.OrgName)
	s = append(s, edgeproto.RoleType_name[int32(in.RoleType)])
	return s
}

func RoleHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Key-Id")
	s = append(s, "UserId")
	s = append(s, "OrgType")
	s = append(s, "OrgName")
	s = append(s, "RoleType")
	return s
}

func RoleWriteOutputArray(objs []*edgeproto.Role) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(RoleHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(RoleSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func RoleWriteOutputOne(obj *edgeproto.Role) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(RoleHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(RoleSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}

var LoginUserCmd = &cobra.Command{
	Use: "LoginUser",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return LoginUser(&UserIn)
	},
}

func LoginUser(in *edgeproto.User) error {
	if UserApiCmd == nil {
		return fmt.Errorf("UserApi client not initialized")
	}
	ctx := context.Background()
	obj, err := UserApiCmd.LoginUser(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("LoginUser failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func LoginUsers(data []edgeproto.User, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("LoginUser %v\n", data[ii])
		myerr := LoginUser(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CreateUserCmd = &cobra.Command{
	Use: "CreateUser",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return CreateUser(&UserIn)
	},
}

func CreateUser(in *edgeproto.User) error {
	if UserApiCmd == nil {
		return fmt.Errorf("UserApi client not initialized")
	}
	ctx := context.Background()
	obj, err := UserApiCmd.CreateUser(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateUser failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func CreateUsers(data []edgeproto.User, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateUser %v\n", data[ii])
		myerr := CreateUser(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateUserCmd = &cobra.Command{
	Use: "UpdateUser",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		UserSetFields()
		return UpdateUser(&UserIn)
	},
}

func UpdateUser(in *edgeproto.User) error {
	if UserApiCmd == nil {
		return fmt.Errorf("UserApi client not initialized")
	}
	ctx := context.Background()
	obj, err := UserApiCmd.UpdateUser(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateUser failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func UpdateUsers(data []edgeproto.User, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateUser %v\n", data[ii])
		myerr := UpdateUser(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteUserCmd = &cobra.Command{
	Use: "DeleteUser",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return DeleteUser(&UserIn)
	},
}

func DeleteUser(in *edgeproto.User) error {
	if UserApiCmd == nil {
		return fmt.Errorf("UserApi client not initialized")
	}
	ctx := context.Background()
	obj, err := UserApiCmd.DeleteUser(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteUser failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func DeleteUsers(data []edgeproto.User, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteUser %v\n", data[ii])
		myerr := DeleteUser(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowUserCmd = &cobra.Command{
	Use: "ShowUser",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return ShowUser(&UserIn)
	},
}

func ShowUser(in *edgeproto.User) error {
	if UserApiCmd == nil {
		return fmt.Errorf("UserApi client not initialized")
	}
	ctx := context.Background()
	stream, err := UserApiCmd.ShowUser(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowUser failed: %s", errstr)
	}
	objs := make([]*edgeproto.User, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowUser recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	UserWriteOutputArray(objs)
	return nil
}

func ShowUsers(data []edgeproto.User, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowUser %v\n", data[ii])
		myerr := ShowUser(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UserApiCmds = []*cobra.Command{
	LoginUserCmd,
	CreateUserCmd,
	UpdateUserCmd,
	DeleteUserCmd,
	ShowUserCmd,
}

var AddRoleCmd = &cobra.Command{
	Use: "AddRole",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseRoleEnums()
		if err != nil {
			return fmt.Errorf("AddRole failed: %s", err.Error())
		}
		return AddRole(&RoleIn)
	},
}

func AddRole(in *edgeproto.Role) error {
	if RoleApiCmd == nil {
		return fmt.Errorf("RoleApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RoleApiCmd.AddRole(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddRole failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func AddRoles(data []edgeproto.Role, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddRole %v\n", data[ii])
		myerr := AddRole(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveRoleCmd = &cobra.Command{
	Use: "RemoveRole",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseRoleEnums()
		if err != nil {
			return fmt.Errorf("RemoveRole failed: %s", err.Error())
		}
		return RemoveRole(&RoleIn)
	},
}

func RemoveRole(in *edgeproto.Role) error {
	if RoleApiCmd == nil {
		return fmt.Errorf("RoleApi client not initialized")
	}
	ctx := context.Background()
	obj, err := RoleApiCmd.RemoveRole(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveRole failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func RemoveRoles(data []edgeproto.Role, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveRole %v\n", data[ii])
		myerr := RemoveRole(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RoleApiCmds = []*cobra.Command{
	AddRoleCmd,
	RemoveRoleCmd,
}

func init() {
	UserFlagSet.Int64Var(&UserIn.Key.UserId, "key-userid", 0, "Key.UserId")
	UserFlagSet.StringVar(&UserIn.Name, "name", "", "Name")
	UserFlagSet.StringVar(&UserIn.Nickname, "nickname", "", "Nickname")
	UserFlagSet.StringVar(&UserIn.Email, "email", "", "Email")
	UserFlagSet.BoolVar(&UserIn.EmailVerified, "emailverified", false, "EmailVerified")
	UserFlagSet.StringVar(&UserIn.Password, "password", "", "Password")
	UserFlagSet.StringVar(&UserIn.Passhash, "passhash", "", "Passhash")
	UserFlagSet.StringVar(&UserIn.FamilyName, "familyname", "", "FamilyName")
	UserFlagSet.StringVar(&UserIn.GivenName, "givenname", "", "GivenName")
	UserFlagSet.StringVar(&UserIn.Picture, "picture", "", "Picture")
	RoleFlagSet.Int64Var(&RoleIn.Key.Id, "key-id", 0, "Key.Id")
	RoleFlagSet.Int64Var(&RoleIn.UserId, "userid", 0, "UserId")
	RoleFlagSet.StringVar(&RoleInOrgType, "orgtype", "", "one of [OrgTypeUnknown OrgTypeAdmin OrgTypeDeveloper OrgTypeOperator]")
	RoleFlagSet.StringVar(&RoleIn.OrgName, "orgname", "", "OrgName")
	RoleFlagSet.StringVar(&RoleInRoleType, "roletype", "", "one of [RoleTypeUnknown RoleTypeAdmin RoleTypeReadOnly]")
	LoginUserCmd.Flags().AddFlagSet(UserFlagSet)
	CreateUserCmd.Flags().AddFlagSet(UserFlagSet)
	UpdateUserCmd.Flags().AddFlagSet(UserFlagSet)
	DeleteUserCmd.Flags().AddFlagSet(UserFlagSet)
	ShowUserCmd.Flags().AddFlagSet(UserFlagSet)
	AddRoleCmd.Flags().AddFlagSet(RoleFlagSet)
	RemoveRoleCmd.Flags().AddFlagSet(RoleFlagSet)
}

func UserApiAllowNoConfig() {
	LoginUserCmd.Flags().AddFlagSet(UserNoConfigFlagSet)
	CreateUserCmd.Flags().AddFlagSet(UserNoConfigFlagSet)
	UpdateUserCmd.Flags().AddFlagSet(UserNoConfigFlagSet)
	DeleteUserCmd.Flags().AddFlagSet(UserNoConfigFlagSet)
	ShowUserCmd.Flags().AddFlagSet(UserNoConfigFlagSet)
}

func RoleApiAllowNoConfig() {
	AddRoleCmd.Flags().AddFlagSet(RoleNoConfigFlagSet)
	RemoveRoleCmd.Flags().AddFlagSet(RoleNoConfigFlagSet)
}

func UserSetFields() {
	UserIn.Fields = make([]string, 0)
	if UserFlagSet.Lookup("key-userid").Changed {
		UserIn.Fields = append(UserIn.Fields, "2.1")
	}
	if UserFlagSet.Lookup("name").Changed {
		UserIn.Fields = append(UserIn.Fields, "3")
	}
	if UserFlagSet.Lookup("nickname").Changed {
		UserIn.Fields = append(UserIn.Fields, "4")
	}
	if UserFlagSet.Lookup("email").Changed {
		UserIn.Fields = append(UserIn.Fields, "5")
	}
	if UserFlagSet.Lookup("emailverified").Changed {
		UserIn.Fields = append(UserIn.Fields, "6")
	}
	if UserFlagSet.Lookup("password").Changed {
		UserIn.Fields = append(UserIn.Fields, "7")
	}
	if UserFlagSet.Lookup("passhash").Changed {
		UserIn.Fields = append(UserIn.Fields, "8")
	}
	if UserFlagSet.Lookup("familyname").Changed {
		UserIn.Fields = append(UserIn.Fields, "9")
	}
	if UserFlagSet.Lookup("givenname").Changed {
		UserIn.Fields = append(UserIn.Fields, "10")
	}
	if UserFlagSet.Lookup("picture").Changed {
		UserIn.Fields = append(UserIn.Fields, "11")
	}
}

func parseRoleEnums() error {
	if RoleInOrgType != "" {
		switch RoleInOrgType {
		case "OrgTypeUnknown":
			RoleIn.OrgType = edgeproto.OrgType(0)
		case "OrgTypeAdmin":
			RoleIn.OrgType = edgeproto.OrgType(1)
		case "OrgTypeDeveloper":
			RoleIn.OrgType = edgeproto.OrgType(2)
		case "OrgTypeOperator":
			RoleIn.OrgType = edgeproto.OrgType(3)
		default:
			return errors.New("Invalid value for RoleInOrgType")
		}
	}
	if RoleInRoleType != "" {
		switch RoleInRoleType {
		case "RoleTypeUnknown":
			RoleIn.RoleType = edgeproto.RoleType(0)
		case "RoleTypeAdmin":
			RoleIn.RoleType = edgeproto.RoleType(1)
		case "RoleTypeReadOnly":
			RoleIn.RoleType = edgeproto.RoleType(2)
		default:
			return errors.New("Invalid value for RoleInRoleType")
		}
	}
	return nil
}
