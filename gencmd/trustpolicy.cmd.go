// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trustpolicy.proto

package gencmd

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/cli"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var TrustPolicyApiCmd edgeproto.TrustPolicyApiClient

var CreateTrustPolicyCmd = &cli.Command{
	Use:          "CreateTrustPolicy",
	RequiredArgs: strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:  &TrustPolicySpecialArgs,
	Comments:     TrustPolicyComments,
	ReqData:      &edgeproto.TrustPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateTrustPolicy,
}

func runCreateTrustPolicy(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.TrustPolicy)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateTrustPolicy(c, obj)
}

func CreateTrustPolicy(c *cli.Command, in *edgeproto.TrustPolicy) error {
	if TrustPolicyApiCmd == nil {
		return fmt.Errorf("TrustPolicyApi client not initialized")
	}
	ctx := context.Background()
	stream, err := TrustPolicyApiCmd.CreateTrustPolicy(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateTrustPolicy failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("CreateTrustPolicy recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateTrustPolicys(c *cli.Command, data []edgeproto.TrustPolicy, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateTrustPolicy %v\n", data[ii])
		myerr := CreateTrustPolicy(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteTrustPolicyCmd = &cli.Command{
	Use:          "DeleteTrustPolicy",
	RequiredArgs: strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:  &TrustPolicySpecialArgs,
	Comments:     TrustPolicyComments,
	ReqData:      &edgeproto.TrustPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteTrustPolicy,
}

func runDeleteTrustPolicy(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.TrustPolicy)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteTrustPolicy(c, obj)
}

func DeleteTrustPolicy(c *cli.Command, in *edgeproto.TrustPolicy) error {
	if TrustPolicyApiCmd == nil {
		return fmt.Errorf("TrustPolicyApi client not initialized")
	}
	ctx := context.Background()
	stream, err := TrustPolicyApiCmd.DeleteTrustPolicy(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteTrustPolicy failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("DeleteTrustPolicy recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteTrustPolicys(c *cli.Command, data []edgeproto.TrustPolicy, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteTrustPolicy %v\n", data[ii])
		myerr := DeleteTrustPolicy(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateTrustPolicyCmd = &cli.Command{
	Use:          "UpdateTrustPolicy",
	RequiredArgs: strings.Join(TrustPolicyRequiredArgs, " "),
	OptionalArgs: strings.Join(TrustPolicyOptionalArgs, " "),
	AliasArgs:    strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:  &TrustPolicySpecialArgs,
	Comments:     TrustPolicyComments,
	ReqData:      &edgeproto.TrustPolicy{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateTrustPolicy,
}

func runUpdateTrustPolicy(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.TrustPolicy)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateTrustPolicy(c, obj)
}

func UpdateTrustPolicy(c *cli.Command, in *edgeproto.TrustPolicy) error {
	if TrustPolicyApiCmd == nil {
		return fmt.Errorf("TrustPolicyApi client not initialized")
	}
	ctx := context.Background()
	stream, err := TrustPolicyApiCmd.UpdateTrustPolicy(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateTrustPolicy failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("UpdateTrustPolicy recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateTrustPolicys(c *cli.Command, data []edgeproto.TrustPolicy, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateTrustPolicy %v\n", data[ii])
		myerr := UpdateTrustPolicy(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowTrustPolicyCmd = &cli.Command{
	Use:          "ShowTrustPolicy",
	OptionalArgs: strings.Join(append(TrustPolicyRequiredArgs, TrustPolicyOptionalArgs...), " "),
	AliasArgs:    strings.Join(TrustPolicyAliasArgs, " "),
	SpecialArgs:  &TrustPolicySpecialArgs,
	Comments:     TrustPolicyComments,
	ReqData:      &edgeproto.TrustPolicy{},
	ReplyData:    &edgeproto.TrustPolicy{},
	Run:          runShowTrustPolicy,
}

func runShowTrustPolicy(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.TrustPolicy)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowTrustPolicy(c, obj)
}

func ShowTrustPolicy(c *cli.Command, in *edgeproto.TrustPolicy) error {
	if TrustPolicyApiCmd == nil {
		return fmt.Errorf("TrustPolicyApi client not initialized")
	}
	ctx := context.Background()
	stream, err := TrustPolicyApiCmd.ShowTrustPolicy(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowTrustPolicy failed: %s", errstr)
	}

	objs := make([]*edgeproto.TrustPolicy, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowTrustPolicy recv failed: %s", errstr)
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowTrustPolicys(c *cli.Command, data []edgeproto.TrustPolicy, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowTrustPolicy %v\n", data[ii])
		myerr := ShowTrustPolicy(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var TrustPolicyApiCmds = []*cobra.Command{
	CreateTrustPolicyCmd.GenCmd(),
	DeleteTrustPolicyCmd.GenCmd(),
	UpdateTrustPolicyCmd.GenCmd(),
	ShowTrustPolicyCmd.GenCmd(),
}

var SecurityRuleRequiredArgs = []string{}
var SecurityRuleOptionalArgs = []string{
	"protocol",
	"portrangemin",
	"portrangemax",
	"remotecidr",
}
var SecurityRuleAliasArgs = []string{}
var SecurityRuleComments = map[string]string{
	"protocol":     "TCP, UDP, ICMP",
	"portrangemin": "TCP or UDP port range start",
	"portrangemax": "TCP or UDP port range end",
	"remotecidr":   "Remote CIDR X.X.X.X/X",
}
var SecurityRuleSpecialArgs = map[string]string{}
var TrustPolicyRequiredArgs = []string{
	"cloudlet-org",
	"name",
}
var TrustPolicyOptionalArgs = []string{
	"outboundsecurityrules:empty",
	"outboundsecurityrules:#.protocol",
	"outboundsecurityrules:#.portrangemin",
	"outboundsecurityrules:#.portrangemax",
	"outboundsecurityrules:#.remotecidr",
}
var TrustPolicyAliasArgs = []string{
	"cloudlet-org=key.organization",
	"name=key.name",
}
var TrustPolicyComments = map[string]string{
	"fields":                               "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                         "Name of the organization for the cluster that this policy will apply to",
	"name":                                 "Policy name",
	"outboundsecurityrules:empty":          "List of outbound security rules for whitelisting traffic, specify outboundsecurityrules:empty=true to clear",
	"outboundsecurityrules:#.protocol":     "TCP, UDP, ICMP",
	"outboundsecurityrules:#.portrangemin": "TCP or UDP port range start",
	"outboundsecurityrules:#.portrangemax": "TCP or UDP port range end",
	"outboundsecurityrules:#.remotecidr":   "Remote CIDR X.X.X.X/X",
	"deleteprepare":                        "Preparing to be deleted",
}
var TrustPolicySpecialArgs = map[string]string{
	"fields": "StringArray",
}
