// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
Package gencmd is a generated protocol buffer package.

It is generated from these files:
	app.proto
	app_inst.proto
	cloud-resource-manager.proto
	cloudlet.proto
	developer.proto
	loc.proto
	notice.proto
	operator.proto
	result.proto

It has these top-level messages:
	AppKey
	App
	AppInstKey
	AppInst
	CloudResource
	EdgeCloudApp
	EdgeCloudApplication
	CloudletKey
	Cloudlet
	DeveloperKey
	Developer
	Loc
	Notice
	NoticeReply
	OperatorCode
	OperatorKey
	Operator
	Result
*/
package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var AppApiCmd edgeproto.AppApiClient
var AppIn edgeproto.App
var AppFlagSet = pflag.NewFlagSet("App", pflag.ExitOnError)

func AppKeySlicer(in *edgeproto.AppKey) []string {
	s := make([]string, 0, 3)
	s = append(s, in.DeveloperKey.Name)
	s = append(s, in.Name)
	s = append(s, in.Version)
	return s
}

func AppKeyHeaderSlicer() []string {
	s := make([]string, 0, 3)
	s = append(s, "DeveloperKey-Name")
	s = append(s, "Name")
	s = append(s, "Version")
	return s
}

func AppSlicer(in *edgeproto.App) []string {
	s := make([]string, 0, 3)
	s = append(s, in.Key.DeveloperKey.Name)
	s = append(s, in.Key.Name)
	s = append(s, in.Key.Version)
	s = append(s, in.AppPath)
	return s
}

func AppHeaderSlicer() []string {
	s := make([]string, 0, 3)
	s = append(s, "Key-DeveloperKey-Name")
	s = append(s, "Key-Name")
	s = append(s, "Key-Version")
	s = append(s, "AppPath")
	return s
}

var CreateAppCmd = &cobra.Command{
	Use: "CreateApp",
	Run: func(cmd *cobra.Command, args []string) {
		if AppApiCmd == nil {
			fmt.Println("AppApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := AppApiCmd.CreateApp(ctx, &AppIn)
		cancel()
		if err != nil {
			fmt.Println("CreateApp failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var DeleteAppCmd = &cobra.Command{
	Use: "DeleteApp",
	Run: func(cmd *cobra.Command, args []string) {
		if AppApiCmd == nil {
			fmt.Println("AppApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := AppApiCmd.DeleteApp(ctx, &AppIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteApp failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var UpdateAppCmd = &cobra.Command{
	Use: "UpdateApp",
	Run: func(cmd *cobra.Command, args []string) {
		if AppApiCmd == nil {
			fmt.Println("AppApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		out, err := AppApiCmd.UpdateApp(ctx, &AppIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateApp failed: ", err)
		} else {
			headers := ResultHeaderSlicer()
			data := ResultSlicer(out)
			for ii := 0; ii < len(headers) && ii < len(data); ii++ {
				fmt.Println(headers[ii] + ": " + data[ii])
			}
		}
	},
}

var ShowAppCmd = &cobra.Command{
	Use: "ShowApp",
	Run: func(cmd *cobra.Command, args []string) {
		if AppApiCmd == nil {
			fmt.Println("AppApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		count := 0
		fmt.Fprintln(output, strings.Join(AppHeaderSlicer(), "\t"))
		defer cancel()
		stream, err := AppApiCmd.ShowApp(ctx, &AppIn)
		if err != nil {
			fmt.Println("ShowApp failed: ", err)
			return
		}
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowApp recv failed: ", err)
				break
			}
			fmt.Fprintln(output, strings.Join(AppSlicer(obj), "\t"))
			count++
		}
		if count > 0 {
			output.Flush()
		}
	},
}

func init() {
	AppFlagSet.StringVar(&AppIn.Key.DeveloperKey.Name, "key-developerkey-name", "", "Key.DeveloperKey.Name")
	AppFlagSet.StringVar(&AppIn.Key.Name, "key-name", "", "Key.Name")
	AppFlagSet.StringVar(&AppIn.Key.Version, "key-version", "", "Key.Version")
	AppFlagSet.StringVar(&AppIn.AppPath, "apppath", "", "AppPath")
	CreateAppCmd.Flags().AddFlagSet(AppFlagSet)
	DeleteAppCmd.Flags().AddFlagSet(AppFlagSet)
	UpdateAppCmd.Flags().AddFlagSet(AppFlagSet)
	ShowAppCmd.Flags().AddFlagSet(AppFlagSet)
}
