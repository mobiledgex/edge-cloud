// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package gencmd

import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var PlatformApiCmd edgeproto.PlatformApiClient
var CloudletApiCmd edgeproto.CloudletApiClient
var CloudletInfoApiCmd edgeproto.CloudletInfoApiClient
var CloudletMetricsApiCmd edgeproto.CloudletMetricsApiClient
var CloudletIn edgeproto.Cloudlet
var CloudletFlagSet = pflag.NewFlagSet("Cloudlet", pflag.ExitOnError)
var CloudletNoConfigFlagSet = pflag.NewFlagSet("CloudletNoConfig", pflag.ExitOnError)
var CloudletInIpSupport string
var CloudletInState string
var CloudletInfoIn edgeproto.CloudletInfo
var CloudletInfoFlagSet = pflag.NewFlagSet("CloudletInfo", pflag.ExitOnError)
var CloudletInfoNoConfigFlagSet = pflag.NewFlagSet("CloudletInfoNoConfig", pflag.ExitOnError)
var CloudletInfoInState string
var CloudletMetricsIn edgeproto.CloudletMetrics
var CloudletMetricsFlagSet = pflag.NewFlagSet("CloudletMetrics", pflag.ExitOnError)
var CloudletMetricsNoConfigFlagSet = pflag.NewFlagSet("CloudletMetricsNoConfig", pflag.ExitOnError)
var PlatformIn edgeproto.Platform
var PlatformFlagSet = pflag.NewFlagSet("Platform", pflag.ExitOnError)
var PlatformNoConfigFlagSet = pflag.NewFlagSet("PlatformNoConfig", pflag.ExitOnError)
var PlatformInType string
var PlatformTypeStrings = []string{
	"Fake",
	"Dind",
	"Openstack",
}

var CloudletStateStrings = []string{
	"CloudletStateUnknown",
	"CloudletStateErrors",
	"CloudletStateReady",
	"CloudletStateOffline",
	"CloudletStateNotPresent",
}

func CloudletKeySlicer(in *edgeproto.CloudletKey) []string {
	s := make([]string, 0, 2)
	s = append(s, in.OperatorKey.Name)
	s = append(s, in.Name)
	return s
}

func CloudletKeyHeaderSlicer() []string {
	s := make([]string, 0, 2)
	s = append(s, "OperatorKey-Name")
	s = append(s, "Name")
	return s
}

func CloudletKeyWriteOutputArray(objs []*edgeproto.CloudletKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletKeyWriteOutputOne(obj *edgeproto.CloudletKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func OperationTimeLimitsSlicer(in *edgeproto.OperationTimeLimits) []string {
	s := make([]string, 0, 6)
	s = append(s, strconv.FormatUint(uint64(in.CreateClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.UpdateClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.DeleteClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.CreateAppInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.UpdateAppInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.DeleteAppInstTimeout), 10))
	return s
}

func OperationTimeLimitsHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "CreateClusterInstTimeout")
	s = append(s, "UpdateClusterInstTimeout")
	s = append(s, "DeleteClusterInstTimeout")
	s = append(s, "CreateAppInstTimeout")
	s = append(s, "UpdateAppInstTimeout")
	s = append(s, "DeleteAppInstTimeout")
	return s
}

func OperationTimeLimitsWriteOutputArray(objs []*edgeproto.OperationTimeLimits) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(OperationTimeLimitsHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(OperationTimeLimitsSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func OperationTimeLimitsWriteOutputOne(obj *edgeproto.OperationTimeLimits) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(OperationTimeLimitsHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(OperationTimeLimitsSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletInfraCommonSlicer(in *edgeproto.CloudletInfraCommon) []string {
	s := make([]string, 0, 8)
	s = append(s, in.DockerRegistry)
	s = append(s, in.DnsZone)
	s = append(s, in.RegistryFileServer)
	s = append(s, in.CfKey)
	s = append(s, in.CfUser)
	s = append(s, in.DockerRegPass)
	s = append(s, in.NetworkScheme)
	s = append(s, in.DockerRegistrySecret)
	return s
}

func CloudletInfraCommonHeaderSlicer() []string {
	s := make([]string, 0, 8)
	s = append(s, "DockerRegistry")
	s = append(s, "DnsZone")
	s = append(s, "RegistryFileServer")
	s = append(s, "CfKey")
	s = append(s, "CfUser")
	s = append(s, "DockerRegPass")
	s = append(s, "NetworkScheme")
	s = append(s, "DockerRegistrySecret")
	return s
}

func CloudletInfraCommonWriteOutputArray(objs []*edgeproto.CloudletInfraCommon) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfraCommonHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletInfraCommonSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletInfraCommonWriteOutputOne(obj *edgeproto.CloudletInfraCommon) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfraCommonHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletInfraCommonSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func AzurePropertiesSlicer(in *edgeproto.AzureProperties) []string {
	s := make([]string, 0, 4)
	s = append(s, in.Location)
	s = append(s, in.ResourceGroup)
	s = append(s, in.UserName)
	s = append(s, in.Password)
	return s
}

func AzurePropertiesHeaderSlicer() []string {
	s := make([]string, 0, 4)
	s = append(s, "Location")
	s = append(s, "ResourceGroup")
	s = append(s, "UserName")
	s = append(s, "Password")
	return s
}

func AzurePropertiesWriteOutputArray(objs []*edgeproto.AzureProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AzurePropertiesHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(AzurePropertiesSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func AzurePropertiesWriteOutputOne(obj *edgeproto.AzureProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(AzurePropertiesHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(AzurePropertiesSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func GcpPropertiesSlicer(in *edgeproto.GcpProperties) []string {
	s := make([]string, 0, 4)
	s = append(s, in.Project)
	s = append(s, in.Zone)
	s = append(s, in.ServiceAccount)
	s = append(s, in.GcpAuthKeyUrl)
	return s
}

func GcpPropertiesHeaderSlicer() []string {
	s := make([]string, 0, 4)
	s = append(s, "Project")
	s = append(s, "Zone")
	s = append(s, "ServiceAccount")
	s = append(s, "GcpAuthKeyUrl")
	return s
}

func GcpPropertiesWriteOutputArray(objs []*edgeproto.GcpProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(GcpPropertiesHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(GcpPropertiesSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func GcpPropertiesWriteOutputOne(obj *edgeproto.GcpProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(GcpPropertiesHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(GcpPropertiesSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func OpenStackPropertiesSlicer(in *edgeproto.OpenStackProperties) []string {
	s := make([]string, 0, 5)
	s = append(s, in.OsExternalNetworkName)
	s = append(s, in.OsImageName)
	s = append(s, in.OsExternalRouterName)
	s = append(s, in.OsMexNetwork)
	return s
}

func OpenStackPropertiesHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "OsExternalNetworkName")
	s = append(s, "OsImageName")
	s = append(s, "OsExternalRouterName")
	s = append(s, "OsMexNetwork")
	return s
}

func OpenStackPropertiesWriteOutputArray(objs []*edgeproto.OpenStackProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(OpenStackPropertiesHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(OpenStackPropertiesSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func OpenStackPropertiesWriteOutputOne(obj *edgeproto.OpenStackProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(OpenStackPropertiesHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(OpenStackPropertiesSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletInfraPropertiesSlicer(in *edgeproto.CloudletInfraProperties) []string {
	s := make([]string, 0, 5)
	s = append(s, in.CloudletKind)
	s = append(s, in.MexosContainerImageName)
	if in.OpenstackProperties == nil {
		in.OpenstackProperties = &edgeproto.OpenStackProperties{}
	}
	s = append(s, in.OpenstackProperties.OsExternalNetworkName)
	s = append(s, in.OpenstackProperties.OsImageName)
	s = append(s, in.OpenstackProperties.OsExternalRouterName)
	s = append(s, in.OpenstackProperties.OsMexNetwork)
	if in.AzureProperties == nil {
		in.AzureProperties = &edgeproto.AzureProperties{}
	}
	s = append(s, in.AzureProperties.Location)
	s = append(s, in.AzureProperties.ResourceGroup)
	s = append(s, in.AzureProperties.UserName)
	s = append(s, in.AzureProperties.Password)
	if in.GcpProperties == nil {
		in.GcpProperties = &edgeproto.GcpProperties{}
	}
	s = append(s, in.GcpProperties.Project)
	s = append(s, in.GcpProperties.Zone)
	s = append(s, in.GcpProperties.ServiceAccount)
	s = append(s, in.GcpProperties.GcpAuthKeyUrl)
	return s
}

func CloudletInfraPropertiesHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "CloudletKind")
	s = append(s, "MexosContainerImageName")
	s = append(s, "OpenstackProperties-OsExternalNetworkName")
	s = append(s, "OpenstackProperties-OsImageName")
	s = append(s, "OpenstackProperties-OsExternalRouterName")
	s = append(s, "OpenstackProperties-OsMexNetwork")
	s = append(s, "AzureProperties-Location")
	s = append(s, "AzureProperties-ResourceGroup")
	s = append(s, "AzureProperties-UserName")
	s = append(s, "AzureProperties-Password")
	s = append(s, "GcpProperties-Project")
	s = append(s, "GcpProperties-Zone")
	s = append(s, "GcpProperties-ServiceAccount")
	s = append(s, "GcpProperties-GcpAuthKeyUrl")
	return s
}

func CloudletInfraPropertiesWriteOutputArray(objs []*edgeproto.CloudletInfraProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfraPropertiesHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletInfraPropertiesSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletInfraPropertiesWriteOutputOne(obj *edgeproto.CloudletInfraProperties) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfraPropertiesHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletInfraPropertiesSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func PlatformKeySlicer(in *edgeproto.PlatformKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func PlatformKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func PlatformKeyWriteOutputArray(objs []*edgeproto.PlatformKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(PlatformKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(PlatformKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func PlatformKeyWriteOutputOne(obj *edgeproto.PlatformKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(PlatformKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(PlatformKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func PlatformSlicer(in *edgeproto.Platform) []string {
	s := make([]string, 0, 6)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Name)
	s = append(s, edgeproto.PlatformType_CamelName[int32(in.Type)])
	s = append(s, in.Flavor.Name)
	s = append(s, in.RegistryPath)
	s = append(s, in.ImagePath)
	return s
}

func PlatformHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "Fields")
	s = append(s, "Key-Name")
	s = append(s, "Type")
	s = append(s, "Flavor-Name")
	s = append(s, "RegistryPath")
	s = append(s, "ImagePath")
	return s
}

func PlatformWriteOutputArray(objs []*edgeproto.Platform) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(PlatformHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(PlatformSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func PlatformWriteOutputOne(obj *edgeproto.Platform) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(PlatformHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(PlatformSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletSlicer(in *edgeproto.Cloudlet) []string {
	s := make([]string, 0, 18)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.OperatorKey.Name)
	s = append(s, in.Key.Name)
	s = append(s, in.AccessCredentials)
	s = append(s, strconv.FormatFloat(float64(in.Location.Latitude), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.Longitude), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.HorizontalAccuracy), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.VerticalAccuracy), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.Altitude), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.Course), 'e', -1, 32))
	s = append(s, strconv.FormatFloat(float64(in.Location.Speed), 'e', -1, 32))
	if in.Location.Timestamp == nil {
		in.Location.Timestamp = &distributed_match_engine.Timestamp{}
	}
	s = append(s, strconv.FormatUint(uint64(in.Location.Timestamp.Seconds), 10))
	s = append(s, strconv.FormatUint(uint64(in.Location.Timestamp.Nanos), 10))
	s = append(s, edgeproto.IpSupport_CamelName[int32(in.IpSupport)])
	s = append(s, in.StaticIps)
	s = append(s, strconv.FormatUint(uint64(in.NumDynamicIps), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.CreateClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.UpdateClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.DeleteClusterInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.CreateAppInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.UpdateAppInstTimeout), 10))
	s = append(s, strconv.FormatUint(uint64(in.TimeLimits.DeleteAppInstTimeout), 10))
	s = append(s, in.NotifyCtrlAddrs)
	s = append(s, in.Platform.Name)
	s = append(s, in.PhysicalName)
	s = append(s, edgeproto.TrackedState_CamelName[int32(in.State)])
	if in.Errors == nil {
		in.Errors = make([]string, 1)
	}
	s = append(s, in.Errors[0])
	s = append(s, strconv.FormatUint(uint64(in.Status.TaskNumber), 10))
	s = append(s, strconv.FormatUint(uint64(in.Status.MaxTasks), 10))
	s = append(s, in.Status.TaskName)
	s = append(s, in.Status.StepName)
	s = append(s, in.VaultAddr)
	s = append(s, in.TlsCertFile)
	s = append(s, in.CrmRoleId)
	s = append(s, in.CrmSecretId)
	return s
}

func CloudletHeaderSlicer() []string {
	s := make([]string, 0, 18)
	s = append(s, "Fields")
	s = append(s, "Key-OperatorKey-Name")
	s = append(s, "Key-Name")
	s = append(s, "AccessCredentials")
	s = append(s, "Location-Latitude")
	s = append(s, "Location-Longitude")
	s = append(s, "Location-HorizontalAccuracy")
	s = append(s, "Location-VerticalAccuracy")
	s = append(s, "Location-Altitude")
	s = append(s, "Location-Course")
	s = append(s, "Location-Speed")
	s = append(s, "Location-Timestamp-Seconds")
	s = append(s, "Location-Timestamp-Nanos")
	s = append(s, "IpSupport")
	s = append(s, "StaticIps")
	s = append(s, "NumDynamicIps")
	s = append(s, "TimeLimits-CreateClusterInstTimeout")
	s = append(s, "TimeLimits-UpdateClusterInstTimeout")
	s = append(s, "TimeLimits-DeleteClusterInstTimeout")
	s = append(s, "TimeLimits-CreateAppInstTimeout")
	s = append(s, "TimeLimits-UpdateAppInstTimeout")
	s = append(s, "TimeLimits-DeleteAppInstTimeout")
	s = append(s, "NotifyCtrlAddrs")
	s = append(s, "Platform-Name")
	s = append(s, "PhysicalName")
	s = append(s, "State")
	s = append(s, "Errors")
	s = append(s, "Status-TaskNumber")
	s = append(s, "Status-MaxTasks")
	s = append(s, "Status-TaskName")
	s = append(s, "Status-StepName")
	s = append(s, "VaultAddr")
	s = append(s, "TlsCertFile")
	s = append(s, "CrmRoleId")
	s = append(s, "CrmSecretId")
	return s
}

func CloudletWriteOutputArray(objs []*edgeproto.Cloudlet) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletWriteOutputOne(obj *edgeproto.Cloudlet) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func FlavorInfoSlicer(in *edgeproto.FlavorInfo) []string {
	s := make([]string, 0, 4)
	s = append(s, in.Name)
	s = append(s, strconv.FormatUint(uint64(in.Vcpus), 10))
	s = append(s, strconv.FormatUint(uint64(in.Ram), 10))
	s = append(s, strconv.FormatUint(uint64(in.Disk), 10))
	return s
}

func FlavorInfoHeaderSlicer() []string {
	s := make([]string, 0, 4)
	s = append(s, "Name")
	s = append(s, "Vcpus")
	s = append(s, "Ram")
	s = append(s, "Disk")
	return s
}

func FlavorInfoWriteOutputArray(objs []*edgeproto.FlavorInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(FlavorInfoHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(FlavorInfoSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func FlavorInfoWriteOutputOne(obj *edgeproto.FlavorInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(FlavorInfoHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(FlavorInfoSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletInfoSlicer(in *edgeproto.CloudletInfo) []string {
	s := make([]string, 0, 10)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.OperatorKey.Name)
	s = append(s, in.Key.Name)
	s = append(s, edgeproto.CloudletState_CamelName[int32(in.State)])
	s = append(s, strconv.FormatUint(uint64(in.NotifyId), 10))
	s = append(s, in.Controller)
	s = append(s, strconv.FormatUint(uint64(in.OsMaxRam), 10))
	s = append(s, strconv.FormatUint(uint64(in.OsMaxVcores), 10))
	s = append(s, strconv.FormatUint(uint64(in.OsMaxVolGb), 10))
	if in.Errors == nil {
		in.Errors = make([]string, 1)
	}
	s = append(s, in.Errors[0])
	if in.Flavors == nil {
		in.Flavors = make([]*edgeproto.FlavorInfo, 1)
	}
	if in.Flavors[0] == nil {
		in.Flavors[0] = &edgeproto.FlavorInfo{}
	}
	s = append(s, in.Flavors[0].Name)
	s = append(s, strconv.FormatUint(uint64(in.Flavors[0].Vcpus), 10))
	s = append(s, strconv.FormatUint(uint64(in.Flavors[0].Ram), 10))
	s = append(s, strconv.FormatUint(uint64(in.Flavors[0].Disk), 10))
	return s
}

func CloudletInfoHeaderSlicer() []string {
	s := make([]string, 0, 10)
	s = append(s, "Fields")
	s = append(s, "Key-OperatorKey-Name")
	s = append(s, "Key-Name")
	s = append(s, "State")
	s = append(s, "NotifyId")
	s = append(s, "Controller")
	s = append(s, "OsMaxRam")
	s = append(s, "OsMaxVcores")
	s = append(s, "OsMaxVolGb")
	s = append(s, "Errors")
	s = append(s, "Flavors-Name")
	s = append(s, "Flavors-Vcpus")
	s = append(s, "Flavors-Ram")
	s = append(s, "Flavors-Disk")
	return s
}

func CloudletInfoWriteOutputArray(objs []*edgeproto.CloudletInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfoHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletInfoSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletInfoWriteOutputOne(obj *edgeproto.CloudletInfo) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletInfoHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletInfoSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletMetricsSlicer(in *edgeproto.CloudletMetrics) []string {
	s := make([]string, 0, 1)
	s = append(s, strconv.FormatUint(uint64(in.Foo), 10))
	return s
}

func CloudletMetricsHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Foo")
	return s
}

func CloudletMetricsWriteOutputArray(objs []*edgeproto.CloudletMetrics) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletMetricsHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(CloudletMetricsSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func CloudletMetricsWriteOutputOne(obj *edgeproto.CloudletMetrics) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(CloudletMetricsHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(CloudletMetricsSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func CloudletHideTags(in *edgeproto.Cloudlet) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.TimeLimits = edgeproto.OperationTimeLimits{}
	}
	if _, found := tags["nocmp"]; found {
		in.State = 0
	}
	if _, found := tags["nocmp"]; found {
		in.Errors = nil
	}
}

var CreatePlatformCmd = &cobra.Command{
	Use: "CreatePlatform",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parsePlatformEnums()
		if err != nil {
			return fmt.Errorf("CreatePlatform failed: %s", err.Error())
		}
		return CreatePlatform(&PlatformIn)
	},
}

func CreatePlatform(in *edgeproto.Platform) error {
	if PlatformApiCmd == nil {
		return fmt.Errorf("PlatformApi client not initialized")
	}
	ctx := context.Background()
	obj, err := PlatformApiCmd.CreatePlatform(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreatePlatform failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func CreatePlatforms(data []edgeproto.Platform, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreatePlatform %v\n", data[ii])
		myerr := CreatePlatform(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeletePlatformCmd = &cobra.Command{
	Use: "DeletePlatform",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parsePlatformEnums()
		if err != nil {
			return fmt.Errorf("DeletePlatform failed: %s", err.Error())
		}
		return DeletePlatform(&PlatformIn)
	},
}

func DeletePlatform(in *edgeproto.Platform) error {
	if PlatformApiCmd == nil {
		return fmt.Errorf("PlatformApi client not initialized")
	}
	ctx := context.Background()
	obj, err := PlatformApiCmd.DeletePlatform(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeletePlatform failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func DeletePlatforms(data []edgeproto.Platform, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeletePlatform %v\n", data[ii])
		myerr := DeletePlatform(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdatePlatformCmd = &cobra.Command{
	Use: "UpdatePlatform",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parsePlatformEnums()
		if err != nil {
			return fmt.Errorf("UpdatePlatform failed: %s", err.Error())
		}
		PlatformSetFields()
		return UpdatePlatform(&PlatformIn)
	},
}

func UpdatePlatform(in *edgeproto.Platform) error {
	if PlatformApiCmd == nil {
		return fmt.Errorf("PlatformApi client not initialized")
	}
	ctx := context.Background()
	obj, err := PlatformApiCmd.UpdatePlatform(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdatePlatform failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func UpdatePlatforms(data []edgeproto.Platform, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdatePlatform %v\n", data[ii])
		myerr := UpdatePlatform(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowPlatformCmd = &cobra.Command{
	Use: "ShowPlatform",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parsePlatformEnums()
		if err != nil {
			return fmt.Errorf("ShowPlatform failed: %s", err.Error())
		}
		return ShowPlatform(&PlatformIn)
	},
}

func ShowPlatform(in *edgeproto.Platform) error {
	if PlatformApiCmd == nil {
		return fmt.Errorf("PlatformApi client not initialized")
	}
	ctx := context.Background()
	stream, err := PlatformApiCmd.ShowPlatform(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowPlatform failed: %s", errstr)
	}
	objs := make([]*edgeproto.Platform, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowPlatform recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	PlatformWriteOutputArray(objs)
	return nil
}

func ShowPlatforms(data []edgeproto.Platform, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowPlatform %v\n", data[ii])
		myerr := ShowPlatform(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var PlatformApiCmds = []*cobra.Command{
	CreatePlatformCmd,
	DeletePlatformCmd,
	UpdatePlatformCmd,
	ShowPlatformCmd,
}

var CreateCloudletCmd = &cobra.Command{
	Use: "CreateCloudlet",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletEnums()
		if err != nil {
			return fmt.Errorf("CreateCloudlet failed: %s", err.Error())
		}
		return CreateCloudlet(&CloudletIn)
	},
}

func CreateCloudlet(in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.CreateCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudlet failed: %s", errstr)
	}
	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("CreateCloudlet recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	ResultWriteOutputArray(objs)
	return nil
}

func CreateCloudlets(data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudlet %v\n", data[ii])
		myerr := CreateCloudlet(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletCmd = &cobra.Command{
	Use: "DeleteCloudlet",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletEnums()
		if err != nil {
			return fmt.Errorf("DeleteCloudlet failed: %s", err.Error())
		}
		return DeleteCloudlet(&CloudletIn)
	},
}

func DeleteCloudlet(in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.DeleteCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudlet failed: %s", errstr)
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("DeleteCloudlet recv failed: %s", err.Error())
		}
		ResultWriteOutputOne(obj)
	}
	return nil
}

func DeleteCloudlets(data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudlet %v\n", data[ii])
		myerr := DeleteCloudlet(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateCloudletCmd = &cobra.Command{
	Use: "UpdateCloudlet",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletEnums()
		if err != nil {
			return fmt.Errorf("UpdateCloudlet failed: %s", err.Error())
		}
		CloudletSetFields()
		return UpdateCloudlet(&CloudletIn)
	},
}

func UpdateCloudlet(in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.UpdateCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateCloudlet failed: %s", errstr)
	}
	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("UpdateCloudlet recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	ResultWriteOutputArray(objs)
	return nil
}

func UpdateCloudlets(data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateCloudlet %v\n", data[ii])
		myerr := UpdateCloudlet(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletCmd = &cobra.Command{
	Use: "ShowCloudlet",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletEnums()
		if err != nil {
			return fmt.Errorf("ShowCloudlet failed: %s", err.Error())
		}
		return ShowCloudlet(&CloudletIn)
	},
}

func ShowCloudlet(in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.ShowCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudlet failed: %s", errstr)
	}
	objs := make([]*edgeproto.Cloudlet, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudlet recv failed: %s", err.Error())
		}
		CloudletHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	CloudletWriteOutputArray(objs)
	return nil
}

func ShowCloudlets(data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudlet %v\n", data[ii])
		myerr := ShowCloudlet(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletApiCmds = []*cobra.Command{
	CreateCloudletCmd,
	DeleteCloudletCmd,
	UpdateCloudletCmd,
	ShowCloudletCmd,
}

var ShowCloudletInfoCmd = &cobra.Command{
	Use: "ShowCloudletInfo",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletInfoEnums()
		if err != nil {
			return fmt.Errorf("ShowCloudletInfo failed: %s", err.Error())
		}
		return ShowCloudletInfo(&CloudletInfoIn)
	},
}

func ShowCloudletInfo(in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletInfoApiCmd.ShowCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletInfo failed: %s", errstr)
	}
	objs := make([]*edgeproto.CloudletInfo, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletInfo recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	CloudletInfoWriteOutputArray(objs)
	return nil
}

func ShowCloudletInfos(data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletInfo %v\n", data[ii])
		myerr := ShowCloudletInfo(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var InjectCloudletInfoCmd = &cobra.Command{
	Use: "InjectCloudletInfo",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletInfoEnums()
		if err != nil {
			return fmt.Errorf("InjectCloudletInfo failed: %s", err.Error())
		}
		return InjectCloudletInfo(&CloudletInfoIn)
	},
}

func InjectCloudletInfo(in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletInfoApiCmd.InjectCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("InjectCloudletInfo failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func InjectCloudletInfos(data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("InjectCloudletInfo %v\n", data[ii])
		myerr := InjectCloudletInfo(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var EvictCloudletInfoCmd = &cobra.Command{
	Use: "EvictCloudletInfo",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		err := parseCloudletInfoEnums()
		if err != nil {
			return fmt.Errorf("EvictCloudletInfo failed: %s", err.Error())
		}
		return EvictCloudletInfo(&CloudletInfoIn)
	},
}

func EvictCloudletInfo(in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletInfoApiCmd.EvictCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("EvictCloudletInfo failed: %s", errstr)
	}
	ResultWriteOutputOne(obj)
	return nil
}

func EvictCloudletInfos(data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("EvictCloudletInfo %v\n", data[ii])
		myerr := EvictCloudletInfo(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletInfoApiCmds = []*cobra.Command{
	ShowCloudletInfoCmd,
	InjectCloudletInfoCmd,
	EvictCloudletInfoCmd,
}

var ShowCloudletMetricsCmd = &cobra.Command{
	Use: "ShowCloudletMetrics",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return ShowCloudletMetrics(&CloudletMetricsIn)
	},
}

func ShowCloudletMetrics(in *edgeproto.CloudletMetrics) error {
	if CloudletMetricsApiCmd == nil {
		return fmt.Errorf("CloudletMetricsApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletMetricsApiCmd.ShowCloudletMetrics(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletMetrics failed: %s", errstr)
	}
	objs := make([]*edgeproto.CloudletMetrics, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletMetrics recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	CloudletMetricsWriteOutputArray(objs)
	return nil
}

func ShowCloudletMetricss(data []edgeproto.CloudletMetrics, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletMetrics %v\n", data[ii])
		myerr := ShowCloudletMetrics(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletMetricsApiCmds = []*cobra.Command{
	ShowCloudletMetricsCmd,
}

func init() {
	PlatformFlagSet.StringVar(&PlatformIn.Key.Name, "key-name", "", "Key.Name")
	PlatformFlagSet.StringVar(&PlatformInType, "type", "", "one of [Fake Dind Openstack]")
	PlatformFlagSet.StringVar(&PlatformIn.Flavor.Name, "flavor-name", "", "Flavor.Name")
	PlatformFlagSet.StringVar(&PlatformIn.RegistryPath, "registrypath", "", "RegistryPath")
	PlatformFlagSet.StringVar(&PlatformIn.ImagePath, "imagepath", "", "ImagePath")
	CloudletFlagSet.StringVar(&CloudletIn.Key.OperatorKey.Name, "key-operatorkey-name", "", "Key.OperatorKey.Name")
	CloudletFlagSet.StringVar(&CloudletIn.Key.Name, "key-name", "", "Key.Name")
	CloudletFlagSet.StringVar(&CloudletIn.AccessCredentials, "accesscredentials", "", "AccessCredentials")
	CloudletFlagSet.Float64Var(&CloudletIn.Location.Latitude, "location-latitude", 0, "Location.Latitude")
	CloudletFlagSet.Float64Var(&CloudletIn.Location.Longitude, "location-longitude", 0, "Location.Longitude")
	CloudletNoConfigFlagSet.Float64Var(&CloudletIn.Location.HorizontalAccuracy, "location-horizontalaccuracy", 0, "Location.HorizontalAccuracy")
	CloudletNoConfigFlagSet.Float64Var(&CloudletIn.Location.VerticalAccuracy, "location-verticalaccuracy", 0, "Location.VerticalAccuracy")
	CloudletFlagSet.Float64Var(&CloudletIn.Location.Altitude, "location-altitude", 0, "Location.Altitude")
	CloudletNoConfigFlagSet.Float64Var(&CloudletIn.Location.Course, "location-course", 0, "Location.Course")
	CloudletNoConfigFlagSet.Float64Var(&CloudletIn.Location.Speed, "location-speed", 0, "Location.Speed")
	CloudletIn.Location.Timestamp = &distributed_match_engine.Timestamp{}
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.Location.Timestamp.Seconds, "location-timestamp-seconds", 0, "Location.Timestamp.Seconds")
	CloudletNoConfigFlagSet.Int32Var(&CloudletIn.Location.Timestamp.Nanos, "location-timestamp-nanos", 0, "Location.Timestamp.Nanos")
	CloudletFlagSet.StringVar(&CloudletInIpSupport, "ipsupport", "", "one of [IpSupportUnknown IpSupportStatic IpSupportDynamic]")
	CloudletFlagSet.StringVar(&CloudletIn.StaticIps, "staticips", "", "StaticIps")
	CloudletFlagSet.Int32Var(&CloudletIn.NumDynamicIps, "numdynamicips", 0, "NumDynamicIps")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.CreateClusterInstTimeout, "timelimits-createclusterinsttimeout", 0, "TimeLimits.CreateClusterInstTimeout")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.UpdateClusterInstTimeout, "timelimits-updateclusterinsttimeout", 0, "TimeLimits.UpdateClusterInstTimeout")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.DeleteClusterInstTimeout, "timelimits-deleteclusterinsttimeout", 0, "TimeLimits.DeleteClusterInstTimeout")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.CreateAppInstTimeout, "timelimits-createappinsttimeout", 0, "TimeLimits.CreateAppInstTimeout")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.UpdateAppInstTimeout, "timelimits-updateappinsttimeout", 0, "TimeLimits.UpdateAppInstTimeout")
	CloudletNoConfigFlagSet.Int64Var(&CloudletIn.TimeLimits.DeleteAppInstTimeout, "timelimits-deleteappinsttimeout", 0, "TimeLimits.DeleteAppInstTimeout")
	CloudletFlagSet.StringVar(&CloudletIn.NotifyCtrlAddrs, "notifyctrladdrs", "", "NotifyCtrlAddrs")
	CloudletFlagSet.StringVar(&CloudletIn.Platform.Name, "platform-name", "", "Platform.Name")
	CloudletFlagSet.StringVar(&CloudletIn.PhysicalName, "physicalname", "", "PhysicalName")
	CloudletFlagSet.StringVar(&CloudletInState, "state", "", "one of [TrackedStateUnknown NotPresent CreateRequested Creating CreateError Ready UpdateRequested Updating UpdateError DeleteRequested Deleting DeleteError DeletePrepare]")
	CloudletNoConfigFlagSet.Uint32Var(&CloudletIn.Status.TaskNumber, "status-tasknumber", 0, "Status.TaskNumber")
	CloudletNoConfigFlagSet.Uint32Var(&CloudletIn.Status.MaxTasks, "status-maxtasks", 0, "Status.MaxTasks")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.Status.TaskName, "status-taskname", "", "Status.TaskName")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.Status.StepName, "status-stepname", "", "Status.StepName")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.VaultAddr, "vaultaddr", "", "VaultAddr")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.TlsCertFile, "tlscertfile", "", "TlsCertFile")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.CrmRoleId, "crmroleid", "", "CrmRoleId")
	CloudletNoConfigFlagSet.StringVar(&CloudletIn.CrmSecretId, "crmsecretid", "", "CrmSecretId")
	CloudletInfoFlagSet.StringVar(&CloudletInfoIn.Key.OperatorKey.Name, "key-operatorkey-name", "", "Key.OperatorKey.Name")
	CloudletInfoFlagSet.StringVar(&CloudletInfoIn.Key.Name, "key-name", "", "Key.Name")
	CloudletInfoFlagSet.StringVar(&CloudletInfoInState, "state", "", "one of [CloudletStateUnknown CloudletStateErrors CloudletStateReady CloudletStateOffline CloudletStateNotPresent]")
	CloudletInfoFlagSet.Int64Var(&CloudletInfoIn.NotifyId, "notifyid", 0, "NotifyId")
	CloudletInfoFlagSet.StringVar(&CloudletInfoIn.Controller, "controller", "", "Controller")
	CloudletInfoFlagSet.Uint64Var(&CloudletInfoIn.OsMaxRam, "osmaxram", 0, "OsMaxRam")
	CloudletInfoFlagSet.Uint64Var(&CloudletInfoIn.OsMaxVcores, "osmaxvcores", 0, "OsMaxVcores")
	CloudletInfoFlagSet.Uint64Var(&CloudletInfoIn.OsMaxVolGb, "osmaxvolgb", 0, "OsMaxVolGb")
	CloudletMetricsFlagSet.Uint64Var(&CloudletMetricsIn.Foo, "foo", 0, "Foo")
	CreatePlatformCmd.Flags().AddFlagSet(PlatformFlagSet)
	DeletePlatformCmd.Flags().AddFlagSet(PlatformFlagSet)
	UpdatePlatformCmd.Flags().AddFlagSet(PlatformFlagSet)
	ShowPlatformCmd.Flags().AddFlagSet(PlatformFlagSet)
	CreateCloudletCmd.Flags().AddFlagSet(CloudletFlagSet)
	DeleteCloudletCmd.Flags().AddFlagSet(CloudletFlagSet)
	UpdateCloudletCmd.Flags().AddFlagSet(CloudletFlagSet)
	ShowCloudletCmd.Flags().AddFlagSet(CloudletFlagSet)
	ShowCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoFlagSet)
	InjectCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoFlagSet)
	EvictCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoFlagSet)
	ShowCloudletMetricsCmd.Flags().AddFlagSet(CloudletMetricsFlagSet)
}

func PlatformApiAllowNoConfig() {
	CreatePlatformCmd.Flags().AddFlagSet(PlatformNoConfigFlagSet)
	DeletePlatformCmd.Flags().AddFlagSet(PlatformNoConfigFlagSet)
	UpdatePlatformCmd.Flags().AddFlagSet(PlatformNoConfigFlagSet)
	ShowPlatformCmd.Flags().AddFlagSet(PlatformNoConfigFlagSet)
}

func CloudletApiAllowNoConfig() {
	CreateCloudletCmd.Flags().AddFlagSet(CloudletNoConfigFlagSet)
	DeleteCloudletCmd.Flags().AddFlagSet(CloudletNoConfigFlagSet)
	UpdateCloudletCmd.Flags().AddFlagSet(CloudletNoConfigFlagSet)
	ShowCloudletCmd.Flags().AddFlagSet(CloudletNoConfigFlagSet)
}

func CloudletInfoApiAllowNoConfig() {
	ShowCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoNoConfigFlagSet)
	InjectCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoNoConfigFlagSet)
	EvictCloudletInfoCmd.Flags().AddFlagSet(CloudletInfoNoConfigFlagSet)
}

func CloudletMetricsApiAllowNoConfig() {
	ShowCloudletMetricsCmd.Flags().AddFlagSet(CloudletMetricsNoConfigFlagSet)
}

func PlatformSetFields() {
	PlatformIn.Fields = make([]string, 0)
	if PlatformFlagSet.Lookup("key-name").Changed {
		PlatformIn.Fields = append(PlatformIn.Fields, "2.1")
	}
	if PlatformFlagSet.Lookup("type").Changed {
		PlatformIn.Fields = append(PlatformIn.Fields, "3")
	}
	if PlatformFlagSet.Lookup("flavor-name").Changed {
		PlatformIn.Fields = append(PlatformIn.Fields, "4.1")
	}
	if PlatformFlagSet.Lookup("registrypath").Changed {
		PlatformIn.Fields = append(PlatformIn.Fields, "5")
	}
	if PlatformFlagSet.Lookup("imagepath").Changed {
		PlatformIn.Fields = append(PlatformIn.Fields, "6")
	}
}

func CloudletSetFields() {
	CloudletIn.Fields = make([]string, 0)
	if CloudletFlagSet.Lookup("key-operatorkey-name").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "2.1.1")
	}
	if CloudletFlagSet.Lookup("key-name").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "2.2")
	}
	if CloudletFlagSet.Lookup("accesscredentials").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "4")
	}
	if CloudletFlagSet.Lookup("location-latitude").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.1")
	}
	if CloudletFlagSet.Lookup("location-longitude").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.2")
	}
	if CloudletNoConfigFlagSet.Lookup("location-horizontalaccuracy").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.3")
	}
	if CloudletNoConfigFlagSet.Lookup("location-verticalaccuracy").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.4")
	}
	if CloudletFlagSet.Lookup("location-altitude").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.5")
	}
	if CloudletNoConfigFlagSet.Lookup("location-course").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.6")
	}
	if CloudletNoConfigFlagSet.Lookup("location-speed").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.7")
	}
	if CloudletNoConfigFlagSet.Lookup("location-timestamp-seconds").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.8.1")
	}
	if CloudletNoConfigFlagSet.Lookup("location-timestamp-nanos").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "5.8.2")
	}
	if CloudletFlagSet.Lookup("ipsupport").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "6")
	}
	if CloudletFlagSet.Lookup("staticips").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "7")
	}
	if CloudletFlagSet.Lookup("numdynamicips").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "8")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-createclusterinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.1")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-updateclusterinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.2")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-deleteclusterinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.3")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-createappinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.4")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-updateappinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.5")
	}
	if CloudletNoConfigFlagSet.Lookup("timelimits-deleteappinsttimeout").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "9.6")
	}
	if CloudletFlagSet.Lookup("notifyctrladdrs").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "10")
	}
	if CloudletFlagSet.Lookup("platform-name").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "11.1")
	}
	if CloudletFlagSet.Lookup("physicalname").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "12")
	}
	if CloudletFlagSet.Lookup("state").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "13")
	}
	if CloudletNoConfigFlagSet.Lookup("status-tasknumber").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "15.1")
	}
	if CloudletNoConfigFlagSet.Lookup("status-maxtasks").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "15.2")
	}
	if CloudletNoConfigFlagSet.Lookup("status-taskname").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "15.3")
	}
	if CloudletNoConfigFlagSet.Lookup("status-stepname").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "15.4")
	}
	if CloudletNoConfigFlagSet.Lookup("vaultaddr").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "16")
	}
	if CloudletNoConfigFlagSet.Lookup("tlscertfile").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "17")
	}
	if CloudletNoConfigFlagSet.Lookup("crmroleid").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "18")
	}
	if CloudletNoConfigFlagSet.Lookup("crmsecretid").Changed {
		CloudletIn.Fields = append(CloudletIn.Fields, "19")
	}
}

func CloudletInfoSetFields() {
	CloudletInfoIn.Fields = make([]string, 0)
	if CloudletInfoFlagSet.Lookup("key-operatorkey-name").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "2.1.1")
	}
	if CloudletInfoFlagSet.Lookup("key-name").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "2.2")
	}
	if CloudletInfoFlagSet.Lookup("state").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "3")
	}
	if CloudletInfoFlagSet.Lookup("notifyid").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "4")
	}
	if CloudletInfoFlagSet.Lookup("controller").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "5")
	}
	if CloudletInfoFlagSet.Lookup("osmaxram").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "6")
	}
	if CloudletInfoFlagSet.Lookup("osmaxvcores").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "7")
	}
	if CloudletInfoFlagSet.Lookup("osmaxvolgb").Changed {
		CloudletInfoIn.Fields = append(CloudletInfoIn.Fields, "8")
	}
}

func parseCloudletEnums() error {
	if CloudletInIpSupport != "" {
		switch CloudletInIpSupport {
		case "IpSupportUnknown":
			CloudletIn.IpSupport = edgeproto.IpSupport(0)
		case "IpSupportStatic":
			CloudletIn.IpSupport = edgeproto.IpSupport(1)
		case "IpSupportDynamic":
			CloudletIn.IpSupport = edgeproto.IpSupport(2)
		default:
			return errors.New("Invalid value for CloudletInIpSupport")
		}
	}
	if CloudletInState != "" {
		switch CloudletInState {
		case "TrackedStateUnknown":
			CloudletIn.State = edgeproto.TrackedState(0)
		case "NotPresent":
			CloudletIn.State = edgeproto.TrackedState(1)
		case "CreateRequested":
			CloudletIn.State = edgeproto.TrackedState(2)
		case "Creating":
			CloudletIn.State = edgeproto.TrackedState(3)
		case "CreateError":
			CloudletIn.State = edgeproto.TrackedState(4)
		case "Ready":
			CloudletIn.State = edgeproto.TrackedState(5)
		case "UpdateRequested":
			CloudletIn.State = edgeproto.TrackedState(6)
		case "Updating":
			CloudletIn.State = edgeproto.TrackedState(7)
		case "UpdateError":
			CloudletIn.State = edgeproto.TrackedState(8)
		case "DeleteRequested":
			CloudletIn.State = edgeproto.TrackedState(9)
		case "Deleting":
			CloudletIn.State = edgeproto.TrackedState(10)
		case "DeleteError":
			CloudletIn.State = edgeproto.TrackedState(11)
		case "DeletePrepare":
			CloudletIn.State = edgeproto.TrackedState(12)
		default:
			return errors.New("Invalid value for CloudletInState")
		}
	}
	return nil
}

func parseCloudletInfoEnums() error {
	if CloudletInfoInState != "" {
		switch CloudletInfoInState {
		case "CloudletStateUnknown":
			CloudletInfoIn.State = edgeproto.CloudletState(0)
		case "CloudletStateErrors":
			CloudletInfoIn.State = edgeproto.CloudletState(1)
		case "CloudletStateReady":
			CloudletInfoIn.State = edgeproto.CloudletState(2)
		case "CloudletStateOffline":
			CloudletInfoIn.State = edgeproto.CloudletState(3)
		case "CloudletStateNotPresent":
			CloudletInfoIn.State = edgeproto.CloudletState(4)
		default:
			return errors.New("Invalid value for CloudletInfoInState")
		}
	}
	return nil
}

func parsePlatformEnums() error {
	if PlatformInType != "" {
		switch PlatformInType {
		case "Fake":
			PlatformIn.Type = edgeproto.PlatformType(0)
		case "Dind":
			PlatformIn.Type = edgeproto.PlatformType(1)
		case "Openstack":
			PlatformIn.Type = edgeproto.PlatformType(2)
		default:
			return errors.New("Invalid value for PlatformInType")
		}
	}
	return nil
}
