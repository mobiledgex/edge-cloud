// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package gencmd

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/cli"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/spf13/cobra"
	"google.golang.org/grpc/status"
	"io"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
func CloudletHideTags(in *edgeproto.Cloudlet) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.Errors = nil
	}
	if _, found := tags["nocmp"]; found {
		in.Status = edgeproto.StatusInfo{}
	}
	if _, found := tags["nocmp"]; found {
		in.State = 0
	}
	if _, found := tags["nocmp"]; found {
		in.CrmOverride = 0
	}
	if _, found := tags["nocmp"]; found {
		in.DeploymentLocal = false
	}
	if _, found := tags["nocmp"]; found {
		in.NotifySrvAddr = ""
	}
	if _, found := tags["nocmp"]; found {
		in.Config = edgeproto.PlatformConfig{}
	}
	if _, found := tags["nocmp"]; found {
		in.Deployment = ""
	}
	if _, found := tags["nocmp"]; found {
		in.CrmAccessPublicKey = ""
	}
	if _, found := tags["timestamp"]; found {
		in.CreatedAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["timestamp"]; found {
		in.UpdatedAt = distributed_match_engine.Timestamp{}
	}
	if _, found := tags["nocmp"]; found {
		in.TrustPolicyState = 0
	}
	for i0 := 0; i0 < len(in.ResourceQuotas); i0++ {
	}
	if _, found := tags["nocmp"]; found {
		in.DefaultResourceAlertThreshold = 0
	}
	if _, found := tags["nocmp"]; found {
		in.HostController = ""
	}
}

func CloudletInfoHideTags(in *edgeproto.CloudletInfo) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.NotifyId = 0
	}
	if _, found := tags["nocmp"]; found {
		in.Controller = ""
	}
	for i0 := 0; i0 < len(in.Flavors); i0++ {
	}
	if _, found := tags["nocmp"]; found {
		in.Status = edgeproto.StatusInfo{}
	}
	for i0 := 0; i0 < len(in.AvailabilityZones); i0++ {
	}
	for i0 := 0; i0 < len(in.OsImages); i0++ {
	}
	for i1 := 0; i1 < len(in.ResourcesSnapshot.PlatformVms); i1++ {
		for i2 := 0; i2 < len(in.ResourcesSnapshot.PlatformVms[i1].Ipaddresses); i2++ {
		}
		for i2 := 0; i2 < len(in.ResourcesSnapshot.PlatformVms[i1].Containers); i2++ {
		}
	}
	for i1 := 0; i1 < len(in.ResourcesSnapshot.Info); i1++ {
	}
	for i1 := 0; i1 < len(in.ResourcesSnapshot.ClusterInsts); i1++ {
	}
	for i1 := 0; i1 < len(in.ResourcesSnapshot.VmAppInsts); i1++ {
	}
	if _, found := tags["nocmp"]; found {
		in.TrustPolicyState = 0
	}
	if _, found := tags["nocmp"]; found {
		in.CompatibilityVersion = 0
	}
}

var GPUDriverApiCmd edgeproto.GPUDriverApiClient

var CreateGPUDriverCmd = &cli.Command{
	Use:          "CreateGPUDriver",
	RequiredArgs: strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateGPUDriver,
}

func runCreateGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateGPUDriver(c, obj)
}

func CreateGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.CreateGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("CreateGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateGPUDriver %v\n", data[ii])
		myerr := CreateGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteGPUDriverCmd = &cli.Command{
	Use:          "DeleteGPUDriver",
	RequiredArgs: strings.Join(GPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(GPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteGPUDriver,
}

func runDeleteGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteGPUDriver(c, obj)
}

func DeleteGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.DeleteGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("DeleteGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteGPUDriver %v\n", data[ii])
		myerr := DeleteGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateGPUDriverCmd = &cli.Command{
	Use:          "UpdateGPUDriver",
	RequiredArgs: strings.Join(UpdateGPUDriverRequiredArgs, " "),
	OptionalArgs: strings.Join(UpdateGPUDriverOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateGPUDriver,
}

func runUpdateGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateGPUDriver(c, obj)
}

func UpdateGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.UpdateGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("UpdateGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateGPUDriver %v\n", data[ii])
		myerr := UpdateGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowGPUDriverCmd = &cli.Command{
	Use:          "ShowGPUDriver",
	OptionalArgs: strings.Join(append(GPUDriverRequiredArgs, GPUDriverOptionalArgs...), " "),
	AliasArgs:    strings.Join(GPUDriverAliasArgs, " "),
	SpecialArgs:  &GPUDriverSpecialArgs,
	Comments:     GPUDriverComments,
	ReqData:      &edgeproto.GPUDriver{},
	ReplyData:    &edgeproto.GPUDriver{},
	Run:          runShowGPUDriver,
}

func runShowGPUDriver(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriver)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowGPUDriver(c, obj)
}

func ShowGPUDriver(c *cli.Command, in *edgeproto.GPUDriver) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.ShowGPUDriver(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowGPUDriver failed: %s", errstr)
	}

	objs := make([]*edgeproto.GPUDriver, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowGPUDriver recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowGPUDrivers(c *cli.Command, data []edgeproto.GPUDriver, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowGPUDriver %v\n", data[ii])
		myerr := ShowGPUDriver(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddGPUDriverBuildCmd = &cli.Command{
	Use:          "AddGPUDriverBuild",
	RequiredArgs: strings.Join(AddGPUDriverBuildRequiredArgs, " "),
	OptionalArgs: strings.Join(AddGPUDriverBuildOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddGPUDriverBuild,
}

func runAddGPUDriverBuild(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddGPUDriverBuild(c, obj)
}

func AddGPUDriverBuild(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.AddGPUDriverBuild(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddGPUDriverBuild failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("AddGPUDriverBuild recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddGPUDriverBuilds(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddGPUDriverBuild %v\n", data[ii])
		myerr := AddGPUDriverBuild(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveGPUDriverBuildCmd = &cli.Command{
	Use:          "RemoveGPUDriverBuild",
	RequiredArgs: strings.Join(RemoveGPUDriverBuildRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveGPUDriverBuildOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveGPUDriverBuild,
}

func runRemoveGPUDriverBuild(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveGPUDriverBuild(c, obj)
}

func RemoveGPUDriverBuild(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GPUDriverApiCmd.RemoveGPUDriverBuild(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveGPUDriverBuild failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("RemoveGPUDriverBuild recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveGPUDriverBuilds(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveGPUDriverBuild %v\n", data[ii])
		myerr := RemoveGPUDriverBuild(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetGPUDriverBuildURLCmd = &cli.Command{
	Use:          "GetGPUDriverBuildURL",
	RequiredArgs: strings.Join(GetGPUDriverBuildURLRequiredArgs, " "),
	OptionalArgs: strings.Join(GetGPUDriverBuildURLOptionalArgs, " "),
	AliasArgs:    strings.Join(GPUDriverBuildMemberAliasArgs, " "),
	SpecialArgs:  &GPUDriverBuildMemberSpecialArgs,
	Comments:     GPUDriverBuildMemberComments,
	ReqData:      &edgeproto.GPUDriverBuildMember{},
	ReplyData:    &edgeproto.GPUDriverBuildURL{},
	Run:          runGetGPUDriverBuildURL,
}

func runGetGPUDriverBuildURL(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.GPUDriverBuildMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetGPUDriverBuildURL(c, obj)
}

func GetGPUDriverBuildURL(c *cli.Command, in *edgeproto.GPUDriverBuildMember) error {
	if GPUDriverApiCmd == nil {
		return fmt.Errorf("GPUDriverApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GPUDriverApiCmd.GetGPUDriverBuildURL(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetGPUDriverBuildURL failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetGPUDriverBuildURLs(c *cli.Command, data []edgeproto.GPUDriverBuildMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetGPUDriverBuildURL %v\n", data[ii])
		myerr := GetGPUDriverBuildURL(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GPUDriverApiCmds = []*cobra.Command{
	CreateGPUDriverCmd.GenCmd(),
	DeleteGPUDriverCmd.GenCmd(),
	UpdateGPUDriverCmd.GenCmd(),
	ShowGPUDriverCmd.GenCmd(),
	AddGPUDriverBuildCmd.GenCmd(),
	RemoveGPUDriverBuildCmd.GenCmd(),
	GetGPUDriverBuildURLCmd.GenCmd(),
}

var CloudletApiCmd edgeproto.CloudletApiClient

var CreateCloudletCmd = &cli.Command{
	Use:          "CreateCloudlet",
	RequiredArgs: strings.Join(CreateCloudletRequiredArgs, " "),
	OptionalArgs: strings.Join(CreateCloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     CloudletComments,
	ReqData:      &edgeproto.Cloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateCloudlet,
}

func runCreateCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Cloudlet)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateCloudlet(c, obj)
}

func CreateCloudlet(c *cli.Command, in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.CreateCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("CreateCloudlet recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateCloudlets(c *cli.Command, data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudlet %v\n", data[ii])
		myerr := CreateCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletCmd = &cli.Command{
	Use:          "DeleteCloudlet",
	RequiredArgs: strings.Join(DeleteCloudletRequiredArgs, " "),
	OptionalArgs: strings.Join(DeleteCloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     CloudletComments,
	ReqData:      &edgeproto.Cloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteCloudlet,
}

func runDeleteCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Cloudlet)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteCloudlet(c, obj)
}

func DeleteCloudlet(c *cli.Command, in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.DeleteCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("DeleteCloudlet recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteCloudlets(c *cli.Command, data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudlet %v\n", data[ii])
		myerr := DeleteCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateCloudletCmd = &cli.Command{
	Use:          "UpdateCloudlet",
	RequiredArgs: strings.Join(UpdateCloudletRequiredArgs, " "),
	OptionalArgs: strings.Join(UpdateCloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     CloudletComments,
	ReqData:      &edgeproto.Cloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateCloudlet,
}

func runUpdateCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Cloudlet)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData)
	return UpdateCloudlet(c, obj)
}

func UpdateCloudlet(c *cli.Command, in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.UpdateCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("UpdateCloudlet recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateCloudlets(c *cli.Command, data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateCloudlet %v\n", data[ii])
		myerr := UpdateCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletCmd = &cli.Command{
	Use:          "ShowCloudlet",
	OptionalArgs: strings.Join(append(CloudletRequiredArgs, CloudletOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     CloudletComments,
	ReqData:      &edgeproto.Cloudlet{},
	ReplyData:    &edgeproto.Cloudlet{},
	Run:          runShowCloudlet,
}

func runShowCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Cloudlet)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudlet(c, obj)
}

func ShowCloudlet(c *cli.Command, in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.ShowCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Cloudlet, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudlet recv failed: %s", errstr)
		}
		CloudletHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudlets(c *cli.Command, data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudlet %v\n", data[ii])
		myerr := ShowCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetCloudletManifestCmd = &cli.Command{
	Use:          "GetCloudletManifest",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.CloudletManifest{},
	Run:          runGetCloudletManifest,
}

func runGetCloudletManifest(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetCloudletManifest(c, obj)
}

func GetCloudletManifest(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.GetCloudletManifest(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetCloudletManifest failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetCloudletManifests(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetCloudletManifest %v\n", data[ii])
		myerr := GetCloudletManifest(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetCloudletPropsCmd = &cli.Command{
	Use:          "GetCloudletProps",
	RequiredArgs: strings.Join(GetCloudletPropsRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletPropsOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPropsAliasArgs, " "),
	SpecialArgs:  &CloudletPropsSpecialArgs,
	Comments:     CloudletPropsComments,
	ReqData:      &edgeproto.CloudletProps{},
	ReplyData:    &edgeproto.CloudletProps{},
	Run:          runGetCloudletProps,
}

func runGetCloudletProps(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletProps)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetCloudletProps(c, obj)
}

func GetCloudletProps(c *cli.Command, in *edgeproto.CloudletProps) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.GetCloudletProps(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetCloudletProps failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetCloudletPropss(c *cli.Command, data []edgeproto.CloudletProps, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetCloudletProps %v\n", data[ii])
		myerr := GetCloudletProps(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetCloudletResourceQuotaPropsCmd = &cli.Command{
	Use:          "GetCloudletResourceQuotaProps",
	RequiredArgs: strings.Join(GetCloudletResourceQuotaPropsRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletResourceQuotaPropsOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResourceQuotaPropsAliasArgs, " "),
	SpecialArgs:  &CloudletResourceQuotaPropsSpecialArgs,
	Comments:     CloudletResourceQuotaPropsComments,
	ReqData:      &edgeproto.CloudletResourceQuotaProps{},
	ReplyData:    &edgeproto.CloudletResourceQuotaProps{},
	Run:          runGetCloudletResourceQuotaProps,
}

func runGetCloudletResourceQuotaProps(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletResourceQuotaProps)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetCloudletResourceQuotaProps(c, obj)
}

func GetCloudletResourceQuotaProps(c *cli.Command, in *edgeproto.CloudletResourceQuotaProps) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.GetCloudletResourceQuotaProps(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetCloudletResourceQuotaProps failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetCloudletResourceQuotaPropss(c *cli.Command, data []edgeproto.CloudletResourceQuotaProps, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetCloudletResourceQuotaProps %v\n", data[ii])
		myerr := GetCloudletResourceQuotaProps(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetCloudletResourceUsageCmd = &cli.Command{
	Use:          "GetCloudletResourceUsage",
	RequiredArgs: strings.Join(GetCloudletResourceUsageRequiredArgs, " "),
	OptionalArgs: strings.Join(GetCloudletResourceUsageOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResourceUsageAliasArgs, " "),
	SpecialArgs:  &CloudletResourceUsageSpecialArgs,
	Comments:     CloudletResourceUsageComments,
	ReqData:      &edgeproto.CloudletResourceUsage{},
	ReplyData:    &edgeproto.CloudletResourceUsage{},
	Run:          runGetCloudletResourceUsage,
}

func runGetCloudletResourceUsage(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletResourceUsage)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetCloudletResourceUsage(c, obj)
}

func GetCloudletResourceUsage(c *cli.Command, in *edgeproto.CloudletResourceUsage) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.GetCloudletResourceUsage(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetCloudletResourceUsage failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetCloudletResourceUsages(c *cli.Command, data []edgeproto.CloudletResourceUsage, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetCloudletResourceUsage %v\n", data[ii])
		myerr := GetCloudletResourceUsage(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddCloudletResMappingCmd = &cli.Command{
	Use:          "AddCloudletResMapping",
	RequiredArgs: strings.Join(CloudletResMapRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletResMapOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResMapAliasArgs, " "),
	SpecialArgs:  &CloudletResMapSpecialArgs,
	Comments:     CloudletResMapComments,
	ReqData:      &edgeproto.CloudletResMap{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddCloudletResMapping,
}

func runAddCloudletResMapping(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletResMap)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddCloudletResMapping(c, obj)
}

func AddCloudletResMapping(c *cli.Command, in *edgeproto.CloudletResMap) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.AddCloudletResMapping(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddCloudletResMapping failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddCloudletResMappings(c *cli.Command, data []edgeproto.CloudletResMap, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddCloudletResMapping %v\n", data[ii])
		myerr := AddCloudletResMapping(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveCloudletResMappingCmd = &cli.Command{
	Use:          "RemoveCloudletResMapping",
	RequiredArgs: strings.Join(CloudletResMapRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletResMapOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletResMapAliasArgs, " "),
	SpecialArgs:  &CloudletResMapSpecialArgs,
	Comments:     CloudletResMapComments,
	ReqData:      &edgeproto.CloudletResMap{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveCloudletResMapping,
}

func runRemoveCloudletResMapping(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletResMap)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveCloudletResMapping(c, obj)
}

func RemoveCloudletResMapping(c *cli.Command, in *edgeproto.CloudletResMap) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.RemoveCloudletResMapping(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveCloudletResMapping failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveCloudletResMappings(c *cli.Command, data []edgeproto.CloudletResMap, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveCloudletResMapping %v\n", data[ii])
		myerr := RemoveCloudletResMapping(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddCloudletAllianceOrgCmd = &cli.Command{
	Use:          "AddCloudletAllianceOrg",
	RequiredArgs: strings.Join(CloudletAllianceOrgRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletAllianceOrgOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAllianceOrgAliasArgs, " "),
	SpecialArgs:  &CloudletAllianceOrgSpecialArgs,
	Comments:     CloudletAllianceOrgComments,
	ReqData:      &edgeproto.CloudletAllianceOrg{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddCloudletAllianceOrg,
}

func runAddCloudletAllianceOrg(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletAllianceOrg)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddCloudletAllianceOrg(c, obj)
}

func AddCloudletAllianceOrg(c *cli.Command, in *edgeproto.CloudletAllianceOrg) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.AddCloudletAllianceOrg(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddCloudletAllianceOrg failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddCloudletAllianceOrgs(c *cli.Command, data []edgeproto.CloudletAllianceOrg, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddCloudletAllianceOrg %v\n", data[ii])
		myerr := AddCloudletAllianceOrg(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveCloudletAllianceOrgCmd = &cli.Command{
	Use:          "RemoveCloudletAllianceOrg",
	RequiredArgs: strings.Join(CloudletAllianceOrgRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletAllianceOrgOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAllianceOrgAliasArgs, " "),
	SpecialArgs:  &CloudletAllianceOrgSpecialArgs,
	Comments:     CloudletAllianceOrgComments,
	ReqData:      &edgeproto.CloudletAllianceOrg{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveCloudletAllianceOrg,
}

func runRemoveCloudletAllianceOrg(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletAllianceOrg)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveCloudletAllianceOrg(c, obj)
}

func RemoveCloudletAllianceOrg(c *cli.Command, in *edgeproto.CloudletAllianceOrg) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.RemoveCloudletAllianceOrg(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveCloudletAllianceOrg failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveCloudletAllianceOrgs(c *cli.Command, data []edgeproto.CloudletAllianceOrg, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveCloudletAllianceOrg %v\n", data[ii])
		myerr := RemoveCloudletAllianceOrg(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var FindFlavorMatchCmd = &cli.Command{
	Use:          "FindFlavorMatch",
	RequiredArgs: strings.Join(FlavorMatchRequiredArgs, " "),
	OptionalArgs: strings.Join(FlavorMatchOptionalArgs, " "),
	AliasArgs:    strings.Join(FlavorMatchAliasArgs, " "),
	SpecialArgs:  &FlavorMatchSpecialArgs,
	Comments:     FlavorMatchComments,
	ReqData:      &edgeproto.FlavorMatch{},
	ReplyData:    &edgeproto.FlavorMatch{},
	Run:          runFindFlavorMatch,
}

func runFindFlavorMatch(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.FlavorMatch)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return FindFlavorMatch(c, obj)
}

func FindFlavorMatch(c *cli.Command, in *edgeproto.FlavorMatch) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.FindFlavorMatch(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("FindFlavorMatch failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func FindFlavorMatchs(c *cli.Command, data []edgeproto.FlavorMatch, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("FindFlavorMatch %v\n", data[ii])
		myerr := FindFlavorMatch(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowFlavorsForCloudletCmd = &cli.Command{
	Use:          "ShowFlavorsForCloudlet",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.FlavorKey{},
	Run:          runShowFlavorsForCloudlet,
}

func runShowFlavorsForCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowFlavorsForCloudlet(c, obj)
}

func ShowFlavorsForCloudlet(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.ShowFlavorsForCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowFlavorsForCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.FlavorKey, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowFlavorsForCloudlet recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowFlavorsForCloudlets(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowFlavorsForCloudlet %v\n", data[ii])
		myerr := ShowFlavorsForCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetOrganizationsOnCloudletCmd = &cli.Command{
	Use:          "GetOrganizationsOnCloudlet",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.Organization{},
	Run:          runGetOrganizationsOnCloudlet,
}

func runGetOrganizationsOnCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetOrganizationsOnCloudlet(c, obj)
}

func GetOrganizationsOnCloudlet(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.GetOrganizationsOnCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetOrganizationsOnCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Organization, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("GetOrganizationsOnCloudlet recv failed: %s", errstr)
		}
		if cli.OutputStream {
			c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
			continue
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetOrganizationsOnCloudlets(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetOrganizationsOnCloudlet %v\n", data[ii])
		myerr := GetOrganizationsOnCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RevokeAccessKeyCmd = &cli.Command{
	Use:          "RevokeAccessKey",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRevokeAccessKey,
}

func runRevokeAccessKey(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RevokeAccessKey(c, obj)
}

func RevokeAccessKey(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.RevokeAccessKey(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RevokeAccessKey failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RevokeAccessKeys(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RevokeAccessKey %v\n", data[ii])
		myerr := RevokeAccessKey(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GenerateAccessKeyCmd = &cli.Command{
	Use:          "GenerateAccessKey",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.Result{},
	Run:          runGenerateAccessKey,
}

func runGenerateAccessKey(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GenerateAccessKey(c, obj)
}

func GenerateAccessKey(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletApiCmd.GenerateAccessKey(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GenerateAccessKey failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GenerateAccessKeys(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GenerateAccessKey %v\n", data[ii])
		myerr := GenerateAccessKey(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var PlatformDeleteCloudletCmd = &cli.Command{
	Use:          "PlatformDeleteCloudlet",
	RequiredArgs: strings.Join(CloudletRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletAliasArgs, " "),
	SpecialArgs:  &CloudletSpecialArgs,
	Comments:     CloudletComments,
	ReqData:      &edgeproto.Cloudlet{},
	ReplyData:    &edgeproto.Result{},
	Run:          runPlatformDeleteCloudlet,
}

func runPlatformDeleteCloudlet(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.Cloudlet)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return PlatformDeleteCloudlet(c, obj)
}

func PlatformDeleteCloudlet(c *cli.Command, in *edgeproto.Cloudlet) error {
	if CloudletApiCmd == nil {
		return fmt.Errorf("CloudletApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletApiCmd.PlatformDeleteCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("PlatformDeleteCloudlet failed: %s", errstr)
	}

	objs := make([]*edgeproto.Result, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("PlatformDeleteCloudlet recv failed: %s", errstr)
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func PlatformDeleteCloudlets(c *cli.Command, data []edgeproto.Cloudlet, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("PlatformDeleteCloudlet %v\n", data[ii])
		myerr := PlatformDeleteCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletApiCmds = []*cobra.Command{
	CreateCloudletCmd.GenCmd(),
	DeleteCloudletCmd.GenCmd(),
	UpdateCloudletCmd.GenCmd(),
	ShowCloudletCmd.GenCmd(),
	GetCloudletManifestCmd.GenCmd(),
	GetCloudletPropsCmd.GenCmd(),
	GetCloudletResourceQuotaPropsCmd.GenCmd(),
	GetCloudletResourceUsageCmd.GenCmd(),
	AddCloudletResMappingCmd.GenCmd(),
	RemoveCloudletResMappingCmd.GenCmd(),
	AddCloudletAllianceOrgCmd.GenCmd(),
	RemoveCloudletAllianceOrgCmd.GenCmd(),
	FindFlavorMatchCmd.GenCmd(),
	ShowFlavorsForCloudletCmd.GenCmd(),
	GetOrganizationsOnCloudletCmd.GenCmd(),
	RevokeAccessKeyCmd.GenCmd(),
	GenerateAccessKeyCmd.GenCmd(),
	PlatformDeleteCloudletCmd.GenCmd(),
}

var CloudletInfoApiCmd edgeproto.CloudletInfoApiClient

var ShowCloudletInfoCmd = &cli.Command{
	Use:          "ShowCloudletInfo",
	OptionalArgs: strings.Join(append(CloudletInfoRequiredArgs, CloudletInfoOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     CloudletInfoComments,
	ReqData:      &edgeproto.CloudletInfo{},
	ReplyData:    &edgeproto.CloudletInfo{},
	Run:          runShowCloudletInfo,
}

func runShowCloudletInfo(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletInfo)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletInfo(c, obj)
}

func ShowCloudletInfo(c *cli.Command, in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletInfoApiCmd.ShowCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletInfo failed: %s", errstr)
	}

	objs := make([]*edgeproto.CloudletInfo, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudletInfo recv failed: %s", errstr)
		}
		CloudletInfoHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletInfos(c *cli.Command, data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletInfo %v\n", data[ii])
		myerr := ShowCloudletInfo(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var InjectCloudletInfoCmd = &cli.Command{
	Use:          "InjectCloudletInfo",
	RequiredArgs: strings.Join(CloudletInfoRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletInfoOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     CloudletInfoComments,
	ReqData:      &edgeproto.CloudletInfo{},
	ReplyData:    &edgeproto.Result{},
	Run:          runInjectCloudletInfo,
}

func runInjectCloudletInfo(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletInfo)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return InjectCloudletInfo(c, obj)
}

func InjectCloudletInfo(c *cli.Command, in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletInfoApiCmd.InjectCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("InjectCloudletInfo failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func InjectCloudletInfos(c *cli.Command, data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("InjectCloudletInfo %v\n", data[ii])
		myerr := InjectCloudletInfo(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var EvictCloudletInfoCmd = &cli.Command{
	Use:          "EvictCloudletInfo",
	RequiredArgs: strings.Join(CloudletInfoRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletInfoOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletInfoAliasArgs, " "),
	SpecialArgs:  &CloudletInfoSpecialArgs,
	Comments:     CloudletInfoComments,
	ReqData:      &edgeproto.CloudletInfo{},
	ReplyData:    &edgeproto.Result{},
	Run:          runEvictCloudletInfo,
}

func runEvictCloudletInfo(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletInfo)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return EvictCloudletInfo(c, obj)
}

func EvictCloudletInfo(c *cli.Command, in *edgeproto.CloudletInfo) error {
	if CloudletInfoApiCmd == nil {
		return fmt.Errorf("CloudletInfoApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletInfoApiCmd.EvictCloudletInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("EvictCloudletInfo failed: %s", errstr)
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func EvictCloudletInfos(c *cli.Command, data []edgeproto.CloudletInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("EvictCloudletInfo %v\n", data[ii])
		myerr := EvictCloudletInfo(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletInfoApiCmds = []*cobra.Command{
	ShowCloudletInfoCmd.GenCmd(),
	InjectCloudletInfoCmd.GenCmd(),
	EvictCloudletInfoCmd.GenCmd(),
}

var CloudletMetricsApiCmd edgeproto.CloudletMetricsApiClient

var ShowCloudletMetricsCmd = &cli.Command{
	Use:          "ShowCloudletMetrics",
	OptionalArgs: strings.Join(append(CloudletMetricsRequiredArgs, CloudletMetricsOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletMetricsAliasArgs, " "),
	SpecialArgs:  &CloudletMetricsSpecialArgs,
	Comments:     CloudletMetricsComments,
	ReqData:      &edgeproto.CloudletMetrics{},
	ReplyData:    &edgeproto.CloudletMetrics{},
	Run:          runShowCloudletMetrics,
}

func runShowCloudletMetrics(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletMetrics)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletMetrics(c, obj)
}

func ShowCloudletMetrics(c *cli.Command, in *edgeproto.CloudletMetrics) error {
	if CloudletMetricsApiCmd == nil {
		return fmt.Errorf("CloudletMetricsApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletMetricsApiCmd.ShowCloudletMetrics(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletMetrics failed: %s", errstr)
	}

	objs := make([]*edgeproto.CloudletMetrics, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudletMetrics recv failed: %s", errstr)
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(c.CobraCmd.OutOrStdout(), objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletMetricss(c *cli.Command, data []edgeproto.CloudletMetrics, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletMetrics %v\n", data[ii])
		myerr := ShowCloudletMetrics(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletMetricsApiCmds = []*cobra.Command{
	ShowCloudletMetricsCmd.GenCmd(),
}

var OperationTimeLimitsRequiredArgs = []string{}
var OperationTimeLimitsOptionalArgs = []string{
	"createclusterinsttimeout",
	"updateclusterinsttimeout",
	"deleteclusterinsttimeout",
	"createappinsttimeout",
	"updateappinsttimeout",
	"deleteappinsttimeout",
}
var OperationTimeLimitsAliasArgs = []string{}
var OperationTimeLimitsComments = map[string]string{
	"createclusterinsttimeout": "Override default max time to create a cluster instance (duration)",
	"updateclusterinsttimeout": "Override default max time to update a cluster instance (duration)",
	"deleteclusterinsttimeout": "Override default max time to delete a cluster instance (duration)",
	"createappinsttimeout":     "Override default max time to create an app instance (duration)",
	"updateappinsttimeout":     "Override default max time to update an app instance (duration)",
	"deleteappinsttimeout":     "Override default max time to delete an app instance (duration)",
}
var OperationTimeLimitsSpecialArgs = map[string]string{}
var CloudletInternalRequiredArgs = []string{
	"key.organization",
	"key.name",
}
var CloudletInternalOptionalArgs = []string{
	"props",
}
var CloudletInternalAliasArgs = []string{}
var CloudletInternalComments = map[string]string{
	"fields":           "Fields are used for the Update API to specify which fields to apply.",
	"key.organization": "Organization of the cloudlet site",
	"key.name":         "Name of the cloudlet",
	"props":            "Map of key value pairs for data exchanged between components",
}
var CloudletInternalSpecialArgs = map[string]string{
	"fields": "StringArray",
	"props":  "StringToString",
}
var PlatformConfigRequiredArgs = []string{}
var PlatformConfigOptionalArgs = []string{
	"containerregistrypath",
	"cloudletvmimagepath",
	"notifyctrladdrs",
	"tlscertfile",
	"tlskeyfile",
	"tlscafile",
	"envvar",
	"platformtag",
	"testmode",
	"span",
	"cleanupmode",
	"region",
	"commercialcerts",
	"usevaultpki",
	"appdnsroot",
	"chefserverpath",
	"chefclientinterval",
	"deploymenttag",
	"crmaccessprivatekey",
	"accessapiaddr",
	"cachedir",
}
var PlatformConfigAliasArgs = []string{}
var PlatformConfigComments = map[string]string{
	"containerregistrypath": "Path to Docker registry holding edge-cloud image",
	"cloudletvmimagepath":   "Path to platform base image",
	"notifyctrladdrs":       "Address of controller notify port (can be multiple of these)",
	"tlscertfile":           "TLS cert file",
	"tlskeyfile":            "TLS key file",
	"tlscafile":             "TLS ca file",
	"envvar":                "Environment variables",
	"platformtag":           "Tag of edge-cloud image",
	"testmode":              "Internal Test flag",
	"span":                  "Span string",
	"cleanupmode":           "Internal cleanup flag",
	"region":                "Region",
	"commercialcerts":       "Get certs from vault or generate your own for the root load balancer",
	"usevaultpki":           "Use Vault certs and CAs for internal TLS communication",
	"appdnsroot":            "App domain name root",
	"chefserverpath":        "Path to Chef Server",
	"chefclientinterval":    "Chef client interval",
	"deploymenttag":         "Deployment Tag",
	"crmaccessprivatekey":   "crm access private key",
	"accessapiaddr":         "controller access API address",
	"cachedir":              "cache dir",
}
var PlatformConfigSpecialArgs = map[string]string{
	"envvar": "StringToString",
}
var CloudletResMapRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"mapping",
}
var CloudletResMapOptionalArgs = []string{}
var CloudletResMapAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletResMapComments = map[string]string{
	"cloudlet-org": "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
	"mapping":      "Resource mapping info",
}
var CloudletResMapSpecialArgs = map[string]string{
	"mapping": "StringToString",
}
var InfraConfigRequiredArgs = []string{}
var InfraConfigOptionalArgs = []string{
	"externalnetworkname",
	"flavorname",
}
var InfraConfigAliasArgs = []string{}
var InfraConfigComments = map[string]string{
	"externalnetworkname": "Infra specific external network name",
	"flavorname":          "Infra specific flavor name",
}
var InfraConfigSpecialArgs = map[string]string{}
var ResourceQuotaRequiredArgs = []string{}
var ResourceQuotaOptionalArgs = []string{
	"name",
	"value",
	"alertthreshold",
}
var ResourceQuotaAliasArgs = []string{}
var ResourceQuotaComments = map[string]string{
	"name":           "Resource name on which to set quota",
	"value":          "Quota value of the resource",
	"alertthreshold": "Generate alert when more than threshold percentage of resource is used",
}
var ResourceQuotaSpecialArgs = map[string]string{}
var GPUDriverKeyRequiredArgs = []string{}
var GPUDriverKeyOptionalArgs = []string{
	"name",
	"organization",
}
var GPUDriverKeyAliasArgs = []string{}
var GPUDriverKeyComments = map[string]string{
	"name":         "Name of the driver",
	"organization": "Organization to which the driver belongs to",
}
var GPUDriverKeySpecialArgs = map[string]string{}
var GPUDriverBuildRequiredArgs = []string{}
var GPUDriverBuildOptionalArgs = []string{
	"name",
	"driverpath",
	"driverpathcreds",
	"operatingsystem",
	"kernelversion",
	"hypervisorinfo",
	"md5sum",
}
var GPUDriverBuildAliasArgs = []string{}
var GPUDriverBuildComments = map[string]string{
	"name":            "Unique identifier key",
	"driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"driverpathcreds": "Optional credentials (username:password) to access driver path",
	"operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"kernelversion":   "Kernel Version supported by GPU driver build",
	"hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"md5sum":          "Driver package md5sum to ensure package is not corrupted",
}
var GPUDriverBuildSpecialArgs = map[string]string{}
var GPUDriverBuildMemberRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
}
var GPUDriverBuildMemberOptionalArgs = []string{
	"build.name",
	"build.driverpath",
	"build.driverpathcreds",
	"build.operatingsystem",
	"build.kernelversion",
	"build.hypervisorinfo",
	"build.md5sum",
	"ignorestate",
}
var GPUDriverBuildMemberAliasArgs = []string{
	"gpudrivername=key.name",
	"gpudriver-org=key.organization",
}
var GPUDriverBuildMemberComments = map[string]string{
	"gpudrivername":         "Name of the driver",
	"gpudriver-org":         "Organization to which the driver belongs to",
	"build.name":            "Unique identifier key",
	"build.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"build.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"build.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"build.kernelversion":   "Kernel Version supported by GPU driver build",
	"build.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"build.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"ignorestate":           "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverBuildMemberSpecialArgs = map[string]string{}
var GPUDriverBuildURLRequiredArgs = []string{}
var GPUDriverBuildURLOptionalArgs = []string{
	"buildurlpath",
	"validity",
}
var GPUDriverBuildURLAliasArgs = []string{}
var GPUDriverBuildURLComments = map[string]string{
	"buildurlpath": "Build URL path",
	"validity":     "Build URL path validity",
}
var GPUDriverBuildURLSpecialArgs = map[string]string{}
var GPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var GPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"builds:empty",
	"builds:#.name",
	"builds:#.driverpath",
	"builds:#.driverpathcreds",
	"builds:#.operatingsystem",
	"builds:#.kernelversion",
	"builds:#.hypervisorinfo",
	"builds:#.md5sum",
	"licenseconfig",
	"properties",
	"ignorestate",
}
var GPUDriverAliasArgs = []string{
	"gpudrivername=key.name",
	"gpudriver-org=key.organization",
}
var GPUDriverComments = map[string]string{
	"fields":                   "Fields are used for the Update API to specify which fields to apply",
	"gpudrivername":            "Name of the driver",
	"gpudriver-org":            "Organization to which the driver belongs to",
	"builds:empty":             "List of GPU driver build, specify builds:empty=true to clear",
	"builds:#.name":            "Unique identifier key",
	"builds:#.driverpath":      "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"builds:#.driverpathcreds": "Optional credentials (username:password) to access driver path",
	"builds:#.operatingsystem": "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"builds:#.kernelversion":   "Kernel Version supported by GPU driver build",
	"builds:#.hypervisorinfo":  "Info on hypervisor supported by vGPU driver",
	"builds:#.md5sum":          "Driver package md5sum to ensure package is not corrupted",
	"licenseconfig":            "License config to setup license (will be stored in secure storage)",
	"licenseconfigmd5sum":      "License config md5sum, to ensure integrity of license config",
	"properties":               "Additional properties associated with GPU driver build For example: license server information, driver release date, etc, specify properties:empty=true to clear",
	"state":                    "State to figure out if any action on the GPU driver is in-progress",
	"ignorestate":              "Ignore state will ignore any action in-progress on the GPU driver",
}
var GPUDriverSpecialArgs = map[string]string{
	"fields":     "StringArray",
	"properties": "StringToString",
}
var GPUConfigRequiredArgs = []string{}
var GPUConfigOptionalArgs = []string{
	"driver.name",
	"driver.organization",
	"properties",
}
var GPUConfigAliasArgs = []string{}
var GPUConfigComments = map[string]string{
	"driver.name":         "Name of the driver",
	"driver.organization": "Organization to which the driver belongs to",
	"properties":          "Properties to identify specifics of GPU",
}
var GPUConfigSpecialArgs = map[string]string{
	"properties": "StringToString",
}
var CloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"notifysrvaddr",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"restagmap:empty",
	"restagmap:#.key",
	"restagmap:#.value.name",
	"restagmap:#.value.organization",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:empty",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
	"kafkacluster",
	"kafkauser",
	"kafkapassword",
	"gpuconfig.driver.name",
	"gpuconfig.driver.organization",
	"gpuconfig.properties",
	"enabledefaultserverlesscluster",
	"allianceorgs",
}
var CloudletAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletComments = map[string]string{
	"fields":                              "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                        "Organization of the cloudlet site",
	"cloudlet":                            "Name of the cloudlet",
	"location.latitude":                   "Latitude in WGS 84 coordinates",
	"location.longitude":                  "Longitude in WGS 84 coordinates",
	"location.horizontalaccuracy":         "Horizontal accuracy (radius in meters)",
	"location.verticalaccuracy":           "Vertical accuracy (meters)",
	"location.altitude":                   "On android only lat and long are guaranteed to be supplied Altitude in meters",
	"location.course":                     "Course (IOS) / bearing (Android) (degrees east relative to true north)",
	"location.speed":                      "Speed (IOS) / velocity (Android) (meters/sec)",
	"ipsupport":                           "Type of IP support provided by Cloudlet (see IpSupport), one of Unknown, Static, Dynamic",
	"staticips":                           "List of static IPs for static IP support",
	"numdynamicips":                       "Number of dynamic IPs available for dynamic IP support",
	"timelimits.createclusterinsttimeout": "Override default max time to create a cluster instance (duration)",
	"timelimits.updateclusterinsttimeout": "Override default max time to update a cluster instance (duration)",
	"timelimits.deleteclusterinsttimeout": "Override default max time to delete a cluster instance (duration)",
	"timelimits.createappinsttimeout":     "Override default max time to create an app instance (duration)",
	"timelimits.updateappinsttimeout":     "Override default max time to update an app instance (duration)",
	"timelimits.deleteappinsttimeout":     "Override default max time to delete an app instance (duration)",
	"errors":                              "Any errors trying to create, update, or delete the Cloudlet., specify errors:empty=true to clear",
	"state":                               "Current state of the cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"crmoverride":                         "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"deploymentlocal":                     "Deploy cloudlet services locally",
	"platformtype":                        "Platform type, one of Fake, Dind, Openstack, Azure, Gcp, Edgebox, Fakeinfra, Vsphere, AwsEks, VmPool, AwsEc2, Vcd, K8SBareMetal, Kind, Kindinfra",
	"notifysrvaddr":                       "Address for the CRM notify listener to run on",
	"flavor.name":                         "Flavor name",
	"physicalname":                        "Physical infrastructure cloudlet name",
	"envvar":                              "Single Key-Value pair of env var to be passed to CRM, specify envvar:empty=true to clear",
	"containerversion":                    "Cloudlet container version",
	"config.containerregistrypath":        "Path to Docker registry holding edge-cloud image",
	"config.cloudletvmimagepath":          "Path to platform base image",
	"config.notifyctrladdrs":              "Address of controller notify port (can be multiple of these)",
	"config.tlscertfile":                  "TLS cert file",
	"config.tlskeyfile":                   "TLS key file",
	"config.tlscafile":                    "TLS ca file",
	"config.envvar":                       "Environment variables, specify config.envvar:empty=true to clear",
	"config.platformtag":                  "Tag of edge-cloud image",
	"config.testmode":                     "Internal Test flag",
	"config.span":                         "Span string",
	"config.cleanupmode":                  "Internal cleanup flag",
	"config.region":                       "Region",
	"config.commercialcerts":              "Get certs from vault or generate your own for the root load balancer",
	"config.usevaultpki":                  "Use Vault certs and CAs for internal TLS communication",
	"config.appdnsroot":                   "App domain name root",
	"config.chefserverpath":               "Path to Chef Server",
	"config.chefclientinterval":           "Chef client interval",
	"config.deploymenttag":                "Deployment Tag",
	"config.crmaccessprivatekey":          "crm access private key",
	"config.accessapiaddr":                "controller access API address",
	"config.cachedir":                     "cache dir",
	"restagmap:empty":                     "Optional resource to restagtbl key map key values = [gpu, nas, nic], specify restagmap:empty=true to clear",
	"restagmap:#.value.name":              "Resource Table Name",
	"restagmap:#.value.organization":      "Operator organization of the cloudlet site.",
	"accessvars":                          "Variables required to access cloudlet, specify accessvars:empty=true to clear",
	"vmimageversion":                      "MobiledgeX baseimage version where CRM services reside",
	"deployment":                          "Deployment type to bring up CRM services (docker, kubernetes)",
	"infraapiaccess":                      "Infra Access Type is the type of access available to Infra API Endpoint, one of DirectAccess, RestrictedAccess",
	"infraconfig.externalnetworkname":     "Infra specific external network name",
	"infraconfig.flavorname":              "Infra specific flavor name",
	"chefclientkey":                       "Chef client key, specify chefclientkey:empty=true to clear",
	"maintenancestate":                    "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"overridepolicycontainerversion":      "Override container version from policy file",
	"vmpool":                              "VM Pool",
	"crmaccesspublickey":                  "CRM access public key",
	"crmaccesskeyupgraderequired":         "CRM access key upgrade required",
	"trustpolicy":                         "Optional Trust Policy",
	"trustpolicystate":                    "State of trust policy, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"resourcequotas:empty":                "Resource quotas, specify resourcequotas:empty=true to clear",
	"resourcequotas:#.name":               "Resource name on which to set quota",
	"resourcequotas:#.value":              "Quota value of the resource",
	"resourcequotas:#.alertthreshold":     "Generate alert when more than threshold percentage of resource is used",
	"defaultresourcealertthreshold":       "Default resource alert threshold percentage",
	"hostcontroller":                      "Address of the controller hosting the cloudlet services if it is running locally",
	"kafkacluster":                        "Operator provided kafka cluster endpoint to push events to",
	"kafkauser":                           "Username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
	"kafkapassword":                       "Password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
	"gpuconfig.driver.name":               "Name of the driver",
	"gpuconfig.driver.organization":       "Organization to which the driver belongs to",
	"gpuconfig.properties":                "Properties to identify specifics of GPU, specify gpuconfig.properties:empty=true to clear",
	"enabledefaultserverlesscluster":      "Enable experimental default multitenant (serverless) cluster",
	"allianceorgs":                        "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet, specify allianceorgs:empty=true to clear",
}
var CloudletSpecialArgs = map[string]string{
	"accessvars":           "StringToString",
	"allianceorgs":         "StringArray",
	"chefclientkey":        "StringToString",
	"config.envvar":        "StringToString",
	"envvar":               "StringToString",
	"errors":               "StringArray",
	"fields":               "StringArray",
	"gpuconfig.properties": "StringToString",
	"status.msgs":          "StringArray",
}
var FlavorMatchRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"flavor",
}
var FlavorMatchOptionalArgs = []string{
	"availabilityzone",
}
var FlavorMatchAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
	"flavor=flavorname",
}
var FlavorMatchComments = map[string]string{
	"cloudlet-org":     "Organization of the cloudlet site",
	"cloudlet":         "Name of the cloudlet",
	"flavor":           "Flavor name to lookup",
	"availabilityzone": "availability zone for optional resources if any",
}
var FlavorMatchSpecialArgs = map[string]string{}
var CloudletManifestRequiredArgs = []string{}
var CloudletManifestOptionalArgs = []string{
	"manifest",
}
var CloudletManifestAliasArgs = []string{}
var CloudletManifestComments = map[string]string{
	"manifest": "Manifest to bringup cloudlet VM and services.",
}
var CloudletManifestSpecialArgs = map[string]string{}
var PropertyInfoRequiredArgs = []string{}
var PropertyInfoOptionalArgs = []string{
	"name",
	"description",
	"value",
	"secret",
	"mandatory",
	"internal",
}
var PropertyInfoAliasArgs = []string{}
var PropertyInfoComments = map[string]string{
	"name":        "Name of the property",
	"description": "Description of the property",
	"value":       "Default value of the property",
	"secret":      "Is the property a secret value, will be hidden",
	"mandatory":   "Is the property mandatory",
	"internal":    "Is the property internal, not to be set by Operator",
}
var PropertyInfoSpecialArgs = map[string]string{}
var CloudletPropsRequiredArgs = []string{}
var CloudletPropsOptionalArgs = []string{
	"platformtype",
	"properties:#.key",
	"properties:#.value.name",
	"properties:#.value.description",
	"properties:#.value.value",
	"properties:#.value.secret",
	"properties:#.value.mandatory",
	"properties:#.value.internal",
	"organization",
}
var CloudletPropsAliasArgs = []string{}
var CloudletPropsComments = map[string]string{
	"platformtype":                   "Platform type, one of Fake, Dind, Openstack, Azure, Gcp, Edgebox, Fakeinfra, Vsphere, AwsEks, VmPool, AwsEc2, Vcd, K8SBareMetal, Kind, Kindinfra",
	"properties:#.value.name":        "Name of the property",
	"properties:#.value.description": "Description of the property",
	"properties:#.value.value":       "Default value of the property",
	"properties:#.value.secret":      "Is the property a secret value, will be hidden",
	"properties:#.value.mandatory":   "Is the property mandatory",
	"properties:#.value.internal":    "Is the property internal, not to be set by Operator",
	"organization":                   "Organization",
}
var CloudletPropsSpecialArgs = map[string]string{}
var CloudletResourceQuotaPropsRequiredArgs = []string{}
var CloudletResourceQuotaPropsOptionalArgs = []string{
	"platformtype",
	"properties:#.name",
	"properties:#.value",
	"properties:#.inframaxvalue",
	"properties:#.quotamaxvalue",
	"properties:#.description",
	"properties:#.units",
	"properties:#.alertthreshold",
	"organization",
}
var CloudletResourceQuotaPropsAliasArgs = []string{}
var CloudletResourceQuotaPropsComments = map[string]string{
	"platformtype":                "Platform type, one of Fake, Dind, Openstack, Azure, Gcp, Edgebox, Fakeinfra, Vsphere, AwsEks, VmPool, AwsEc2, Vcd, K8SBareMetal, Kind, Kindinfra",
	"properties:#.name":           "Resource name",
	"properties:#.value":          "Resource value",
	"properties:#.inframaxvalue":  "Resource infra max value",
	"properties:#.quotamaxvalue":  "Resource quota max value",
	"properties:#.description":    "Resource description",
	"properties:#.units":          "Resource units",
	"properties:#.alertthreshold": "Generate alert when more than threshold percentage of resource is used",
	"organization":                "Organization",
}
var CloudletResourceQuotaPropsSpecialArgs = map[string]string{}
var CloudletResourceUsageRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletResourceUsageOptionalArgs = []string{
	"infrausage",
	"info:#.name",
	"info:#.value",
	"info:#.inframaxvalue",
	"info:#.quotamaxvalue",
	"info:#.description",
	"info:#.units",
	"info:#.alertthreshold",
}
var CloudletResourceUsageAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletResourceUsageComments = map[string]string{
	"cloudlet-org":          "Organization of the cloudlet site",
	"cloudlet":              "Name of the cloudlet",
	"infrausage":            "Show Infra based usage",
	"info:#.name":           "Resource name",
	"info:#.value":          "Resource value",
	"info:#.inframaxvalue":  "Resource infra max value",
	"info:#.quotamaxvalue":  "Resource quota max value",
	"info:#.description":    "Resource description",
	"info:#.units":          "Resource units",
	"info:#.alertthreshold": "Generate alert when more than threshold percentage of resource is used",
}
var CloudletResourceUsageSpecialArgs = map[string]string{}
var CloudletAllianceOrgRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"organization",
}
var CloudletAllianceOrgOptionalArgs = []string{}
var CloudletAllianceOrgAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletAllianceOrgComments = map[string]string{
	"cloudlet-org": "Organization of the cloudlet site",
	"cloudlet":     "Name of the cloudlet",
	"organization": "Alliance organization",
}
var CloudletAllianceOrgSpecialArgs = map[string]string{}
var FlavorInfoRequiredArgs = []string{}
var FlavorInfoOptionalArgs = []string{
	"name",
	"vcpus",
	"ram",
	"disk",
	"propmap",
}
var FlavorInfoAliasArgs = []string{}
var FlavorInfoComments = map[string]string{
	"name":    "Name of the flavor on the Cloudlet",
	"vcpus":   "Number of VCPU cores on the Cloudlet",
	"ram":     "Ram in MB on the Cloudlet",
	"disk":    "Amount of disk in GB on the Cloudlet",
	"propmap": "OS Flavor Properties, if any",
}
var FlavorInfoSpecialArgs = map[string]string{
	"propmap": "StringToString",
}
var OSAZoneRequiredArgs = []string{}
var OSAZoneOptionalArgs = []string{
	"name",
	"status",
}
var OSAZoneAliasArgs = []string{}
var OSAZoneComments = map[string]string{}
var OSAZoneSpecialArgs = map[string]string{}
var OSImageRequiredArgs = []string{}
var OSImageOptionalArgs = []string{
	"name",
	"tags",
	"properties",
	"diskformat",
}
var OSImageAliasArgs = []string{}
var OSImageComments = map[string]string{
	"name":       "image name",
	"tags":       "optional tags present on image",
	"properties": "image properties/metadata",
	"diskformat": "format qcow2, img, etc",
}
var OSImageSpecialArgs = map[string]string{}
var CloudletInfoRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletInfoOptionalArgs = []string{
	"state",
	"notifyid",
	"controller",
	"osmaxram",
	"osmaxvcores",
	"osmaxvolgb",
	"errors",
	"flavors:#.name",
	"flavors:#.vcpus",
	"flavors:#.ram",
	"flavors:#.disk",
	"flavors:#.propmap",
	"status.tasknumber",
	"status.maxtasks",
	"status.taskname",
	"status.stepname",
	"status.msgcount",
	"status.msgs",
	"containerversion",
	"availabilityzones:#.name",
	"availabilityzones:#.status",
	"osimages:#.name",
	"osimages:#.tags",
	"osimages:#.properties",
	"osimages:#.diskformat",
	"controllercachereceived",
	"maintenancestate",
	"resourcessnapshot.platformvms:#.name",
	"resourcessnapshot.platformvms:#.type",
	"resourcessnapshot.platformvms:#.status",
	"resourcessnapshot.platformvms:#.infraflavor",
	"resourcessnapshot.platformvms:#.ipaddresses:#.externalip",
	"resourcessnapshot.platformvms:#.ipaddresses:#.internalip",
	"resourcessnapshot.platformvms:#.containers:#.name",
	"resourcessnapshot.platformvms:#.containers:#.type",
	"resourcessnapshot.platformvms:#.containers:#.status",
	"resourcessnapshot.platformvms:#.containers:#.clusterip",
	"resourcessnapshot.platformvms:#.containers:#.restarts",
	"resourcessnapshot.info:#.name",
	"resourcessnapshot.info:#.value",
	"resourcessnapshot.info:#.inframaxvalue",
	"resourcessnapshot.info:#.quotamaxvalue",
	"resourcessnapshot.info:#.description",
	"resourcessnapshot.info:#.units",
	"resourcessnapshot.info:#.alertthreshold",
	"resourcessnapshot.clusterinsts:#.clusterkey.name",
	"resourcessnapshot.clusterinsts:#.organization",
	"resourcessnapshot.vmappinsts:#.appkey.organization",
	"resourcessnapshot.vmappinsts:#.appkey.name",
	"resourcessnapshot.vmappinsts:#.appkey.version",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.organization",
	"trustpolicystate",
	"compatibilityversion",
	"properties",
}
var CloudletInfoAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletInfoComments = map[string]string{
	"fields":                                 "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                           "Organization of the cloudlet site",
	"cloudlet":                               "Name of the cloudlet",
	"state":                                  "State of cloudlet, one of Unknown, Errors, Ready, Offline, NotPresent, Init, Upgrade, NeedSync",
	"notifyid":                               "Id of client assigned by server (internal use only)",
	"controller":                             "Connected controller unique id",
	"osmaxram":                               "Maximum Ram in MB on the Cloudlet",
	"osmaxvcores":                            "Maximum number of VCPU cores on the Cloudlet",
	"osmaxvolgb":                             "Maximum amount of disk in GB on the Cloudlet",
	"errors":                                 "Any errors encountered while making changes to the Cloudlet",
	"flavors:#.name":                         "Name of the flavor on the Cloudlet",
	"flavors:#.vcpus":                        "Number of VCPU cores on the Cloudlet",
	"flavors:#.ram":                          "Ram in MB on the Cloudlet",
	"flavors:#.disk":                         "Amount of disk in GB on the Cloudlet",
	"flavors:#.propmap":                      "OS Flavor Properties, if any",
	"containerversion":                       "Cloudlet container version",
	"osimages:#.name":                        "image name",
	"osimages:#.tags":                        "optional tags present on image",
	"osimages:#.properties":                  "image properties/metadata",
	"osimages:#.diskformat":                  "format qcow2, img, etc",
	"controllercachereceived":                "Indicates all controller data has been sent to CRM",
	"maintenancestate":                       "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"resourcessnapshot.platformvms:#.name":   "Virtual machine name",
	"resourcessnapshot.platformvms:#.type":   "Type can be platform, rootlb, cluster-master, cluster-k8s-node, cluster-docker-node, appvm",
	"resourcessnapshot.platformvms:#.status": "Runtime status of the VM",
	"resourcessnapshot.platformvms:#.infraflavor":                   "Flavor allocated within the cloudlet infrastructure, distinct from the control plane flavor",
	"resourcessnapshot.platformvms:#.containers:#.name":             "Name of the container",
	"resourcessnapshot.platformvms:#.containers:#.type":             "Type can be docker or kubernetes",
	"resourcessnapshot.platformvms:#.containers:#.status":           "Runtime status of the container",
	"resourcessnapshot.platformvms:#.containers:#.clusterip":        "IP within the CNI and is applicable to kubernetes only",
	"resourcessnapshot.platformvms:#.containers:#.restarts":         "Restart count, applicable to kubernetes only",
	"resourcessnapshot.info:#.name":                                 "Resource name",
	"resourcessnapshot.info:#.value":                                "Resource value",
	"resourcessnapshot.info:#.inframaxvalue":                        "Resource infra max value",
	"resourcessnapshot.info:#.quotamaxvalue":                        "Resource quota max value",
	"resourcessnapshot.info:#.description":                          "Resource description",
	"resourcessnapshot.info:#.units":                                "Resource units",
	"resourcessnapshot.info:#.alertthreshold":                       "Generate alert when more than threshold percentage of resource is used",
	"resourcessnapshot.clusterinsts:#.clusterkey.name":              "Cluster name",
	"resourcessnapshot.clusterinsts:#.organization":                 "Name of Developer organization that this cluster belongs to",
	"resourcessnapshot.vmappinsts:#.appkey.organization":            "App developer organization",
	"resourcessnapshot.vmappinsts:#.appkey.name":                    "App name",
	"resourcessnapshot.vmappinsts:#.appkey.version":                 "App version",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name": "Cluster name",
	"resourcessnapshot.vmappinsts:#.clusterinstkey.organization":    "Name of Developer organization that this cluster belongs to",
	"trustpolicystate":     "Trust Policy State, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"compatibilityversion": "Version for compatibility tracking",
	"properties":           "Cloudlet properties",
}
var CloudletInfoSpecialArgs = map[string]string{
	"errors":            "StringArray",
	"fields":            "StringArray",
	"flavors:#.propmap": "StringToString",
	"properties":        "StringToString",
	"status.msgs":       "StringArray",
}
var CloudletMetricsRequiredArgs = []string{}
var CloudletMetricsOptionalArgs = []string{
	"foo",
}
var CloudletMetricsAliasArgs = []string{}
var CloudletMetricsComments = map[string]string{
	"foo": "what goes here?",
}
var CloudletMetricsSpecialArgs = map[string]string{}
var UpdateGPUDriverRequiredArgs = []string{
	"gpudrivername",
}
var UpdateGPUDriverOptionalArgs = []string{
	"gpudriver-org",
	"licenseconfig",
	"properties",
}
var AddGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
	"build.driverpath",
	"build.operatingsystem",
	"build.md5sum",
}
var AddGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.kernelversion",
	"build.hypervisorinfo",
	"ignorestate",
}
var RemoveGPUDriverBuildRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var RemoveGPUDriverBuildOptionalArgs = []string{
	"build.driverpathcreds",
	"build.md5sum",
	"ignorestate",
}
var GetGPUDriverBuildURLRequiredArgs = []string{
	"gpudrivername",
	"gpudriver-org",
	"build.name",
}
var GetGPUDriverBuildURLOptionalArgs = []string{
	"ignorestate",
}
var CreateCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"location.latitude",
	"location.longitude",
	"numdynamicips",
}
var CreateCloudletOptionalArgs = []string{
	"location.altitude",
	"ipsupport",
	"staticips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"notifysrvaddr",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
	"kafkacluster",
	"kafkauser",
	"kafkapassword",
	"gpuconfig.driver.name",
	"gpuconfig.driver.organization",
	"gpuconfig.properties",
	"enabledefaultserverlesscluster",
	"allianceorgs",
}
var DeleteCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var DeleteCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"notifysrvaddr",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
	"kafkacluster",
	"kafkauser",
	"kafkapassword",
	"gpuconfig.driver.name",
	"gpuconfig.driver.organization",
	"gpuconfig.properties",
	"enabledefaultserverlesscluster",
	"allianceorgs",
}
var UpdateCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var UpdateCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"notifysrvaddr",
	"envvar",
	"accessvars",
	"maintenancestate",
	"trustpolicy",
	"resourcequotas:empty",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
	"kafkacluster",
	"kafkauser",
	"kafkapassword",
	"gpuconfig.driver.name",
	"gpuconfig.driver.organization",
	"gpuconfig.properties",
	"enabledefaultserverlesscluster",
	"allianceorgs",
}
var ShowCloudletRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var ShowCloudletOptionalArgs = []string{
	"location.latitude",
	"location.longitude",
	"location.altitude",
	"ipsupport",
	"staticips",
	"numdynamicips",
	"timelimits.createclusterinsttimeout",
	"timelimits.updateclusterinsttimeout",
	"timelimits.deleteclusterinsttimeout",
	"timelimits.createappinsttimeout",
	"timelimits.updateappinsttimeout",
	"timelimits.deleteappinsttimeout",
	"crmoverride",
	"deploymentlocal",
	"platformtype",
	"notifysrvaddr",
	"flavor.name",
	"physicalname",
	"envvar",
	"containerversion",
	"accessvars",
	"vmimageversion",
	"deployment",
	"infraapiaccess",
	"infraconfig.externalnetworkname",
	"infraconfig.flavorname",
	"maintenancestate",
	"overridepolicycontainerversion",
	"vmpool",
	"trustpolicy",
	"resourcequotas:#.name",
	"resourcequotas:#.value",
	"resourcequotas:#.alertthreshold",
	"defaultresourcealertthreshold",
	"kafkacluster",
	"kafkauser",
	"kafkapassword",
	"gpuconfig.driver.name",
	"gpuconfig.driver.organization",
	"gpuconfig.properties",
	"enabledefaultserverlesscluster",
	"allianceorgs",
}
var GetCloudletPropsRequiredArgs = []string{
	"platformtype",
}
var GetCloudletPropsOptionalArgs = []string{
	"organization",
}
var GetCloudletResourceQuotaPropsRequiredArgs = []string{
	"platformtype",
}
var GetCloudletResourceQuotaPropsOptionalArgs = []string{
	"organization",
}
var GetCloudletResourceUsageRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var GetCloudletResourceUsageOptionalArgs = []string{
	"infrausage",
}
