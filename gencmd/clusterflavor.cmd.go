// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterflavor.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "encoding/json"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/yaml"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ClusterFlavorApiCmd edgeproto.ClusterFlavorApiClient
var ClusterFlavorIn edgeproto.ClusterFlavor
var ClusterFlavorFlagSet = pflag.NewFlagSet("ClusterFlavor", pflag.ExitOnError)
var ClusterFlavorNoConfigFlagSet = pflag.NewFlagSet("ClusterFlavorNoConfig", pflag.ExitOnError)

func ClusterFlavorKeySlicer(in *edgeproto.ClusterFlavorKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func ClusterFlavorKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func ClusterFlavorSlicer(in *edgeproto.ClusterFlavor) []string {
	s := make([]string, 0, 7)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Name)
	s = append(s, in.NodeFlavor.Name)
	s = append(s, in.MasterFlavor.Name)
	s = append(s, strconv.FormatUint(uint64(in.NumNodes), 10))
	s = append(s, strconv.FormatUint(uint64(in.MaxNodes), 10))
	s = append(s, strconv.FormatUint(uint64(in.NumMasters), 10))
	return s
}

func ClusterFlavorHeaderSlicer() []string {
	s := make([]string, 0, 7)
	s = append(s, "Fields")
	s = append(s, "Key-Name")
	s = append(s, "NodeFlavor-Name")
	s = append(s, "MasterFlavor-Name")
	s = append(s, "NumNodes")
	s = append(s, "MaxNodes")
	s = append(s, "NumMasters")
	return s
}

var CreateClusterFlavorCmd = &cobra.Command{
	Use: "CreateClusterFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterFlavorApiCmd == nil {
			fmt.Println("ClusterFlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterFlavorApiCmd.CreateClusterFlavor(ctx, &ClusterFlavorIn)
		cancel()
		if err != nil {
			fmt.Println("CreateClusterFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeleteClusterFlavorCmd = &cobra.Command{
	Use: "DeleteClusterFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterFlavorApiCmd == nil {
			fmt.Println("ClusterFlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterFlavorApiCmd.DeleteClusterFlavor(ctx, &ClusterFlavorIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteClusterFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var UpdateClusterFlavorCmd = &cobra.Command{
	Use: "UpdateClusterFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterFlavorApiCmd == nil {
			fmt.Println("ClusterFlavorApi client not initialized")
			return
		}
		var err error
		ClusterFlavorSetFields()
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := ClusterFlavorApiCmd.UpdateClusterFlavor(ctx, &ClusterFlavorIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateClusterFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var ShowClusterFlavorCmd = &cobra.Command{
	Use: "ShowClusterFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if ClusterFlavorApiCmd == nil {
			fmt.Println("ClusterFlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := ClusterFlavorApiCmd.ShowClusterFlavor(ctx, &ClusterFlavorIn)
		if err != nil {
			fmt.Println("ShowClusterFlavor failed: ", err)
			return
		}
		objs := make([]*edgeproto.ClusterFlavor, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowClusterFlavor recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ClusterFlavorHeaderSlicer(), "\t"))
			for _, obj := range objs {
				fmt.Fprintln(output, strings.Join(ClusterFlavorSlicer(obj), "\t"))
			}
			output.Flush()
		}
	},
}

var ClusterFlavorApiCmds = []*cobra.Command{
	CreateClusterFlavorCmd,
	DeleteClusterFlavorCmd,
	UpdateClusterFlavorCmd,
	ShowClusterFlavorCmd,
}

func init() {
	ClusterFlavorFlagSet.StringVar(&ClusterFlavorIn.Key.Name, "key-name", "", "Key.Name")
	ClusterFlavorFlagSet.StringVar(&ClusterFlavorIn.NodeFlavor.Name, "nodeflavor-name", "", "NodeFlavor.Name")
	ClusterFlavorFlagSet.StringVar(&ClusterFlavorIn.MasterFlavor.Name, "masterflavor-name", "", "MasterFlavor.Name")
	ClusterFlavorFlagSet.Uint32Var(&ClusterFlavorIn.NumNodes, "numnodes", 0, "NumNodes")
	ClusterFlavorFlagSet.Uint32Var(&ClusterFlavorIn.MaxNodes, "maxnodes", 0, "MaxNodes")
	ClusterFlavorFlagSet.Uint32Var(&ClusterFlavorIn.NumMasters, "nummasters", 0, "NumMasters")
	CreateClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorFlagSet)
	DeleteClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorFlagSet)
	UpdateClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorFlagSet)
	ShowClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorFlagSet)
}

func ClusterFlavorApiAllowNoConfig() {
	CreateClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorNoConfigFlagSet)
	DeleteClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorNoConfigFlagSet)
	UpdateClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorNoConfigFlagSet)
	ShowClusterFlavorCmd.Flags().AddFlagSet(ClusterFlavorNoConfigFlagSet)
}

func ClusterFlavorSetFields() {
	ClusterFlavorIn.Fields = make([]string, 0)
	if ClusterFlavorFlagSet.Lookup("key-name").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "2.1")
	}
	if ClusterFlavorFlagSet.Lookup("nodeflavor-name").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "3.1")
	}
	if ClusterFlavorFlagSet.Lookup("masterflavor-name").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "4.1")
	}
	if ClusterFlavorFlagSet.Lookup("numnodes").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "5")
	}
	if ClusterFlavorFlagSet.Lookup("maxnodes").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "6")
	}
	if ClusterFlavorFlagSet.Lookup("nummasters").Changed {
		ClusterFlavorIn.Fields = append(ClusterFlavorIn.Fields, "7")
	}
}
