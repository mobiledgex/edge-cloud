// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var ControllerApiCmd edgeproto.ControllerApiClient
var ControllerIn edgeproto.Controller
var ControllerFlagSet = pflag.NewFlagSet("Controller", pflag.ExitOnError)
var ControllerNoConfigFlagSet = pflag.NewFlagSet("ControllerNoConfig", pflag.ExitOnError)

func ControllerKeySlicer(in *edgeproto.ControllerKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Addr)
	return s
}

func ControllerKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Addr")
	return s
}

func ControllerKeyWriteOutputArray(objs []*edgeproto.ControllerKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ControllerKeyHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ControllerKeySlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ControllerKeyWriteOutputOne(obj *edgeproto.ControllerKey) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ControllerKeyHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ControllerKeySlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ControllerSlicer(in *edgeproto.Controller) []string {
	s := make([]string, 0, 6)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Addr)
	s = append(s, in.BuildMaster)
	s = append(s, in.BuildHead)
	s = append(s, in.BuildAuthor)
	s = append(s, in.Hostname)
	return s
}

func ControllerHeaderSlicer() []string {
	s := make([]string, 0, 6)
	s = append(s, "Fields")
	s = append(s, "Key-Addr")
	s = append(s, "BuildMaster")
	s = append(s, "BuildHead")
	s = append(s, "BuildAuthor")
	s = append(s, "Hostname")
	return s
}

func ControllerWriteOutputArray(objs []*edgeproto.Controller) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ControllerHeaderSlicer(), "\t"))
		for _, obj := range objs {
			fmt.Fprintln(output, strings.Join(ControllerSlicer(obj), "\t"))
		}
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(objs)
	}
}

func ControllerWriteOutputOne(obj *edgeproto.Controller) {
	if cmdsup.OutputFormat == cmdsup.OutputFormatTable {
		output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
		fmt.Fprintln(output, strings.Join(ControllerHeaderSlicer(), "\t"))
		fmt.Fprintln(output, strings.Join(ControllerSlicer(obj), "\t"))
		output.Flush()
	} else {
		cmdsup.WriteOutputGeneric(obj)
	}
}
func ControllerHideTags(in *edgeproto.Controller) {
	if cmdsup.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cmdsup.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.BuildMaster = ""
	}
	if _, found := tags["nocmp"]; found {
		in.BuildHead = ""
	}
	if _, found := tags["nocmp"]; found {
		in.BuildAuthor = ""
	}
	if _, found := tags["nocmp"]; found {
		in.Hostname = ""
	}
}

var ShowControllerCmd = &cobra.Command{
	Use: "ShowController",
	RunE: func(cmd *cobra.Command, args []string) error {
		// if we got this far, usage has been met.
		cmd.SilenceUsage = true
		return ShowController(&ControllerIn)
	},
}

func ShowController(in *edgeproto.Controller) error {
	if ControllerApiCmd == nil {
		return fmt.Errorf("ControllerApi client not initialized")
	}
	ctx := context.Background()
	stream, err := ControllerApiCmd.ShowController(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowController failed: %s", errstr)
	}
	objs := make([]*edgeproto.Controller, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowController recv failed: %s", err.Error())
		}
		ControllerHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	ControllerWriteOutputArray(objs)
	return nil
}

func ShowControllers(data []edgeproto.Controller, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowController %v\n", data[ii])
		myerr := ShowController(&data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ControllerApiCmds = []*cobra.Command{
	ShowControllerCmd,
}

func init() {
	ControllerFlagSet.StringVar(&ControllerIn.Key.Addr, "key-addr", "", "Key.Addr")
	ControllerFlagSet.StringVar(&ControllerIn.BuildMaster, "buildmaster", "", "BuildMaster")
	ControllerFlagSet.StringVar(&ControllerIn.BuildHead, "buildhead", "", "BuildHead")
	ControllerFlagSet.StringVar(&ControllerIn.BuildAuthor, "buildauthor", "", "BuildAuthor")
	ControllerFlagSet.StringVar(&ControllerIn.Hostname, "hostname", "", "Hostname")
	ShowControllerCmd.Flags().AddFlagSet(ControllerFlagSet)
}

func ControllerApiAllowNoConfig() {
	ShowControllerCmd.Flags().AddFlagSet(ControllerNoConfigFlagSet)
}

func ControllerSetFields() {
	ControllerIn.Fields = make([]string, 0)
	if ControllerFlagSet.Lookup("key-addr").Changed {
		ControllerIn.Fields = append(ControllerIn.Fields, "2.1")
	}
	if ControllerFlagSet.Lookup("buildmaster").Changed {
		ControllerIn.Fields = append(ControllerIn.Fields, "4")
	}
	if ControllerFlagSet.Lookup("buildhead").Changed {
		ControllerIn.Fields = append(ControllerIn.Fields, "5")
	}
	if ControllerFlagSet.Lookup("buildauthor").Changed {
		ControllerIn.Fields = append(ControllerIn.Fields, "6")
	}
	if ControllerFlagSet.Lookup("hostname").Changed {
		ControllerIn.Fields = append(ControllerIn.Fields, "7")
	}
}
