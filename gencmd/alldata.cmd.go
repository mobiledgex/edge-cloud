// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alldata.proto

package gencmd

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/mobiledgex/edge-cloud/cli"
	distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
	"strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
func AllDataHideTags(in *edgeproto.AllData) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	for i0 := 0; i0 < len(in.Flavors); i0++ {
	}
	for i1 := 0; i1 < len(in.Settings.EdgeEventsMetricsContinuousQueriesCollectionIntervals); i1++ {
	}
	for i0 := 0; i0 < len(in.OperatorCodes); i0++ {
	}
	for i0 := 0; i0 < len(in.ResTagTables); i0++ {
	}
	for i0 := 0; i0 < len(in.TrustPolicies); i0++ {
		for i1 := 0; i1 < len(in.TrustPolicies[i0].OutboundSecurityRules); i1++ {
		}
	}
	for i0 := 0; i0 < len(in.Cloudlets); i0++ {
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].Errors = nil
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].Status = edgeproto.StatusInfo{}
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].State = 0
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].CrmOverride = 0
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].DeploymentLocal = false
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].NotifySrvAddr = ""
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].Config = edgeproto.PlatformConfig{}
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].Deployment = ""
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].CrmAccessPublicKey = ""
		}
		if _, found := tags["timestamp"]; found {
			in.Cloudlets[i0].CreatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["timestamp"]; found {
			in.Cloudlets[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].TrustPolicyState = 0
		}
		for i1 := 0; i1 < len(in.Cloudlets[i0].ResourceQuotas); i1++ {
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].DefaultResourceAlertThreshold = 0
		}
		if _, found := tags["nocmp"]; found {
			in.Cloudlets[i0].HostController = ""
		}
	}
	for i0 := 0; i0 < len(in.CloudletInfos); i0++ {
		if _, found := tags["nocmp"]; found {
			in.CloudletInfos[i0].NotifyId = 0
		}
		if _, found := tags["nocmp"]; found {
			in.CloudletInfos[i0].Controller = ""
		}
		for i1 := 0; i1 < len(in.CloudletInfos[i0].Flavors); i1++ {
		}
		if _, found := tags["nocmp"]; found {
			in.CloudletInfos[i0].Status = edgeproto.StatusInfo{}
		}
		for i1 := 0; i1 < len(in.CloudletInfos[i0].AvailabilityZones); i1++ {
		}
		for i1 := 0; i1 < len(in.CloudletInfos[i0].OsImages); i1++ {
		}
		for i2 := 0; i2 < len(in.CloudletInfos[i0].ResourcesSnapshot.PlatformVms); i2++ {
			for i3 := 0; i3 < len(in.CloudletInfos[i0].ResourcesSnapshot.PlatformVms[i2].Ipaddresses); i3++ {
			}
			for i3 := 0; i3 < len(in.CloudletInfos[i0].ResourcesSnapshot.PlatformVms[i2].Containers); i3++ {
			}
		}
		for i2 := 0; i2 < len(in.CloudletInfos[i0].ResourcesSnapshot.Info); i2++ {
		}
		for i2 := 0; i2 < len(in.CloudletInfos[i0].ResourcesSnapshot.ClusterInsts); i2++ {
		}
		for i2 := 0; i2 < len(in.CloudletInfos[i0].ResourcesSnapshot.VmAppInsts); i2++ {
		}
		if _, found := tags["nocmp"]; found {
			in.CloudletInfos[i0].TrustPolicyState = 0
		}
		if _, found := tags["nocmp"]; found {
			in.CloudletInfos[i0].CompatibilityVersion = 0
		}
	}
	for i0 := 0; i0 < len(in.CloudletPools); i0++ {
		if _, found := tags["timestamp"]; found {
			in.CloudletPools[i0].CreatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["timestamp"]; found {
			in.CloudletPools[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
	}
	for i0 := 0; i0 < len(in.AutoProvPolicies); i0++ {
		for i1 := 0; i1 < len(in.AutoProvPolicies[i0].Cloudlets); i1++ {
		}
	}
	for i0 := 0; i0 < len(in.AutoProvPolicyCloudlets); i0++ {
	}
	for i0 := 0; i0 < len(in.AutoScalePolicies); i0++ {
	}
	for i0 := 0; i0 < len(in.ClusterInsts); i0++ {
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].State = 0
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].Errors = nil
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].CrmOverride = 0
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].AllocatedIp = ""
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].NodeFlavor = ""
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].Status = edgeproto.StatusInfo{}
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].ExternalVolumeSize = 0
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].ImageName = ""
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].MasterNodeFlavor = ""
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].SkipCrmCleanupOnFailure = false
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].OptRes = ""
		}
		if _, found := tags["nocmp"]; found {
			in.ClusterInsts[i0].Resources = edgeproto.InfraResources{}
		}
		if _, found := tags["timestamp"]; found {
			in.ClusterInsts[i0].CreatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["timestamp"]; found {
			in.ClusterInsts[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["timestamp"]; found {
			in.ClusterInsts[i0].ReservationEndedAt = distributed_match_engine.Timestamp{}
		}
	}
	for i0 := 0; i0 < len(in.Apps); i0++ {
		if _, found := tags["nocmp"]; found {
			in.Apps[i0].DeploymentManifest = ""
		}
		if _, found := tags["nocmp"]; found {
			in.Apps[i0].DeploymentGenerator = ""
		}
		if _, found := tags["nocmp"]; found {
			in.Apps[i0].DelOpt = 0
		}
		for i1 := 0; i1 < len(in.Apps[i0].Configs); i1++ {
		}
		if _, found := tags["nocmp"]; found {
			in.Apps[i0].Revision = ""
		}
		if _, found := tags["nocmp"]; found {
			in.Apps[i0].DeletePrepare = false
		}
		if _, found := tags["timestamp"]; found {
			in.Apps[i0].CreatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["timestamp"]; found {
			in.Apps[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
		for i1 := 0; i1 < len(in.Apps[i0].RequiredOutboundConnections); i1++ {
		}
	}
	for i0 := 0; i0 < len(in.AppInstances); i0++ {
		for i1 := 0; i1 < len(in.AppInstances[i0].MappedPorts); i1++ {
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].State = 0
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].Errors = nil
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].CrmOverride = 0
		}
		if _, found := tags["timestamp"]; found {
			in.AppInstances[i0].CreatedAt = distributed_match_engine.Timestamp{}
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].Status = edgeproto.StatusInfo{}
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].Revision = ""
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].ForceUpdate = false
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].UpdateMultiple = false
		}
		for i1 := 0; i1 < len(in.AppInstances[i0].Configs); i1++ {
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].HealthCheck = 0
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].PowerState = 0
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].ExternalVolumeSize = 0
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].AvailabilityZone = ""
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].VmFlavor = ""
		}
		if _, found := tags["nocmp"]; found {
			in.AppInstances[i0].OptRes = ""
		}
		if _, found := tags["timestamp"]; found {
			in.AppInstances[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
	}
	for i0 := 0; i0 < len(in.AppInstRefs); i0++ {
	}
	for i0 := 0; i0 < len(in.VmPools); i0++ {
		for i1 := 0; i1 < len(in.VmPools[i0].Vms); i1++ {
			if _, found := tags["timestamp"]; found {
				in.VmPools[i0].Vms[i1].UpdatedAt = google_protobuf.Timestamp{}
			}
		}
		if _, found := tags["nocmp"]; found {
			in.VmPools[i0].State = 0
		}
		if _, found := tags["nocmp"]; found {
			in.VmPools[i0].Errors = nil
		}
		if _, found := tags["nocmp"]; found {
			in.VmPools[i0].CrmOverride = 0
		}
	}
	for i0 := 0; i0 < len(in.GpuDrivers); i0++ {
		for i1 := 0; i1 < len(in.GpuDrivers[i0].Builds); i1++ {
		}
	}
	for i0 := 0; i0 < len(in.AlertPolicies); i0++ {
	}
	for i0 := 0; i0 < len(in.FlowRateLimitSettings); i0++ {
	}
	for i0 := 0; i0 < len(in.MaxReqsRateLimitSettings); i0++ {
	}
}

var AllDataRequiredArgs = []string{}
var AllDataOptionalArgs = []string{
	"flavors:#.fields",
	"flavors:#.key.name",
	"flavors:#.ram",
	"flavors:#.vcpus",
	"flavors:#.disk",
	"flavors:#.optresmap",
	"settings.fields",
	"settings.shepherdmetricscollectioninterval",
	"settings.shepherdalertevaluationinterval",
	"settings.shepherdmetricsscrapeinterval",
	"settings.shepherdhealthcheckretries",
	"settings.shepherdhealthcheckinterval",
	"settings.autodeployintervalsec",
	"settings.autodeployoffsetsec",
	"settings.autodeploymaxintervals",
	"settings.createappinsttimeout",
	"settings.updateappinsttimeout",
	"settings.deleteappinsttimeout",
	"settings.createclusterinsttimeout",
	"settings.updateclusterinsttimeout",
	"settings.deleteclusterinsttimeout",
	"settings.masternodeflavor",
	"settings.maxtrackeddmeclients",
	"settings.chefclientinterval",
	"settings.influxdbmetricsretention",
	"settings.cloudletmaintenancetimeout",
	"settings.updatevmpooltimeout",
	"settings.updatetrustpolicytimeout",
	"settings.dmeapimetricscollectioninterval",
	"settings.edgeeventsmetricscollectioninterval",
	"settings.cleanupreservableautoclusteridletime",
	"settings.influxdbcloudletusagemetricsretention",
	"settings.createcloudlettimeout",
	"settings.updatecloudlettimeout",
	"settings.locationtilesidelengthkm",
	"settings.edgeeventsmetricscontinuousqueriescollectionintervals:#.interval",
	"settings.edgeeventsmetricscontinuousqueriescollectionintervals:#.retention",
	"settings.influxdbdownsampledmetricsretention",
	"settings.influxdbedgeeventsmetricsretention",
	"settings.appinstclientcleanupinterval",
	"settings.clusterautoscaleaveragingdurationsec",
	"settings.clusterautoscaleretrydelay",
	"settings.alertpolicymintriggertime",
	"settings.disableratelimit",
	"settings.maxnumperipratelimiters",
	"settings.resourcesnapshotthreadinterval",
	"operatorcodes:#.code",
	"operatorcodes:#.organization",
	"restagtables:#.fields",
	"restagtables:#.key.name",
	"restagtables:#.key.organization",
	"restagtables:#.tags",
	"restagtables:#.azone",
	"trustpolicies:#.fields",
	"trustpolicies:#.key.organization",
	"trustpolicies:#.key.name",
	"trustpolicies:#.outboundsecurityrules:#.protocol",
	"trustpolicies:#.outboundsecurityrules:#.portrangemin",
	"trustpolicies:#.outboundsecurityrules:#.portrangemax",
	"trustpolicies:#.outboundsecurityrules:#.remotecidr",
	"cloudlets:#.fields",
	"cloudlets:#.key.organization",
	"cloudlets:#.key.name",
	"cloudlets:#.location.latitude",
	"cloudlets:#.location.longitude",
	"cloudlets:#.location.horizontalaccuracy",
	"cloudlets:#.location.verticalaccuracy",
	"cloudlets:#.location.altitude",
	"cloudlets:#.location.course",
	"cloudlets:#.location.speed",
	"cloudlets:#.location.timestamp.seconds",
	"cloudlets:#.location.timestamp.nanos",
	"cloudlets:#.ipsupport",
	"cloudlets:#.staticips",
	"cloudlets:#.numdynamicips",
	"cloudlets:#.timelimits.createclusterinsttimeout",
	"cloudlets:#.timelimits.updateclusterinsttimeout",
	"cloudlets:#.timelimits.deleteclusterinsttimeout",
	"cloudlets:#.timelimits.createappinsttimeout",
	"cloudlets:#.timelimits.updateappinsttimeout",
	"cloudlets:#.timelimits.deleteappinsttimeout",
	"cloudlets:#.errors",
	"cloudlets:#.status.tasknumber",
	"cloudlets:#.status.maxtasks",
	"cloudlets:#.status.taskname",
	"cloudlets:#.status.stepname",
	"cloudlets:#.status.msgcount",
	"cloudlets:#.status.msgs",
	"cloudlets:#.state",
	"cloudlets:#.crmoverride",
	"cloudlets:#.deploymentlocal",
	"cloudlets:#.platformtype",
	"cloudlets:#.notifysrvaddr",
	"cloudlets:#.flavor.name",
	"cloudlets:#.physicalname",
	"cloudlets:#.envvar",
	"cloudlets:#.containerversion",
	"cloudlets:#.config.containerregistrypath",
	"cloudlets:#.config.cloudletvmimagepath",
	"cloudlets:#.config.notifyctrladdrs",
	"cloudlets:#.config.tlscertfile",
	"cloudlets:#.config.tlskeyfile",
	"cloudlets:#.config.tlscafile",
	"cloudlets:#.config.envvar",
	"cloudlets:#.config.platformtag",
	"cloudlets:#.config.testmode",
	"cloudlets:#.config.span",
	"cloudlets:#.config.cleanupmode",
	"cloudlets:#.config.region",
	"cloudlets:#.config.commercialcerts",
	"cloudlets:#.config.usevaultpki",
	"cloudlets:#.config.appdnsroot",
	"cloudlets:#.config.chefserverpath",
	"cloudlets:#.config.chefclientinterval",
	"cloudlets:#.config.deploymenttag",
	"cloudlets:#.config.crmaccessprivatekey",
	"cloudlets:#.config.accessapiaddr",
	"cloudlets:#.config.cachedir",
	"cloudlets:#.restagmap:#.key",
	"cloudlets:#.restagmap:#.value.name",
	"cloudlets:#.restagmap:#.value.organization",
	"cloudlets:#.accessvars",
	"cloudlets:#.vmimageversion",
	"cloudlets:#.deployment",
	"cloudlets:#.infraapiaccess",
	"cloudlets:#.infraconfig.externalnetworkname",
	"cloudlets:#.infraconfig.flavorname",
	"cloudlets:#.chefclientkey",
	"cloudlets:#.maintenancestate",
	"cloudlets:#.overridepolicycontainerversion",
	"cloudlets:#.vmpool",
	"cloudlets:#.crmaccesspublickey",
	"cloudlets:#.crmaccesskeyupgraderequired",
	"cloudlets:#.createdat.seconds",
	"cloudlets:#.createdat.nanos",
	"cloudlets:#.updatedat.seconds",
	"cloudlets:#.updatedat.nanos",
	"cloudlets:#.trustpolicy",
	"cloudlets:#.trustpolicystate",
	"cloudlets:#.resourcequotas:#.name",
	"cloudlets:#.resourcequotas:#.value",
	"cloudlets:#.resourcequotas:#.alertthreshold",
	"cloudlets:#.defaultresourcealertthreshold",
	"cloudlets:#.hostcontroller",
	"cloudlets:#.kafkacluster",
	"cloudlets:#.kafkauser",
	"cloudlets:#.kafkapassword",
	"cloudlets:#.gpuconfig.driver.name",
	"cloudlets:#.gpuconfig.driver.organization",
	"cloudlets:#.gpuconfig.properties",
	"cloudlets:#.enabledefaultserverlesscluster",
	"cloudlets:#.allianceorgs",
	"cloudletinfos:#.fields",
	"cloudletinfos:#.key.organization",
	"cloudletinfos:#.key.name",
	"cloudletinfos:#.state",
	"cloudletinfos:#.notifyid",
	"cloudletinfos:#.controller",
	"cloudletinfos:#.osmaxram",
	"cloudletinfos:#.osmaxvcores",
	"cloudletinfos:#.osmaxvolgb",
	"cloudletinfos:#.errors",
	"cloudletinfos:#.flavors:#.name",
	"cloudletinfos:#.flavors:#.vcpus",
	"cloudletinfos:#.flavors:#.ram",
	"cloudletinfos:#.flavors:#.disk",
	"cloudletinfos:#.flavors:#.propmap",
	"cloudletinfos:#.status.tasknumber",
	"cloudletinfos:#.status.maxtasks",
	"cloudletinfos:#.status.taskname",
	"cloudletinfos:#.status.stepname",
	"cloudletinfos:#.status.msgcount",
	"cloudletinfos:#.status.msgs",
	"cloudletinfos:#.containerversion",
	"cloudletinfos:#.availabilityzones:#.name",
	"cloudletinfos:#.availabilityzones:#.status",
	"cloudletinfos:#.osimages:#.name",
	"cloudletinfos:#.osimages:#.tags",
	"cloudletinfos:#.osimages:#.properties",
	"cloudletinfos:#.osimages:#.diskformat",
	"cloudletinfos:#.controllercachereceived",
	"cloudletinfos:#.maintenancestate",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.name",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.type",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.status",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.infraflavor",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.ipaddresses:#.externalip",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.ipaddresses:#.internalip",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.name",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.type",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.status",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.clusterip",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.restarts",
	"cloudletinfos:#.resourcessnapshot.info:#.name",
	"cloudletinfos:#.resourcessnapshot.info:#.value",
	"cloudletinfos:#.resourcessnapshot.info:#.inframaxvalue",
	"cloudletinfos:#.resourcessnapshot.info:#.quotamaxvalue",
	"cloudletinfos:#.resourcessnapshot.info:#.description",
	"cloudletinfos:#.resourcessnapshot.info:#.units",
	"cloudletinfos:#.resourcessnapshot.info:#.alertthreshold",
	"cloudletinfos:#.resourcessnapshot.clusterinsts:#.clusterkey.name",
	"cloudletinfos:#.resourcessnapshot.clusterinsts:#.organization",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.organization",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.name",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.version",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.clusterinstkey.organization",
	"cloudletinfos:#.trustpolicystate",
	"cloudletinfos:#.compatibilityversion",
	"cloudletinfos:#.properties",
	"cloudletpools:#.fields",
	"cloudletpools:#.key.organization",
	"cloudletpools:#.key.name",
	"cloudletpools:#.cloudlets",
	"cloudletpools:#.createdat.seconds",
	"cloudletpools:#.createdat.nanos",
	"cloudletpools:#.updatedat.seconds",
	"cloudletpools:#.updatedat.nanos",
	"autoprovpolicies:#.fields",
	"autoprovpolicies:#.key.organization",
	"autoprovpolicies:#.key.name",
	"autoprovpolicies:#.deployclientcount",
	"autoprovpolicies:#.deployintervalcount",
	"autoprovpolicies:#.cloudlets:#.key.organization",
	"autoprovpolicies:#.cloudlets:#.key.name",
	"autoprovpolicies:#.cloudlets:#.loc.latitude",
	"autoprovpolicies:#.cloudlets:#.loc.longitude",
	"autoprovpolicies:#.cloudlets:#.loc.horizontalaccuracy",
	"autoprovpolicies:#.cloudlets:#.loc.verticalaccuracy",
	"autoprovpolicies:#.cloudlets:#.loc.altitude",
	"autoprovpolicies:#.cloudlets:#.loc.course",
	"autoprovpolicies:#.cloudlets:#.loc.speed",
	"autoprovpolicies:#.cloudlets:#.loc.timestamp.seconds",
	"autoprovpolicies:#.cloudlets:#.loc.timestamp.nanos",
	"autoprovpolicies:#.minactiveinstances",
	"autoprovpolicies:#.maxinstances",
	"autoprovpolicies:#.undeployclientcount",
	"autoprovpolicies:#.undeployintervalcount",
	"autoprovpolicycloudlets:#.key.organization",
	"autoprovpolicycloudlets:#.key.name",
	"autoprovpolicycloudlets:#.cloudletkey.organization",
	"autoprovpolicycloudlets:#.cloudletkey.name",
	"autoscalepolicies:#.fields",
	"autoscalepolicies:#.key.organization",
	"autoscalepolicies:#.key.name",
	"autoscalepolicies:#.minnodes",
	"autoscalepolicies:#.maxnodes",
	"autoscalepolicies:#.scaleupcputhresh",
	"autoscalepolicies:#.scaledowncputhresh",
	"autoscalepolicies:#.triggertimesec",
	"autoscalepolicies:#.stabilizationwindowsec",
	"autoscalepolicies:#.targetcpu",
	"autoscalepolicies:#.targetmem",
	"autoscalepolicies:#.targetactiveconnections",
	"idlereservableclusterinsts.idletime",
	"clusterinsts:#.fields",
	"clusterinsts:#.key.clusterkey.name",
	"clusterinsts:#.key.cloudletkey.organization",
	"clusterinsts:#.key.cloudletkey.name",
	"clusterinsts:#.key.organization",
	"clusterinsts:#.flavor.name",
	"clusterinsts:#.liveness",
	"clusterinsts:#.auto",
	"clusterinsts:#.state",
	"clusterinsts:#.errors",
	"clusterinsts:#.crmoverride",
	"clusterinsts:#.ipaccess",
	"clusterinsts:#.allocatedip",
	"clusterinsts:#.nodeflavor",
	"clusterinsts:#.deployment",
	"clusterinsts:#.nummasters",
	"clusterinsts:#.numnodes",
	"clusterinsts:#.status.tasknumber",
	"clusterinsts:#.status.maxtasks",
	"clusterinsts:#.status.taskname",
	"clusterinsts:#.status.stepname",
	"clusterinsts:#.status.msgcount",
	"clusterinsts:#.status.msgs",
	"clusterinsts:#.externalvolumesize",
	"clusterinsts:#.autoscalepolicy",
	"clusterinsts:#.availabilityzone",
	"clusterinsts:#.imagename",
	"clusterinsts:#.reservable",
	"clusterinsts:#.reservedby",
	"clusterinsts:#.sharedvolumesize",
	"clusterinsts:#.masternodeflavor",
	"clusterinsts:#.skipcrmcleanuponfailure",
	"clusterinsts:#.optres",
	"clusterinsts:#.resources.vms:#.name",
	"clusterinsts:#.resources.vms:#.type",
	"clusterinsts:#.resources.vms:#.status",
	"clusterinsts:#.resources.vms:#.infraflavor",
	"clusterinsts:#.resources.vms:#.ipaddresses:#.externalip",
	"clusterinsts:#.resources.vms:#.ipaddresses:#.internalip",
	"clusterinsts:#.resources.vms:#.containers:#.name",
	"clusterinsts:#.resources.vms:#.containers:#.type",
	"clusterinsts:#.resources.vms:#.containers:#.status",
	"clusterinsts:#.resources.vms:#.containers:#.clusterip",
	"clusterinsts:#.resources.vms:#.containers:#.restarts",
	"clusterinsts:#.createdat.seconds",
	"clusterinsts:#.createdat.nanos",
	"clusterinsts:#.updatedat.seconds",
	"clusterinsts:#.updatedat.nanos",
	"clusterinsts:#.reservationendedat.seconds",
	"clusterinsts:#.reservationendedat.nanos",
	"clusterinsts:#.multitenant",
	"apps:#.fields",
	"apps:#.key.organization",
	"apps:#.key.name",
	"apps:#.key.version",
	"apps:#.imagepath",
	"apps:#.imagetype",
	"apps:#.accessports",
	"apps:#.defaultflavor.name",
	"apps:#.authpublickey",
	"apps:#.command",
	"apps:#.annotations",
	"apps:#.deployment",
	"apps:#.deploymentmanifest",
	"apps:#.deploymentgenerator",
	"apps:#.androidpackagename",
	"apps:#.delopt",
	"apps:#.configs:#.kind",
	"apps:#.configs:#.config",
	"apps:#.scalewithcluster",
	"apps:#.internalports",
	"apps:#.revision",
	"apps:#.officialfqdn",
	"apps:#.md5sum",
	"apps:#.autoprovpolicy",
	"apps:#.accesstype",
	"apps:#.deleteprepare",
	"apps:#.autoprovpolicies",
	"apps:#.templatedelimiter",
	"apps:#.skiphcports",
	"apps:#.createdat.seconds",
	"apps:#.createdat.nanos",
	"apps:#.updatedat.seconds",
	"apps:#.updatedat.nanos",
	"apps:#.trusted",
	"apps:#.requiredoutboundconnections:#.protocol",
	"apps:#.requiredoutboundconnections:#.port",
	"apps:#.requiredoutboundconnections:#.remoteip",
	"apps:#.allowserverless",
	"apps:#.serverlessconfig.vcpus",
	"apps:#.serverlessconfig.ram",
	"apps:#.serverlessconfig.minreplicas",
	"apps:#.vmappostype",
	"apps:#.alertpolicies",
	"appinstances:#.fields",
	"appinstances:#.key.appkey.organization",
	"appinstances:#.key.appkey.name",
	"appinstances:#.key.appkey.version",
	"appinstances:#.key.clusterinstkey.clusterkey.name",
	"appinstances:#.key.clusterinstkey.cloudletkey.organization",
	"appinstances:#.key.clusterinstkey.cloudletkey.name",
	"appinstances:#.key.clusterinstkey.organization",
	"appinstances:#.cloudletloc.latitude",
	"appinstances:#.cloudletloc.longitude",
	"appinstances:#.cloudletloc.horizontalaccuracy",
	"appinstances:#.cloudletloc.verticalaccuracy",
	"appinstances:#.cloudletloc.altitude",
	"appinstances:#.cloudletloc.course",
	"appinstances:#.cloudletloc.speed",
	"appinstances:#.cloudletloc.timestamp.seconds",
	"appinstances:#.cloudletloc.timestamp.nanos",
	"appinstances:#.uri",
	"appinstances:#.liveness",
	"appinstances:#.mappedports:#.proto",
	"appinstances:#.mappedports:#.internalport",
	"appinstances:#.mappedports:#.publicport",
	"appinstances:#.mappedports:#.fqdnprefix",
	"appinstances:#.mappedports:#.endport",
	"appinstances:#.mappedports:#.tls",
	"appinstances:#.mappedports:#.nginx",
	"appinstances:#.mappedports:#.maxpktsize",
	"appinstances:#.flavor.name",
	"appinstances:#.state",
	"appinstances:#.errors",
	"appinstances:#.crmoverride",
	"appinstances:#.runtimeinfo.containerids",
	"appinstances:#.createdat.seconds",
	"appinstances:#.createdat.nanos",
	"appinstances:#.autoclusteripaccess",
	"appinstances:#.status.tasknumber",
	"appinstances:#.status.maxtasks",
	"appinstances:#.status.taskname",
	"appinstances:#.status.stepname",
	"appinstances:#.status.msgcount",
	"appinstances:#.status.msgs",
	"appinstances:#.revision",
	"appinstances:#.forceupdate",
	"appinstances:#.updatemultiple",
	"appinstances:#.configs:#.kind",
	"appinstances:#.configs:#.config",
	"appinstances:#.healthcheck",
	"appinstances:#.privacypolicy",
	"appinstances:#.powerstate",
	"appinstances:#.externalvolumesize",
	"appinstances:#.availabilityzone",
	"appinstances:#.vmflavor",
	"appinstances:#.optres",
	"appinstances:#.updatedat.seconds",
	"appinstances:#.updatedat.nanos",
	"appinstances:#.realclustername",
	"appinstances:#.internalporttolbip",
	"appinstrefs:#.key.organization",
	"appinstrefs:#.key.name",
	"appinstrefs:#.key.version",
	"appinstrefs:#.insts:#.key",
	"appinstrefs:#.insts:#.value",
	"appinstrefs:#.deleterequestedinsts:#.key",
	"appinstrefs:#.deleterequestedinsts:#.value",
	"vmpools:#.fields",
	"vmpools:#.key.organization",
	"vmpools:#.key.name",
	"vmpools:#.vms:#.name",
	"vmpools:#.vms:#.netinfo.externalip",
	"vmpools:#.vms:#.netinfo.internalip",
	"vmpools:#.vms:#.groupname",
	"vmpools:#.vms:#.state",
	"vmpools:#.vms:#.updatedat.seconds",
	"vmpools:#.vms:#.updatedat.nanos",
	"vmpools:#.vms:#.internalname",
	"vmpools:#.vms:#.flavor.name",
	"vmpools:#.vms:#.flavor.vcpus",
	"vmpools:#.vms:#.flavor.ram",
	"vmpools:#.vms:#.flavor.disk",
	"vmpools:#.vms:#.flavor.propmap",
	"vmpools:#.state",
	"vmpools:#.errors",
	"vmpools:#.status.tasknumber",
	"vmpools:#.status.maxtasks",
	"vmpools:#.status.taskname",
	"vmpools:#.status.stepname",
	"vmpools:#.status.msgcount",
	"vmpools:#.status.msgs",
	"vmpools:#.crmoverride",
	"gpudrivers:#.fields",
	"gpudrivers:#.key.name",
	"gpudrivers:#.key.organization",
	"gpudrivers:#.builds:#.name",
	"gpudrivers:#.builds:#.driverpath",
	"gpudrivers:#.builds:#.driverpathcreds",
	"gpudrivers:#.builds:#.operatingsystem",
	"gpudrivers:#.builds:#.kernelversion",
	"gpudrivers:#.builds:#.hypervisorinfo",
	"gpudrivers:#.builds:#.md5sum",
	"gpudrivers:#.licenseconfig",
	"gpudrivers:#.licenseconfigmd5sum",
	"gpudrivers:#.properties",
	"gpudrivers:#.state",
	"gpudrivers:#.ignorestate",
	"alertpolicies:#.fields",
	"alertpolicies:#.key.organization",
	"alertpolicies:#.key.name",
	"alertpolicies:#.cpuutilizationlimit",
	"alertpolicies:#.memutilizationlimit",
	"alertpolicies:#.diskutilizationlimit",
	"alertpolicies:#.activeconnlimit",
	"alertpolicies:#.severity",
	"alertpolicies:#.triggertime",
	"alertpolicies:#.labels",
	"alertpolicies:#.annotations",
	"alertpolicies:#.description",
	"flowratelimitsettings:#.fields",
	"flowratelimitsettings:#.key.flowsettingsname",
	"flowratelimitsettings:#.key.ratelimitkey.apiname",
	"flowratelimitsettings:#.key.ratelimitkey.apiendpointtype",
	"flowratelimitsettings:#.key.ratelimitkey.ratelimittarget",
	"flowratelimitsettings:#.settings.flowalgorithm",
	"flowratelimitsettings:#.settings.reqspersecond",
	"flowratelimitsettings:#.settings.burstsize",
	"maxreqsratelimitsettings:#.fields",
	"maxreqsratelimitsettings:#.key.maxreqssettingsname",
	"maxreqsratelimitsettings:#.key.ratelimitkey.apiname",
	"maxreqsratelimitsettings:#.key.ratelimitkey.apiendpointtype",
	"maxreqsratelimitsettings:#.key.ratelimitkey.ratelimittarget",
	"maxreqsratelimitsettings:#.settings.maxreqsalgorithm",
	"maxreqsratelimitsettings:#.settings.maxrequests",
	"maxreqsratelimitsettings:#.settings.interval",
}
var AllDataAliasArgs = []string{}
var AllDataComments = map[string]string{
	"flavors:#.fields":                                                              "Fields are used for the Update API to specify which fields to apply",
	"flavors:#.key.name":                                                            "Flavor name",
	"flavors:#.ram":                                                                 "RAM in megabytes",
	"flavors:#.vcpus":                                                               "Number of virtual CPUs",
	"flavors:#.disk":                                                                "Amount of disk space in gigabytes",
	"flavors:#.optresmap":                                                           "Optional Resources request, key = gpu form: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
	"settings.fields":                                                               "Fields are used for the Update API to specify which fields to apply",
	"settings.shepherdmetricscollectioninterval":                                    "Shepherd metrics collection interval for k8s and docker appInstances (duration)",
	"settings.shepherdalertevaluationinterval":                                      "Shepherd alert evaluation interval for k8s and docker appInstances (duration)",
	"settings.shepherdmetricsscrapeinterval":                                        "Shepherd metrics scraping interval (how often metrics are pulled by prometheus, vs pushed to Controller by Shepherd collection)",
	"settings.shepherdhealthcheckretries":                                           "Number of times Shepherd Health Check fails before we mark appInst down",
	"settings.shepherdhealthcheckinterval":                                          "Health Checking probing frequency (duration)",
	"settings.autodeployintervalsec":                                                "Auto Provisioning Stats push and analysis interval (seconds)",
	"settings.autodeployoffsetsec":                                                  "Auto Provisioning analysis offset from interval (seconds)",
	"settings.autodeploymaxintervals":                                               "Auto Provisioning Policy max allowed intervals",
	"settings.createappinsttimeout":                                                 "Create AppInst timeout (duration)",
	"settings.updateappinsttimeout":                                                 "Update AppInst timeout (duration)",
	"settings.deleteappinsttimeout":                                                 "Delete AppInst timeout (duration)",
	"settings.createclusterinsttimeout":                                             "Create ClusterInst timeout (duration)",
	"settings.updateclusterinsttimeout":                                             "Update ClusterInst timeout (duration)",
	"settings.deleteclusterinsttimeout":                                             "Delete ClusterInst timeout (duration)",
	"settings.masternodeflavor":                                                     "Default flavor for k8s master VM and > 0  workers",
	"settings.maxtrackeddmeclients":                                                 "Max DME clients to be tracked at the same time.",
	"settings.chefclientinterval":                                                   "Default chef client interval (duration)",
	"settings.influxdbmetricsretention":                                             "Default influxDB metrics retention policy (duration)",
	"settings.cloudletmaintenancetimeout":                                           "Default Cloudlet Maintenance timeout (used twice for AutoProv and Cloudlet)",
	"settings.updatevmpooltimeout":                                                  "Update VM pool timeout (duration)",
	"settings.updatetrustpolicytimeout":                                             "Update Trust Policy timeout (duration)",
	"settings.dmeapimetricscollectioninterval":                                      "Metrics collection interval for DME API counts (duration)",
	"settings.edgeeventsmetricscollectioninterval":                                  "Collection interval for edgeevents metrics (latency, device, and custom)",
	"settings.cleanupreservableautoclusteridletime":                                 "Idle reservable ClusterInst clean up time",
	"settings.influxdbcloudletusagemetricsretention":                                "Default influxDB cloudlet usage metrics retention policy (duration)",
	"settings.createcloudlettimeout":                                                "Create Cloudlet timeout (duration)",
	"settings.updatecloudlettimeout":                                                "Update Cloudlet timeout (duration)",
	"settings.locationtilesidelengthkm":                                             "Length of location tiles side for latency metrics (km)",
	"settings.edgeeventsmetricscontinuousqueriescollectionintervals:#.interval":     "Collection interval for Influxdb (Specifically used for continuous query intervals) (Data from old continuous queries will be inaccessible if intervals are updated)",
	"settings.edgeeventsmetricscontinuousqueriescollectionintervals:#.retention":    "Retention duration for Influxdb interval (0 uses default retention policy)",
	"settings.influxdbdownsampledmetricsretention":                                  "Default retention policy for downsampled influx db (duration)",
	"settings.influxdbedgeeventsmetricsretention":                                   "Default retention policy for edgeevents metrics influx db (duration)",
	"settings.appinstclientcleanupinterval":                                         "AppInstClient cleanup thread run interval",
	"settings.clusterautoscaleaveragingdurationsec":                                 "Cluster auto scale averaging duration for stats to avoid spikes (seconds), avoid setting below 30s or it will not capture any measurements to average",
	"settings.clusterautoscaleretrydelay":                                           "Cluster auto scale retry delay if scaling failed",
	"settings.alertpolicymintriggertime":                                            "Minimmum trigger time for alert policies",
	"settings.disableratelimit":                                                     "Disable rate limiting for APIs (default is false)",
	"settings.maxnumperipratelimiters":                                              "Maximum number of perip rate limiters for an endpoint (ie. number of ips stored to rate limit)",
	"settings.resourcesnapshotthreadinterval":                                       "ResourceSnapshot Refresh thread run interval",
	"operatorcodes:#.code":                                                          "MCC plus MNC code, or custom carrier code designation.",
	"operatorcodes:#.organization":                                                  "Operator Organization name",
	"restagtables:#.key.name":                                                       "Resource Table Name",
	"restagtables:#.key.organization":                                               "Operator organization of the cloudlet site.",
	"restagtables:#.tags":                                                           "one or more string tags",
	"restagtables:#.azone":                                                          "availability zone(s) of resource if required",
	"trustpolicies:#.fields":                                                        "Fields are used for the Update API to specify which fields to apply",
	"trustpolicies:#.key.organization":                                              "Name of the organization for the cluster that this policy will apply to",
	"trustpolicies:#.key.name":                                                      "Policy name",
	"trustpolicies:#.outboundsecurityrules:#.protocol":                              "tcp, udp, icmp",
	"trustpolicies:#.outboundsecurityrules:#.portrangemin":                          "TCP or UDP port range start",
	"trustpolicies:#.outboundsecurityrules:#.portrangemax":                          "TCP or UDP port range end",
	"trustpolicies:#.outboundsecurityrules:#.remotecidr":                            "remote CIDR X.X.X.X/X",
	"cloudlets:#.fields":                                                            "Fields are used for the Update API to specify which fields to apply",
	"cloudlets:#.key.organization":                                                  "Organization of the cloudlet site",
	"cloudlets:#.key.name":                                                          "Name of the cloudlet",
	"cloudlets:#.location.latitude":                                                 "latitude in WGS 84 coordinates",
	"cloudlets:#.location.longitude":                                                "longitude in WGS 84 coordinates",
	"cloudlets:#.location.horizontalaccuracy":                                       "horizontal accuracy (radius in meters)",
	"cloudlets:#.location.verticalaccuracy":                                         "vertical accuracy (meters)",
	"cloudlets:#.location.altitude":                                                 "On android only lat and long are guaranteed to be supplied altitude in meters",
	"cloudlets:#.location.course":                                                   "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"cloudlets:#.location.speed":                                                    "speed (IOS) / velocity (Android) (meters/sec)",
	"cloudlets:#.ipsupport":                                                         "Type of IP support provided by Cloudlet (see IpSupport), one of Unknown, Static, Dynamic",
	"cloudlets:#.staticips":                                                         "List of static IPs for static IP support",
	"cloudlets:#.numdynamicips":                                                     "Number of dynamic IPs available for dynamic IP support",
	"cloudlets:#.timelimits.createclusterinsttimeout":                               "override default max time to create a cluster instance (duration)",
	"cloudlets:#.timelimits.updateclusterinsttimeout":                               "override default max time to update a cluster instance (duration)",
	"cloudlets:#.timelimits.deleteclusterinsttimeout":                               "override default max time to delete a cluster instance (duration)",
	"cloudlets:#.timelimits.createappinsttimeout":                                   "override default max time to create an app instance (duration)",
	"cloudlets:#.timelimits.updateappinsttimeout":                                   "override default max time to update an app instance (duration)",
	"cloudlets:#.timelimits.deleteappinsttimeout":                                   "override default max time to delete an app instance (duration)",
	"cloudlets:#.errors":                                                            "Any errors trying to create, update, or delete the Cloudlet.",
	"cloudlets:#.state":                                                             "Current state of the cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"cloudlets:#.crmoverride":                                                       "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"cloudlets:#.deploymentlocal":                                                   "Deploy cloudlet services locally",
	"cloudlets:#.platformtype":                                                      "Platform type, one of Fake, Dind, Openstack, Azure, Gcp, Edgebox, Fakeinfra, Vsphere, AwsEks, VmPool, AwsEc2, Vcd, K8SBareMetal, Kind, Kindinfra",
	"cloudlets:#.notifysrvaddr":                                                     "Address for the CRM notify listener to run on",
	"cloudlets:#.flavor.name":                                                       "Flavor name",
	"cloudlets:#.physicalname":                                                      "Physical infrastructure cloudlet name",
	"cloudlets:#.envvar":                                                            "Single Key-Value pair of env var to be passed to CRM",
	"cloudlets:#.containerversion":                                                  "Cloudlet container version",
	"cloudlets:#.config.containerregistrypath":                                      "Path to Docker registry holding edge-cloud image",
	"cloudlets:#.config.cloudletvmimagepath":                                        "Path to platform base image",
	"cloudlets:#.config.notifyctrladdrs":                                            "Address of controller notify port (can be multiple of these)",
	"cloudlets:#.config.tlscertfile":                                                "TLS cert file",
	"cloudlets:#.config.tlskeyfile":                                                 "TLS key file",
	"cloudlets:#.config.tlscafile":                                                  "TLS ca file",
	"cloudlets:#.config.envvar":                                                     "Environment variables",
	"cloudlets:#.config.platformtag":                                                "Tag of edge-cloud image",
	"cloudlets:#.config.testmode":                                                   "Internal Test flag",
	"cloudlets:#.config.span":                                                       "Span string",
	"cloudlets:#.config.cleanupmode":                                                "Internal cleanup flag",
	"cloudlets:#.config.region":                                                     "Region",
	"cloudlets:#.config.commercialcerts":                                            "Get certs from vault or generate your own for the root load balancer",
	"cloudlets:#.config.usevaultpki":                                                "Use Vault certs and CAs for internal TLS communication",
	"cloudlets:#.config.appdnsroot":                                                 "App domain name root",
	"cloudlets:#.config.chefserverpath":                                             "Path to Chef Server",
	"cloudlets:#.config.chefclientinterval":                                         "Chef client interval",
	"cloudlets:#.config.deploymenttag":                                              "Deployment Tag",
	"cloudlets:#.config.crmaccessprivatekey":                                        "crm access private key",
	"cloudlets:#.config.accessapiaddr":                                              "controller access API address",
	"cloudlets:#.config.cachedir":                                                   "cache dir",
	"cloudlets:#.restagmap:#.value.name":                                            "Resource Table Name",
	"cloudlets:#.restagmap:#.value.organization":                                    "Operator organization of the cloudlet site.",
	"cloudlets:#.accessvars":                                                        "Variables required to access cloudlet",
	"cloudlets:#.vmimageversion":                                                    "MobiledgeX baseimage version where CRM services reside",
	"cloudlets:#.deployment":                                                        "Deployment type to bring up CRM services (docker, kubernetes)",
	"cloudlets:#.infraapiaccess":                                                    "Infra Access Type is the type of access available to Infra API Endpoint, one of DirectAccess, RestrictedAccess",
	"cloudlets:#.infraconfig.externalnetworkname":                                   "Infra specific external network name",
	"cloudlets:#.infraconfig.flavorname":                                            "Infra specific flavor name",
	"cloudlets:#.chefclientkey":                                                     "Chef client key",
	"cloudlets:#.maintenancestate":                                                  "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"cloudlets:#.overridepolicycontainerversion":                                    "Override container version from policy file",
	"cloudlets:#.vmpool":                                                            "VM Pool",
	"cloudlets:#.crmaccesspublickey":                                                "CRM access public key",
	"cloudlets:#.crmaccesskeyupgraderequired":                                       "CRM access key upgrade required",
	"cloudlets:#.trustpolicy":                                                       "Optional Trust Policy",
	"cloudlets:#.trustpolicystate":                                                  "State of trust policy, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"cloudlets:#.resourcequotas:#.name":                                             "Resource name on which to set quota",
	"cloudlets:#.resourcequotas:#.value":                                            "Quota value of the resource",
	"cloudlets:#.resourcequotas:#.alertthreshold":                                   "Generate alert when more than threshold percentage of resource is used",
	"cloudlets:#.defaultresourcealertthreshold":                                     "Default resource alert threshold percentage",
	"cloudlets:#.hostcontroller":                                                    "Addr of the controller hosting the cloudlet services if it is running locally",
	"cloudlets:#.kafkacluster":                                                      "operator provided kafka cluster endpoint to push events to",
	"cloudlets:#.kafkauser":                                                         "username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
	"cloudlets:#.kafkapassword":                                                     "password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
	"cloudlets:#.gpuconfig.driver.name":                                             "Name of the driver",
	"cloudlets:#.gpuconfig.driver.organization":                                     "Organization to which the driver belongs to",
	"cloudlets:#.gpuconfig.properties":                                              "Properties to identify specifics of GPU",
	"cloudlets:#.enabledefaultserverlesscluster":                                    "Enable experimental default multitenant (serverless) cluster",
	"cloudlets:#.allianceorgs":                                                      "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet.",
	"cloudletinfos:#.fields":                                                        "Fields are used for the Update API to specify which fields to apply",
	"cloudletinfos:#.key.organization":                                              "Organization of the cloudlet site",
	"cloudletinfos:#.key.name":                                                      "Name of the cloudlet",
	"cloudletinfos:#.state":                                                         "State of cloudlet, one of Unknown, Errors, Ready, Offline, NotPresent, Init, Upgrade, NeedSync",
	"cloudletinfos:#.notifyid":                                                      "Id of client assigned by server (internal use only)",
	"cloudletinfos:#.controller":                                                    "Connected controller unique id",
	"cloudletinfos:#.osmaxram":                                                      "Maximum Ram in MB on the Cloudlet",
	"cloudletinfos:#.osmaxvcores":                                                   "Maximum number of VCPU cores on the Cloudlet",
	"cloudletinfos:#.osmaxvolgb":                                                    "Maximum amount of disk in GB on the Cloudlet",
	"cloudletinfos:#.errors":                                                        "Any errors encountered while making changes to the Cloudlet",
	"cloudletinfos:#.flavors:#.name":                                                "Name of the flavor on the Cloudlet",
	"cloudletinfos:#.flavors:#.vcpus":                                               "Number of VCPU cores on the Cloudlet",
	"cloudletinfos:#.flavors:#.ram":                                                 "Ram in MB on the Cloudlet",
	"cloudletinfos:#.flavors:#.disk":                                                "Amount of disk in GB on the Cloudlet",
	"cloudletinfos:#.flavors:#.propmap":                                             "OS Flavor Properties, if any",
	"cloudletinfos:#.containerversion":                                              "Cloudlet container version",
	"cloudletinfos:#.osimages:#.name":                                               "image name",
	"cloudletinfos:#.osimages:#.tags":                                               "optional tags present on image",
	"cloudletinfos:#.osimages:#.properties":                                         "image properties/metadata",
	"cloudletinfos:#.osimages:#.diskformat":                                         "format qcow2, img, etc",
	"cloudletinfos:#.controllercachereceived":                                       "Indicates all controller data has been sent to CRM",
	"cloudletinfos:#.maintenancestate":                                              "State for maintenance, one of NormalOperation, MaintenanceStart, FailoverRequested, FailoverDone, FailoverError, MaintenanceStartNoFailover, CrmRequested, CrmUnderMaintenance, CrmError, NormalOperationInit, UnderMaintenance",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.name":                          "Virtual machine name",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.type":                          "Type can be platform, rootlb, cluster-master, cluster-k8s-node, cluster-docker-node, appvm",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.status":                        "Runtime status of the VM",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.infraflavor":                   "Flavor allocated within the cloudlet infrastructure, distinct from the control plane flavor",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.name":             "Name of the container",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.type":             "Type can be docker or kubernetes",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.status":           "Runtime status of the container",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.clusterip":        "IP within the CNI and is applicable to kubernetes only",
	"cloudletinfos:#.resourcessnapshot.platformvms:#.containers:#.restarts":         "Restart count, applicable to kubernetes only",
	"cloudletinfos:#.resourcessnapshot.info:#.name":                                 "Resource name",
	"cloudletinfos:#.resourcessnapshot.info:#.value":                                "Resource value",
	"cloudletinfos:#.resourcessnapshot.info:#.inframaxvalue":                        "Resource infra max value",
	"cloudletinfos:#.resourcessnapshot.info:#.quotamaxvalue":                        "Resource quota max value",
	"cloudletinfos:#.resourcessnapshot.info:#.description":                          "Resource description",
	"cloudletinfos:#.resourcessnapshot.info:#.units":                                "Resource units",
	"cloudletinfos:#.resourcessnapshot.info:#.alertthreshold":                       "Generate alert when more than threshold percentage of resource is used",
	"cloudletinfos:#.resourcessnapshot.clusterinsts:#.clusterkey.name":              "Cluster name",
	"cloudletinfos:#.resourcessnapshot.clusterinsts:#.organization":                 "Name of Developer organization that this cluster belongs to",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.organization":            "App developer organization",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.name":                    "App name",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.appkey.version":                 "App version",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.clusterinstkey.clusterkey.name": "Cluster name",
	"cloudletinfos:#.resourcessnapshot.vmappinsts:#.clusterinstkey.organization":    "Name of Developer organization that this cluster belongs to",
	"cloudletinfos:#.trustpolicystate":                                              "Trust Policy State, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"cloudletinfos:#.compatibilityversion":                                          "Version for compatibility tracking",
	"cloudletinfos:#.properties":                                                    "Cloudlet properties",
	"cloudletpools:#.fields":                                                        "Fields are used for the Update API to specify which fields to apply",
	"cloudletpools:#.key.organization":                                              "Name of the organization this pool belongs to",
	"cloudletpools:#.key.name":                                                      "CloudletPool Name",
	"cloudletpools:#.cloudlets":                                                     "Cloudlets part of the pool",
	"autoprovpolicies:#.fields":                                                     "Fields are used for the Update API to specify which fields to apply",
	"autoprovpolicies:#.key.organization":                                           "Name of the organization for the cluster that this policy will apply to",
	"autoprovpolicies:#.key.name":                                                   "Policy name",
	"autoprovpolicies:#.deployclientcount":                                          "Minimum number of clients within the auto deploy interval to trigger deployment",
	"autoprovpolicies:#.deployintervalcount":                                        "Number of intervals to check before triggering deployment",
	"autoprovpolicies:#.cloudlets:#.key.organization":                               "Organization of the cloudlet site",
	"autoprovpolicies:#.cloudlets:#.key.name":                                       "Name of the cloudlet",
	"autoprovpolicies:#.cloudlets:#.loc.latitude":                                   "latitude in WGS 84 coordinates",
	"autoprovpolicies:#.cloudlets:#.loc.longitude":                                  "longitude in WGS 84 coordinates",
	"autoprovpolicies:#.cloudlets:#.loc.horizontalaccuracy":                         "horizontal accuracy (radius in meters)",
	"autoprovpolicies:#.cloudlets:#.loc.verticalaccuracy":                           "vertical accuracy (meters)",
	"autoprovpolicies:#.cloudlets:#.loc.altitude":                                   "On android only lat and long are guaranteed to be supplied altitude in meters",
	"autoprovpolicies:#.cloudlets:#.loc.course":                                     "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"autoprovpolicies:#.cloudlets:#.loc.speed":                                      "speed (IOS) / velocity (Android) (meters/sec)",
	"autoprovpolicies:#.minactiveinstances":                                         "Minimum number of active instances for High-Availability",
	"autoprovpolicies:#.maxinstances":                                               "Maximum number of instances (active or not)",
	"autoprovpolicies:#.undeployclientcount":                                        "Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy",
	"autoprovpolicies:#.undeployintervalcount":                                      "Number of intervals to check before triggering undeployment",
	"autoprovpolicycloudlets:#.key.organization":                                    "Name of the organization for the cluster that this policy will apply to",
	"autoprovpolicycloudlets:#.key.name":                                            "Policy name",
	"autoprovpolicycloudlets:#.cloudletkey.organization":                            "Organization of the cloudlet site",
	"autoprovpolicycloudlets:#.cloudletkey.name":                                    "Name of the cloudlet",
	"autoscalepolicies:#.fields":                                                    "Fields are used for the Update API to specify which fields to apply",
	"autoscalepolicies:#.key.organization":                                          "Name of the organization for the cluster that this policy will apply to",
	"autoscalepolicies:#.key.name":                                                  "Policy name",
	"autoscalepolicies:#.minnodes":                                                  "Minimum number of cluster nodes",
	"autoscalepolicies:#.maxnodes":                                                  "Maximum number of cluster nodes",
	"autoscalepolicies:#.scaleupcputhresh":                                          "(Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled",
	"autoscalepolicies:#.scaledowncputhresh":                                        "(Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled",
	"autoscalepolicies:#.triggertimesec":                                            "(Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.",
	"autoscalepolicies:#.stabilizationwindowsec":                                    "Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.",
	"autoscalepolicies:#.targetcpu":                                                 "Target per-node cpu utilization (percentage 1 to 100), 0 means disabled",
	"autoscalepolicies:#.targetmem":                                                 "Target per-node memory utilization (percentage 1 to 100), 0 means disabled",
	"autoscalepolicies:#.targetactiveconnections":                                   "Target per-node number of active connections, 0 means disabled",
	"idlereservableclusterinsts.idletime":                                           "Idle time (duration)",
	"clusterinsts:#.fields":                                                         "Fields are used for the Update API to specify which fields to apply",
	"clusterinsts:#.key.clusterkey.name":                                            "Cluster name",
	"clusterinsts:#.key.cloudletkey.organization":                                   "Organization of the cloudlet site",
	"clusterinsts:#.key.cloudletkey.name":                                           "Name of the cloudlet",
	"clusterinsts:#.key.organization":                                               "Name of Developer organization that this cluster belongs to",
	"clusterinsts:#.flavor.name":                                                    "Flavor name",
	"clusterinsts:#.liveness":                                                       "Liveness of instance (see Liveness), one of Unknown, Static, Dynamic, Autoprov",
	"clusterinsts:#.auto":                                                           "Auto is set to true when automatically created by back-end (internal use only)",
	"clusterinsts:#.state":                                                          "State of the cluster instance, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"clusterinsts:#.errors":                                                         "Any errors trying to create, update, or delete the ClusterInst on the Cloudlet.",
	"clusterinsts:#.crmoverride":                                                    "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"clusterinsts:#.ipaccess":                                                       "IP access type (RootLB Type), one of Unknown, Dedicated, Shared",
	"clusterinsts:#.allocatedip":                                                    "Allocated IP for dedicated access",
	"clusterinsts:#.nodeflavor":                                                     "Cloudlet specific node flavor",
	"clusterinsts:#.deployment":                                                     "Deployment type (kubernetes or docker)",
	"clusterinsts:#.nummasters":                                                     "Number of k8s masters (In case of docker deployment, this field is not required)",
	"clusterinsts:#.numnodes":                                                       "Number of k8s nodes (In case of docker deployment, this field is not required)",
	"clusterinsts:#.externalvolumesize":                                             "Size of external volume to be attached to nodes.  This is for the root partition",
	"clusterinsts:#.autoscalepolicy":                                                "Auto scale policy name",
	"clusterinsts:#.availabilityzone":                                               "Optional Resource AZ if any",
	"clusterinsts:#.imagename":                                                      "Optional resource specific image to launch",
	"clusterinsts:#.reservable":                                                     "If ClusterInst is reservable",
	"clusterinsts:#.reservedby":                                                     "For reservable MobiledgeX ClusterInsts, the current developer tenant",
	"clusterinsts:#.sharedvolumesize":                                               "Size of an optional shared volume to be mounted on the master",
	"clusterinsts:#.masternodeflavor":                                               "Generic flavor for k8s master VM when worker nodes > 0",
	"clusterinsts:#.skipcrmcleanuponfailure":                                        "Prevents cleanup of resources on failure within CRM, used for diagnostic purposes",
	"clusterinsts:#.optres":                                                         "Optional Resources required by OS flavor if any",
	"clusterinsts:#.resources.vms:#.name":                                           "Virtual machine name",
	"clusterinsts:#.resources.vms:#.type":                                           "Type can be platform, rootlb, cluster-master, cluster-k8s-node, cluster-docker-node, appvm",
	"clusterinsts:#.resources.vms:#.status":                                         "Runtime status of the VM",
	"clusterinsts:#.resources.vms:#.infraflavor":                                    "Flavor allocated within the cloudlet infrastructure, distinct from the control plane flavor",
	"clusterinsts:#.resources.vms:#.containers:#.name":                              "Name of the container",
	"clusterinsts:#.resources.vms:#.containers:#.type":                              "Type can be docker or kubernetes",
	"clusterinsts:#.resources.vms:#.containers:#.status":                            "Runtime status of the container",
	"clusterinsts:#.resources.vms:#.containers:#.clusterip":                         "IP within the CNI and is applicable to kubernetes only",
	"clusterinsts:#.resources.vms:#.containers:#.restarts":                          "Restart count, applicable to kubernetes only",
	"clusterinsts:#.multitenant":                                                    "Multi-tenant kubernetes cluster",
	"apps:#.fields":                                                                 "Fields are used for the Update API to specify which fields to apply",
	"apps:#.key.organization":                                                       "App developer organization",
	"apps:#.key.name":                                                               "App name",
	"apps:#.key.version":                                                            "App version",
	"apps:#.imagepath":                                                              "URI of where image resides",
	"apps:#.imagetype":                                                              "Image type (see ImageType), one of Unknown, Docker, Qcow, Helm, Ovf",
	"apps:#.accessports":                                                            "Comma separated list of protocol:port pairs that the App listens on. Ex: tcp:80,udp:10002. Also supports additional configurations per port: (1) tls (tcp-only) - Enables TLS on specified port. Ex: tcp:443:tls. (2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: udp:10001:nginx. (3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: udp:10001:maxpktsize=8000.",
	"apps:#.defaultflavor.name":                                                     "Flavor name",
	"apps:#.authpublickey":                                                          "Public key used for authentication",
	"apps:#.command":                                                                "Command that the container runs to start service",
	"apps:#.annotations":                                                            "Annotations is a comma separated map of arbitrary key value pairs, for example: key1=val1,key2=val2,key3=val 3",
	"apps:#.deployment":                                                             "Deployment type (kubernetes, docker, or vm)",
	"apps:#.deploymentmanifest":                                                     "Deployment manifest is the deployment specific manifest file/config. For docker deployment, this can be a docker-compose or docker run file. For kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
	"apps:#.deploymentgenerator":                                                    "Deployment generator target to generate a basic deployment manifest",
	"apps:#.androidpackagename":                                                     "Android package name used to match the App name from the Android package",
	"apps:#.delopt":                                                                 "Override actions to Controller, one of NoAutoDelete, AutoDelete",
	"apps:#.configs:#.kind":                                                         "Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml",
	"apps:#.configs:#.config":                                                       "Config file contents or URI reference",
	"apps:#.scalewithcluster":                                                       "Option to run App on all nodes of the cluster",
	"apps:#.internalports":                                                          "Should this app have access to outside world?",
	"apps:#.revision":                                                               "Revision can be specified or defaults to current timestamp when app is updated",
	"apps:#.officialfqdn":                                                           "Official FQDN is the FQDN that the app uses to connect by default",
	"apps:#.md5sum":                                                                 "MD5Sum of the VM-based app image",
	"apps:#.autoprovpolicy":                                                         "(_deprecated_) Auto provisioning policy name",
	"apps:#.accesstype":                                                             "(Deprecated) Access type, one of DefaultForDeployment, Direct, LoadBalancer",
	"apps:#.deleteprepare":                                                          "Preparing to be deleted",
	"apps:#.autoprovpolicies":                                                       "Auto provisioning policy names, may be specified multiple times",
	"apps:#.templatedelimiter":                                                      "Delimiter to be used for template parsing, defaults to [[ ]]",
	"apps:#.skiphcports":                                                            "Comma separated list of protocol:port pairs that we should not run health check on. Should be configured in case app does not always listen on these ports. all can be specified if no health check to be run for this app. Numerical values must be decimal format. i.e. tcp:80,udp:10002",
	"apps:#.trusted":                                                                "Indicates that an instance of this app can be started on a trusted cloudlet",
	"apps:#.requiredoutboundconnections:#.protocol":                                 "tcp, udp or icmp",
	"apps:#.requiredoutboundconnections:#.port":                                     "TCP or UDP port",
	"apps:#.requiredoutboundconnections:#.remoteip":                                 "remote IP X.X.X.X",
	"apps:#.allowserverless":                                                        "App is allowed to deploy as serverless containers",
	"apps:#.serverlessconfig.vcpus":                                                 "Virtual CPUs allocation per container when serverless, may be fractional in increments of 0.001",
	"apps:#.serverlessconfig.ram":                                                   "RAM allocation in megabytes per container when serverless",
	"apps:#.serverlessconfig.minreplicas":                                           "Minimum number of replicas when serverless",
	"apps:#.vmappostype":                                                            "OS Type for VM Apps, one of Unknown, Linux, Windows10, Windows2012, Windows2016, Windows2019",
	"apps:#.alertpolicies":                                                          "Alert Policies",
	"appinstances:#.fields":                                                         "Fields are used for the Update API to specify which fields to apply",
	"appinstances:#.key.appkey.organization":                                        "App developer organization",
	"appinstances:#.key.appkey.name":                                                "App name",
	"appinstances:#.key.appkey.version":                                             "App version",
	"appinstances:#.key.clusterinstkey.clusterkey.name":                             "Cluster name",
	"appinstances:#.key.clusterinstkey.cloudletkey.organization":                    "Organization of the cloudlet site",
	"appinstances:#.key.clusterinstkey.cloudletkey.name":                            "Name of the cloudlet",
	"appinstances:#.key.clusterinstkey.organization":                                "Name of Developer organization that this cluster belongs to",
	"appinstances:#.cloudletloc.latitude":                                           "latitude in WGS 84 coordinates",
	"appinstances:#.cloudletloc.longitude":                                          "longitude in WGS 84 coordinates",
	"appinstances:#.cloudletloc.horizontalaccuracy":                                 "horizontal accuracy (radius in meters)",
	"appinstances:#.cloudletloc.verticalaccuracy":                                   "vertical accuracy (meters)",
	"appinstances:#.cloudletloc.altitude":                                           "On android only lat and long are guaranteed to be supplied altitude in meters",
	"appinstances:#.cloudletloc.course":                                             "course (IOS) / bearing (Android) (degrees east relative to true north)",
	"appinstances:#.cloudletloc.speed":                                              "speed (IOS) / velocity (Android) (meters/sec)",
	"appinstances:#.uri":                                                            "Base FQDN (not really URI) for the App. See Service FQDN for endpoint access.",
	"appinstances:#.liveness":                                                       "Liveness of instance (see Liveness), one of Unknown, Static, Dynamic, Autoprov",
	"appinstances:#.mappedports:#.proto":                                            "TCP (L4) or UDP (L4) protocol, one of Unknown, Tcp, Udp",
	"appinstances:#.mappedports:#.internalport":                                     "Container port",
	"appinstances:#.mappedports:#.publicport":                                       "Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)",
	"appinstances:#.mappedports:#.fqdnprefix":                                       "skip 4 to preserve the numbering. 4 was path_prefix but was removed since we dont need it after removed http FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.",
	"appinstances:#.mappedports:#.endport":                                          "A non-zero end port indicates a port range from internal port to end port, inclusive.",
	"appinstances:#.mappedports:#.tls":                                              "TLS termination for this port",
	"appinstances:#.mappedports:#.nginx":                                            "use nginx proxy for this port if you really need a transparent proxy (udp only)",
	"appinstances:#.mappedports:#.maxpktsize":                                       "Maximum datagram size (udp only)",
	"appinstances:#.flavor.name":                                                    "Flavor name",
	"appinstances:#.state":                                                          "Current state of the AppInst on the Cloudlet, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"appinstances:#.errors":                                                         "Any errors trying to create, update, or delete the AppInst on the Cloudlet",
	"appinstances:#.crmoverride":                                                    "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"appinstances:#.runtimeinfo.containerids":                                       "List of container names",
	"appinstances:#.autoclusteripaccess":                                            "(Deprecated) IpAccess for auto-clusters. Ignored otherwise., one of Unknown, Dedicated, Shared",
	"appinstances:#.revision":                                                       "Revision changes each time the App is updated.  Refreshing the App Instance will sync the revision with that of the App",
	"appinstances:#.forceupdate":                                                    "Force Appinst refresh even if revision number matches App revision number.",
	"appinstances:#.updatemultiple":                                                 "Allow multiple instances to be updated at once",
	"appinstances:#.configs:#.kind":                                                 "Kind (type) of config, i.e. envVarsYaml, helmCustomizationYaml",
	"appinstances:#.configs:#.config":                                               "Config file contents or URI reference",
	"appinstances:#.healthcheck":                                                    "Health Check status, one of Unknown, FailRootlbOffline, FailServerFail, Ok, CloudletOffline",
	"appinstances:#.privacypolicy":                                                  "Optional privacy policy name",
	"appinstances:#.powerstate":                                                     "Power State of the AppInst, one of PowerStateUnknown, PowerOnRequested, PoweringOn, PowerOn, PowerOffRequested, PoweringOff, PowerOff, RebootRequested, Rebooting, Reboot, PowerStateError",
	"appinstances:#.externalvolumesize":                                             "Size of external volume to be attached to nodes.  This is for the root partition",
	"appinstances:#.availabilityzone":                                               "Optional Availability Zone if any",
	"appinstances:#.vmflavor":                                                       "OS node flavor to use",
	"appinstances:#.optres":                                                         "Optional Resources required by OS flavor if any",
	"appinstances:#.realclustername":                                                "Real ClusterInst name",
	"appinstances:#.internalporttolbip":                                             "mapping of ports to load balancer IPs",
	"appinstrefs:#.key.organization":                                                "App developer organization",
	"appinstrefs:#.key.name":                                                        "App name",
	"appinstrefs:#.key.version":                                                     "App version",
	"vmpools:#.fields":                                                              "Fields are used for the Update API to specify which fields to apply",
	"vmpools:#.key.organization":                                                    "Organization of the vmpool",
	"vmpools:#.key.name":                                                            "Name of the vmpool",
	"vmpools:#.vms:#.name":                                                          "VM Name",
	"vmpools:#.vms:#.netinfo.externalip":                                            "External IP",
	"vmpools:#.vms:#.netinfo.internalip":                                            "Internal IP",
	"vmpools:#.vms:#.groupname":                                                     "VM Group Name",
	"vmpools:#.vms:#.state":                                                         "VM State, one of Free, InProgress, InUse, Add, Remove, Update, ForceFree",
	"vmpools:#.vms:#.updatedat.seconds":                                             "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
	"vmpools:#.vms:#.updatedat.nanos":                                               "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
	"vmpools:#.vms:#.internalname":                                                  "VM Internal Name",
	"vmpools:#.vms:#.flavor.name":                                                   "Name of the flavor on the Cloudlet",
	"vmpools:#.vms:#.flavor.vcpus":                                                  "Number of VCPU cores on the Cloudlet",
	"vmpools:#.vms:#.flavor.ram":                                                    "Ram in MB on the Cloudlet",
	"vmpools:#.vms:#.flavor.disk":                                                   "Amount of disk in GB on the Cloudlet",
	"vmpools:#.vms:#.flavor.propmap":                                                "OS Flavor Properties, if any",
	"vmpools:#.state":                                                               "Current state of the VM pool, one of TrackedStateUnknown, NotPresent, CreateRequested, Creating, CreateError, Ready, UpdateRequested, Updating, UpdateError, DeleteRequested, Deleting, DeleteError, DeletePrepare, CrmInitok, CreatingDependencies, DeleteDone",
	"vmpools:#.errors":                                                              "Any errors trying to add/remove VM to/from VM Pool",
	"vmpools:#.crmoverride":                                                         "Override actions to CRM, one of NoOverride, IgnoreCrmErrors, IgnoreCrm, IgnoreTransientState, IgnoreCrmAndTransientState",
	"gpudrivers:#.fields":                                                           "Fields are used for the Update API to specify which fields to apply",
	"gpudrivers:#.key.name":                                                         "Name of the driver",
	"gpudrivers:#.key.organization":                                                 "Organization to which the driver belongs to",
	"gpudrivers:#.builds:#.name":                                                    "Unique identifier key",
	"gpudrivers:#.builds:#.driverpath":                                              "Path where the driver package is located, if it is authenticated path, then credentials must be passed as part of URL (one-time download path)",
	"gpudrivers:#.builds:#.driverpathcreds":                                         "Optional credentials (username:password) to access driver path",
	"gpudrivers:#.builds:#.operatingsystem":                                         "Operator System supported by GPU driver build, one of Linux, Windows, Others",
	"gpudrivers:#.builds:#.kernelversion":                                           "Kernel Version supported by GPU driver build",
	"gpudrivers:#.builds:#.hypervisorinfo":                                          "Info on hypervisor supported by vGPU driver",
	"gpudrivers:#.builds:#.md5sum":                                                  "Driver package md5sum to ensure package is not corrupted",
	"gpudrivers:#.licenseconfig":                                                    "License config to setup license (will be stored in secure storage)",
	"gpudrivers:#.licenseconfigmd5sum":                                              "License config md5sum, to ensure integrity of license config",
	"gpudrivers:#.properties":                                                       "Additional properties associated with GPU driver build For example: license server information, driver release date, etc",
	"gpudrivers:#.state":                                                            "State to figure out if any action on the GPU driver is in-progress",
	"gpudrivers:#.ignorestate":                                                      "Ignore state will ignore any action in-progress on the GPU driver",
	"alertpolicies:#.key.organization":                                              "Name of the organization for the app that this alert can be applied to",
	"alertpolicies:#.key.name":                                                      "Alert Policy name",
	"alertpolicies:#.cpuutilizationlimit":                                           "Container or pod CPU utilization rate(percentage) across all nodes. Valid values 1-100",
	"alertpolicies:#.memutilizationlimit":                                           "Container or pod memory utilization rate(percentage) across all nodes. Valid values 1-100",
	"alertpolicies:#.diskutilizationlimit":                                          "Container or pod disk utilization rate(percentage) across all nodes. Valid values 1-100",
	"alertpolicies:#.activeconnlimit":                                               "Active Connections alert threshold. Valid values 1-4294967295",
	"alertpolicies:#.severity":                                                      "Alert severity level - one of info, warning, error",
	"alertpolicies:#.triggertime":                                                   "Duration for which alert interval is active (max 72 hours)",
	"alertpolicies:#.labels":                                                        "Additional Labels",
	"alertpolicies:#.annotations":                                                   "Additional Annotations for extra information about the alert",
	"alertpolicies:#.description":                                                   "Description of the alert policy",
	"flowratelimitsettings:#.fields":                                                "Fields are used for the Update API to specify which fields to apply",
	"flowratelimitsettings:#.key.flowsettingsname":                                  "Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)",
	"flowratelimitsettings:#.key.ratelimitkey.apiname":                              "Name of API (eg. CreateApp or RegisterClient) (Use Global if not a specific API)",
	"flowratelimitsettings:#.key.ratelimitkey.apiendpointtype":                      "API Endpoint type, one of UnknownApiEndpointType, Dme",
	"flowratelimitsettings:#.key.ratelimitkey.ratelimittarget":                      "Target to rate limit, one of UnknownTarget, AllRequests, PerIp, PerUser",
	"flowratelimitsettings:#.settings.flowalgorithm":                                "Flow Rate Limit algorithm, one of UnknownFlowAlgorithm, TokenBucketAlgorithm, LeakyBucketAlgorithm",
	"flowratelimitsettings:#.settings.reqspersecond":                                "requests per second for flow rate limiting",
	"flowratelimitsettings:#.settings.burstsize":                                    "burst size for flow rate limiting (required for TokenBucketAlgorithm)",
	"maxreqsratelimitsettings:#.fields":                                             "Fields are used for the Update API to specify which fields to apply",
	"maxreqsratelimitsettings:#.key.maxreqssettingsname":                            "Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)",
	"maxreqsratelimitsettings:#.key.ratelimitkey.apiname":                           "Name of API (eg. CreateApp or RegisterClient) (Use Global if not a specific API)",
	"maxreqsratelimitsettings:#.key.ratelimitkey.apiendpointtype":                   "API Endpoint type, one of UnknownApiEndpointType, Dme",
	"maxreqsratelimitsettings:#.key.ratelimitkey.ratelimittarget":                   "Target to rate limit, one of UnknownTarget, AllRequests, PerIp, PerUser",
	"maxreqsratelimitsettings:#.settings.maxreqsalgorithm":                          "MaxReqs Rate Limit Algorithm, one of UnknownMaxReqsAlgorithm, FixedWindowAlgorithm",
	"maxreqsratelimitsettings:#.settings.maxrequests":                               "Maximum number of requests for the given Interval",
	"maxreqsratelimitsettings:#.settings.interval":                                  "Time interval",
}
var AllDataSpecialArgs = map[string]string{
	"alertpolicies:#.annotations":             "StringToString",
	"alertpolicies:#.fields":                  "StringArray",
	"alertpolicies:#.labels":                  "StringToString",
	"appinstances:#.errors":                   "StringArray",
	"appinstances:#.fields":                   "StringArray",
	"appinstances:#.internalporttolbip":       "StringToString",
	"appinstances:#.runtimeinfo.containerids": "StringArray",
	"appinstances:#.status.msgs":              "StringArray",
	"apps:#.alertpolicies":                    "StringArray",
	"apps:#.autoprovpolicies":                 "StringArray",
	"apps:#.fields":                           "StringArray",
	"autoprovpolicies:#.fields":               "StringArray",
	"autoscalepolicies:#.fields":              "StringArray",
	"cloudletinfos:#.errors":                  "StringArray",
	"cloudletinfos:#.fields":                  "StringArray",
	"cloudletinfos:#.flavors:#.propmap":       "StringToString",
	"cloudletinfos:#.properties":              "StringToString",
	"cloudletinfos:#.status.msgs":             "StringArray",
	"cloudletpools:#.cloudlets":               "StringArray",
	"cloudletpools:#.fields":                  "StringArray",
	"cloudlets:#.accessvars":                  "StringToString",
	"cloudlets:#.allianceorgs":                "StringArray",
	"cloudlets:#.chefclientkey":               "StringToString",
	"cloudlets:#.config.envvar":               "StringToString",
	"cloudlets:#.envvar":                      "StringToString",
	"cloudlets:#.errors":                      "StringArray",
	"cloudlets:#.fields":                      "StringArray",
	"cloudlets:#.gpuconfig.properties":        "StringToString",
	"cloudlets:#.status.msgs":                 "StringArray",
	"clusterinsts:#.errors":                   "StringArray",
	"clusterinsts:#.fields":                   "StringArray",
	"clusterinsts:#.status.msgs":              "StringArray",
	"flavors:#.fields":                        "StringArray",
	"flavors:#.optresmap":                     "StringToString",
	"flowratelimitsettings:#.fields":          "StringArray",
	"gpudrivers:#.fields":                     "StringArray",
	"gpudrivers:#.properties":                 "StringToString",
	"maxreqsratelimitsettings:#.fields":       "StringArray",
	"restagtables:#.fields":                   "StringArray",
	"restagtables:#.tags":                     "StringToString",
	"settings.fields":                         "StringArray",
	"trustpolicies:#.fields":                  "StringArray",
	"vmpools:#.errors":                        "StringArray",
	"vmpools:#.fields":                        "StringArray",
	"vmpools:#.status.msgs":                   "StringArray",
	"vmpools:#.vms:#.flavor.propmap":          "StringToString",
}
