// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

/*
Package gencmd is a generated protocol buffer package.

It is generated from these files:
	debug.proto

It has these top-level messages:
	DebugLevels
	DebugResult
*/
package gencmd

import log "github.com/mobiledgex/edge-cloud/log"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "github.com/mobiledgex/edge-cloud/cli"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var DebugApiCmd log.DebugApiClient

var EnableDebugLevelsCmd = &cli.Command{
	Use:          "EnableDebugLevels",
	RequiredArgs: strings.Join(DebugLevelsRequiredArgs, " "),
	OptionalArgs: strings.Join(DebugLevelsOptionalArgs, " "),
	AliasArgs:    strings.Join(DebugLevelsAliasArgs, " "),
	SpecialArgs:  &DebugLevelsSpecialArgs,
	Comments:     DebugLevelsComments,
	ReqData:      &log.DebugLevels{},
	ReplyData:    &log.DebugResult{},
	Run:          runEnableDebugLevels,
}

func runEnableDebugLevels(c *cli.Command, args []string) error {
	obj := c.ReqData.(*log.DebugLevels)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return EnableDebugLevels(c, obj)
}

func EnableDebugLevels(c *cli.Command, in *log.DebugLevels) error {
	if DebugApiCmd == nil {
		return fmt.Errorf("DebugApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DebugApiCmd.EnableDebugLevels(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("EnableDebugLevels failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func EnableDebugLevelss(c *cli.Command, data []log.DebugLevels, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("EnableDebugLevels %v\n", data[ii])
		myerr := EnableDebugLevels(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DisableDebugLevelsCmd = &cli.Command{
	Use:          "DisableDebugLevels",
	RequiredArgs: strings.Join(DebugLevelsRequiredArgs, " "),
	OptionalArgs: strings.Join(DebugLevelsOptionalArgs, " "),
	AliasArgs:    strings.Join(DebugLevelsAliasArgs, " "),
	SpecialArgs:  &DebugLevelsSpecialArgs,
	Comments:     DebugLevelsComments,
	ReqData:      &log.DebugLevels{},
	ReplyData:    &log.DebugResult{},
	Run:          runDisableDebugLevels,
}

func runDisableDebugLevels(c *cli.Command, args []string) error {
	obj := c.ReqData.(*log.DebugLevels)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DisableDebugLevels(c, obj)
}

func DisableDebugLevels(c *cli.Command, in *log.DebugLevels) error {
	if DebugApiCmd == nil {
		return fmt.Errorf("DebugApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DebugApiCmd.DisableDebugLevels(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DisableDebugLevels failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DisableDebugLevelss(c *cli.Command, data []log.DebugLevels, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DisableDebugLevels %v\n", data[ii])
		myerr := DisableDebugLevels(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowDebugLevelsCmd = &cli.Command{
	Use:          "ShowDebugLevels",
	OptionalArgs: strings.Join(append(DebugLevelsRequiredArgs, DebugLevelsOptionalArgs...), " "),
	AliasArgs:    strings.Join(DebugLevelsAliasArgs, " "),
	SpecialArgs:  &DebugLevelsSpecialArgs,
	Comments:     DebugLevelsComments,
	ReqData:      &log.DebugLevels{},
	ReplyData:    &log.DebugLevels{},
	Run:          runShowDebugLevels,
}

func runShowDebugLevels(c *cli.Command, args []string) error {
	obj := c.ReqData.(*log.DebugLevels)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowDebugLevels(c, obj)
}

func ShowDebugLevels(c *cli.Command, in *log.DebugLevels) error {
	if DebugApiCmd == nil {
		return fmt.Errorf("DebugApi client not initialized")
	}
	ctx := context.Background()
	obj, err := DebugApiCmd.ShowDebugLevels(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowDebugLevels failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowDebugLevelss(c *cli.Command, data []log.DebugLevels, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowDebugLevels %v\n", data[ii])
		myerr := ShowDebugLevels(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DebugApiCmds = []*cobra.Command{
	EnableDebugLevelsCmd.GenCmd(),
	DisableDebugLevelsCmd.GenCmd(),
	ShowDebugLevelsCmd.GenCmd(),
}

var DebugLevelsRequiredArgs = []string{}
var DebugLevelsOptionalArgs = []string{
	"levels",
}
var DebugLevelsAliasArgs = []string{}
var DebugLevelsComments = map[string]string{
	"levels": "comma separated list of debug level names, comma-separated list of Etcd, Api, Notify, Dmedb, Dmereq, Locapi, Mexos, Metrics, Upgrade, Info, Sampled",
}
var DebugLevelsSpecialArgs = map[string]string{}
var DebugResultRequiredArgs = []string{}
var DebugResultOptionalArgs = []string{
	"status",
	"code",
}
var DebugResultAliasArgs = []string{}
var DebugResultComments = map[string]string{}
var DebugResultSpecialArgs = map[string]string{}
