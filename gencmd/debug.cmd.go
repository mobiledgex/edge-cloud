// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

/*
Package gencmd is a generated protocol buffer package.

It is generated from these files:
	debug.proto

It has these top-level messages:
	DebugLevels
	DebugResult
*/
package gencmd

import log "github.com/mobiledgex/edge-cloud/log"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "errors"
import "encoding/json"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/yaml"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var DebugApiCmd log.DebugApiClient
var DebugLevelsIn log.DebugLevels
var DebugLevelsFlagSet = pflag.NewFlagSet("DebugLevels", pflag.ExitOnError)
var DebugLevelsNoConfigFlagSet = pflag.NewFlagSet("DebugLevelsNoConfig", pflag.ExitOnError)
var DebugLevelsInLevels string
var DebugLevelStrings = []string{
	"etcd",
	"api",
	"notify",
	"dmedb",
	"dmereq",
	"locapi",
	"mexos",
}

func DebugLevelsSlicer(in *log.DebugLevels) []string {
	s := make([]string, 0, 1)
	if in.Levels == nil {
		in.Levels = make([]log.DebugLevel, 1)
	}
	s = append(s, log.DebugLevel_name[int32(in.Levels[0])])
	return s
}

func DebugLevelsHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Levels")
	return s
}

func DebugResultSlicer(in *log.DebugResult) []string {
	s := make([]string, 0, 2)
	s = append(s, in.Status)
	s = append(s, strconv.FormatUint(uint64(in.Code), 10))
	return s
}

func DebugResultHeaderSlicer() []string {
	s := make([]string, 0, 2)
	s = append(s, "Status")
	s = append(s, "Code")
	return s
}

var EnableDebugLevelsCmd = &cobra.Command{
	Use: "EnableDebugLevels",
	Run: func(cmd *cobra.Command, args []string) {
		if DebugApiCmd == nil {
			fmt.Println("DebugApi client not initialized")
			return
		}
		var err error
		err = parseDebugLevelsEnums()
		if err != nil {
			fmt.Println("EnableDebugLevels: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := DebugApiCmd.EnableDebugLevels(ctx, &DebugLevelsIn)
		cancel()
		if err != nil {
			fmt.Println("EnableDebugLevels failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(DebugResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(DebugResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DisableDebugLevelsCmd = &cobra.Command{
	Use: "DisableDebugLevels",
	Run: func(cmd *cobra.Command, args []string) {
		if DebugApiCmd == nil {
			fmt.Println("DebugApi client not initialized")
			return
		}
		var err error
		err = parseDebugLevelsEnums()
		if err != nil {
			fmt.Println("DisableDebugLevels: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := DebugApiCmd.DisableDebugLevels(ctx, &DebugLevelsIn)
		cancel()
		if err != nil {
			fmt.Println("DisableDebugLevels failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(DebugResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(DebugResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var ShowDebugLevelsCmd = &cobra.Command{
	Use: "ShowDebugLevels",
	Run: func(cmd *cobra.Command, args []string) {
		if DebugApiCmd == nil {
			fmt.Println("DebugApi client not initialized")
			return
		}
		var err error
		err = parseDebugLevelsEnums()
		if err != nil {
			fmt.Println("ShowDebugLevels: ", err)
			return
		}
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := DebugApiCmd.ShowDebugLevels(ctx, &DebugLevelsIn)
		cancel()
		if err != nil {
			fmt.Println("ShowDebugLevels failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(DebugLevelsHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(DebugLevelsSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DebugApiCmds = []*cobra.Command{
	EnableDebugLevelsCmd,
	DisableDebugLevelsCmd,
	ShowDebugLevelsCmd,
}

func init() {
	EnableDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsFlagSet)
	DisableDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsFlagSet)
	ShowDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsFlagSet)
}

func DebugApiAllowNoConfig() {
	EnableDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsNoConfigFlagSet)
	DisableDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsNoConfigFlagSet)
	ShowDebugLevelsCmd.Flags().AddFlagSet(DebugLevelsNoConfigFlagSet)
}

func parseDebugLevelsEnums() error {
	if DebugLevelsInLevels != "" {
		for _, str := range strings.Split(DebugLevelsInLevels, ",") {
			switch str {
			case "etcd":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(0))
			case "api":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(1))
			case "notify":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(2))
			case "dmedb":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(3))
			case "dmereq":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(4))
			case "locapi":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(5))
			case "mexos":
				DebugLevelsIn.Levels = append(DebugLevelsIn.Levels, log.DebugLevel(6))
			default:
				return errors.New("Invalid value for DebugLevelsInLevels")
			}
		}
	}
	return nil
}
