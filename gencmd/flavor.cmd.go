// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flavor.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "time"
import "strconv"
import "github.com/spf13/cobra"
import "context"
import "os"
import "io"
import "text/tabwriter"
import "github.com/spf13/pflag"
import "encoding/json"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/yaml"
import "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/cmdsup"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/protoc-gen-cmd/protocmd"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var FlavorApiCmd edgeproto.FlavorApiClient
var FlavorIn edgeproto.Flavor
var FlavorFlagSet = pflag.NewFlagSet("Flavor", pflag.ExitOnError)
var FlavorNoConfigFlagSet = pflag.NewFlagSet("FlavorNoConfig", pflag.ExitOnError)

func FlavorKeySlicer(in *edgeproto.FlavorKey) []string {
	s := make([]string, 0, 1)
	s = append(s, in.Name)
	return s
}

func FlavorKeyHeaderSlicer() []string {
	s := make([]string, 0, 1)
	s = append(s, "Name")
	return s
}

func FlavorSlicer(in *edgeproto.Flavor) []string {
	s := make([]string, 0, 5)
	if in.Fields == nil {
		in.Fields = make([]string, 1)
	}
	s = append(s, in.Fields[0])
	s = append(s, in.Key.Name)
	s = append(s, strconv.FormatUint(uint64(in.Ram), 10))
	s = append(s, strconv.FormatUint(uint64(in.Vcpus), 10))
	s = append(s, strconv.FormatUint(uint64(in.Disk), 10))
	return s
}

func FlavorHeaderSlicer() []string {
	s := make([]string, 0, 5)
	s = append(s, "Fields")
	s = append(s, "Key-Name")
	s = append(s, "Ram")
	s = append(s, "Vcpus")
	s = append(s, "Disk")
	return s
}

var CreateFlavorCmd = &cobra.Command{
	Use: "CreateFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if FlavorApiCmd == nil {
			fmt.Println("FlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := FlavorApiCmd.CreateFlavor(ctx, &FlavorIn)
		cancel()
		if err != nil {
			fmt.Println("CreateFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var DeleteFlavorCmd = &cobra.Command{
	Use: "DeleteFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if FlavorApiCmd == nil {
			fmt.Println("FlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := FlavorApiCmd.DeleteFlavor(ctx, &FlavorIn)
		cancel()
		if err != nil {
			fmt.Println("DeleteFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var UpdateFlavorCmd = &cobra.Command{
	Use: "UpdateFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if FlavorApiCmd == nil {
			fmt.Println("FlavorApi client not initialized")
			return
		}
		var err error
		FlavorSetFields()
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		objs, err := FlavorApiCmd.UpdateFlavor(ctx, &FlavorIn)
		cancel()
		if err != nil {
			fmt.Println("UpdateFlavor failed: ", err)
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(ResultHeaderSlicer(), "\t"))
			fmt.Fprintln(output, strings.Join(ResultSlicer(objs), "\t"))
			output.Flush()
		}
	},
}

var ShowFlavorCmd = &cobra.Command{
	Use: "ShowFlavor",
	Run: func(cmd *cobra.Command, args []string) {
		if FlavorApiCmd == nil {
			fmt.Println("FlavorApi client not initialized")
			return
		}
		var err error
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
		defer cancel()
		stream, err := FlavorApiCmd.ShowFlavor(ctx, &FlavorIn)
		if err != nil {
			fmt.Println("ShowFlavor failed: ", err)
			return
		}
		objs := make([]*edgeproto.Flavor, 0)
		for {
			obj, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				fmt.Println("ShowFlavor recv failed: ", err)
				break
			}
			objs = append(objs, obj)
		}
		if len(objs) == 0 {
			return
		}
		switch cmdsup.OutputFormat {
		case cmdsup.OutputFormatYaml:
			output, err := yaml.Marshal(objs)
			if err != nil {
				fmt.Printf("Yaml failed to marshal: %s\n", err)
				return
			}
			fmt.Print(string(output))
		case cmdsup.OutputFormatJson:
			output, err := json.MarshalIndent(objs, "", "  ")
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatJsonCompact:
			output, err := json.Marshal(objs)
			if err != nil {
				fmt.Printf("Json failed to marshal: %s\n", err)
				return
			}
			fmt.Println(string(output))
		case cmdsup.OutputFormatTable:
			output := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', 0)
			fmt.Fprintln(output, strings.Join(FlavorHeaderSlicer(), "\t"))
			for _, obj := range objs {
				fmt.Fprintln(output, strings.Join(FlavorSlicer(obj), "\t"))
			}
			output.Flush()
		}
	},
}

var FlavorApiCmds = []*cobra.Command{
	CreateFlavorCmd,
	DeleteFlavorCmd,
	UpdateFlavorCmd,
	ShowFlavorCmd,
}

func init() {
	FlavorFlagSet.StringVar(&FlavorIn.Key.Name, "key-name", "", "Key.Name")
	FlavorFlagSet.Uint64Var(&FlavorIn.Ram, "ram", 0, "Ram")
	FlavorFlagSet.Uint64Var(&FlavorIn.Vcpus, "vcpus", 0, "Vcpus")
	FlavorFlagSet.Uint64Var(&FlavorIn.Disk, "disk", 0, "Disk")
	CreateFlavorCmd.Flags().AddFlagSet(FlavorFlagSet)
	DeleteFlavorCmd.Flags().AddFlagSet(FlavorFlagSet)
	UpdateFlavorCmd.Flags().AddFlagSet(FlavorFlagSet)
	ShowFlavorCmd.Flags().AddFlagSet(FlavorFlagSet)
}

func FlavorApiAllowNoConfig() {
	CreateFlavorCmd.Flags().AddFlagSet(FlavorNoConfigFlagSet)
	DeleteFlavorCmd.Flags().AddFlagSet(FlavorNoConfigFlagSet)
	UpdateFlavorCmd.Flags().AddFlagSet(FlavorNoConfigFlagSet)
	ShowFlavorCmd.Flags().AddFlagSet(FlavorNoConfigFlagSet)
}

func FlavorSetFields() {
	FlavorIn.Fields = make([]string, 0)
	if FlavorFlagSet.Lookup("key-name").Changed {
		FlavorIn.Fields = append(FlavorIn.Fields, "2.1")
	}
	if FlavorFlagSet.Lookup("ram").Changed {
		FlavorIn.Fields = append(FlavorIn.Fields, "3")
	}
	if FlavorFlagSet.Lookup("vcpus").Changed {
		FlavorIn.Fields = append(FlavorIn.Fields, "4")
	}
	if FlavorFlagSet.Lookup("disk").Changed {
		FlavorIn.Fields = append(FlavorIn.Fields, "5")
	}
}
