// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletpool.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "io"
import "github.com/mobiledgex/edge-cloud/cli"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var CloudletPoolApiCmd edgeproto.CloudletPoolApiClient

var CreateCloudletPoolCmd = &cli.Command{
	Use:          "CreateCloudletPool",
	RequiredArgs: strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     CloudletPoolComments,
	ReqData:      &edgeproto.CloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateCloudletPool,
}

func runCreateCloudletPool(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateCloudletPool(c, obj)
}

func CreateCloudletPool(c *cli.Command, in *edgeproto.CloudletPool) error {
	if CloudletPoolApiCmd == nil {
		return fmt.Errorf("CloudletPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletPoolApiCmd.CreateCloudletPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudletPool failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateCloudletPools(c *cli.Command, data []edgeproto.CloudletPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudletPool %v\n", data[ii])
		myerr := CreateCloudletPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletPoolCmd = &cli.Command{
	Use:          "DeleteCloudletPool",
	RequiredArgs: strings.Join(CloudletPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     CloudletPoolComments,
	ReqData:      &edgeproto.CloudletPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteCloudletPool,
}

func runDeleteCloudletPool(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteCloudletPool(c, obj)
}

func DeleteCloudletPool(c *cli.Command, in *edgeproto.CloudletPool) error {
	if CloudletPoolApiCmd == nil {
		return fmt.Errorf("CloudletPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletPoolApiCmd.DeleteCloudletPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudletPool failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteCloudletPools(c *cli.Command, data []edgeproto.CloudletPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudletPool %v\n", data[ii])
		myerr := DeleteCloudletPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletPoolCmd = &cli.Command{
	Use:          "ShowCloudletPool",
	OptionalArgs: strings.Join(append(CloudletPoolRequiredArgs, CloudletPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletPoolAliasArgs, " "),
	SpecialArgs:  &CloudletPoolSpecialArgs,
	Comments:     CloudletPoolComments,
	ReqData:      &edgeproto.CloudletPool{},
	ReplyData:    &edgeproto.CloudletPool{},
	Run:          runShowCloudletPool,
}

func runShowCloudletPool(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletPool(c, obj)
}

func ShowCloudletPool(c *cli.Command, in *edgeproto.CloudletPool) error {
	if CloudletPoolApiCmd == nil {
		return fmt.Errorf("CloudletPoolApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletPoolApiCmd.ShowCloudletPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletPool failed: %s", errstr)
	}
	objs := make([]*edgeproto.CloudletPool, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletPool recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletPools(c *cli.Command, data []edgeproto.CloudletPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletPool %v\n", data[ii])
		myerr := ShowCloudletPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletPoolApiCmds = []*cobra.Command{
	CreateCloudletPoolCmd.GenCmd(),
	DeleteCloudletPoolCmd.GenCmd(),
	ShowCloudletPoolCmd.GenCmd(),
}

var CloudletPoolMemberApiCmd edgeproto.CloudletPoolMemberApiClient

var CreateCloudletPoolMemberCmd = &cli.Command{
	Use:          "CreateCloudletPoolMember",
	RequiredArgs: strings.Join(CloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     CloudletPoolMemberComments,
	ReqData:      &edgeproto.CloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateCloudletPoolMember,
}

func runCreateCloudletPoolMember(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateCloudletPoolMember(c, obj)
}

func CreateCloudletPoolMember(c *cli.Command, in *edgeproto.CloudletPoolMember) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletPoolMemberApiCmd.CreateCloudletPoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudletPoolMember failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateCloudletPoolMembers(c *cli.Command, data []edgeproto.CloudletPoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudletPoolMember %v\n", data[ii])
		myerr := CreateCloudletPoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletPoolMemberCmd = &cli.Command{
	Use:          "DeleteCloudletPoolMember",
	RequiredArgs: strings.Join(CloudletPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     CloudletPoolMemberComments,
	ReqData:      &edgeproto.CloudletPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteCloudletPoolMember,
}

func runDeleteCloudletPoolMember(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteCloudletPoolMember(c, obj)
}

func DeleteCloudletPoolMember(c *cli.Command, in *edgeproto.CloudletPoolMember) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletPoolMemberApiCmd.DeleteCloudletPoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudletPoolMember failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteCloudletPoolMembers(c *cli.Command, data []edgeproto.CloudletPoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudletPoolMember %v\n", data[ii])
		myerr := DeleteCloudletPoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletPoolMemberCmd = &cli.Command{
	Use:          "ShowCloudletPoolMember",
	OptionalArgs: strings.Join(append(CloudletPoolMemberRequiredArgs, CloudletPoolMemberOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletPoolMemberSpecialArgs,
	Comments:     CloudletPoolMemberComments,
	ReqData:      &edgeproto.CloudletPoolMember{},
	ReplyData:    &edgeproto.CloudletPoolMember{},
	Run:          runShowCloudletPoolMember,
}

func runShowCloudletPoolMember(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletPoolMember(c, obj)
}

func ShowCloudletPoolMember(c *cli.Command, in *edgeproto.CloudletPoolMember) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletPoolMemberApiCmd.ShowCloudletPoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletPoolMember failed: %s", errstr)
	}
	objs := make([]*edgeproto.CloudletPoolMember, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletPoolMember recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletPoolMembers(c *cli.Command, data []edgeproto.CloudletPoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletPoolMember %v\n", data[ii])
		myerr := ShowCloudletPoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowPoolsForCloudletCmd = &cli.Command{
	Use:          "ShowPoolsForCloudlet",
	RequiredArgs: strings.Join(CloudletKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletKeyAliasArgs, " "),
	SpecialArgs:  &CloudletKeySpecialArgs,
	Comments:     CloudletKeyComments,
	ReqData:      &edgeproto.CloudletKey{},
	ReplyData:    &edgeproto.CloudletPool{},
	Run:          runShowPoolsForCloudlet,
}

func runShowPoolsForCloudlet(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowPoolsForCloudlet(c, obj)
}

func ShowPoolsForCloudlet(c *cli.Command, in *edgeproto.CloudletKey) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletPoolMemberApiCmd.ShowPoolsForCloudlet(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowPoolsForCloudlet failed: %s", errstr)
	}
	objs := make([]*edgeproto.CloudletPool, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowPoolsForCloudlet recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowPoolsForCloudlets(c *cli.Command, data []edgeproto.CloudletKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowPoolsForCloudlet %v\n", data[ii])
		myerr := ShowPoolsForCloudlet(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletsForPoolCmd = &cli.Command{
	Use:          "ShowCloudletsForPool",
	RequiredArgs: strings.Join(CloudletPoolKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolKeyAliasArgs, " "),
	SpecialArgs:  &CloudletPoolKeySpecialArgs,
	Comments:     CloudletPoolKeyComments,
	ReqData:      &edgeproto.CloudletPoolKey{},
	ReplyData:    &edgeproto.Cloudlet{},
	Run:          runShowCloudletsForPool,
}

func runShowCloudletsForPool(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPoolKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletsForPool(c, obj)
}

func ShowCloudletsForPool(c *cli.Command, in *edgeproto.CloudletPoolKey) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletPoolMemberApiCmd.ShowCloudletsForPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletsForPool failed: %s", errstr)
	}
	objs := make([]*edgeproto.Cloudlet, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletsForPool recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletsForPools(c *cli.Command, data []edgeproto.CloudletPoolKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletsForPool %v\n", data[ii])
		myerr := ShowCloudletsForPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletsForPoolListCmd = &cli.Command{
	Use:          "ShowCloudletsForPoolList",
	RequiredArgs: strings.Join(CloudletPoolListRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletPoolListOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletPoolListAliasArgs, " "),
	SpecialArgs:  &CloudletPoolListSpecialArgs,
	Comments:     CloudletPoolListComments,
	ReqData:      &edgeproto.CloudletPoolList{},
	ReplyData:    &edgeproto.Cloudlet{},
	Run:          runShowCloudletsForPoolList,
}

func runShowCloudletsForPoolList(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.CloudletPoolList)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletsForPoolList(c, obj)
}

func ShowCloudletsForPoolList(c *cli.Command, in *edgeproto.CloudletPoolList) error {
	if CloudletPoolMemberApiCmd == nil {
		return fmt.Errorf("CloudletPoolMemberApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletPoolMemberApiCmd.ShowCloudletsForPoolList(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletsForPoolList failed: %s", errstr)
	}
	objs := make([]*edgeproto.Cloudlet, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowCloudletsForPoolList recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletsForPoolLists(c *cli.Command, data []edgeproto.CloudletPoolList, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletsForPoolList %v\n", data[ii])
		myerr := ShowCloudletsForPoolList(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletPoolMemberApiCmds = []*cobra.Command{
	CreateCloudletPoolMemberCmd.GenCmd(),
	DeleteCloudletPoolMemberCmd.GenCmd(),
	ShowCloudletPoolMemberCmd.GenCmd(),
	ShowPoolsForCloudletCmd.GenCmd(),
	ShowCloudletsForPoolCmd.GenCmd(),
	ShowCloudletsForPoolListCmd.GenCmd(),
}

var CloudletPoolKeyRequiredArgs = []string{}
var CloudletPoolKeyOptionalArgs = []string{
	"name",
}
var CloudletPoolKeyAliasArgs = []string{}
var CloudletPoolKeyComments = map[string]string{
	"name": "CloudletPool Name",
}
var CloudletPoolKeySpecialArgs = map[string]string{}
var CloudletPoolRequiredArgs = []string{
	"name",
}
var CloudletPoolOptionalArgs = []string{}
var CloudletPoolAliasArgs = []string{
	"name=key.name",
}
var CloudletPoolComments = map[string]string{
	"name": "CloudletPool Name",
}
var CloudletPoolSpecialArgs = map[string]string{}
var CloudletPoolMemberRequiredArgs = []string{
	"pool",
	"operator",
	"cloudlet",
}
var CloudletPoolMemberOptionalArgs = []string{}
var CloudletPoolMemberAliasArgs = []string{
	"pool=poolkey.name",
	"operator=cloudletkey.operatorkey.name",
	"cloudlet=cloudletkey.name",
}
var CloudletPoolMemberComments = map[string]string{
	"pool":     "CloudletPool Name",
	"operator": "Company or Organization name of the operator",
	"cloudlet": "Name of the cloudlet",
}
var CloudletPoolMemberSpecialArgs = map[string]string{}
var CloudletPoolListRequiredArgs = []string{}
var CloudletPoolListOptionalArgs = []string{
	"poolname",
}
var CloudletPoolListAliasArgs = []string{}
var CloudletPoolListComments = map[string]string{
	"poolname": "Name of Cloudlet Pool (may be repeated)",
}
var CloudletPoolListSpecialArgs = map[string]string{
	"poolname": "StringArray",
}
