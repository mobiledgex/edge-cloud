// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudletvmpool.proto

package gencmd

import distributed_match_engine "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "io"
import "github.com/mobiledgex/edge-cloud/cli"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
func CloudletVMHideTags(in *edgeproto.CloudletVM) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		in.UpdatedAt = distributed_match_engine.Timestamp{}
	}
}

func CloudletVMPoolHideTags(in *edgeproto.CloudletVMPool) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	for i0 := 0; i0 < len(in.CloudletVms); i0++ {
		if _, found := tags["timestamp"]; found {
			in.CloudletVms[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
	}
}

func CloudletVMPoolMemberHideTags(in *edgeproto.CloudletVMPoolMember) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["timestamp"]; found {
		in.CloudletVm.UpdatedAt = distributed_match_engine.Timestamp{}
	}
}

func CloudletVMPoolInfoHideTags(in *edgeproto.CloudletVMPoolInfo) {
	if cli.HideTags == "" {
		return
	}
	tags := make(map[string]struct{})
	for _, tag := range strings.Split(cli.HideTags, ",") {
		tags[tag] = struct{}{}
	}
	if _, found := tags["nocmp"]; found {
		in.NotifyId = 0
	}
	for i0 := 0; i0 < len(in.Vmspecs); i0++ {
	}
	for i0 := 0; i0 < len(in.CloudletVms); i0++ {
		if _, found := tags["timestamp"]; found {
			in.CloudletVms[i0].UpdatedAt = distributed_match_engine.Timestamp{}
		}
	}
}

var CloudletVMPoolApiCmd edgeproto.CloudletVMPoolApiClient

var CreateCloudletVMPoolCmd = &cli.Command{
	Use:          "CreateCloudletVMPool",
	RequiredArgs: strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     CloudletVMPoolComments,
	ReqData:      &edgeproto.CloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateCloudletVMPool,
}

func runCreateCloudletVMPool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateCloudletVMPool(c, obj)
}

func CreateCloudletVMPool(c *cli.Command, in *edgeproto.CloudletVMPool) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletVMPoolApiCmd.CreateCloudletVMPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateCloudletVMPool failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateCloudletVMPools(c *cli.Command, data []edgeproto.CloudletVMPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateCloudletVMPool %v\n", data[ii])
		myerr := CreateCloudletVMPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteCloudletVMPoolCmd = &cli.Command{
	Use:          "DeleteCloudletVMPool",
	RequiredArgs: strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     CloudletVMPoolComments,
	ReqData:      &edgeproto.CloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteCloudletVMPool,
}

func runDeleteCloudletVMPool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteCloudletVMPool(c, obj)
}

func DeleteCloudletVMPool(c *cli.Command, in *edgeproto.CloudletVMPool) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletVMPoolApiCmd.DeleteCloudletVMPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteCloudletVMPool failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteCloudletVMPools(c *cli.Command, data []edgeproto.CloudletVMPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteCloudletVMPool %v\n", data[ii])
		myerr := DeleteCloudletVMPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateCloudletVMPoolCmd = &cli.Command{
	Use:          "UpdateCloudletVMPool",
	RequiredArgs: strings.Join(CloudletVMPoolRequiredArgs, " "),
	OptionalArgs: strings.Join(CloudletVMPoolOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     CloudletVMPoolComments,
	ReqData:      &edgeproto.CloudletVMPool{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateCloudletVMPool,
}

func runUpdateCloudletVMPool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPool)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData, cli.JsonNamespace)
	return UpdateCloudletVMPool(c, obj)
}

func UpdateCloudletVMPool(c *cli.Command, in *edgeproto.CloudletVMPool) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletVMPoolApiCmd.UpdateCloudletVMPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateCloudletVMPool failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateCloudletVMPools(c *cli.Command, data []edgeproto.CloudletVMPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateCloudletVMPool %v\n", data[ii])
		myerr := UpdateCloudletVMPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowCloudletVMPoolCmd = &cli.Command{
	Use:          "ShowCloudletVMPool",
	OptionalArgs: strings.Join(append(CloudletVMPoolRequiredArgs, CloudletVMPoolOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletVMPoolAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolSpecialArgs,
	Comments:     CloudletVMPoolComments,
	ReqData:      &edgeproto.CloudletVMPool{},
	ReplyData:    &edgeproto.CloudletVMPool{},
	Run:          runShowCloudletVMPool,
}

func runShowCloudletVMPool(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPool)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletVMPool(c, obj)
}

func ShowCloudletVMPool(c *cli.Command, in *edgeproto.CloudletVMPool) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletVMPoolApiCmd.ShowCloudletVMPool(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletVMPool failed: %s", errstr)
	}

	objs := make([]*edgeproto.CloudletVMPool, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudletVMPool recv failed: %s", errstr)
		}
		CloudletVMPoolHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletVMPools(c *cli.Command, data []edgeproto.CloudletVMPool, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletVMPool %v\n", data[ii])
		myerr := ShowCloudletVMPool(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddCloudletVMPoolMemberCmd = &cli.Command{
	Use:          "AddCloudletVMPoolMember",
	RequiredArgs: strings.Join(AddCloudletVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(AddCloudletVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolMemberSpecialArgs,
	Comments:     CloudletVMPoolMemberComments,
	ReqData:      &edgeproto.CloudletVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddCloudletVMPoolMember,
}

func runAddCloudletVMPoolMember(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddCloudletVMPoolMember(c, obj)
}

func AddCloudletVMPoolMember(c *cli.Command, in *edgeproto.CloudletVMPoolMember) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletVMPoolApiCmd.AddCloudletVMPoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddCloudletVMPoolMember failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddCloudletVMPoolMembers(c *cli.Command, data []edgeproto.CloudletVMPoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddCloudletVMPoolMember %v\n", data[ii])
		myerr := AddCloudletVMPoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveCloudletVMPoolMemberCmd = &cli.Command{
	Use:          "RemoveCloudletVMPoolMember",
	RequiredArgs: strings.Join(RemoveCloudletVMPoolMemberRequiredArgs, " "),
	OptionalArgs: strings.Join(RemoveCloudletVMPoolMemberOptionalArgs, " "),
	AliasArgs:    strings.Join(CloudletVMPoolMemberAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolMemberSpecialArgs,
	Comments:     CloudletVMPoolMemberComments,
	ReqData:      &edgeproto.CloudletVMPoolMember{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveCloudletVMPoolMember,
}

func runRemoveCloudletVMPoolMember(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPoolMember)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveCloudletVMPoolMember(c, obj)
}

func RemoveCloudletVMPoolMember(c *cli.Command, in *edgeproto.CloudletVMPoolMember) error {
	if CloudletVMPoolApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolApi client not initialized")
	}
	ctx := context.Background()
	obj, err := CloudletVMPoolApiCmd.RemoveCloudletVMPoolMember(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveCloudletVMPoolMember failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveCloudletVMPoolMembers(c *cli.Command, data []edgeproto.CloudletVMPoolMember, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveCloudletVMPoolMember %v\n", data[ii])
		myerr := RemoveCloudletVMPoolMember(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletVMPoolApiCmds = []*cobra.Command{
	CreateCloudletVMPoolCmd.GenCmd(),
	DeleteCloudletVMPoolCmd.GenCmd(),
	UpdateCloudletVMPoolCmd.GenCmd(),
	ShowCloudletVMPoolCmd.GenCmd(),
	AddCloudletVMPoolMemberCmd.GenCmd(),
	RemoveCloudletVMPoolMemberCmd.GenCmd(),
}

var CloudletVMPoolInfoApiCmd edgeproto.CloudletVMPoolInfoApiClient

var ShowCloudletVMPoolInfoCmd = &cli.Command{
	Use:          "ShowCloudletVMPoolInfo",
	OptionalArgs: strings.Join(append(CloudletVMPoolInfoRequiredArgs, CloudletVMPoolInfoOptionalArgs...), " "),
	AliasArgs:    strings.Join(CloudletVMPoolInfoAliasArgs, " "),
	SpecialArgs:  &CloudletVMPoolInfoSpecialArgs,
	Comments:     CloudletVMPoolInfoComments,
	ReqData:      &edgeproto.CloudletVMPoolInfo{},
	ReplyData:    &edgeproto.CloudletVMPoolInfo{},
	Run:          runShowCloudletVMPoolInfo,
}

func runShowCloudletVMPoolInfo(c *cli.Command, args []string) error {
	if cli.SilenceUsage {
		c.CobraCmd.SilenceUsage = true
	}
	obj := c.ReqData.(*edgeproto.CloudletVMPoolInfo)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowCloudletVMPoolInfo(c, obj)
}

func ShowCloudletVMPoolInfo(c *cli.Command, in *edgeproto.CloudletVMPoolInfo) error {
	if CloudletVMPoolInfoApiCmd == nil {
		return fmt.Errorf("CloudletVMPoolInfoApi client not initialized")
	}
	ctx := context.Background()
	stream, err := CloudletVMPoolInfoApiCmd.ShowCloudletVMPoolInfo(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowCloudletVMPoolInfo failed: %s", errstr)
	}

	objs := make([]*edgeproto.CloudletVMPoolInfo, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			errstr := err.Error()
			st, ok := status.FromError(err)
			if ok {
				errstr = st.Message()
			}
			return fmt.Errorf("ShowCloudletVMPoolInfo recv failed: %s", errstr)
		}
		CloudletVMPoolInfoHideTags(obj)
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowCloudletVMPoolInfos(c *cli.Command, data []edgeproto.CloudletVMPoolInfo, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowCloudletVMPoolInfo %v\n", data[ii])
		myerr := ShowCloudletVMPoolInfo(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var CloudletVMPoolInfoApiCmds = []*cobra.Command{
	ShowCloudletVMPoolInfoCmd.GenCmd(),
}

var CloudletVMNetInfoRequiredArgs = []string{}
var CloudletVMNetInfoOptionalArgs = []string{
	"externalip",
	"internalip",
}
var CloudletVMNetInfoAliasArgs = []string{}
var CloudletVMNetInfoComments = map[string]string{
	"externalip": "External IP",
	"internalip": "Internal IP",
}
var CloudletVMNetInfoSpecialArgs = map[string]string{}
var CloudletVMRequiredArgs = []string{}
var CloudletVMOptionalArgs = []string{
	"name",
	"netinfo.externalip",
	"netinfo.internalip",
	"type",
	"user",
	"state",
	"updatedat.seconds",
	"updatedat.nanos",
}
var CloudletVMAliasArgs = []string{}
var CloudletVMComments = map[string]string{
	"name":               "VM Name",
	"netinfo.externalip": "External IP",
	"netinfo.internalip": "Internal IP",
	"type":               "VM Type, one of PlatformNode, SharedRootLb, DedicatedRootLb, DockerNode, K8SMaster, K8SNode",
	"user":               "VM User",
	"state":              "VM State, one of CloudletVmFree, CloudletVmRequested, CloudletVmAllocated, CloudletVmInUse, CloudletVmReleased, CloudletVmError",
}
var CloudletVMSpecialArgs = map[string]string{}
var CloudletVMPoolRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolOptionalArgs = []string{
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
}
var CloudletVMPoolAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletVMPoolComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.type":               "VM Type, one of PlatformNode, SharedRootLb, DedicatedRootLb, DockerNode, K8SMaster, K8SNode",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmRequested, CloudletVmAllocated, CloudletVmInUse, CloudletVmReleased, CloudletVmError",
}
var CloudletVMPoolSpecialArgs = map[string]string{
	"fields": "StringArray",
}
var CloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.name",
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
}
var CloudletVMPoolMemberAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletVMPoolMemberComments = map[string]string{
	"cloudlet-org":                  "Organization of the cloudlet site",
	"cloudlet":                      "Name of the cloudlet",
	"cloudletvm.name":               "VM Name",
	"cloudletvm.netinfo.externalip": "External IP",
	"cloudletvm.netinfo.internalip": "Internal IP",
	"cloudletvm.type":               "VM Type, one of PlatformNode, SharedRootLb, DedicatedRootLb, DockerNode, K8SMaster, K8SNode",
	"cloudletvm.user":               "VM User",
	"cloudletvm.state":              "VM State, one of CloudletVmFree, CloudletVmRequested, CloudletVmAllocated, CloudletVmInUse, CloudletVmReleased, CloudletVmError",
}
var CloudletVMPoolMemberSpecialArgs = map[string]string{}
var CloudletVMSpecRequiredArgs = []string{}
var CloudletVMSpecOptionalArgs = []string{
	"externalnetwork",
	"internalnetwork",
}
var CloudletVMSpecAliasArgs = []string{}
var CloudletVMSpecComments = map[string]string{
	"externalnetwork": "Cloudlet VM has external network defined or not",
	"internalnetwork": "Cloudlet VM has internal network defined or not",
}
var CloudletVMSpecSpecialArgs = map[string]string{}
var CloudletVMPoolInfoRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
}
var CloudletVMPoolInfoOptionalArgs = []string{
	"state",
	"notifyid",
	"vmspecs:#.externalnetwork",
	"vmspecs:#.internalnetwork",
	"cloudletvms:#.name",
	"cloudletvms:#.netinfo.externalip",
	"cloudletvms:#.netinfo.internalip",
	"cloudletvms:#.type",
	"cloudletvms:#.user",
	"cloudletvms:#.state",
	"cloudletvms:#.updatedat.seconds",
	"cloudletvms:#.updatedat.nanos",
	"errors",
}
var CloudletVMPoolInfoAliasArgs = []string{
	"cloudlet-org=key.organization",
	"cloudlet=key.name",
}
var CloudletVMPoolInfoComments = map[string]string{
	"fields":                           "Fields are used for the Update API to specify which fields to apply",
	"cloudlet-org":                     "Organization of the cloudlet site",
	"cloudlet":                         "Name of the cloudlet",
	"state":                            "State of Cloudlet VM request, one of CloudletVmFree, CloudletVmRequested, CloudletVmAllocated, CloudletVmInUse, CloudletVmReleased, CloudletVmError",
	"notifyid":                         "Id of client assigned by server (internal use only)",
	"vmspecs:#.externalnetwork":        "Cloudlet VM has external network defined or not",
	"vmspecs:#.internalnetwork":        "Cloudlet VM has internal network defined or not",
	"cloudletvms:#.name":               "VM Name",
	"cloudletvms:#.netinfo.externalip": "External IP",
	"cloudletvms:#.netinfo.internalip": "Internal IP",
	"cloudletvms:#.type":               "VM Type, one of PlatformNode, SharedRootLb, DedicatedRootLb, DockerNode, K8SMaster, K8SNode",
	"cloudletvms:#.user":               "VM User",
	"cloudletvms:#.state":              "VM State, one of CloudletVmFree, CloudletVmRequested, CloudletVmAllocated, CloudletVmInUse, CloudletVmReleased, CloudletVmError",
	"errors":                           "Errors if any",
}
var CloudletVMPoolInfoSpecialArgs = map[string]string{
	"errors": "StringArray",
	"fields": "StringArray",
}
var AddCloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var AddCloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
}
var RemoveCloudletVMPoolMemberRequiredArgs = []string{
	"cloudlet-org",
	"cloudlet",
	"cloudletvm.name",
}
var RemoveCloudletVMPoolMemberOptionalArgs = []string{
	"cloudletvm.netinfo.externalip",
	"cloudletvm.netinfo.internalip",
}
