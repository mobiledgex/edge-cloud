// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gputagtable.proto

package gencmd

import edgeproto "github.com/mobiledgex/edge-cloud/edgeproto"
import "strings"
import "github.com/spf13/cobra"
import "context"
import "io"
import "github.com/mobiledgex/edge-cloud/cli"
import "google.golang.org/grpc/status"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
var GpuTagTableApiCmd edgeproto.GpuTagTableApiClient

var CreateGpuTagTableCmd = &cli.Command{
	Use:          "CreateGpuTagTable",
	RequiredArgs: strings.Join(GpuTagTableRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runCreateGpuTagTable,
}

func runCreateGpuTagTable(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return CreateGpuTagTable(c, obj)
}

func CreateGpuTagTable(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.CreateGpuTagTable(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("CreateGpuTagTable failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func CreateGpuTagTables(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("CreateGpuTagTable %v\n", data[ii])
		myerr := CreateGpuTagTable(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var DeleteGpuTagTableCmd = &cli.Command{
	Use:          "DeleteGpuTagTable",
	RequiredArgs: strings.Join(GpuTagTableRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runDeleteGpuTagTable,
}

func runDeleteGpuTagTable(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return DeleteGpuTagTable(c, obj)
}

func DeleteGpuTagTable(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.DeleteGpuTagTable(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("DeleteGpuTagTable failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func DeleteGpuTagTables(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("DeleteGpuTagTable %v\n", data[ii])
		myerr := DeleteGpuTagTable(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var UpdateGpuTagTableCmd = &cli.Command{
	Use:          "UpdateGpuTagTable",
	RequiredArgs: strings.Join(GpuTagTableRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runUpdateGpuTagTable,
}

func runUpdateGpuTagTable(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	jsonMap, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	obj.Fields = cli.GetSpecifiedFields(jsonMap, c.ReqData, cli.JsonNamespace)
	return UpdateGpuTagTable(c, obj)
}

func UpdateGpuTagTable(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.UpdateGpuTagTable(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("UpdateGpuTagTable failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func UpdateGpuTagTables(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("UpdateGpuTagTable %v\n", data[ii])
		myerr := UpdateGpuTagTable(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var ShowGpuTagTableCmd = &cli.Command{
	Use:          "ShowGpuTagTable",
	OptionalArgs: strings.Join(append(GpuTagTableRequiredArgs, GpuTagTableOptionalArgs...), " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.GpuTagTable{},
	Run:          runShowGpuTagTable,
}

func runShowGpuTagTable(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return ShowGpuTagTable(c, obj)
}

func ShowGpuTagTable(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	stream, err := GpuTagTableApiCmd.ShowGpuTagTable(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("ShowGpuTagTable failed: %s", errstr)
	}
	objs := make([]*edgeproto.GpuTagTable, 0)
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("ShowGpuTagTable recv failed: %s", err.Error())
		}
		objs = append(objs, obj)
	}
	if len(objs) == 0 {
		return nil
	}
	c.WriteOutput(objs, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func ShowGpuTagTables(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("ShowGpuTagTable %v\n", data[ii])
		myerr := ShowGpuTagTable(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var AddGpuTagCmd = &cli.Command{
	Use:          "AddGpuTag",
	RequiredArgs: strings.Join(GpuTagTableRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runAddGpuTag,
}

func runAddGpuTag(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return AddGpuTag(c, obj)
}

func AddGpuTag(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.AddGpuTag(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("AddGpuTag failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func AddGpuTags(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("AddGpuTag %v\n", data[ii])
		myerr := AddGpuTag(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var RemoveGpuTagCmd = &cli.Command{
	Use:          "RemoveGpuTag",
	RequiredArgs: strings.Join(GpuTagTableRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableAliasArgs, " "),
	SpecialArgs:  &GpuTagTableSpecialArgs,
	Comments:     GpuTagTableComments,
	ReqData:      &edgeproto.GpuTagTable{},
	ReplyData:    &edgeproto.Result{},
	Run:          runRemoveGpuTag,
}

func runRemoveGpuTag(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTable)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return RemoveGpuTag(c, obj)
}

func RemoveGpuTag(c *cli.Command, in *edgeproto.GpuTagTable) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.RemoveGpuTag(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("RemoveGpuTag failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func RemoveGpuTags(c *cli.Command, data []edgeproto.GpuTagTable, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("RemoveGpuTag %v\n", data[ii])
		myerr := RemoveGpuTag(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GetGpuTagTableCmd = &cli.Command{
	Use:          "GetGpuTagTable",
	RequiredArgs: strings.Join(GpuTagTableKeyRequiredArgs, " "),
	OptionalArgs: strings.Join(GpuTagTableKeyOptionalArgs, " "),
	AliasArgs:    strings.Join(GpuTagTableKeyAliasArgs, " "),
	SpecialArgs:  &GpuTagTableKeySpecialArgs,
	Comments:     GpuTagTableKeyComments,
	ReqData:      &edgeproto.GpuTagTableKey{},
	ReplyData:    &edgeproto.GpuTagTable{},
	Run:          runGetGpuTagTable,
}

func runGetGpuTagTable(c *cli.Command, args []string) error {
	obj := c.ReqData.(*edgeproto.GpuTagTableKey)
	_, err := c.ParseInput(args)
	if err != nil {
		return err
	}
	return GetGpuTagTable(c, obj)
}

func GetGpuTagTable(c *cli.Command, in *edgeproto.GpuTagTableKey) error {
	if GpuTagTableApiCmd == nil {
		return fmt.Errorf("GpuTagTableApi client not initialized")
	}
	ctx := context.Background()
	obj, err := GpuTagTableApiCmd.GetGpuTagTable(ctx, in)
	if err != nil {
		errstr := err.Error()
		st, ok := status.FromError(err)
		if ok {
			errstr = st.Message()
		}
		return fmt.Errorf("GetGpuTagTable failed: %s", errstr)
	}
	c.WriteOutput(obj, cli.OutputFormat)
	return nil
}

// this supports "Create" and "Delete" commands on ApplicationData
func GetGpuTagTables(c *cli.Command, data []edgeproto.GpuTagTableKey, err *error) {
	if *err != nil {
		return
	}
	for ii, _ := range data {
		fmt.Printf("GetGpuTagTable %v\n", data[ii])
		myerr := GetGpuTagTable(c, &data[ii])
		if myerr != nil {
			*err = myerr
			break
		}
	}
}

var GpuTagTableApiCmds = []*cobra.Command{
	CreateGpuTagTableCmd.GenCmd(),
	DeleteGpuTagTableCmd.GenCmd(),
	UpdateGpuTagTableCmd.GenCmd(),
	ShowGpuTagTableCmd.GenCmd(),
	AddGpuTagCmd.GenCmd(),
	RemoveGpuTagCmd.GenCmd(),
	GetGpuTagTableCmd.GenCmd(),
}

var GpuTagTableKeyRequiredArgs = []string{}
var GpuTagTableKeyOptionalArgs = []string{
	"name",
}
var GpuTagTableKeyAliasArgs = []string{}
var GpuTagTableKeyComments = map[string]string{}
var GpuTagTableKeySpecialArgs = map[string]string{}
var GpuTagTableRequiredArgs = []string{
	"name",
}
var GpuTagTableOptionalArgs = []string{
	"tags",
}
var GpuTagTableAliasArgs = []string{
	"name=key.name",
}
var GpuTagTableComments = map[string]string{
	"tags": "one or more string tags  repeated string table = 3;",
}
var GpuTagTableSpecialArgs = map[string]string{
	"tags": "StringArray",
}
