// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
Package testutil is a generated protocol buffer package.

It is generated from these files:
	app.proto
	app_inst.proto
	cloudlet.proto
	debug.proto
	developer.proto
	loc.proto
	notice.proto
	operator.proto
	result.proto

It has these top-level messages:
	AppKey
	App
	AppInstKey
	AppInst
	CloudletKey
	Cloudlet
	DebugLevel
	DeveloperKey
	Developer
	Loc
	Notice
	NoticeReply
	OperatorCode
	OperatorKey
	Operator
	Result
*/
package testutil

import "google.golang.org/grpc"
import "github.com/mobiledgex/edge-cloud/edgeproto"
import "io"
import "testing"
import "context"
import "github.com/stretchr/testify/assert"
import "github.com/mobiledgex/edge-cloud/util"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type ShowApp struct {
	data map[string]edgeproto.App
	grpc.ServerStream
}

func (x *ShowApp) Init() {
	x.data = make(map[string]edgeproto.App)
}

func (x *ShowApp) Send(m *edgeproto.App) error {
	x.data[m.Key.GetKeyString()] = *m
	return nil
}

func (x *ShowApp) ReadStream(stream edgeproto.AppApi_ShowAppClient, err error) {
	x.data = make(map[string]edgeproto.App)
	if err != nil {
		return
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		//util.InfoLog("show App", "key", obj.Key.GetKeyString())
		if err != nil {
			break
		}
		x.data[obj.Key.GetKeyString()] = *obj
	}
}

func (x *ShowApp) AssertFound(t *testing.T, obj *edgeproto.App) {
	check, found := x.data[obj.Key.GetKeyString()]
	assert.True(t, found, "find App %s", obj.Key.GetKeyString())
	if found {
		assert.Equal(t, *obj, check, "App are equal")
	}
}

func (x *ShowApp) AssertNotFound(t *testing.T, obj *edgeproto.App) {
	_, found := x.data[obj.Key.GetKeyString()]
	assert.False(t, found, "do not find App %s", obj.Key.GetKeyString())
}

// Wrap the api with a common interface
type AppCommonApi struct {
	internal_api edgeproto.AppApiServer
	client_api   edgeproto.AppApiClient
}

func (x *AppCommonApi) CreateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if x.internal_api != nil {
		return x.internal_api.CreateApp(ctx, in)
	} else {
		return x.client_api.CreateApp(ctx, in)
	}
}

func (x *AppCommonApi) UpdateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if x.internal_api != nil {
		return x.internal_api.UpdateApp(ctx, in)
	} else {
		return x.client_api.UpdateApp(ctx, in)
	}
}

func (x *AppCommonApi) DeleteApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if x.internal_api != nil {
		return x.internal_api.DeleteApp(ctx, in)
	} else {
		return x.client_api.DeleteApp(ctx, in)
	}
}

func (x *AppCommonApi) ShowApp(ctx context.Context, filter *edgeproto.App, showData *ShowApp) error {
	if x.internal_api != nil {
		return x.internal_api.ShowApp(filter, showData)
	} else {
		stream, err := x.client_api.ShowApp(ctx, filter)
		showData.ReadStream(stream, err)
		return err
	}
}

func InternalAppCudTest(t *testing.T, api edgeproto.AppApiServer, testData []edgeproto.App) {
	apiWrap := AppCommonApi{}
	apiWrap.internal_api = api
	basicAppCudTest(t, &apiWrap, testData)
}

func ClientAppCudTest(t *testing.T, api edgeproto.AppApiClient, testData []edgeproto.App) {
	apiWrap := AppCommonApi{}
	apiWrap.client_api = api
	basicAppCudTest(t, &apiWrap, testData)
}

func basicAppCudTest(t *testing.T, api *AppCommonApi, testData []edgeproto.App) {
	var err error
	ctx := context.TODO()

	if len(testData) < 3 {
		assert.True(t, false, "Need at least 3 test data objects")
		return
	}

	// test create
	for _, obj := range testData {
		_, err = api.CreateApp(ctx, &obj)
		assert.Nil(t, err, "Create App %s", obj.Key.GetKeyString())
	}
	_, err = api.CreateApp(ctx, &testData[0])
	assert.NotNil(t, err, "Create duplicate App")

	// test show all items
	show := ShowApp{}
	show.Init()
	filterNone := edgeproto.App{}
	err = api.ShowApp(ctx, &filterNone, &show)
	assert.Nil(t, err, "show data")
	for _, obj := range testData {
		show.AssertFound(t, &obj)
	}
	assert.Equal(t, len(testData), len(show.data), "Show count")

	// test delete
	_, err = api.DeleteApp(ctx, &testData[0])
	assert.Nil(t, err, "delete App %s", testData[0].Key.GetKeyString())
	show.Init()
	err = api.ShowApp(ctx, &filterNone, &show)
	assert.Nil(t, err, "show data")
	assert.Equal(t, len(testData)-1, len(show.data), "Show count")
	show.AssertNotFound(t, &testData[0])
	// test update of missing object
	_, err = api.UpdateApp(ctx, &testData[0])
	assert.NotNil(t, err, "Update missing object")
	// create it back
	_, err = api.CreateApp(ctx, &testData[0])
	assert.Nil(t, err, "Create App %s", testData[0].Key.GetKeyString())

	// test invalid keys
	bad := edgeproto.App{}
	_, err = api.CreateApp(ctx, &bad)
	assert.NotNil(t, err, "Create App with no key info")

	// test update
	updater := edgeproto.App{}
	updater.Key = testData[0].Key
	updater.AppPath = "update just this"
	updater.Fields = util.GrpcFieldsNew()
	util.GrpcFieldsSet(updater.Fields, edgeproto.AppFieldAppPath)
	_, err = api.UpdateApp(ctx, &updater)
	assert.Nil(t, err, "Update App %s", testData[0].Key.GetKeyString())

	show.Init()
	updater = testData[0]
	updater.AppPath = "update just this"
	err = api.ShowApp(ctx, &filterNone, &show)
	assert.Nil(t, err, "show App")
	show.AssertFound(t, &updater)
}
