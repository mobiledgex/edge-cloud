// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package testutil

import "google.golang.org/grpc"
import "github.com/mobiledgex/edge-cloud/edgeproto"
import "io"
import "testing"
import "context"
import "time"
import "github.com/stretchr/testify/require"
import "github.com/mobiledgex/edge-cloud/log"
import "github.com/mobiledgex/edge-cloud/cli"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type ShowApp struct {
	Data map[string]edgeproto.App
	grpc.ServerStream
	Ctx context.Context
}

func (x *ShowApp) Init() {
	x.Data = make(map[string]edgeproto.App)
}

func (x *ShowApp) Send(m *edgeproto.App) error {
	x.Data[m.GetKey().GetKeyString()] = *m
	return nil
}

func (x *ShowApp) Context() context.Context {
	return x.Ctx
}

var AppShowExtraCount = 0

func (x *ShowApp) ReadStream(stream edgeproto.AppApi_ShowAppClient, err error) {
	x.Data = make(map[string]edgeproto.App)
	if err != nil {
		return
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			break
		}
		x.Data[obj.GetKey().GetKeyString()] = *obj
	}
}

func (x *ShowApp) CheckFound(obj *edgeproto.App) bool {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	return found
}

func (x *ShowApp) AssertFound(t *testing.T, obj *edgeproto.App) {
	check, found := x.Data[obj.GetKey().GetKeyString()]
	require.True(t, found, "find App %s", obj.GetKey().GetKeyString())
	if found && !check.Matches(obj, edgeproto.MatchIgnoreBackend(), edgeproto.MatchSortArrayedKeys()) {
		require.Equal(t, *obj, check, "App are equal")
	}
	if found {
		// remove in case there are dups in the list, so the
		// same object cannot be used again
		delete(x.Data, obj.GetKey().GetKeyString())
	}
}

func (x *ShowApp) AssertNotFound(t *testing.T, obj *edgeproto.App) {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	require.False(t, found, "do not find App %s", obj.GetKey().GetKeyString())
}

func WaitAssertFoundApp(t *testing.T, api edgeproto.AppApiClient, obj *edgeproto.App, count int, retry time.Duration) {
	show := ShowApp{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowApp(ctx, obj)
		show.ReadStream(stream, err)
		cancel()
		if show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertFound(t, obj)
}

func WaitAssertNotFoundApp(t *testing.T, api edgeproto.AppApiClient, obj *edgeproto.App, count int, retry time.Duration) {
	show := ShowApp{}
	filterNone := edgeproto.App{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowApp(ctx, &filterNone)
		show.ReadStream(stream, err)
		cancel()
		if !show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertNotFound(t, obj)
}

// Wrap the api with a common interface
type AppCommonApi struct {
	internal_api edgeproto.AppApiServer
	client_api   edgeproto.AppApiClient
}

func (x *AppCommonApi) CreateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	copy := &edgeproto.App{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.CreateApp(ctx, copy)
	} else {
		return x.client_api.CreateApp(ctx, copy)
	}
}

func (x *AppCommonApi) DeleteApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	copy := &edgeproto.App{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.DeleteApp(ctx, copy)
	} else {
		return x.client_api.DeleteApp(ctx, copy)
	}
}

func (x *AppCommonApi) UpdateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	copy := &edgeproto.App{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.UpdateApp(ctx, copy)
	} else {
		return x.client_api.UpdateApp(ctx, copy)
	}
}

func (x *AppCommonApi) ShowApp(ctx context.Context, filter *edgeproto.App, showData *ShowApp) error {
	if x.internal_api != nil {
		showData.Ctx = ctx
		return x.internal_api.ShowApp(filter, showData)
	} else {
		stream, err := x.client_api.ShowApp(ctx, filter)
		showData.ReadStream(stream, err)
		return err
	}
}

func NewInternalAppApi(api edgeproto.AppApiServer) *AppCommonApi {
	apiWrap := AppCommonApi{}
	apiWrap.internal_api = api
	return &apiWrap
}

func NewClientAppApi(api edgeproto.AppApiClient) *AppCommonApi {
	apiWrap := AppCommonApi{}
	apiWrap.client_api = api
	return &apiWrap
}

func InternalAppTest(t *testing.T, test string, api edgeproto.AppApiServer, testData []edgeproto.App) {
	span := log.StartSpan(log.DebugLevelApi, "InternalAppTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicAppCudTest(t, ctx, NewInternalAppApi(api), testData)
	case "show":
		basicAppShowTest(t, ctx, NewInternalAppApi(api), testData)
	}
}

func ClientAppTest(t *testing.T, test string, api edgeproto.AppApiClient, testData []edgeproto.App) {
	span := log.StartSpan(log.DebugLevelApi, "ClientAppTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicAppCudTest(t, ctx, NewClientAppApi(api), testData)
	case "show":
		basicAppShowTest(t, ctx, NewClientAppApi(api), testData)
	}
}

func basicAppShowTest(t *testing.T, ctx context.Context, api *AppCommonApi, testData []edgeproto.App) {
	var err error

	show := ShowApp{}
	show.Init()
	filterNone := edgeproto.App{}
	err = api.ShowApp(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)+AppShowExtraCount, len(show.Data), "Show count")
	for _, obj := range testData {
		show.AssertFound(t, &obj)
	}
}

func GetApp(t *testing.T, ctx context.Context, api *AppCommonApi, key *edgeproto.AppKey, out *edgeproto.App) bool {
	var err error

	show := ShowApp{}
	show.Init()
	filter := edgeproto.App{}
	filter.SetKey(key)
	err = api.ShowApp(ctx, &filter, &show)
	require.Nil(t, err, "show data")
	obj, found := show.Data[key.GetKeyString()]
	if found {
		*out = obj
	}
	return found
}

func basicAppCudTest(t *testing.T, ctx context.Context, api *AppCommonApi, testData []edgeproto.App) {
	var err error

	if len(testData) < 3 {
		require.True(t, false, "Need at least 3 test data objects")
		return
	}

	// test create
	CreateAppData(t, ctx, api, testData)

	// test duplicate Create - should fail
	_, err = api.CreateApp(ctx, &testData[0])
	require.NotNil(t, err, "Create duplicate App")

	// test show all items
	basicAppShowTest(t, ctx, api, testData)

	// test Delete
	_, err = api.DeleteApp(ctx, &testData[0])
	require.Nil(t, err, "Delete App %s", testData[0].GetKey().GetKeyString())
	show := ShowApp{}
	show.Init()
	filterNone := edgeproto.App{}
	err = api.ShowApp(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)-1+AppShowExtraCount, len(show.Data), "Show count")
	show.AssertNotFound(t, &testData[0])
	// test update of missing object
	_, err = api.UpdateApp(ctx, &testData[0])
	require.NotNil(t, err, "Update missing object")
	// Create it back
	_, err = api.CreateApp(ctx, &testData[0])
	require.Nil(t, err, "Create App %s", testData[0].GetKey().GetKeyString())

	// test invalid keys
	bad := edgeproto.App{}
	_, err = api.CreateApp(ctx, &bad)
	require.NotNil(t, err, "Create App with no key info")

}

func InternalAppCreate(t *testing.T, api edgeproto.AppApiServer, testData []edgeproto.App) {
	span := log.StartSpan(log.DebugLevelApi, "InternalAppCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateAppData(t, ctx, NewInternalAppApi(api), testData)
}

func ClientAppCreate(t *testing.T, api edgeproto.AppApiClient, testData []edgeproto.App) {
	span := log.StartSpan(log.DebugLevelApi, "ClientAppCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateAppData(t, ctx, NewClientAppApi(api), testData)
}

func CreateAppData(t *testing.T, ctx context.Context, api *AppCommonApi, testData []edgeproto.App) {
	var err error

	for _, obj := range testData {
		_, err = api.CreateApp(ctx, &obj)
		require.Nil(t, err, "Create App %s", obj.GetKey().GetKeyString())
	}
}

func FindAppData(key *edgeproto.AppKey, testData []edgeproto.App) (*edgeproto.App, bool) {
	for ii, _ := range testData {
		if testData[ii].GetKey().Matches(key) {
			return &testData[ii], true
		}
	}
	return nil, false
}

func RunAppApi(conn *grpc.ClientConn, ctx context.Context, data *[]edgeproto.App, dataMap []map[string]interface{}, mode string) error {
	var err error
	appApi := edgeproto.NewAppApiClient(conn)
	for ii, obj := range *data {
		log.DebugLog(log.DebugLevelApi, "API %v for App: %v", mode, obj.Key)
		switch mode {
		case "update":
			obj.Fields = cli.GetSpecifiedFields(dataMap[ii], &obj, cli.YamlNamespace)
			_, err = appApi.UpdateApp(ctx, &obj)
		case "create":
			_, err = appApi.CreateApp(ctx, &obj)
		case "delete":
			_, err = appApi.DeleteApp(ctx, &obj)
		default:
			log.DebugLog(log.DebugLevelApi, "Unsupported API %v for App: %v", mode, obj.Key)
			return nil
		}
		err = ignoreExpectedErrors(mode, &obj.Key, err)
		if err != nil {
			return fmt.Errorf("API %s failed for %v -- err %v", mode, obj.Key, err)
		}
	}
	return nil
}

func (s *DummyServer) CreateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AppCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) DeleteApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AppCache.Delete(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) UpdateApp(ctx context.Context, in *edgeproto.App) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.AppCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowApp(in *edgeproto.App, server edgeproto.AppApi_ShowAppServer) error {
	var err error
	obj := &edgeproto.App{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.App{})
		}
	}
	err = s.AppCache.Show(in, func(obj *edgeproto.App) error {
		err := server.Send(obj)
		return err
	})
	return err
}
