// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ratelimit.proto

package testutil

import (
	"context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/cli"
	"github.com/mobiledgex/edge-cloud/edgectl/wrapper"
	"github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/log"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT
type RateLimitSettingsDataOut struct {
	Settings []edgeproto.Result
	Errors   []Err
}

// used to intersperse other creates/deletes/checks
// note the objs value is the previous one for create,
// but the next one for delete
type RunRateLimitSettingsDataApiCallback func(objs string)

func RunRateLimitSettingsDataApis(run *Run, in *edgeproto.RateLimitSettingsData, inMap map[string]interface{}, out *RateLimitSettingsDataOut, apicb RunRateLimitSettingsDataApiCallback) {
	apicb("")
	run.RateLimitSettingsApi(&in.Settings, inMap["settings"], &out.Settings)
	apicb("settings")
	out.Errors = run.Errs
}

func RunRateLimitSettingsDataReverseApis(run *Run, in *edgeproto.RateLimitSettingsData, inMap map[string]interface{}, out *RateLimitSettingsDataOut, apicb RunRateLimitSettingsDataApiCallback) {
	apicb("settings")
	run.RateLimitSettingsApi(&in.Settings, inMap["settings"], &out.Settings)
	apicb("")
	out.Errors = run.Errs
}

func RunRateLimitSettingsDataShowApis(run *Run, in *edgeproto.RateLimitSettingsData, out *edgeproto.RateLimitSettingsData) {
	run.RateLimitSettingsApi(&in.Settings, nil, &out.Settings)
}

func (r *Run) RateLimitSettingsApi(data *[]edgeproto.RateLimitSettings, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for RateLimitSettings", "mode", r.Mode)
	if r.Mode == "show" {
		obj := &edgeproto.RateLimitSettings{}
		out, err := r.client.ShowRateLimitSettings(r.ctx, obj)
		if err != nil {
			r.logErr("RateLimitSettingsApi", err)
		} else {
			outp, ok := dataOut.(*[]edgeproto.RateLimitSettings)
			if !ok {
				panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.RateLimitSettings, but was %T", dataOut))
			}
			*outp = append(*outp, out...)
		}
		return
	}
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "create":
			out, err := r.client.CreateRateLimitSettings(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("RateLimitSettingsApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "update":
			// set specified fields
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				log.DebugLog(log.DebugLevelApi, "bad dataMap for RateLimitSettings", "err", err)
				*r.Rc = false
				return
			}
			obj.Fields = cli.GetSpecifiedFields(objMap, obj, cli.YamlNamespace)

			out, err := r.client.UpdateRateLimitSettings(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("RateLimitSettingsApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "delete":
			out, err := r.client.DeleteRateLimitSettings(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("RateLimitSettingsApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "reset":
			out, err := r.client.ResetRateLimitSettings(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("RateLimitSettingsApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "showfiltered":
			out, err := r.client.ShowRateLimitSettings(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("RateLimitSettingsApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.RateLimitSettings)
				if !ok {
					panic(fmt.Sprintf("RunRateLimitSettingsApi expected dataOut type *[]edgeproto.RateLimitSettings, but was %T", dataOut))
				}
				*outp = append(*outp, out...)
			}
		}
	}
}

func (s *DummyServer) CreateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.RateLimitSettingsCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) UpdateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.RateLimitSettingsCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) DeleteRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.RateLimitSettingsCache.Delete(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ResetRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowRateLimitSettings(in *edgeproto.RateLimitSettings, server edgeproto.RateLimitSettingsApi_ShowRateLimitSettingsServer) error {
	var err error
	obj := &edgeproto.RateLimitSettings{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.RateLimitSettings{})
		}
	}
	err = s.RateLimitSettingsCache.Show(in, func(obj *edgeproto.RateLimitSettings) error {
		err := server.Send(obj)
		return err
	})
	return err
}

func (s *ApiClient) CreateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	api := edgeproto.NewRateLimitSettingsApiClient(s.Conn)
	return api.CreateRateLimitSettings(ctx, in)
}

func (s *CliClient) CreateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "CreateRateLimitSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) UpdateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	api := edgeproto.NewRateLimitSettingsApiClient(s.Conn)
	return api.UpdateRateLimitSettings(ctx, in)
}

func (s *CliClient) UpdateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "UpdateRateLimitSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) DeleteRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	api := edgeproto.NewRateLimitSettingsApiClient(s.Conn)
	return api.DeleteRateLimitSettings(ctx, in)
}

func (s *CliClient) DeleteRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "DeleteRateLimitSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) ResetRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	api := edgeproto.NewRateLimitSettingsApiClient(s.Conn)
	return api.ResetRateLimitSettings(ctx, in)
}

func (s *CliClient) ResetRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "ResetRateLimitSettings")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type RateLimitSettingsStream interface {
	Recv() (*edgeproto.RateLimitSettings, error)
}

func RateLimitSettingsReadStream(stream RateLimitSettingsStream) ([]edgeproto.RateLimitSettings, error) {
	output := []edgeproto.RateLimitSettings{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read RateLimitSettings stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) ([]edgeproto.RateLimitSettings, error) {
	api := edgeproto.NewRateLimitSettingsApiClient(s.Conn)
	stream, err := api.ShowRateLimitSettings(ctx, in)
	if err != nil {
		return nil, err
	}
	return RateLimitSettingsReadStream(stream)
}

func (s *CliClient) ShowRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) ([]edgeproto.RateLimitSettings, error) {
	output := []edgeproto.RateLimitSettings{}
	args := append(s.BaseArgs, "controller", "ShowRateLimitSettings")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type RateLimitSettingsApiClient interface {
	CreateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error)
	UpdateRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error)
	DeleteRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error)
	ResetRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) (*edgeproto.Result, error)
	ShowRateLimitSettings(ctx context.Context, in *edgeproto.RateLimitSettings) ([]edgeproto.RateLimitSettings, error)
}
