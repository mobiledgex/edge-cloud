// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: developer.proto

package testutil

import "google.golang.org/grpc"
import "github.com/mobiledgex/edge-cloud/edgeproto"
import "io"
import "testing"
import "context"
import "time"
import "github.com/stretchr/testify/require"
import "github.com/mobiledgex/edge-cloud/log"
import "github.com/mobiledgex/edge-cloud/cli"
import "github.com/mobiledgex/edge-cloud/edgectl/wrapper"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

type ShowDeveloper struct {
	Data map[string]edgeproto.Developer
	grpc.ServerStream
	Ctx context.Context
}

func (x *ShowDeveloper) Init() {
	x.Data = make(map[string]edgeproto.Developer)
}

func (x *ShowDeveloper) Send(m *edgeproto.Developer) error {
	x.Data[m.GetKey().GetKeyString()] = *m
	return nil
}

func (x *ShowDeveloper) Context() context.Context {
	return x.Ctx
}

var DeveloperShowExtraCount = 0

func (x *ShowDeveloper) ReadStream(stream edgeproto.DeveloperApi_ShowDeveloperClient, err error) {
	x.Data = make(map[string]edgeproto.Developer)
	if err != nil {
		return
	}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			break
		}
		x.Data[obj.GetKey().GetKeyString()] = *obj
	}
}

func (x *ShowDeveloper) CheckFound(obj *edgeproto.Developer) bool {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	return found
}

func (x *ShowDeveloper) AssertFound(t *testing.T, obj *edgeproto.Developer) {
	check, found := x.Data[obj.GetKey().GetKeyString()]
	require.True(t, found, "find Developer %s", obj.GetKey().GetKeyString())
	if found && !check.Matches(obj, edgeproto.MatchIgnoreBackend(), edgeproto.MatchSortArrayedKeys()) {
		require.Equal(t, *obj, check, "Developer are equal")
	}
	if found {
		// remove in case there are dups in the list, so the
		// same object cannot be used again
		delete(x.Data, obj.GetKey().GetKeyString())
	}
}

func (x *ShowDeveloper) AssertNotFound(t *testing.T, obj *edgeproto.Developer) {
	_, found := x.Data[obj.GetKey().GetKeyString()]
	require.False(t, found, "do not find Developer %s", obj.GetKey().GetKeyString())
}

func WaitAssertFoundDeveloper(t *testing.T, api edgeproto.DeveloperApiClient, obj *edgeproto.Developer, count int, retry time.Duration) {
	show := ShowDeveloper{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowDeveloper(ctx, obj)
		show.ReadStream(stream, err)
		cancel()
		if show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertFound(t, obj)
}

func WaitAssertNotFoundDeveloper(t *testing.T, api edgeproto.DeveloperApiClient, obj *edgeproto.Developer, count int, retry time.Duration) {
	show := ShowDeveloper{}
	filterNone := edgeproto.Developer{}
	for ii := 0; ii < count; ii++ {
		ctx, cancel := context.WithTimeout(context.Background(), retry)
		stream, err := api.ShowDeveloper(ctx, &filterNone)
		show.ReadStream(stream, err)
		cancel()
		if !show.CheckFound(obj) {
			break
		}
		time.Sleep(retry)
	}
	show.AssertNotFound(t, obj)
}

// Wrap the api with a common interface
type DeveloperCommonApi struct {
	internal_api edgeproto.DeveloperApiServer
	client_api   edgeproto.DeveloperApiClient
}

func (x *DeveloperCommonApi) CreateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	copy := &edgeproto.Developer{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.CreateDeveloper(ctx, copy)
	} else {
		return x.client_api.CreateDeveloper(ctx, copy)
	}
}

func (x *DeveloperCommonApi) DeleteDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	copy := &edgeproto.Developer{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.DeleteDeveloper(ctx, copy)
	} else {
		return x.client_api.DeleteDeveloper(ctx, copy)
	}
}

func (x *DeveloperCommonApi) UpdateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	copy := &edgeproto.Developer{}
	*copy = *in
	if x.internal_api != nil {
		return x.internal_api.UpdateDeveloper(ctx, copy)
	} else {
		return x.client_api.UpdateDeveloper(ctx, copy)
	}
}

func (x *DeveloperCommonApi) ShowDeveloper(ctx context.Context, filter *edgeproto.Developer, showData *ShowDeveloper) error {
	if x.internal_api != nil {
		showData.Ctx = ctx
		return x.internal_api.ShowDeveloper(filter, showData)
	} else {
		stream, err := x.client_api.ShowDeveloper(ctx, filter)
		showData.ReadStream(stream, err)
		return err
	}
}

func NewInternalDeveloperApi(api edgeproto.DeveloperApiServer) *DeveloperCommonApi {
	apiWrap := DeveloperCommonApi{}
	apiWrap.internal_api = api
	return &apiWrap
}

func NewClientDeveloperApi(api edgeproto.DeveloperApiClient) *DeveloperCommonApi {
	apiWrap := DeveloperCommonApi{}
	apiWrap.client_api = api
	return &apiWrap
}

func InternalDeveloperTest(t *testing.T, test string, api edgeproto.DeveloperApiServer, testData []edgeproto.Developer) {
	span := log.StartSpan(log.DebugLevelApi, "InternalDeveloperTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicDeveloperCudTest(t, ctx, NewInternalDeveloperApi(api), testData)
	case "show":
		basicDeveloperShowTest(t, ctx, NewInternalDeveloperApi(api), testData)
	}
}

func ClientDeveloperTest(t *testing.T, test string, api edgeproto.DeveloperApiClient, testData []edgeproto.Developer) {
	span := log.StartSpan(log.DebugLevelApi, "ClientDeveloperTest")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	switch test {
	case "cud":
		basicDeveloperCudTest(t, ctx, NewClientDeveloperApi(api), testData)
	case "show":
		basicDeveloperShowTest(t, ctx, NewClientDeveloperApi(api), testData)
	}
}

func basicDeveloperShowTest(t *testing.T, ctx context.Context, api *DeveloperCommonApi, testData []edgeproto.Developer) {
	var err error

	show := ShowDeveloper{}
	show.Init()
	filterNone := edgeproto.Developer{}
	err = api.ShowDeveloper(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)+DeveloperShowExtraCount, len(show.Data), "Show count")
	for _, obj := range testData {
		show.AssertFound(t, &obj)
	}
}

func GetDeveloper(t *testing.T, ctx context.Context, api *DeveloperCommonApi, key *edgeproto.DeveloperKey, out *edgeproto.Developer) bool {
	var err error

	show := ShowDeveloper{}
	show.Init()
	filter := edgeproto.Developer{}
	filter.SetKey(key)
	err = api.ShowDeveloper(ctx, &filter, &show)
	require.Nil(t, err, "show data")
	obj, found := show.Data[key.GetKeyString()]
	if found {
		*out = obj
	}
	return found
}

func basicDeveloperCudTest(t *testing.T, ctx context.Context, api *DeveloperCommonApi, testData []edgeproto.Developer) {
	var err error

	if len(testData) < 3 {
		require.True(t, false, "Need at least 3 test data objects")
		return
	}

	// test create
	CreateDeveloperData(t, ctx, api, testData)

	// test duplicate Create - should fail
	_, err = api.CreateDeveloper(ctx, &testData[0])
	require.NotNil(t, err, "Create duplicate Developer")

	// test show all items
	basicDeveloperShowTest(t, ctx, api, testData)

	// test Delete
	_, err = api.DeleteDeveloper(ctx, &testData[0])
	require.Nil(t, err, "Delete Developer %s", testData[0].GetKey().GetKeyString())
	show := ShowDeveloper{}
	show.Init()
	filterNone := edgeproto.Developer{}
	err = api.ShowDeveloper(ctx, &filterNone, &show)
	require.Nil(t, err, "show data")
	require.Equal(t, len(testData)-1+DeveloperShowExtraCount, len(show.Data), "Show count")
	show.AssertNotFound(t, &testData[0])
	// test update of missing object
	_, err = api.UpdateDeveloper(ctx, &testData[0])
	require.NotNil(t, err, "Update missing object")
	// Create it back
	_, err = api.CreateDeveloper(ctx, &testData[0])
	require.Nil(t, err, "Create Developer %s", testData[0].GetKey().GetKeyString())

	// test invalid keys
	bad := edgeproto.Developer{}
	_, err = api.CreateDeveloper(ctx, &bad)
	require.NotNil(t, err, "Create Developer with no key info")

}

func InternalDeveloperCreate(t *testing.T, api edgeproto.DeveloperApiServer, testData []edgeproto.Developer) {
	span := log.StartSpan(log.DebugLevelApi, "InternalDeveloperCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateDeveloperData(t, ctx, NewInternalDeveloperApi(api), testData)
}

func ClientDeveloperCreate(t *testing.T, api edgeproto.DeveloperApiClient, testData []edgeproto.Developer) {
	span := log.StartSpan(log.DebugLevelApi, "ClientDeveloperCreate")
	defer span.Finish()
	ctx := log.ContextWithSpan(context.Background(), span)

	CreateDeveloperData(t, ctx, NewClientDeveloperApi(api), testData)
}

func CreateDeveloperData(t *testing.T, ctx context.Context, api *DeveloperCommonApi, testData []edgeproto.Developer) {
	var err error

	for _, obj := range testData {
		_, err = api.CreateDeveloper(ctx, &obj)
		require.Nil(t, err, "Create Developer %s", obj.GetKey().GetKeyString())
	}
}

func FindDeveloperData(key *edgeproto.DeveloperKey, testData []edgeproto.Developer) (*edgeproto.Developer, bool) {
	for ii, _ := range testData {
		if testData[ii].GetKey().Matches(key) {
			return &testData[ii], true
		}
	}
	return nil, false
}

func (r *Run) DeveloperApi(data *[]edgeproto.Developer, dataMap interface{}, dataOut interface{}) {
	log.DebugLog(log.DebugLevelApi, "API for Developer", "mode", r.Mode)
	if r.Mode == "show" {
		obj := &edgeproto.Developer{}
		out, err := r.client.ShowDeveloper(r.ctx, obj)
		if err != nil {
			r.logErr("DeveloperApi", err)
		} else {
			outp, ok := dataOut.(*[]edgeproto.Developer)
			if !ok {
				panic(fmt.Sprintf("RunDeveloperApi expected dataOut type *[]edgeproto.Developer, but was %T", dataOut))
			}
			*outp = append(*outp, out...)
		}
		return
	}
	for ii, objD := range *data {
		obj := &objD
		switch r.Mode {
		case "create":
			out, err := r.client.CreateDeveloper(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("DeveloperApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunDeveloperApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "delete":
			out, err := r.client.DeleteDeveloper(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("DeveloperApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunDeveloperApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "update":
			// set specified fields
			objMap, err := cli.GetGenericObjFromList(dataMap, ii)
			if err != nil {
				log.DebugLog(log.DebugLevelApi, "bad dataMap for Developer", "err", err)
				*r.Rc = false
				return
			}
			obj.Fields = cli.GetSpecifiedFields(objMap, obj, cli.YamlNamespace)

			out, err := r.client.UpdateDeveloper(r.ctx, obj)
			if err != nil {
				err = ignoreExpectedErrors(r.Mode, obj.GetKey(), err)
				r.logErr(fmt.Sprintf("DeveloperApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Result)
				if !ok {
					panic(fmt.Sprintf("RunDeveloperApi expected dataOut type *[]edgeproto.Result, but was %T", dataOut))
				}
				*outp = append(*outp, *out)
			}
		case "showfiltered":
			out, err := r.client.ShowDeveloper(r.ctx, obj)
			if err != nil {
				r.logErr(fmt.Sprintf("DeveloperApi[%d]", ii), err)
			} else {
				outp, ok := dataOut.(*[]edgeproto.Developer)
				if !ok {
					panic(fmt.Sprintf("RunDeveloperApi expected dataOut type *[]edgeproto.Developer, but was %T", dataOut))
				}
				*outp = append(*outp, out...)
			}
		}
	}
}

func (s *DummyServer) CreateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.DeveloperCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) DeleteDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.DeveloperCache.Delete(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) UpdateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	if s.CudNoop {
		return &edgeproto.Result{}, nil
	}
	s.DeveloperCache.Update(ctx, in, 0)
	return &edgeproto.Result{}, nil
}

func (s *DummyServer) ShowDeveloper(in *edgeproto.Developer, server edgeproto.DeveloperApi_ShowDeveloperServer) error {
	var err error
	obj := &edgeproto.Developer{}
	if obj.Matches(in, edgeproto.MatchFilter()) {
		for ii := 0; ii < s.ShowDummyCount; ii++ {
			server.Send(&edgeproto.Developer{})
		}
	}
	err = s.DeveloperCache.Show(in, func(obj *edgeproto.Developer) error {
		err := server.Send(obj)
		return err
	})
	return err
}

func (s *ApiClient) CreateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	api := edgeproto.NewDeveloperApiClient(s.Conn)
	return api.CreateDeveloper(ctx, in)
}

func (s *CliClient) CreateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "CreateDeveloper")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) DeleteDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	api := edgeproto.NewDeveloperApiClient(s.Conn)
	return api.DeleteDeveloper(ctx, in)
}

func (s *CliClient) DeleteDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "DeleteDeveloper")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

func (s *ApiClient) UpdateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	api := edgeproto.NewDeveloperApiClient(s.Conn)
	return api.UpdateDeveloper(ctx, in)
}

func (s *CliClient) UpdateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error) {
	out := edgeproto.Result{}
	args := append(s.BaseArgs, "controller", "UpdateDeveloper")
	err := wrapper.RunEdgectlObjs(args, in, &out, s.RunOps...)
	return &out, err
}

type DeveloperStream interface {
	Recv() (*edgeproto.Developer, error)
}

func DeveloperReadStream(stream DeveloperStream) ([]edgeproto.Developer, error) {
	output := []edgeproto.Developer{}
	for {
		obj, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			return output, fmt.Errorf("read Developer stream failed, %v", err)
		}
		output = append(output, *obj)
	}
	return output, nil
}

func (s *ApiClient) ShowDeveloper(ctx context.Context, in *edgeproto.Developer) ([]edgeproto.Developer, error) {
	api := edgeproto.NewDeveloperApiClient(s.Conn)
	stream, err := api.ShowDeveloper(ctx, in)
	if err != nil {
		return nil, err
	}
	return DeveloperReadStream(stream)
}

func (s *CliClient) ShowDeveloper(ctx context.Context, in *edgeproto.Developer) ([]edgeproto.Developer, error) {
	output := []edgeproto.Developer{}
	args := append(s.BaseArgs, "controller", "ShowDeveloper")
	err := wrapper.RunEdgectlObjs(args, in, &output, s.RunOps...)
	return output, err
}

type DeveloperApiClient interface {
	CreateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error)
	DeleteDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error)
	UpdateDeveloper(ctx context.Context, in *edgeproto.Developer) (*edgeproto.Result, error)
	ShowDeveloper(ctx context.Context, in *edgeproto.Developer) ([]edgeproto.Developer, error)
}
