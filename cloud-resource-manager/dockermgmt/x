- key:
    developerkey:
      name: MobiledgeX
    name: PongGameHackathonApp
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/mobiledgex/yawsps:v1.1.5
  imagetype: ImageTypeDocker
  accessports: tcp:3000
  defaultflavor:
    name: x1.medium
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: ponggamehackathonapp-tcp
      labels:
        run: ponggamehackathonapp
    spec:
      type: LoadBalancer
      ports:
      - name: tcp3000
        protocol: TCP
        port: 3000
        targetPort: 3000
      selector:
        run: ponggamehackathonapp
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ponggamehackathonapp-deployment
    spec:
      selector:
        matchLabels:
          run: ponggamehackathonapp
      replicas: 1
      template:
        metadata:
          labels:
            run: ponggamehackathonapp
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: ponggamehackathonapp
            image: registry.mobiledgex.net:5000/mobiledgex/yawsps:v1.1.5
            imagePullPolicy: Always
            ports:
            - containerPort: 3000
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Sierraware
    name: sierravmi_demo
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/sierraware/sierravmi_demo:latest
  imagetype: ImageTypeDocker
  accessports: tcp:443,tcp:4444,tcp:8100
  defaultflavor:
    name: x1.medium
  cluster:
    name: sierraware
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: sierravmi-demo-tcp
      labels:
        run: sierravmi-demo
    spec:
      type: LoadBalancer
      ports:
      - name: tcp443
        protocol: TCP
        port: 443
        targetPort: 443
      - name: tcp4444
        protocol: TCP
        port: 4444
        targetPort: 4444
      - name: tcp8100
        protocol: TCP
        port: 8100
        targetPort: 8100
      selector:
        run: sierravmi-demo
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: sierravmi-demo-deployment
    spec:
      selector:
        matchLabels:
          run: sierravmi-demo
      replicas: 1
      template:
        metadata:
          labels:
            run: sierravmi-demo
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: sierravmi-demo
            image: registry.mobiledgex.net:5000/sierraware/sierravmi_demo:latest
            imagePullPolicy: Always
            ports:
            - containerPort: 443
              protocol: TCP
            - containerPort: 4444
              protocol: TCP
            - containerPort: 8100
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Smart Mobile Labs
    name: evo
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/smartmobilelabs/evo:latest
  imagetype: ImageTypeDocker
  accessports: tcp:8080,udp:15000,udp:15001,udp:15002,udp:15003,udp:15004,udp:15005,udp:15006,udp:15007,udp:15008,udp:15009,udp:15010
  defaultflavor:
    name: x1.medium
  cluster:
    name: smartmobilelabs
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: evo-tcp
      labels:
        run: evo
    spec:
      type: LoadBalancer
      ports:
      - name: tcp8080
        protocol: TCP
        port: 8080
        targetPort: 8080
      selector:
        run: evo
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: evo-udp
      labels:
        run: evo
    spec:
      type: LoadBalancer
      ports:
      - name: udp15000
        protocol: UDP
        port: 15000
        targetPort: 15000
      - name: udp15001
        protocol: UDP
        port: 15001
        targetPort: 15001
      - name: udp15002
        protocol: UDP
        port: 15002
        targetPort: 15002
      - name: udp15003
        protocol: UDP
        port: 15003
        targetPort: 15003
      - name: udp15004
        protocol: UDP
        port: 15004
        targetPort: 15004
      - name: udp15005
        protocol: UDP
        port: 15005
        targetPort: 15005
      - name: udp15006
        protocol: UDP
        port: 15006
        targetPort: 15006
      - name: udp15007
        protocol: UDP
        port: 15007
        targetPort: 15007
      - name: udp15008
        protocol: UDP
        port: 15008
        targetPort: 15008
      - name: udp15009
        protocol: UDP
        port: 15009
        targetPort: 15009
      - name: udp15010
        protocol: UDP
        port: 15010
        targetPort: 15010
      selector:
        run: evo
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: evo-deployment
    spec:
      selector:
        matchLabels:
          run: evo
      replicas: 1
      template:
        metadata:
          labels:
            run: evo
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: evo
            image: registry.mobiledgex.net:5000/smartmobilelabs/evo:latest
            imagePullPolicy: Always
            ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 15000
              protocol: UDP
            - containerPort: 15001
              protocol: UDP
            - containerPort: 15002
              protocol: UDP
            - containerPort: 15003
              protocol: UDP
            - containerPort: 15004
              protocol: UDP
            - containerPort: 15005
              protocol: UDP
            - containerPort: 15006
              protocol: UDP
            - containerPort: 15007
              protocol: UDP
            - containerPort: 15008
              protocol: UDP
            - containerPort: 15009
              protocol: UDP
            - containerPort: 15010
              protocol: UDP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: bicinkiOrg
    name: bicTestApp2
    version: 1.0.0
  imagepath: registry.mobiledgex.net:5000/mobiledgex/simapp
  imagetype: ImageTypeDocker
  accessports: udp:12001,tcp:80,http:7777
  defaultflavor:
    name: x1.medium
  cluster:
    name: biccluster
  command: simapp -port 7777
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: bictestapp2-tcp
      labels:
        run: bictestapp2
    spec:
      type: LoadBalancer
      ports:
      - name: tcp80
        protocol: TCP
        port: 80
        targetPort: 80
      - name: http7777
        protocol: TCP
        port: 7777
        targetPort: 7777
      selector:
        run: bictestapp2
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: bictestapp2-udp
      labels:
        run: bictestapp2
    spec:
      type: LoadBalancer
      ports:
      - name: udp12001
        protocol: UDP
        port: 12001
        targetPort: 12001
      selector:
        run: bictestapp2
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bictestapp2-deployment
    spec:
      selector:
        matchLabels:
          run: bictestapp2
      replicas: 1
      template:
        metadata:
          labels:
            run: bictestapp2
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: bictestapp2
            image: registry.mobiledgex.net:5000/mobiledgex/simapp
            imagePullPolicy: Always
            ports:
            - containerPort: 12001
              protocol: UDP
            - containerPort: 80
              protocol: TCP
            - containerPort: 7777
              protocol: TCP
            command:
            - "simapp"
            - "-port"
            - "7777"
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: 1000 Realities
    name: ThousandRealitiesApp
    version: "1.0"
  imagepath: registry.mobiledgex.net:5001/1000realities/1kr_cloudslam:1.11.10.7
  imagetype: ImageTypeDocker
  accessports: udp:8888,tcp:8889,tcp:8890,tcp:8888,tcp:9000
  defaultflavor:
    name: x1.small
  cluster:
    name: mexdemo-app-cluster
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: thousandrealitiesapp-tcp
      labels:
        run: thousandrealitiesapp
    spec:
      type: LoadBalancer
      ports:
      - name: tcp8889
        protocol: TCP
        port: 8889
        targetPort: 8889
      - name: tcp8890
        protocol: TCP
        port: 8890
        targetPort: 8890
      - name: tcp8888
        protocol: TCP
        port: 8888
        targetPort: 8888
      - name: tcp9000
        protocol: TCP
        port: 9000
        targetPort: 9000
      selector:
        run: thousandrealitiesapp
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: thousandrealitiesapp-udp
      labels:
        run: thousandrealitiesapp
    spec:
      type: LoadBalancer
      ports:
      - name: udp8888
        protocol: UDP
        port: 8888
        targetPort: 8888
      selector:
        run: thousandrealitiesapp
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: thousandrealitiesapp-deployment
    spec:
      selector:
        matchLabels:
          run: thousandrealitiesapp
      replicas: 1
      template:
        metadata:
          labels:
            run: thousandrealitiesapp
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: thousandrealitiesapp
            image: registry.mobiledgex.net:5001/1000realities/1kr_cloudslam:1.11.10.7
            imagePullPolicy: Always
            ports:
            - containerPort: 8888
              protocol: UDP
            - containerPort: 8889
              protocol: TCP
            - containerPort: 8890
              protocol: TCP
            - containerPort: 8888
              protocol: TCP
            - containerPort: 9000
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: MobiledgeX
    name: MEXMetricsExporter
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/mobiledgex/metrics-exporter:latest
  imagetype: ImageTypeDocker
  defaultflavor:
    name: x1.medium
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: mexmetricsexporter-deployment
    spec:
      selector:
        matchLabels:
          run: mexmetricsexporter
      replicas: 1
      template:
        metadata:
          labels:
            run: mexmetricsexporter
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: mexmetricsexporter
            image: registry.mobiledgex.net:5000/mobiledgex/metrics-exporter:latest
            imagePullPolicy: Always
            ports:
  deploymentgenerator: kubernetes-basic
  delopt: AutoDelete
  configs:
  - kind: envVarsYaml
    config: |
      - name: MEX_INFLUXDB_ADDR
        value: monitoring-influxdb:8086
      - name: MEX_INFLUXDB_USER
        value: root
      - name: MEX_INFLUXDB_PASS
        value: root
      - name: MEX_SCRAPE_INTERVAL
        value: 15s
  - kind: envVarsYaml
    config: |
      - name: MEX_CLUSTER_NAME
        valueFrom:
          configMapKeyRef:
            name: mexcluster-info
            key: ClusterName
            optional: true
      - name: MEX_CLOUDLET_NAME
        valueFrom:
          configMapKeyRef:
            name: mexcluster-info
            key: CloudletName
            optional: true
      - name: MEX_OPERATOR_NAME
        valueFrom:
          configMapKeyRef:
            name: mexcluster-info
            key: OperatorName
            optional: true
- key:
    developerkey:
      name: Niantic
    name: neon2
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/niantic/arb-edgex:0.0.3
  imagetype: ImageTypeDocker
  accessports: tcp:5555,tcp:6660,tcp:8000,udp:6666
  defaultflavor:
    name: x1.medium
  cluster:
    name: niantic
  deployment: kubernetes
  deploymentmanifest: "apiVersion: v1\nkind: Service\nmetadata:\n  name: neon2-tcp\n
    \ labels:\n    run: neon2\nspec:\n  type: LoadBalancer\n  ports:\n  - name: tcp5555\n
    \   protocol: TCP\n    port: 5555\n  - name: tcp6660\n    protocol: TCP\n    port:
    6660\n    targetPort: 6660\n  - name: tcp8000\n    port: 8000\n    targetPort:
    8000\n  selector:\n    run: neon2\n---\napiVersion: v1\nkind: Service\nmetadata:\n
    \ name: neon2-udp\n  labels:\n    run: neon2\nspec:\n  type: LoadBalancer\n  ports:\n
    \ - name: udp6666\n    port: 6666\n    protocol: UDP\n  selector:\n    run: neon2\n---\napiVersion:
    apps/v1\nkind: Deployment\nmetadata:\n  name: neon2-deployment\nspec:\n  selector:\n
    \   matchLabels:\n      run: neon2\n  replicas: 1 \n  template:\n    metadata:\n
    \     labels:\n        run: neon2\n    spec:\n      volumes:\n      imagePullSecrets:
    \n      - name: mexregistrysecret\n      containers:\n      - name: neon2\n        image:
    registry.mobiledgex.net:5000/niantic/arb-edgex:0.0.3\n        imagePullPolicy:
    Always\n        securityContext:\n           capabilities:\n             add:\n
    \             - NET_ADMIN\n        ports:\n        - containerPort: 5555\n          protocol:
    TCP\n        - containerPort: 6660\n          protocol: TCP\n        - containerPort:
    8000\n          protocol: TCP\n        - containerPort: 6666\n          protocol:
    UDP\n"
  androidpackagename: com.nianticlabs.mwc.neon2
  permitsplatformapps: true
- key:
    developerkey:
      name: bicinkiOrg
    name: bicTestApp
    version: 1.0.0
  imagepath: registry.mobiledgex.net:5000/mobiledgex/simapp
  imagetype: ImageTypeDocker
  accessports: udp:12001,tcp:80,http:7777
  defaultflavor:
    name: x1.medium
  cluster:
    name: biccluster
  command: simapp -port 7777
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: bictestapp-tcp
      labels:
        run: bictestapp
    spec:
      type: LoadBalancer
      ports:
      - name: tcp80
        protocol: TCP
        port: 80
        targetPort: 80
      - name: http7777
        protocol: TCP
        port: 7777
        targetPort: 7777
      selector:
        run: bictestapp
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: bictestapp-udp
      labels:
        run: bictestapp
    spec:
      type: LoadBalancer
      ports:
      - name: udp12001
        protocol: UDP
        port: 12001
        targetPort: 12001
      selector:
        run: bictestapp
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bictestapp-deployment
    spec:
      selector:
        matchLabels:
          run: bictestapp
      replicas: 1
      template:
        metadata:
          labels:
            run: bictestapp
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: bictestapp
            image: registry.mobiledgex.net:5000/mobiledgex/simapp
            imagePullPolicy: Always
            ports:
            - containerPort: 12001
              protocol: UDP
            - containerPort: 80
              protocol: TCP
            - containerPort: 7777
              protocol: TCP
            command:
            - "simapp"
            - "-port"
            - "7777"
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Macrometa
    name: C8Edge
    version: "0.11"
  imagepath: registry.mobiledgex.net:5000/Macrometa/C8Edge:0.11
  imagetype: ImageTypeDocker
  accessports: tcp:8080,tcp:7946,tcp:7473,tcp:7947,tcp:8086
  defaultflavor:
    name: x1.medium
  cluster:
    name: macrometa
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: c8edge-tcp
      labels:
        run: c8edge
    spec:
      type: LoadBalancer
      ports:
      - name: tcp8080
        protocol: TCP
        port: 8080
        targetPort: 8080
      - name: tcp7946
        protocol: TCP
        port: 7946
        targetPort: 7946
      - name: tcp7473
        protocol: TCP
        port: 7473
        targetPort: 7473
      - name: tcp7947
        protocol: TCP
        port: 7947
        targetPort: 7947
      - name: tcp8086
        protocol: TCP
        port: 8086
        targetPort: 8086
      selector:
        run: c8edge
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: c8edge-deployment
    spec:
      selector:
        matchLabels:
          run: c8edge
      replicas: 1
      template:
        metadata:
          labels:
            run: c8edge
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: c8edge
            image: registry.mobiledgex.net:5000/Macrometa/C8Edge:0.11
            imagePullPolicy: Always
            ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 7946
              protocol: TCP
            - containerPort: 7473
              protocol: TCP
            - containerPort: 7947
              protocol: TCP
            - containerPort: 8086
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: MobiledgeX
    name: Face Detection Demo
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/mobiledgex/facedetection
  imagetype: ImageTypeDocker
  accessports: tcp:8008
  defaultflavor:
    name: m4.large
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: facedetectiondemo-tcp
      labels:
        run: facedetectiondemo
    spec:
      type: LoadBalancer
      ports:
      - name: tcp8008
        protocol: TCP
        port: 8008
        targetPort: 8008
      selector:
        run: facedetectiondemo
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: facedetectiondemo-deployment
    spec:
      selector:
        matchLabels:
          run: facedetectiondemo
      replicas: 1
      template:
        metadata:
          labels:
            run: facedetectiondemo
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: facedetectiondemo
            image: registry.mobiledgex.net:5000/mobiledgex/facedetection
            imagePullPolicy: Always
            ports:
            - containerPort: 8008
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: MobiledgeX
    name: IPTest
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/mobiledgex/iptest
  imagetype: ImageTypeDocker
  accessports: udp:4444
  defaultflavor:
    name: x1.medium
  deployment: kubernetes
  deploymentmanifest: "apiVersion: v1\nkind: Service\nmetadata:\n  name: iptest-udp\n
    \ labels:\n    run: iptest\nspec:\n  externalTrafficPolicy: Local\n  type: LoadBalancer\n
    \ ports:\n  - port: 4444\n    targetPort: 4444\n    protocol: UDP\n    name: udptest\n
    \ selector:\n    run: iptest\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n
    \ name: iptest-deployment\nspec:\n  selector:\n    matchLabels:\n      run: iptest\n
    \ replicas: 1\n  template:\n    metadata:\n      labels:\n        run: iptest\n
    \   spec:\n      volumes:\n      imagePullSecrets: \n      - name: mexregistrysecret\n
    \     containers:\n      - name: iptest\n        image: registry.mobiledgex.net:5000/mobiledgex/iptest\n
    \       imagePullPolicy: Always\n        ports:\n        - containerPort: 4444\n
    \       command:\n         - \"iptest\"\n         - \"--mode\"\n         - \"server\"\n"
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: MobiledgeX
    name: MobiledgeX SDK Demo
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/mobiledgex/simapp
  imagetype: ImageTypeDocker
  accessports: tcp:7777
  defaultflavor:
    name: m4.large
  deployment: kubernetes
  deploymentmanifest: "apiVersion: v1\nkind: Service\nmetadata:\n  name: mobiledgexsdkdemo-tcp\n
    \ labels:\n    run: mobiledgexsdkdemo\nspec:\n  type: LoadBalancer\n  ports:\n
    \ - port: 7777\n    targetPort: 7777\n    protocol: TCP\n    name: http\n  selector:\n
    \   run: mobiledgexsdkdemo\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n
    \ name: mobiledgexsdkdemo-deployment\nspec:\n  selector:\n    matchLabels:\n      run:
    mobiledgexsdkdemo\n  replicas: 2\n  template:\n    metadata:\n      labels:\n
    \       run: mobiledgexsdkdemo\n    spec:\n      volumes:\n      imagePullSecrets:
    \n      - name: mexregistrysecret\n      containers:\n      - name: mobiledgexsdkdemo\n
    \       image: registry.mobiledgex.net:5000/mobiledgex/simapp\n        imagePullPolicy:
    Always\n        ports:\n        - containerPort: 7777\n        command:\n         -
    \"simapp\"\n         - \"-port\"\n         - \"7777\"\n"
  androidpackagename: com.mobiledgex.sdkdemo
  permitsplatformapps: true
- key:
    developerkey:
      name: Dimenco
    name: sredge
    version: "0.1"
  imagepath: registry.mobiledgex.net:5000/dimenco/sredge:alpha
  imagetype: ImageTypeDocker
  accessports: tcp:27015
  defaultflavor:
    name: x1.medium
  cluster:
    name: dimenco
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: sredge-tcp
      labels:
        run: sredge
    spec:
      type: LoadBalancer
      ports:
      - name: tcp27015
        protocol: TCP
        port: 27015
        targetPort: 27015
      selector:
        run: sredge
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: sredge-deployment
    spec:
      selector:
        matchLabels:
          run: sredge
      replicas: 1
      template:
        metadata:
          labels:
            run: sredge
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: sredge
            image: registry.mobiledgex.net:5000/dimenco/sredge:alpha
            imagePullPolicy: Always
            ports:
            - containerPort: 27015
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Edgemesh
    name: Supernode
    version: "0.11"
  imagepath: registry.mobiledgex.net:5000/Edgemesh/Supernode:0.11
  imagetype: ImageTypeDocker
  accessports: tcp:50523
  defaultflavor:
    name: x1.medium
  cluster:
    name: edgemesh
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: supernode-tcp
      labels:
        run: supernode
    spec:
      type: LoadBalancer
      ports:
      - name: tcp50523
        protocol: TCP
        port: 50523
        targetPort: 50523
      selector:
        run: supernode
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: supernode-deployment
    spec:
      selector:
        matchLabels:
          run: supernode
      replicas: 1
      template:
        metadata:
          labels:
            run: supernode
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: supernode
            image: registry.mobiledgex.net:5000/Edgemesh/Supernode:0.11
            imagePullPolicy: Always
            ports:
            - containerPort: 50523
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: EmptyMatchEngineApp
    name: EmptyMatchEngineApp
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/EmptyMatchEngineApp/EmptyMatchEngineApp:1.0
  imagetype: ImageTypeDocker
  defaultflavor:
    name: x1.small
  cluster:
    name: mexdemo-app-cluster
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: emptymatchengineapp-deployment
    spec:
      selector:
        matchLabels:
          run: emptymatchengineapp
      replicas: 1
      template:
        metadata:
          labels:
            run: emptymatchengineapp
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: emptymatchengineapp
            image: registry.mobiledgex.net:5000/EmptyMatchEngineApp/EmptyMatchEngineApp:1.0
            imagePullPolicy: Always
            ports:
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Immersiv
    name: pitch-recognition
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/immersiv/pitch-recognition
  imagetype: ImageTypeDocker
  accessports: tcp:3000
  defaultflavor:
    name: x1.medium
  cluster:
    name: immersiv
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: pitch-recognition-tcp
      labels:
        run: pitch-recognition
    spec:
      type: LoadBalancer
      ports:
      - name: tcp3000
        protocol: TCP
        port: 3000
        targetPort: 3000
      selector:
        run: pitch-recognition
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: pitch-recognition-deployment
    spec:
      selector:
        matchLabels:
          run: pitch-recognition
      replicas: 1
      template:
        metadata:
          labels:
            run: pitch-recognition
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: pitch-recognition
            image: registry.mobiledgex.net:5000/immersiv/pitch-recognition
            imagePullPolicy: Always
            ports:
            - containerPort: 3000
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Samsung
    name: SamsungEnablingLayer
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/Samsung/SamsungEnablingLayer:1.0
  imagetype: ImageTypeDocker
  defaultflavor:
    name: x1.medium
  cluster:
    name: mexdemo-app-cluster
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: samsungenablinglayer-deployment
    spec:
      selector:
        matchLabels:
          run: samsungenablinglayer
      replicas: 1
      template:
        metadata:
          labels:
            run: samsungenablinglayer
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: samsungenablinglayer
            image: registry.mobiledgex.net:5000/Samsung/SamsungEnablingLayer:1.0
            imagePullPolicy: Always
            ports:
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Visualix
    name: bruno
    version: "0.1"
  imagepath: registry.mobiledgex.net:5000/visualix/bruno:0.1
  imagetype: ImageTypeDocker
  accessports: tcp:5791,tcp:5792
  defaultflavor:
    name: x1.medium
  cluster:
    name: visualix
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: bruno-tcp
      labels:
        run: bruno
    spec:
      type: LoadBalancer
      ports:
      - name: tcp5791
        protocol: TCP
        port: 5791
        targetPort: 5791
      - name: tcp5792
        protocol: TCP
        port: 5792
        targetPort: 5792
      selector:
        run: bruno
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bruno-deployment
    spec:
      selector:
        matchLabels:
          run: bruno
      replicas: 1
      template:
        metadata:
          labels:
            run: bruno
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: bruno
            image: registry.mobiledgex.net:5000/visualix/bruno:0.1
            imagePullPolicy: Always
            ports:
            - containerPort: 5791
              protocol: TCP
            - containerPort: 5792
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: HTC
    name: htc-edge-test
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/htc/htc-edge-test
  imagetype: ImageTypeDocker
  accessports: tcp:3002
  defaultflavor:
    name: x1.medium
  cluster:
    name: htc
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: htc-edge-test-tcp
      labels:
        run: htc-edge-test
    spec:
      type: LoadBalancer
      ports:
      - name: tcp3002
        protocol: TCP
        port: 3002
        targetPort: 3002
      selector:
        run: htc-edge-test
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: htc-edge-test-deployment
    spec:
      selector:
        matchLabels:
          run: htc-edge-test
      replicas: 1
      template:
        metadata:
          labels:
            run: htc-edge-test
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: htc-edge-test
            image: registry.mobiledgex.net:5000/htc/htc-edge-test
            imagePullPolicy: Always
            ports:
            - containerPort: 3002
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Husarion
    name: HusarionApp
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/husarion-app1
  imagetype: ImageTypeDocker
  accessports: tcp:4700,udp:5582
  defaultflavor:
    name: x1.medium
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: husarionapp-tcp
      labels:
        run: husarionapp
    spec:
      type: LoadBalancer
      ports:
      - name: tcp4700
        protocol: TCP
        port: 4700
        targetPort: 4700
      selector:
        run: husarionapp
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: husarionapp-udp
      labels:
        run: husarionapp
    spec:
      type: LoadBalancer
      ports:
      - name: udp5582
        protocol: UDP
        port: 5582
        targetPort: 5582
      selector:
        run: husarionapp
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: husarionapp-deployment
    spec:
      selector:
        matchLabels:
          run: husarionapp
      replicas: 1
      template:
        metadata:
          labels:
            run: husarionapp
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: husarionapp
            image: registry.mobiledgex.net:5000/husarion-app1
            imagePullPolicy: Always
            ports:
            - containerPort: 4700
              protocol: TCP
            - containerPort: 5582
              protocol: UDP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: Immersiv
    name: boundary-recognition
    version: "1.0"
  imagepath: registry.mobiledgex.net:5000/immersiv/boundary-recognition
  imagetype: ImageTypeDocker
  accessports: tcp:5000
  defaultflavor:
    name: x1.medium
  cluster:
    name: immersiv
  deployment: kubernetes
  deploymentmanifest: |
    apiVersion: v1
    kind: Service
    metadata:
      name: boundary-recognition-tcp
      labels:
        run: boundary-recognition
    spec:
      type: LoadBalancer
      ports:
      - name: tcp5000
        protocol: TCP
        port: 5000
        targetPort: 5000
      selector:
        run: boundary-recognition
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: boundary-recognition-deployment
    spec:
      selector:
        matchLabels:
          run: boundary-recognition
      replicas: 1
      template:
        metadata:
          labels:
            run: boundary-recognition
        spec:
          volumes:
          imagePullSecrets:
          - name: mexregistrysecret
          containers:
          - name: boundary-recognition
            image: registry.mobiledgex.net:5000/immersiv/boundary-recognition
            imagePullPolicy: Always
            ports:
            - containerPort: 5000
              protocol: TCP
  deploymentgenerator: kubernetes-basic
- key:
    developerkey:
      name: MobiledgeX
    name: MEXPrometheusAppName
    version: "1.0"
  imagepath: stable/prometheus-operator
  defaultflavor:
    name: x1.medium
  deployment: helm
  delopt: AutoDelete
  configs:
  - kind: hemlCustomizationYaml
    config: |
      prometheus:
        prometheusSpec:
          scrapeInterval: "15s"
      kubelet:
        serviceMonitor:
          ## Enable scraping the kubelet over https. For requirements to enable this see
          ## https://github.com/coreos/prometheus-operator/issues/926
          ##
          https: true
