// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: developer.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/util"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeveloperKey struct {
	// bytes fields = 1;
	// Organization or Company Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeveloperKey) Reset()                    { *m = DeveloperKey{} }
func (m *DeveloperKey) String() string            { return proto1.CompactTextString(m) }
func (*DeveloperKey) ProtoMessage()               {}
func (*DeveloperKey) Descriptor() ([]byte, []int) { return fileDescriptorDeveloper, []int{0} }

type Developer struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key DeveloperKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// auth scheme plus generic hash instead of user/pass
	// Login name
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// encrypted password
	Passhash string `protobuf:"bytes,4,opt,name=passhash,proto3" json:"passhash,omitempty"`
	// Address
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Contact email
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *Developer) Reset()                    { *m = Developer{} }
func (m *Developer) String() string            { return proto1.CompactTextString(m) }
func (*Developer) ProtoMessage()               {}
func (*Developer) Descriptor() ([]byte, []int) { return fileDescriptorDeveloper, []int{1} }

func init() {
	proto1.RegisterType((*DeveloperKey)(nil), "proto.DeveloperKey")
	proto1.RegisterType((*Developer)(nil), "proto.Developer")
}
func (this *DeveloperKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.DeveloperKey{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDeveloper(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeveloperApi service

type DeveloperApiClient interface {
	CreateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	DeleteDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	UpdateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	ShowDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (DeveloperApi_ShowDeveloperClient, error)
}

type developerApiClient struct {
	cc *grpc.ClientConn
}

func NewDeveloperApiClient(cc *grpc.ClientConn) DeveloperApiClient {
	return &developerApiClient{cc}
}

func (c *developerApiClient) CreateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/CreateDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) DeleteDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/DeleteDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) UpdateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/UpdateDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) ShowDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (DeveloperApi_ShowDeveloperClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeveloperApi_serviceDesc.Streams[0], c.cc, "/proto.DeveloperApi/ShowDeveloper", opts...)
	if err != nil {
		return nil, err
	}
	x := &developerApiShowDeveloperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeveloperApi_ShowDeveloperClient interface {
	Recv() (*Developer, error)
	grpc.ClientStream
}

type developerApiShowDeveloperClient struct {
	grpc.ClientStream
}

func (x *developerApiShowDeveloperClient) Recv() (*Developer, error) {
	m := new(Developer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DeveloperApi service

type DeveloperApiServer interface {
	CreateDeveloper(context.Context, *Developer) (*Result, error)
	DeleteDeveloper(context.Context, *Developer) (*Result, error)
	UpdateDeveloper(context.Context, *Developer) (*Result, error)
	ShowDeveloper(*Developer, DeveloperApi_ShowDeveloperServer) error
}

func RegisterDeveloperApiServer(s *grpc.Server, srv DeveloperApiServer) {
	s.RegisterService(&_DeveloperApi_serviceDesc, srv)
}

func _DeveloperApi_CreateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).CreateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/CreateDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).CreateDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_DeleteDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).DeleteDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/DeleteDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).DeleteDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_UpdateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).UpdateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/UpdateDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).UpdateDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_ShowDeveloper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Developer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeveloperApiServer).ShowDeveloper(m, &developerApiShowDeveloperServer{stream})
}

type DeveloperApi_ShowDeveloperServer interface {
	Send(*Developer) error
	grpc.ServerStream
}

type developerApiShowDeveloperServer struct {
	grpc.ServerStream
}

func (x *developerApiShowDeveloperServer) Send(m *Developer) error {
	return x.ServerStream.SendMsg(m)
}

var _DeveloperApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DeveloperApi",
	HandlerType: (*DeveloperApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeveloper",
			Handler:    _DeveloperApi_CreateDeveloper_Handler,
		},
		{
			MethodName: "DeleteDeveloper",
			Handler:    _DeveloperApi_DeleteDeveloper_Handler,
		},
		{
			MethodName: "UpdateDeveloper",
			Handler:    _DeveloperApi_UpdateDeveloper_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowDeveloper",
			Handler:       _DeveloperApi_ShowDeveloper_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "developer.proto",
}

func (m *DeveloperKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeveloperKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Developer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Developer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDeveloper(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Passhash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Passhash)))
		i += copy(dAtA[i:], m.Passhash)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDeveloper(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func encodeVarintDeveloper(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeveloperKey) Matches(filter *DeveloperKey) bool {
	if filter == nil {
		return true
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	return true
}

func (m *DeveloperKey) CopyInFields(src *DeveloperKey) {
	m.Name = src.Name
}

func (m *DeveloperKey) GetKeyString() string {
	s := make([]string, 0, 1)
	s = append(s, m.Name)
	return strings.Join(s, "/")
}

func (m *Developer) Matches(filter *Developer) bool {
	if filter == nil {
		return true
	}
	if !m.Key.Matches(&filter.Key) {
		return false
	}
	if filter.Username != "" && filter.Username != m.Username {
		return false
	}
	if filter.Passhash != "" && filter.Passhash != m.Passhash {
		return false
	}
	if filter.Address != "" && filter.Address != m.Address {
		return false
	}
	if filter.Email != "" && filter.Email != m.Email {
		return false
	}
	return true
}

const DeveloperFieldFields uint = 1
const DeveloperFieldKey uint = 2
const DeveloperFieldUsername uint = 3
const DeveloperFieldPasshash uint = 4
const DeveloperFieldAddress uint = 5
const DeveloperFieldEmail uint = 6

func (m *Developer) CopyInFields(src *Developer) {
	if set, _ := util.GrpcFieldsGet(src.Fields, 2); set == true {
		m.Key = src.Key
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 3); set == true {
		m.Username = src.Username
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 4); set == true {
		m.Passhash = src.Passhash
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 5); set == true {
		m.Address = src.Address
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 6); set == true {
		m.Email = src.Email
	}
}

type DeveloperCud interface {
	// Validate all fields for create/update
	Validate(in *Developer) error
	// Validate only key fields for delete
	ValidateKey(key *DeveloperKey) error
	// Get key string for saving to persistent object storage
	GetObjStoreKeyString(key *DeveloperKey) string
	// Object storage IO interface
	ObjStore
	// Refresh is called after create/update/delete to update in-memory cache
	Refresh(in *Developer, key string) error
	// Get key string for loading all objects of this type
	GetLoadKeyString() string
}

func (m *Developer) Create(cud DeveloperCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	err = cud.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Developer) Update(cud DeveloperCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	var vers int64 = 0
	curBytes, vers, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Developer
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	err = cud.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Developer) Delete(cud DeveloperCud) (*Result, error) {
	err := cud.ValidateKey(&m.Key)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	err = cud.Delete(key)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

type LoadAllDevelopersCb func(m *Developer) error

func LoadAllDevelopers(cud DeveloperCud, cb LoadAllDevelopersCb) error {
	loadkey := cud.GetLoadKeyString()
	err := cud.List(loadkey, func(key, val []byte) error {
		var obj Developer
		err := json.Unmarshal(val, &obj)
		if err != nil {
			util.WarnLog("Failed to parse Developer data", "val", string(val))
			return nil
		}
		err = cb(&obj)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func LoadOneDeveloper(cud DeveloperCud, key string) (*Developer, error) {
	val, _, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var obj Developer
	err = json.Unmarshal(val, &obj)
	if err != nil {
		util.DebugLog(util.DebugLevelApi, "Failed to parse Developer data", "val", string(val))
		return nil, err
	}
	return &obj, nil
}

func (m *Developer) GetKey() ObjKey {
	return &m.Key
}

func (m *DeveloperKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	return n
}

func (m *Developer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = m.Key.Size()
	n += 1 + l + sovDeveloper(uint64(l))
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Passhash)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDeveloper(uint64(l))
	}
	return n
}

func sovDeveloper(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeveloper(x uint64) (n int) {
	return sovDeveloper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeveloperKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeveloperKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeveloperKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Developer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Developer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Developer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeveloper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeveloper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeveloper
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeveloper
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeveloper(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeveloper = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeveloper   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("developer.proto", fileDescriptorDeveloper) }

var fileDescriptorDeveloper = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x50, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0xcd, 0xd8, 0xb4, 0xb6, 0x63, 0x4a, 0xcb, 0x08, 0x32, 0x04, 0x49, 0x4b, 0x56, 0x05, 0x69,
	0x53, 0xaa, 0xa0, 0x74, 0x67, 0xed, 0xce, 0x5d, 0xc4, 0x0f, 0x98, 0x34, 0xb7, 0x49, 0x70, 0x92,
	0x09, 0x99, 0x44, 0xed, 0x1f, 0xf8, 0x19, 0x7e, 0x82, 0x9f, 0x91, 0xa5, 0x5f, 0x20, 0xda, 0x95,
	0xee, 0x84, 0xbe, 0xc5, 0x5b, 0x3e, 0x32, 0x49, 0xfb, 0xca, 0x7b, 0xf0, 0xa0, 0x9b, 0xe4, 0x9e,
	0x73, 0xcf, 0xb9, 0xe7, 0xde, 0xc1, 0x03, 0x1f, 0x3e, 0x03, 0x17, 0x29, 0x64, 0xb3, 0x34, 0x13,
	0xb9, 0x20, 0x6d, 0xf5, 0x33, 0x9f, 0x07, 0x42, 0x04, 0x1c, 0x1c, 0x96, 0x46, 0x0e, 0x4b, 0x12,
	0x91, 0xb3, 0x3c, 0x12, 0x89, 0xac, 0x45, 0xe6, 0x9b, 0x20, 0xca, 0xc3, 0xc2, 0x9b, 0x6d, 0x44,
	0xec, 0xc4, 0xc2, 0x8b, 0x38, 0xf8, 0x01, 0x7c, 0x75, 0xaa, 0xef, 0x74, 0xc3, 0x45, 0xe1, 0x3b,
	0x4a, 0x17, 0x40, 0x72, 0x2a, 0x1a, 0xa7, 0x91, 0x81, 0x2c, 0x78, 0xde, 0xa0, 0xe9, 0xd9, 0x9c,
	0x40, 0x04, 0xa2, 0x56, 0x7b, 0xc5, 0x56, 0x21, 0x05, 0x54, 0x55, 0xcb, 0xed, 0x39, 0x36, 0xd6,
	0xc7, 0x75, 0xdf, 0xc3, 0x8e, 0x10, 0xac, 0x27, 0x2c, 0x06, 0xfa, 0x68, 0x8c, 0x26, 0x3d, 0x57,
	0xd5, 0x4b, 0xe3, 0xef, 0x81, 0xa2, 0xeb, 0x03, 0x45, 0x3f, 0xbe, 0x8f, 0x90, 0x5d, 0x22, 0xdc,
	0x3b, 0x59, 0xc8, 0x33, 0xdc, 0xd9, 0x46, 0xc0, 0x7d, 0x49, 0xd1, 0x18, 0x4d, 0x0c, 0xb7, 0x41,
	0xe4, 0x05, 0x6e, 0x7d, 0x82, 0x9d, 0x1a, 0xf3, 0x64, 0xf1, 0xb4, 0x0e, 0x9b, 0x9d, 0x27, 0xad,
	0xf4, 0xf2, 0xd7, 0x48, 0x73, 0x2b, 0x15, 0x31, 0x71, 0xb7, 0x90, 0x90, 0xa9, 0xe0, 0x96, 0x0a,
	0x3e, 0xe1, 0xaa, 0x97, 0x32, 0x29, 0x43, 0x26, 0x43, 0xaa, 0xd7, 0xbd, 0x23, 0x26, 0x14, 0x3f,
	0x66, 0xbe, 0x9f, 0x81, 0x94, 0xb4, 0xad, 0x5a, 0x47, 0x48, 0x4c, 0xdc, 0x86, 0x98, 0x45, 0x9c,
	0x76, 0x2a, 0x7e, 0xa5, 0x7f, 0xbb, 0xa2, 0xc8, 0xad, 0xa9, 0x65, 0xb7, 0x3a, 0xe7, 0xff, 0x81,
	0xa2, 0xc5, 0x3f, 0x74, 0x76, 0xfd, 0xdb, 0x34, 0x22, 0xaf, 0xf0, 0xe0, 0x5d, 0x06, 0x2c, 0x87,
	0xdb, 0x03, 0x87, 0x77, 0x77, 0x37, 0xfb, 0x0d, 0xe3, 0xaa, 0x67, 0xb7, 0xb5, 0xca, 0xb5, 0x06,
	0x0e, 0x97, 0xbb, 0x3e, 0xa6, 0xfe, 0xa5, 0x59, 0xaf, 0x71, 0xff, 0x43, 0x28, 0xbe, 0x3c, 0xe4,
	0xb9, 0xc7, 0xd8, 0xda, 0x1c, 0xad, 0x86, 0xe5, 0x1f, 0x4b, 0x2b, 0xf7, 0x16, 0xfa, 0xb9, 0xb7,
	0xd0, 0xef, 0xbd, 0x85, 0xbc, 0x8e, 0x92, 0xbd, 0xbc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x32,
	0x11, 0xaf, 0xb0, 0x02, 0x00, 0x00,
}
