// Code generated by protoc-gen-go. DO NOT EDIT.
// source: developer.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mobiledgex/edge-cloud/protogen"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/util"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeveloperKey struct {
	// bytes fields = 1;
	// Organization or Company Name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *DeveloperKey) Reset()                    { *m = DeveloperKey{} }
func (m *DeveloperKey) String() string            { return proto1.CompactTextString(m) }
func (*DeveloperKey) ProtoMessage()               {}
func (*DeveloperKey) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *DeveloperKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Developer struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key *DeveloperKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// auth scheme plus generic hash instead of user/pass
	// Login name
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// encrypted password
	Passhash string `protobuf:"bytes,4,opt,name=passhash" json:"passhash,omitempty"`
	// Address
	Address string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	// Contact email
	Email string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
}

func (m *Developer) Reset()                    { *m = Developer{} }
func (m *Developer) String() string            { return proto1.CompactTextString(m) }
func (*Developer) ProtoMessage()               {}
func (*Developer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Developer) GetFields() []byte {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Developer) GetKey() *DeveloperKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Developer) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Developer) GetPasshash() string {
	if m != nil {
		return m.Passhash
	}
	return ""
}

func (m *Developer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Developer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func init() {
	proto1.RegisterType((*DeveloperKey)(nil), "proto.DeveloperKey")
	proto1.RegisterType((*Developer)(nil), "proto.Developer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeveloperApi service

type DeveloperApiClient interface {
	CreateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	DeleteDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	UpdateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error)
	ShowDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (DeveloperApi_ShowDeveloperClient, error)
}

type developerApiClient struct {
	cc *grpc.ClientConn
}

func NewDeveloperApiClient(cc *grpc.ClientConn) DeveloperApiClient {
	return &developerApiClient{cc}
}

func (c *developerApiClient) CreateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/CreateDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) DeleteDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/DeleteDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) UpdateDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.DeveloperApi/UpdateDeveloper", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerApiClient) ShowDeveloper(ctx context.Context, in *Developer, opts ...grpc.CallOption) (DeveloperApi_ShowDeveloperClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DeveloperApi_serviceDesc.Streams[0], c.cc, "/proto.DeveloperApi/ShowDeveloper", opts...)
	if err != nil {
		return nil, err
	}
	x := &developerApiShowDeveloperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeveloperApi_ShowDeveloperClient interface {
	Recv() (*Developer, error)
	grpc.ClientStream
}

type developerApiShowDeveloperClient struct {
	grpc.ClientStream
}

func (x *developerApiShowDeveloperClient) Recv() (*Developer, error) {
	m := new(Developer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DeveloperApi service

type DeveloperApiServer interface {
	CreateDeveloper(context.Context, *Developer) (*Result, error)
	DeleteDeveloper(context.Context, *Developer) (*Result, error)
	UpdateDeveloper(context.Context, *Developer) (*Result, error)
	ShowDeveloper(*Developer, DeveloperApi_ShowDeveloperServer) error
}

func RegisterDeveloperApiServer(s *grpc.Server, srv DeveloperApiServer) {
	s.RegisterService(&_DeveloperApi_serviceDesc, srv)
}

func _DeveloperApi_CreateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).CreateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/CreateDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).CreateDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_DeleteDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).DeleteDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/DeleteDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).DeleteDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_UpdateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Developer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperApiServer).UpdateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeveloperApi/UpdateDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperApiServer).UpdateDeveloper(ctx, req.(*Developer))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperApi_ShowDeveloper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Developer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeveloperApiServer).ShowDeveloper(m, &developerApiShowDeveloperServer{stream})
}

type DeveloperApi_ShowDeveloperServer interface {
	Send(*Developer) error
	grpc.ServerStream
}

type developerApiShowDeveloperServer struct {
	grpc.ServerStream
}

func (x *developerApiShowDeveloperServer) Send(m *Developer) error {
	return x.ServerStream.SendMsg(m)
}

var _DeveloperApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DeveloperApi",
	HandlerType: (*DeveloperApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeveloper",
			Handler:    _DeveloperApi_CreateDeveloper_Handler,
		},
		{
			MethodName: "DeleteDeveloper",
			Handler:    _DeveloperApi_DeleteDeveloper_Handler,
		},
		{
			MethodName: "UpdateDeveloper",
			Handler:    _DeveloperApi_UpdateDeveloper_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowDeveloper",
			Handler:       _DeveloperApi_ShowDeveloper_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "developer.proto",
}

func (m *DeveloperKey) Matches(filter *DeveloperKey) bool {
	if filter == nil {
		return true
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	return true
}

func (m *DeveloperKey) CopyInFields(src *DeveloperKey) {
	m.Name = src.Name
}
func (m *Developer) Matches(filter *Developer) bool {
	if filter == nil {
		return true
	}
	if filter.Key != nil && !filter.Key.Matches(m.Key) {
		return false
	}
	if filter.Username != "" && filter.Username != m.Username {
		return false
	}
	if filter.Passhash != "" && filter.Passhash != m.Passhash {
		return false
	}
	if filter.Address != "" && filter.Address != m.Address {
		return false
	}
	if filter.Email != "" && filter.Email != m.Email {
		return false
	}
	return true
}

const DeveloperFieldFields uint = 1
const DeveloperFieldKey uint = 2
const DeveloperFieldUsername uint = 3
const DeveloperFieldPasshash uint = 4
const DeveloperFieldAddress uint = 5
const DeveloperFieldEmail uint = 6

func (m *Developer) CopyInFields(src *Developer) {
	if set, _ := util.GrpcFieldsGet(src.Fields, 2); set == true {
		if m.Key != nil && src.Key != nil {
			*m.Key = *src.Key
		}
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 3); set == true {
		m.Username = src.Username
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 4); set == true {
		m.Passhash = src.Passhash
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 5); set == true {
		m.Address = src.Address
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 6); set == true {
		m.Email = src.Email
	}
}

type DeveloperCud interface {
	// Validate all fields for create/update
	Validate(in *Developer) error
	// Validate only Key fields for delete
	ValidateKey(in *Developer) error
	// Get key string for etcd access
	GetKeyString(in *Developer) string
	//Object storage IO interface
	ObjStore
	// Refresh is called after create/update/delete to update in-memory cache
	Refresh(in *Developer, key string) error
}

func (m *Developer) Create(cud DeveloperCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetKeyString(m)
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	err = cud.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Developer) Update(cud DeveloperCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetKeyString(m)
	var vers int64 = 0
	curBytes, vers, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Developer
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	err = cud.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Developer) Delete(cud DeveloperCud) (*Result, error) {
	err := cud.ValidateKey(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetKeyString(m)
	err = cud.Delete(key)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func init() { proto1.RegisterFile("developer.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x50, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0x5e, 0xdc, 0x8f, 0x5b, 0xdc, 0x98, 0x44, 0x91, 0x50, 0xbc, 0x18, 0x05, 0x61, 0x37, 0xae,
	0x32, 0x05, 0x65, 0x77, 0xe2, 0xee, 0xbc, 0xab, 0xf8, 0x00, 0xd9, 0x72, 0x6c, 0x83, 0x69, 0x13,
	0x92, 0x54, 0xdd, 0xbb, 0xf9, 0x40, 0x7a, 0x27, 0xec, 0x05, 0xa4, 0xe9, 0x36, 0x87, 0x82, 0xb0,
	0x9b, 0xf6, 0x7c, 0x7f, 0x7c, 0xe7, 0x04, 0xf7, 0x39, 0xbc, 0x80, 0x54, 0x1a, 0xcc, 0x48, 0x1b,
	0xe5, 0x14, 0x69, 0xfa, 0x5f, 0x70, 0x9a, 0x28, 0x95, 0x48, 0x88, 0x98, 0x16, 0x11, 0xcb, 0x73,
	0xe5, 0x98, 0x13, 0x2a, 0xb7, 0x95, 0x29, 0xb8, 0x49, 0x84, 0x4b, 0x8b, 0xd9, 0x68, 0xae, 0xb2,
	0x28, 0x53, 0x33, 0x21, 0x81, 0x27, 0xf0, 0x16, 0x95, 0xdf, 0xf3, 0xb9, 0x54, 0x05, 0x8f, 0xbc,
	0x2f, 0x81, 0x7c, 0x33, 0xac, 0x92, 0x5d, 0x03, 0xb6, 0x90, 0xae, 0x42, 0xe1, 0x10, 0x77, 0xa7,
	0xeb, 0xfe, 0x7b, 0x58, 0x10, 0x82, 0x1b, 0x39, 0xcb, 0x80, 0xee, 0x0d, 0xd0, 0xb0, 0x13, 0xfb,
	0x79, 0xd2, 0xf8, 0x58, 0x52, 0x14, 0xbe, 0x23, 0xdc, 0xd9, 0x58, 0xc9, 0x09, 0x6e, 0x3d, 0x09,
	0x90, 0xdc, 0x52, 0x34, 0x40, 0xc3, 0x6e, 0xbc, 0x42, 0xe4, 0x0c, 0xd7, 0x9f, 0x61, 0xe1, 0xe3,
	0x07, 0xe3, 0xa3, 0xaa, 0x64, 0xb4, 0xdd, 0x10, 0x97, 0x3a, 0x09, 0x70, 0xbb, 0xb0, 0x60, 0x7c,
	0x55, 0xdd, 0x57, 0x6d, 0x70, 0xa9, 0x69, 0x66, 0x6d, 0xca, 0x6c, 0x4a, 0x1b, 0x95, 0xb6, 0xc6,
	0x84, 0xe2, 0x7d, 0xc6, 0xb9, 0x01, 0x6b, 0x69, 0xd3, 0x4b, 0x6b, 0x48, 0x8e, 0x71, 0x13, 0x32,
	0x26, 0x24, 0x6d, 0x79, 0xbe, 0x02, 0x93, 0x76, 0xb9, 0xfa, 0xd7, 0x92, 0xa2, 0xf1, 0x27, 0xda,
	0xba, 0xf4, 0x56, 0x0b, 0x72, 0x85, 0xfb, 0x77, 0x06, 0x98, 0x83, 0x9f, 0xa3, 0x0e, 0x7f, 0xef,
	0x1b, 0xf4, 0x56, 0x4c, 0xec, 0xdf, 0x2c, 0xac, 0x95, 0xa9, 0x29, 0x48, 0xd8, 0x3d, 0xf5, 0xa8,
	0xf9, 0xae, 0x5d, 0xd7, 0xb8, 0xf7, 0x90, 0xaa, 0xd7, 0xff, 0x32, 0x7f, 0x98, 0xb0, 0x76, 0x81,
	0x66, 0x2d, 0x4f, 0x5e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x8c, 0xe9, 0x71, 0x5b, 0x02,
	0x00, 0x00,
}
