// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app_inst.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/util"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// type of instance
type AppInst_Liveness int32

const (
	AppInst_UNKNOWN AppInst_Liveness = 0
	AppInst_STATIC  AppInst_Liveness = 1
	AppInst_DYNAMIC AppInst_Liveness = 2
)

var AppInst_Liveness_name = map[int32]string{
	0: "UNKNOWN",
	1: "STATIC",
	2: "DYNAMIC",
}
var AppInst_Liveness_value = map[string]int32{
	"UNKNOWN": 0,
	"STATIC":  1,
	"DYNAMIC": 2,
}

func (x AppInst_Liveness) String() string {
	return proto1.EnumName(AppInst_Liveness_name, int32(x))
}
func (AppInst_Liveness) EnumDescriptor() ([]byte, []int) { return fileDescriptorAppInst, []int{1, 0} }

type AppInstKey struct {
	// App key
	AppKey AppKey `protobuf:"bytes,1,opt,name=app_key,json=appKey" json:"app_key"`
	// Cloudlet it's on
	CloudletKey CloudletKey `protobuf:"bytes,2,opt,name=cloudlet_key,json=cloudletKey" json:"cloudlet_key"`
	// inst id
	Id uint64 `protobuf:"fixed64,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AppInstKey) Reset()                    { *m = AppInstKey{} }
func (m *AppInstKey) String() string            { return proto1.CompactTextString(m) }
func (*AppInstKey) ProtoMessage()               {}
func (*AppInstKey) Descriptor() ([]byte, []int) { return fileDescriptorAppInst, []int{0} }

// AppInsts are instances of an application instantiated
// on a cloudlet, like a docker or VM instance.
type AppInst struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key AppInstKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Cache the location of the cloudlet
	CloudletLoc Loc `protobuf:"bytes,3,opt,name=cloudlet_loc,json=cloudletLoc" json:"cloudlet_loc"`
	// how to connect to this instance
	Ip []byte `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// port to connect to this instance
	Port     uint32           `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Liveness AppInst_Liveness `protobuf:"varint,6,opt,name=liveness,proto3,enum=proto.AppInst_Liveness" json:"liveness,omitempty"`
}

func (m *AppInst) Reset()                    { *m = AppInst{} }
func (m *AppInst) String() string            { return proto1.CompactTextString(m) }
func (*AppInst) ProtoMessage()               {}
func (*AppInst) Descriptor() ([]byte, []int) { return fileDescriptorAppInst, []int{1} }

func init() {
	proto1.RegisterType((*AppInstKey)(nil), "proto.AppInstKey")
	proto1.RegisterType((*AppInst)(nil), "proto.AppInst")
	proto1.RegisterEnum("proto.AppInst_Liveness", AppInst_Liveness_name, AppInst_Liveness_value)
}
func (this *AppInstKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.AppInstKey{")
	s = append(s, "AppKey: "+strings.Replace(this.AppKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "CloudletKey: "+strings.Replace(this.CloudletKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAppInst(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppInstApi service

type AppInstApiClient interface {
	CreateAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error)
	DeleteAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error)
	UpdateAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error)
	ShowAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (AppInstApi_ShowAppInstClient, error)
}

type appInstApiClient struct {
	cc *grpc.ClientConn
}

func NewAppInstApiClient(cc *grpc.ClientConn) AppInstApiClient {
	return &appInstApiClient{cc}
}

func (c *appInstApiClient) CreateAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppInstApi/CreateAppInst", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInstApiClient) DeleteAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppInstApi/DeleteAppInst", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInstApiClient) UpdateAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppInstApi/UpdateAppInst", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appInstApiClient) ShowAppInst(ctx context.Context, in *AppInst, opts ...grpc.CallOption) (AppInstApi_ShowAppInstClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppInstApi_serviceDesc.Streams[0], c.cc, "/proto.AppInstApi/ShowAppInst", opts...)
	if err != nil {
		return nil, err
	}
	x := &appInstApiShowAppInstClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppInstApi_ShowAppInstClient interface {
	Recv() (*AppInst, error)
	grpc.ClientStream
}

type appInstApiShowAppInstClient struct {
	grpc.ClientStream
}

func (x *appInstApiShowAppInstClient) Recv() (*AppInst, error) {
	m := new(AppInst)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppInstApi service

type AppInstApiServer interface {
	CreateAppInst(context.Context, *AppInst) (*Result, error)
	DeleteAppInst(context.Context, *AppInst) (*Result, error)
	UpdateAppInst(context.Context, *AppInst) (*Result, error)
	ShowAppInst(*AppInst, AppInstApi_ShowAppInstServer) error
}

func RegisterAppInstApiServer(s *grpc.Server, srv AppInstApiServer) {
	s.RegisterService(&_AppInstApi_serviceDesc, srv)
}

func _AppInstApi_CreateAppInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInstApiServer).CreateAppInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppInstApi/CreateAppInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInstApiServer).CreateAppInst(ctx, req.(*AppInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInstApi_DeleteAppInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInstApiServer).DeleteAppInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppInstApi/DeleteAppInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInstApiServer).DeleteAppInst(ctx, req.(*AppInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInstApi_UpdateAppInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppInstApiServer).UpdateAppInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppInstApi/UpdateAppInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppInstApiServer).UpdateAppInst(ctx, req.(*AppInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppInstApi_ShowAppInst_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppInst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppInstApiServer).ShowAppInst(m, &appInstApiShowAppInstServer{stream})
}

type AppInstApi_ShowAppInstServer interface {
	Send(*AppInst) error
	grpc.ServerStream
}

type appInstApiShowAppInstServer struct {
	grpc.ServerStream
}

func (x *appInstApiShowAppInstServer) Send(m *AppInst) error {
	return x.ServerStream.SendMsg(m)
}

var _AppInstApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AppInstApi",
	HandlerType: (*AppInstApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppInst",
			Handler:    _AppInstApi_CreateAppInst_Handler,
		},
		{
			MethodName: "DeleteAppInst",
			Handler:    _AppInstApi_DeleteAppInst_Handler,
		},
		{
			MethodName: "UpdateAppInst",
			Handler:    _AppInstApi_UpdateAppInst_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowAppInst",
			Handler:       _AppInstApi_ShowAppInst_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app_inst.proto",
}

func (m *AppInstKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInstKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAppInst(dAtA, i, uint64(m.AppKey.Size()))
	n1, err := m.AppKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAppInst(dAtA, i, uint64(m.CloudletKey.Size()))
	n2, err := m.CloudletKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Id != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i += 8
	}
	return i, nil
}

func (m *AppInst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppInst(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAppInst(dAtA, i, uint64(m.Key.Size()))
	n3, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAppInst(dAtA, i, uint64(m.CloudletLoc.Size()))
	n4, err := m.CloudletLoc.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAppInst(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAppInst(dAtA, i, uint64(m.Port))
	}
	if m.Liveness != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAppInst(dAtA, i, uint64(m.Liveness))
	}
	return i, nil
}

func encodeVarintAppInst(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppInstKey) Matches(filter *AppInstKey) bool {
	if filter == nil {
		return true
	}
	if !m.AppKey.Matches(&filter.AppKey) {
		return false
	}
	if !m.CloudletKey.Matches(&filter.CloudletKey) {
		return false
	}
	if filter.Id != 0 && filter.Id != m.Id {
		return false
	}
	return true
}

func (m *AppInstKey) CopyInFields(src *AppInstKey) {
	m.AppKey = src.AppKey
	m.CloudletKey = src.CloudletKey
	m.Id = src.Id
}

func (m *AppInstKey) GetKeyString() string {
	s := make([]string, 0, 3)
	s = append(s, m.AppKey.GetKeyString())
	s = append(s, m.CloudletKey.GetKeyString())
	s = append(s, string(m.Id))
	return strings.Join(s, "/")
}

func (m *AppInst) Matches(filter *AppInst) bool {
	if filter == nil {
		return true
	}
	if !m.Key.Matches(&filter.Key) {
		return false
	}
	if !m.CloudletLoc.Matches(&filter.CloudletLoc) {
		return false
	}
	if filter.Port != 0 && filter.Port != m.Port {
		return false
	}
	if filter.Liveness != 0 && filter.Liveness != m.Liveness {
		return false
	}
	return true
}

const AppInstFieldFields uint = 1
const AppInstFieldKey uint = 2
const AppInstFieldCloudletLoc uint = 3
const AppInstFieldIp uint = 4
const AppInstFieldPort uint = 5
const AppInstFieldLiveness uint = 6

func (m *AppInst) CopyInFields(src *AppInst) {
	if set, _ := util.GrpcFieldsGet(src.Fields, 2); set == true {
		m.Key = src.Key
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 3); set == true {
		m.CloudletLoc = src.CloudletLoc
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 4); set == true {
		copy(m.Ip, src.Ip)
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 5); set == true {
		m.Port = src.Port
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 6); set == true {
		m.Liveness = src.Liveness
	}
}

type AppInstCud interface {
	// Validate all fields for create/update
	Validate(in *AppInst) error
	// Validate only key fields for delete
	ValidateKey(key *AppInstKey) error
	// Get key string for saving to persistent object storage
	GetObjStoreKeyString(key *AppInstKey) string
	// Object storage IO interface
	ObjStore
	// Refresh is called after create/update/delete to update in-memory cache
	Refresh(in *AppInst, key string) error
	// Get key string for loading all objects of this type
	GetLoadKeyString() string
}

func (m *AppInst) Create(cud AppInstCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	err = cud.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *AppInst) Update(cud AppInstCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	var vers int64 = 0
	curBytes, vers, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var cur AppInst
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	err = cud.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *AppInst) Delete(cud AppInstCud) (*Result, error) {
	err := cud.ValidateKey(&m.Key)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	err = cud.Delete(key)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

type LoadAllAppInstsCb func(m *AppInst) error

func LoadAllAppInsts(cud AppInstCud, cb LoadAllAppInstsCb) error {
	loadkey := cud.GetLoadKeyString()
	err := cud.List(loadkey, func(key, val []byte) error {
		var obj AppInst
		err := json.Unmarshal(val, &obj)
		if err != nil {
			util.WarnLog("Failed to parse AppInst data", "val", string(val))
			return nil
		}
		err = cb(&obj)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func LoadOneAppInst(cud AppInstCud, key string) (*AppInst, error) {
	val, _, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var obj AppInst
	err = json.Unmarshal(val, &obj)
	if err != nil {
		util.DebugLog(util.DebugLevelApi, "Failed to parse AppInst data", "val", string(val))
		return nil, err
	}
	return &obj, nil
}

func (m *AppInst) GetKey() ObjKey {
	return &m.Key
}

func (m *AppInstKey) Size() (n int) {
	var l int
	_ = l
	l = m.AppKey.Size()
	n += 1 + l + sovAppInst(uint64(l))
	l = m.CloudletKey.Size()
	n += 1 + l + sovAppInst(uint64(l))
	if m.Id != 0 {
		n += 9
	}
	return n
}

func (m *AppInst) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovAppInst(uint64(l))
	}
	l = m.Key.Size()
	n += 1 + l + sovAppInst(uint64(l))
	l = m.CloudletLoc.Size()
	n += 1 + l + sovAppInst(uint64(l))
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovAppInst(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovAppInst(uint64(m.Port))
	}
	if m.Liveness != 0 {
		n += 1 + sovAppInst(uint64(m.Liveness))
	}
	return n
}

func sovAppInst(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAppInst(x uint64) (n int) {
	return sovAppInst(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppInstKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppInst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInstKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInstKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipAppInst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppInst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppInst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppInst
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudletLoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CloudletLoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAppInst
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveness", wireType)
			}
			m.Liveness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liveness |= (AppInst_Liveness(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppInst(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppInst
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppInst(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppInst
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppInst
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAppInst
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAppInst
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAppInst(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAppInst = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppInst   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("app_inst.proto", fileDescriptorAppInst) }

var fileDescriptorAppInst = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xef, 0xb9, 0xa9, 0x93, 0x5e, 0xfe, 0x10, 0x4e, 0x08, 0xac, 0x08, 0xa5, 0x91, 0xa7, 0x80,
	0x68, 0x5c, 0x25, 0x0b, 0x0a, 0x53, 0x9a, 0x2e, 0x21, 0x21, 0x48, 0x6e, 0x2b, 0xc4, 0x84, 0x1c,
	0xfb, 0xea, 0x9c, 0xb8, 0xfa, 0x4e, 0xb1, 0x4d, 0xc9, 0xca, 0x57, 0x40, 0x30, 0xf3, 0x11, 0xd8,
	0xf9, 0x02, 0x19, 0x91, 0xd8, 0x11, 0x44, 0x0c, 0x8c, 0x48, 0x59, 0x18, 0x91, 0x5f, 0xce, 0x49,
	0x1a, 0x89, 0xa5, 0x8b, 0xfd, 0xde, 0xbd, 0xdf, 0xbf, 0xfb, 0x83, 0x4b, 0x8e, 0x94, 0xaf, 0x58,
	0x10, 0x46, 0x0d, 0x39, 0x11, 0x91, 0x20, 0x7b, 0xf0, 0xab, 0xdc, 0xf7, 0x85, 0xf0, 0x39, 0xb5,
	0x1c, 0xc9, 0x2c, 0x27, 0x08, 0x44, 0xe4, 0x44, 0x4c, 0x04, 0xe1, 0x12, 0x54, 0x29, 0x4c, 0x68,
	0x18, 0x73, 0x45, 0xa9, 0x3c, 0xf6, 0x59, 0x34, 0x8e, 0x47, 0x0d, 0x57, 0x5c, 0x5a, 0x97, 0x62,
	0xc4, 0x38, 0xf5, 0x7c, 0xfa, 0xd6, 0x4a, 0xbe, 0x87, 0x2e, 0x17, 0xb1, 0x67, 0x01, 0xce, 0xa7,
	0xc1, 0xaa, 0x50, 0xcc, 0x7d, 0x47, 0x4a, 0x55, 0x96, 0x00, 0xc9, 0x69, 0x2a, 0xba, 0xcf, 0x85,
	0xab, 0xca, 0xc3, 0x0d, 0x7d, 0x5f, 0xf8, 0x62, 0xa9, 0x32, 0x8a, 0x2f, 0xa0, 0x83, 0x06, 0xaa,
	0x25, 0xdc, 0xfc, 0x80, 0x30, 0xee, 0x48, 0xd9, 0x0b, 0xc2, 0xa8, 0x4f, 0xa7, 0xe4, 0x11, 0xce,
	0x26, 0x5b, 0x7c, 0x4d, 0xa7, 0x06, 0xaa, 0xa1, 0x7a, 0xbe, 0x59, 0x5c, 0xe2, 0x1a, 0x1d, 0x29,
	0xfb, 0x74, 0x7a, 0x9c, 0x99, 0x7d, 0x3f, 0xd8, 0xb1, 0x75, 0x07, 0x3a, 0xf2, 0x04, 0x17, 0xd2,
	0x20, 0x40, 0xd1, 0x80, 0x42, 0x14, 0xa5, 0xab, 0x46, 0x6b, 0x5e, 0xde, 0x5d, 0x2f, 0x91, 0x12,
	0xd6, 0x98, 0x67, 0xec, 0xd6, 0x50, 0x5d, 0xb7, 0x35, 0xe6, 0xb5, 0x0b, 0xbf, 0x17, 0x06, 0xfa,
	0xbb, 0x30, 0xd0, 0xe7, 0x4f, 0x07, 0xc8, 0xfc, 0xa8, 0xe1, 0xac, 0xca, 0x45, 0xee, 0x62, 0xfd,
	0x82, 0x51, 0xee, 0x85, 0x90, 0xa9, 0x60, 0xab, 0x8e, 0x3c, 0xc0, 0xbb, 0x6b, 0xd7, 0xdb, 0xeb,
	0xa0, 0x6a, 0x33, 0xca, 0x34, 0xc1, 0x90, 0xd6, 0x46, 0x52, 0x2e, 0x5c, 0xb0, 0xcd, 0x37, 0xb1,
	0xe2, 0x0c, 0x84, 0xbb, 0x9d, 0x70, 0x20, 0x5c, 0x48, 0x28, 0x8d, 0x0c, 0x78, 0x6a, 0x4c, 0x12,
	0x82, 0x33, 0x52, 0x4c, 0x22, 0x63, 0xaf, 0x86, 0xea, 0x45, 0x1b, 0x6a, 0xd2, 0xc2, 0x39, 0xce,
	0xde, 0xd0, 0x80, 0x86, 0xa1, 0xa1, 0xd7, 0x50, 0xbd, 0xd4, 0xbc, 0x77, 0x3d, 0x48, 0x63, 0xa0,
	0xc6, 0xf6, 0x0a, 0x68, 0x1e, 0xe1, 0x5c, 0xba, 0x4a, 0xf2, 0x38, 0x7b, 0x3e, 0xec, 0x0f, 0x9f,
	0xbf, 0x18, 0x96, 0x77, 0x08, 0xc6, 0xfa, 0xe9, 0x59, 0xe7, 0xac, 0xd7, 0x2d, 0xa3, 0x64, 0x70,
	0xf2, 0x72, 0xd8, 0x79, 0xd6, 0xeb, 0x96, 0xb5, 0x76, 0x2e, 0x39, 0x9c, 0x3f, 0x0b, 0x03, 0x35,
	0xbf, 0x68, 0xab, 0x0b, 0xeb, 0x48, 0x46, 0x9e, 0xe2, 0x62, 0x77, 0x42, 0x9d, 0x88, 0xa6, 0x87,
	0x55, 0xba, 0x6e, 0x5f, 0x49, 0x2f, 0xd0, 0x86, 0x47, 0x68, 0x56, 0xde, 0x7d, 0xfb, 0xf5, 0x5e,
	0xbb, 0x63, 0xde, 0xb2, 0x5c, 0xa0, 0x59, 0x8e, 0x94, 0xc9, 0x83, 0x6e, 0xa3, 0x87, 0x89, 0xd6,
	0x09, 0xe5, 0xf4, 0x06, 0x5a, 0x1e, 0xd0, 0xb6, 0xb4, 0xce, 0xa5, 0x77, 0x93, 0x5c, 0x31, 0xd0,
	0x36, 0xb5, 0x7a, 0x38, 0x7f, 0x3a, 0x16, 0x57, 0xff, 0x53, 0xda, 0xea, 0x4d, 0x03, 0xa4, 0x88,
	0x59, 0xb4, 0xc2, 0xb1, 0xb8, 0xda, 0x10, 0x3a, 0x42, 0xc7, 0xe5, 0xd9, 0xcf, 0xea, 0xce, 0x6c,
	0x5e, 0x45, 0x5f, 0xe7, 0x55, 0xf4, 0x63, 0x5e, 0x45, 0x23, 0x1d, 0xc8, 0xad, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x30, 0x52, 0x08, 0xdb, 0x03, 0x00, 0x00,
}
