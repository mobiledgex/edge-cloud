// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: loc.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/gogo/protobuf/types"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Loc struct {
	// latitude in WGS 84 coordinates
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	// longitude in WGS 84 coordinates
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
	// horizontal accuracy (radius in meters)
	HorizontalAccuracy float64 `protobuf:"fixed64,3,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3" json:"horizontal_accuracy,omitempty"`
	// veritical accuracy (meters)
	VerticalAccuracy float64 `protobuf:"fixed64,4,opt,name=vertical_accuracy,json=verticalAccuracy,proto3" json:"vertical_accuracy,omitempty"`
	// On android only lat and long are guaranteed to be supplied
	// altitude in meters
	Altitude float64 `protobuf:"fixed64,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// course (IOS) / bearing (Android) (degrees east relative to true north)
	Course float64 `protobuf:"fixed64,6,opt,name=course,proto3" json:"course,omitempty"`
	// speed (IOS) / velocity (Android) (meters/sec)
	Speed float64 `protobuf:"fixed64,7,opt,name=speed,proto3" json:"speed,omitempty"`
	// timestamp
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Loc) Reset()                    { *m = Loc{} }
func (m *Loc) String() string            { return proto1.CompactTextString(m) }
func (*Loc) ProtoMessage()               {}
func (*Loc) Descriptor() ([]byte, []int) { return fileDescriptorLoc, []int{0} }

func init() {
	proto1.RegisterType((*Loc)(nil), "proto.Loc")
}
func (m *Loc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lat != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Long != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Long))))
		i += 8
	}
	if m.HorizontalAccuracy != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HorizontalAccuracy))))
		i += 8
	}
	if m.VerticalAccuracy != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VerticalAccuracy))))
		i += 8
	}
	if m.Altitude != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Altitude))))
		i += 8
	}
	if m.Course != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Course))))
		i += 8
	}
	if m.Speed != 0 {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i += 8
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintLoc(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintLoc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Loc) CopyInFields(src *Loc) {
	m.Lat = src.Lat
	m.Long = src.Long
	m.HorizontalAccuracy = src.HorizontalAccuracy
	m.VerticalAccuracy = src.VerticalAccuracy
	m.Altitude = src.Altitude
	m.Course = src.Course
	m.Speed = src.Speed
	if m.Timestamp != nil && src.Timestamp != nil {
		*m.Timestamp = *src.Timestamp
	}
}

func (m *Loc) Size() (n int) {
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Long != 0 {
		n += 9
	}
	if m.HorizontalAccuracy != 0 {
		n += 9
	}
	if m.VerticalAccuracy != 0 {
		n += 9
	}
	if m.Altitude != 0 {
		n += 9
	}
	if m.Course != 0 {
		n += 9
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovLoc(uint64(l))
	}
	return n
}

func sovLoc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLoc(x uint64) (n int) {
	return sovLoc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Loc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Long = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorizontalAccuracy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HorizontalAccuracy = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerticalAccuracy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VerticalAccuracy = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Altitude = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Course = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLoc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLoc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLoc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLoc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("loc.proto", fileDescriptorLoc) }

var fileDescriptorLoc = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0xd3, 0x84, 0xf6, 0x58, 0xc2, 0x81, 0x90, 0x95, 0x21, 0x54, 0x4c, 0x95, 0x90,
	0x12, 0x09, 0x16, 0x56, 0x98, 0x99, 0x2a, 0x76, 0xe4, 0xba, 0x26, 0x44, 0x72, 0x7b, 0x91, 0xe3,
	0x20, 0xc1, 0x3b, 0xf0, 0x5e, 0x1d, 0x79, 0x04, 0xc8, 0x93, 0x20, 0x2e, 0x4d, 0xc2, 0xe4, 0xfb,
	0xef, 0xfb, 0x3c, 0xdc, 0x0f, 0x73, 0x4b, 0x3a, 0xab, 0x1c, 0x79, 0xc2, 0x90, 0x9f, 0xe4, 0xb2,
	0x20, 0x2a, 0xac, 0xc9, 0x39, 0xad, 0x9b, 0x97, 0xdc, 0x97, 0x5b, 0x53, 0x7b, 0xb5, 0xad, 0x3a,
	0xef, 0xea, 0x73, 0x02, 0xc1, 0x23, 0x69, 0x8c, 0x21, 0xb0, 0xca, 0x4b, 0xb1, 0x10, 0x4b, 0xb1,
	0xfa, 0x1b, 0x11, 0x61, 0x6a, 0x69, 0x57, 0xc8, 0x09, 0xaf, 0x78, 0xc6, 0x1c, 0xce, 0x5e, 0xc9,
	0x95, 0x1f, 0xb4, 0xf3, 0xca, 0x3e, 0x2b, 0xad, 0x1b, 0xa7, 0xf4, 0xbb, 0x0c, 0x58, 0xc1, 0x11,
	0xdd, 0x1f, 0x08, 0x5e, 0xc3, 0xe9, 0x9b, 0x71, 0xbe, 0xd4, 0xff, 0xf5, 0x29, 0xeb, 0x71, 0x0f,
	0x06, 0x39, 0x81, 0x99, 0xb2, 0xbe, 0xf4, 0xcd, 0xc6, 0xc8, 0x90, 0x9d, 0x21, 0xe3, 0x05, 0x44,
	0x9a, 0x1a, 0x57, 0x1b, 0x19, 0x31, 0x39, 0x24, 0x3c, 0x87, 0xb0, 0xae, 0x8c, 0xd9, 0xc8, 0x63,
	0x5e, 0x77, 0x01, 0xef, 0x60, 0x3e, 0x1c, 0x2a, 0x67, 0x0b, 0xb1, 0x3c, 0xb9, 0x49, 0xb2, 0xae,
	0x8a, 0xac, 0xaf, 0x22, 0x7b, 0xea, 0x8d, 0xd5, 0x28, 0x3f, 0xc4, 0xfb, 0x9f, 0xf4, 0x68, 0xdf,
	0xa6, 0xe2, 0xab, 0x4d, 0xc5, 0x77, 0x9b, 0x8a, 0x75, 0xc4, 0x1f, 0x6e, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x07, 0x7f, 0x87, 0x47, 0x5d, 0x01, 0x00, 0x00,
}
