// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loc.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Loc struct {
	// latitude in WGS 84 coordinates
	Lat float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// longitude in WGS 84 coordinates
	Long float64 `protobuf:"fixed64,2,opt,name=long" json:"long,omitempty"`
	// horizontal accuracy (radius in meters)
	HorizontalAccuracy float64 `protobuf:"fixed64,3,opt,name=horizontal_accuracy,json=horizontalAccuracy" json:"horizontal_accuracy,omitempty"`
	// veritical accuracy (meters)
	VerticalAccuracy float64 `protobuf:"fixed64,4,opt,name=vertical_accuracy,json=verticalAccuracy" json:"vertical_accuracy,omitempty"`
	// On android only lat and long are guaranteed to be supplied
	// altitude in meters
	Altitude float64 `protobuf:"fixed64,5,opt,name=altitude" json:"altitude,omitempty"`
	// course (IOS) / bearing (Android) (degrees east relative to true north)
	Course float64 `protobuf:"fixed64,6,opt,name=course" json:"course,omitempty"`
	// speed (IOS) / velocity (Android) (meters/sec)
	Speed float64 `protobuf:"fixed64,7,opt,name=speed" json:"speed,omitempty"`
	// timestamp
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Loc) Reset()                    { *m = Loc{} }
func (m *Loc) String() string            { return proto1.CompactTextString(m) }
func (*Loc) ProtoMessage()               {}
func (*Loc) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Loc) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Loc) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func (m *Loc) GetHorizontalAccuracy() float64 {
	if m != nil {
		return m.HorizontalAccuracy
	}
	return 0
}

func (m *Loc) GetVerticalAccuracy() float64 {
	if m != nil {
		return m.VerticalAccuracy
	}
	return 0
}

func (m *Loc) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *Loc) GetCourse() float64 {
	if m != nil {
		return m.Course
	}
	return 0
}

func (m *Loc) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Loc) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto1.RegisterType((*Loc)(nil), "proto.Loc")
}
func (m *Loc) CopyInFields(src *Loc) {
	m.Lat = src.Lat
	m.Long = src.Long
	m.HorizontalAccuracy = src.HorizontalAccuracy
	m.VerticalAccuracy = src.VerticalAccuracy
	m.Altitude = src.Altitude
	m.Course = src.Course
	m.Speed = src.Speed
	if m.Timestamp != nil && src.Timestamp != nil {
		*m.Timestamp = *src.Timestamp
	}
}

func init() { proto1.RegisterFile("loc.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x40, 0x95, 0xa6, 0x09, 0xed, 0xb1, 0x94, 0x03, 0x21, 0x2b, 0x0b, 0x15, 0x53, 0x25, 0x24,
	0x47, 0x82, 0x85, 0x95, 0x9d, 0xa9, 0x62, 0x47, 0xae, 0x6b, 0x82, 0x25, 0xb7, 0x17, 0x39, 0x67,
	0x24, 0xf8, 0x07, 0xfe, 0x19, 0x71, 0x69, 0x92, 0x4e, 0xbe, 0x77, 0xef, 0x2d, 0x3e, 0x58, 0x06,
	0xb2, 0xba, 0x8d, 0xc4, 0x84, 0x85, 0x3c, 0xd5, 0x5d, 0x43, 0xd4, 0x04, 0x57, 0x0b, 0xed, 0xd2,
	0x47, 0xcd, 0xfe, 0xe0, 0x3a, 0x36, 0x87, 0xb6, 0xef, 0xee, 0x7f, 0x67, 0x90, 0xbf, 0x92, 0xc5,
	0x15, 0xe4, 0xc1, 0xb0, 0xca, 0xd6, 0xd9, 0x26, 0xdb, 0xfe, 0x8f, 0x88, 0x30, 0x0f, 0x74, 0x6c,
	0xd4, 0x4c, 0x56, 0x32, 0x63, 0x0d, 0xd7, 0x9f, 0x14, 0xfd, 0x0f, 0x1d, 0xd9, 0x84, 0x77, 0x63,
	0x6d, 0x8a, 0xc6, 0x7e, 0xab, 0x5c, 0x12, 0x9c, 0xd4, 0xcb, 0xc9, 0xe0, 0x03, 0x5c, 0x7d, 0xb9,
	0xc8, 0xde, 0x9e, 0xe7, 0x73, 0xc9, 0x57, 0x83, 0x18, 0xe3, 0x0a, 0x16, 0x26, 0xb0, 0xe7, 0xb4,
	0x77, 0xaa, 0x90, 0x66, 0x64, 0xbc, 0x85, 0xd2, 0x52, 0x8a, 0x9d, 0x53, 0xa5, 0x98, 0x13, 0xe1,
	0x0d, 0x14, 0x5d, 0xeb, 0xdc, 0x5e, 0x5d, 0xc8, 0xba, 0x07, 0x7c, 0x86, 0xe5, 0xf8, 0x51, 0xb5,
	0x58, 0x67, 0x9b, 0xcb, 0xc7, 0x4a, 0xf7, 0xa7, 0xd0, 0xc3, 0x29, 0xf4, 0xdb, 0x50, 0x6c, 0xa7,
	0x78, 0x57, 0x8a, 0x7e, 0xfa, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xec, 0xef, 0x23, 0x06, 0x4b, 0x01,
	0x00, 0x00,
}
