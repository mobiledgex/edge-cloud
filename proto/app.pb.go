// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		app.proto
		cloudlet.proto
		debug.proto
		developer.proto
		loc.proto
		matcher.proto
		operator.proto
		result.proto
		update.proto

	It has these top-level messages:
		AppKey
		App
		CloudletKey
		Cloudlet
		DebugLevel
		DeveloperKey
		Developer
		Loc
		ServiceRequest
		ServiceReply
		OperatorCode
		OperatorKey
		Operator
		Result
		Update
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/util"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// key that uniquely identifies an application
// It is important that embedded structs are not referenced by a
// pointer, otherwise the enclosing struct cannot properly function
// as the key to a hash table. Thus embedded structs have nullable false.
type AppKey struct {
	// developer key
	DeveloperKey DeveloperKey `protobuf:"bytes,1,opt,name=developer_key,json=developerKey" json:"developer_key"`
	// application name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// version of the app
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *AppKey) Reset()                    { *m = AppKey{} }
func (m *AppKey) String() string            { return proto1.CompactTextString(m) }
func (*AppKey) ProtoMessage()               {}
func (*AppKey) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

// Applications are created and uploaded by developers
// Only registered applications can access location and cloudlet services
type App struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key AppKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Path to the application binary on shared storage
	AppPath string `protobuf:"bytes,4,opt,name=app_path,json=appPath,proto3" json:"app_path,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto1.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func init() {
	proto1.RegisterType((*AppKey)(nil), "proto.AppKey")
	proto1.RegisterType((*App)(nil), "proto.App")
}
func (this *AppKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.AppKey{")
	s = append(s, "DeveloperKey: "+strings.Replace(this.DeveloperKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppApi service

type AppApiClient interface {
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error)
	ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error)
}

type appApiClient struct {
	cc *grpc.ClientConn
}

func NewAppApiClient(cc *grpc.ClientConn) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppApi/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppApi/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.AppApi/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) ShowApp(ctx context.Context, in *App, opts ...grpc.CallOption) (AppApi_ShowAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppApi_serviceDesc.Streams[0], c.cc, "/proto.AppApi/ShowApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appApiShowAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppApi_ShowAppClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type appApiShowAppClient struct {
	grpc.ClientStream
}

func (x *appApiShowAppClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppApi service

type AppApiServer interface {
	CreateApp(context.Context, *App) (*Result, error)
	DeleteApp(context.Context, *App) (*Result, error)
	UpdateApp(context.Context, *App) (*Result, error)
	ShowApp(*App, AppApi_ShowAppServer) error
}

func RegisterAppApiServer(s *grpc.Server, srv AppApiServer) {
	s.RegisterService(&_AppApi_serviceDesc, srv)
}

func _AppApi_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppApi/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppApi/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppApi/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_ShowApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(App)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppApiServer).ShowApp(m, &appApiShowAppServer{stream})
}

type AppApi_ShowAppServer interface {
	Send(*App) error
	grpc.ServerStream
}

type appApiShowAppServer struct {
	grpc.ServerStream
}

func (x *appApiShowAppServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

var _AppApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppApi_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppApi_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppApi_UpdateApp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowApp",
			Handler:       _AppApi_ShowApp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *AppKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.DeveloperKey.Size()))
	n1, err := m.DeveloperKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.AppPath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppPath)))
		i += copy(dAtA[i:], m.AppPath)
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppKey) Matches(filter *AppKey) bool {
	if filter == nil {
		return true
	}
	if !m.DeveloperKey.Matches(&filter.DeveloperKey) {
		return false
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	if filter.Version != "" && filter.Version != m.Version {
		return false
	}
	return true
}

func (m *AppKey) CopyInFields(src *AppKey) {
	m.DeveloperKey = src.DeveloperKey
	m.Name = src.Name
	m.Version = src.Version
}

func (m *AppKey) GetKeyString() string {
	s := make([]string, 0, 3)
	s = append(s, m.DeveloperKey.GetKeyString())
	s = append(s, m.Name)
	s = append(s, m.Version)
	return strings.Join(s, "/")
}

func (m *App) Matches(filter *App) bool {
	if filter == nil {
		return true
	}
	if !m.Key.Matches(&filter.Key) {
		return false
	}
	if filter.AppPath != "" && filter.AppPath != m.AppPath {
		return false
	}
	return true
}

const AppFieldFields uint = 1
const AppFieldKey uint = 2
const AppFieldAppPath uint = 4

func (m *App) CopyInFields(src *App) {
	if set, _ := util.GrpcFieldsGet(src.Fields, 2); set == true {
		m.Key = src.Key
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 4); set == true {
		m.AppPath = src.AppPath
	}
}

type AppCud interface {
	// Validate all fields for create/update
	Validate(in *App) error
	// Validate only key fields for delete
	ValidateKey(key *AppKey) error
	// Get key string for saving to persistent object storage
	GetObjStoreKeyString(key *AppKey) string
	// Object storage IO interface
	ObjStore
	// Refresh is called after create/update/delete to update in-memory cache
	Refresh(in *App, key string) error
	// Get key string for loading all objects of this type
	GetLoadKeyString() string
}

func (m *App) Create(cud AppCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	err = cud.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *App) Update(cud AppCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	var vers int64 = 0
	curBytes, vers, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var cur App
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	err = cud.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *App) Delete(cud AppCud) (*Result, error) {
	err := cud.ValidateKey(&m.Key)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	err = cud.Delete(key)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

type LoadAllAppsCb func(m *App) error

func LoadAllApps(cud AppCud, cb LoadAllAppsCb) error {
	loadkey := cud.GetLoadKeyString()
	err := cud.List(loadkey, func(key, val []byte) error {
		var obj App
		err := json.Unmarshal(val, &obj)
		if err != nil {
			util.WarnLog("Failed to parse App data", "val", string(val))
			return nil
		}
		err = cb(&obj)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func LoadOneApp(cud AppCud, key string) (*App, error) {
	val, _, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var obj App
	err = json.Unmarshal(val, &obj)
	if err != nil {
		util.DebugLog(util.DebugLevelApi, "Failed to parse App data", "val", string(val))
		return nil, err
	}
	return &obj, nil
}

func (m *App) GetKey() ObjKey {
	return &m.Key
}

func (m *AppKey) Size() (n int) {
	var l int
	_ = l
	l = m.DeveloperKey.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *App) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = m.Key.Size()
	n += 1 + l + sovApp(uint64(l))
	l = len(m.AppPath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x7b, 0x49, 0x48, 0x9a, 0x6b, 0x0a, 0xd5, 0x81, 0xaa, 0x53, 0x84, 0x92, 0xca, 0x12,
	0x52, 0x85, 0xd4, 0x18, 0x95, 0x05, 0x32, 0x54, 0x4a, 0xe8, 0xd6, 0x05, 0x19, 0x31, 0x57, 0x97,
	0xf8, 0xd5, 0xb6, 0x70, 0xfc, 0x9e, 0xec, 0x73, 0x4b, 0x56, 0x60, 0x60, 0xe7, 0x1f, 0xe0, 0x4f,
	0xe0, 0xcf, 0xc8, 0x88, 0xc4, 0x8e, 0x20, 0x62, 0x60, 0x44, 0x0a, 0x03, 0x23, 0xf2, 0xb3, 0x53,
	0x22, 0xb6, 0x2e, 0xf6, 0xfb, 0xee, 0xbe, 0xdf, 0xfb, 0x3e, 0xcb, 0xb2, 0x6d, 0x88, 0x06, 0x94,
	0xa2, 0x45, 0x75, 0x8b, 0x5f, 0xdd, 0xfb, 0x01, 0x62, 0x10, 0x83, 0x6b, 0x28, 0x72, 0x4d, 0x92,
	0xa0, 0x35, 0x36, 0xc2, 0x24, 0x2b, 0x4d, 0xdd, 0x4e, 0x0a, 0x59, 0x1e, 0xdb, 0x4a, 0x3d, 0x09,
	0x22, 0x1b, 0xe6, 0x93, 0xc1, 0x14, 0x67, 0xee, 0x0c, 0x27, 0x51, 0x0c, 0x7e, 0x00, 0xaf, 0xdd,
	0xe2, 0x79, 0x34, 0x8d, 0x31, 0xf7, 0x5d, 0xf6, 0x05, 0x90, 0x5c, 0x0f, 0x15, 0x79, 0xc7, 0x87,
	0x4b, 0x88, 0x91, 0x20, 0xad, 0x0e, 0x8e, 0x36, 0x56, 0x05, 0x18, 0x60, 0x09, 0x4c, 0xf2, 0x0b,
	0x56, 0x2c, 0x78, 0x2a, 0xed, 0xce, 0x3b, 0x21, 0x9b, 0x23, 0xa2, 0x33, 0x98, 0xab, 0x13, 0xb9,
	0x7b, 0xbd, 0xec, 0xfc, 0x15, 0xcc, 0xb5, 0x38, 0x10, 0x87, 0x3b, 0xc7, 0x77, 0x4b, 0xe7, 0xe0,
	0x74, 0x7d, 0x77, 0x06, 0xf3, 0x71, 0x63, 0xf1, 0xb5, 0xbf, 0xe5, 0x75, 0xfc, 0x8d, 0x33, 0xa5,
	0x64, 0x23, 0x31, 0x33, 0xd0, 0xb5, 0x03, 0x71, 0xd8, 0xf6, 0x78, 0x56, 0x5a, 0xb6, 0x2e, 0x21,
	0xcd, 0x22, 0x4c, 0x74, 0x9d, 0x8f, 0xd7, 0x72, 0xd8, 0xf9, 0xb9, 0xd2, 0xe2, 0xcf, 0x4a, 0x8b,
	0x4f, 0x1f, 0xfb, 0xc2, 0x41, 0x59, 0x1f, 0x11, 0xa9, 0x7d, 0xd9, 0xbc, 0x88, 0x20, 0xf6, 0x33,
	0xce, 0xee, 0x78, 0x95, 0x52, 0x0f, 0x64, 0xbd, 0x28, 0x54, 0xe3, 0x42, 0xbb, 0x55, 0xa1, 0xb2,
	0x76, 0x55, 0xa5, 0xb8, 0x57, 0x7d, 0xb9, 0x6d, 0x88, 0xce, 0xc9, 0xd8, 0x50, 0x37, 0x8a, 0xb8,
	0x71, 0xe3, 0xfd, 0x6f, 0x2d, 0xbc, 0x96, 0x21, 0x7a, 0x6e, 0x6c, 0x38, 0xdc, 0x2e, 0x42, 0x7f,
	0xad, 0xb4, 0x38, 0x7e, 0x5b, 0xe3, 0xef, 0x1e, 0x51, 0xa4, 0x4e, 0x64, 0xfb, 0x59, 0x0a, 0xc6,
	0x42, 0xd1, 0x40, 0xfe, 0x5b, 0xde, 0x5d, 0x07, 0x79, 0xfc, 0xab, 0x9c, 0xfd, 0x37, 0x5f, 0x7e,
	0x7c, 0xa8, 0xed, 0x39, 0x3b, 0xee, 0x94, 0xed, 0xae, 0x21, 0x1a, 0x8a, 0x87, 0x05, 0x7f, 0x0a,
	0x31, 0xdc, 0x80, 0xf7, 0xd9, 0xbe, 0xc1, 0xbf, 0x24, 0xff, 0x26, 0xf9, 0x39, 0xdb, 0xd7, 0xfc,
	0x53, 0xd9, 0x7a, 0x11, 0xe2, 0xd5, 0xff, 0xf4, 0xc6, 0xec, 0xdc, 0x63, 0xf4, 0xb6, 0xd3, 0x76,
	0xb3, 0x10, 0xaf, 0x2a, 0xf0, 0x91, 0x18, 0xef, 0x2d, 0xbe, 0xf7, 0xb6, 0x16, 0xcb, 0x9e, 0xf8,
	0xbc, 0xec, 0x89, 0x6f, 0xcb, 0x9e, 0x98, 0x34, 0x19, 0x7a, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xd1, 0xcc, 0x3d, 0xa2, 0xd0, 0x02, 0x00, 0x00,
}
