// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloudlet.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import "encoding/json"
import "github.com/mobiledgex/edge-cloud/util"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CloudletKey struct {
	// Operator of the cloudlet site
	OperatorKey OperatorKey `protobuf:"bytes,1,opt,name=operator_key,json=operatorKey" json:"operator_key"`
	// Name of the cloudlet
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CloudletKey) Reset()                    { *m = CloudletKey{} }
func (m *CloudletKey) String() string            { return proto1.CompactTextString(m) }
func (*CloudletKey) ProtoMessage()               {}
func (*CloudletKey) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{0} }

// Cloudlet Sites are created and uploaded by Operators
// This information is used to connect to and manage Cloudlets
type Cloudlet struct {
	Fields []byte `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Unique identifier key
	Key CloudletKey `protobuf:"bytes,2,opt,name=key" json:"key"`
	// IP to use to connect to and control cloudlet site
	AccessIp []byte `protobuf:"bytes,4,opt,name=access_ip,json=accessIp,proto3" json:"access_ip,omitempty"`
	// Location of the cloudlet site (lat, long?)
	Location Loc `protobuf:"bytes,5,opt,name=location" json:"location"`
}

func (m *Cloudlet) Reset()                    { *m = Cloudlet{} }
func (m *Cloudlet) String() string            { return proto1.CompactTextString(m) }
func (*Cloudlet) ProtoMessage()               {}
func (*Cloudlet) Descriptor() ([]byte, []int) { return fileDescriptorCloudlet, []int{1} }

func init() {
	proto1.RegisterType((*CloudletKey)(nil), "proto.CloudletKey")
	proto1.RegisterType((*Cloudlet)(nil), "proto.Cloudlet")
}
func (this *CloudletKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.CloudletKey{")
	s = append(s, "OperatorKey: "+strings.Replace(this.OperatorKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCloudlet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CloudletApi service

type CloudletApiClient interface {
	CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error)
	DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error)
	UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error)
	ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error)
}

type cloudletApiClient struct {
	cc *grpc.ClientConn
}

func NewCloudletApiClient(cc *grpc.ClientConn) CloudletApiClient {
	return &cloudletApiClient{cc}
}

func (c *cloudletApiClient) CreateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.CloudletApi/CreateCloudlet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletApiClient) DeleteCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.CloudletApi/DeleteCloudlet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletApiClient) UpdateCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.CloudletApi/UpdateCloudlet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudletApiClient) ShowCloudlet(ctx context.Context, in *Cloudlet, opts ...grpc.CallOption) (CloudletApi_ShowCloudletClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CloudletApi_serviceDesc.Streams[0], c.cc, "/proto.CloudletApi/ShowCloudlet", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudletApiShowCloudletClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudletApi_ShowCloudletClient interface {
	Recv() (*Cloudlet, error)
	grpc.ClientStream
}

type cloudletApiShowCloudletClient struct {
	grpc.ClientStream
}

func (x *cloudletApiShowCloudletClient) Recv() (*Cloudlet, error) {
	m := new(Cloudlet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CloudletApi service

type CloudletApiServer interface {
	CreateCloudlet(context.Context, *Cloudlet) (*Result, error)
	DeleteCloudlet(context.Context, *Cloudlet) (*Result, error)
	UpdateCloudlet(context.Context, *Cloudlet) (*Result, error)
	ShowCloudlet(*Cloudlet, CloudletApi_ShowCloudletServer) error
}

func RegisterCloudletApiServer(s *grpc.Server, srv CloudletApiServer) {
	s.RegisterService(&_CloudletApi_serviceDesc, srv)
}

func _CloudletApi_CreateCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cloudlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).CreateCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudletApi/CreateCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).CreateCloudlet(ctx, req.(*Cloudlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletApi_DeleteCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cloudlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).DeleteCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudletApi/DeleteCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).DeleteCloudlet(ctx, req.(*Cloudlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletApi_UpdateCloudlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cloudlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudletApiServer).UpdateCloudlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CloudletApi/UpdateCloudlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudletApiServer).UpdateCloudlet(ctx, req.(*Cloudlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudletApi_ShowCloudlet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cloudlet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudletApiServer).ShowCloudlet(m, &cloudletApiShowCloudletServer{stream})
}

type CloudletApi_ShowCloudletServer interface {
	Send(*Cloudlet) error
	grpc.ServerStream
}

type cloudletApiShowCloudletServer struct {
	grpc.ServerStream
}

func (x *cloudletApiShowCloudletServer) Send(m *Cloudlet) error {
	return x.ServerStream.SendMsg(m)
}

var _CloudletApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudletApi",
	HandlerType: (*CloudletApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudlet",
			Handler:    _CloudletApi_CreateCloudlet_Handler,
		},
		{
			MethodName: "DeleteCloudlet",
			Handler:    _CloudletApi_DeleteCloudlet_Handler,
		},
		{
			MethodName: "UpdateCloudlet",
			Handler:    _CloudletApi_UpdateCloudlet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCloudlet",
			Handler:       _CloudletApi_ShowCloudlet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudlet.proto",
}

func (m *CloudletKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudletKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.OperatorKey.Size()))
	n1, err := m.OperatorKey.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Cloudlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cloudlet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Key.Size()))
	n2, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.AccessIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCloudlet(dAtA, i, uint64(len(m.AccessIp)))
		i += copy(dAtA[i:], m.AccessIp)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCloudlet(dAtA, i, uint64(m.Location.Size()))
	n3, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintCloudlet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CloudletKey) Matches(filter *CloudletKey) bool {
	if filter == nil {
		return true
	}
	if !m.OperatorKey.Matches(&filter.OperatorKey) {
		return false
	}
	if filter.Name != "" && filter.Name != m.Name {
		return false
	}
	return true
}

func (m *CloudletKey) CopyInFields(src *CloudletKey) {
	m.OperatorKey = src.OperatorKey
	m.Name = src.Name
}

func (m *CloudletKey) GetKeyString() string {
	s := make([]string, 0, 2)
	s = append(s, m.OperatorKey.GetKeyString())
	s = append(s, m.Name)
	return strings.Join(s, "/")
}

func (m *Cloudlet) Matches(filter *Cloudlet) bool {
	if filter == nil {
		return true
	}
	if !m.Key.Matches(&filter.Key) {
		return false
	}
	if !m.Location.Matches(&filter.Location) {
		return false
	}
	return true
}

const CloudletFieldFields uint = 1
const CloudletFieldKey uint = 2
const CloudletFieldAccessIp uint = 4
const CloudletFieldLocation uint = 5

func (m *Cloudlet) CopyInFields(src *Cloudlet) {
	if set, _ := util.GrpcFieldsGet(src.Fields, 2); set == true {
		m.Key = src.Key
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 4); set == true {
		copy(m.AccessIp, src.AccessIp)
	}
	if set, _ := util.GrpcFieldsGet(src.Fields, 5); set == true {
		m.Location = src.Location
	}
}

type CloudletCud interface {
	// Validate all fields for create/update
	Validate(in *Cloudlet) error
	// Validate only key fields for delete
	ValidateKey(key *CloudletKey) error
	// Get key string for saving to persistent object storage
	GetObjStoreKeyString(key *CloudletKey) string
	// Object storage IO interface
	ObjStore
	// Refresh is called after create/update/delete to update in-memory cache
	Refresh(in *Cloudlet, key string) error
	// Get key string for loading all objects of this type
	GetLoadKeyString() string
}

func (m *Cloudlet) Create(cud CloudletCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	val, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	err = cud.Create(key, string(val))
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Cloudlet) Update(cud CloudletCud) (*Result, error) {
	err := cud.Validate(m)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	var vers int64 = 0
	curBytes, vers, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var cur Cloudlet
	err = json.Unmarshal(curBytes, &cur)
	if err != nil {
		return nil, err
	}
	cur.CopyInFields(m)
	// never save fields
	cur.Fields = nil
	val, err := json.Marshal(cur)
	if err != nil {
		return nil, err
	}
	err = cud.Update(key, string(val), vers)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

func (m *Cloudlet) Delete(cud CloudletCud) (*Result, error) {
	err := cud.ValidateKey(&m.Key)
	if err != nil {
		return nil, err
	}
	key := cud.GetObjStoreKeyString(&m.Key)
	err = cud.Delete(key)
	if err != nil {
		return nil, err
	}
	err = cud.Refresh(m, key)
	return &Result{}, err
}

type LoadAllCloudletsCb func(m *Cloudlet) error

func LoadAllCloudlets(cud CloudletCud, cb LoadAllCloudletsCb) error {
	loadkey := cud.GetLoadKeyString()
	err := cud.List(loadkey, func(key, val []byte) error {
		var obj Cloudlet
		err := json.Unmarshal(val, &obj)
		if err != nil {
			util.WarnLog("Failed to parse Cloudlet data", "val", string(val))
			return nil
		}
		err = cb(&obj)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func LoadOneCloudlet(cud CloudletCud, key string) (*Cloudlet, error) {
	val, _, err := cud.Get(key)
	if err != nil {
		return nil, err
	}
	var obj Cloudlet
	err = json.Unmarshal(val, &obj)
	if err != nil {
		util.DebugLog(util.DebugLevelApi, "Failed to parse Cloudlet data", "val", string(val))
		return nil, err
	}
	return &obj, nil
}

func (m *Cloudlet) GetKey() ObjKey {
	return &m.Key
}

func (m *CloudletKey) Size() (n int) {
	var l int
	_ = l
	l = m.OperatorKey.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	return n
}

func (m *Cloudlet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = m.Key.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	l = len(m.AccessIp)
	if l > 0 {
		n += 1 + l + sovCloudlet(uint64(l))
	}
	l = m.Location.Size()
	n += 1 + l + sovCloudlet(uint64(l))
	return n
}

func sovCloudlet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCloudlet(x uint64) (n int) {
	return sovCloudlet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CloudletKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudletKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudletKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cloudlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cloudlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cloudlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields[:0], dAtA[iNdEx:postIndex]...)
			if m.Fields == nil {
				m.Fields = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessIp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessIp = append(m.AccessIp[:0], dAtA[iNdEx:postIndex]...)
			if m.AccessIp == nil {
				m.AccessIp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCloudlet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCloudlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCloudlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCloudlet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCloudlet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCloudlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCloudlet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCloudlet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCloudlet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCloudlet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCloudlet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("cloudlet.proto", fileDescriptorCloudlet) }

var fileDescriptorCloudlet = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0x21, 0xad, 0x92, 0x8d, 0x49, 0x61, 0x85, 0x2a, 0xcb, 0x54, 0x6e, 0xe5, 0x53,
	0x55, 0xd1, 0x2c, 0x2a, 0x17, 0x14, 0x4e, 0xb4, 0x5c, 0x50, 0x11, 0x48, 0x46, 0x9c, 0x2b, 0x7b,
	0x3d, 0x75, 0x2c, 0x36, 0x1e, 0xcb, 0x7f, 0x28, 0xb9, 0xf2, 0x0a, 0xbc, 0x00, 0x12, 0x2f, 0xc0,
	0x63, 0xe4, 0x82, 0x84, 0xc4, 0x1d, 0x41, 0xc4, 0x81, 0x23, 0x52, 0x2e, 0x1c, 0x91, 0xc7, 0xdb,
	0xb4, 0x0d, 0xe2, 0x92, 0x8b, 0x3d, 0x33, 0xfe, 0xe6, 0xf7, 0x7d, 0xde, 0xe5, 0x7d, 0xa5, 0xb1,
	0x8a, 0x34, 0x94, 0x83, 0x2c, 0xc7, 0x12, 0xc5, 0x3a, 0xbd, 0x9c, 0xed, 0x18, 0x31, 0xd6, 0x20,
	0x83, 0x2c, 0x91, 0x41, 0x9a, 0x62, 0x19, 0x94, 0x09, 0xa6, 0x45, 0x23, 0x72, 0x1e, 0xc6, 0x49,
	0x39, 0xaa, 0xc2, 0x81, 0xc2, 0xb1, 0x1c, 0x63, 0x98, 0x68, 0x88, 0x62, 0x78, 0x2b, 0xeb, 0xe7,
	0x01, 0xf1, 0x24, 0xe9, 0x62, 0x48, 0x17, 0x85, 0xd9, 0xec, 0x63, 0x06, 0x79, 0x50, 0x62, 0x6e,
	0x7a, 0x2b, 0x87, 0xa2, 0xd2, 0xc6, 0xdc, 0xe9, 0x6a, 0x54, 0xa6, 0x3c, 0xb8, 0x62, 0x11, 0x63,
	0x8c, 0x0d, 0x28, 0xac, 0xce, 0xa8, 0xa3, 0x86, 0xaa, 0x46, 0xee, 0x69, 0xde, 0x3b, 0x36, 0x3f,
	0x72, 0x02, 0x13, 0xf1, 0x88, 0x5b, 0x17, 0x46, 0xa7, 0xaf, 0x61, 0x62, 0xb3, 0x5d, 0xb6, 0xd7,
	0x3b, 0x14, 0x8d, 0x78, 0xf0, 0xc2, 0x7c, 0x3a, 0x81, 0xc9, 0x51, 0x7b, 0xfa, 0x6d, 0x67, 0xcd,
	0xef, 0xe1, 0xe5, 0x48, 0x08, 0xde, 0x4e, 0x83, 0x31, 0xd8, 0xad, 0x5d, 0xb6, 0xd7, 0xf5, 0xa9,
	0x1e, 0x5a, 0xbf, 0xe6, 0x36, 0xfb, 0x33, 0xb7, 0xd9, 0xa7, 0x0f, 0x3b, 0xcc, 0xfb, 0xc8, 0x78,
	0xe7, 0xc2, 0x4e, 0x6c, 0xf1, 0x8d, 0xb3, 0x04, 0x74, 0x54, 0x90, 0x8b, 0xe5, 0x9b, 0x4e, 0xec,
	0xf3, 0x1b, 0xb5, 0x75, 0xeb, 0x9a, 0xf5, 0x95, 0x90, 0xc6, 0xba, 0x16, 0x89, 0xbb, 0xbc, 0x1b,
	0x28, 0x05, 0x45, 0x71, 0x9a, 0x64, 0x76, 0x9b, 0x30, 0x9d, 0x66, 0xf0, 0x34, 0x13, 0xf7, 0x78,
	0x47, 0xa3, 0xa2, 0x0b, 0xb0, 0xd7, 0x89, 0xc6, 0x0d, 0xed, 0x19, 0x2a, 0x43, 0x59, 0x28, 0x86,
	0x9d, 0x3a, 0xe9, 0xef, 0xb9, 0xcd, 0x0e, 0x3f, 0xb7, 0x2e, 0x0f, 0xe5, 0x71, 0x96, 0x88, 0xe7,
	0xbc, 0x7f, 0x9c, 0x43, 0x50, 0xc2, 0x22, 0xfa, 0xe6, 0x52, 0x2a, 0xe7, 0xa6, 0x19, 0xf8, 0x74,
	0x2b, 0xde, 0xf6, 0xbb, 0xaf, 0x3f, 0xdf, 0xb7, 0xb6, 0xbc, 0xdb, 0x52, 0xd1, 0xa2, 0x8c, 0xe0,
	0x0d, 0xe8, 0xfa, 0xac, 0x86, 0x6c, 0xbf, 0xe6, 0x3d, 0x01, 0x0d, 0x2b, 0xf1, 0x22, 0x5a, 0xfc,
	0x87, 0xf7, 0x2a, 0x8b, 0x56, 0xcb, 0x57, 0xd1, 0xe2, 0x32, 0xcf, 0x7a, 0x39, 0xc2, 0xf3, 0xff,
	0xd3, 0x96, 0x07, 0x9e, 0x43, 0xbc, 0x3b, 0xde, 0xa6, 0x2c, 0x46, 0x78, 0x7e, 0x8d, 0x76, 0x9f,
	0x1d, 0xdd, 0x9a, 0xfe, 0x70, 0xd7, 0xa6, 0x33, 0x97, 0x7d, 0x99, 0xb9, 0xec, 0xfb, 0xcc, 0x65,
	0xe1, 0x06, 0xed, 0x3f, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x58, 0x9a, 0xda, 0xf1, 0x45, 0x03,
	0x00, 0x00,
}
