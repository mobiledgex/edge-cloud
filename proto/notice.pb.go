// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notice.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/mobiledgex/edge-cloud/protogen"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NoticeAction int32

const (
	NoticeAction_NONE        NoticeAction = 0
	NoticeAction_UPDATE      NoticeAction = 1
	NoticeAction_DELETE      NoticeAction = 2
	NoticeAction_VERSION     NoticeAction = 3
	NoticeAction_SENDALL_END NoticeAction = 4
)

var NoticeAction_name = map[int32]string{
	0: "NONE",
	1: "UPDATE",
	2: "DELETE",
	3: "VERSION",
	4: "SENDALL_END",
}
var NoticeAction_value = map[string]int32{
	"NONE":        0,
	"UPDATE":      1,
	"DELETE":      2,
	"VERSION":     3,
	"SENDALL_END": 4,
}

func (x NoticeAction) String() string {
	return proto1.EnumName(NoticeAction_name, int32(x))
}
func (NoticeAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

type Notice struct {
	// action to perform
	Action NoticeAction `protobuf:"varint,1,opt,name=action,proto3,enum=proto.NoticeAction" json:"action,omitempty"`
	// connect count, used to ignore invalid buffered messages
	ConnectionId uint64 `protobuf:"varint,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	// protocol version supported by sender
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// data included (for UPDATE and DELETE)
	//
	// Types that are valid to be assigned to Data:
	//	*Notice_AppInst
	//	*Notice_Cloudlet
	Data isNotice_Data `protobuf_oneof:"data"`
}

func (m *Notice) Reset()                    { *m = Notice{} }
func (m *Notice) String() string            { return proto1.CompactTextString(m) }
func (*Notice) ProtoMessage()               {}
func (*Notice) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

type isNotice_Data interface {
	isNotice_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Notice_AppInst struct {
	AppInst *AppInst `protobuf:"bytes,4,opt,name=appInst,oneof"`
}
type Notice_Cloudlet struct {
	Cloudlet *Cloudlet `protobuf:"bytes,5,opt,name=cloudlet,oneof"`
}

func (*Notice_AppInst) isNotice_Data()  {}
func (*Notice_Cloudlet) isNotice_Data() {}

func (m *Notice) GetData() isNotice_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Notice) GetAppInst() *AppInst {
	if x, ok := m.GetData().(*Notice_AppInst); ok {
		return x.AppInst
	}
	return nil
}

func (m *Notice) GetCloudlet() *Cloudlet {
	if x, ok := m.GetData().(*Notice_Cloudlet); ok {
		return x.Cloudlet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Notice) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Notice_OneofMarshaler, _Notice_OneofUnmarshaler, _Notice_OneofSizer, []interface{}{
		(*Notice_AppInst)(nil),
		(*Notice_Cloudlet)(nil),
	}
}

func _Notice_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Notice)
	// data
	switch x := m.Data.(type) {
	case *Notice_AppInst:
		_ = b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.AppInst); err != nil {
			return err
		}
	case *Notice_Cloudlet:
		_ = b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Cloudlet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Notice.Data has unexpected type %T", x)
	}
	return nil
}

func _Notice_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Notice)
	switch tag {
	case 4: // data.appInst
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(AppInst)
		err := b.DecodeMessage(msg)
		m.Data = &Notice_AppInst{msg}
		return true, err
	case 5: // data.cloudlet
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Cloudlet)
		err := b.DecodeMessage(msg)
		m.Data = &Notice_Cloudlet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Notice_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Notice)
	// data
	switch x := m.Data.(type) {
	case *Notice_AppInst:
		s := proto1.Size(x.AppInst)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Notice_Cloudlet:
		s := proto1.Size(x.Cloudlet)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NoticeReply struct {
	// action
	Action NoticeAction `protobuf:"varint,1,opt,name=action,proto3,enum=proto.NoticeAction" json:"action,omitempty"`
	// protocol version supported by receiver
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *NoticeReply) Reset()                    { *m = NoticeReply{} }
func (m *NoticeReply) String() string            { return proto1.CompactTextString(m) }
func (*NoticeReply) ProtoMessage()               {}
func (*NoticeReply) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{1} }

func init() {
	proto1.RegisterType((*Notice)(nil), "proto.Notice")
	proto1.RegisterType((*NoticeReply)(nil), "proto.NoticeReply")
	proto1.RegisterEnum("proto.NoticeAction", NoticeAction_name, NoticeAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NotifyApi service

type NotifyApiClient interface {
	// Send update is used to send database changes to other nodes
	StreamNotice(ctx context.Context, opts ...grpc.CallOption) (NotifyApi_StreamNoticeClient, error)
}

type notifyApiClient struct {
	cc *grpc.ClientConn
}

func NewNotifyApiClient(cc *grpc.ClientConn) NotifyApiClient {
	return &notifyApiClient{cc}
}

func (c *notifyApiClient) StreamNotice(ctx context.Context, opts ...grpc.CallOption) (NotifyApi_StreamNoticeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NotifyApi_serviceDesc.Streams[0], c.cc, "/proto.NotifyApi/StreamNotice", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifyApiStreamNoticeClient{stream}
	return x, nil
}

type NotifyApi_StreamNoticeClient interface {
	Send(*Notice) error
	Recv() (*NoticeReply, error)
	grpc.ClientStream
}

type notifyApiStreamNoticeClient struct {
	grpc.ClientStream
}

func (x *notifyApiStreamNoticeClient) Send(m *Notice) error {
	return x.ClientStream.SendMsg(m)
}

func (x *notifyApiStreamNoticeClient) Recv() (*NoticeReply, error) {
	m := new(NoticeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NotifyApi service

type NotifyApiServer interface {
	// Send update is used to send database changes to other nodes
	StreamNotice(NotifyApi_StreamNoticeServer) error
}

func RegisterNotifyApiServer(s *grpc.Server, srv NotifyApiServer) {
	s.RegisterService(&_NotifyApi_serviceDesc, srv)
}

func _NotifyApi_StreamNotice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NotifyApiServer).StreamNotice(&notifyApiStreamNoticeServer{stream})
}

type NotifyApi_StreamNoticeServer interface {
	Send(*NoticeReply) error
	Recv() (*Notice, error)
	grpc.ServerStream
}

type notifyApiStreamNoticeServer struct {
	grpc.ServerStream
}

func (x *notifyApiStreamNoticeServer) Send(m *NoticeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *notifyApiStreamNoticeServer) Recv() (*Notice, error) {
	m := new(Notice)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NotifyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotifyApi",
	HandlerType: (*NotifyApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotice",
			Handler:       _NotifyApi_StreamNotice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "notice.proto",
}

func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Action))
	}
	if m.ConnectionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.ConnectionId))
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Version))
	}
	if m.Data != nil {
		nn1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Notice_AppInst) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppInst != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.AppInst.Size()))
		n2, err := m.AppInst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Notice_Cloudlet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cloudlet != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Cloudlet.Size()))
		n3, err := m.Cloudlet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *NoticeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Action))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNotice(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Notice) CopyInFields(src *Notice) {
	m.Action = src.Action
	m.ConnectionId = src.ConnectionId
	m.Version = src.Version
}

func (m *NoticeReply) CopyInFields(src *NoticeReply) {
	m.Action = src.Action
	m.Version = src.Version
}

func (m *Notice) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovNotice(uint64(m.Action))
	}
	if m.ConnectionId != 0 {
		n += 1 + sovNotice(uint64(m.ConnectionId))
	}
	if m.Version != 0 {
		n += 1 + sovNotice(uint64(m.Version))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Notice_AppInst) Size() (n int) {
	var l int
	_ = l
	if m.AppInst != nil {
		l = m.AppInst.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *Notice_Cloudlet) Size() (n int) {
	var l int
	_ = l
	if m.Cloudlet != nil {
		l = m.Cloudlet.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}
func (m *NoticeReply) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovNotice(uint64(m.Action))
	}
	if m.Version != 0 {
		n += 1 + sovNotice(uint64(m.Version))
	}
	return n
}

func sovNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (NoticeAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			m.ConnectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppInst{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Notice_AppInst{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloudlet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cloudlet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Notice_Cloudlet{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (NoticeAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("notice.proto", fileDescriptorNotice) }

var fileDescriptorNotice = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x41, 0x6f, 0x9b, 0x30,
	0x14, 0xc7, 0x71, 0x4a, 0x49, 0xf7, 0x92, 0xa6, 0xc8, 0xbb, 0xa0, 0x68, 0x8a, 0xa2, 0x9c, 0x50,
	0xa7, 0x84, 0x29, 0x3b, 0x6c, 0x57, 0x3a, 0x2c, 0x35, 0x52, 0x44, 0x27, 0x92, 0xed, 0x5a, 0x19,
	0x70, 0x19, 0x12, 0xb1, 0xad, 0xe0, 0x4c, 0xeb, 0x37, 0xec, 0x71, 0xa7, 0x9d, 0xb7, 0x7c, 0x92,
	0x09, 0x03, 0x51, 0x38, 0xf6, 0x62, 0xbf, 0xff, 0x7b, 0xbf, 0xf7, 0xfc, 0x7f, 0x32, 0x0c, 0xb9,
	0x50, 0x79, 0xc2, 0x16, 0x72, 0x2f, 0x94, 0xc0, 0x97, 0xfa, 0x1a, 0xbf, 0xcb, 0x84, 0xc8, 0x0a,
	0xe6, 0x51, 0x99, 0x7b, 0x94, 0x73, 0xa1, 0xa8, 0xca, 0x05, 0x2f, 0x6b, 0x68, 0xfc, 0x39, 0xcb,
	0xd5, 0x8f, 0x43, 0xbc, 0x48, 0xc4, 0xce, 0xdb, 0x89, 0x38, 0x2f, 0x58, 0x9a, 0xb1, 0x5f, 0x5e,
	0x75, 0xce, 0x93, 0x42, 0x1c, 0x52, 0x4f, 0x73, 0x19, 0xe3, 0xa7, 0xa0, 0xe9, 0x1c, 0x51, 0x29,
	0x1f, 0x73, 0x5e, 0xaa, 0x56, 0x6b, 0xbc, 0x60, 0xad, 0x9e, 0x9f, 0x4d, 0xce, 0x44, 0x26, 0xea,
	0xfe, 0xf8, 0xf0, 0xa4, 0x95, 0x16, 0x3a, 0xaa, 0xf1, 0xd9, 0x1f, 0x04, 0x56, 0xa8, 0xed, 0xe3,
	0xf7, 0x60, 0xd1, 0xa4, 0x32, 0xe9, 0xa0, 0x29, 0x72, 0x47, 0xcb, 0xb7, 0x35, 0xb2, 0xa8, 0xcb,
	0xbe, 0x2e, 0x45, 0x0d, 0x82, 0x67, 0x30, 0x4c, 0x04, 0xe7, 0x4c, 0xab, 0x55, 0xea, 0xf4, 0xa6,
	0xc8, 0x35, 0xa3, 0x4e, 0x0e, 0x3b, 0xd0, 0xff, 0xc9, 0xf6, 0x65, 0x35, 0xf1, 0x62, 0x8a, 0xdc,
	0xeb, 0xa8, 0x95, 0xf8, 0x16, 0xfa, 0x54, 0xca, 0x15, 0x2f, 0x95, 0x63, 0x4e, 0x91, 0x3b, 0x58,
	0x8e, 0x9a, 0xb7, 0xfc, 0x3a, 0x7b, 0x6f, 0x44, 0x2d, 0x80, 0xe7, 0x70, 0xd5, 0xae, 0xe8, 0x5c,
	0x6a, 0xf8, 0xa6, 0x81, 0xbf, 0x34, 0xe9, 0x7b, 0x23, 0x3a, 0x21, 0x77, 0x16, 0x98, 0x29, 0x55,
	0x74, 0xb6, 0x85, 0x41, 0x6d, 0x3c, 0x62, 0xb2, 0x78, 0x7e, 0xdd, 0x72, 0x67, 0xc6, 0x7b, 0x1d,
	0xe3, 0xb7, 0x21, 0x0c, 0xcf, 0x3b, 0xf0, 0x15, 0x98, 0xe1, 0x43, 0x48, 0x6c, 0x03, 0x03, 0x58,
	0xdf, 0xbe, 0x06, 0xfe, 0x96, 0xd8, 0xa8, 0x8a, 0x03, 0xb2, 0x26, 0x5b, 0x62, 0xf7, 0xf0, 0x00,
	0xfa, 0xdf, 0x49, 0xb4, 0x59, 0x3d, 0x84, 0xf6, 0x05, 0xbe, 0x81, 0xc1, 0x86, 0x84, 0x81, 0xbf,
	0x5e, 0x3f, 0x92, 0x30, 0xb0, 0xcd, 0x65, 0x00, 0x6f, 0xaa, 0x79, 0x4f, 0xcf, 0xbe, 0xcc, 0xf1,
	0x27, 0x18, 0x6e, 0xd4, 0x9e, 0xd1, 0x5d, 0xf3, 0x21, 0xd7, 0x1d, 0x8f, 0x63, 0xdc, 0x91, 0x7a,
	0xad, 0x99, 0xe1, 0xa2, 0x0f, 0xe8, 0xce, 0x7e, 0xf9, 0x37, 0x31, 0x5e, 0x8e, 0x13, 0xf4, 0xfb,
	0x38, 0x41, 0x7f, 0x8f, 0x13, 0x14, 0x5b, 0x1a, 0xfd, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x66,
	0x0e, 0xfb, 0x03, 0x9b, 0x02, 0x00, 0x00,
}
