// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

package main

import (
	"context"
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
	"github.com/mobiledgex/edge-cloud/edgeproto"
	"github.com/mobiledgex/edge-cloud/objstore"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	"github.com/stretchr/testify/require"
	math "math"
	"testing"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

// AppStoreTracker wraps around the usual
// store to track the STM used for gets/puts.
type AppStoreTracker struct {
	edgeproto.AppStore
	getSTM concurrency.STM
	putSTM concurrency.STM
}

// Wrap the Api's store with a tracker store.
// Returns the tracker store, and the unwrap function to defer.
func wrapAppTrackerStore(api *AppApi) (*AppStoreTracker, func()) {
	orig := api.store
	tracker := &AppStoreTracker{
		AppStore: api.store,
	}
	api.store = tracker
	unwrap := func() {
		api.store = orig
	}
	return tracker, unwrap
}

func (s *AppStoreTracker) STMGet(stm concurrency.STM, key *edgeproto.AppKey, buf *edgeproto.App) bool {
	found := s.AppStore.STMGet(stm, key, buf)
	if s.getSTM == nil {
		s.getSTM = stm
	}
	return found
}

func (s *AppStoreTracker) STMPut(stm concurrency.STM, obj *edgeproto.App, ops ...objstore.KVOp) {
	s.AppStore.STMPut(stm, obj, ops...)
	if s.putSTM == nil {
		s.putSTM = stm
	}
}

// Caller must write by hand the test data generator.
// Each Ref object should only have a single reference to the key,
// in order to properly test each reference (i.e. don't have a single
// object that has multiple references).
type AppDeleteDataGen interface {
	GetAppTestObj() (*edgeproto.App, *testSupportData)
	GetTrustPolicyExceptionKeyAppKeyRef(key *edgeproto.AppKey) (*edgeproto.TrustPolicyException, *testSupportData)
	GetAppAppInstInstsRef(key *edgeproto.AppKey) (*edgeproto.AppInstRefs, *testSupportData)
}

// AppDeleteStore wraps around the usual
// store to instrument checks and inject data while
// the delete api code is running.
type AppDeleteStore struct {
	edgeproto.AppStore
	t                   *testing.T
	allApis             *AllApis
	putDeletePrepare    bool
	putDeletePrepareCb  func()
	putDeletePrepareSTM concurrency.STM
}

func (s *AppDeleteStore) Put(ctx context.Context, m *edgeproto.App, wait func(int64), ops ...objstore.KVOp) (*edgeproto.Result, error) {
	if wait != nil {
		s.putDeletePrepare = m.DeletePrepare
	}
	res, err := s.AppStore.Put(ctx, m, wait, ops...)
	if s.putDeletePrepare && s.putDeletePrepareCb != nil {
		s.putDeletePrepareCb()
	}
	return res, err
}

func (s *AppDeleteStore) STMPut(stm concurrency.STM, obj *edgeproto.App, ops ...objstore.KVOp) {
	// there's an assumption that this is run within an ApplySTMWait,
	// where we wait for the caches to be updated with the transaction.
	if obj.DeletePrepare {
		s.putDeletePrepare = true
		s.putDeletePrepareSTM = stm
	} else {
		s.putDeletePrepare = false
		s.putDeletePrepareSTM = nil
	}
	s.AppStore.STMPut(stm, obj, ops...)
	if s.putDeletePrepare && s.putDeletePrepareCb != nil {
		s.putDeletePrepareCb()
	}
}

func (s *AppDeleteStore) Delete(ctx context.Context, m *edgeproto.App, wait func(int64)) (*edgeproto.Result, error) {
	require.True(s.t, s.putDeletePrepare, "DeletePrepare must be comitted to database with a sync.Wait before deleting")
	return s.AppStore.Delete(ctx, m, wait)
}

func (s *AppDeleteStore) STMDel(stm concurrency.STM, key *edgeproto.AppKey) {
	require.True(s.t, s.putDeletePrepare, "DeletePrepare must be comitted to database with a sync.Wait before deleting")
	s.AppStore.STMDel(stm, key)
}

func (s *AppDeleteStore) requireUndoDeletePrepare(ctx context.Context, obj *edgeproto.App) {
	deletePrepare := s.getDeletePrepare(ctx, obj)
	require.False(s.t, deletePrepare, "must undo delete prepare field on failure")
}

func (s *AppDeleteStore) getDeletePrepare(ctx context.Context, obj *edgeproto.App) bool {
	buf := edgeproto.App{}
	found := s.Get(ctx, obj.GetKey(), &buf)
	require.True(s.t, found, "expected test object to be found")
	return buf.DeletePrepare
}

func deleteAppChecks(t *testing.T, ctx context.Context, all *AllApis, dataGen AppDeleteDataGen) {
	var err error
	// override store so we can inject data and check data
	api := all.appApi
	origStore := api.store
	deleteStore := &AppDeleteStore{
		AppStore: origStore,
		t:        t,
		allApis:  all,
	}
	api.store = deleteStore
	appInstRefsApiStore, appInstRefsApiUnwrap := wrapAppInstRefsTrackerStore(all.appInstRefsApi)
	defer func() {
		api.store = origStore
		appInstRefsApiUnwrap()
	}()

	// inject testObj directly, bypassing create checks/deps
	testObj, supportData := dataGen.GetAppTestObj()
	supportData.put(t, ctx, all)
	defer supportData.delete(t, ctx, all)
	origStore.Put(ctx, testObj, api.sync.syncWait)

	// Positive test, delete should succeed without any references.
	// The overrided store checks that delete prepare was set on the
	// object in the database before actually doing the delete.
	// This call back checks that any refs lookups are done in the
	// same stm as the delete prepare is set.
	deleteStore.putDeletePrepareCb = func() {
		// make sure ref objects reads happen in same stm
		// as delete prepare is set
		require.NotNil(t, deleteStore.putDeletePrepareSTM, "must set delete prepare in STM")
		require.NotNil(t, appInstRefsApiStore.getSTM, "must check for refs from AppInstRefs in STM")
		require.Equal(t, deleteStore.putDeletePrepareSTM, appInstRefsApiStore.getSTM, "delete prepare and ref check for AppInstRefs must be done in the same STM")
	}
	testObj, _ = dataGen.GetAppTestObj()
	_, err = api.DeleteApp(ctx, testObj)
	require.Nil(t, err, "delete must succeed with no refs")
	deleteStore.putDeletePrepareCb = nil

	// Negative test, inject testObj with delete prepare already set.
	testObj, _ = dataGen.GetAppTestObj()
	testObj.DeletePrepare = true
	origStore.Put(ctx, testObj, api.sync.syncWait)
	// delete should fail with already being deleted
	testObj, _ = dataGen.GetAppTestObj()
	_, err = api.DeleteApp(ctx, testObj)
	require.NotNil(t, err, "delete must fail if already being deleted")
	require.Equal(t, testObj.GetKey().BeingDeletedError().Error(), err.Error())
	// failed delete must not interfere with existing delete prepare state
	require.True(t, deleteStore.getDeletePrepare(ctx, testObj), "delete prepare must not be modified by failed delete")

	// inject testObj for ref tests
	testObj, _ = dataGen.GetAppTestObj()
	origStore.Put(ctx, testObj, api.sync.syncWait)

	{
		// Negative test, TrustPolicyException refers to App.
		// The cb will inject refBy obj after delete prepare has been set.
		refBy, supportData := dataGen.GetTrustPolicyExceptionKeyAppKeyRef(testObj.GetKey())
		supportData.put(t, ctx, all)
		deleteStore.putDeletePrepareCb = func() {
			all.trustPolicyExceptionApi.store.Put(ctx, refBy, all.trustPolicyExceptionApi.sync.syncWait)
		}
		testObj, _ = dataGen.GetAppTestObj()
		_, err = api.DeleteApp(ctx, testObj)
		require.NotNil(t, err, "must fail delete with ref from TrustPolicyException")
		require.Contains(t, err.Error(), "in use")
		// check that delete prepare was reset
		deleteStore.requireUndoDeletePrepare(ctx, testObj)
		// remove TrustPolicyException obj
		_, err = all.trustPolicyExceptionApi.store.Delete(ctx, refBy, all.trustPolicyExceptionApi.sync.syncWait)
		require.Nil(t, err, "cleanup ref from TrustPolicyException must succeed")
		deleteStore.putDeletePrepareCb = nil
		supportData.delete(t, ctx, all)
	}
	{
		// Negative test, AppInstRefs refers to App via refs object.
		// Inject the refs object to trigger an "in use" error.
		refBy, supportData := dataGen.GetAppAppInstInstsRef(testObj.GetKey())
		supportData.put(t, ctx, all)
		_, err = all.appInstRefsApi.store.Put(ctx, refBy, all.appInstRefsApi.sync.syncWait)
		require.Nil(t, err)
		testObj, _ = dataGen.GetAppTestObj()
		_, err = api.DeleteApp(ctx, testObj)
		require.NotNil(t, err, "delete with ref from AppInstRefs must fail")
		require.Contains(t, err.Error(), "in use")
		// check that delete prepare was reset
		deleteStore.requireUndoDeletePrepare(ctx, testObj)
		// remove AppInstRefs obj
		_, err = all.appInstRefsApi.store.Delete(ctx, refBy, all.appInstRefsApi.sync.syncWait)
		require.Nil(t, err, "cleanup ref from AppInstRefs must succeed")
		supportData.delete(t, ctx, all)
	}

	// clean up testObj
	testObj, _ = dataGen.GetAppTestObj()
	_, err = api.DeleteApp(ctx, testObj)
	require.Nil(t, err, "cleanup must succeed")
}

func CreateAppAddRefsChecks(t *testing.T, ctx context.Context, all *AllApis, dataGen AllAddRefsDataGen) {
	var err error

	testObj, supportData := dataGen.GetCreateAppTestObj()
	supportData.put(t, ctx, all)
	{
		// set delete_prepare on referenced Flavor
		ref := supportData.getOneFlavor()
		require.NotNil(t, ref, "support data must include one referenced Flavor")
		ref.DeletePrepare = true
		_, err = all.flavorApi.store.Put(ctx, ref, all.flavorApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetCreateAppTestObj()
		_, err = all.appApi.CreateApp(ctx, testObj)
		require.NotNil(t, err, "CreateApp must fail with Flavor.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced Flavor
		ref.DeletePrepare = false
		_, err = all.flavorApi.store.Put(ctx, ref, all.flavorApi.sync.syncWait)
		require.Nil(t, err)
	}
	{
		// set delete_prepare on referenced AutoProvPolicy
		ref := supportData.getOneAutoProvPolicy()
		require.NotNil(t, ref, "support data must include one referenced AutoProvPolicy")
		ref.DeletePrepare = true
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetCreateAppTestObj()
		_, err = all.appApi.CreateApp(ctx, testObj)
		require.NotNil(t, err, "CreateApp must fail with AutoProvPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AutoProvPolicy
		ref.DeletePrepare = false
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}
	{
		// set delete_prepare on referenced AlertPolicy
		ref := supportData.getOneAlertPolicy()
		require.NotNil(t, ref, "support data must include one referenced AlertPolicy")
		ref.DeletePrepare = true
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetCreateAppTestObj()
		_, err = all.appApi.CreateApp(ctx, testObj)
		require.NotNil(t, err, "CreateApp must fail with AlertPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AlertPolicy
		ref.DeletePrepare = false
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}

	// wrap the stores so we can make sure all checks and changes
	// happen in the same STM.
	appApiStore, appApiUnwrap := wrapAppTrackerStore(all.appApi)
	defer appApiUnwrap()
	flavorApiStore, flavorApiUnwrap := wrapFlavorTrackerStore(all.flavorApi)
	defer flavorApiUnwrap()
	autoProvPolicyApiStore, autoProvPolicyApiUnwrap := wrapAutoProvPolicyTrackerStore(all.autoProvPolicyApi)
	defer autoProvPolicyApiUnwrap()
	alertPolicyApiStore, alertPolicyApiUnwrap := wrapAlertPolicyTrackerStore(all.alertPolicyApi)
	defer alertPolicyApiUnwrap()

	// CreateApp should succeed if no references are in delete_prepare
	testObj, _ = dataGen.GetCreateAppTestObj()
	_, err = all.appApi.CreateApp(ctx, testObj)
	require.Nil(t, err, "CreateApp should succeed if no references are in delete prepare")
	// make sure everything ran in the same STM
	require.NotNil(t, appApiStore.putSTM, "CreateApp put App must be done in STM")
	require.NotNil(t, flavorApiStore.getSTM, "CreateApp check Flavor ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, flavorApiStore.getSTM, "CreateApp check Flavor ref must be done in same STM as App put")
	require.NotNil(t, autoProvPolicyApiStore.getSTM, "CreateApp check AutoProvPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, autoProvPolicyApiStore.getSTM, "CreateApp check AutoProvPolicy ref must be done in same STM as App put")
	require.NotNil(t, alertPolicyApiStore.getSTM, "CreateApp check AlertPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, alertPolicyApiStore.getSTM, "CreateApp check AlertPolicy ref must be done in same STM as App put")

	// clean up
	// delete created test obj
	testObj, _ = dataGen.GetCreateAppTestObj()
	_, err = all.appApi.DeleteApp(ctx, testObj)
	require.Nil(t, err)
	supportData.delete(t, ctx, all)
}

func UpdateAppAddRefsChecks(t *testing.T, ctx context.Context, all *AllApis, dataGen AllAddRefsDataGen) {
	var err error

	testObj, supportData := dataGen.GetUpdateAppTestObj()
	supportData.put(t, ctx, all)
	{
		// set delete_prepare on referenced Flavor
		ref := supportData.getOneFlavor()
		require.NotNil(t, ref, "support data must include one referenced Flavor")
		ref.DeletePrepare = true
		_, err = all.flavorApi.store.Put(ctx, ref, all.flavorApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetUpdateAppTestObj()
		_, err = all.appApi.UpdateApp(ctx, testObj)
		require.NotNil(t, err, "UpdateApp must fail with Flavor.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced Flavor
		ref.DeletePrepare = false
		_, err = all.flavorApi.store.Put(ctx, ref, all.flavorApi.sync.syncWait)
		require.Nil(t, err)
	}
	{
		// set delete_prepare on referenced AutoProvPolicy
		ref := supportData.getOneAutoProvPolicy()
		require.NotNil(t, ref, "support data must include one referenced AutoProvPolicy")
		ref.DeletePrepare = true
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetUpdateAppTestObj()
		_, err = all.appApi.UpdateApp(ctx, testObj)
		require.NotNil(t, err, "UpdateApp must fail with AutoProvPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AutoProvPolicy
		ref.DeletePrepare = false
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}
	{
		// set delete_prepare on referenced AlertPolicy
		ref := supportData.getOneAlertPolicy()
		require.NotNil(t, ref, "support data must include one referenced AlertPolicy")
		ref.DeletePrepare = true
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetUpdateAppTestObj()
		_, err = all.appApi.UpdateApp(ctx, testObj)
		require.NotNil(t, err, "UpdateApp must fail with AlertPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AlertPolicy
		ref.DeletePrepare = false
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}

	// wrap the stores so we can make sure all checks and changes
	// happen in the same STM.
	appApiStore, appApiUnwrap := wrapAppTrackerStore(all.appApi)
	defer appApiUnwrap()
	flavorApiStore, flavorApiUnwrap := wrapFlavorTrackerStore(all.flavorApi)
	defer flavorApiUnwrap()
	autoProvPolicyApiStore, autoProvPolicyApiUnwrap := wrapAutoProvPolicyTrackerStore(all.autoProvPolicyApi)
	defer autoProvPolicyApiUnwrap()
	alertPolicyApiStore, alertPolicyApiUnwrap := wrapAlertPolicyTrackerStore(all.alertPolicyApi)
	defer alertPolicyApiUnwrap()

	// UpdateApp should succeed if no references are in delete_prepare
	testObj, _ = dataGen.GetUpdateAppTestObj()
	_, err = all.appApi.UpdateApp(ctx, testObj)
	require.Nil(t, err, "UpdateApp should succeed if no references are in delete prepare")
	// make sure everything ran in the same STM
	require.NotNil(t, appApiStore.putSTM, "UpdateApp put App must be done in STM")
	require.NotNil(t, flavorApiStore.getSTM, "UpdateApp check Flavor ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, flavorApiStore.getSTM, "UpdateApp check Flavor ref must be done in same STM as App put")
	require.NotNil(t, autoProvPolicyApiStore.getSTM, "UpdateApp check AutoProvPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, autoProvPolicyApiStore.getSTM, "UpdateApp check AutoProvPolicy ref must be done in same STM as App put")
	require.NotNil(t, alertPolicyApiStore.getSTM, "UpdateApp check AlertPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, alertPolicyApiStore.getSTM, "UpdateApp check AlertPolicy ref must be done in same STM as App put")

	// clean up
	supportData.delete(t, ctx, all)
}

func AddAppAutoProvPolicyAddRefsChecks(t *testing.T, ctx context.Context, all *AllApis, dataGen AllAddRefsDataGen) {
	var err error

	testObj, supportData := dataGen.GetAddAppAutoProvPolicyTestObj()
	supportData.put(t, ctx, all)
	{
		// set delete_prepare on referenced AutoProvPolicy
		ref := supportData.getOneAutoProvPolicy()
		require.NotNil(t, ref, "support data must include one referenced AutoProvPolicy")
		ref.DeletePrepare = true
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetAddAppAutoProvPolicyTestObj()
		_, err = all.appApi.AddAppAutoProvPolicy(ctx, testObj)
		require.NotNil(t, err, "AddAppAutoProvPolicy must fail with AutoProvPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AutoProvPolicy
		ref.DeletePrepare = false
		_, err = all.autoProvPolicyApi.store.Put(ctx, ref, all.autoProvPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}

	// wrap the stores so we can make sure all checks and changes
	// happen in the same STM.
	appApiStore, appApiUnwrap := wrapAppTrackerStore(all.appApi)
	defer appApiUnwrap()
	autoProvPolicyApiStore, autoProvPolicyApiUnwrap := wrapAutoProvPolicyTrackerStore(all.autoProvPolicyApi)
	defer autoProvPolicyApiUnwrap()

	// AddAppAutoProvPolicy should succeed if no references are in delete_prepare
	testObj, _ = dataGen.GetAddAppAutoProvPolicyTestObj()
	_, err = all.appApi.AddAppAutoProvPolicy(ctx, testObj)
	require.Nil(t, err, "AddAppAutoProvPolicy should succeed if no references are in delete prepare")
	// make sure everything ran in the same STM
	require.NotNil(t, appApiStore.putSTM, "AddAppAutoProvPolicy put App must be done in STM")
	require.NotNil(t, autoProvPolicyApiStore.getSTM, "AddAppAutoProvPolicy check AutoProvPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, autoProvPolicyApiStore.getSTM, "AddAppAutoProvPolicy check AutoProvPolicy ref must be done in same STM as App put")

	// clean up
	supportData.delete(t, ctx, all)
}

func AddAppAlertPolicyAddRefsChecks(t *testing.T, ctx context.Context, all *AllApis, dataGen AllAddRefsDataGen) {
	var err error

	testObj, supportData := dataGen.GetAddAppAlertPolicyTestObj()
	supportData.put(t, ctx, all)
	{
		// set delete_prepare on referenced AlertPolicy
		ref := supportData.getOneAlertPolicy()
		require.NotNil(t, ref, "support data must include one referenced AlertPolicy")
		ref.DeletePrepare = true
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
		// api call must fail with object being deleted
		testObj, _ = dataGen.GetAddAppAlertPolicyTestObj()
		_, err = all.appApi.AddAppAlertPolicy(ctx, testObj)
		require.NotNil(t, err, "AddAppAlertPolicy must fail with AlertPolicy.DeletePrepare set")
		require.Equal(t, ref.GetKey().BeingDeletedError().Error(), err.Error())
		// reset delete_prepare on referenced AlertPolicy
		ref.DeletePrepare = false
		_, err = all.alertPolicyApi.store.Put(ctx, ref, all.alertPolicyApi.sync.syncWait)
		require.Nil(t, err)
	}

	// wrap the stores so we can make sure all checks and changes
	// happen in the same STM.
	appApiStore, appApiUnwrap := wrapAppTrackerStore(all.appApi)
	defer appApiUnwrap()
	alertPolicyApiStore, alertPolicyApiUnwrap := wrapAlertPolicyTrackerStore(all.alertPolicyApi)
	defer alertPolicyApiUnwrap()

	// AddAppAlertPolicy should succeed if no references are in delete_prepare
	testObj, _ = dataGen.GetAddAppAlertPolicyTestObj()
	_, err = all.appApi.AddAppAlertPolicy(ctx, testObj)
	require.Nil(t, err, "AddAppAlertPolicy should succeed if no references are in delete prepare")
	// make sure everything ran in the same STM
	require.NotNil(t, appApiStore.putSTM, "AddAppAlertPolicy put App must be done in STM")
	require.NotNil(t, alertPolicyApiStore.getSTM, "AddAppAlertPolicy check AlertPolicy ref must be done in STM")
	require.Equal(t, appApiStore.putSTM, alertPolicyApiStore.getSTM, "AddAppAlertPolicy check AlertPolicy ref must be done in same STM as App put")

	// clean up
	supportData.delete(t, ctx, all)
}
