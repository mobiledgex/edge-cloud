// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: refs.proto

package main

import (
	fmt "fmt"
	"github.com/coreos/etcd/clientv3/concurrency"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/mobiledgex/edge-cloud/edgeproto"
	_ "github.com/mobiledgex/edge-cloud/protogen"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Auto-generated code: DO NOT EDIT

// CloudletRefsDeleteStore wraps around the usual
// store to instrument checks for tracked ref objects.
type CloudletRefsDeleteStore struct {
	edgeproto.CloudletRefsStore
	getRefSTM concurrency.STM
}

func (s *CloudletRefsDeleteStore) STMGet(stm concurrency.STM, key *edgeproto.CloudletKey, buf *edgeproto.CloudletRefs) bool {
	found := s.CloudletRefsStore.STMGet(stm, key, buf)
	s.getRefSTM = stm
	return found
}

// ClusterRefsDeleteStore wraps around the usual
// store to instrument checks for tracked ref objects.
type ClusterRefsDeleteStore struct {
	edgeproto.ClusterRefsStore
	getRefSTM concurrency.STM
}

func (s *ClusterRefsDeleteStore) STMGet(stm concurrency.STM, key *edgeproto.ClusterInstKey, buf *edgeproto.ClusterRefs) bool {
	found := s.ClusterRefsStore.STMGet(stm, key, buf)
	s.getRefSTM = stm
	return found
}

// AppInstRefsDeleteStore wraps around the usual
// store to instrument checks for tracked ref objects.
type AppInstRefsDeleteStore struct {
	edgeproto.AppInstRefsStore
	getRefSTM concurrency.STM
}

func (s *AppInstRefsDeleteStore) STMGet(stm concurrency.STM, key *edgeproto.AppKey, buf *edgeproto.AppInstRefs) bool {
	found := s.AppInstRefsStore.STMGet(stm, key, buf)
	s.getRefSTM = stm
	return found
}
